ARM GAS  /tmp/ccTV2SzP.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   3              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   4              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   5              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   6              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   7              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
   8              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
   9              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  10              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  11              		.file	"tasks.c"
  12              	@ GNU C89 (Arch Repository) version 7.1.0 (arm-none-eabi)
  13              	@	compiled by GNU C version 6.3.1 20170306, GMP version 6.1.2, MPFR version 3.1.5-p2, MPC version 1
  14              	
  15              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  16              	@ options passed:  -I . -I config -I system -I core -I drivers -I FreeRTOS
  17              	@ -I FreeRTOS/include -I FreeRTOS/portable/GCC/ARM_CM3 -I FreeRTOS/portable
  18              	@ -I tasks/rc_task_leds -I tasks/rc_task_xbee -I modules/rc_leds
  19              	@ -I modules/rc_xbee -I modules/rc_scheduler -I drivers/rc_system
  20              	@ -I drivers/rc_gpio -I drivers/rc_uart -I drivers/rc_pinsel
  21              	@ -I drivers/rc_timer -I drivers/rc_adc -imultilib armv7-m -MD out/tasks.d
  22              	@ -MF out/tasks.d -MP -MQ out/tasks.o -D__USES_INITFINI__ FreeRTOS/tasks.c
  23              	@ -mcpu=cortex-m3 -mthumb -auxbase-strip out/tasks.o -g -ggdb3 -O0 -Wall
  24              	@ -Wstrict-prototypes -Wextra -std=gnu90 -ffunction-sections
  25              	@ -fdata-sections -fverbose-asm
  26              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  27              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  28              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  29              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  30              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  31              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  32              	@ -fearly-inlining -feliminate-unused-debug-types -ffp-int-builtin-inexact
  33              	@ -ffunction-cse -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique
  34              	@ -fident -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  35              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  36              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  37              	@ -fmerge-debug-strings -fpeephole -fplt -fprefetch-loop-arrays
  38              	@ -freg-struct-return -fsched-critical-path-heuristic
  39              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  40              	@ -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  41              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  42              	@ -fsemantic-interposition -fshow-column -fshrink-wrap-separate
  43              	@ -fsigned-zeros -fsplit-ivs-in-unroller -fssa-backprop -fstdarg-opt
  44              	@ -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math -ftree-cselim
  45              	@ -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  46              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  47              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  48              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  49              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  50              	@ -munaligned-access -mvectorize-with-neon-quad
  51              	
  52              		.text
  53              	.Ltext0:
  54              		.cfi_sections	.debug_frame
  55              		.global	pxCurrentTCB
  56              		.section	.bss.pxCurrentTCB,"aw",%nobits
  57              		.align	2
ARM GAS  /tmp/ccTV2SzP.s 			page 2


  58              		.type	pxCurrentTCB, %object
  59              		.size	pxCurrentTCB, 4
  60              	pxCurrentTCB:
  61 0000 00000000 		.space	4
  62              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  63              		.align	2
  64              		.type	pxReadyTasksLists, %object
  65              		.size	pxReadyTasksLists, 160
  66              	pxReadyTasksLists:
  67 0000 00000000 		.space	160
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  69              		.align	2
  70              		.type	xDelayedTaskList1, %object
  71              		.size	xDelayedTaskList1, 20
  72              	xDelayedTaskList1:
  73 0000 00000000 		.space	20
  73      00000000 
  73      00000000 
  73      00000000 
  73      00000000 
  74              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  75              		.align	2
  76              		.type	xDelayedTaskList2, %object
  77              		.size	xDelayedTaskList2, 20
  78              	xDelayedTaskList2:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  81              		.align	2
  82              		.type	pxDelayedTaskList, %object
  83              		.size	pxDelayedTaskList, 4
  84              	pxDelayedTaskList:
  85 0000 00000000 		.space	4
  86              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  87              		.align	2
  88              		.type	pxOverflowDelayedTaskList, %object
  89              		.size	pxOverflowDelayedTaskList, 4
  90              	pxOverflowDelayedTaskList:
  91 0000 00000000 		.space	4
  92              		.section	.bss.xPendingReadyList,"aw",%nobits
  93              		.align	2
  94              		.type	xPendingReadyList, %object
  95              		.size	xPendingReadyList, 20
  96              	xPendingReadyList:
  97 0000 00000000 		.space	20
  97      00000000 
  97      00000000 
  97      00000000 
  97      00000000 
  98              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
ARM GAS  /tmp/ccTV2SzP.s 			page 3


  99              		.align	2
 100              		.type	xTasksWaitingTermination, %object
 101              		.size	xTasksWaitingTermination, 20
 102              	xTasksWaitingTermination:
 103 0000 00000000 		.space	20
 103      00000000 
 103      00000000 
 103      00000000 
 103      00000000 
 104              		.section	.bss.uxTasksDeleted,"aw",%nobits
 105              		.align	2
 106              		.type	uxTasksDeleted, %object
 107              		.size	uxTasksDeleted, 4
 108              	uxTasksDeleted:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 111              		.align	2
 112              		.type	xSuspendedTaskList, %object
 113              		.size	xSuspendedTaskList, 20
 114              	xSuspendedTaskList:
 115 0000 00000000 		.space	20
 115      00000000 
 115      00000000 
 115      00000000 
 115      00000000 
 116              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 117              		.align	2
 118              		.type	uxCurrentNumberOfTasks, %object
 119              		.size	uxCurrentNumberOfTasks, 4
 120              	uxCurrentNumberOfTasks:
 121 0000 00000000 		.space	4
 122              		.section	.bss.xTickCount,"aw",%nobits
 123              		.align	2
 124              		.type	xTickCount, %object
 125              		.size	xTickCount, 4
 126              	xTickCount:
 127 0000 00000000 		.space	4
 128              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 129              		.align	2
 130              		.type	uxTopReadyPriority, %object
 131              		.size	uxTopReadyPriority, 4
 132              	uxTopReadyPriority:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xSchedulerRunning,"aw",%nobits
 135              		.align	2
 136              		.type	xSchedulerRunning, %object
 137              		.size	xSchedulerRunning, 4
 138              	xSchedulerRunning:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxPendedTicks,"aw",%nobits
 141              		.align	2
 142              		.type	uxPendedTicks, %object
 143              		.size	uxPendedTicks, 4
 144              	uxPendedTicks:
 145 0000 00000000 		.space	4
 146              		.section	.bss.xYieldPending,"aw",%nobits
 147              		.align	2
ARM GAS  /tmp/ccTV2SzP.s 			page 4


 148              		.type	xYieldPending, %object
 149              		.size	xYieldPending, 4
 150              	xYieldPending:
 151 0000 00000000 		.space	4
 152              		.section	.bss.xNumOfOverflows,"aw",%nobits
 153              		.align	2
 154              		.type	xNumOfOverflows, %object
 155              		.size	xNumOfOverflows, 4
 156              	xNumOfOverflows:
 157 0000 00000000 		.space	4
 158              		.section	.bss.uxTaskNumber,"aw",%nobits
 159              		.align	2
 160              		.type	uxTaskNumber, %object
 161              		.size	uxTaskNumber, 4
 162              	uxTaskNumber:
 163 0000 00000000 		.space	4
 164              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 165              		.align	2
 166              		.type	xNextTaskUnblockTime, %object
 167              		.size	xNextTaskUnblockTime, 4
 168              	xNextTaskUnblockTime:
 169 0000 FFFFFFFF 		.word	-1
 170              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 171              		.align	2
 172              		.type	uxSchedulerSuspended, %object
 173              		.size	uxSchedulerSuspended, 4
 174              	uxSchedulerSuspended:
 175 0000 00000000 		.space	4
 176              		.section	.text.xTaskGenericCreate,"ax",%progbits
 177              		.align	1
 178              		.global	xTaskGenericCreate
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 183              		.type	xTaskGenericCreate, %function
 184              	xTaskGenericCreate:
 185              	.LFB1:
 186              		.file 1 "FreeRTOS/tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/tasks.c ****     All rights reserved
   4:FreeRTOS/tasks.c **** 
   5:FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/tasks.c **** 
   7:FreeRTOS/tasks.c ****     ***************************************************************************
   8:FreeRTOS/tasks.c ****      *                                                                       *
   9:FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/tasks.c ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/tasks.c ****      *                                                                       *
  13:FreeRTOS/tasks.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/tasks.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/tasks.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/tasks.c ****      *                                                                       *
  17:FreeRTOS/tasks.c ****      *    Thank you!                                                         *
  18:FreeRTOS/tasks.c ****      *                                                                       *
ARM GAS  /tmp/ccTV2SzP.s 			page 5


  19:FreeRTOS/tasks.c ****     ***************************************************************************
  20:FreeRTOS/tasks.c **** 
  21:FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/tasks.c **** 
  23:FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/tasks.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/tasks.c **** 
  27:FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/tasks.c **** 
  32:FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/tasks.c **** 
  37:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  38:FreeRTOS/tasks.c **** 
  39:FreeRTOS/tasks.c ****     ***************************************************************************
  40:FreeRTOS/tasks.c ****      *                                                                       *
  41:FreeRTOS/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/tasks.c ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/tasks.c ****      *                                                                       *
  44:FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/tasks.c ****      *                                                                       *
  46:FreeRTOS/tasks.c ****     ***************************************************************************
  47:FreeRTOS/tasks.c **** 
  48:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/tasks.c ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/tasks.c **** 
  51:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/tasks.c **** 
  55:FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/tasks.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  62:FreeRTOS/tasks.c **** 
  63:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  64:FreeRTOS/tasks.c **** */
  65:FreeRTOS/tasks.c **** 
  66:FreeRTOS/tasks.c **** /* Standard includes. */
  67:FreeRTOS/tasks.c **** #include <stdlib.h>
  68:FreeRTOS/tasks.c **** #include <string.h>
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  71:FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  72:FreeRTOS/tasks.c **** task.h is included from an application file. */
  73:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  74:FreeRTOS/tasks.c **** 
  75:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
ARM GAS  /tmp/ccTV2SzP.s 			page 6


  76:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  77:FreeRTOS/tasks.c **** #include "task.h"
  78:FreeRTOS/tasks.c **** #include "timers.h"
  79:FreeRTOS/tasks.c **** #include "StackMacros.h"
  80:FreeRTOS/tasks.c **** 
  81:FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  82:FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  83:FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  84:FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  85:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  86:FreeRTOS/tasks.c **** 
  87:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  88:FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  89:FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  90:FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  91:FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  92:FreeRTOS/tasks.c **** 	#include <stdio.h>
  93:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  94:FreeRTOS/tasks.c **** 
  95:FreeRTOS/tasks.c **** /* Sanity check the configuration. */
  96:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
  97:FreeRTOS/tasks.c **** 	#if INCLUDE_vTaskSuspend != 1
  98:FreeRTOS/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
  99:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 100:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 101:FreeRTOS/tasks.c **** 
 102:FreeRTOS/tasks.c **** /*
 103:FreeRTOS/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 104:FreeRTOS/tasks.c ****  */
 105:FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 106:FreeRTOS/tasks.c **** 
 107:FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 108:FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 109:FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 110:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 111:FreeRTOS/tasks.c **** #else
 112:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 113:FreeRTOS/tasks.c **** #endif
 114:FreeRTOS/tasks.c **** 
 115:FreeRTOS/tasks.c **** /*
 116:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 117:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 118:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 119:FreeRTOS/tasks.c ****  */
 120:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 121:FreeRTOS/tasks.c **** {
 122:FreeRTOS/tasks.c **** 	volatile StackT_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the tasks s
 123:FreeRTOS/tasks.c **** 
 124:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 125:FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 126:FreeRTOS/tasks.c **** 	#endif
 127:FreeRTOS/tasks.c **** 
 128:FreeRTOS/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 129:FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 130:FreeRTOS/tasks.c **** 	UBaseT_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 131:FreeRTOS/tasks.c **** 	StackT_t			*pxStack;			/*< Points to the start of the stack. */
 132:FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
ARM GAS  /tmp/ccTV2SzP.s 			page 7


 133:FreeRTOS/tasks.c **** 
 134:FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 135:FreeRTOS/tasks.c **** 		StackT_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack gro
 136:FreeRTOS/tasks.c **** 	#endif
 137:FreeRTOS/tasks.c **** 
 138:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 139:FreeRTOS/tasks.c **** 		UBaseT_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do not 
 140:FreeRTOS/tasks.c **** 	#endif
 141:FreeRTOS/tasks.c **** 
 142:FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 143:FreeRTOS/tasks.c **** 		UBaseT_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It allow
 144:FreeRTOS/tasks.c **** 		UBaseT_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. */
 145:FreeRTOS/tasks.c **** 	#endif
 146:FreeRTOS/tasks.c **** 
 147:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 148:FreeRTOS/tasks.c **** 		UBaseT_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority inhe
 149:FreeRTOS/tasks.c **** 		UBaseT_t 	uxMutexesHeld;
 150:FreeRTOS/tasks.c **** 	#endif
 151:FreeRTOS/tasks.c **** 
 152:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 153:FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 154:FreeRTOS/tasks.c **** 	#endif
 155:FreeRTOS/tasks.c **** 
 156:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 157:FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 158:FreeRTOS/tasks.c **** 	#endif
 159:FreeRTOS/tasks.c **** 
 160:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 161:FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 162:FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 163:FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 164:FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 165:FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 166:FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 167:FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 168:FreeRTOS/tasks.c **** 		struct 	_reent xNewLib_reent;
 169:FreeRTOS/tasks.c **** 	#endif
 170:FreeRTOS/tasks.c **** 
 171:FreeRTOS/tasks.c **** } tskTCB;
 172:FreeRTOS/tasks.c **** 
 173:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 174:FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 175:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 176:FreeRTOS/tasks.c **** 
 177:FreeRTOS/tasks.c **** /*
 178:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 179:FreeRTOS/tasks.c ****  * be global, rather than file scope.
 180:FreeRTOS/tasks.c ****  */
 181:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 182:FreeRTOS/tasks.c **** 	#define static
 183:FreeRTOS/tasks.c **** #endif
 184:FreeRTOS/tasks.c **** 
 185:FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 186:FreeRTOS/tasks.c **** static variables must be declared volatile. */
 187:FreeRTOS/tasks.c **** 
 188:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 189:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 8


 190:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 191:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 192:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 193:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 194:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 195:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 196:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 197:FreeRTOS/tasks.c **** 
 198:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 199:FreeRTOS/tasks.c **** 
 200:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 201:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseT_t uxTasksDeleted = ( UBaseT_t ) 0U;
 202:FreeRTOS/tasks.c **** 
 203:FreeRTOS/tasks.c **** #endif
 204:FreeRTOS/tasks.c **** 
 205:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 206:FreeRTOS/tasks.c **** 
 207:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 208:FreeRTOS/tasks.c **** 
 209:FreeRTOS/tasks.c **** #endif
 210:FreeRTOS/tasks.c **** 
 211:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 212:FreeRTOS/tasks.c **** 
 213:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 214:FreeRTOS/tasks.c **** 
 215:FreeRTOS/tasks.c **** #endif
 216:FreeRTOS/tasks.c **** 
 217:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 218:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxCurrentNumberOfTasks 	= ( UBaseT_t ) 0U;
 219:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xTickCount 				= ( TickT_t ) 0U;
 220:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 221:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xSchedulerRunning 		= pdFALSE;
 222:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxPendedTicks 			= ( UBaseT_t ) 0U;
 223:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xYieldPending 			= pdFALSE;
 224:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xNumOfOverflows 			= ( BaseT_t ) 0;
 225:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseT_t uxTaskNumber 					= ( UBaseT_t ) 0U;
 226:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xNextTaskUnblockTime		= portMAX_DELAY;
 227:FreeRTOS/tasks.c **** 
 228:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 229:FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 230:FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 231:FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 232:FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 233:FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 234:FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 235:FreeRTOS/tasks.c **** accessed from a critical section. */
 236:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxSchedulerSuspended	= ( UBaseT_t ) pdFALSE;
 237:FreeRTOS/tasks.c **** 
 238:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 239:FreeRTOS/tasks.c **** 
 240:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 241:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 242:FreeRTOS/tasks.c **** 
 243:FreeRTOS/tasks.c **** #endif
 244:FreeRTOS/tasks.c **** 
 245:FreeRTOS/tasks.c **** /*lint +e956 */
 246:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 9


 247:FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 248:FreeRTOS/tasks.c **** 
 249:FreeRTOS/tasks.c **** /*
 250:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 251:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 252:FreeRTOS/tasks.c ****  */
 253:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 254:FreeRTOS/tasks.c **** 
 255:FreeRTOS/tasks.c **** /*
 256:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 257:FreeRTOS/tasks.c ****  */
 258:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 259:FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 260:FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 261:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 262:FreeRTOS/tasks.c **** 
 263:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 264:FreeRTOS/tasks.c **** 
 265:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 266:FreeRTOS/tasks.c **** 
 267:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 268:FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 269:FreeRTOS/tasks.c **** 	microcontroller architecture. */
 270:FreeRTOS/tasks.c **** 
 271:FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 272:FreeRTOS/tasks.c **** 	state task. */
 273:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 274:FreeRTOS/tasks.c **** 	{																									\
 275:FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 276:FreeRTOS/tasks.c **** 		{																								\
 277:FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 278:FreeRTOS/tasks.c **** 		}																								\
 279:FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 280:FreeRTOS/tasks.c **** 
 281:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 282:FreeRTOS/tasks.c **** 
 283:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 284:FreeRTOS/tasks.c **** 	{																									\
 285:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 286:FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 287:FreeRTOS/tasks.c **** 		{																								\
 288:FreeRTOS/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 289:FreeRTOS/tasks.c **** 			--uxTopReadyPriority;																		\
 290:FreeRTOS/tasks.c **** 		}																								\
 291:FreeRTOS/tasks.c **** 																										\
 292:FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 293:FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 294:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 295:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 296:FreeRTOS/tasks.c **** 
 297:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 298:FreeRTOS/tasks.c **** 
 299:FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 300:FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 301:FreeRTOS/tasks.c **** 	being used. */
 302:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 303:FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
ARM GAS  /tmp/ccTV2SzP.s 			page 10


 304:FreeRTOS/tasks.c **** 
 305:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 306:FreeRTOS/tasks.c **** 
 307:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 308:FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 309:FreeRTOS/tasks.c **** 	architecture being used. */
 310:FreeRTOS/tasks.c **** 
 311:FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 312:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 313:FreeRTOS/tasks.c **** 
 314:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 315:FreeRTOS/tasks.c **** 
 316:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 317:FreeRTOS/tasks.c **** 	{																								\
 318:FreeRTOS/tasks.c **** 	UBaseT_t uxTopPriority;																		\
 319:FreeRTOS/tasks.c **** 																									\
 320:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 321:FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 322:FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 323:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 324:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 325:FreeRTOS/tasks.c **** 
 326:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 327:FreeRTOS/tasks.c **** 
 328:FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 329:FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 330:FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 331:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 332:FreeRTOS/tasks.c **** 	{																									\
 333:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseT_t ) 0 )	\
 334:FreeRTOS/tasks.c **** 		{																								\
 335:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 336:FreeRTOS/tasks.c **** 		}																								\
 337:FreeRTOS/tasks.c **** 	}
 338:FreeRTOS/tasks.c **** 
 339:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 340:FreeRTOS/tasks.c **** 
 341:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 342:FreeRTOS/tasks.c **** 
 343:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 344:FreeRTOS/tasks.c **** count overflows. */
 345:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 346:FreeRTOS/tasks.c **** {																									\
 347:FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 348:FreeRTOS/tasks.c **** 																									\
 349:FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 350:FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 351:FreeRTOS/tasks.c **** 																									\
 352:FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 353:FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 354:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 355:FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 356:FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 357:FreeRTOS/tasks.c **** }
 358:FreeRTOS/tasks.c **** 
 359:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 360:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 11


 361:FreeRTOS/tasks.c **** /*
 362:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 363:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 364:FreeRTOS/tasks.c ****  */
 365:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 366:FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )															\
 367:FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 368:FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 369:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 370:FreeRTOS/tasks.c **** 
 371:FreeRTOS/tasks.c **** /*
 372:FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 373:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 374:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 375:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 376:FreeRTOS/tasks.c ****  */
 377:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 378:FreeRTOS/tasks.c **** 
 379:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 380:FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 381:FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 382:FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 383:FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 384:FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 385:FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 386:FreeRTOS/tasks.c **** to its original value when it is released. */
 387:FreeRTOS/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 388:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 389:FreeRTOS/tasks.c **** #else
 390:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 391:FreeRTOS/tasks.c **** #endif
 392:FreeRTOS/tasks.c **** 
 393:FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 394:FreeRTOS/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 395:FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 396:FreeRTOS/tasks.c **** #endif
 397:FreeRTOS/tasks.c **** 
 398:FreeRTOS/tasks.c **** #if configUSE_TICK_HOOK > 0
 399:FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 400:FreeRTOS/tasks.c **** #endif
 401:FreeRTOS/tasks.c **** 
 402:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 403:FreeRTOS/tasks.c **** 
 404:FreeRTOS/tasks.c **** /*
 405:FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 406:FreeRTOS/tasks.c ****  * into the TCB structure.
 407:FreeRTOS/tasks.c ****  */
 408:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
 409:FreeRTOS/tasks.c **** 
 410:FreeRTOS/tasks.c **** /**
 411:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 412:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 413:FreeRTOS/tasks.c ****  * is in any other state.
 414:FreeRTOS/tasks.c ****  */
 415:FreeRTOS/tasks.c **** static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 416:FreeRTOS/tasks.c **** 
 417:FreeRTOS/tasks.c **** /*
ARM GAS  /tmp/ccTV2SzP.s 			page 12


 418:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 419:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 420:FreeRTOS/tasks.c ****  */
 421:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 422:FreeRTOS/tasks.c **** 
 423:FreeRTOS/tasks.c **** /*
 424:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 425:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 426:FreeRTOS/tasks.c ****  * creation of the first user task.
 427:FreeRTOS/tasks.c ****  *
 428:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 429:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 430:FreeRTOS/tasks.c ****  *
 431:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 432:FreeRTOS/tasks.c ****  *
 433:FreeRTOS/tasks.c ****  */
 434:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 435:FreeRTOS/tasks.c **** 
 436:FreeRTOS/tasks.c **** /*
 437:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 438:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 439:FreeRTOS/tasks.c ****  *
 440:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 441:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 442:FreeRTOS/tasks.c ****  */
 443:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 444:FreeRTOS/tasks.c **** 
 445:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 446:FreeRTOS/tasks.c **** 
 447:FreeRTOS/tasks.c **** #endif
 448:FreeRTOS/tasks.c **** 
 449:FreeRTOS/tasks.c **** /*
 450:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 451:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 452:FreeRTOS/tasks.c ****  * and its TCB deleted.
 453:FreeRTOS/tasks.c ****  */
 454:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 455:FreeRTOS/tasks.c **** 
 456:FreeRTOS/tasks.c **** /*
 457:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 458:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 459:FreeRTOS/tasks.c ****  */
 460:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake ) PRIVILEGED_FUNCTION;
 461:FreeRTOS/tasks.c **** 
 462:FreeRTOS/tasks.c **** /*
 463:FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 464:FreeRTOS/tasks.c ****  * allocation was successful.
 465:FreeRTOS/tasks.c ****  */
 466:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
 467:FreeRTOS/tasks.c **** 
 468:FreeRTOS/tasks.c **** /*
 469:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 470:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 471:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 472:FreeRTOS/tasks.c ****  *
 473:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 474:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  /tmp/ccTV2SzP.s 			page 13


 475:FreeRTOS/tasks.c ****  */
 476:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 477:FreeRTOS/tasks.c **** 
 478:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
 479:FreeRTOS/tasks.c **** 
 480:FreeRTOS/tasks.c **** #endif
 481:FreeRTOS/tasks.c **** 
 482:FreeRTOS/tasks.c **** /*
 483:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 484:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 485:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 486:FreeRTOS/tasks.c ****  */
 487:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 488:FreeRTOS/tasks.c **** 
 489:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 490:FreeRTOS/tasks.c **** 
 491:FreeRTOS/tasks.c **** #endif
 492:FreeRTOS/tasks.c **** 
 493:FreeRTOS/tasks.c **** /*
 494:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 495:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 496:FreeRTOS/tasks.c ****  *
 497:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 498:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 499:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 500:FreeRTOS/tasks.c ****  * set to a value other than 1.
 501:FreeRTOS/tasks.c ****  */
 502:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 503:FreeRTOS/tasks.c **** 
 504:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 505:FreeRTOS/tasks.c **** 
 506:FreeRTOS/tasks.c **** #endif
 507:FreeRTOS/tasks.c **** 
 508:FreeRTOS/tasks.c **** /*
 509:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 510:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 511:FreeRTOS/tasks.c ****  */
 512:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 513:FreeRTOS/tasks.c **** 
 514:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 515:FreeRTOS/tasks.c **** 
 516:FreeRTOS/tasks.c **** BaseT_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t us
 517:FreeRTOS/tasks.c **** {
 187              		.loc 1 517 0
 188              		.cfi_startproc
 189              		@ args = 16, pretend = 0, frame = 32
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}	@
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 8AB0     		sub	sp, sp, #40	@,,
 196              		.cfi_def_cfa_offset 48
 197 0004 02AF     		add	r7, sp, #8	@,,
 198              		.cfi_def_cfa 7, 40
 199 0006 F860     		str	r0, [r7, #12]	@ pxTaskCode, pxTaskCode
 200 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
ARM GAS  /tmp/ccTV2SzP.s 			page 14


 201 000a 3B60     		str	r3, [r7]	@ pvParameters, pvParameters
 202 000c 1346     		mov	r3, r2	@ movhi	@ tmp142, tmp141
 203 000e FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp142, usStackDepth
 204              	@ FreeRTOS/tasks.c:521: 	configASSERT( pxTaskCode );
 518:FreeRTOS/tasks.c **** BaseT_t xReturn;
 519:FreeRTOS/tasks.c **** TCB_t * pxNewTCB;
 520:FreeRTOS/tasks.c **** 
 521:FreeRTOS/tasks.c **** 	configASSERT( pxTaskCode );
 205              		.loc 1 521 0
 206 0010 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTaskCode
 207 0012 002B     		cmp	r3, #0	@ tmp143,
 208 0014 02D1     		bne	.L2	@,
 209              	@ FreeRTOS/tasks.c:521: 	configASSERT( pxTaskCode );
 210              		.loc 1 521 0 is_stmt 0 discriminator 1
 211 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 212              	.L3:
 213 001a FEE7     		b	.L3	@
 214              	.L2:
 215              	@ FreeRTOS/tasks.c:522: 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORI
 522:FreeRTOS/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 216              		.loc 1 522 0 is_stmt 1
 217 001c BB6A     		ldr	r3, [r7, #40]	@ tmp144, uxPriority
 218 001e 072B     		cmp	r3, #7	@ tmp144,
 219 0020 02D9     		bls	.L4	@,
 220              	@ FreeRTOS/tasks.c:522: 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORI
 221              		.loc 1 522 0 is_stmt 0 discriminator 1
 222 0022 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 223              	.L5:
 224              	@ FreeRTOS/tasks.c:522: 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORI
 225              		.loc 1 522 0 discriminator 2
 226 0026 FEE7     		b	.L5	@
 227              	.L4:
 228              	@ FreeRTOS/tasks.c:526: 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 523:FreeRTOS/tasks.c **** 
 524:FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 525:FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 526:FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 229              		.loc 1 526 0 is_stmt 1
 230 0028 FB88     		ldrh	r3, [r7, #6]	@ tmp145, usStackDepth
 231 002a 396B     		ldr	r1, [r7, #48]	@, puxStackBuffer
 232 002c 1846     		mov	r0, r3	@, tmp145
 233 002e FFF7FEFF 		bl	prvAllocateTCBAndStack	@
 234 0032 B861     		str	r0, [r7, #24]	@, pxNewTCB
 235              	@ FreeRTOS/tasks.c:528: 	if( pxNewTCB != NULL )
 527:FreeRTOS/tasks.c **** 
 528:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 236              		.loc 1 528 0
 237 0034 BB69     		ldr	r3, [r7, #24]	@ tmp146, pxNewTCB
 238 0036 002B     		cmp	r3, #0	@ tmp146,
 239 0038 71D0     		beq	.L6	@,
 240              	.LBB6:
 241              	@ FreeRTOS/tasks.c:552: 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 529:FreeRTOS/tasks.c **** 	{
 530:FreeRTOS/tasks.c **** 		StackT_t *pxTopOfStack;
 531:FreeRTOS/tasks.c **** 
 532:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 533:FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
ARM GAS  /tmp/ccTV2SzP.s 			page 15


 534:FreeRTOS/tasks.c **** 			BaseT_t xRunPrivileged;
 535:FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 536:FreeRTOS/tasks.c **** 			{
 537:FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 538:FreeRTOS/tasks.c **** 			}
 539:FreeRTOS/tasks.c **** 			else
 540:FreeRTOS/tasks.c **** 			{
 541:FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
 542:FreeRTOS/tasks.c **** 			}
 543:FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 544:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 545:FreeRTOS/tasks.c **** 
 546:FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 547:FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 548:FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 549:FreeRTOS/tasks.c **** 		required by the port. */
 550:FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 551:FreeRTOS/tasks.c **** 		{
 552:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 242              		.loc 1 552 0
 243 003a BB69     		ldr	r3, [r7, #24]	@ tmp147, pxNewTCB
 244 003c 1A6B     		ldr	r2, [r3, #48]	@ _1, pxNewTCB_41->pxStack
 245 003e FB88     		ldrh	r3, [r7, #6]	@ _2, usStackDepth
 246 0040 03F18043 		add	r3, r3, #1073741824	@ _3, _2,
 247 0044 013B     		subs	r3, r3, #1	@ _3, _3,
 248 0046 9B00     		lsls	r3, r3, #2	@ _4, _3,
 249 0048 1344     		add	r3, r3, r2	@ tmp148, _1
 250 004a 7B61     		str	r3, [r7, #20]	@ tmp148, pxTopOfStack
 251              	@ FreeRTOS/tasks.c:553: 			pxTopOfStack = ( StackT_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack
 553:FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackT_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZ
 252              		.loc 1 553 0
 253 004c 7B69     		ldr	r3, [r7, #20]	@ pxTopOfStack.0_5, pxTopOfStack
 254 004e 23F00703 		bic	r3, r3, #7	@ _6, pxTopOfStack.0_5,
 255 0052 7B61     		str	r3, [r7, #20]	@ _6, pxTopOfStack
 256              	@ FreeRTOS/tasks.c:556: 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER
 554:FreeRTOS/tasks.c **** 
 555:FreeRTOS/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 556:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 257              		.loc 1 556 0
 258 0054 7B69     		ldr	r3, [r7, #20]	@ pxTopOfStack.1_7, pxTopOfStack
 259 0056 03F00703 		and	r3, r3, #7	@ _8, pxTopOfStack.1_7,
 260 005a 002B     		cmp	r3, #0	@ _8,
 261 005c 02D0     		beq	.L7	@,
 262              	@ FreeRTOS/tasks.c:556: 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER
 263              		.loc 1 556 0 is_stmt 0 discriminator 1
 264 005e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 265              	.L8:
 266              	@ FreeRTOS/tasks.c:556: 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER
 267              		.loc 1 556 0 discriminator 3
 268 0062 FEE7     		b	.L8	@
 269              	.L7:
 270              	@ FreeRTOS/tasks.c:573: 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStac
 557:FreeRTOS/tasks.c **** 		}
 558:FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 559:FreeRTOS/tasks.c **** 		{
 560:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 561:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 16


 562:FreeRTOS/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 563:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 564:FreeRTOS/tasks.c **** 
 565:FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 566:FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 567:FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 568:FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 569:FreeRTOS/tasks.c **** 		}
 570:FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 571:FreeRTOS/tasks.c **** 
 572:FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 573:FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 271              		.loc 1 573 0 is_stmt 1
 272 0064 FB88     		ldrh	r3, [r7, #6]	@ tmp149, usStackDepth
 273 0066 0093     		str	r3, [sp]	@ tmp149,
 274 0068 7B6B     		ldr	r3, [r7, #52]	@, xRegions
 275 006a BA6A     		ldr	r2, [r7, #40]	@, uxPriority
 276 006c B968     		ldr	r1, [r7, #8]	@, pcName
 277 006e B869     		ldr	r0, [r7, #24]	@, pxNewTCB
 278 0070 FFF7FEFF 		bl	prvInitialiseTCBVariables	@
 279              	@ FreeRTOS/tasks.c:585: 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode
 574:FreeRTOS/tasks.c **** 
 575:FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 576:FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 577:FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 578:FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 579:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 580:FreeRTOS/tasks.c **** 		{
 581:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 582:FreeRTOS/tasks.c **** 		}
 583:FreeRTOS/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 584:FreeRTOS/tasks.c **** 		{
 585:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 280              		.loc 1 585 0
 281 0074 3A68     		ldr	r2, [r7]	@, pvParameters
 282 0076 F968     		ldr	r1, [r7, #12]	@, pxTaskCode
 283 0078 7869     		ldr	r0, [r7, #20]	@, pxTopOfStack
 284 007a FFF7FEFF 		bl	pxPortInitialiseStack	@
 285 007e 0246     		mov	r2, r0	@ _9,
 286 0080 BB69     		ldr	r3, [r7, #24]	@ tmp150, pxNewTCB
 287 0082 1A60     		str	r2, [r3]	@ _9, pxNewTCB_41->pxTopOfStack
 288              	@ FreeRTOS/tasks.c:589: 		if( ( void * ) pxCreatedTask != NULL )
 586:FreeRTOS/tasks.c **** 		}
 587:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 588:FreeRTOS/tasks.c **** 
 589:FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 289              		.loc 1 589 0
 290 0084 FB6A     		ldr	r3, [r7, #44]	@ tmp151, pxCreatedTask
 291 0086 002B     		cmp	r3, #0	@ tmp151,
 292 0088 02D0     		beq	.L9	@,
 293              	@ FreeRTOS/tasks.c:594: 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 590:FreeRTOS/tasks.c **** 		{
 591:FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 592:FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 593:FreeRTOS/tasks.c **** 			required.*/
 594:FreeRTOS/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 294              		.loc 1 594 0
ARM GAS  /tmp/ccTV2SzP.s 			page 17


 295 008a FB6A     		ldr	r3, [r7, #44]	@ tmp152, pxCreatedTask
 296 008c BA69     		ldr	r2, [r7, #24]	@ tmp153, pxNewTCB
 297 008e 1A60     		str	r2, [r3]	@ tmp153, *pxCreatedTask_51(D)
 298              	.L9:
 299              	@ FreeRTOS/tasks.c:603: 		taskENTER_CRITICAL();
 595:FreeRTOS/tasks.c **** 		}
 596:FreeRTOS/tasks.c **** 		else
 597:FreeRTOS/tasks.c **** 		{
 598:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 599:FreeRTOS/tasks.c **** 		}
 600:FreeRTOS/tasks.c **** 
 601:FreeRTOS/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 602:FreeRTOS/tasks.c **** 		updated. */
 603:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 300              		.loc 1 603 0
 301 0090 FFF7FEFF 		bl	vPortEnterCritical	@
 302              	@ FreeRTOS/tasks.c:605: 			uxCurrentNumberOfTasks++;
 604:FreeRTOS/tasks.c **** 		{
 605:FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 303              		.loc 1 605 0
 304 0094 2D4B     		ldr	r3, .L15	@ tmp154,
 305 0096 1B68     		ldr	r3, [r3]	@ uxCurrentNumberOfTasks.2_10, uxCurrentNumberOfTasks
 306 0098 0133     		adds	r3, r3, #1	@ _11, uxCurrentNumberOfTasks.2_10,
 307 009a 2C4A     		ldr	r2, .L15	@ tmp155,
 308 009c 1360     		str	r3, [r2]	@ _11, uxCurrentNumberOfTasks
 309              	@ FreeRTOS/tasks.c:606: 			if( pxCurrentTCB == NULL )
 606:FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 310              		.loc 1 606 0
 311 009e 2C4B     		ldr	r3, .L15+4	@ tmp156,
 312 00a0 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.3_12, pxCurrentTCB
 313 00a2 002B     		cmp	r3, #0	@ pxCurrentTCB.3_12,
 314 00a4 09D1     		bne	.L10	@,
 315              	@ FreeRTOS/tasks.c:610: 				pxCurrentTCB =  pxNewTCB;
 607:FreeRTOS/tasks.c **** 			{
 608:FreeRTOS/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 609:FreeRTOS/tasks.c **** 				the suspended state - make this the current task. */
 610:FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 316              		.loc 1 610 0
 317 00a6 2A4A     		ldr	r2, .L15+4	@ tmp157,
 318 00a8 BB69     		ldr	r3, [r7, #24]	@ tmp158, pxNewTCB
 319 00aa 1360     		str	r3, [r2]	@ tmp158, pxCurrentTCB
 320              	@ FreeRTOS/tasks.c:612: 				if( uxCurrentNumberOfTasks == ( UBaseT_t ) 1 )
 611:FreeRTOS/tasks.c **** 
 612:FreeRTOS/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseT_t ) 1 )
 321              		.loc 1 612 0
 322 00ac 274B     		ldr	r3, .L15	@ tmp159,
 323 00ae 1B68     		ldr	r3, [r3]	@ uxCurrentNumberOfTasks.4_13, uxCurrentNumberOfTasks
 324 00b0 012B     		cmp	r3, #1	@ uxCurrentNumberOfTasks.4_13,
 325 00b2 0FD1     		bne	.L11	@,
 326              	@ FreeRTOS/tasks.c:617: 					prvInitialiseTaskLists();
 613:FreeRTOS/tasks.c **** 				{
 614:FreeRTOS/tasks.c **** 					/* This is the first task to be created so do the preliminary
 615:FreeRTOS/tasks.c **** 					initialisation required.  We will not recover if this call
 616:FreeRTOS/tasks.c **** 					fails, but we will report the failure. */
 617:FreeRTOS/tasks.c **** 					prvInitialiseTaskLists();
 327              		.loc 1 617 0
 328 00b4 FFF7FEFF 		bl	prvInitialiseTaskLists	@
ARM GAS  /tmp/ccTV2SzP.s 			page 18


 329 00b8 0CE0     		b	.L11	@
 330              	.L10:
 331              	@ FreeRTOS/tasks.c:629: 				if( xSchedulerRunning == pdFALSE )
 618:FreeRTOS/tasks.c **** 				}
 619:FreeRTOS/tasks.c **** 				else
 620:FreeRTOS/tasks.c **** 				{
 621:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 622:FreeRTOS/tasks.c **** 				}
 623:FreeRTOS/tasks.c **** 			}
 624:FreeRTOS/tasks.c **** 			else
 625:FreeRTOS/tasks.c **** 			{
 626:FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 627:FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
 628:FreeRTOS/tasks.c **** 				so far. */
 629:FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 332              		.loc 1 629 0
 333 00ba 264B     		ldr	r3, .L15+8	@ tmp160,
 334 00bc 1B68     		ldr	r3, [r3]	@ xSchedulerRunning.5_14, xSchedulerRunning
 335 00be 002B     		cmp	r3, #0	@ xSchedulerRunning.5_14,
 336 00c0 08D1     		bne	.L11	@,
 337              	@ FreeRTOS/tasks.c:631: 					if( pxCurrentTCB->uxPriority <= uxPriority )
 630:FreeRTOS/tasks.c **** 				{
 631:FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 338              		.loc 1 631 0
 339 00c2 234B     		ldr	r3, .L15+4	@ tmp161,
 340 00c4 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.6_15, pxCurrentTCB
 341 00c6 DB6A     		ldr	r3, [r3, #44]	@ _16, pxCurrentTCB.6_15->uxPriority
 342 00c8 BA6A     		ldr	r2, [r7, #40]	@ tmp162, uxPriority
 343 00ca 9A42     		cmp	r2, r3	@ tmp162, _16
 344 00cc 02D3     		bcc	.L11	@,
 345              	@ FreeRTOS/tasks.c:633: 						pxCurrentTCB = pxNewTCB;
 632:FreeRTOS/tasks.c **** 					{
 633:FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 346              		.loc 1 633 0
 347 00ce 204A     		ldr	r2, .L15+4	@ tmp163,
 348 00d0 BB69     		ldr	r3, [r7, #24]	@ tmp164, pxNewTCB
 349 00d2 1360     		str	r3, [r2]	@ tmp164, pxCurrentTCB
 350              	.L11:
 351              	@ FreeRTOS/tasks.c:646: 			uxTaskNumber++;
 634:FreeRTOS/tasks.c **** 					}
 635:FreeRTOS/tasks.c **** 					else
 636:FreeRTOS/tasks.c **** 					{
 637:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 638:FreeRTOS/tasks.c **** 					}
 639:FreeRTOS/tasks.c **** 				}
 640:FreeRTOS/tasks.c **** 				else
 641:FreeRTOS/tasks.c **** 				{
 642:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 643:FreeRTOS/tasks.c **** 				}
 644:FreeRTOS/tasks.c **** 			}
 645:FreeRTOS/tasks.c **** 
 646:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 352              		.loc 1 646 0
 353 00d4 204B     		ldr	r3, .L15+12	@ tmp165,
 354 00d6 1B68     		ldr	r3, [r3]	@ uxTaskNumber.7_17, uxTaskNumber
 355 00d8 0133     		adds	r3, r3, #1	@ _18, uxTaskNumber.7_17,
 356 00da 1F4A     		ldr	r2, .L15+12	@ tmp166,
ARM GAS  /tmp/ccTV2SzP.s 			page 19


 357 00dc 1360     		str	r3, [r2]	@ _18, uxTaskNumber
 358              	@ FreeRTOS/tasks.c:651: 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 647:FreeRTOS/tasks.c **** 
 648:FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 649:FreeRTOS/tasks.c **** 			{
 650:FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 651:FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 359              		.loc 1 651 0
 360 00de 1E4B     		ldr	r3, .L15+12	@ tmp167,
 361 00e0 1A68     		ldr	r2, [r3]	@ uxTaskNumber.8_19, uxTaskNumber
 362 00e2 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxNewTCB
 363 00e4 1A64     		str	r2, [r3, #64]	@ uxTaskNumber.8_19, pxNewTCB_41->uxTCBNumber
 364              	@ FreeRTOS/tasks.c:656: 			prvAddTaskToReadyList( pxNewTCB );
 652:FreeRTOS/tasks.c **** 			}
 653:FreeRTOS/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 654:FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 655:FreeRTOS/tasks.c **** 
 656:FreeRTOS/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 365              		.loc 1 656 0
 366 00e6 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxNewTCB
 367 00e8 DB6A     		ldr	r3, [r3, #44]	@ _20, pxNewTCB_41->uxPriority
 368 00ea 0122     		movs	r2, #1	@ tmp170,
 369 00ec 9A40     		lsls	r2, r2, r3	@ _21, tmp170, _20
 370 00ee 1B4B     		ldr	r3, .L15+16	@ tmp171,
 371 00f0 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.9_22, uxTopReadyPriority
 372 00f2 1343     		orrs	r3, r3, r2	@, _23, uxTopReadyPriority.9_22, _21
 373 00f4 194A     		ldr	r2, .L15+16	@ tmp172,
 374 00f6 1360     		str	r3, [r2]	@ _23, uxTopReadyPriority
 375 00f8 BB69     		ldr	r3, [r7, #24]	@ tmp173, pxNewTCB
 376 00fa DA6A     		ldr	r2, [r3, #44]	@ _24, pxNewTCB_41->uxPriority
 377 00fc 1346     		mov	r3, r2	@ tmp174, _24
 378 00fe 9B00     		lsls	r3, r3, #2	@ tmp174, tmp174,
 379 0100 1344     		add	r3, r3, r2	@ tmp174, _24
 380 0102 9B00     		lsls	r3, r3, #2	@ tmp175, tmp174,
 381 0104 164A     		ldr	r2, .L15+20	@ tmp176,
 382 0106 1A44     		add	r2, r2, r3	@ _25, tmp174
 383 0108 BB69     		ldr	r3, [r7, #24]	@ tmp177, pxNewTCB
 384 010a 0433     		adds	r3, r3, #4	@ _26, tmp177,
 385 010c 1946     		mov	r1, r3	@, _26
 386 010e 1046     		mov	r0, r2	@, _25
 387 0110 FFF7FEFF 		bl	vListInsertEnd	@
 388              	@ FreeRTOS/tasks.c:658: 			xReturn = pdPASS;
 657:FreeRTOS/tasks.c **** 
 658:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 389              		.loc 1 658 0
 390 0114 0123     		movs	r3, #1	@ tmp178,
 391 0116 FB61     		str	r3, [r7, #28]	@ tmp178, xReturn
 392              	@ FreeRTOS/tasks.c:661: 		taskEXIT_CRITICAL();
 659:FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 660:FreeRTOS/tasks.c **** 		}
 661:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 393              		.loc 1 661 0
 394 0118 FFF7FEFF 		bl	vPortExitCritical	@
 395              	.LBE6:
 396 011c 02E0     		b	.L12	@
 397              	.L6:
 398              	@ FreeRTOS/tasks.c:665: 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
ARM GAS  /tmp/ccTV2SzP.s 			page 20


 662:FreeRTOS/tasks.c **** 	}
 663:FreeRTOS/tasks.c **** 	else
 664:FreeRTOS/tasks.c **** 	{
 665:FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 399              		.loc 1 665 0
 400 011e 4FF0FF33 		mov	r3, #-1	@ tmp179,
 401 0122 FB61     		str	r3, [r7, #28]	@ tmp179, xReturn
 402              	.L12:
 403              	@ FreeRTOS/tasks.c:669: 	if( xReturn == pdPASS )
 666:FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 667:FreeRTOS/tasks.c **** 	}
 668:FreeRTOS/tasks.c **** 
 669:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 404              		.loc 1 669 0
 405 0124 FB69     		ldr	r3, [r7, #28]	@ tmp180, xReturn
 406 0126 012B     		cmp	r3, #1	@ tmp180,
 407 0128 0BD1     		bne	.L13	@,
 408              	@ FreeRTOS/tasks.c:671: 		if( xSchedulerRunning != pdFALSE )
 670:FreeRTOS/tasks.c **** 	{
 671:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 409              		.loc 1 671 0
 410 012a 0A4B     		ldr	r3, .L15+8	@ tmp181,
 411 012c 1B68     		ldr	r3, [r3]	@ xSchedulerRunning.10_27, xSchedulerRunning
 412 012e 002B     		cmp	r3, #0	@ xSchedulerRunning.10_27,
 413 0130 07D0     		beq	.L13	@,
 414              	@ FreeRTOS/tasks.c:675: 			if( pxCurrentTCB->uxPriority < uxPriority )
 672:FreeRTOS/tasks.c **** 		{
 673:FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 674:FreeRTOS/tasks.c **** 			then it should run now. */
 675:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 415              		.loc 1 675 0
 416 0132 074B     		ldr	r3, .L15+4	@ tmp182,
 417 0134 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.11_28, pxCurrentTCB
 418 0136 DB6A     		ldr	r3, [r3, #44]	@ _29, pxCurrentTCB.11_28->uxPriority
 419 0138 BA6A     		ldr	r2, [r7, #40]	@ tmp183, uxPriority
 420 013a 9A42     		cmp	r2, r3	@ tmp183, _29
 421 013c 01D9     		bls	.L13	@,
 422              	@ FreeRTOS/tasks.c:677: 				taskYIELD_IF_USING_PREEMPTION();
 676:FreeRTOS/tasks.c **** 			{
 677:FreeRTOS/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 423              		.loc 1 677 0
 424 013e FFF7FEFF 		bl	vPortYield	@
 425              	.L13:
 426              	@ FreeRTOS/tasks.c:690: 	return xReturn;
 678:FreeRTOS/tasks.c **** 			}
 679:FreeRTOS/tasks.c **** 			else
 680:FreeRTOS/tasks.c **** 			{
 681:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 682:FreeRTOS/tasks.c **** 			}
 683:FreeRTOS/tasks.c **** 		}
 684:FreeRTOS/tasks.c **** 		else
 685:FreeRTOS/tasks.c **** 		{
 686:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 687:FreeRTOS/tasks.c **** 		}
 688:FreeRTOS/tasks.c **** 	}
 689:FreeRTOS/tasks.c **** 
 690:FreeRTOS/tasks.c **** 	return xReturn;
ARM GAS  /tmp/ccTV2SzP.s 			page 21


 427              		.loc 1 690 0
 428 0142 FB69     		ldr	r3, [r7, #28]	@ _66, xReturn
 429              	@ FreeRTOS/tasks.c:691: }
 691:FreeRTOS/tasks.c **** }
 430              		.loc 1 691 0
 431 0144 1846     		mov	r0, r3	@, <retval>
 432 0146 2037     		adds	r7, r7, #32	@,,
 433              		.cfi_def_cfa_offset 8
 434 0148 BD46     		mov	sp, r7	@,
 435              		.cfi_def_cfa_register 13
 436              		@ sp needed	@
 437 014a 80BD     		pop	{r7, pc}	@
 438              	.L16:
 439              		.align	2
 440              	.L15:
 441 014c 00000000 		.word	uxCurrentNumberOfTasks
 442 0150 00000000 		.word	pxCurrentTCB
 443 0154 00000000 		.word	xSchedulerRunning
 444 0158 00000000 		.word	uxTaskNumber
 445 015c 00000000 		.word	uxTopReadyPriority
 446 0160 00000000 		.word	pxReadyTasksLists
 447              		.cfi_endproc
 448              	.LFE1:
 449              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 450              		.section	.text.vTaskDelete,"ax",%progbits
 451              		.align	1
 452              		.global	vTaskDelete
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 456              		.fpu softvfp
 457              		.type	vTaskDelete, %function
 458              	vTaskDelete:
 459              	.LFB2:
 692:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 693:FreeRTOS/tasks.c **** 
 694:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 695:FreeRTOS/tasks.c **** 
 696:FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 697:FreeRTOS/tasks.c **** 	{
 460              		.loc 1 697 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 16
 463              		@ frame_needed = 1, uses_anonymous_args = 0
 464 0000 80B5     		push	{r7, lr}	@
 465              		.cfi_def_cfa_offset 8
 466              		.cfi_offset 7, -8
 467              		.cfi_offset 14, -4
 468 0002 84B0     		sub	sp, sp, #16	@,,
 469              		.cfi_def_cfa_offset 24
 470 0004 00AF     		add	r7, sp, #0	@,,
 471              		.cfi_def_cfa_register 7
 472 0006 7860     		str	r0, [r7, #4]	@ xTaskToDelete, xTaskToDelete
 473              	@ FreeRTOS/tasks.c:700: 		taskENTER_CRITICAL();
 698:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 699:FreeRTOS/tasks.c **** 
 700:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccTV2SzP.s 			page 22


 474              		.loc 1 700 0
 475 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 476              	@ FreeRTOS/tasks.c:704: 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 701:FreeRTOS/tasks.c **** 		{
 702:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 703:FreeRTOS/tasks.c **** 			being deleted. */
 704:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 477              		.loc 1 704 0
 478 000c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTaskToDelete
 479 000e 002B     		cmp	r3, #0	@ tmp130,
 480 0010 02D1     		bne	.L18	@,
 481              	@ FreeRTOS/tasks.c:704: 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 482              		.loc 1 704 0 is_stmt 0 discriminator 1
 483 0012 2D4B     		ldr	r3, .L28	@ tmp131,
 484 0014 1B68     		ldr	r3, [r3]	@ iftmp.12_20, pxCurrentTCB
 485 0016 00E0     		b	.L19	@
 486              	.L18:
 487              	@ FreeRTOS/tasks.c:704: 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 488              		.loc 1 704 0 discriminator 2
 489 0018 7B68     		ldr	r3, [r7, #4]	@ iftmp.12_20, xTaskToDelete
 490              	.L19:
 491              	@ FreeRTOS/tasks.c:704: 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 492              		.loc 1 704 0 discriminator 4
 493 001a FB60     		str	r3, [r7, #12]	@ iftmp.12_20, pxTCB
 494              	@ FreeRTOS/tasks.c:710: 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 705:FreeRTOS/tasks.c **** 
 706:FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 707:FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 708:FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 709:FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 710:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 495              		.loc 1 710 0 is_stmt 1 discriminator 4
 496 001c FB68     		ldr	r3, [r7, #12]	@ tmp132, pxTCB
 497 001e 0433     		adds	r3, r3, #4	@ _1, tmp132,
 498 0020 1846     		mov	r0, r3	@, _1
 499 0022 FFF7FEFF 		bl	uxListRemove	@
 500 0026 0346     		mov	r3, r0	@ _2,
 501 0028 002B     		cmp	r3, #0	@ _2,
 502 002a 15D1     		bne	.L20	@,
 503              	@ FreeRTOS/tasks.c:712: 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 711:FreeRTOS/tasks.c **** 			{
 712:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 504              		.loc 1 712 0
 505 002c FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 506 002e DA6A     		ldr	r2, [r3, #44]	@ _3, pxTCB_30->uxPriority
 507 0030 2649     		ldr	r1, .L28+4	@ tmp134,
 508 0032 1346     		mov	r3, r2	@ tmp135, _3
 509 0034 9B00     		lsls	r3, r3, #2	@ tmp135, tmp135,
 510 0036 1344     		add	r3, r3, r2	@ tmp135, _3
 511 0038 9B00     		lsls	r3, r3, #2	@ tmp136, tmp135,
 512 003a 0B44     		add	r3, r3, r1	@ tmp137, tmp134
 513 003c 1B68     		ldr	r3, [r3]	@ _4, pxReadyTasksLists[_3].uxNumberOfItems
 514 003e 002B     		cmp	r3, #0	@ _4,
 515 0040 0AD1     		bne	.L20	@,
 516              	@ FreeRTOS/tasks.c:712: 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 517              		.loc 1 712 0 is_stmt 0 discriminator 1
 518 0042 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
ARM GAS  /tmp/ccTV2SzP.s 			page 23


 519 0044 DB6A     		ldr	r3, [r3, #44]	@ _5, pxTCB_30->uxPriority
 520 0046 0122     		movs	r2, #1	@ tmp139,
 521 0048 02FA03F3 		lsl	r3, r2, r3	@ _6, tmp139, _5
 522 004c DA43     		mvns	r2, r3	@ _7, _6
 523 004e 204B     		ldr	r3, .L28+8	@ tmp140,
 524 0050 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.13_8, uxTopReadyPriority
 525 0052 1340     		ands	r3, r3, r2	@, _9, uxTopReadyPriority.13_8, _7
 526 0054 1E4A     		ldr	r2, .L28+8	@ tmp141,
 527 0056 1360     		str	r3, [r2]	@ _9, uxTopReadyPriority
 528              	.L20:
 529              	@ FreeRTOS/tasks.c:720: 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 713:FreeRTOS/tasks.c **** 			}
 714:FreeRTOS/tasks.c **** 			else
 715:FreeRTOS/tasks.c **** 			{
 716:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 717:FreeRTOS/tasks.c **** 			}
 718:FreeRTOS/tasks.c **** 
 719:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 720:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 530              		.loc 1 720 0 is_stmt 1
 531 0058 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 532 005a 9B6A     		ldr	r3, [r3, #40]	@ _10, pxTCB_30->xEventListItem.pvContainer
 533 005c 002B     		cmp	r3, #0	@ _10,
 534 005e 04D0     		beq	.L22	@,
 535              	@ FreeRTOS/tasks.c:722: 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 721:FreeRTOS/tasks.c **** 			{
 722:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 536              		.loc 1 722 0
 537 0060 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 538 0062 1833     		adds	r3, r3, #24	@ _11, tmp143,
 539 0064 1846     		mov	r0, r3	@, _11
 540 0066 FFF7FEFF 		bl	uxListRemove	@
 541              	.L22:
 542              	@ FreeRTOS/tasks.c:729: 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) 
 723:FreeRTOS/tasks.c **** 			}
 724:FreeRTOS/tasks.c **** 			else
 725:FreeRTOS/tasks.c **** 			{
 726:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 727:FreeRTOS/tasks.c **** 			}
 728:FreeRTOS/tasks.c **** 
 729:FreeRTOS/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 543              		.loc 1 729 0
 544 006a FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 545 006c 0433     		adds	r3, r3, #4	@ _12, tmp144,
 546 006e 1946     		mov	r1, r3	@, _12
 547 0070 1848     		ldr	r0, .L28+12	@,
 548 0072 FFF7FEFF 		bl	vListInsertEnd	@
 549              	@ FreeRTOS/tasks.c:734: 			++uxTasksDeleted;
 730:FreeRTOS/tasks.c **** 
 731:FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 732:FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
 733:FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 734:FreeRTOS/tasks.c **** 			++uxTasksDeleted;
 550              		.loc 1 734 0
 551 0076 184B     		ldr	r3, .L28+16	@ tmp145,
 552 0078 1B68     		ldr	r3, [r3]	@ uxTasksDeleted.14_13, uxTasksDeleted
 553 007a 0133     		adds	r3, r3, #1	@ _14, uxTasksDeleted.14_13,
ARM GAS  /tmp/ccTV2SzP.s 			page 24


 554 007c 164A     		ldr	r2, .L28+16	@ tmp146,
 555 007e 1360     		str	r3, [r2]	@ _14, uxTasksDeleted
 556              	@ FreeRTOS/tasks.c:738: 			uxTaskNumber++;
 735:FreeRTOS/tasks.c **** 
 736:FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 737:FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 738:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 557              		.loc 1 738 0
 558 0080 164B     		ldr	r3, .L28+20	@ tmp147,
 559 0082 1B68     		ldr	r3, [r3]	@ uxTaskNumber.15_15, uxTaskNumber
 560 0084 0133     		adds	r3, r3, #1	@ _16, uxTaskNumber.15_15,
 561 0086 154A     		ldr	r2, .L28+20	@ tmp148,
 562 0088 1360     		str	r3, [r2]	@ _16, uxTaskNumber
 563              	@ FreeRTOS/tasks.c:742: 		taskEXIT_CRITICAL();
 739:FreeRTOS/tasks.c **** 
 740:FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 741:FreeRTOS/tasks.c **** 		}
 742:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 564              		.loc 1 742 0
 565 008a FFF7FEFF 		bl	vPortExitCritical	@
 566              	@ FreeRTOS/tasks.c:746: 		if( xSchedulerRunning != pdFALSE )
 743:FreeRTOS/tasks.c **** 
 744:FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 745:FreeRTOS/tasks.c **** 		been deleted. */
 746:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 567              		.loc 1 746 0
 568 008e 144B     		ldr	r3, .L28+24	@ tmp149,
 569 0090 1B68     		ldr	r3, [r3]	@ xSchedulerRunning.16_17, xSchedulerRunning
 570 0092 002B     		cmp	r3, #0	@ xSchedulerRunning.16_17,
 571 0094 14D0     		beq	.L27	@,
 572              	@ FreeRTOS/tasks.c:748: 			if( pxTCB == pxCurrentTCB )
 747:FreeRTOS/tasks.c **** 		{
 748:FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 573              		.loc 1 748 0
 574 0096 0C4B     		ldr	r3, .L28	@ tmp150,
 575 0098 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.17_18, pxCurrentTCB
 576 009a FA68     		ldr	r2, [r7, #12]	@ tmp151, pxTCB
 577 009c 9A42     		cmp	r2, r3	@ tmp151, pxCurrentTCB.17_18
 578 009e 09D1     		bne	.L24	@,
 579              	@ FreeRTOS/tasks.c:750: 				configASSERT( uxSchedulerSuspended == 0 );
 749:FreeRTOS/tasks.c **** 			{
 750:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 580              		.loc 1 750 0
 581 00a0 104B     		ldr	r3, .L28+28	@ tmp152,
 582 00a2 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.18_19, uxSchedulerSuspended
 583 00a4 002B     		cmp	r3, #0	@ uxSchedulerSuspended.18_19,
 584 00a6 02D0     		beq	.L25	@,
 585              	@ FreeRTOS/tasks.c:750: 				configASSERT( uxSchedulerSuspended == 0 );
 586              		.loc 1 750 0 is_stmt 0 discriminator 1
 587 00a8 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 588              	.L26:
 589 00ac FEE7     		b	.L26	@
 590              	.L25:
 591              	@ FreeRTOS/tasks.c:758: 				portYIELD_WITHIN_API();
 751:FreeRTOS/tasks.c **** 
 752:FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 753:FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
ARM GAS  /tmp/ccTV2SzP.s 			page 25


 754:FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
 755:FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 756:FreeRTOS/tasks.c **** 				required. */
 757:FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 758:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 592              		.loc 1 758 0 is_stmt 1
 593 00ae FFF7FEFF 		bl	vPortYield	@
 594              	@ FreeRTOS/tasks.c:771: 	}
 759:FreeRTOS/tasks.c **** 			}
 760:FreeRTOS/tasks.c **** 			else
 761:FreeRTOS/tasks.c **** 			{
 762:FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 763:FreeRTOS/tasks.c **** 				the task that has just been deleted. */
 764:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 765:FreeRTOS/tasks.c **** 				{
 766:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 767:FreeRTOS/tasks.c **** 				}
 768:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 769:FreeRTOS/tasks.c **** 			}
 770:FreeRTOS/tasks.c **** 		}
 771:FreeRTOS/tasks.c **** 	}
 595              		.loc 1 771 0
 596 00b2 05E0     		b	.L27	@
 597              	.L24:
 598              	@ FreeRTOS/tasks.c:764: 				taskENTER_CRITICAL();
 764:FreeRTOS/tasks.c **** 				{
 599              		.loc 1 764 0
 600 00b4 FFF7FEFF 		bl	vPortEnterCritical	@
 601              	@ FreeRTOS/tasks.c:766: 					prvResetNextTaskUnblockTime();
 766:FreeRTOS/tasks.c **** 				}
 602              		.loc 1 766 0
 603 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 604              	@ FreeRTOS/tasks.c:768: 				taskEXIT_CRITICAL();
 768:FreeRTOS/tasks.c **** 			}
 605              		.loc 1 768 0
 606 00bc FFF7FEFF 		bl	vPortExitCritical	@
 607              	.L27:
 608              	@ FreeRTOS/tasks.c:771: 	}
 609              		.loc 1 771 0
 610 00c0 00BF     		nop
 611 00c2 1037     		adds	r7, r7, #16	@,,
 612              		.cfi_def_cfa_offset 8
 613 00c4 BD46     		mov	sp, r7	@,
 614              		.cfi_def_cfa_register 13
 615              		@ sp needed	@
 616 00c6 80BD     		pop	{r7, pc}	@
 617              	.L29:
 618              		.align	2
 619              	.L28:
 620 00c8 00000000 		.word	pxCurrentTCB
 621 00cc 00000000 		.word	pxReadyTasksLists
 622 00d0 00000000 		.word	uxTopReadyPriority
 623 00d4 00000000 		.word	xTasksWaitingTermination
 624 00d8 00000000 		.word	uxTasksDeleted
 625 00dc 00000000 		.word	uxTaskNumber
 626 00e0 00000000 		.word	xSchedulerRunning
 627 00e4 00000000 		.word	uxSchedulerSuspended
ARM GAS  /tmp/ccTV2SzP.s 			page 26


 628              		.cfi_endproc
 629              	.LFE2:
 630              		.size	vTaskDelete, .-vTaskDelete
 631              		.section	.text.vTaskDelayUntil,"ax",%progbits
 632              		.align	1
 633              		.global	vTaskDelayUntil
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 637              		.fpu softvfp
 638              		.type	vTaskDelayUntil, %function
 639              	vTaskDelayUntil:
 640              	.LFB3:
 772:FreeRTOS/tasks.c **** 
 773:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 774:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 775:FreeRTOS/tasks.c **** 
 776:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 777:FreeRTOS/tasks.c **** 
 778:FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickT_t * const pxPreviousWakeTime, const TickT_t xTimeIncrement )
 779:FreeRTOS/tasks.c **** 	{
 641              		.loc 1 779 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 24
 644              		@ frame_needed = 1, uses_anonymous_args = 0
 645 0000 80B5     		push	{r7, lr}	@
 646              		.cfi_def_cfa_offset 8
 647              		.cfi_offset 7, -8
 648              		.cfi_offset 14, -4
 649 0002 86B0     		sub	sp, sp, #24	@,,
 650              		.cfi_def_cfa_offset 32
 651 0004 00AF     		add	r7, sp, #0	@,,
 652              		.cfi_def_cfa_register 7
 653 0006 7860     		str	r0, [r7, #4]	@ pxPreviousWakeTime, pxPreviousWakeTime
 654 0008 3960     		str	r1, [r7]	@ xTimeIncrement, xTimeIncrement
 655              	@ FreeRTOS/tasks.c:781: 	BaseT_t xAlreadyYielded, xShouldDelay = pdFALSE;
 780:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 781:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded, xShouldDelay = pdFALSE;
 656              		.loc 1 781 0
 657 000a 0023     		movs	r3, #0	@ tmp124,
 658 000c 7B61     		str	r3, [r7, #20]	@ tmp124, xShouldDelay
 659              	@ FreeRTOS/tasks.c:783: 		configASSERT( pxPreviousWakeTime );
 782:FreeRTOS/tasks.c **** 
 783:FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 660              		.loc 1 783 0
 661 000e 7B68     		ldr	r3, [r7, #4]	@ tmp125, pxPreviousWakeTime
 662 0010 002B     		cmp	r3, #0	@ tmp125,
 663 0012 02D1     		bne	.L31	@,
 664              	@ FreeRTOS/tasks.c:783: 		configASSERT( pxPreviousWakeTime );
 665              		.loc 1 783 0 is_stmt 0 discriminator 1
 666 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 667              	.L32:
 668 0018 FEE7     		b	.L32	@
 669              	.L31:
 670              	@ FreeRTOS/tasks.c:784: 		configASSERT( ( xTimeIncrement > 0U ) );
 784:FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 671              		.loc 1 784 0 is_stmt 1
ARM GAS  /tmp/ccTV2SzP.s 			page 27


 672 001a 3B68     		ldr	r3, [r7]	@ tmp126, xTimeIncrement
 673 001c 002B     		cmp	r3, #0	@ tmp126,
 674 001e 02D1     		bne	.L33	@,
 675              	@ FreeRTOS/tasks.c:784: 		configASSERT( ( xTimeIncrement > 0U ) );
 676              		.loc 1 784 0 is_stmt 0 discriminator 1
 677 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 678              	.L34:
 679              	@ FreeRTOS/tasks.c:784: 		configASSERT( ( xTimeIncrement > 0U ) );
 680              		.loc 1 784 0 discriminator 2
 681 0024 FEE7     		b	.L34	@
 682              	.L33:
 683              	@ FreeRTOS/tasks.c:785: 		configASSERT( uxSchedulerSuspended == 0 );
 785:FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 684              		.loc 1 785 0 is_stmt 1
 685 0026 2B4B     		ldr	r3, .L44	@ tmp127,
 686 0028 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.19_1, uxSchedulerSuspended
 687 002a 002B     		cmp	r3, #0	@ uxSchedulerSuspended.19_1,
 688 002c 02D0     		beq	.L35	@,
 689              	@ FreeRTOS/tasks.c:785: 		configASSERT( uxSchedulerSuspended == 0 );
 690              		.loc 1 785 0 is_stmt 0 discriminator 1
 691 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 692              	.L36:
 693              	@ FreeRTOS/tasks.c:785: 		configASSERT( uxSchedulerSuspended == 0 );
 694              		.loc 1 785 0 discriminator 3
 695 0032 FEE7     		b	.L36	@
 696              	.L35:
 697              	@ FreeRTOS/tasks.c:787: 		vTaskSuspendAll();
 786:FreeRTOS/tasks.c **** 
 787:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 698              		.loc 1 787 0 is_stmt 1
 699 0034 FFF7FEFF 		bl	vTaskSuspendAll	@
 700              	.LBB7:
 701              	@ FreeRTOS/tasks.c:791: 			const TickT_t xConstTickCount = xTickCount;
 788:FreeRTOS/tasks.c **** 		{
 789:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 790:FreeRTOS/tasks.c **** 			block. */
 791:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 702              		.loc 1 791 0
 703 0038 274B     		ldr	r3, .L44+4	@ tmp128,
 704 003a 1B68     		ldr	r3, [r3]	@ tmp129, xTickCount
 705 003c 3B61     		str	r3, [r7, #16]	@ tmp129, xConstTickCount
 706              	@ FreeRTOS/tasks.c:794: 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 792:FreeRTOS/tasks.c **** 
 793:FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 794:FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 707              		.loc 1 794 0
 708 003e 7B68     		ldr	r3, [r7, #4]	@ tmp130, pxPreviousWakeTime
 709 0040 1B68     		ldr	r3, [r3]	@ _2, *pxPreviousWakeTime_19(D)
 710 0042 3A68     		ldr	r2, [r7]	@ tmp132, xTimeIncrement
 711 0044 1344     		add	r3, r3, r2	@ tmp131, tmp132
 712 0046 FB60     		str	r3, [r7, #12]	@ tmp131, xTimeToWake
 713              	@ FreeRTOS/tasks.c:796: 			if( xConstTickCount < *pxPreviousWakeTime )
 795:FreeRTOS/tasks.c **** 
 796:FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 714              		.loc 1 796 0
 715 0048 7B68     		ldr	r3, [r7, #4]	@ tmp133, pxPreviousWakeTime
 716 004a 1B68     		ldr	r3, [r3]	@ _3, *pxPreviousWakeTime_19(D)
ARM GAS  /tmp/ccTV2SzP.s 			page 28


 717 004c 3A69     		ldr	r2, [r7, #16]	@ tmp134, xConstTickCount
 718 004e 9A42     		cmp	r2, r3	@ tmp134, _3
 719 0050 0BD2     		bcs	.L37	@,
 720              	@ FreeRTOS/tasks.c:803: 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTick
 797:FreeRTOS/tasks.c **** 			{
 798:FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 799:FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 800:FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 801:FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 802:FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 803:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 721              		.loc 1 803 0
 722 0052 7B68     		ldr	r3, [r7, #4]	@ tmp135, pxPreviousWakeTime
 723 0054 1B68     		ldr	r3, [r3]	@ _4, *pxPreviousWakeTime_19(D)
 724 0056 FA68     		ldr	r2, [r7, #12]	@ tmp136, xTimeToWake
 725 0058 9A42     		cmp	r2, r3	@ tmp136, _4
 726 005a 11D2     		bcs	.L38	@,
 727              	@ FreeRTOS/tasks.c:803: 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTick
 728              		.loc 1 803 0 is_stmt 0 discriminator 1
 729 005c FA68     		ldr	r2, [r7, #12]	@ tmp137, xTimeToWake
 730 005e 3B69     		ldr	r3, [r7, #16]	@ tmp138, xConstTickCount
 731 0060 9A42     		cmp	r2, r3	@ tmp137, tmp138
 732 0062 0DD9     		bls	.L38	@,
 733              	@ FreeRTOS/tasks.c:805: 					xShouldDelay = pdTRUE;
 804:FreeRTOS/tasks.c **** 				{
 805:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 734              		.loc 1 805 0 is_stmt 1
 735 0064 0123     		movs	r3, #1	@ tmp139,
 736 0066 7B61     		str	r3, [r7, #20]	@ tmp139, xShouldDelay
 737 0068 0AE0     		b	.L38	@
 738              	.L37:
 739              	@ FreeRTOS/tasks.c:817: 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTick
 806:FreeRTOS/tasks.c **** 				}
 807:FreeRTOS/tasks.c **** 				else
 808:FreeRTOS/tasks.c **** 				{
 809:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 810:FreeRTOS/tasks.c **** 				}
 811:FreeRTOS/tasks.c **** 			}
 812:FreeRTOS/tasks.c **** 			else
 813:FreeRTOS/tasks.c **** 			{
 814:FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 815:FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 816:FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 817:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 740              		.loc 1 817 0
 741 006a 7B68     		ldr	r3, [r7, #4]	@ tmp140, pxPreviousWakeTime
 742 006c 1B68     		ldr	r3, [r3]	@ _5, *pxPreviousWakeTime_19(D)
 743 006e FA68     		ldr	r2, [r7, #12]	@ tmp141, xTimeToWake
 744 0070 9A42     		cmp	r2, r3	@ tmp141, _5
 745 0072 03D3     		bcc	.L39	@,
 746              	@ FreeRTOS/tasks.c:817: 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTick
 747              		.loc 1 817 0 is_stmt 0 discriminator 1
 748 0074 FA68     		ldr	r2, [r7, #12]	@ tmp142, xTimeToWake
 749 0076 3B69     		ldr	r3, [r7, #16]	@ tmp143, xConstTickCount
 750 0078 9A42     		cmp	r2, r3	@ tmp142, tmp143
 751 007a 01D9     		bls	.L38	@,
 752              	.L39:
ARM GAS  /tmp/ccTV2SzP.s 			page 29


 753              	@ FreeRTOS/tasks.c:819: 					xShouldDelay = pdTRUE;
 818:FreeRTOS/tasks.c **** 				{
 819:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 754              		.loc 1 819 0 is_stmt 1
 755 007c 0123     		movs	r3, #1	@ tmp144,
 756 007e 7B61     		str	r3, [r7, #20]	@ tmp144, xShouldDelay
 757              	.L38:
 758              	@ FreeRTOS/tasks.c:828: 			*pxPreviousWakeTime = xTimeToWake;
 820:FreeRTOS/tasks.c **** 				}
 821:FreeRTOS/tasks.c **** 				else
 822:FreeRTOS/tasks.c **** 				{
 823:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 824:FreeRTOS/tasks.c **** 				}
 825:FreeRTOS/tasks.c **** 			}
 826:FreeRTOS/tasks.c **** 
 827:FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 828:FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 759              		.loc 1 828 0
 760 0080 7B68     		ldr	r3, [r7, #4]	@ tmp145, pxPreviousWakeTime
 761 0082 FA68     		ldr	r2, [r7, #12]	@ tmp146, xTimeToWake
 762 0084 1A60     		str	r2, [r3]	@ tmp146, *pxPreviousWakeTime_19(D)
 763              	@ FreeRTOS/tasks.c:830: 			if( xShouldDelay != pdFALSE )
 829:FreeRTOS/tasks.c **** 
 830:FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 764              		.loc 1 830 0
 765 0086 7B69     		ldr	r3, [r7, #20]	@ tmp147, xShouldDelay
 766 0088 002B     		cmp	r3, #0	@ tmp147,
 767 008a 17D0     		beq	.L40	@,
 768              	@ FreeRTOS/tasks.c:836: 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t )
 831:FreeRTOS/tasks.c **** 			{
 832:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 833:FreeRTOS/tasks.c **** 
 834:FreeRTOS/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 835:FreeRTOS/tasks.c **** 				blocked list as the same list item is used for both lists. */
 836:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 769              		.loc 1 836 0
 770 008c 134B     		ldr	r3, .L44+8	@ tmp148,
 771 008e 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.20_6, pxCurrentTCB
 772 0090 0433     		adds	r3, r3, #4	@ _7, pxCurrentTCB.20_6,
 773 0092 1846     		mov	r0, r3	@, _7
 774 0094 FFF7FEFF 		bl	uxListRemove	@
 775 0098 0346     		mov	r3, r0	@ _8,
 776 009a 002B     		cmp	r3, #0	@ _8,
 777 009c 0BD1     		bne	.L41	@,
 778              	@ FreeRTOS/tasks.c:841: 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority
 837:FreeRTOS/tasks.c **** 				{
 838:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 839:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 840:FreeRTOS/tasks.c **** 					directly. */
 841:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 779              		.loc 1 841 0
 780 009e 0F4B     		ldr	r3, .L44+8	@ tmp149,
 781 00a0 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.21_9, pxCurrentTCB
 782 00a2 DB6A     		ldr	r3, [r3, #44]	@ _10, pxCurrentTCB.21_9->uxPriority
 783 00a4 0122     		movs	r2, #1	@ tmp150,
 784 00a6 02FA03F3 		lsl	r3, r2, r3	@ _11, tmp150, _10
 785 00aa DA43     		mvns	r2, r3	@ _29, _11
ARM GAS  /tmp/ccTV2SzP.s 			page 30


 786 00ac 0C4B     		ldr	r3, .L44+12	@ tmp151,
 787 00ae 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.22_12, uxTopReadyPriority
 788 00b0 1340     		ands	r3, r3, r2	@, _13, uxTopReadyPriority.22_12, _29
 789 00b2 0B4A     		ldr	r2, .L44+12	@ tmp152,
 790 00b4 1360     		str	r3, [r2]	@ _13, uxTopReadyPriority
 791              	.L41:
 792              	@ FreeRTOS/tasks.c:848: 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 842:FreeRTOS/tasks.c **** 				}
 843:FreeRTOS/tasks.c **** 				else
 844:FreeRTOS/tasks.c **** 				{
 845:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 846:FreeRTOS/tasks.c **** 				}
 847:FreeRTOS/tasks.c **** 
 848:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 793              		.loc 1 848 0
 794 00b6 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 795 00b8 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 796              	.L40:
 797              	.LBE7:
 798              	@ FreeRTOS/tasks.c:855: 		xAlreadyYielded = xTaskResumeAll();
 849:FreeRTOS/tasks.c **** 			}
 850:FreeRTOS/tasks.c **** 			else
 851:FreeRTOS/tasks.c **** 			{
 852:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 853:FreeRTOS/tasks.c **** 			}
 854:FreeRTOS/tasks.c **** 		}
 855:FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 799              		.loc 1 855 0
 800 00bc FFF7FEFF 		bl	xTaskResumeAll	@
 801 00c0 B860     		str	r0, [r7, #8]	@, xAlreadyYielded
 802              	@ FreeRTOS/tasks.c:859: 		if( xAlreadyYielded == pdFALSE )
 856:FreeRTOS/tasks.c **** 
 857:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 858:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 859:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 803              		.loc 1 859 0
 804 00c2 BB68     		ldr	r3, [r7, #8]	@ tmp153, xAlreadyYielded
 805 00c4 002B     		cmp	r3, #0	@ tmp153,
 806 00c6 01D1     		bne	.L43	@,
 807              	@ FreeRTOS/tasks.c:861: 			portYIELD_WITHIN_API();
 860:FreeRTOS/tasks.c **** 		{
 861:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 808              		.loc 1 861 0
 809 00c8 FFF7FEFF 		bl	vPortYield	@
 810              	.L43:
 811              	@ FreeRTOS/tasks.c:867: 	}
 862:FreeRTOS/tasks.c **** 		}
 863:FreeRTOS/tasks.c **** 		else
 864:FreeRTOS/tasks.c **** 		{
 865:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 866:FreeRTOS/tasks.c **** 		}
 867:FreeRTOS/tasks.c **** 	}
 812              		.loc 1 867 0
 813 00cc 00BF     		nop
 814 00ce 1837     		adds	r7, r7, #24	@,,
 815              		.cfi_def_cfa_offset 8
 816 00d0 BD46     		mov	sp, r7	@,
ARM GAS  /tmp/ccTV2SzP.s 			page 31


 817              		.cfi_def_cfa_register 13
 818              		@ sp needed	@
 819 00d2 80BD     		pop	{r7, pc}	@
 820              	.L45:
 821              		.align	2
 822              	.L44:
 823 00d4 00000000 		.word	uxSchedulerSuspended
 824 00d8 00000000 		.word	xTickCount
 825 00dc 00000000 		.word	pxCurrentTCB
 826 00e0 00000000 		.word	uxTopReadyPriority
 827              		.cfi_endproc
 828              	.LFE3:
 829              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 830              		.section	.text.vTaskDelay,"ax",%progbits
 831              		.align	1
 832              		.global	vTaskDelay
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 836              		.fpu softvfp
 837              		.type	vTaskDelay, %function
 838              	vTaskDelay:
 839              	.LFB4:
 868:FreeRTOS/tasks.c **** 
 869:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 870:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 871:FreeRTOS/tasks.c **** 
 872:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 873:FreeRTOS/tasks.c **** 
 874:FreeRTOS/tasks.c **** 	void vTaskDelay( const TickT_t xTicksToDelay )
 875:FreeRTOS/tasks.c **** 	{
 840              		.loc 1 875 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 16
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844 0000 80B5     		push	{r7, lr}	@
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 7, -8
 847              		.cfi_offset 14, -4
 848 0002 84B0     		sub	sp, sp, #16	@,,
 849              		.cfi_def_cfa_offset 24
 850 0004 00AF     		add	r7, sp, #0	@,,
 851              		.cfi_def_cfa_register 7
 852 0006 7860     		str	r0, [r7, #4]	@ xTicksToDelay, xTicksToDelay
 853              	@ FreeRTOS/tasks.c:877: 	BaseT_t xAlreadyYielded = pdFALSE;
 876:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 877:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded = pdFALSE;
 854              		.loc 1 877 0
 855 0008 0023     		movs	r3, #0	@ tmp121,
 856 000a FB60     		str	r3, [r7, #12]	@ tmp121, xAlreadyYielded
 857              	@ FreeRTOS/tasks.c:881: 		if( xTicksToDelay > ( TickT_t ) 0U )
 878:FreeRTOS/tasks.c **** 
 879:FreeRTOS/tasks.c **** 
 880:FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 881:FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickT_t ) 0U )
 858              		.loc 1 881 0
 859 000c 7B68     		ldr	r3, [r7, #4]	@ tmp122, xTicksToDelay
ARM GAS  /tmp/ccTV2SzP.s 			page 32


 860 000e 002B     		cmp	r3, #0	@ tmp122,
 861 0010 28D0     		beq	.L47	@,
 862              	@ FreeRTOS/tasks.c:883: 			configASSERT( uxSchedulerSuspended == 0 );
 882:FreeRTOS/tasks.c **** 		{
 883:FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 863              		.loc 1 883 0
 864 0012 194B     		ldr	r3, .L53	@ tmp123,
 865 0014 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.23_1, uxSchedulerSuspended
 866 0016 002B     		cmp	r3, #0	@ uxSchedulerSuspended.23_1,
 867 0018 02D0     		beq	.L48	@,
 868              	@ FreeRTOS/tasks.c:883: 			configASSERT( uxSchedulerSuspended == 0 );
 869              		.loc 1 883 0 is_stmt 0 discriminator 1
 870 001a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 871              	.L49:
 872 001e FEE7     		b	.L49	@
 873              	.L48:
 874              	@ FreeRTOS/tasks.c:884: 			vTaskSuspendAll();
 884:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 875              		.loc 1 884 0 is_stmt 1
 876 0020 FFF7FEFF 		bl	vTaskSuspendAll	@
 877              	@ FreeRTOS/tasks.c:898: 				xTimeToWake = xTickCount + xTicksToDelay;
 885:FreeRTOS/tasks.c **** 			{
 886:FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 887:FreeRTOS/tasks.c **** 
 888:FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 889:FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 890:FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 891:FreeRTOS/tasks.c **** 				is resumed.
 892:FreeRTOS/tasks.c **** 
 893:FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 894:FreeRTOS/tasks.c **** 				executing task. */
 895:FreeRTOS/tasks.c **** 
 896:FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 897:FreeRTOS/tasks.c **** 				not a problem. */
 898:FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 878              		.loc 1 898 0
 879 0024 154B     		ldr	r3, .L53+4	@ tmp124,
 880 0026 1B68     		ldr	r3, [r3]	@ xTickCount.24_2, xTickCount
 881 0028 7A68     		ldr	r2, [r7, #4]	@ tmp126, xTicksToDelay
 882 002a 1344     		add	r3, r3, r2	@ tmp125, tmp126
 883 002c BB60     		str	r3, [r7, #8]	@ tmp125, xTimeToWake
 884              	@ FreeRTOS/tasks.c:903: 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t )
 899:FreeRTOS/tasks.c **** 
 900:FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 901:FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 902:FreeRTOS/tasks.c **** 				both lists. */
 903:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 885              		.loc 1 903 0
 886 002e 144B     		ldr	r3, .L53+8	@ tmp127,
 887 0030 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.25_3, pxCurrentTCB
 888 0032 0433     		adds	r3, r3, #4	@ _4, pxCurrentTCB.25_3,
 889 0034 1846     		mov	r0, r3	@, _4
 890 0036 FFF7FEFF 		bl	uxListRemove	@
 891 003a 0346     		mov	r3, r0	@ _5,
 892 003c 002B     		cmp	r3, #0	@ _5,
 893 003e 0BD1     		bne	.L50	@,
 894              	@ FreeRTOS/tasks.c:908: 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority
ARM GAS  /tmp/ccTV2SzP.s 			page 33


 904:FreeRTOS/tasks.c **** 				{
 905:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 906:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 907:FreeRTOS/tasks.c **** 					directly. */
 908:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 895              		.loc 1 908 0
 896 0040 0F4B     		ldr	r3, .L53+8	@ tmp128,
 897 0042 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.26_6, pxCurrentTCB
 898 0044 DB6A     		ldr	r3, [r3, #44]	@ _7, pxCurrentTCB.26_6->uxPriority
 899 0046 0122     		movs	r2, #1	@ tmp129,
 900 0048 02FA03F3 		lsl	r3, r2, r3	@ _8, tmp129, _7
 901 004c DA43     		mvns	r2, r3	@ _21, _8
 902 004e 0D4B     		ldr	r3, .L53+12	@ tmp130,
 903 0050 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.27_9, uxTopReadyPriority
 904 0052 1340     		ands	r3, r3, r2	@, _10, uxTopReadyPriority.27_9, _21
 905 0054 0B4A     		ldr	r2, .L53+12	@ tmp131,
 906 0056 1360     		str	r3, [r2]	@ _10, uxTopReadyPriority
 907              	.L50:
 908              	@ FreeRTOS/tasks.c:914: 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 909:FreeRTOS/tasks.c **** 				}
 910:FreeRTOS/tasks.c **** 				else
 911:FreeRTOS/tasks.c **** 				{
 912:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 913:FreeRTOS/tasks.c **** 				}
 914:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 909              		.loc 1 914 0
 910 0058 B868     		ldr	r0, [r7, #8]	@, xTimeToWake
 911 005a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 912              	@ FreeRTOS/tasks.c:916: 			xAlreadyYielded = xTaskResumeAll();
 915:FreeRTOS/tasks.c **** 			}
 916:FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 913              		.loc 1 916 0
 914 005e FFF7FEFF 		bl	xTaskResumeAll	@
 915 0062 F860     		str	r0, [r7, #12]	@, xAlreadyYielded
 916              	.L47:
 917              	@ FreeRTOS/tasks.c:925: 		if( xAlreadyYielded == pdFALSE )
 917:FreeRTOS/tasks.c **** 		}
 918:FreeRTOS/tasks.c **** 		else
 919:FreeRTOS/tasks.c **** 		{
 920:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 921:FreeRTOS/tasks.c **** 		}
 922:FreeRTOS/tasks.c **** 
 923:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 924:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 925:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 918              		.loc 1 925 0
 919 0064 FB68     		ldr	r3, [r7, #12]	@ tmp132, xAlreadyYielded
 920 0066 002B     		cmp	r3, #0	@ tmp132,
 921 0068 01D1     		bne	.L52	@,
 922              	@ FreeRTOS/tasks.c:927: 			portYIELD_WITHIN_API();
 926:FreeRTOS/tasks.c **** 		{
 927:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 923              		.loc 1 927 0
 924 006a FFF7FEFF 		bl	vPortYield	@
 925              	.L52:
 926              	@ FreeRTOS/tasks.c:933: 	}
 928:FreeRTOS/tasks.c **** 		}
ARM GAS  /tmp/ccTV2SzP.s 			page 34


 929:FreeRTOS/tasks.c **** 		else
 930:FreeRTOS/tasks.c **** 		{
 931:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 932:FreeRTOS/tasks.c **** 		}
 933:FreeRTOS/tasks.c **** 	}
 927              		.loc 1 933 0
 928 006e 00BF     		nop
 929 0070 1037     		adds	r7, r7, #16	@,,
 930              		.cfi_def_cfa_offset 8
 931 0072 BD46     		mov	sp, r7	@,
 932              		.cfi_def_cfa_register 13
 933              		@ sp needed	@
 934 0074 80BD     		pop	{r7, pc}	@
 935              	.L54:
 936 0076 00BF     		.align	2
 937              	.L53:
 938 0078 00000000 		.word	uxSchedulerSuspended
 939 007c 00000000 		.word	xTickCount
 940 0080 00000000 		.word	pxCurrentTCB
 941 0084 00000000 		.word	uxTopReadyPriority
 942              		.cfi_endproc
 943              	.LFE4:
 944              		.size	vTaskDelay, .-vTaskDelay
 945              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 946              		.align	1
 947              		.global	uxTaskPriorityGet
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 951              		.fpu softvfp
 952              		.type	uxTaskPriorityGet, %function
 953              	uxTaskPriorityGet:
 954              	.LFB5:
 934:FreeRTOS/tasks.c **** 
 935:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 936:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 937:FreeRTOS/tasks.c **** 
 938:FreeRTOS/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 939:FreeRTOS/tasks.c **** 
 940:FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 941:FreeRTOS/tasks.c **** 	{
 942:FreeRTOS/tasks.c **** 	eTaskState eReturn;
 943:FreeRTOS/tasks.c **** 	List_t *pxStateList;
 944:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 945:FreeRTOS/tasks.c **** 
 946:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 947:FreeRTOS/tasks.c **** 
 948:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 949:FreeRTOS/tasks.c **** 		{
 950:FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
 951:FreeRTOS/tasks.c **** 			eReturn = eRunning;
 952:FreeRTOS/tasks.c **** 		}
 953:FreeRTOS/tasks.c **** 		else
 954:FreeRTOS/tasks.c **** 		{
 955:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 956:FreeRTOS/tasks.c **** 			{
 957:FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
ARM GAS  /tmp/ccTV2SzP.s 			page 35


 958:FreeRTOS/tasks.c **** 			}
 959:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 960:FreeRTOS/tasks.c **** 
 961:FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 962:FreeRTOS/tasks.c **** 			{
 963:FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 964:FreeRTOS/tasks.c **** 				lists. */
 965:FreeRTOS/tasks.c **** 				eReturn = eBlocked;
 966:FreeRTOS/tasks.c **** 			}
 967:FreeRTOS/tasks.c **** 
 968:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 969:FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 970:FreeRTOS/tasks.c **** 				{
 971:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
 972:FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
 973:FreeRTOS/tasks.c **** 					indefinitely? */
 974:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 975:FreeRTOS/tasks.c **** 					{
 976:FreeRTOS/tasks.c **** 						eReturn = eSuspended;
 977:FreeRTOS/tasks.c **** 					}
 978:FreeRTOS/tasks.c **** 					else
 979:FreeRTOS/tasks.c **** 					{
 980:FreeRTOS/tasks.c **** 						eReturn = eBlocked;
 981:FreeRTOS/tasks.c **** 					}
 982:FreeRTOS/tasks.c **** 				}
 983:FreeRTOS/tasks.c **** 			#endif
 984:FreeRTOS/tasks.c **** 
 985:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 986:FreeRTOS/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 987:FreeRTOS/tasks.c **** 				{
 988:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
 989:FreeRTOS/tasks.c **** 					tasks list. */
 990:FreeRTOS/tasks.c **** 					eReturn = eDeleted;
 991:FreeRTOS/tasks.c **** 				}
 992:FreeRTOS/tasks.c **** 			#endif
 993:FreeRTOS/tasks.c **** 
 994:FreeRTOS/tasks.c **** 			else
 995:FreeRTOS/tasks.c **** 			{
 996:FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
 997:FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
 998:FreeRTOS/tasks.c **** 				eReturn = eReady;
 999:FreeRTOS/tasks.c **** 			}
1000:FreeRTOS/tasks.c **** 		}
1001:FreeRTOS/tasks.c **** 
1002:FreeRTOS/tasks.c **** 		return eReturn;
1003:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1004:FreeRTOS/tasks.c **** 
1005:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1006:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1007:FreeRTOS/tasks.c **** 
1008:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1009:FreeRTOS/tasks.c **** 
1010:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskPriorityGet( TaskHandle_t xTask )
1011:FreeRTOS/tasks.c **** 	{
 955              		.loc 1 1011 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccTV2SzP.s 			page 36


 958              		@ frame_needed = 1, uses_anonymous_args = 0
 959 0000 80B5     		push	{r7, lr}	@
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 0002 84B0     		sub	sp, sp, #16	@,,
 964              		.cfi_def_cfa_offset 24
 965 0004 00AF     		add	r7, sp, #0	@,,
 966              		.cfi_def_cfa_register 7
 967 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 968              	@ FreeRTOS/tasks.c:1015: 		taskENTER_CRITICAL();
1012:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1013:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
1014:FreeRTOS/tasks.c **** 
1015:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 969              		.loc 1 1015 0
 970 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 971              	@ FreeRTOS/tasks.c:1019: 			pxTCB = prvGetTCBFromHandle( xTask );
1016:FreeRTOS/tasks.c **** 		{
1017:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are changing the
1018:FreeRTOS/tasks.c **** 			priority of the calling function. */
1019:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 972              		.loc 1 1019 0
 973 000c 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 974 000e 002B     		cmp	r3, #0	@ tmp113,
 975 0010 02D1     		bne	.L56	@,
 976              	@ FreeRTOS/tasks.c:1019: 			pxTCB = prvGetTCBFromHandle( xTask );
 977              		.loc 1 1019 0 is_stmt 0 discriminator 1
 978 0012 074B     		ldr	r3, .L59	@ tmp114,
 979 0014 1B68     		ldr	r3, [r3]	@ iftmp.28_1, pxCurrentTCB
 980 0016 00E0     		b	.L57	@
 981              	.L56:
 982              	@ FreeRTOS/tasks.c:1019: 			pxTCB = prvGetTCBFromHandle( xTask );
 983              		.loc 1 1019 0 discriminator 2
 984 0018 7B68     		ldr	r3, [r7, #4]	@ iftmp.28_1, xTask
 985              	.L57:
 986              	@ FreeRTOS/tasks.c:1019: 			pxTCB = prvGetTCBFromHandle( xTask );
 987              		.loc 1 1019 0 discriminator 4
 988 001a FB60     		str	r3, [r7, #12]	@ iftmp.28_1, pxTCB
 989              	@ FreeRTOS/tasks.c:1020: 			uxReturn = pxTCB->uxPriority;
1020:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 990              		.loc 1 1020 0 is_stmt 1 discriminator 4
 991 001c FB68     		ldr	r3, [r7, #12]	@ tmp115, pxTCB
 992 001e DB6A     		ldr	r3, [r3, #44]	@ tmp116, pxTCB_7->uxPriority
 993 0020 BB60     		str	r3, [r7, #8]	@ tmp116, uxReturn
 994              	@ FreeRTOS/tasks.c:1022: 		taskEXIT_CRITICAL();
1021:FreeRTOS/tasks.c **** 		}
1022:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 995              		.loc 1 1022 0 discriminator 4
 996 0022 FFF7FEFF 		bl	vPortExitCritical	@
 997              	@ FreeRTOS/tasks.c:1024: 		return uxReturn;
1023:FreeRTOS/tasks.c **** 
1024:FreeRTOS/tasks.c **** 		return uxReturn;
 998              		.loc 1 1024 0 discriminator 4
 999 0026 BB68     		ldr	r3, [r7, #8]	@ _10, uxReturn
 1000              	@ FreeRTOS/tasks.c:1025: 	}
1025:FreeRTOS/tasks.c **** 	}
ARM GAS  /tmp/ccTV2SzP.s 			page 37


 1001              		.loc 1 1025 0 discriminator 4
 1002 0028 1846     		mov	r0, r3	@, <retval>
 1003 002a 1037     		adds	r7, r7, #16	@,,
 1004              		.cfi_def_cfa_offset 8
 1005 002c BD46     		mov	sp, r7	@,
 1006              		.cfi_def_cfa_register 13
 1007              		@ sp needed	@
 1008 002e 80BD     		pop	{r7, pc}	@
 1009              	.L60:
 1010              		.align	2
 1011              	.L59:
 1012 0030 00000000 		.word	pxCurrentTCB
 1013              		.cfi_endproc
 1014              	.LFE5:
 1015              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1016              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1017              		.align	1
 1018              		.global	vTaskPrioritySet
 1019              		.syntax unified
 1020              		.thumb
 1021              		.thumb_func
 1022              		.fpu softvfp
 1023              		.type	vTaskPrioritySet, %function
 1024              	vTaskPrioritySet:
 1025              	.LFB6:
1026:FreeRTOS/tasks.c **** 
1027:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1028:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1029:FreeRTOS/tasks.c **** 
1030:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1031:FreeRTOS/tasks.c **** 
1032:FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseT_t uxNewPriority )
1033:FreeRTOS/tasks.c **** 	{
 1026              		.loc 1 1033 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 24
 1029              		@ frame_needed = 1, uses_anonymous_args = 0
 1030 0000 80B5     		push	{r7, lr}	@
 1031              		.cfi_def_cfa_offset 8
 1032              		.cfi_offset 7, -8
 1033              		.cfi_offset 14, -4
 1034 0002 86B0     		sub	sp, sp, #24	@,,
 1035              		.cfi_def_cfa_offset 32
 1036 0004 00AF     		add	r7, sp, #0	@,,
 1037              		.cfi_def_cfa_register 7
 1038 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 1039 0008 3960     		str	r1, [r7]	@ uxNewPriority, uxNewPriority
 1040              	@ FreeRTOS/tasks.c:1036: 	BaseT_t xYieldRequired = pdFALSE;
1034:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1035:FreeRTOS/tasks.c **** 	UBaseT_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1036:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 1041              		.loc 1 1036 0
 1042 000a 0023     		movs	r3, #0	@ tmp136,
 1043 000c 7B61     		str	r3, [r7, #20]	@ tmp136, xYieldRequired
 1044              	@ FreeRTOS/tasks.c:1038: 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1037:FreeRTOS/tasks.c **** 
1038:FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
ARM GAS  /tmp/ccTV2SzP.s 			page 38


 1045              		.loc 1 1038 0
 1046 000e 3B68     		ldr	r3, [r7]	@ tmp137, uxNewPriority
 1047 0010 072B     		cmp	r3, #7	@ tmp137,
 1048 0012 02D9     		bls	.L62	@,
 1049              	@ FreeRTOS/tasks.c:1038: 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1050              		.loc 1 1038 0 is_stmt 0 discriminator 1
 1051 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1052              	.L63:
 1053 0018 FEE7     		b	.L63	@
 1054              	.L62:
 1055              	@ FreeRTOS/tasks.c:1041: 		if( uxNewPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
1039:FreeRTOS/tasks.c **** 
1040:FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1041:FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 1056              		.loc 1 1041 0 is_stmt 1
 1057 001a 3B68     		ldr	r3, [r7]	@ tmp138, uxNewPriority
 1058 001c 072B     		cmp	r3, #7	@ tmp138,
 1059 001e 01D9     		bls	.L64	@,
 1060              	@ FreeRTOS/tasks.c:1043: 			uxNewPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
1042:FreeRTOS/tasks.c **** 		{
1043:FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 1061              		.loc 1 1043 0
 1062 0020 0723     		movs	r3, #7	@ tmp139,
 1063 0022 3B60     		str	r3, [r7]	@ tmp139, uxNewPriority
 1064              	.L64:
 1065              	@ FreeRTOS/tasks.c:1050: 		taskENTER_CRITICAL();
1044:FreeRTOS/tasks.c **** 		}
1045:FreeRTOS/tasks.c **** 		else
1046:FreeRTOS/tasks.c **** 		{
1047:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1048:FreeRTOS/tasks.c **** 		}
1049:FreeRTOS/tasks.c **** 
1050:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 1066              		.loc 1 1050 0
 1067 0024 FFF7FEFF 		bl	vPortEnterCritical	@
 1068              	@ FreeRTOS/tasks.c:1054: 			pxTCB = prvGetTCBFromHandle( xTask );
1051:FreeRTOS/tasks.c **** 		{
1052:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1053:FreeRTOS/tasks.c **** 			task that is being changed. */
1054:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1069              		.loc 1 1054 0
 1070 0028 7B68     		ldr	r3, [r7, #4]	@ tmp140, xTask
 1071 002a 002B     		cmp	r3, #0	@ tmp140,
 1072 002c 02D1     		bne	.L65	@,
 1073              	@ FreeRTOS/tasks.c:1054: 			pxTCB = prvGetTCBFromHandle( xTask );
 1074              		.loc 1 1054 0 is_stmt 0 discriminator 1
 1075 002e 404B     		ldr	r3, .L76	@ tmp141,
 1076 0030 1B68     		ldr	r3, [r3]	@ iftmp.29_27, pxCurrentTCB
 1077 0032 00E0     		b	.L66	@
 1078              	.L65:
 1079              	@ FreeRTOS/tasks.c:1054: 			pxTCB = prvGetTCBFromHandle( xTask );
 1080              		.loc 1 1054 0 discriminator 2
 1081 0034 7B68     		ldr	r3, [r7, #4]	@ iftmp.29_27, xTask
 1082              	.L66:
 1083              	@ FreeRTOS/tasks.c:1054: 			pxTCB = prvGetTCBFromHandle( xTask );
 1084              		.loc 1 1054 0 discriminator 4
 1085 0036 3B61     		str	r3, [r7, #16]	@ iftmp.29_27, pxTCB
ARM GAS  /tmp/ccTV2SzP.s 			page 39


 1086              	@ FreeRTOS/tasks.c:1060: 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1055:FreeRTOS/tasks.c **** 
1056:FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1057:FreeRTOS/tasks.c **** 
1058:FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1059:FreeRTOS/tasks.c **** 			{
1060:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1087              		.loc 1 1060 0 is_stmt 1 discriminator 4
 1088 0038 3B69     		ldr	r3, [r7, #16]	@ tmp142, pxTCB
 1089 003a 9B6C     		ldr	r3, [r3, #72]	@ tmp143, pxTCB_42->uxBasePriority
 1090 003c FB60     		str	r3, [r7, #12]	@ tmp143, uxCurrentBasePriority
 1091              	@ FreeRTOS/tasks.c:1068: 			if( uxCurrentBasePriority != uxNewPriority )
1061:FreeRTOS/tasks.c **** 			}
1062:FreeRTOS/tasks.c **** 			#else
1063:FreeRTOS/tasks.c **** 			{
1064:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1065:FreeRTOS/tasks.c **** 			}
1066:FreeRTOS/tasks.c **** 			#endif
1067:FreeRTOS/tasks.c **** 
1068:FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1092              		.loc 1 1068 0 discriminator 4
 1093 003e FA68     		ldr	r2, [r7, #12]	@ tmp144, uxCurrentBasePriority
 1094 0040 3B68     		ldr	r3, [r7]	@ tmp145, uxNewPriority
 1095 0042 9A42     		cmp	r2, r3	@ tmp144, tmp145
 1096 0044 6ED0     		beq	.L67	@,
 1097              	@ FreeRTOS/tasks.c:1072: 				if( uxNewPriority > uxCurrentBasePriority )
1069:FreeRTOS/tasks.c **** 			{
1070:FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1071:FreeRTOS/tasks.c **** 				priority than the calling task. */
1072:FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1098              		.loc 1 1072 0
 1099 0046 3A68     		ldr	r2, [r7]	@ tmp146, uxNewPriority
 1100 0048 FB68     		ldr	r3, [r7, #12]	@ tmp147, uxCurrentBasePriority
 1101 004a 9A42     		cmp	r2, r3	@ tmp146, tmp147
 1102 004c 0DD9     		bls	.L68	@,
 1103              	@ FreeRTOS/tasks.c:1074: 					if( pxTCB != pxCurrentTCB )
1073:FreeRTOS/tasks.c **** 				{
1074:FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1104              		.loc 1 1074 0
 1105 004e 384B     		ldr	r3, .L76	@ tmp148,
 1106 0050 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.30_1, pxCurrentTCB
 1107 0052 3A69     		ldr	r2, [r7, #16]	@ tmp149, pxTCB
 1108 0054 9A42     		cmp	r2, r3	@ tmp149, pxCurrentTCB.30_1
 1109 0056 0FD0     		beq	.L69	@,
 1110              	@ FreeRTOS/tasks.c:1079: 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1075:FreeRTOS/tasks.c **** 					{
1076:FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1077:FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1078:FreeRTOS/tasks.c **** 						raised above that of the running task? */
1079:FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1111              		.loc 1 1079 0
 1112 0058 354B     		ldr	r3, .L76	@ tmp150,
 1113 005a 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.31_2, pxCurrentTCB
 1114 005c DB6A     		ldr	r3, [r3, #44]	@ _3, pxCurrentTCB.31_2->uxPriority
 1115 005e 3A68     		ldr	r2, [r7]	@ tmp151, uxNewPriority
 1116 0060 9A42     		cmp	r2, r3	@ tmp151, _3
 1117 0062 09D3     		bcc	.L69	@,
ARM GAS  /tmp/ccTV2SzP.s 			page 40


 1118              	@ FreeRTOS/tasks.c:1081: 							xYieldRequired = pdTRUE;
1080:FreeRTOS/tasks.c **** 						{
1081:FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 1119              		.loc 1 1081 0
 1120 0064 0123     		movs	r3, #1	@ tmp152,
 1121 0066 7B61     		str	r3, [r7, #20]	@ tmp152, xYieldRequired
 1122 0068 06E0     		b	.L69	@
 1123              	.L68:
 1124              	@ FreeRTOS/tasks.c:1095: 				else if( pxTCB == pxCurrentTCB )
1082:FreeRTOS/tasks.c **** 						}
1083:FreeRTOS/tasks.c **** 						else
1084:FreeRTOS/tasks.c **** 						{
1085:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1086:FreeRTOS/tasks.c **** 						}
1087:FreeRTOS/tasks.c **** 					}
1088:FreeRTOS/tasks.c **** 					else
1089:FreeRTOS/tasks.c **** 					{
1090:FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1091:FreeRTOS/tasks.c **** 						but the running task must already be the highest
1092:FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1093:FreeRTOS/tasks.c **** 					}
1094:FreeRTOS/tasks.c **** 				}
1095:FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1125              		.loc 1 1095 0
 1126 006a 314B     		ldr	r3, .L76	@ tmp153,
 1127 006c 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.32_4, pxCurrentTCB
 1128 006e 3A69     		ldr	r2, [r7, #16]	@ tmp154, pxTCB
 1129 0070 9A42     		cmp	r2, r3	@ tmp154, pxCurrentTCB.32_4
 1130 0072 01D1     		bne	.L69	@,
 1131              	@ FreeRTOS/tasks.c:1100: 					xYieldRequired = pdTRUE;
1096:FreeRTOS/tasks.c **** 				{
1097:FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1098:FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1099:FreeRTOS/tasks.c **** 					is ready to execute. */
1100:FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 1132              		.loc 1 1100 0
 1133 0074 0123     		movs	r3, #1	@ tmp155,
 1134 0076 7B61     		str	r3, [r7, #20]	@ tmp155, xYieldRequired
 1135              	.L69:
 1136              	@ FreeRTOS/tasks.c:1112: 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1101:FreeRTOS/tasks.c **** 				}
1102:FreeRTOS/tasks.c **** 				else
1103:FreeRTOS/tasks.c **** 				{
1104:FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1105:FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1106:FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1107:FreeRTOS/tasks.c **** 				}
1108:FreeRTOS/tasks.c **** 
1109:FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1110:FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1111:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1112:FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1137              		.loc 1 1112 0
 1138 0078 3B69     		ldr	r3, [r7, #16]	@ tmp156, pxTCB
 1139 007a DB6A     		ldr	r3, [r3, #44]	@ tmp157, pxTCB_42->uxPriority
 1140 007c BB60     		str	r3, [r7, #8]	@ tmp157, uxPriorityUsedOnEntry
 1141              	@ FreeRTOS/tasks.c:1118: 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
ARM GAS  /tmp/ccTV2SzP.s 			page 41


1113:FreeRTOS/tasks.c **** 
1114:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1115:FreeRTOS/tasks.c **** 				{
1116:FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1117:FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1118:FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1142              		.loc 1 1118 0
 1143 007e 3B69     		ldr	r3, [r7, #16]	@ tmp158, pxTCB
 1144 0080 9A6C     		ldr	r2, [r3, #72]	@ _5, pxTCB_42->uxBasePriority
 1145 0082 3B69     		ldr	r3, [r7, #16]	@ tmp159, pxTCB
 1146 0084 DB6A     		ldr	r3, [r3, #44]	@ _6, pxTCB_42->uxPriority
 1147 0086 9A42     		cmp	r2, r3	@ _5, _6
 1148 0088 02D1     		bne	.L70	@,
 1149              	@ FreeRTOS/tasks.c:1120: 						pxTCB->uxPriority = uxNewPriority;
1119:FreeRTOS/tasks.c **** 					{
1120:FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1150              		.loc 1 1120 0
 1151 008a 3B69     		ldr	r3, [r7, #16]	@ tmp160, pxTCB
 1152 008c 3A68     		ldr	r2, [r7]	@ tmp161, uxNewPriority
 1153 008e DA62     		str	r2, [r3, #44]	@ tmp161, pxTCB_42->uxPriority
 1154              	.L70:
 1155              	@ FreeRTOS/tasks.c:1128: 					pxTCB->uxBasePriority = uxNewPriority;
1121:FreeRTOS/tasks.c **** 					}
1122:FreeRTOS/tasks.c **** 					else
1123:FreeRTOS/tasks.c **** 					{
1124:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1125:FreeRTOS/tasks.c **** 					}
1126:FreeRTOS/tasks.c **** 
1127:FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1128:FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1156              		.loc 1 1128 0
 1157 0090 3B69     		ldr	r3, [r7, #16]	@ tmp162, pxTCB
 1158 0092 3A68     		ldr	r2, [r7]	@ tmp163, uxNewPriority
 1159 0094 9A64     		str	r2, [r3, #72]	@ tmp163, pxTCB_42->uxBasePriority
 1160              	@ FreeRTOS/tasks.c:1138: 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVEN
1129:FreeRTOS/tasks.c **** 				}
1130:FreeRTOS/tasks.c **** 				#else
1131:FreeRTOS/tasks.c **** 				{
1132:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1133:FreeRTOS/tasks.c **** 				}
1134:FreeRTOS/tasks.c **** 				#endif
1135:FreeRTOS/tasks.c **** 
1136:FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1137:FreeRTOS/tasks.c **** 				being used for anything else. */
1138:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1161              		.loc 1 1138 0
 1162 0096 3B69     		ldr	r3, [r7, #16]	@ tmp164, pxTCB
 1163 0098 9B69     		ldr	r3, [r3, #24]	@ _7, pxTCB_42->xEventListItem.xItemValue
 1164 009a 002B     		cmp	r3, #0	@ _8,
 1165 009c 04DB     		blt	.L71	@,
 1166              	@ FreeRTOS/tasks.c:1140: 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickT_t ) co
1139:FreeRTOS/tasks.c **** 				{
1140:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - ( Ti
 1167              		.loc 1 1140 0
 1168 009e 3B68     		ldr	r3, [r7]	@ tmp165, uxNewPriority
 1169 00a0 C3F10802 		rsb	r2, r3, #8	@ _9, tmp165,
 1170 00a4 3B69     		ldr	r3, [r7, #16]	@ tmp166, pxTCB
ARM GAS  /tmp/ccTV2SzP.s 			page 42


 1171 00a6 9A61     		str	r2, [r3, #24]	@ _9, pxTCB_42->xEventListItem.xItemValue
 1172              	.L71:
 1173              	@ FreeRTOS/tasks.c:1151: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEnt
1141:FreeRTOS/tasks.c **** 				}
1142:FreeRTOS/tasks.c **** 				else
1143:FreeRTOS/tasks.c **** 				{
1144:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1145:FreeRTOS/tasks.c **** 				}
1146:FreeRTOS/tasks.c **** 
1147:FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1148:FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1149:FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1150:FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1151:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 1174              		.loc 1 1151 0
 1175 00a8 3B69     		ldr	r3, [r7, #16]	@ tmp167, pxTCB
 1176 00aa 5969     		ldr	r1, [r3, #20]	@ _10, pxTCB_42->xGenericListItem.pvContainer
 1177 00ac BA68     		ldr	r2, [r7, #8]	@ tmp168, uxPriorityUsedOnEntry
 1178 00ae 1346     		mov	r3, r2	@ tmp169, tmp168
 1179 00b0 9B00     		lsls	r3, r3, #2	@ tmp169, tmp169,
 1180 00b2 1344     		add	r3, r3, r2	@ tmp169, tmp168
 1181 00b4 9B00     		lsls	r3, r3, #2	@ tmp170, tmp169,
 1182 00b6 1F4A     		ldr	r2, .L76+4	@ tmp171,
 1183 00b8 1344     		add	r3, r3, r2	@ _11, tmp171
 1184 00ba 9942     		cmp	r1, r3	@ _10, _11
 1185 00bc 01D1     		bne	.L72	@,
 1186              	@ FreeRTOS/tasks.c:1151: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEnt
 1187              		.loc 1 1151 0 is_stmt 0 discriminator 1
 1188 00be 0123     		movs	r3, #1	@ iftmp.33_28,
 1189 00c0 00E0     		b	.L73	@
 1190              	.L72:
 1191              	@ FreeRTOS/tasks.c:1151: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEnt
 1192              		.loc 1 1151 0 discriminator 2
 1193 00c2 0023     		movs	r3, #0	@ iftmp.33_28,
 1194              	.L73:
 1195              	@ FreeRTOS/tasks.c:1151: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEnt
 1196              		.loc 1 1151 0 discriminator 4
 1197 00c4 002B     		cmp	r3, #0	@ iftmp.33_28,
 1198 00c6 28D0     		beq	.L74	@,
 1199              	@ FreeRTOS/tasks.c:1156: 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
1152:FreeRTOS/tasks.c **** 				{
1153:FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1154:FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1155:FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1156:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1200              		.loc 1 1156 0 is_stmt 1
 1201 00c8 3B69     		ldr	r3, [r7, #16]	@ tmp172, pxTCB
 1202 00ca 0433     		adds	r3, r3, #4	@ _12, tmp172,
 1203 00cc 1846     		mov	r0, r3	@, _12
 1204 00ce FFF7FEFF 		bl	uxListRemove	@
 1205 00d2 0346     		mov	r3, r0	@ _13,
 1206 00d4 002B     		cmp	r3, #0	@ _13,
 1207 00d6 09D1     		bne	.L75	@,
 1208              	@ FreeRTOS/tasks.c:1161: 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority 
1157:FreeRTOS/tasks.c **** 					{
1158:FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1159:FreeRTOS/tasks.c **** 						there is no need to check again and the port level
ARM GAS  /tmp/ccTV2SzP.s 			page 43


1160:FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1161:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1209              		.loc 1 1161 0
 1210 00d8 0122     		movs	r2, #1	@ tmp173,
 1211 00da BB68     		ldr	r3, [r7, #8]	@ tmp174, uxPriorityUsedOnEntry
 1212 00dc 02FA03F3 		lsl	r3, r2, r3	@ _14, tmp173, tmp174
 1213 00e0 DA43     		mvns	r2, r3	@ _15, _14
 1214 00e2 154B     		ldr	r3, .L76+8	@ tmp175,
 1215 00e4 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.34_16, uxTopReadyPriority
 1216 00e6 1340     		ands	r3, r3, r2	@, _17, uxTopReadyPriority.34_16, _15
 1217 00e8 134A     		ldr	r2, .L76+8	@ tmp176,
 1218 00ea 1360     		str	r3, [r2]	@ _17, uxTopReadyPriority
 1219              	.L75:
 1220              	@ FreeRTOS/tasks.c:1167: 					prvAddTaskToReadyList( pxTCB );
1162:FreeRTOS/tasks.c **** 					}
1163:FreeRTOS/tasks.c **** 					else
1164:FreeRTOS/tasks.c **** 					{
1165:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1166:FreeRTOS/tasks.c **** 					}
1167:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1221              		.loc 1 1167 0
 1222 00ec 3B69     		ldr	r3, [r7, #16]	@ tmp177, pxTCB
 1223 00ee DB6A     		ldr	r3, [r3, #44]	@ _18, pxTCB_42->uxPriority
 1224 00f0 0122     		movs	r2, #1	@ tmp178,
 1225 00f2 9A40     		lsls	r2, r2, r3	@ _19, tmp178, _18
 1226 00f4 104B     		ldr	r3, .L76+8	@ tmp179,
 1227 00f6 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.35_20, uxTopReadyPriority
 1228 00f8 1343     		orrs	r3, r3, r2	@, _21, uxTopReadyPriority.35_20, _19
 1229 00fa 0F4A     		ldr	r2, .L76+8	@ tmp180,
 1230 00fc 1360     		str	r3, [r2]	@ _21, uxTopReadyPriority
 1231 00fe 3B69     		ldr	r3, [r7, #16]	@ tmp181, pxTCB
 1232 0100 DA6A     		ldr	r2, [r3, #44]	@ _22, pxTCB_42->uxPriority
 1233 0102 1346     		mov	r3, r2	@ tmp182, _22
 1234 0104 9B00     		lsls	r3, r3, #2	@ tmp182, tmp182,
 1235 0106 1344     		add	r3, r3, r2	@ tmp182, _22
 1236 0108 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 1237 010a 0A4A     		ldr	r2, .L76+4	@ tmp184,
 1238 010c 1A44     		add	r2, r2, r3	@ _23, tmp182
 1239 010e 3B69     		ldr	r3, [r7, #16]	@ tmp185, pxTCB
 1240 0110 0433     		adds	r3, r3, #4	@ _24, tmp185,
 1241 0112 1946     		mov	r1, r3	@, _24
 1242 0114 1046     		mov	r0, r2	@, _23
 1243 0116 FFF7FEFF 		bl	vListInsertEnd	@
 1244              	.L74:
 1245              	@ FreeRTOS/tasks.c:1174: 				if( xYieldRequired == pdTRUE )
1168:FreeRTOS/tasks.c **** 				}
1169:FreeRTOS/tasks.c **** 				else
1170:FreeRTOS/tasks.c **** 				{
1171:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:FreeRTOS/tasks.c **** 				}
1173:FreeRTOS/tasks.c **** 
1174:FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
 1246              		.loc 1 1174 0
 1247 011a 7B69     		ldr	r3, [r7, #20]	@ tmp186, xYieldRequired
 1248 011c 012B     		cmp	r3, #1	@ tmp186,
 1249 011e 01D1     		bne	.L67	@,
 1250              	@ FreeRTOS/tasks.c:1176: 					taskYIELD_IF_USING_PREEMPTION();
ARM GAS  /tmp/ccTV2SzP.s 			page 44


1175:FreeRTOS/tasks.c **** 				{
1176:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1251              		.loc 1 1176 0
 1252 0120 FFF7FEFF 		bl	vPortYield	@
 1253              	.L67:
 1254              	@ FreeRTOS/tasks.c:1188: 		taskEXIT_CRITICAL();
1177:FreeRTOS/tasks.c **** 				}
1178:FreeRTOS/tasks.c **** 				else
1179:FreeRTOS/tasks.c **** 				{
1180:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1181:FreeRTOS/tasks.c **** 				}
1182:FreeRTOS/tasks.c **** 
1183:FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1184:FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1185:FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1186:FreeRTOS/tasks.c **** 			}
1187:FreeRTOS/tasks.c **** 		}
1188:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1255              		.loc 1 1188 0
 1256 0124 FFF7FEFF 		bl	vPortExitCritical	@
 1257              	@ FreeRTOS/tasks.c:1189: 	}
1189:FreeRTOS/tasks.c **** 	}
 1258              		.loc 1 1189 0
 1259 0128 00BF     		nop
 1260 012a 1837     		adds	r7, r7, #24	@,,
 1261              		.cfi_def_cfa_offset 8
 1262 012c BD46     		mov	sp, r7	@,
 1263              		.cfi_def_cfa_register 13
 1264              		@ sp needed	@
 1265 012e 80BD     		pop	{r7, pc}	@
 1266              	.L77:
 1267              		.align	2
 1268              	.L76:
 1269 0130 00000000 		.word	pxCurrentTCB
 1270 0134 00000000 		.word	pxReadyTasksLists
 1271 0138 00000000 		.word	uxTopReadyPriority
 1272              		.cfi_endproc
 1273              	.LFE6:
 1274              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1275              		.section	.text.vTaskSuspend,"ax",%progbits
 1276              		.align	1
 1277              		.global	vTaskSuspend
 1278              		.syntax unified
 1279              		.thumb
 1280              		.thumb_func
 1281              		.fpu softvfp
 1282              		.type	vTaskSuspend, %function
 1283              	vTaskSuspend:
 1284              	.LFB7:
1190:FreeRTOS/tasks.c **** 
1191:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1192:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1193:FreeRTOS/tasks.c **** 
1194:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1195:FreeRTOS/tasks.c **** 
1196:FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1197:FreeRTOS/tasks.c **** 	{
ARM GAS  /tmp/ccTV2SzP.s 			page 45


 1285              		.loc 1 1197 0
 1286              		.cfi_startproc
 1287              		@ args = 0, pretend = 0, frame = 16
 1288              		@ frame_needed = 1, uses_anonymous_args = 0
 1289 0000 80B5     		push	{r7, lr}	@
 1290              		.cfi_def_cfa_offset 8
 1291              		.cfi_offset 7, -8
 1292              		.cfi_offset 14, -4
 1293 0002 84B0     		sub	sp, sp, #16	@,,
 1294              		.cfi_def_cfa_offset 24
 1295 0004 00AF     		add	r7, sp, #0	@,,
 1296              		.cfi_def_cfa_register 7
 1297 0006 7860     		str	r0, [r7, #4]	@ xTaskToSuspend, xTaskToSuspend
 1298              	@ FreeRTOS/tasks.c:1200: 		taskENTER_CRITICAL();
1198:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1199:FreeRTOS/tasks.c **** 
1200:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 1299              		.loc 1 1200 0
 1300 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 1301              	@ FreeRTOS/tasks.c:1204: 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1201:FreeRTOS/tasks.c **** 		{
1202:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1203:FreeRTOS/tasks.c **** 			being suspended. */
1204:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1302              		.loc 1 1204 0
 1303 000c 7B68     		ldr	r3, [r7, #4]	@ tmp129, xTaskToSuspend
 1304 000e 002B     		cmp	r3, #0	@ tmp129,
 1305 0010 02D1     		bne	.L79	@,
 1306              	@ FreeRTOS/tasks.c:1204: 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1307              		.loc 1 1204 0 is_stmt 0 discriminator 1
 1308 0012 314B     		ldr	r3, .L92	@ tmp130,
 1309 0014 1B68     		ldr	r3, [r3]	@ iftmp.36_19, pxCurrentTCB
 1310 0016 00E0     		b	.L80	@
 1311              	.L79:
 1312              	@ FreeRTOS/tasks.c:1204: 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1313              		.loc 1 1204 0 discriminator 2
 1314 0018 7B68     		ldr	r3, [r7, #4]	@ iftmp.36_19, xTaskToSuspend
 1315              	.L80:
 1316              	@ FreeRTOS/tasks.c:1204: 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1317              		.loc 1 1204 0 discriminator 4
 1318 001a FB60     		str	r3, [r7, #12]	@ iftmp.36_19, pxTCB
 1319              	@ FreeRTOS/tasks.c:1210: 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
1205:FreeRTOS/tasks.c **** 
1206:FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1207:FreeRTOS/tasks.c **** 
1208:FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1209:FreeRTOS/tasks.c **** 			suspended list. */
1210:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1320              		.loc 1 1210 0 is_stmt 1 discriminator 4
 1321 001c FB68     		ldr	r3, [r7, #12]	@ tmp131, pxTCB
 1322 001e 0433     		adds	r3, r3, #4	@ _1, tmp131,
 1323 0020 1846     		mov	r0, r3	@, _1
 1324 0022 FFF7FEFF 		bl	uxListRemove	@
 1325 0026 0346     		mov	r3, r0	@ _2,
 1326 0028 002B     		cmp	r3, #0	@ _2,
 1327 002a 15D1     		bne	.L81	@,
 1328              	@ FreeRTOS/tasks.c:1212: 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
ARM GAS  /tmp/ccTV2SzP.s 			page 46


1211:FreeRTOS/tasks.c **** 			{
1212:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1329              		.loc 1 1212 0
 1330 002c FB68     		ldr	r3, [r7, #12]	@ tmp132, pxTCB
 1331 002e DA6A     		ldr	r2, [r3, #44]	@ _3, pxTCB_30->uxPriority
 1332 0030 2A49     		ldr	r1, .L92+4	@ tmp133,
 1333 0032 1346     		mov	r3, r2	@ tmp134, _3
 1334 0034 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 1335 0036 1344     		add	r3, r3, r2	@ tmp134, _3
 1336 0038 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 1337 003a 0B44     		add	r3, r3, r1	@ tmp136, tmp133
 1338 003c 1B68     		ldr	r3, [r3]	@ _4, pxReadyTasksLists[_3].uxNumberOfItems
 1339 003e 002B     		cmp	r3, #0	@ _4,
 1340 0040 0AD1     		bne	.L81	@,
 1341              	@ FreeRTOS/tasks.c:1212: 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1342              		.loc 1 1212 0 is_stmt 0 discriminator 1
 1343 0042 FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 1344 0044 DB6A     		ldr	r3, [r3, #44]	@ _5, pxTCB_30->uxPriority
 1345 0046 0122     		movs	r2, #1	@ tmp138,
 1346 0048 02FA03F3 		lsl	r3, r2, r3	@ _6, tmp138, _5
 1347 004c DA43     		mvns	r2, r3	@ _7, _6
 1348 004e 244B     		ldr	r3, .L92+8	@ tmp139,
 1349 0050 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.37_8, uxTopReadyPriority
 1350 0052 1340     		ands	r3, r3, r2	@, _9, uxTopReadyPriority.37_8, _7
 1351 0054 224A     		ldr	r2, .L92+8	@ tmp140,
 1352 0056 1360     		str	r3, [r2]	@ _9, uxTopReadyPriority
 1353              	.L81:
 1354              	@ FreeRTOS/tasks.c:1220: 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1213:FreeRTOS/tasks.c **** 			}
1214:FreeRTOS/tasks.c **** 			else
1215:FreeRTOS/tasks.c **** 			{
1216:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1217:FreeRTOS/tasks.c **** 			}
1218:FreeRTOS/tasks.c **** 
1219:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1220:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1355              		.loc 1 1220 0 is_stmt 1
 1356 0058 FB68     		ldr	r3, [r7, #12]	@ tmp141, pxTCB
 1357 005a 9B6A     		ldr	r3, [r3, #40]	@ _10, pxTCB_30->xEventListItem.pvContainer
 1358 005c 002B     		cmp	r3, #0	@ _10,
 1359 005e 04D0     		beq	.L83	@,
 1360              	@ FreeRTOS/tasks.c:1222: 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1221:FreeRTOS/tasks.c **** 			{
1222:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1361              		.loc 1 1222 0
 1362 0060 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 1363 0062 1833     		adds	r3, r3, #24	@ _11, tmp142,
 1364 0064 1846     		mov	r0, r3	@, _11
 1365 0066 FFF7FEFF 		bl	uxListRemove	@
 1366              	.L83:
 1367              	@ FreeRTOS/tasks.c:1229: 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
1223:FreeRTOS/tasks.c **** 			}
1224:FreeRTOS/tasks.c **** 			else
1225:FreeRTOS/tasks.c **** 			{
1226:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1227:FreeRTOS/tasks.c **** 			}
1228:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 47


1229:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1368              		.loc 1 1229 0
 1369 006a FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 1370 006c 0433     		adds	r3, r3, #4	@ _12, tmp143,
 1371 006e 1946     		mov	r1, r3	@, _12
 1372 0070 1C48     		ldr	r0, .L92+12	@,
 1373 0072 FFF7FEFF 		bl	vListInsertEnd	@
 1374              	@ FreeRTOS/tasks.c:1231: 		taskEXIT_CRITICAL();
1230:FreeRTOS/tasks.c **** 		}
1231:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1375              		.loc 1 1231 0
 1376 0076 FFF7FEFF 		bl	vPortExitCritical	@
 1377              	@ FreeRTOS/tasks.c:1233: 		if( pxTCB == pxCurrentTCB )
1232:FreeRTOS/tasks.c **** 
1233:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1378              		.loc 1 1233 0
 1379 007a 174B     		ldr	r3, .L92	@ tmp144,
 1380 007c 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.38_13, pxCurrentTCB
 1381 007e FA68     		ldr	r2, [r7, #12]	@ tmp145, pxTCB
 1382 0080 9A42     		cmp	r2, r3	@ tmp145, pxCurrentTCB.38_13
 1383 0082 1AD1     		bne	.L84	@,
 1384              	@ FreeRTOS/tasks.c:1235: 			if( xSchedulerRunning != pdFALSE )
1234:FreeRTOS/tasks.c **** 		{
1235:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1385              		.loc 1 1235 0
 1386 0084 184B     		ldr	r3, .L92+16	@ tmp146,
 1387 0086 1B68     		ldr	r3, [r3]	@ xSchedulerRunning.39_14, xSchedulerRunning
 1388 0088 002B     		cmp	r3, #0	@ xSchedulerRunning.39_14,
 1389 008a 09D0     		beq	.L85	@,
 1390              	@ FreeRTOS/tasks.c:1238: 				configASSERT( uxSchedulerSuspended == 0 );
1236:FreeRTOS/tasks.c **** 			{
1237:FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1238:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1391              		.loc 1 1238 0
 1392 008c 174B     		ldr	r3, .L92+20	@ tmp147,
 1393 008e 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.40_15, uxSchedulerSuspended
 1394 0090 002B     		cmp	r3, #0	@ uxSchedulerSuspended.40_15,
 1395 0092 02D0     		beq	.L86	@,
 1396              	@ FreeRTOS/tasks.c:1238: 				configASSERT( uxSchedulerSuspended == 0 );
 1397              		.loc 1 1238 0 is_stmt 0 discriminator 1
 1398 0094 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1399              	.L87:
 1400 0098 FEE7     		b	.L87	@
 1401              	.L86:
 1402              	@ FreeRTOS/tasks.c:1239: 				portYIELD_WITHIN_API();
1239:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1403              		.loc 1 1239 0 is_stmt 1
 1404 009a FFF7FEFF 		bl	vPortYield	@
 1405              	@ FreeRTOS/tasks.c:1278: 	}
1240:FreeRTOS/tasks.c **** 			}
1241:FreeRTOS/tasks.c **** 			else
1242:FreeRTOS/tasks.c **** 			{
1243:FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1244:FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1245:FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1246:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1247:FreeRTOS/tasks.c **** 				{
ARM GAS  /tmp/ccTV2SzP.s 			page 48


1248:FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1249:FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1250:FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1251:FreeRTOS/tasks.c **** 					is. */
1252:FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1253:FreeRTOS/tasks.c **** 				}
1254:FreeRTOS/tasks.c **** 				else
1255:FreeRTOS/tasks.c **** 				{
1256:FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1257:FreeRTOS/tasks.c **** 				}
1258:FreeRTOS/tasks.c **** 			}
1259:FreeRTOS/tasks.c **** 		}
1260:FreeRTOS/tasks.c **** 		else
1261:FreeRTOS/tasks.c **** 		{
1262:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1263:FreeRTOS/tasks.c **** 			{
1264:FreeRTOS/tasks.c **** 				/* A task other than the currently running task was suspended,
1265:FreeRTOS/tasks.c **** 				reset the next expected unblock time in case it referred to the
1266:FreeRTOS/tasks.c **** 				task that is now in the Suspended state. */
1267:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
1268:FreeRTOS/tasks.c **** 				{
1269:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
1270:FreeRTOS/tasks.c **** 				}
1271:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
1272:FreeRTOS/tasks.c **** 			}
1273:FreeRTOS/tasks.c **** 			else
1274:FreeRTOS/tasks.c **** 			{
1275:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1276:FreeRTOS/tasks.c **** 			}
1277:FreeRTOS/tasks.c **** 		}
1278:FreeRTOS/tasks.c **** 	}
 1406              		.loc 1 1278 0
 1407 009e 16E0     		b	.L91	@
 1408              	.L85:
 1409              	@ FreeRTOS/tasks.c:1246: 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberO
1246:FreeRTOS/tasks.c **** 				{
 1410              		.loc 1 1246 0
 1411 00a0 104B     		ldr	r3, .L92+12	@ tmp148,
 1412 00a2 1A68     		ldr	r2, [r3]	@ _16, xSuspendedTaskList.uxNumberOfItems
 1413 00a4 124B     		ldr	r3, .L92+24	@ tmp149,
 1414 00a6 1B68     		ldr	r3, [r3]	@ uxCurrentNumberOfTasks.41_17, uxCurrentNumberOfTasks
 1415 00a8 9A42     		cmp	r2, r3	@ _16, uxCurrentNumberOfTasks.41_17
 1416 00aa 03D1     		bne	.L89	@,
 1417              	@ FreeRTOS/tasks.c:1252: 					pxCurrentTCB = NULL;
1252:FreeRTOS/tasks.c **** 				}
 1418              		.loc 1 1252 0
 1419 00ac 0A4B     		ldr	r3, .L92	@ tmp150,
 1420 00ae 0022     		movs	r2, #0	@ tmp151,
 1421 00b0 1A60     		str	r2, [r3]	@ tmp151, pxCurrentTCB
 1422              	@ FreeRTOS/tasks.c:1278: 	}
 1423              		.loc 1 1278 0
 1424 00b2 0CE0     		b	.L91	@
 1425              	.L89:
 1426              	@ FreeRTOS/tasks.c:1256: 					vTaskSwitchContext();
1256:FreeRTOS/tasks.c **** 				}
 1427              		.loc 1 1256 0
 1428 00b4 FFF7FEFF 		bl	vTaskSwitchContext	@
ARM GAS  /tmp/ccTV2SzP.s 			page 49


 1429              	@ FreeRTOS/tasks.c:1278: 	}
 1430              		.loc 1 1278 0
 1431 00b8 09E0     		b	.L91	@
 1432              	.L84:
 1433              	@ FreeRTOS/tasks.c:1262: 			if( xSchedulerRunning != pdFALSE )
1262:FreeRTOS/tasks.c **** 			{
 1434              		.loc 1 1262 0
 1435 00ba 0B4B     		ldr	r3, .L92+16	@ tmp152,
 1436 00bc 1B68     		ldr	r3, [r3]	@ xSchedulerRunning.42_18, xSchedulerRunning
 1437 00be 002B     		cmp	r3, #0	@ xSchedulerRunning.42_18,
 1438 00c0 05D0     		beq	.L91	@,
 1439              	@ FreeRTOS/tasks.c:1267: 				taskENTER_CRITICAL();
1267:FreeRTOS/tasks.c **** 				{
 1440              		.loc 1 1267 0
 1441 00c2 FFF7FEFF 		bl	vPortEnterCritical	@
 1442              	@ FreeRTOS/tasks.c:1269: 					prvResetNextTaskUnblockTime();
1269:FreeRTOS/tasks.c **** 				}
 1443              		.loc 1 1269 0
 1444 00c6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 1445              	@ FreeRTOS/tasks.c:1271: 				taskEXIT_CRITICAL();
1271:FreeRTOS/tasks.c **** 			}
 1446              		.loc 1 1271 0
 1447 00ca FFF7FEFF 		bl	vPortExitCritical	@
 1448              	.L91:
 1449              	@ FreeRTOS/tasks.c:1278: 	}
 1450              		.loc 1 1278 0
 1451 00ce 00BF     		nop
 1452 00d0 1037     		adds	r7, r7, #16	@,,
 1453              		.cfi_def_cfa_offset 8
 1454 00d2 BD46     		mov	sp, r7	@,
 1455              		.cfi_def_cfa_register 13
 1456              		@ sp needed	@
 1457 00d4 80BD     		pop	{r7, pc}	@
 1458              	.L93:
 1459 00d6 00BF     		.align	2
 1460              	.L92:
 1461 00d8 00000000 		.word	pxCurrentTCB
 1462 00dc 00000000 		.word	pxReadyTasksLists
 1463 00e0 00000000 		.word	uxTopReadyPriority
 1464 00e4 00000000 		.word	xSuspendedTaskList
 1465 00e8 00000000 		.word	xSchedulerRunning
 1466 00ec 00000000 		.word	uxSchedulerSuspended
 1467 00f0 00000000 		.word	uxCurrentNumberOfTasks
 1468              		.cfi_endproc
 1469              	.LFE7:
 1470              		.size	vTaskSuspend, .-vTaskSuspend
 1471              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1472              		.align	1
 1473              		.syntax unified
 1474              		.thumb
 1475              		.thumb_func
 1476              		.fpu softvfp
 1477              		.type	prvTaskIsTaskSuspended, %function
 1478              	prvTaskIsTaskSuspended:
 1479              	.LFB8:
1279:FreeRTOS/tasks.c **** 
1280:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccTV2SzP.s 			page 50


1281:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1282:FreeRTOS/tasks.c **** 
1283:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1284:FreeRTOS/tasks.c **** 
1285:FreeRTOS/tasks.c **** 	static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1286:FreeRTOS/tasks.c **** 	{
 1480              		.loc 1 1286 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 16
 1483              		@ frame_needed = 1, uses_anonymous_args = 0
 1484 0000 80B5     		push	{r7, lr}	@
 1485              		.cfi_def_cfa_offset 8
 1486              		.cfi_offset 7, -8
 1487              		.cfi_offset 14, -4
 1488 0002 84B0     		sub	sp, sp, #16	@,,
 1489              		.cfi_def_cfa_offset 24
 1490 0004 00AF     		add	r7, sp, #0	@,,
 1491              		.cfi_def_cfa_register 7
 1492 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 1493              	@ FreeRTOS/tasks.c:1287: 	BaseT_t xReturn = pdFALSE;
1287:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 1494              		.loc 1 1287 0
 1495 0008 0023     		movs	r3, #0	@ tmp117,
 1496 000a FB60     		str	r3, [r7, #12]	@ tmp117, xReturn
 1497              	@ FreeRTOS/tasks.c:1288: 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1288:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1498              		.loc 1 1288 0
 1499 000c 7B68     		ldr	r3, [r7, #4]	@ tmp118, xTask
 1500 000e BB60     		str	r3, [r7, #8]	@ tmp118, pxTCB
 1501              	@ FreeRTOS/tasks.c:1294: 		configASSERT( xTask );
1289:FreeRTOS/tasks.c **** 
1290:FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1291:FreeRTOS/tasks.c **** 		section. */
1292:FreeRTOS/tasks.c **** 
1293:FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1294:FreeRTOS/tasks.c **** 		configASSERT( xTask );
 1502              		.loc 1 1294 0
 1503 0010 7B68     		ldr	r3, [r7, #4]	@ tmp119, xTask
 1504 0012 002B     		cmp	r3, #0	@ tmp119,
 1505 0014 02D1     		bne	.L95	@,
 1506              	@ FreeRTOS/tasks.c:1294: 		configASSERT( xTask );
 1507              		.loc 1 1294 0 is_stmt 0 discriminator 1
 1508 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1509              	.L96:
 1510 001a FEE7     		b	.L96	@
 1511              	.L95:
 1512              	@ FreeRTOS/tasks.c:1297: 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericList
1295:FreeRTOS/tasks.c **** 
1296:FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1297:FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1513              		.loc 1 1297 0 is_stmt 1
 1514 001c BB68     		ldr	r3, [r7, #8]	@ tmp120, pxTCB
 1515 001e 5B69     		ldr	r3, [r3, #20]	@ _1, pxTCB_9->xGenericListItem.pvContainer
 1516 0020 0E4A     		ldr	r2, .L103	@ tmp121,
 1517 0022 9342     		cmp	r3, r2	@ _1, tmp121
 1518 0024 01D1     		bne	.L97	@,
 1519              	@ FreeRTOS/tasks.c:1297: 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericList
ARM GAS  /tmp/ccTV2SzP.s 			page 51


 1520              		.loc 1 1297 0 is_stmt 0 discriminator 1
 1521 0026 0123     		movs	r3, #1	@ iftmp.43_5,
 1522 0028 00E0     		b	.L98	@
 1523              	.L97:
 1524              	@ FreeRTOS/tasks.c:1297: 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericList
 1525              		.loc 1 1297 0 discriminator 2
 1526 002a 0023     		movs	r3, #0	@ iftmp.43_5,
 1527              	.L98:
 1528              	@ FreeRTOS/tasks.c:1297: 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericList
 1529              		.loc 1 1297 0 discriminator 4
 1530 002c 002B     		cmp	r3, #0	@ iftmp.43_5,
 1531 002e 0FD0     		beq	.L99	@,
 1532              	@ FreeRTOS/tasks.c:1300: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListIt
1298:FreeRTOS/tasks.c **** 		{
1299:FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1300:FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1533              		.loc 1 1300 0 is_stmt 1
 1534 0030 BB68     		ldr	r3, [r7, #8]	@ tmp122, pxTCB
 1535 0032 9B6A     		ldr	r3, [r3, #40]	@ _2, pxTCB_9->xEventListItem.pvContainer
 1536 0034 0A4A     		ldr	r2, .L103+4	@ tmp123,
 1537 0036 9342     		cmp	r3, r2	@ _2, tmp123
 1538 0038 0AD0     		beq	.L99	@,
 1539              	@ FreeRTOS/tasks.c:1304: 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdF
1301:FreeRTOS/tasks.c **** 			{
1302:FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1303:FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1304:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1540              		.loc 1 1304 0
 1541 003a BB68     		ldr	r3, [r7, #8]	@ tmp124, pxTCB
 1542 003c 9B6A     		ldr	r3, [r3, #40]	@ _3, pxTCB_9->xEventListItem.pvContainer
 1543 003e 002B     		cmp	r3, #0	@ _3,
 1544 0040 01D1     		bne	.L100	@,
 1545              	@ FreeRTOS/tasks.c:1304: 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdF
 1546              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1547 0042 0123     		movs	r3, #1	@ iftmp.44_6,
 1548 0044 00E0     		b	.L101	@
 1549              	.L100:
 1550              	@ FreeRTOS/tasks.c:1304: 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdF
 1551              		.loc 1 1304 0 discriminator 2
 1552 0046 0023     		movs	r3, #0	@ iftmp.44_6,
 1553              	.L101:
 1554              	@ FreeRTOS/tasks.c:1304: 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdF
 1555              		.loc 1 1304 0 discriminator 4
 1556 0048 002B     		cmp	r3, #0	@ iftmp.44_6,
 1557 004a 01D0     		beq	.L99	@,
 1558              	@ FreeRTOS/tasks.c:1306: 					xReturn = pdTRUE;
1305:FreeRTOS/tasks.c **** 				{
1306:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 1559              		.loc 1 1306 0 is_stmt 1
 1560 004c 0123     		movs	r3, #1	@ tmp125,
 1561 004e FB60     		str	r3, [r7, #12]	@ tmp125, xReturn
 1562              	.L99:
 1563              	@ FreeRTOS/tasks.c:1323: 		return xReturn;
1307:FreeRTOS/tasks.c **** 				}
1308:FreeRTOS/tasks.c **** 				else
1309:FreeRTOS/tasks.c **** 				{
1310:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccTV2SzP.s 			page 52


1311:FreeRTOS/tasks.c **** 				}
1312:FreeRTOS/tasks.c **** 			}
1313:FreeRTOS/tasks.c **** 			else
1314:FreeRTOS/tasks.c **** 			{
1315:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1316:FreeRTOS/tasks.c **** 			}
1317:FreeRTOS/tasks.c **** 		}
1318:FreeRTOS/tasks.c **** 		else
1319:FreeRTOS/tasks.c **** 		{
1320:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1321:FreeRTOS/tasks.c **** 		}
1322:FreeRTOS/tasks.c **** 
1323:FreeRTOS/tasks.c **** 		return xReturn;
 1564              		.loc 1 1323 0
 1565 0050 FB68     		ldr	r3, [r7, #12]	@ _16, xReturn
 1566              	@ FreeRTOS/tasks.c:1324: 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef
1324:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1567              		.loc 1 1324 0
 1568 0052 1846     		mov	r0, r3	@, <retval>
 1569 0054 1037     		adds	r7, r7, #16	@,,
 1570              		.cfi_def_cfa_offset 8
 1571 0056 BD46     		mov	sp, r7	@,
 1572              		.cfi_def_cfa_register 13
 1573              		@ sp needed	@
 1574 0058 80BD     		pop	{r7, pc}	@
 1575              	.L104:
 1576 005a 00BF     		.align	2
 1577              	.L103:
 1578 005c 00000000 		.word	xSuspendedTaskList
 1579 0060 00000000 		.word	xPendingReadyList
 1580              		.cfi_endproc
 1581              	.LFE8:
 1582              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1583              		.section	.text.vTaskResume,"ax",%progbits
 1584              		.align	1
 1585              		.global	vTaskResume
 1586              		.syntax unified
 1587              		.thumb
 1588              		.thumb_func
 1589              		.fpu softvfp
 1590              		.type	vTaskResume, %function
 1591              	vTaskResume:
 1592              	.LFB9:
1325:FreeRTOS/tasks.c **** 
1326:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1327:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1328:FreeRTOS/tasks.c **** 
1329:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1330:FreeRTOS/tasks.c **** 
1331:FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1332:FreeRTOS/tasks.c **** 	{
 1593              		.loc 1 1332 0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 16
 1596              		@ frame_needed = 1, uses_anonymous_args = 0
 1597 0000 80B5     		push	{r7, lr}	@
 1598              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccTV2SzP.s 			page 53


 1599              		.cfi_offset 7, -8
 1600              		.cfi_offset 14, -4
 1601 0002 84B0     		sub	sp, sp, #16	@,,
 1602              		.cfi_def_cfa_offset 24
 1603 0004 00AF     		add	r7, sp, #0	@,,
 1604              		.cfi_def_cfa_register 7
 1605 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
 1606              	@ FreeRTOS/tasks.c:1333: 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1333:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1607              		.loc 1 1333 0
 1608 0008 7B68     		ldr	r3, [r7, #4]	@ tmp123, xTaskToResume
 1609 000a FB60     		str	r3, [r7, #12]	@ tmp123, pxTCB
 1610              	@ FreeRTOS/tasks.c:1336: 		configASSERT( xTaskToResume );
1334:FreeRTOS/tasks.c **** 
1335:FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1336:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1611              		.loc 1 1336 0
 1612 000c 7B68     		ldr	r3, [r7, #4]	@ tmp124, xTaskToResume
 1613 000e 002B     		cmp	r3, #0	@ tmp124,
 1614 0010 02D1     		bne	.L106	@,
 1615              	@ FreeRTOS/tasks.c:1336: 		configASSERT( xTaskToResume );
 1616              		.loc 1 1336 0 is_stmt 0 discriminator 1
 1617 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1618              	.L107:
 1619 0016 FEE7     		b	.L107	@
 1620              	.L106:
 1621              	@ FreeRTOS/tasks.c:1340: 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1337:FreeRTOS/tasks.c **** 
1338:FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1339:FreeRTOS/tasks.c **** 		currently executing task. */
1340:FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1622              		.loc 1 1340 0 is_stmt 1
 1623 0018 FB68     		ldr	r3, [r7, #12]	@ tmp125, pxTCB
 1624 001a 002B     		cmp	r3, #0	@ tmp125,
 1625 001c 33D0     		beq	.L110	@,
 1626              	@ FreeRTOS/tasks.c:1340: 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1627              		.loc 1 1340 0 is_stmt 0 discriminator 1
 1628 001e 1C4B     		ldr	r3, .L111	@ tmp126,
 1629 0020 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.45_1, pxCurrentTCB
 1630 0022 FA68     		ldr	r2, [r7, #12]	@ tmp127, pxTCB
 1631 0024 9A42     		cmp	r2, r3	@ tmp127, pxCurrentTCB.45_1
 1632 0026 2ED0     		beq	.L110	@,
 1633              	@ FreeRTOS/tasks.c:1342: 			taskENTER_CRITICAL();
1341:FreeRTOS/tasks.c **** 		{
1342:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 1634              		.loc 1 1342 0 is_stmt 1
 1635 0028 FFF7FEFF 		bl	vPortEnterCritical	@
 1636              	@ FreeRTOS/tasks.c:1344: 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1343:FreeRTOS/tasks.c **** 			{
1344:FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1637              		.loc 1 1344 0
 1638 002c F868     		ldr	r0, [r7, #12]	@, pxTCB
 1639 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1640 0032 0346     		mov	r3, r0	@ _2,
 1641 0034 012B     		cmp	r3, #1	@ _2,
 1642 0036 24D1     		bne	.L109	@,
 1643              	@ FreeRTOS/tasks.c:1350: 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
ARM GAS  /tmp/ccTV2SzP.s 			page 54


1345:FreeRTOS/tasks.c **** 				{
1346:FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1347:FreeRTOS/tasks.c **** 
1348:FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1349:FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1350:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1644              		.loc 1 1350 0
 1645 0038 FB68     		ldr	r3, [r7, #12]	@ tmp128, pxTCB
 1646 003a 0433     		adds	r3, r3, #4	@ _3, tmp128,
 1647 003c 1846     		mov	r0, r3	@, _3
 1648 003e FFF7FEFF 		bl	uxListRemove	@
 1649              	@ FreeRTOS/tasks.c:1351: 					prvAddTaskToReadyList( pxTCB );
1351:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1650              		.loc 1 1351 0
 1651 0042 FB68     		ldr	r3, [r7, #12]	@ tmp129, pxTCB
 1652 0044 DB6A     		ldr	r3, [r3, #44]	@ _4, pxTCB_17->uxPriority
 1653 0046 0122     		movs	r2, #1	@ tmp130,
 1654 0048 9A40     		lsls	r2, r2, r3	@ _5, tmp130, _4
 1655 004a 124B     		ldr	r3, .L111+4	@ tmp131,
 1656 004c 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.46_6, uxTopReadyPriority
 1657 004e 1343     		orrs	r3, r3, r2	@, _7, uxTopReadyPriority.46_6, _5
 1658 0050 104A     		ldr	r2, .L111+4	@ tmp132,
 1659 0052 1360     		str	r3, [r2]	@ _7, uxTopReadyPriority
 1660 0054 FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 1661 0056 DA6A     		ldr	r2, [r3, #44]	@ _8, pxTCB_17->uxPriority
 1662 0058 1346     		mov	r3, r2	@ tmp134, _8
 1663 005a 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 1664 005c 1344     		add	r3, r3, r2	@ tmp134, _8
 1665 005e 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 1666 0060 0D4A     		ldr	r2, .L111+8	@ tmp136,
 1667 0062 1A44     		add	r2, r2, r3	@ _9, tmp134
 1668 0064 FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 1669 0066 0433     		adds	r3, r3, #4	@ _10, tmp137,
 1670 0068 1946     		mov	r1, r3	@, _10
 1671 006a 1046     		mov	r0, r2	@, _9
 1672 006c FFF7FEFF 		bl	vListInsertEnd	@
 1673              	@ FreeRTOS/tasks.c:1354: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1352:FreeRTOS/tasks.c **** 
1353:FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1354:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1674              		.loc 1 1354 0
 1675 0070 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 1676 0072 DA6A     		ldr	r2, [r3, #44]	@ _11, pxTCB_17->uxPriority
 1677 0074 064B     		ldr	r3, .L111	@ tmp139,
 1678 0076 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.47_12, pxCurrentTCB
 1679 0078 DB6A     		ldr	r3, [r3, #44]	@ _13, pxCurrentTCB.47_12->uxPriority
 1680 007a 9A42     		cmp	r2, r3	@ _11, _13
 1681 007c 01D3     		bcc	.L109	@,
 1682              	@ FreeRTOS/tasks.c:1359: 						taskYIELD_IF_USING_PREEMPTION();
1355:FreeRTOS/tasks.c **** 					{
1356:FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1357:FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1358:FreeRTOS/tasks.c **** 						next yield. */
1359:FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1683              		.loc 1 1359 0
 1684 007e FFF7FEFF 		bl	vPortYield	@
 1685              	.L109:
ARM GAS  /tmp/ccTV2SzP.s 			page 55


 1686              	@ FreeRTOS/tasks.c:1371: 			taskEXIT_CRITICAL();
1360:FreeRTOS/tasks.c **** 					}
1361:FreeRTOS/tasks.c **** 					else
1362:FreeRTOS/tasks.c **** 					{
1363:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1364:FreeRTOS/tasks.c **** 					}
1365:FreeRTOS/tasks.c **** 				}
1366:FreeRTOS/tasks.c **** 				else
1367:FreeRTOS/tasks.c **** 				{
1368:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1369:FreeRTOS/tasks.c **** 				}
1370:FreeRTOS/tasks.c **** 			}
1371:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1687              		.loc 1 1371 0
 1688 0082 FFF7FEFF 		bl	vPortExitCritical	@
 1689              	.L110:
 1690              	@ FreeRTOS/tasks.c:1377: 	}
1372:FreeRTOS/tasks.c **** 		}
1373:FreeRTOS/tasks.c **** 		else
1374:FreeRTOS/tasks.c **** 		{
1375:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1376:FreeRTOS/tasks.c **** 		}
1377:FreeRTOS/tasks.c **** 	}
 1691              		.loc 1 1377 0
 1692 0086 00BF     		nop
 1693 0088 1037     		adds	r7, r7, #16	@,,
 1694              		.cfi_def_cfa_offset 8
 1695 008a BD46     		mov	sp, r7	@,
 1696              		.cfi_def_cfa_register 13
 1697              		@ sp needed	@
 1698 008c 80BD     		pop	{r7, pc}	@
 1699              	.L112:
 1700 008e 00BF     		.align	2
 1701              	.L111:
 1702 0090 00000000 		.word	pxCurrentTCB
 1703 0094 00000000 		.word	uxTopReadyPriority
 1704 0098 00000000 		.word	pxReadyTasksLists
 1705              		.cfi_endproc
 1706              	.LFE9:
 1707              		.size	vTaskResume, .-vTaskResume
 1708              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1709              		.align	1
 1710              		.global	xTaskResumeFromISR
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu softvfp
 1715              		.type	xTaskResumeFromISR, %function
 1716              	xTaskResumeFromISR:
 1717              	.LFB10:
1378:FreeRTOS/tasks.c **** 
1379:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1380:FreeRTOS/tasks.c **** 
1381:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1382:FreeRTOS/tasks.c **** 
1383:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1384:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 56


1385:FreeRTOS/tasks.c **** 	BaseT_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1386:FreeRTOS/tasks.c **** 	{
 1718              		.loc 1 1386 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 24
 1721              		@ frame_needed = 1, uses_anonymous_args = 0
 1722 0000 80B5     		push	{r7, lr}	@
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726 0002 86B0     		sub	sp, sp, #24	@,,
 1727              		.cfi_def_cfa_offset 32
 1728 0004 00AF     		add	r7, sp, #0	@,,
 1729              		.cfi_def_cfa_register 7
 1730 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
 1731              	@ FreeRTOS/tasks.c:1387: 	BaseT_t xYieldRequired = pdFALSE;
1387:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 1732              		.loc 1 1387 0
 1733 0008 0023     		movs	r3, #0	@ tmp126,
 1734 000a 7B61     		str	r3, [r7, #20]	@ tmp126, xYieldRequired
 1735              	@ FreeRTOS/tasks.c:1388: 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1388:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1736              		.loc 1 1388 0
 1737 000c 7B68     		ldr	r3, [r7, #4]	@ tmp127, xTaskToResume
 1738 000e 3B61     		str	r3, [r7, #16]	@ tmp127, pxTCB
 1739              	@ FreeRTOS/tasks.c:1391: 		configASSERT( xTaskToResume );
1389:FreeRTOS/tasks.c **** 	UBaseT_t uxSavedInterruptStatus;
1390:FreeRTOS/tasks.c **** 
1391:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1740              		.loc 1 1391 0
 1741 0010 7B68     		ldr	r3, [r7, #4]	@ tmp128, xTaskToResume
 1742 0012 002B     		cmp	r3, #0	@ tmp128,
 1743 0014 02D1     		bne	.L114	@,
 1744              	@ FreeRTOS/tasks.c:1391: 		configASSERT( xTaskToResume );
 1745              		.loc 1 1391 0 is_stmt 0 discriminator 1
 1746 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1747              	.L115:
 1748 001a FEE7     		b	.L115	@
 1749              	.L114:
 1750              	@ FreeRTOS/tasks.c:1409: 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1392:FreeRTOS/tasks.c **** 
1393:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1394:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1395:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1396:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1397:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1398:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1399:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1400:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1401:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1402:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1403:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1404:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1405:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1406:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1407:FreeRTOS/tasks.c **** 		provided on the following link:
1408:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  /tmp/ccTV2SzP.s 			page 57


1409:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1751              		.loc 1 1409 0 is_stmt 1
 1752 001c FFF7FEFF 		bl	vPortValidateInterruptPriority	@
 1753              	@ FreeRTOS/tasks.c:1411: 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1410:FreeRTOS/tasks.c **** 
1411:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1754              		.loc 1 1411 0
 1755 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1756 0024 F860     		str	r0, [r7, #12]	@, uxSavedInterruptStatus
 1757              	@ FreeRTOS/tasks.c:1413: 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
1412:FreeRTOS/tasks.c **** 		{
1413:FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1758              		.loc 1 1413 0
 1759 0026 3869     		ldr	r0, [r7, #16]	@, pxTCB
 1760 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1761 002c 0346     		mov	r3, r0	@ _1,
 1762 002e 012B     		cmp	r3, #1	@ _1,
 1763 0030 2FD1     		bne	.L116	@,
 1764              	@ FreeRTOS/tasks.c:1418: 				if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
1414:FreeRTOS/tasks.c **** 			{
1415:FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1416:FreeRTOS/tasks.c **** 
1417:FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1418:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1765              		.loc 1 1418 0
 1766 0032 1C4B     		ldr	r3, .L121	@ tmp129,
 1767 0034 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.48_2, uxSchedulerSuspended
 1768 0036 002B     		cmp	r3, #0	@ uxSchedulerSuspended.48_2,
 1769 0038 25D1     		bne	.L117	@,
 1770              	@ FreeRTOS/tasks.c:1422: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1419:FreeRTOS/tasks.c **** 				{
1420:FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1421:FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1422:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1771              		.loc 1 1422 0
 1772 003a 3B69     		ldr	r3, [r7, #16]	@ tmp130, pxTCB
 1773 003c DA6A     		ldr	r2, [r3, #44]	@ _3, pxTCB_22->uxPriority
 1774 003e 1A4B     		ldr	r3, .L121+4	@ tmp131,
 1775 0040 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.49_4, pxCurrentTCB
 1776 0042 DB6A     		ldr	r3, [r3, #44]	@ _5, pxCurrentTCB.49_4->uxPriority
 1777 0044 9A42     		cmp	r2, r3	@ _3, _5
 1778 0046 01D3     		bcc	.L118	@,
 1779              	@ FreeRTOS/tasks.c:1424: 						xYieldRequired = pdTRUE;
1423:FreeRTOS/tasks.c **** 					{
1424:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 1780              		.loc 1 1424 0
 1781 0048 0123     		movs	r3, #1	@ tmp132,
 1782 004a 7B61     		str	r3, [r7, #20]	@ tmp132, xYieldRequired
 1783              	.L118:
 1784              	@ FreeRTOS/tasks.c:1431: 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
1425:FreeRTOS/tasks.c **** 					}
1426:FreeRTOS/tasks.c **** 					else
1427:FreeRTOS/tasks.c **** 					{
1428:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1429:FreeRTOS/tasks.c **** 					}
1430:FreeRTOS/tasks.c **** 
1431:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
ARM GAS  /tmp/ccTV2SzP.s 			page 58


 1785              		.loc 1 1431 0
 1786 004c 3B69     		ldr	r3, [r7, #16]	@ tmp133, pxTCB
 1787 004e 0433     		adds	r3, r3, #4	@ _6, tmp133,
 1788 0050 1846     		mov	r0, r3	@, _6
 1789 0052 FFF7FEFF 		bl	uxListRemove	@
 1790              	@ FreeRTOS/tasks.c:1432: 					prvAddTaskToReadyList( pxTCB );
1432:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1791              		.loc 1 1432 0
 1792 0056 3B69     		ldr	r3, [r7, #16]	@ tmp134, pxTCB
 1793 0058 DB6A     		ldr	r3, [r3, #44]	@ _7, pxTCB_22->uxPriority
 1794 005a 0122     		movs	r2, #1	@ tmp135,
 1795 005c 9A40     		lsls	r2, r2, r3	@ _8, tmp135, _7
 1796 005e 134B     		ldr	r3, .L121+8	@ tmp136,
 1797 0060 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.50_9, uxTopReadyPriority
 1798 0062 1343     		orrs	r3, r3, r2	@, _10, uxTopReadyPriority.50_9, _8
 1799 0064 114A     		ldr	r2, .L121+8	@ tmp137,
 1800 0066 1360     		str	r3, [r2]	@ _10, uxTopReadyPriority
 1801 0068 3B69     		ldr	r3, [r7, #16]	@ tmp138, pxTCB
 1802 006a DA6A     		ldr	r2, [r3, #44]	@ _11, pxTCB_22->uxPriority
 1803 006c 1346     		mov	r3, r2	@ tmp139, _11
 1804 006e 9B00     		lsls	r3, r3, #2	@ tmp139, tmp139,
 1805 0070 1344     		add	r3, r3, r2	@ tmp139, _11
 1806 0072 9B00     		lsls	r3, r3, #2	@ tmp140, tmp139,
 1807 0074 0E4A     		ldr	r2, .L121+12	@ tmp141,
 1808 0076 1A44     		add	r2, r2, r3	@ _12, tmp139
 1809 0078 3B69     		ldr	r3, [r7, #16]	@ tmp142, pxTCB
 1810 007a 0433     		adds	r3, r3, #4	@ _13, tmp142,
 1811 007c 1946     		mov	r1, r3	@, _13
 1812 007e 1046     		mov	r0, r2	@, _12
 1813 0080 FFF7FEFF 		bl	vListInsertEnd	@
 1814 0084 05E0     		b	.L116	@
 1815              	.L117:
 1816              	@ FreeRTOS/tasks.c:1439: 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1433:FreeRTOS/tasks.c **** 				}
1434:FreeRTOS/tasks.c **** 				else
1435:FreeRTOS/tasks.c **** 				{
1436:FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1437:FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1438:FreeRTOS/tasks.c **** 					unsuspended. */
1439:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1817              		.loc 1 1439 0
 1818 0086 3B69     		ldr	r3, [r7, #16]	@ tmp143, pxTCB
 1819 0088 1833     		adds	r3, r3, #24	@ _14, tmp143,
 1820 008a 1946     		mov	r1, r3	@, _14
 1821 008c 0948     		ldr	r0, .L121+16	@,
 1822 008e FFF7FEFF 		bl	vListInsertEnd	@
 1823              	.L116:
 1824              	@ FreeRTOS/tasks.c:1447: 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1440:FreeRTOS/tasks.c **** 				}
1441:FreeRTOS/tasks.c **** 			}
1442:FreeRTOS/tasks.c **** 			else
1443:FreeRTOS/tasks.c **** 			{
1444:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1445:FreeRTOS/tasks.c **** 			}
1446:FreeRTOS/tasks.c **** 		}
1447:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1825              		.loc 1 1447 0
ARM GAS  /tmp/ccTV2SzP.s 			page 59


 1826 0092 F868     		ldr	r0, [r7, #12]	@, uxSavedInterruptStatus
 1827 0094 FFF7FEFF 		bl	vPortClearInterruptMask	@
 1828              	@ FreeRTOS/tasks.c:1449: 		return xYieldRequired;
1448:FreeRTOS/tasks.c **** 
1449:FreeRTOS/tasks.c **** 		return xYieldRequired;
 1829              		.loc 1 1449 0
 1830 0098 7B69     		ldr	r3, [r7, #20]	@ _34, xYieldRequired
 1831              	@ FreeRTOS/tasks.c:1450: 	}
1450:FreeRTOS/tasks.c **** 	}
 1832              		.loc 1 1450 0
 1833 009a 1846     		mov	r0, r3	@, <retval>
 1834 009c 1837     		adds	r7, r7, #24	@,,
 1835              		.cfi_def_cfa_offset 8
 1836 009e BD46     		mov	sp, r7	@,
 1837              		.cfi_def_cfa_register 13
 1838              		@ sp needed	@
 1839 00a0 80BD     		pop	{r7, pc}	@
 1840              	.L122:
 1841 00a2 00BF     		.align	2
 1842              	.L121:
 1843 00a4 00000000 		.word	uxSchedulerSuspended
 1844 00a8 00000000 		.word	pxCurrentTCB
 1845 00ac 00000000 		.word	uxTopReadyPriority
 1846 00b0 00000000 		.word	pxReadyTasksLists
 1847 00b4 00000000 		.word	xPendingReadyList
 1848              		.cfi_endproc
 1849              	.LFE10:
 1850              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1851              		.section	.rodata
 1852              		.align	2
 1853              	.LC0:
 1854 0000 49444C45 		.ascii	"IDLE\000"
 1854      00
 1855              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1856              		.align	1
 1857              		.global	vTaskStartScheduler
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu softvfp
 1862              		.type	vTaskStartScheduler, %function
 1863              	vTaskStartScheduler:
 1864              	.LFB11:
1451:FreeRTOS/tasks.c **** 
1452:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1453:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1454:FreeRTOS/tasks.c **** 
1455:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1456:FreeRTOS/tasks.c **** {
 1865              		.loc 1 1456 0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 8
 1868              		@ frame_needed = 1, uses_anonymous_args = 0
 1869 0000 80B5     		push	{r7, lr}	@
 1870              		.cfi_def_cfa_offset 8
 1871              		.cfi_offset 7, -8
 1872              		.cfi_offset 14, -4
ARM GAS  /tmp/ccTV2SzP.s 			page 60


 1873 0002 86B0     		sub	sp, sp, #24	@,,
 1874              		.cfi_def_cfa_offset 32
 1875 0004 04AF     		add	r7, sp, #16	@,,
 1876              		.cfi_def_cfa 7, 16
 1877              	@ FreeRTOS/tasks.c:1469: 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void *
1457:FreeRTOS/tasks.c **** BaseT_t xReturn;
1458:FreeRTOS/tasks.c **** 
1459:FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1460:FreeRTOS/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1461:FreeRTOS/tasks.c **** 	{
1462:FreeRTOS/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1463:FreeRTOS/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1464:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1465:FreeRTOS/tasks.c **** 	}
1466:FreeRTOS/tasks.c **** 	#else
1467:FreeRTOS/tasks.c **** 	{
1468:FreeRTOS/tasks.c **** 		/* Create the idle task without storing its handle. */
1469:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
 1878              		.loc 1 1469 0
 1879 0006 0023     		movs	r3, #0	@ tmp111,
 1880 0008 0393     		str	r3, [sp, #12]	@ tmp111,
 1881 000a 0023     		movs	r3, #0	@ tmp112,
 1882 000c 0293     		str	r3, [sp, #8]	@ tmp112,
 1883 000e 0023     		movs	r3, #0	@ tmp113,
 1884 0010 0193     		str	r3, [sp, #4]	@ tmp113,
 1885 0012 0023     		movs	r3, #0	@ tmp114,
 1886 0014 0093     		str	r3, [sp]	@ tmp114,
 1887 0016 0023     		movs	r3, #0	@,
 1888 0018 4FF48072 		mov	r2, #256	@,
 1889 001c 0E49     		ldr	r1, .L128	@,
 1890 001e 0F48     		ldr	r0, .L128+4	@,
 1891 0020 FFF7FEFF 		bl	xTaskGenericCreate	@
 1892 0024 7860     		str	r0, [r7, #4]	@, xReturn
 1893              	@ FreeRTOS/tasks.c:1486: 	if( xReturn == pdPASS )
1470:FreeRTOS/tasks.c **** 	}
1471:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1472:FreeRTOS/tasks.c **** 
1473:FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1474:FreeRTOS/tasks.c **** 	{
1475:FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1476:FreeRTOS/tasks.c **** 		{
1477:FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1478:FreeRTOS/tasks.c **** 		}
1479:FreeRTOS/tasks.c **** 		else
1480:FreeRTOS/tasks.c **** 		{
1481:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:FreeRTOS/tasks.c **** 		}
1483:FreeRTOS/tasks.c **** 	}
1484:FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1485:FreeRTOS/tasks.c **** 
1486:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 1894              		.loc 1 1486 0
 1895 0026 7B68     		ldr	r3, [r7, #4]	@ tmp115, xReturn
 1896 0028 012B     		cmp	r3, #1	@ tmp115,
 1897 002a 0AD1     		bne	.L124	@,
 1898              	@ FreeRTOS/tasks.c:1493: 		portDISABLE_INTERRUPTS();
1487:FreeRTOS/tasks.c **** 	{
ARM GAS  /tmp/ccTV2SzP.s 			page 61


1488:FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1489:FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1490:FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1491:FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1492:FreeRTOS/tasks.c **** 		starts to run. */
1493:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
 1899              		.loc 1 1493 0
 1900 002c FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1901              	@ FreeRTOS/tasks.c:1503: 		xSchedulerRunning = pdTRUE;
1494:FreeRTOS/tasks.c **** 
1495:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1496:FreeRTOS/tasks.c **** 		{
1497:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1498:FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1499:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1500:FreeRTOS/tasks.c **** 		}
1501:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1502:FreeRTOS/tasks.c **** 
1503:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1902              		.loc 1 1503 0
 1903 0030 0B4B     		ldr	r3, .L128+8	@ tmp116,
 1904 0032 0122     		movs	r2, #1	@ tmp117,
 1905 0034 1A60     		str	r2, [r3]	@ tmp117, xSchedulerRunning
 1906              	@ FreeRTOS/tasks.c:1504: 		xTickCount = ( TickT_t ) 0U;
1504:FreeRTOS/tasks.c **** 		xTickCount = ( TickT_t ) 0U;
 1907              		.loc 1 1504 0
 1908 0036 0B4B     		ldr	r3, .L128+12	@ tmp118,
 1909 0038 0022     		movs	r2, #0	@ tmp119,
 1910 003a 1A60     		str	r2, [r3]	@ tmp119, xTickCount
 1911              	@ FreeRTOS/tasks.c:1513: 		if( xPortStartScheduler() != pdFALSE )
1505:FreeRTOS/tasks.c **** 
1506:FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1507:FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1508:FreeRTOS/tasks.c **** 		the run time counter time base. */
1509:FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1510:FreeRTOS/tasks.c **** 
1511:FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1512:FreeRTOS/tasks.c **** 		portable interface. */
1513:FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1912              		.loc 1 1513 0
 1913 003c FFF7FEFF 		bl	xPortStartScheduler	@
 1914              	@ FreeRTOS/tasks.c:1530: }
1514:FreeRTOS/tasks.c **** 		{
1515:FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1516:FreeRTOS/tasks.c **** 			function will not return. */
1517:FreeRTOS/tasks.c **** 		}
1518:FreeRTOS/tasks.c **** 		else
1519:FreeRTOS/tasks.c **** 		{
1520:FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1521:FreeRTOS/tasks.c **** 		}
1522:FreeRTOS/tasks.c **** 	}
1523:FreeRTOS/tasks.c **** 	else
1524:FreeRTOS/tasks.c **** 	{
1525:FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1526:FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1527:FreeRTOS/tasks.c **** 		or the timer task. */
1528:FreeRTOS/tasks.c **** 		configASSERT( xReturn );
ARM GAS  /tmp/ccTV2SzP.s 			page 62


1529:FreeRTOS/tasks.c **** 	}
1530:FreeRTOS/tasks.c **** }
 1915              		.loc 1 1530 0
 1916 0040 05E0     		b	.L127	@
 1917              	.L124:
 1918              	@ FreeRTOS/tasks.c:1528: 		configASSERT( xReturn );
1528:FreeRTOS/tasks.c **** 	}
 1919              		.loc 1 1528 0
 1920 0042 7B68     		ldr	r3, [r7, #4]	@ tmp120, xReturn
 1921 0044 002B     		cmp	r3, #0	@ tmp120,
 1922 0046 02D1     		bne	.L127	@,
 1923              	@ FreeRTOS/tasks.c:1528: 		configASSERT( xReturn );
1528:FreeRTOS/tasks.c **** 	}
 1924              		.loc 1 1528 0 is_stmt 0 discriminator 1
 1925 0048 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1926              	.L126:
 1927              	@ FreeRTOS/tasks.c:1528: 		configASSERT( xReturn );
1528:FreeRTOS/tasks.c **** 	}
 1928              		.loc 1 1528 0 discriminator 2
 1929 004c FEE7     		b	.L126	@
 1930              	.L127:
 1931              	@ FreeRTOS/tasks.c:1530: }
 1932              		.loc 1 1530 0 is_stmt 1
 1933 004e 00BF     		nop
 1934 0050 0837     		adds	r7, r7, #8	@,,
 1935              		.cfi_def_cfa_offset 8
 1936 0052 BD46     		mov	sp, r7	@,
 1937              		.cfi_def_cfa_register 13
 1938              		@ sp needed	@
 1939 0054 80BD     		pop	{r7, pc}	@
 1940              	.L129:
 1941 0056 00BF     		.align	2
 1942              	.L128:
 1943 0058 00000000 		.word	.LC0
 1944 005c 00000000 		.word	prvIdleTask
 1945 0060 00000000 		.word	xSchedulerRunning
 1946 0064 00000000 		.word	xTickCount
 1947              		.cfi_endproc
 1948              	.LFE11:
 1949              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1950              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1951              		.align	1
 1952              		.global	vTaskEndScheduler
 1953              		.syntax unified
 1954              		.thumb
 1955              		.thumb_func
 1956              		.fpu softvfp
 1957              		.type	vTaskEndScheduler, %function
 1958              	vTaskEndScheduler:
 1959              	.LFB12:
1531:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1532:FreeRTOS/tasks.c **** 
1533:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1534:FreeRTOS/tasks.c **** {
 1960              		.loc 1 1534 0
 1961              		.cfi_startproc
 1962              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccTV2SzP.s 			page 63


 1963              		@ frame_needed = 1, uses_anonymous_args = 0
 1964 0000 80B5     		push	{r7, lr}	@
 1965              		.cfi_def_cfa_offset 8
 1966              		.cfi_offset 7, -8
 1967              		.cfi_offset 14, -4
 1968 0002 00AF     		add	r7, sp, #0	@,,
 1969              		.cfi_def_cfa_register 7
 1970              	@ FreeRTOS/tasks.c:1538: 	portDISABLE_INTERRUPTS();
1535:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1536:FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1537:FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1538:FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
 1971              		.loc 1 1538 0
 1972 0004 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1973              	@ FreeRTOS/tasks.c:1539: 	xSchedulerRunning = pdFALSE;
1539:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1974              		.loc 1 1539 0
 1975 0008 034B     		ldr	r3, .L131	@ tmp110,
 1976 000a 0022     		movs	r2, #0	@ tmp111,
 1977 000c 1A60     		str	r2, [r3]	@ tmp111, xSchedulerRunning
 1978              	@ FreeRTOS/tasks.c:1540: 	vPortEndScheduler();
1540:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1979              		.loc 1 1540 0
 1980 000e FFF7FEFF 		bl	vPortEndScheduler	@
 1981              	@ FreeRTOS/tasks.c:1541: }
1541:FreeRTOS/tasks.c **** }
 1982              		.loc 1 1541 0
 1983 0012 00BF     		nop
 1984 0014 80BD     		pop	{r7, pc}	@
 1985              	.L132:
 1986 0016 00BF     		.align	2
 1987              	.L131:
 1988 0018 00000000 		.word	xSchedulerRunning
 1989              		.cfi_endproc
 1990              	.LFE12:
 1991              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1992              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1993              		.align	1
 1994              		.global	vTaskSuspendAll
 1995              		.syntax unified
 1996              		.thumb
 1997              		.thumb_func
 1998              		.fpu softvfp
 1999              		.type	vTaskSuspendAll, %function
 2000              	vTaskSuspendAll:
 2001              	.LFB13:
1542:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1543:FreeRTOS/tasks.c **** 
1544:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1545:FreeRTOS/tasks.c **** {
 2002              		.loc 1 1545 0
 2003              		.cfi_startproc
 2004              		@ args = 0, pretend = 0, frame = 0
 2005              		@ frame_needed = 1, uses_anonymous_args = 0
 2006              		@ link register save eliminated.
 2007 0000 80B4     		push	{r7}	@
 2008              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccTV2SzP.s 			page 64


 2009              		.cfi_offset 7, -4
 2010 0002 00AF     		add	r7, sp, #0	@,,
 2011              		.cfi_def_cfa_register 7
 2012              	@ FreeRTOS/tasks.c:1550: 	++uxSchedulerSuspended;
1546:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1547:FreeRTOS/tasks.c **** 	BaseT_t.  Please read Richard Barry's reply in the following link to a
1548:FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1549:FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1550:FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
 2013              		.loc 1 1550 0
 2014 0004 044B     		ldr	r3, .L134	@ tmp112,
 2015 0006 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.51_1, uxSchedulerSuspended
 2016 0008 0133     		adds	r3, r3, #1	@ _2, uxSchedulerSuspended.51_1,
 2017 000a 034A     		ldr	r2, .L134	@ tmp113,
 2018 000c 1360     		str	r3, [r2]	@ _2, uxSchedulerSuspended
 2019              	@ FreeRTOS/tasks.c:1551: }
1551:FreeRTOS/tasks.c **** }
 2020              		.loc 1 1551 0
 2021 000e 00BF     		nop
 2022 0010 BD46     		mov	sp, r7	@,
 2023              		.cfi_def_cfa_register 13
 2024              		@ sp needed	@
 2025 0012 80BC     		pop	{r7}	@
 2026              		.cfi_restore 7
 2027              		.cfi_def_cfa_offset 0
 2028 0014 7047     		bx	lr	@
 2029              	.L135:
 2030 0016 00BF     		.align	2
 2031              	.L134:
 2032 0018 00000000 		.word	uxSchedulerSuspended
 2033              		.cfi_endproc
 2034              	.LFE13:
 2035              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2036              		.section	.text.xTaskResumeAll,"ax",%progbits
 2037              		.align	1
 2038              		.global	xTaskResumeAll
 2039              		.syntax unified
 2040              		.thumb
 2041              		.thumb_func
 2042              		.fpu softvfp
 2043              		.type	xTaskResumeAll, %function
 2044              	xTaskResumeAll:
 2045              	.LFB14:
1552:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1553:FreeRTOS/tasks.c **** 
1554:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1555:FreeRTOS/tasks.c **** 
1556:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void )
1557:FreeRTOS/tasks.c **** 	{
1558:FreeRTOS/tasks.c **** 	TickT_t xReturn;
1559:FreeRTOS/tasks.c **** 
1560:FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1561:FreeRTOS/tasks.c **** 		{
1562:FreeRTOS/tasks.c **** 			xReturn = 0;
1563:FreeRTOS/tasks.c **** 		}
1564:FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1565:FreeRTOS/tasks.c **** 		{
ARM GAS  /tmp/ccTV2SzP.s 			page 65


1566:FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1567:FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1568:FreeRTOS/tasks.c **** 			processed. */
1569:FreeRTOS/tasks.c **** 			xReturn = 0;
1570:FreeRTOS/tasks.c **** 		}
1571:FreeRTOS/tasks.c **** 		else
1572:FreeRTOS/tasks.c **** 		{
1573:FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1574:FreeRTOS/tasks.c **** 		}
1575:FreeRTOS/tasks.c **** 
1576:FreeRTOS/tasks.c **** 		return xReturn;
1577:FreeRTOS/tasks.c **** 	}
1578:FreeRTOS/tasks.c **** 
1579:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1580:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1581:FreeRTOS/tasks.c **** 
1582:FreeRTOS/tasks.c **** BaseT_t xTaskResumeAll( void )
1583:FreeRTOS/tasks.c **** {
 2046              		.loc 1 1583 0
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 8
 2049              		@ frame_needed = 1, uses_anonymous_args = 0
 2050 0000 80B5     		push	{r7, lr}	@
 2051              		.cfi_def_cfa_offset 8
 2052              		.cfi_offset 7, -8
 2053              		.cfi_offset 14, -4
 2054 0002 82B0     		sub	sp, sp, #8	@,,
 2055              		.cfi_def_cfa_offset 16
 2056 0004 00AF     		add	r7, sp, #0	@,,
 2057              		.cfi_def_cfa_register 7
 2058              	@ FreeRTOS/tasks.c:1585: BaseT_t xAlreadyYielded = pdFALSE;
1584:FreeRTOS/tasks.c **** TCB_t *pxTCB;
1585:FreeRTOS/tasks.c **** BaseT_t xAlreadyYielded = pdFALSE;
 2059              		.loc 1 1585 0
 2060 0006 0023     		movs	r3, #0	@ tmp137,
 2061 0008 7B60     		str	r3, [r7, #4]	@ tmp137, xAlreadyYielded
 2062              	@ FreeRTOS/tasks.c:1589: 	configASSERT( uxSchedulerSuspended );
1586:FreeRTOS/tasks.c **** 
1587:FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1588:FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
1589:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2063              		.loc 1 1589 0
 2064 000a 374B     		ldr	r3, .L147	@ tmp138,
 2065 000c 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.52_1, uxSchedulerSuspended
 2066 000e 002B     		cmp	r3, #0	@ uxSchedulerSuspended.52_1,
 2067 0010 02D1     		bne	.L137	@,
 2068              	@ FreeRTOS/tasks.c:1589: 	configASSERT( uxSchedulerSuspended );
 2069              		.loc 1 1589 0 is_stmt 0 discriminator 1
 2070 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2071              	.L138:
 2072 0016 FEE7     		b	.L138	@
 2073              	.L137:
 2074              	@ FreeRTOS/tasks.c:1596: 	taskENTER_CRITICAL();
1590:FreeRTOS/tasks.c **** 
1591:FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1592:FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1593:FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
ARM GAS  /tmp/ccTV2SzP.s 			page 66


1594:FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1595:FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1596:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 2075              		.loc 1 1596 0 is_stmt 1
 2076 0018 FFF7FEFF 		bl	vPortEnterCritical	@
 2077              	@ FreeRTOS/tasks.c:1598: 		--uxSchedulerSuspended;
1597:FreeRTOS/tasks.c **** 	{
1598:FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
 2078              		.loc 1 1598 0
 2079 001c 324B     		ldr	r3, .L147	@ tmp139,
 2080 001e 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.53_2, uxSchedulerSuspended
 2081 0020 013B     		subs	r3, r3, #1	@ _3, uxSchedulerSuspended.53_2,
 2082 0022 314A     		ldr	r2, .L147	@ tmp140,
 2083 0024 1360     		str	r3, [r2]	@ _3, uxSchedulerSuspended
 2084              	@ FreeRTOS/tasks.c:1600: 		if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
1599:FreeRTOS/tasks.c **** 
1600:FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2085              		.loc 1 1600 0
 2086 0026 304B     		ldr	r3, .L147	@ tmp141,
 2087 0028 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.54_4, uxSchedulerSuspended
 2088 002a 002B     		cmp	r3, #0	@ uxSchedulerSuspended.54_4,
 2089 002c 55D1     		bne	.L139	@,
 2090              	@ FreeRTOS/tasks.c:1602: 			if( uxCurrentNumberOfTasks > ( UBaseT_t ) 0U )
1601:FreeRTOS/tasks.c **** 		{
1602:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseT_t ) 0U )
 2091              		.loc 1 1602 0
 2092 002e 2F4B     		ldr	r3, .L147+4	@ tmp142,
 2093 0030 1B68     		ldr	r3, [r3]	@ uxCurrentNumberOfTasks.55_5, uxCurrentNumberOfTasks
 2094 0032 002B     		cmp	r3, #0	@ uxCurrentNumberOfTasks.55_5,
 2095 0034 51D0     		beq	.L139	@,
 2096              	@ FreeRTOS/tasks.c:1606: 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1603:FreeRTOS/tasks.c **** 			{
1604:FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1605:FreeRTOS/tasks.c **** 				appropriate ready list. */
1606:FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2097              		.loc 1 1606 0
 2098 0036 2EE0     		b	.L140	@
 2099              	.L141:
 2100              	@ FreeRTOS/tasks.c:1608: 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList
1607:FreeRTOS/tasks.c **** 				{
1608:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 2101              		.loc 1 1608 0
 2102 0038 2D4B     		ldr	r3, .L147+8	@ tmp143,
 2103 003a DB68     		ldr	r3, [r3, #12]	@ _6, xPendingReadyList.xListEnd.pxNext
 2104 003c DB68     		ldr	r3, [r3, #12]	@ tmp144, _6->pvOwner
 2105 003e 3B60     		str	r3, [r7]	@ tmp144, pxTCB
 2106              	@ FreeRTOS/tasks.c:1609: 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1609:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2107              		.loc 1 1609 0
 2108 0040 3B68     		ldr	r3, [r7]	@ tmp145, pxTCB
 2109 0042 1833     		adds	r3, r3, #24	@ _7, tmp145,
 2110 0044 1846     		mov	r0, r3	@, _7
 2111 0046 FFF7FEFF 		bl	uxListRemove	@
 2112              	@ FreeRTOS/tasks.c:1610: 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1610:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2113              		.loc 1 1610 0
 2114 004a 3B68     		ldr	r3, [r7]	@ tmp146, pxTCB
ARM GAS  /tmp/ccTV2SzP.s 			page 67


 2115 004c 0433     		adds	r3, r3, #4	@ _8, tmp146,
 2116 004e 1846     		mov	r0, r3	@, _8
 2117 0050 FFF7FEFF 		bl	uxListRemove	@
 2118              	@ FreeRTOS/tasks.c:1611: 					prvAddTaskToReadyList( pxTCB );
1611:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2119              		.loc 1 1611 0
 2120 0054 3B68     		ldr	r3, [r7]	@ tmp147, pxTCB
 2121 0056 DB6A     		ldr	r3, [r3, #44]	@ _9, pxTCB_41->uxPriority
 2122 0058 0122     		movs	r2, #1	@ tmp148,
 2123 005a 9A40     		lsls	r2, r2, r3	@ _10, tmp148, _9
 2124 005c 254B     		ldr	r3, .L147+12	@ tmp149,
 2125 005e 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.56_11, uxTopReadyPriority
 2126 0060 1343     		orrs	r3, r3, r2	@, _12, uxTopReadyPriority.56_11, _10
 2127 0062 244A     		ldr	r2, .L147+12	@ tmp150,
 2128 0064 1360     		str	r3, [r2]	@ _12, uxTopReadyPriority
 2129 0066 3B68     		ldr	r3, [r7]	@ tmp151, pxTCB
 2130 0068 DA6A     		ldr	r2, [r3, #44]	@ _13, pxTCB_41->uxPriority
 2131 006a 1346     		mov	r3, r2	@ tmp152, _13
 2132 006c 9B00     		lsls	r3, r3, #2	@ tmp152, tmp152,
 2133 006e 1344     		add	r3, r3, r2	@ tmp152, _13
 2134 0070 9B00     		lsls	r3, r3, #2	@ tmp153, tmp152,
 2135 0072 214A     		ldr	r2, .L147+16	@ tmp154,
 2136 0074 1A44     		add	r2, r2, r3	@ _14, tmp152
 2137 0076 3B68     		ldr	r3, [r7]	@ tmp155, pxTCB
 2138 0078 0433     		adds	r3, r3, #4	@ _15, tmp155,
 2139 007a 1946     		mov	r1, r3	@, _15
 2140 007c 1046     		mov	r0, r2	@, _14
 2141 007e FFF7FEFF 		bl	vListInsertEnd	@
 2142              	@ FreeRTOS/tasks.c:1615: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1612:FreeRTOS/tasks.c **** 
1613:FreeRTOS/tasks.c **** 					/* If we have moved a task that has a priority higher than
1614:FreeRTOS/tasks.c **** 					the current task then we should yield. */
1615:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2143              		.loc 1 1615 0
 2144 0082 3B68     		ldr	r3, [r7]	@ tmp156, pxTCB
 2145 0084 DA6A     		ldr	r2, [r3, #44]	@ _16, pxTCB_41->uxPriority
 2146 0086 1D4B     		ldr	r3, .L147+20	@ tmp157,
 2147 0088 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.57_17, pxCurrentTCB
 2148 008a DB6A     		ldr	r3, [r3, #44]	@ _18, pxCurrentTCB.57_17->uxPriority
 2149 008c 9A42     		cmp	r2, r3	@ _16, _18
 2150 008e 02D3     		bcc	.L140	@,
 2151              	@ FreeRTOS/tasks.c:1617: 						xYieldPending = pdTRUE;
1616:FreeRTOS/tasks.c **** 					{
1617:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
 2152              		.loc 1 1617 0
 2153 0090 1B4B     		ldr	r3, .L147+24	@ tmp158,
 2154 0092 0122     		movs	r2, #1	@ tmp159,
 2155 0094 1A60     		str	r2, [r3]	@ tmp159, xYieldPending
 2156              	.L140:
 2157              	@ FreeRTOS/tasks.c:1606: 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1606:FreeRTOS/tasks.c **** 				{
 2158              		.loc 1 1606 0
 2159 0096 164B     		ldr	r3, .L147+8	@ tmp160,
 2160 0098 1B68     		ldr	r3, [r3]	@ _19, xPendingReadyList.uxNumberOfItems
 2161 009a 002B     		cmp	r3, #0	@ _19,
 2162 009c CCD1     		bne	.L141	@,
 2163              	@ FreeRTOS/tasks.c:1629: 				if( uxPendedTicks > ( UBaseT_t ) 0U )
ARM GAS  /tmp/ccTV2SzP.s 			page 68


1618:FreeRTOS/tasks.c **** 					}
1619:FreeRTOS/tasks.c **** 					else
1620:FreeRTOS/tasks.c **** 					{
1621:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1622:FreeRTOS/tasks.c **** 					}
1623:FreeRTOS/tasks.c **** 				}
1624:FreeRTOS/tasks.c **** 
1625:FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1626:FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
1627:FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1628:FreeRTOS/tasks.c **** 				time. */
1629:FreeRTOS/tasks.c **** 				if( uxPendedTicks > ( UBaseT_t ) 0U )
 2164              		.loc 1 1629 0
 2165 009e 194B     		ldr	r3, .L147+28	@ tmp161,
 2166 00a0 1B68     		ldr	r3, [r3]	@ uxPendedTicks.58_20, uxPendedTicks
 2167 00a2 002B     		cmp	r3, #0	@ uxPendedTicks.58_20,
 2168 00a4 11D0     		beq	.L142	@,
 2169              	@ FreeRTOS/tasks.c:1631: 					while( uxPendedTicks > ( UBaseT_t ) 0U )
1630:FreeRTOS/tasks.c **** 				{
1631:FreeRTOS/tasks.c **** 					while( uxPendedTicks > ( UBaseT_t ) 0U )
 2170              		.loc 1 1631 0
 2171 00a6 0CE0     		b	.L143	@
 2172              	.L145:
 2173              	@ FreeRTOS/tasks.c:1633: 						if( xTaskIncrementTick() != pdFALSE )
1632:FreeRTOS/tasks.c **** 					{
1633:FreeRTOS/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 2174              		.loc 1 1633 0
 2175 00a8 FFF7FEFF 		bl	xTaskIncrementTick	@
 2176 00ac 0346     		mov	r3, r0	@ _21,
 2177 00ae 002B     		cmp	r3, #0	@ _21,
 2178 00b0 02D0     		beq	.L144	@,
 2179              	@ FreeRTOS/tasks.c:1635: 							xYieldPending = pdTRUE;
1634:FreeRTOS/tasks.c **** 						{
1635:FreeRTOS/tasks.c **** 							xYieldPending = pdTRUE;
 2180              		.loc 1 1635 0
 2181 00b2 134B     		ldr	r3, .L147+24	@ tmp162,
 2182 00b4 0122     		movs	r2, #1	@ tmp163,
 2183 00b6 1A60     		str	r2, [r3]	@ tmp163, xYieldPending
 2184              	.L144:
 2185              	@ FreeRTOS/tasks.c:1641: 						--uxPendedTicks;
1636:FreeRTOS/tasks.c **** 						}
1637:FreeRTOS/tasks.c **** 						else
1638:FreeRTOS/tasks.c **** 						{
1639:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1640:FreeRTOS/tasks.c **** 						}
1641:FreeRTOS/tasks.c **** 						--uxPendedTicks;
 2186              		.loc 1 1641 0
 2187 00b8 124B     		ldr	r3, .L147+28	@ tmp164,
 2188 00ba 1B68     		ldr	r3, [r3]	@ uxPendedTicks.59_22, uxPendedTicks
 2189 00bc 013B     		subs	r3, r3, #1	@ _23, uxPendedTicks.59_22,
 2190 00be 114A     		ldr	r2, .L147+28	@ tmp165,
 2191 00c0 1360     		str	r3, [r2]	@ _23, uxPendedTicks
 2192              	.L143:
 2193              	@ FreeRTOS/tasks.c:1631: 					while( uxPendedTicks > ( UBaseT_t ) 0U )
1631:FreeRTOS/tasks.c **** 					{
 2194              		.loc 1 1631 0
 2195 00c2 104B     		ldr	r3, .L147+28	@ tmp166,
ARM GAS  /tmp/ccTV2SzP.s 			page 69


 2196 00c4 1B68     		ldr	r3, [r3]	@ uxPendedTicks.60_24, uxPendedTicks
 2197 00c6 002B     		cmp	r3, #0	@ uxPendedTicks.60_24,
 2198 00c8 EED1     		bne	.L145	@,
 2199              	.L142:
 2200              	@ FreeRTOS/tasks.c:1649: 				if( xYieldPending == pdTRUE )
1642:FreeRTOS/tasks.c **** 					}
1643:FreeRTOS/tasks.c **** 				}
1644:FreeRTOS/tasks.c **** 				else
1645:FreeRTOS/tasks.c **** 				{
1646:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1647:FreeRTOS/tasks.c **** 				}
1648:FreeRTOS/tasks.c **** 
1649:FreeRTOS/tasks.c **** 				if( xYieldPending == pdTRUE )
 2201              		.loc 1 1649 0
 2202 00ca 0D4B     		ldr	r3, .L147+24	@ tmp167,
 2203 00cc 1B68     		ldr	r3, [r3]	@ xYieldPending.61_25, xYieldPending
 2204 00ce 012B     		cmp	r3, #1	@ xYieldPending.61_25,
 2205 00d0 03D1     		bne	.L139	@,
 2206              	@ FreeRTOS/tasks.c:1653: 						xAlreadyYielded = pdTRUE;
1650:FreeRTOS/tasks.c **** 				{
1651:FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1652:FreeRTOS/tasks.c **** 					{
1653:FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2207              		.loc 1 1653 0
 2208 00d2 0123     		movs	r3, #1	@ tmp168,
 2209 00d4 7B60     		str	r3, [r7, #4]	@ tmp168, xAlreadyYielded
 2210              	@ FreeRTOS/tasks.c:1656: 					taskYIELD_IF_USING_PREEMPTION();
1654:FreeRTOS/tasks.c **** 					}
1655:FreeRTOS/tasks.c **** 					#endif
1656:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2211              		.loc 1 1656 0
 2212 00d6 FFF7FEFF 		bl	vPortYield	@
 2213              	.L139:
 2214              	@ FreeRTOS/tasks.c:1669: 	taskEXIT_CRITICAL();
1657:FreeRTOS/tasks.c **** 				}
1658:FreeRTOS/tasks.c **** 				else
1659:FreeRTOS/tasks.c **** 				{
1660:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1661:FreeRTOS/tasks.c **** 				}
1662:FreeRTOS/tasks.c **** 			}
1663:FreeRTOS/tasks.c **** 		}
1664:FreeRTOS/tasks.c **** 		else
1665:FreeRTOS/tasks.c **** 		{
1666:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1667:FreeRTOS/tasks.c **** 		}
1668:FreeRTOS/tasks.c **** 	}
1669:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 2215              		.loc 1 1669 0
 2216 00da FFF7FEFF 		bl	vPortExitCritical	@
 2217              	@ FreeRTOS/tasks.c:1671: 	return xAlreadyYielded;
1670:FreeRTOS/tasks.c **** 
1671:FreeRTOS/tasks.c **** 	return xAlreadyYielded;
 2218              		.loc 1 1671 0
 2219 00de 7B68     		ldr	r3, [r7, #4]	@ _48, xAlreadyYielded
 2220              	@ FreeRTOS/tasks.c:1672: }
1672:FreeRTOS/tasks.c **** }
 2221              		.loc 1 1672 0
ARM GAS  /tmp/ccTV2SzP.s 			page 70


 2222 00e0 1846     		mov	r0, r3	@, <retval>
 2223 00e2 0837     		adds	r7, r7, #8	@,,
 2224              		.cfi_def_cfa_offset 8
 2225 00e4 BD46     		mov	sp, r7	@,
 2226              		.cfi_def_cfa_register 13
 2227              		@ sp needed	@
 2228 00e6 80BD     		pop	{r7, pc}	@
 2229              	.L148:
 2230              		.align	2
 2231              	.L147:
 2232 00e8 00000000 		.word	uxSchedulerSuspended
 2233 00ec 00000000 		.word	uxCurrentNumberOfTasks
 2234 00f0 00000000 		.word	xPendingReadyList
 2235 00f4 00000000 		.word	uxTopReadyPriority
 2236 00f8 00000000 		.word	pxReadyTasksLists
 2237 00fc 00000000 		.word	pxCurrentTCB
 2238 0100 00000000 		.word	xYieldPending
 2239 0104 00000000 		.word	uxPendedTicks
 2240              		.cfi_endproc
 2241              	.LFE14:
 2242              		.size	xTaskResumeAll, .-xTaskResumeAll
 2243              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2244              		.align	1
 2245              		.global	xTaskGetTickCount
 2246              		.syntax unified
 2247              		.thumb
 2248              		.thumb_func
 2249              		.fpu softvfp
 2250              		.type	xTaskGetTickCount, %function
 2251              	xTaskGetTickCount:
 2252              	.LFB15:
1673:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1674:FreeRTOS/tasks.c **** 
1675:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCount( void )
1676:FreeRTOS/tasks.c **** {
 2253              		.loc 1 1676 0
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 8
 2256              		@ frame_needed = 1, uses_anonymous_args = 0
 2257 0000 80B5     		push	{r7, lr}	@
 2258              		.cfi_def_cfa_offset 8
 2259              		.cfi_offset 7, -8
 2260              		.cfi_offset 14, -4
 2261 0002 82B0     		sub	sp, sp, #8	@,,
 2262              		.cfi_def_cfa_offset 16
 2263 0004 00AF     		add	r7, sp, #0	@,,
 2264              		.cfi_def_cfa_register 7
 2265              	@ FreeRTOS/tasks.c:1680: 	taskENTER_CRITICAL();
1677:FreeRTOS/tasks.c **** TickT_t xTicks;
1678:FreeRTOS/tasks.c **** 
1679:FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1680:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 2266              		.loc 1 1680 0
 2267 0006 FFF7FEFF 		bl	vPortEnterCritical	@
 2268              	@ FreeRTOS/tasks.c:1682: 		xTicks = xTickCount;
1681:FreeRTOS/tasks.c **** 	{
1682:FreeRTOS/tasks.c **** 		xTicks = xTickCount;
ARM GAS  /tmp/ccTV2SzP.s 			page 71


 2269              		.loc 1 1682 0
 2270 000a 054B     		ldr	r3, .L151	@ tmp112,
 2271 000c 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 2272 000e 7B60     		str	r3, [r7, #4]	@ tmp113, xTicks
 2273              	@ FreeRTOS/tasks.c:1684: 	taskEXIT_CRITICAL();
1683:FreeRTOS/tasks.c **** 	}
1684:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 2274              		.loc 1 1684 0
 2275 0010 FFF7FEFF 		bl	vPortExitCritical	@
 2276              	@ FreeRTOS/tasks.c:1686: 	return xTicks;
1685:FreeRTOS/tasks.c **** 
1686:FreeRTOS/tasks.c **** 	return xTicks;
 2277              		.loc 1 1686 0
 2278 0014 7B68     		ldr	r3, [r7, #4]	@ _5, xTicks
 2279              	@ FreeRTOS/tasks.c:1687: }
1687:FreeRTOS/tasks.c **** }
 2280              		.loc 1 1687 0
 2281 0016 1846     		mov	r0, r3	@, <retval>
 2282 0018 0837     		adds	r7, r7, #8	@,,
 2283              		.cfi_def_cfa_offset 8
 2284 001a BD46     		mov	sp, r7	@,
 2285              		.cfi_def_cfa_register 13
 2286              		@ sp needed	@
 2287 001c 80BD     		pop	{r7, pc}	@
 2288              	.L152:
 2289 001e 00BF     		.align	2
 2290              	.L151:
 2291 0020 00000000 		.word	xTickCount
 2292              		.cfi_endproc
 2293              	.LFE15:
 2294              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2295              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2296              		.align	1
 2297              		.global	xTaskGetTickCountFromISR
 2298              		.syntax unified
 2299              		.thumb
 2300              		.thumb_func
 2301              		.fpu softvfp
 2302              		.type	xTaskGetTickCountFromISR, %function
 2303              	xTaskGetTickCountFromISR:
 2304              	.LFB16:
1688:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1689:FreeRTOS/tasks.c **** 
1690:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCountFromISR( void )
1691:FreeRTOS/tasks.c **** {
 2305              		.loc 1 1691 0
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 8
 2308              		@ frame_needed = 1, uses_anonymous_args = 0
 2309 0000 80B5     		push	{r7, lr}	@
 2310              		.cfi_def_cfa_offset 8
 2311              		.cfi_offset 7, -8
 2312              		.cfi_offset 14, -4
 2313 0002 82B0     		sub	sp, sp, #8	@,,
 2314              		.cfi_def_cfa_offset 16
 2315 0004 00AF     		add	r7, sp, #0	@,,
 2316              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccTV2SzP.s 			page 72


 2317              	@ FreeRTOS/tasks.c:1709: 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1692:FreeRTOS/tasks.c **** TickT_t xReturn;
1693:FreeRTOS/tasks.c **** UBaseT_t uxSavedInterruptStatus;
1694:FreeRTOS/tasks.c **** 
1695:FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1696:FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1697:FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1698:FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1699:FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1700:FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1701:FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1702:FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1703:FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1704:FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1705:FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1706:FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1707:FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1708:FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1709:FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2318              		.loc 1 1709 0
 2319 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority	@
 2320              	@ FreeRTOS/tasks.c:1711: 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1710:FreeRTOS/tasks.c **** 
1711:FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2321              		.loc 1 1711 0
 2322 000a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2323 000e 7860     		str	r0, [r7, #4]	@, uxSavedInterruptStatus
 2324              	@ FreeRTOS/tasks.c:1713: 		xReturn = xTickCount;
1712:FreeRTOS/tasks.c **** 	{
1713:FreeRTOS/tasks.c **** 		xReturn = xTickCount;
 2325              		.loc 1 1713 0
 2326 0010 054B     		ldr	r3, .L155	@ tmp112,
 2327 0012 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 2328 0014 3B60     		str	r3, [r7]	@ tmp113, xReturn
 2329              	@ FreeRTOS/tasks.c:1715: 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1714:FreeRTOS/tasks.c **** 	}
1715:FreeRTOS/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2330              		.loc 1 1715 0
 2331 0016 7868     		ldr	r0, [r7, #4]	@, uxSavedInterruptStatus
 2332 0018 FFF7FEFF 		bl	vPortClearInterruptMask	@
 2333              	@ FreeRTOS/tasks.c:1717: 	return xReturn;
1716:FreeRTOS/tasks.c **** 
1717:FreeRTOS/tasks.c **** 	return xReturn;
 2334              		.loc 1 1717 0
 2335 001c 3B68     		ldr	r3, [r7]	@ _7, xReturn
 2336              	@ FreeRTOS/tasks.c:1718: }
1718:FreeRTOS/tasks.c **** }
 2337              		.loc 1 1718 0
 2338 001e 1846     		mov	r0, r3	@, <retval>
 2339 0020 0837     		adds	r7, r7, #8	@,,
 2340              		.cfi_def_cfa_offset 8
 2341 0022 BD46     		mov	sp, r7	@,
 2342              		.cfi_def_cfa_register 13
 2343              		@ sp needed	@
 2344 0024 80BD     		pop	{r7, pc}	@
 2345              	.L156:
 2346 0026 00BF     		.align	2
ARM GAS  /tmp/ccTV2SzP.s 			page 73


 2347              	.L155:
 2348 0028 00000000 		.word	xTickCount
 2349              		.cfi_endproc
 2350              	.LFE16:
 2351              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2352              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2353              		.align	1
 2354              		.global	uxTaskGetNumberOfTasks
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2358              		.fpu softvfp
 2359              		.type	uxTaskGetNumberOfTasks, %function
 2360              	uxTaskGetNumberOfTasks:
 2361              	.LFB17:
1719:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1720:FreeRTOS/tasks.c **** 
1721:FreeRTOS/tasks.c **** UBaseT_t uxTaskGetNumberOfTasks( void )
1722:FreeRTOS/tasks.c **** {
 2362              		.loc 1 1722 0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 0
 2365              		@ frame_needed = 1, uses_anonymous_args = 0
 2366              		@ link register save eliminated.
 2367 0000 80B4     		push	{r7}	@
 2368              		.cfi_def_cfa_offset 4
 2369              		.cfi_offset 7, -4
 2370 0002 00AF     		add	r7, sp, #0	@,,
 2371              		.cfi_def_cfa_register 7
 2372              	@ FreeRTOS/tasks.c:1725: 	return uxCurrentNumberOfTasks;
1723:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1724:FreeRTOS/tasks.c **** 	BaseT_t. */
1725:FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 2373              		.loc 1 1725 0
 2374 0004 024B     		ldr	r3, .L159	@ tmp112,
 2375 0006 1B68     		ldr	r3, [r3]	@ _2, uxCurrentNumberOfTasks
 2376              	@ FreeRTOS/tasks.c:1726: }
1726:FreeRTOS/tasks.c **** }
 2377              		.loc 1 1726 0
 2378 0008 1846     		mov	r0, r3	@, <retval>
 2379 000a BD46     		mov	sp, r7	@,
 2380              		.cfi_def_cfa_register 13
 2381              		@ sp needed	@
 2382 000c 80BC     		pop	{r7}	@
 2383              		.cfi_restore 7
 2384              		.cfi_def_cfa_offset 0
 2385 000e 7047     		bx	lr	@
 2386              	.L160:
 2387              		.align	2
 2388              	.L159:
 2389 0010 00000000 		.word	uxCurrentNumberOfTasks
 2390              		.cfi_endproc
 2391              	.LFE17:
 2392              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2393              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2394              		.align	1
 2395              		.global	uxTaskGetSystemState
ARM GAS  /tmp/ccTV2SzP.s 			page 74


 2396              		.syntax unified
 2397              		.thumb
 2398              		.thumb_func
 2399              		.fpu softvfp
 2400              		.type	uxTaskGetSystemState, %function
 2401              	uxTaskGetSystemState:
 2402              	.LFB18:
1727:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:FreeRTOS/tasks.c **** 
1729:FreeRTOS/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1730:FreeRTOS/tasks.c **** 
1731:FreeRTOS/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1732:FreeRTOS/tasks.c **** 	{
1733:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1734:FreeRTOS/tasks.c **** 
1735:FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1736:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1737:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1738:FreeRTOS/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1739:FreeRTOS/tasks.c **** 	}
1740:FreeRTOS/tasks.c **** 
1741:FreeRTOS/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1742:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1743:FreeRTOS/tasks.c **** 
1744:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1745:FreeRTOS/tasks.c **** 
1746:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseT_t uxArraySize,
1747:FreeRTOS/tasks.c **** 	{
 2403              		.loc 1 1747 0
 2404              		.cfi_startproc
 2405              		@ args = 0, pretend = 0, frame = 24
 2406              		@ frame_needed = 1, uses_anonymous_args = 0
 2407 0000 80B5     		push	{r7, lr}	@
 2408              		.cfi_def_cfa_offset 8
 2409              		.cfi_offset 7, -8
 2410              		.cfi_offset 14, -4
 2411 0002 86B0     		sub	sp, sp, #24	@,,
 2412              		.cfi_def_cfa_offset 32
 2413 0004 00AF     		add	r7, sp, #0	@,,
 2414              		.cfi_def_cfa_register 7
 2415 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 2416 0008 B960     		str	r1, [r7, #8]	@ uxArraySize, uxArraySize
 2417 000a 7A60     		str	r2, [r7, #4]	@ pulTotalRunTime, pulTotalRunTime
 2418              	@ FreeRTOS/tasks.c:1748: 	UBaseT_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
1748:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2419              		.loc 1 1748 0
 2420 000c 0023     		movs	r3, #0	@ tmp131,
 2421 000e 7B61     		str	r3, [r7, #20]	@ tmp131, uxTask
 2422 0010 0823     		movs	r3, #8	@ tmp132,
 2423 0012 3B61     		str	r3, [r7, #16]	@ tmp132, uxQueue
 2424              	@ FreeRTOS/tasks.c:1750: 		vTaskSuspendAll();
1749:FreeRTOS/tasks.c **** 
1750:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 2425              		.loc 1 1750 0
 2426 0014 FFF7FEFF 		bl	vTaskSuspendAll	@
 2427              	@ FreeRTOS/tasks.c:1753: 			if( uxArraySize >= uxCurrentNumberOfTasks )
1751:FreeRTOS/tasks.c **** 		{
ARM GAS  /tmp/ccTV2SzP.s 			page 75


1752:FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1753:FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2428              		.loc 1 1753 0
 2429 0018 304B     		ldr	r3, .L166	@ tmp133,
 2430 001a 1B68     		ldr	r3, [r3]	@ uxCurrentNumberOfTasks.62_1, uxCurrentNumberOfTasks
 2431 001c BA68     		ldr	r2, [r7, #8]	@ tmp134, uxArraySize
 2432 001e 9A42     		cmp	r2, r3	@ tmp134, uxCurrentNumberOfTasks.62_1
 2433 0020 54D3     		bcc	.L162	@,
 2434              	.L163:
 2435              	@ FreeRTOS/tasks.c:1759: 					uxQueue--;
1754:FreeRTOS/tasks.c **** 			{
1755:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1756:FreeRTOS/tasks.c **** 				task in the Ready state. */
1757:FreeRTOS/tasks.c **** 				do
1758:FreeRTOS/tasks.c **** 				{
1759:FreeRTOS/tasks.c **** 					uxQueue--;
 2436              		.loc 1 1759 0 discriminator 1
 2437 0022 3B69     		ldr	r3, [r7, #16]	@ tmp136, uxQueue
 2438 0024 013B     		subs	r3, r3, #1	@ tmp135, tmp136,
 2439 0026 3B61     		str	r3, [r7, #16]	@ tmp135, uxQueue
 2440              	@ FreeRTOS/tasks.c:1760: 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ]
1760:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
 2441              		.loc 1 1760 0 discriminator 1
 2442 0028 7B69     		ldr	r3, [r7, #20]	@ tmp137, uxTask
 2443 002a 5B01     		lsls	r3, r3, #5	@ _2, tmp137,
 2444 002c FA68     		ldr	r2, [r7, #12]	@ tmp138, pxTaskStatusArray
 2445 002e D018     		adds	r0, r2, r3	@ _3, tmp138, _2
 2446 0030 3A69     		ldr	r2, [r7, #16]	@ tmp139, uxQueue
 2447 0032 1346     		mov	r3, r2	@ tmp140, tmp139
 2448 0034 9B00     		lsls	r3, r3, #2	@ tmp140, tmp140,
 2449 0036 1344     		add	r3, r3, r2	@ tmp140, tmp139
 2450 0038 9B00     		lsls	r3, r3, #2	@ tmp141, tmp140,
 2451 003a 294A     		ldr	r2, .L166+4	@ tmp142,
 2452 003c 1344     		add	r3, r3, r2	@ _4, tmp142
 2453 003e 0122     		movs	r2, #1	@,
 2454 0040 1946     		mov	r1, r3	@, _4
 2455 0042 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2456 0046 0246     		mov	r2, r0	@ _29,
 2457 0048 7B69     		ldr	r3, [r7, #20]	@ tmp144, uxTask
 2458 004a 1344     		add	r3, r3, r2	@ tmp143, _29
 2459 004c 7B61     		str	r3, [r7, #20]	@ tmp143, uxTask
 2460              	@ FreeRTOS/tasks.c:1762: 				} while( uxQueue > ( UBaseT_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA
1761:FreeRTOS/tasks.c **** 
1762:FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseT_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts a
 2461              		.loc 1 1762 0 discriminator 1
 2462 004e 3B69     		ldr	r3, [r7, #16]	@ tmp145, uxQueue
 2463 0050 002B     		cmp	r3, #0	@ tmp145,
 2464 0052 E6D1     		bne	.L163	@,
 2465              	@ FreeRTOS/tasks.c:1766: 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] 
1763:FreeRTOS/tasks.c **** 
1764:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1765:FreeRTOS/tasks.c **** 				task in the Blocked state. */
1766:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
 2466              		.loc 1 1766 0
 2467 0054 7B69     		ldr	r3, [r7, #20]	@ tmp146, uxTask
 2468 0056 5B01     		lsls	r3, r3, #5	@ _5, tmp146,
 2469 0058 FA68     		ldr	r2, [r7, #12]	@ tmp147, pxTaskStatusArray
ARM GAS  /tmp/ccTV2SzP.s 			page 76


 2470 005a D018     		adds	r0, r2, r3	@ _6, tmp147, _5
 2471 005c 214B     		ldr	r3, .L166+8	@ tmp148,
 2472 005e 1B68     		ldr	r3, [r3]	@ pxDelayedTaskList.63_7, pxDelayedTaskList
 2473 0060 0222     		movs	r2, #2	@,
 2474 0062 1946     		mov	r1, r3	@, pxDelayedTaskList.63_7
 2475 0064 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2476 0068 0246     		mov	r2, r0	@ _32,
 2477 006a 7B69     		ldr	r3, [r7, #20]	@ tmp150, uxTask
 2478 006c 1344     		add	r3, r3, r2	@ tmp149, _32
 2479 006e 7B61     		str	r3, [r7, #20]	@ tmp149, uxTask
 2480              	@ FreeRTOS/tasks.c:1767: 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] 
1767:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2481              		.loc 1 1767 0
 2482 0070 7B69     		ldr	r3, [r7, #20]	@ tmp151, uxTask
 2483 0072 5B01     		lsls	r3, r3, #5	@ _8, tmp151,
 2484 0074 FA68     		ldr	r2, [r7, #12]	@ tmp152, pxTaskStatusArray
 2485 0076 D018     		adds	r0, r2, r3	@ _9, tmp152, _8
 2486 0078 1B4B     		ldr	r3, .L166+12	@ tmp153,
 2487 007a 1B68     		ldr	r3, [r3]	@ pxOverflowDelayedTaskList.64_10, pxOverflowDelayedTaskList
 2488 007c 0222     		movs	r2, #2	@,
 2489 007e 1946     		mov	r1, r3	@, pxOverflowDelayedTaskList.64_10
 2490 0080 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2491 0084 0246     		mov	r2, r0	@ _35,
 2492 0086 7B69     		ldr	r3, [r7, #20]	@ tmp155, uxTask
 2493 0088 1344     		add	r3, r3, r2	@ tmp154, _35
 2494 008a 7B61     		str	r3, [r7, #20]	@ tmp154, uxTask
 2495              	@ FreeRTOS/tasks.c:1773: 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ]
1768:FreeRTOS/tasks.c **** 
1769:FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1770:FreeRTOS/tasks.c **** 				{
1771:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1772:FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1773:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
 2496              		.loc 1 1773 0
 2497 008c 7B69     		ldr	r3, [r7, #20]	@ tmp156, uxTask
 2498 008e 5B01     		lsls	r3, r3, #5	@ _11, tmp156,
 2499 0090 FA68     		ldr	r2, [r7, #12]	@ tmp157, pxTaskStatusArray
 2500 0092 1344     		add	r3, r3, r2	@ _12, tmp157
 2501 0094 0422     		movs	r2, #4	@,
 2502 0096 1549     		ldr	r1, .L166+16	@,
 2503 0098 1846     		mov	r0, r3	@, _12
 2504 009a FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2505 009e 0246     		mov	r2, r0	@ _38,
 2506 00a0 7B69     		ldr	r3, [r7, #20]	@ tmp159, uxTask
 2507 00a2 1344     		add	r3, r3, r2	@ tmp158, _38
 2508 00a4 7B61     		str	r3, [r7, #20]	@ tmp158, uxTask
 2509              	@ FreeRTOS/tasks.c:1781: 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ]
1774:FreeRTOS/tasks.c **** 				}
1775:FreeRTOS/tasks.c **** 				#endif
1776:FreeRTOS/tasks.c **** 
1777:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1778:FreeRTOS/tasks.c **** 				{
1779:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1780:FreeRTOS/tasks.c **** 					each task in the Suspended state. */
1781:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
 2510              		.loc 1 1781 0
 2511 00a6 7B69     		ldr	r3, [r7, #20]	@ tmp160, uxTask
ARM GAS  /tmp/ccTV2SzP.s 			page 77


 2512 00a8 5B01     		lsls	r3, r3, #5	@ _13, tmp160,
 2513 00aa FA68     		ldr	r2, [r7, #12]	@ tmp161, pxTaskStatusArray
 2514 00ac 1344     		add	r3, r3, r2	@ _14, tmp161
 2515 00ae 0322     		movs	r2, #3	@,
 2516 00b0 0F49     		ldr	r1, .L166+20	@,
 2517 00b2 1846     		mov	r0, r3	@, _14
 2518 00b4 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2519 00b8 0246     		mov	r2, r0	@ _41,
 2520 00ba 7B69     		ldr	r3, [r7, #20]	@ tmp163, uxTask
 2521 00bc 1344     		add	r3, r3, r2	@ tmp162, _41
 2522 00be 7B61     		str	r3, [r7, #20]	@ tmp162, uxTask
 2523              	@ FreeRTOS/tasks.c:1798: 					if( pulTotalRunTime != NULL )
1782:FreeRTOS/tasks.c **** 				}
1783:FreeRTOS/tasks.c **** 				#endif
1784:FreeRTOS/tasks.c **** 
1785:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1786:FreeRTOS/tasks.c **** 				{
1787:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1788:FreeRTOS/tasks.c **** 					{
1789:FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1790:FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1791:FreeRTOS/tasks.c **** 						#else
1792:FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1793:FreeRTOS/tasks.c **** 						#endif
1794:FreeRTOS/tasks.c **** 					}
1795:FreeRTOS/tasks.c **** 				}
1796:FreeRTOS/tasks.c **** 				#else
1797:FreeRTOS/tasks.c **** 				{
1798:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
 2524              		.loc 1 1798 0
 2525 00c0 7B68     		ldr	r3, [r7, #4]	@ tmp164, pulTotalRunTime
 2526 00c2 002B     		cmp	r3, #0	@ tmp164,
 2527 00c4 02D0     		beq	.L162	@,
 2528              	@ FreeRTOS/tasks.c:1800: 						*pulTotalRunTime = 0;
1799:FreeRTOS/tasks.c **** 					{
1800:FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
 2529              		.loc 1 1800 0
 2530 00c6 7B68     		ldr	r3, [r7, #4]	@ tmp165, pulTotalRunTime
 2531 00c8 0022     		movs	r2, #0	@ tmp166,
 2532 00ca 1A60     		str	r2, [r3]	@ tmp166, *pulTotalRunTime_43(D)
 2533              	.L162:
 2534              	@ FreeRTOS/tasks.c:1810: 		( void ) xTaskResumeAll();
1801:FreeRTOS/tasks.c **** 					}
1802:FreeRTOS/tasks.c **** 				}
1803:FreeRTOS/tasks.c **** 				#endif
1804:FreeRTOS/tasks.c **** 			}
1805:FreeRTOS/tasks.c **** 			else
1806:FreeRTOS/tasks.c **** 			{
1807:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1808:FreeRTOS/tasks.c **** 			}
1809:FreeRTOS/tasks.c **** 		}
1810:FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
 2535              		.loc 1 1810 0
 2536 00cc FFF7FEFF 		bl	xTaskResumeAll	@
 2537              	@ FreeRTOS/tasks.c:1812: 		return uxTask;
1811:FreeRTOS/tasks.c **** 
1812:FreeRTOS/tasks.c **** 		return uxTask;
ARM GAS  /tmp/ccTV2SzP.s 			page 78


 2538              		.loc 1 1812 0
 2539 00d0 7B69     		ldr	r3, [r7, #20]	@ _46, uxTask
 2540              	@ FreeRTOS/tasks.c:1813: 	}
1813:FreeRTOS/tasks.c **** 	}
 2541              		.loc 1 1813 0
 2542 00d2 1846     		mov	r0, r3	@, <retval>
 2543 00d4 1837     		adds	r7, r7, #24	@,,
 2544              		.cfi_def_cfa_offset 8
 2545 00d6 BD46     		mov	sp, r7	@,
 2546              		.cfi_def_cfa_register 13
 2547              		@ sp needed	@
 2548 00d8 80BD     		pop	{r7, pc}	@
 2549              	.L167:
 2550 00da 00BF     		.align	2
 2551              	.L166:
 2552 00dc 00000000 		.word	uxCurrentNumberOfTasks
 2553 00e0 00000000 		.word	pxReadyTasksLists
 2554 00e4 00000000 		.word	pxDelayedTaskList
 2555 00e8 00000000 		.word	pxOverflowDelayedTaskList
 2556 00ec 00000000 		.word	xTasksWaitingTermination
 2557 00f0 00000000 		.word	xSuspendedTaskList
 2558              		.cfi_endproc
 2559              	.LFE18:
 2560              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 2561              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2562              		.align	1
 2563              		.global	xTaskIncrementTick
 2564              		.syntax unified
 2565              		.thumb
 2566              		.thumb_func
 2567              		.fpu softvfp
 2568              		.type	xTaskIncrementTick, %function
 2569              	xTaskIncrementTick:
 2570              	.LFB19:
1814:FreeRTOS/tasks.c **** 
1815:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1816:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1817:FreeRTOS/tasks.c **** 
1818:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1821:FreeRTOS/tasks.c **** 	{
1822:FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1823:FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1824:FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1825:FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
1826:FreeRTOS/tasks.c **** 	}
1827:FreeRTOS/tasks.c **** 
1828:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1829:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1830:FreeRTOS/tasks.c **** 
1831:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1832:FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1833:FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1834:FreeRTOS/tasks.c **** 1. */
1835:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1836:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 79


1837:FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickT_t xTicksToJump )
1838:FreeRTOS/tasks.c **** 	{
1839:FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1840:FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1841:FreeRTOS/tasks.c **** 		each stepped tick. */
1842:FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1843:FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
1844:FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1845:FreeRTOS/tasks.c **** 	}
1846:FreeRTOS/tasks.c **** 
1847:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1848:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1849:FreeRTOS/tasks.c **** 
1850:FreeRTOS/tasks.c **** BaseT_t xTaskIncrementTick( void )
1851:FreeRTOS/tasks.c **** {
 2571              		.loc 1 1851 0
 2572              		.cfi_startproc
 2573              		@ args = 0, pretend = 0, frame = 24
 2574              		@ frame_needed = 1, uses_anonymous_args = 0
 2575 0000 80B5     		push	{r7, lr}	@
 2576              		.cfi_def_cfa_offset 8
 2577              		.cfi_offset 7, -8
 2578              		.cfi_offset 14, -4
 2579 0002 86B0     		sub	sp, sp, #24	@,,
 2580              		.cfi_def_cfa_offset 32
 2581 0004 00AF     		add	r7, sp, #0	@,,
 2582              		.cfi_def_cfa_register 7
 2583              	@ FreeRTOS/tasks.c:1854: BaseT_t xSwitchRequired = pdFALSE;
1852:FreeRTOS/tasks.c **** TCB_t * pxTCB;
1853:FreeRTOS/tasks.c **** TickT_t xItemValue;
1854:FreeRTOS/tasks.c **** BaseT_t xSwitchRequired = pdFALSE;
 2584              		.loc 1 1854 0
 2585 0006 0023     		movs	r3, #0	@ tmp146,
 2586 0008 7B61     		str	r3, [r7, #20]	@ tmp146, xSwitchRequired
 2587              	@ FreeRTOS/tasks.c:1860: 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
1855:FreeRTOS/tasks.c **** 
1856:FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1857:FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1858:FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1859:FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1860:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2588              		.loc 1 1860 0
 2589 000a 514B     		ldr	r3, .L185	@ tmp147,
 2590 000c 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.65_1, uxSchedulerSuspended
 2591 000e 002B     		cmp	r3, #0	@ uxSchedulerSuspended.65_1,
 2592 0010 40F08C80 		bne	.L169	@,
 2593              	@ FreeRTOS/tasks.c:1864: 		++xTickCount;
1861:FreeRTOS/tasks.c **** 	{
1862:FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1863:FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
1864:FreeRTOS/tasks.c **** 		++xTickCount;
 2594              		.loc 1 1864 0
 2595 0014 4F4B     		ldr	r3, .L185+4	@ tmp148,
 2596 0016 1B68     		ldr	r3, [r3]	@ xTickCount.66_2, xTickCount
 2597 0018 0133     		adds	r3, r3, #1	@ _3, xTickCount.66_2,
 2598 001a 4E4A     		ldr	r2, .L185+4	@ tmp149,
 2599 001c 1360     		str	r3, [r2]	@ _3, xTickCount
ARM GAS  /tmp/ccTV2SzP.s 			page 80


 2600              	.LBB8:
 2601              	@ FreeRTOS/tasks.c:1869: 			const TickT_t xConstTickCount = xTickCount;
1865:FreeRTOS/tasks.c **** 
1866:FreeRTOS/tasks.c **** 		{
1867:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1868:FreeRTOS/tasks.c **** 			block. */
1869:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 2602              		.loc 1 1869 0
 2603 001e 4D4B     		ldr	r3, .L185+4	@ tmp150,
 2604 0020 1B68     		ldr	r3, [r3]	@ tmp151, xTickCount
 2605 0022 3B61     		str	r3, [r7, #16]	@ tmp151, xConstTickCount
 2606              	@ FreeRTOS/tasks.c:1871: 			if( xConstTickCount == ( TickT_t ) 0U )
1870:FreeRTOS/tasks.c **** 
1871:FreeRTOS/tasks.c **** 			if( xConstTickCount == ( TickT_t ) 0U )
 2607              		.loc 1 1871 0
 2608 0024 3B69     		ldr	r3, [r7, #16]	@ tmp152, xConstTickCount
 2609 0026 002B     		cmp	r3, #0	@ tmp152,
 2610 0028 18D1     		bne	.L170	@,
 2611              	.LBB9:
 2612              	@ FreeRTOS/tasks.c:1873: 				taskSWITCH_DELAYED_LISTS();
1872:FreeRTOS/tasks.c **** 			{
1873:FreeRTOS/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 2613              		.loc 1 1873 0
 2614 002a 4B4B     		ldr	r3, .L185+8	@ tmp153,
 2615 002c 1B68     		ldr	r3, [r3]	@ pxDelayedTaskList.67_4, pxDelayedTaskList
 2616 002e 1B68     		ldr	r3, [r3]	@ _5, pxDelayedTaskList.67_4->uxNumberOfItems
 2617 0030 002B     		cmp	r3, #0	@ _5,
 2618 0032 02D0     		beq	.L171	@,
 2619              	@ FreeRTOS/tasks.c:1873: 				taskSWITCH_DELAYED_LISTS();
 2620              		.loc 1 1873 0 is_stmt 0 discriminator 1
 2621 0034 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2622              	.L172:
 2623 0038 FEE7     		b	.L172	@
 2624              	.L171:
 2625              	@ FreeRTOS/tasks.c:1873: 				taskSWITCH_DELAYED_LISTS();
 2626              		.loc 1 1873 0 discriminator 2
 2627 003a 474B     		ldr	r3, .L185+8	@ tmp154,
 2628 003c 1B68     		ldr	r3, [r3]	@ tmp155, pxDelayedTaskList
 2629 003e FB60     		str	r3, [r7, #12]	@ tmp155, pxTemp
 2630 0040 464B     		ldr	r3, .L185+12	@ tmp156,
 2631 0042 1B68     		ldr	r3, [r3]	@ pxOverflowDelayedTaskList.68_6, pxOverflowDelayedTaskList
 2632 0044 444A     		ldr	r2, .L185+8	@ tmp157,
 2633 0046 1360     		str	r3, [r2]	@ pxOverflowDelayedTaskList.68_6, pxDelayedTaskList
 2634 0048 444A     		ldr	r2, .L185+12	@ tmp158,
 2635 004a FB68     		ldr	r3, [r7, #12]	@ tmp159, pxTemp
 2636 004c 1360     		str	r3, [r2]	@ tmp159, pxOverflowDelayedTaskList
 2637 004e 444B     		ldr	r3, .L185+16	@ tmp160,
 2638 0050 1B68     		ldr	r3, [r3]	@ xNumOfOverflows.69_7, xNumOfOverflows
 2639 0052 0133     		adds	r3, r3, #1	@ _8, xNumOfOverflows.69_7,
 2640 0054 424A     		ldr	r2, .L185+16	@ tmp161,
 2641 0056 1360     		str	r3, [r2]	@ _8, xNumOfOverflows
 2642 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 2643              	.L170:
 2644              	.LBE9:
 2645              	@ FreeRTOS/tasks.c:1884: 			if( xConstTickCount >= xNextTaskUnblockTime )
1874:FreeRTOS/tasks.c **** 			}
1875:FreeRTOS/tasks.c **** 			else
ARM GAS  /tmp/ccTV2SzP.s 			page 81


1876:FreeRTOS/tasks.c **** 			{
1877:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1878:FreeRTOS/tasks.c **** 			}
1879:FreeRTOS/tasks.c **** 
1880:FreeRTOS/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1881:FreeRTOS/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1882:FreeRTOS/tasks.c **** 			has been found whose block time has not expired there is no need to
1883:FreeRTOS/tasks.c **** 			look any further	down the list. */
1884:FreeRTOS/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 2646              		.loc 1 1884 0 is_stmt 1
 2647 005c 414B     		ldr	r3, .L185+20	@ tmp162,
 2648 005e 1B68     		ldr	r3, [r3]	@ xNextTaskUnblockTime.70_9, xNextTaskUnblockTime
 2649 0060 3A69     		ldr	r2, [r7, #16]	@ tmp163, xConstTickCount
 2650 0062 9A42     		cmp	r2, r3	@ tmp163, xNextTaskUnblockTime.70_9
 2651 0064 4DD3     		bcc	.L173	@,
 2652              	.L180:
 2653              	@ FreeRTOS/tasks.c:1888: 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1885:FreeRTOS/tasks.c **** 			{
1886:FreeRTOS/tasks.c **** 				for( ;; )
1887:FreeRTOS/tasks.c **** 				{
1888:FreeRTOS/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2654              		.loc 1 1888 0
 2655 0066 3C4B     		ldr	r3, .L185+8	@ tmp164,
 2656 0068 1B68     		ldr	r3, [r3]	@ pxDelayedTaskList.72_10, pxDelayedTaskList
 2657 006a 1B68     		ldr	r3, [r3]	@ _11, pxDelayedTaskList.72_10->uxNumberOfItems
 2658 006c 002B     		cmp	r3, #0	@ _11,
 2659 006e 01D1     		bne	.L174	@,
 2660              	@ FreeRTOS/tasks.c:1888: 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2661              		.loc 1 1888 0 is_stmt 0 discriminator 1
 2662 0070 0123     		movs	r3, #1	@ iftmp.71_40,
 2663 0072 00E0     		b	.L175	@
 2664              	.L174:
 2665              	@ FreeRTOS/tasks.c:1888: 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2666              		.loc 1 1888 0 discriminator 2
 2667 0074 0023     		movs	r3, #0	@ iftmp.71_40,
 2668              	.L175:
 2669              	@ FreeRTOS/tasks.c:1888: 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2670              		.loc 1 1888 0 discriminator 4
 2671 0076 002B     		cmp	r3, #0	@ iftmp.71_40,
 2672 0078 04D0     		beq	.L176	@,
 2673              	@ FreeRTOS/tasks.c:1895: 						xNextTaskUnblockTime = portMAX_DELAY;
1889:FreeRTOS/tasks.c **** 					{
1890:FreeRTOS/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1891:FreeRTOS/tasks.c **** 						to the maximum possible value so it is extremely
1892:FreeRTOS/tasks.c **** 						unlikely that the
1893:FreeRTOS/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1894:FreeRTOS/tasks.c **** 						next time through. */
1895:FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 2674              		.loc 1 1895 0 is_stmt 1
 2675 007a 3A4B     		ldr	r3, .L185+20	@ tmp165,
 2676 007c 4FF0FF32 		mov	r2, #-1	@ tmp166,
 2677 0080 1A60     		str	r2, [r3]	@ tmp166, xNextTaskUnblockTime
 2678              	@ FreeRTOS/tasks.c:1896: 						break;
1896:FreeRTOS/tasks.c **** 						break;
 2679              		.loc 1 1896 0
 2680 0082 3EE0     		b	.L173	@
 2681              	.L176:
ARM GAS  /tmp/ccTV2SzP.s 			page 82


 2682              	@ FreeRTOS/tasks.c:1904: 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList )
1897:FreeRTOS/tasks.c **** 					}
1898:FreeRTOS/tasks.c **** 					else
1899:FreeRTOS/tasks.c **** 					{
1900:FreeRTOS/tasks.c **** 						/* The delayed list is not empty, get the value of the
1901:FreeRTOS/tasks.c **** 						item at the head of the delayed list.  This is the time
1902:FreeRTOS/tasks.c **** 						at which the task at the head of the delayed list must
1903:FreeRTOS/tasks.c **** 						be removed from the Blocked state. */
1904:FreeRTOS/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2683              		.loc 1 1904 0
 2684 0084 344B     		ldr	r3, .L185+8	@ tmp167,
 2685 0086 1B68     		ldr	r3, [r3]	@ pxDelayedTaskList.73_12, pxDelayedTaskList
 2686 0088 DB68     		ldr	r3, [r3, #12]	@ _13, pxDelayedTaskList.73_12->xListEnd.pxNext
 2687 008a DB68     		ldr	r3, [r3, #12]	@ tmp168, _13->pvOwner
 2688 008c BB60     		str	r3, [r7, #8]	@ tmp168, pxTCB
 2689              	@ FreeRTOS/tasks.c:1905: 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) )
1905:FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2690              		.loc 1 1905 0
 2691 008e BB68     		ldr	r3, [r7, #8]	@ tmp169, pxTCB
 2692 0090 5B68     		ldr	r3, [r3, #4]	@ tmp170, pxTCB_60->xGenericListItem.xItemValue
 2693 0092 7B60     		str	r3, [r7, #4]	@ tmp170, xItemValue
 2694              	@ FreeRTOS/tasks.c:1907: 						if( xConstTickCount < xItemValue )
1906:FreeRTOS/tasks.c **** 
1907:FreeRTOS/tasks.c **** 						if( xConstTickCount < xItemValue )
 2695              		.loc 1 1907 0
 2696 0094 3A69     		ldr	r2, [r7, #16]	@ tmp171, xConstTickCount
 2697 0096 7B68     		ldr	r3, [r7, #4]	@ tmp172, xItemValue
 2698 0098 9A42     		cmp	r2, r3	@ tmp171, tmp172
 2699 009a 03D2     		bcs	.L177	@,
 2700              	@ FreeRTOS/tasks.c:1914: 							xNextTaskUnblockTime = xItemValue;
1908:FreeRTOS/tasks.c **** 						{
1909:FreeRTOS/tasks.c **** 							/* It is not time to unblock this item yet, but the
1910:FreeRTOS/tasks.c **** 							item value is the time at which the task at the head
1911:FreeRTOS/tasks.c **** 							of the blocked list must be removed from the Blocked
1912:FreeRTOS/tasks.c **** 							state -	so record the item value in
1913:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime. */
1914:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
 2701              		.loc 1 1914 0
 2702 009c 314A     		ldr	r2, .L185+20	@ tmp173,
 2703 009e 7B68     		ldr	r3, [r7, #4]	@ tmp174, xItemValue
 2704 00a0 1360     		str	r3, [r2]	@ tmp174, xNextTaskUnblockTime
 2705              	@ FreeRTOS/tasks.c:1915: 							break;
1915:FreeRTOS/tasks.c **** 							break;
 2706              		.loc 1 1915 0
 2707 00a2 2EE0     		b	.L173	@
 2708              	.L177:
 2709              	@ FreeRTOS/tasks.c:1923: 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
1916:FreeRTOS/tasks.c **** 						}
1917:FreeRTOS/tasks.c **** 						else
1918:FreeRTOS/tasks.c **** 						{
1919:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1920:FreeRTOS/tasks.c **** 						}
1921:FreeRTOS/tasks.c **** 
1922:FreeRTOS/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
1923:FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2710              		.loc 1 1923 0
 2711 00a4 BB68     		ldr	r3, [r7, #8]	@ tmp175, pxTCB
ARM GAS  /tmp/ccTV2SzP.s 			page 83


 2712 00a6 0433     		adds	r3, r3, #4	@ _14, tmp175,
 2713 00a8 1846     		mov	r0, r3	@, _14
 2714 00aa FFF7FEFF 		bl	uxListRemove	@
 2715              	@ FreeRTOS/tasks.c:1927: 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1924:FreeRTOS/tasks.c **** 
1925:FreeRTOS/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
1926:FreeRTOS/tasks.c **** 						it from the event list. */
1927:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2716              		.loc 1 1927 0
 2717 00ae BB68     		ldr	r3, [r7, #8]	@ tmp176, pxTCB
 2718 00b0 9B6A     		ldr	r3, [r3, #40]	@ _15, pxTCB_60->xEventListItem.pvContainer
 2719 00b2 002B     		cmp	r3, #0	@ _15,
 2720 00b4 04D0     		beq	.L178	@,
 2721              	@ FreeRTOS/tasks.c:1929: 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1928:FreeRTOS/tasks.c **** 						{
1929:FreeRTOS/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2722              		.loc 1 1929 0
 2723 00b6 BB68     		ldr	r3, [r7, #8]	@ tmp177, pxTCB
 2724 00b8 1833     		adds	r3, r3, #24	@ _16, tmp177,
 2725 00ba 1846     		mov	r0, r3	@, _16
 2726 00bc FFF7FEFF 		bl	uxListRemove	@
 2727              	.L178:
 2728              	@ FreeRTOS/tasks.c:1938: 						prvAddTaskToReadyList( pxTCB );
1930:FreeRTOS/tasks.c **** 						}
1931:FreeRTOS/tasks.c **** 						else
1932:FreeRTOS/tasks.c **** 						{
1933:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1934:FreeRTOS/tasks.c **** 						}
1935:FreeRTOS/tasks.c **** 
1936:FreeRTOS/tasks.c **** 						/* Place the unblocked task into the appropriate ready
1937:FreeRTOS/tasks.c **** 						list. */
1938:FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 2729              		.loc 1 1938 0
 2730 00c0 BB68     		ldr	r3, [r7, #8]	@ tmp178, pxTCB
 2731 00c2 DB6A     		ldr	r3, [r3, #44]	@ _17, pxTCB_60->uxPriority
 2732 00c4 0122     		movs	r2, #1	@ tmp179,
 2733 00c6 9A40     		lsls	r2, r2, r3	@ _18, tmp179, _17
 2734 00c8 274B     		ldr	r3, .L185+24	@ tmp180,
 2735 00ca 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.74_19, uxTopReadyPriority
 2736 00cc 1343     		orrs	r3, r3, r2	@, _20, uxTopReadyPriority.74_19, _18
 2737 00ce 264A     		ldr	r2, .L185+24	@ tmp181,
 2738 00d0 1360     		str	r3, [r2]	@ _20, uxTopReadyPriority
 2739 00d2 BB68     		ldr	r3, [r7, #8]	@ tmp182, pxTCB
 2740 00d4 DA6A     		ldr	r2, [r3, #44]	@ _21, pxTCB_60->uxPriority
 2741 00d6 1346     		mov	r3, r2	@ tmp183, _21
 2742 00d8 9B00     		lsls	r3, r3, #2	@ tmp183, tmp183,
 2743 00da 1344     		add	r3, r3, r2	@ tmp183, _21
 2744 00dc 9B00     		lsls	r3, r3, #2	@ tmp184, tmp183,
 2745 00de 234A     		ldr	r2, .L185+28	@ tmp185,
 2746 00e0 1A44     		add	r2, r2, r3	@ _22, tmp183
 2747 00e2 BB68     		ldr	r3, [r7, #8]	@ tmp186, pxTCB
 2748 00e4 0433     		adds	r3, r3, #4	@ _23, tmp186,
 2749 00e6 1946     		mov	r1, r3	@, _23
 2750 00e8 1046     		mov	r0, r2	@, _22
 2751 00ea FFF7FEFF 		bl	vListInsertEnd	@
 2752              	@ FreeRTOS/tasks.c:1948: 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1939:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 84


1940:FreeRTOS/tasks.c **** 						/* A task being unblocked cannot cause an immediate
1941:FreeRTOS/tasks.c **** 						context switch if preemption is turned off. */
1942:FreeRTOS/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
1943:FreeRTOS/tasks.c **** 						{
1944:FreeRTOS/tasks.c **** 							/* Preemption is on, but a context switch should
1945:FreeRTOS/tasks.c **** 							only be performed if the unblocked task has a
1946:FreeRTOS/tasks.c **** 							priority that is equal to or higher than the
1947:FreeRTOS/tasks.c **** 							currently executing task. */
1948:FreeRTOS/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2753              		.loc 1 1948 0
 2754 00ee BB68     		ldr	r3, [r7, #8]	@ tmp187, pxTCB
 2755 00f0 DA6A     		ldr	r2, [r3, #44]	@ _24, pxTCB_60->uxPriority
 2756 00f2 1F4B     		ldr	r3, .L185+32	@ tmp188,
 2757 00f4 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.75_25, pxCurrentTCB
 2758 00f6 DB6A     		ldr	r3, [r3, #44]	@ _26, pxCurrentTCB.75_25->uxPriority
 2759 00f8 9A42     		cmp	r2, r3	@ _24, _26
 2760 00fa B4D3     		bcc	.L180	@,
 2761              	@ FreeRTOS/tasks.c:1950: 								xSwitchRequired = pdTRUE;
1949:FreeRTOS/tasks.c **** 							{
1950:FreeRTOS/tasks.c **** 								xSwitchRequired = pdTRUE;
 2762              		.loc 1 1950 0
 2763 00fc 0123     		movs	r3, #1	@ tmp189,
 2764 00fe 7B61     		str	r3, [r7, #20]	@ tmp189, xSwitchRequired
 2765              	@ FreeRTOS/tasks.c:1888: 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1888:FreeRTOS/tasks.c **** 					{
 2766              		.loc 1 1888 0
 2767 0100 B1E7     		b	.L180	@
 2768              	.L173:
 2769              	.LBE8:
 2770              	@ FreeRTOS/tasks.c:1968: 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPrio
1951:FreeRTOS/tasks.c **** 							}
1952:FreeRTOS/tasks.c **** 							else
1953:FreeRTOS/tasks.c **** 							{
1954:FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
1955:FreeRTOS/tasks.c **** 							}
1956:FreeRTOS/tasks.c **** 						}
1957:FreeRTOS/tasks.c **** 						#endif /* configUSE_PREEMPTION */
1958:FreeRTOS/tasks.c **** 					}
1959:FreeRTOS/tasks.c **** 				}
1960:FreeRTOS/tasks.c **** 			}
1961:FreeRTOS/tasks.c **** 		}
1962:FreeRTOS/tasks.c **** 
1963:FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
1964:FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
1965:FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
1966:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
1967:FreeRTOS/tasks.c **** 		{
1968:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseT_t )
 2771              		.loc 1 1968 0
 2772 0102 1B4B     		ldr	r3, .L185+32	@ tmp190,
 2773 0104 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.76_27, pxCurrentTCB
 2774 0106 DA6A     		ldr	r2, [r3, #44]	@ _28, pxCurrentTCB.76_27->uxPriority
 2775 0108 1849     		ldr	r1, .L185+28	@ tmp191,
 2776 010a 1346     		mov	r3, r2	@ tmp192, _28
 2777 010c 9B00     		lsls	r3, r3, #2	@ tmp192, tmp192,
 2778 010e 1344     		add	r3, r3, r2	@ tmp192, _28
 2779 0110 9B00     		lsls	r3, r3, #2	@ tmp193, tmp192,
ARM GAS  /tmp/ccTV2SzP.s 			page 85


 2780 0112 0B44     		add	r3, r3, r1	@ tmp194, tmp191
 2781 0114 1B68     		ldr	r3, [r3]	@ _29, pxReadyTasksLists[_28].uxNumberOfItems
 2782 0116 012B     		cmp	r3, #1	@ _29,
 2783 0118 01D9     		bls	.L181	@,
 2784              	@ FreeRTOS/tasks.c:1970: 				xSwitchRequired = pdTRUE;
1969:FreeRTOS/tasks.c **** 			{
1970:FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 2785              		.loc 1 1970 0
 2786 011a 0123     		movs	r3, #1	@ tmp195,
 2787 011c 7B61     		str	r3, [r7, #20]	@ tmp195, xSwitchRequired
 2788              	.L181:
 2789              	@ FreeRTOS/tasks.c:1983: 			if( uxPendedTicks == ( UBaseT_t ) 0U )
1971:FreeRTOS/tasks.c **** 			}
1972:FreeRTOS/tasks.c **** 			else
1973:FreeRTOS/tasks.c **** 			{
1974:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1975:FreeRTOS/tasks.c **** 			}
1976:FreeRTOS/tasks.c **** 		}
1977:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
1978:FreeRTOS/tasks.c **** 
1979:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1980:FreeRTOS/tasks.c **** 		{
1981:FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
1982:FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
1983:FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseT_t ) 0U )
 2790              		.loc 1 1983 0
 2791 011e 154B     		ldr	r3, .L185+36	@ tmp196,
 2792 0120 1B68     		ldr	r3, [r3]	@ uxPendedTicks.77_30, uxPendedTicks
 2793 0122 002B     		cmp	r3, #0	@ uxPendedTicks.77_30,
 2794 0124 09D1     		bne	.L182	@,
 2795              	@ FreeRTOS/tasks.c:1985: 				vApplicationTickHook();
1984:FreeRTOS/tasks.c **** 			{
1985:FreeRTOS/tasks.c **** 				vApplicationTickHook();
 2796              		.loc 1 1985 0
 2797 0126 FFF7FEFF 		bl	vApplicationTickHook	@
 2798 012a 06E0     		b	.L182	@
 2799              	.L169:
 2800              	@ FreeRTOS/tasks.c:1996: 		++uxPendedTicks;
1986:FreeRTOS/tasks.c **** 			}
1987:FreeRTOS/tasks.c **** 			else
1988:FreeRTOS/tasks.c **** 			{
1989:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1990:FreeRTOS/tasks.c **** 			}
1991:FreeRTOS/tasks.c **** 		}
1992:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
1993:FreeRTOS/tasks.c **** 	}
1994:FreeRTOS/tasks.c **** 	else
1995:FreeRTOS/tasks.c **** 	{
1996:FreeRTOS/tasks.c **** 		++uxPendedTicks;
 2801              		.loc 1 1996 0
 2802 012c 114B     		ldr	r3, .L185+36	@ tmp197,
 2803 012e 1B68     		ldr	r3, [r3]	@ uxPendedTicks.78_31, uxPendedTicks
 2804 0130 0133     		adds	r3, r3, #1	@ _32, uxPendedTicks.78_31,
 2805 0132 104A     		ldr	r2, .L185+36	@ tmp198,
 2806 0134 1360     		str	r3, [r2]	@ _32, uxPendedTicks
 2807              	@ FreeRTOS/tasks.c:2002: 			vApplicationTickHook();
1997:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 86


1998:FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1999:FreeRTOS/tasks.c **** 		scheduler is locked. */
2000:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2001:FreeRTOS/tasks.c **** 		{
2002:FreeRTOS/tasks.c **** 			vApplicationTickHook();
 2808              		.loc 1 2002 0
 2809 0136 FFF7FEFF 		bl	vApplicationTickHook	@
 2810              	.L182:
 2811              	@ FreeRTOS/tasks.c:2009: 		if( xYieldPending != pdFALSE )
2003:FreeRTOS/tasks.c **** 		}
2004:FreeRTOS/tasks.c **** 		#endif
2005:FreeRTOS/tasks.c **** 	}
2006:FreeRTOS/tasks.c **** 
2007:FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2008:FreeRTOS/tasks.c **** 	{
2009:FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 2812              		.loc 1 2009 0
 2813 013a 0F4B     		ldr	r3, .L185+40	@ tmp199,
 2814 013c 1B68     		ldr	r3, [r3]	@ xYieldPending.79_33, xYieldPending
 2815 013e 002B     		cmp	r3, #0	@ xYieldPending.79_33,
 2816 0140 01D0     		beq	.L183	@,
 2817              	@ FreeRTOS/tasks.c:2011: 			xSwitchRequired = pdTRUE;
2010:FreeRTOS/tasks.c **** 		{
2011:FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 2818              		.loc 1 2011 0
 2819 0142 0123     		movs	r3, #1	@ tmp200,
 2820 0144 7B61     		str	r3, [r7, #20]	@ tmp200, xSwitchRequired
 2821              	.L183:
 2822              	@ FreeRTOS/tasks.c:2020: 	return xSwitchRequired;
2012:FreeRTOS/tasks.c **** 		}
2013:FreeRTOS/tasks.c **** 		else
2014:FreeRTOS/tasks.c **** 		{
2015:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2016:FreeRTOS/tasks.c **** 		}
2017:FreeRTOS/tasks.c **** 	}
2018:FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2019:FreeRTOS/tasks.c **** 
2020:FreeRTOS/tasks.c **** 	return xSwitchRequired;
 2823              		.loc 1 2020 0
 2824 0146 7B69     		ldr	r3, [r7, #20]	@ _72, xSwitchRequired
 2825              	@ FreeRTOS/tasks.c:2021: }
2021:FreeRTOS/tasks.c **** }
 2826              		.loc 1 2021 0
 2827 0148 1846     		mov	r0, r3	@, <retval>
 2828 014a 1837     		adds	r7, r7, #24	@,,
 2829              		.cfi_def_cfa_offset 8
 2830 014c BD46     		mov	sp, r7	@,
 2831              		.cfi_def_cfa_register 13
 2832              		@ sp needed	@
 2833 014e 80BD     		pop	{r7, pc}	@
 2834              	.L186:
 2835              		.align	2
 2836              	.L185:
 2837 0150 00000000 		.word	uxSchedulerSuspended
 2838 0154 00000000 		.word	xTickCount
 2839 0158 00000000 		.word	pxDelayedTaskList
 2840 015c 00000000 		.word	pxOverflowDelayedTaskList
ARM GAS  /tmp/ccTV2SzP.s 			page 87


 2841 0160 00000000 		.word	xNumOfOverflows
 2842 0164 00000000 		.word	xNextTaskUnblockTime
 2843 0168 00000000 		.word	uxTopReadyPriority
 2844 016c 00000000 		.word	pxReadyTasksLists
 2845 0170 00000000 		.word	pxCurrentTCB
 2846 0174 00000000 		.word	uxPendedTicks
 2847 0178 00000000 		.word	xYieldPending
 2848              		.cfi_endproc
 2849              	.LFE19:
 2850              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2851              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2852              		.align	1
 2853              		.global	vTaskSwitchContext
 2854              		.syntax unified
 2855              		.thumb
 2856              		.thumb_func
 2857              		.fpu softvfp
 2858              		.type	vTaskSwitchContext, %function
 2859              	vTaskSwitchContext:
 2860              	.LFB20:
2022:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2023:FreeRTOS/tasks.c **** 
2024:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2025:FreeRTOS/tasks.c **** 
2026:FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2027:FreeRTOS/tasks.c **** 	{
2028:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2029:FreeRTOS/tasks.c **** 
2030:FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2031:FreeRTOS/tasks.c **** 		getting set. */
2032:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2033:FreeRTOS/tasks.c **** 		{
2034:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2035:FreeRTOS/tasks.c **** 		}
2036:FreeRTOS/tasks.c **** 		else
2037:FreeRTOS/tasks.c **** 		{
2038:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2039:FreeRTOS/tasks.c **** 		}
2040:FreeRTOS/tasks.c **** 
2041:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2042:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2043:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2044:FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2045:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2046:FreeRTOS/tasks.c **** 	}
2047:FreeRTOS/tasks.c **** 
2048:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2049:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2050:FreeRTOS/tasks.c **** 
2051:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2052:FreeRTOS/tasks.c **** 
2053:FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2054:FreeRTOS/tasks.c **** 	{
2055:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2056:FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2057:FreeRTOS/tasks.c **** 
2058:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
ARM GAS  /tmp/ccTV2SzP.s 			page 88


2059:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2060:FreeRTOS/tasks.c **** 		{
2061:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2062:FreeRTOS/tasks.c **** 		}
2063:FreeRTOS/tasks.c **** 		else
2064:FreeRTOS/tasks.c **** 		{
2065:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2066:FreeRTOS/tasks.c **** 		}
2067:FreeRTOS/tasks.c **** 
2068:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2069:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2070:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2071:FreeRTOS/tasks.c **** 		{
2072:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2073:FreeRTOS/tasks.c **** 		}
2074:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2075:FreeRTOS/tasks.c **** 
2076:FreeRTOS/tasks.c **** 		return xReturn;
2077:FreeRTOS/tasks.c **** 	}
2078:FreeRTOS/tasks.c **** 
2079:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2080:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2081:FreeRTOS/tasks.c **** 
2082:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2083:FreeRTOS/tasks.c **** 
2084:FreeRTOS/tasks.c **** 	BaseT_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2085:FreeRTOS/tasks.c **** 	{
2086:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2087:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
2088:FreeRTOS/tasks.c **** 
2089:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2090:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2091:FreeRTOS/tasks.c **** 		{
2092:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2093:FreeRTOS/tasks.c **** 		}
2094:FreeRTOS/tasks.c **** 		else
2095:FreeRTOS/tasks.c **** 		{
2096:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2097:FreeRTOS/tasks.c **** 		}
2098:FreeRTOS/tasks.c **** 
2099:FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2100:FreeRTOS/tasks.c **** 		{
2101:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2102:FreeRTOS/tasks.c **** 		}
2103:FreeRTOS/tasks.c **** 		else
2104:FreeRTOS/tasks.c **** 		{
2105:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2106:FreeRTOS/tasks.c **** 		}
2107:FreeRTOS/tasks.c **** 
2108:FreeRTOS/tasks.c **** 		return xReturn;
2109:FreeRTOS/tasks.c **** 	}
2110:FreeRTOS/tasks.c **** 
2111:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2112:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2113:FreeRTOS/tasks.c **** 
2114:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2115:FreeRTOS/tasks.c **** {
ARM GAS  /tmp/ccTV2SzP.s 			page 89


 2861              		.loc 1 2115 0
 2862              		.cfi_startproc
 2863              		@ args = 0, pretend = 0, frame = 16
 2864              		@ frame_needed = 1, uses_anonymous_args = 0
 2865 0000 80B5     		push	{r7, lr}	@
 2866              		.cfi_def_cfa_offset 8
 2867              		.cfi_offset 7, -8
 2868              		.cfi_offset 14, -4
 2869 0002 84B0     		sub	sp, sp, #16	@,,
 2870              		.cfi_def_cfa_offset 24
 2871 0004 00AF     		add	r7, sp, #0	@,,
 2872              		.cfi_def_cfa_register 7
 2873              	@ FreeRTOS/tasks.c:2116: 	if( uxSchedulerSuspended != ( UBaseT_t ) pdFALSE )
2116:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseT_t ) pdFALSE )
 2874              		.loc 1 2116 0
 2875 0006 224B     		ldr	r3, .L195	@ tmp124,
 2876 0008 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.80_1, uxSchedulerSuspended
 2877 000a 002B     		cmp	r3, #0	@ uxSchedulerSuspended.80_1,
 2878 000c 03D0     		beq	.L188	@,
 2879              	@ FreeRTOS/tasks.c:2120: 		xYieldPending = pdTRUE;
2117:FreeRTOS/tasks.c **** 	{
2118:FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2119:FreeRTOS/tasks.c **** 		switch. */
2120:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2880              		.loc 1 2120 0
 2881 000e 214B     		ldr	r3, .L195+4	@ tmp125,
 2882 0010 0122     		movs	r2, #1	@ tmp126,
 2883 0012 1A60     		str	r2, [r3]	@ tmp126, xYieldPending
 2884              	@ FreeRTOS/tasks.c:2171: }
2121:FreeRTOS/tasks.c **** 	}
2122:FreeRTOS/tasks.c **** 	else
2123:FreeRTOS/tasks.c **** 	{
2124:FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2125:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2126:FreeRTOS/tasks.c **** 
2127:FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2128:FreeRTOS/tasks.c **** 		{
2129:FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2130:FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2131:FreeRTOS/tasks.c **** 				#else
2132:FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2133:FreeRTOS/tasks.c **** 				#endif
2134:FreeRTOS/tasks.c **** 
2135:FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2136:FreeRTOS/tasks.c **** 				accumulated	time so far.  The time the task started running was
2137:FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2138:FreeRTOS/tasks.c **** 				protection here	so count values are only valid until the timer
2139:FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2140:FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2141:FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2142:FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2143:FreeRTOS/tasks.c **** 				{
2144:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2145:FreeRTOS/tasks.c **** 				}
2146:FreeRTOS/tasks.c **** 				else
2147:FreeRTOS/tasks.c **** 				{
2148:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccTV2SzP.s 			page 90


2149:FreeRTOS/tasks.c **** 				}
2150:FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2151:FreeRTOS/tasks.c **** 		}
2152:FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2153:FreeRTOS/tasks.c **** 
2154:FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2155:FreeRTOS/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
2156:FreeRTOS/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
2157:FreeRTOS/tasks.c **** 
2158:FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2159:FreeRTOS/tasks.c **** 		optimised asm code. */
2160:FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2161:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2162:FreeRTOS/tasks.c **** 
2163:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2164:FreeRTOS/tasks.c **** 		{
2165:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2166:FreeRTOS/tasks.c **** 			structure specific to this task. */
2167:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2168:FreeRTOS/tasks.c **** 		}
2169:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2170:FreeRTOS/tasks.c **** 	}
2171:FreeRTOS/tasks.c **** }
 2885              		.loc 1 2171 0
 2886 0014 37E0     		b	.L194	@
 2887              	.L188:
 2888              	@ FreeRTOS/tasks.c:2124: 		xYieldPending = pdFALSE;
2124:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2889              		.loc 1 2124 0
 2890 0016 1F4B     		ldr	r3, .L195+4	@ tmp127,
 2891 0018 0022     		movs	r2, #0	@ tmp128,
 2892 001a 1A60     		str	r2, [r3]	@ tmp128, xYieldPending
 2893              	.LBB10:
 2894              	@ FreeRTOS/tasks.c:2160: 		taskSELECT_HIGHEST_PRIORITY_TASK();
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2895              		.loc 1 2160 0
 2896 001c 1E4B     		ldr	r3, .L195+8	@ tmp129,
 2897 001e 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.81_2, uxTopReadyPriority
 2898 0020 7B60     		str	r3, [r7, #4]	@ uxTopReadyPriority.81_2, ulBitmap
 2899              	.LBB11:
 2900              	.LBB12:
 2901              	@ FreeRTOS/portable/GCC/ARM_CM3/portmacro.h:165: 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn 
 2902              		.file 2 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   5:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   7:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
   8:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
   9:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  13:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
ARM GAS  /tmp/ccTV2SzP.s 			page 91


  15:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  17:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Thank you!                                                         *
  18:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  19:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  20:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  21:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  23:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  27:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  38:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  40:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  41:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  44:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  46:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  47:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  48:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  51:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  62:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  63:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  64:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** */
  65:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  68:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  69:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  70:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  71:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
ARM GAS  /tmp/ccTV2SzP.s 			page 92


  72:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
  73:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  74:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  75:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  76:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  77:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  78:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  79:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  80:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  81:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  82:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  83:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  84:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  85:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  86:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  87:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  88:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  89:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  90:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  91:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  92:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  93:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  94:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackT_t;
  95:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  96:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseT_t;
  97:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  98:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseT_t;
  99:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 100:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 101:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 102:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 103:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #else
 104:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 105:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickT_t;
 106:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 108:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 111:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 112:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 113:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 114:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 115:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 116:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 118:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortYield( void );
 119:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 120:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 121:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD()					vPortYield()
 122:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 123:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 124:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 125:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 126:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 127:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 128:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
ARM GAS  /tmp/ccTV2SzP.s 			page 93


 129:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 130:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 131:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 132:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 133:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
 134:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
 135:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 137:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 139:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 141:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 143:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 144:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 145:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 147:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 148:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 149:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 150:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 151:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 152:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 154:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 155:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 156:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 157:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 159:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 161:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 162:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	{
 163:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 164:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2903              		.loc 2 165 0
 2904 0022 7B68     		ldr	r3, [r7, #4]	@ tmp131, ulBitmap
 2905              		.syntax unified
 2906              	@ 165 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2907 0024 B3FA83F3 		clz r3, r3	@ ucReturn, tmp131
 2908              	@ 0 "" 2
 2909              		.thumb
 2910              		.syntax unified
 2911 0028 FB70     		strb	r3, [r7, #3]	@ ucReturn, ucReturn
 2912              	@ FreeRTOS/portable/GCC/ARM_CM3/portmacro.h:166: 		return ucReturn;
 166:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2913              		.loc 2 166 0
 2914 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2	@ D.6050, ucReturn
 2915              	.LBE12:
 2916              	.LBE11:
 2917              	@ FreeRTOS/tasks.c:2160: 		taskSELECT_HIGHEST_PRIORITY_TASK();
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2918              		.loc 1 2160 0
 2919 002c C3F11F03 		rsb	r3, r3, #31	@ _5, _4,
 2920 0030 FB60     		str	r3, [r7, #12]	@ _5, uxTopPriority
ARM GAS  /tmp/ccTV2SzP.s 			page 94


 2921 0032 1A49     		ldr	r1, .L195+12	@ tmp132,
 2922 0034 FA68     		ldr	r2, [r7, #12]	@ tmp133, uxTopPriority
 2923 0036 1346     		mov	r3, r2	@ tmp134, tmp133
 2924 0038 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 2925 003a 1344     		add	r3, r3, r2	@ tmp134, tmp133
 2926 003c 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 2927 003e 0B44     		add	r3, r3, r1	@ tmp136, tmp132
 2928 0040 1B68     		ldr	r3, [r3]	@ _6, pxReadyTasksLists[uxTopPriority_19].uxNumberOfItems
 2929 0042 002B     		cmp	r3, #0	@ _6,
 2930 0044 02D1     		bne	.L191	@,
 2931              	@ FreeRTOS/tasks.c:2160: 		taskSELECT_HIGHEST_PRIORITY_TASK();
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2932              		.loc 1 2160 0 is_stmt 0 discriminator 1
 2933 0046 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2934              	.L192:
 2935 004a FEE7     		b	.L192	@
 2936              	.L191:
 2937              	.LBB13:
 2938              	@ FreeRTOS/tasks.c:2160: 		taskSELECT_HIGHEST_PRIORITY_TASK();
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2939              		.loc 1 2160 0 discriminator 2
 2940 004c FA68     		ldr	r2, [r7, #12]	@ tmp137, uxTopPriority
 2941 004e 1346     		mov	r3, r2	@ tmp138, tmp137
 2942 0050 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 2943 0052 1344     		add	r3, r3, r2	@ tmp138, tmp137
 2944 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 2945 0056 114A     		ldr	r2, .L195+12	@ tmp141,
 2946 0058 1344     		add	r3, r3, r2	@ tmp140, tmp141
 2947 005a BB60     		str	r3, [r7, #8]	@ tmp140, pxConstList
 2948 005c BB68     		ldr	r3, [r7, #8]	@ tmp142, pxConstList
 2949 005e 5B68     		ldr	r3, [r3, #4]	@ _7, pxConstList_20->pxIndex
 2950 0060 5A68     		ldr	r2, [r3, #4]	@ _8, _7->pxNext
 2951 0062 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxConstList
 2952 0064 5A60     		str	r2, [r3, #4]	@ _8, pxConstList_20->pxIndex
 2953 0066 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxConstList
 2954 0068 5A68     		ldr	r2, [r3, #4]	@ _9, pxConstList_20->pxIndex
 2955 006a BB68     		ldr	r3, [r7, #8]	@ tmp145, pxConstList
 2956 006c 0833     		adds	r3, r3, #8	@ _10, tmp145,
 2957 006e 9A42     		cmp	r2, r3	@ _9, _10
 2958 0070 04D1     		bne	.L193	@,
 2959              	@ FreeRTOS/tasks.c:2160: 		taskSELECT_HIGHEST_PRIORITY_TASK();
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2960              		.loc 1 2160 0 discriminator 3
 2961 0072 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxConstList
 2962 0074 5B68     		ldr	r3, [r3, #4]	@ _11, pxConstList_20->pxIndex
 2963 0076 5A68     		ldr	r2, [r3, #4]	@ _12, _11->pxNext
 2964 0078 BB68     		ldr	r3, [r7, #8]	@ tmp147, pxConstList
 2965 007a 5A60     		str	r2, [r3, #4]	@ _12, pxConstList_20->pxIndex
 2966              	.L193:
 2967              	@ FreeRTOS/tasks.c:2160: 		taskSELECT_HIGHEST_PRIORITY_TASK();
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2968              		.loc 1 2160 0 discriminator 5
 2969 007c BB68     		ldr	r3, [r7, #8]	@ tmp148, pxConstList
 2970 007e 5B68     		ldr	r3, [r3, #4]	@ _13, pxConstList_20->pxIndex
 2971 0080 DB68     		ldr	r3, [r3, #12]	@ _14, _13->pvOwner
 2972 0082 074A     		ldr	r2, .L195+16	@ tmp149,
 2973 0084 1360     		str	r3, [r2]	@ _14, pxCurrentTCB
ARM GAS  /tmp/ccTV2SzP.s 			page 95


 2974              	.L194:
 2975              	.LBE13:
 2976              	.LBE10:
 2977              	@ FreeRTOS/tasks.c:2171: }
 2978              		.loc 1 2171 0 is_stmt 1
 2979 0086 00BF     		nop
 2980 0088 1037     		adds	r7, r7, #16	@,,
 2981              		.cfi_def_cfa_offset 8
 2982 008a BD46     		mov	sp, r7	@,
 2983              		.cfi_def_cfa_register 13
 2984              		@ sp needed	@
 2985 008c 80BD     		pop	{r7, pc}	@
 2986              	.L196:
 2987 008e 00BF     		.align	2
 2988              	.L195:
 2989 0090 00000000 		.word	uxSchedulerSuspended
 2990 0094 00000000 		.word	xYieldPending
 2991 0098 00000000 		.word	uxTopReadyPriority
 2992 009c 00000000 		.word	pxReadyTasksLists
 2993 00a0 00000000 		.word	pxCurrentTCB
 2994              		.cfi_endproc
 2995              	.LFE20:
 2996              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2997              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2998              		.align	1
 2999              		.global	vTaskPlaceOnEventList
 3000              		.syntax unified
 3001              		.thumb
 3002              		.thumb_func
 3003              		.fpu softvfp
 3004              		.type	vTaskPlaceOnEventList, %function
 3005              	vTaskPlaceOnEventList:
 3006              	.LFB21:
2172:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2173:FreeRTOS/tasks.c **** 
2174:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickT_t xTicksToWait )
2175:FreeRTOS/tasks.c **** {
 3007              		.loc 1 2175 0
 3008              		.cfi_startproc
 3009              		@ args = 0, pretend = 0, frame = 16
 3010              		@ frame_needed = 1, uses_anonymous_args = 0
 3011 0000 80B5     		push	{r7, lr}	@
 3012              		.cfi_def_cfa_offset 8
 3013              		.cfi_offset 7, -8
 3014              		.cfi_offset 14, -4
 3015 0002 84B0     		sub	sp, sp, #16	@,,
 3016              		.cfi_def_cfa_offset 24
 3017 0004 00AF     		add	r7, sp, #0	@,,
 3018              		.cfi_def_cfa_register 7
 3019 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
 3020 0008 3960     		str	r1, [r7]	@ xTicksToWait, xTicksToWait
 3021              	@ FreeRTOS/tasks.c:2178: 	configASSERT( pxEventList );
2176:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2177:FreeRTOS/tasks.c **** 
2178:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3022              		.loc 1 2178 0
 3023 000a 7B68     		ldr	r3, [r7, #4]	@ tmp124, pxEventList
ARM GAS  /tmp/ccTV2SzP.s 			page 96


 3024 000c 002B     		cmp	r3, #0	@ tmp124,
 3025 000e 02D1     		bne	.L198	@,
 3026              	@ FreeRTOS/tasks.c:2178: 	configASSERT( pxEventList );
 3027              		.loc 1 2178 0 is_stmt 0 discriminator 1
 3028 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3029              	.L199:
 3030 0014 FEE7     		b	.L199	@
 3031              	.L198:
 3032              	@ FreeRTOS/tasks.c:2187: 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2179:FreeRTOS/tasks.c **** 
2180:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2181:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2182:FreeRTOS/tasks.c **** 
2183:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2184:FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2185:FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2186:FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2187:FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3033              		.loc 1 2187 0 is_stmt 1
 3034 0016 1A4B     		ldr	r3, .L204	@ tmp125,
 3035 0018 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.82_1, pxCurrentTCB
 3036 001a 1833     		adds	r3, r3, #24	@ _2, pxCurrentTCB.82_1,
 3037 001c 1946     		mov	r1, r3	@, _2
 3038 001e 7868     		ldr	r0, [r7, #4]	@, pxEventList
 3039 0020 FFF7FEFF 		bl	vListInsert	@
 3040              	@ FreeRTOS/tasks.c:2192: 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0
2188:FreeRTOS/tasks.c **** 
2189:FreeRTOS/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2190:FreeRTOS/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2191:FreeRTOS/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2192:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 3041              		.loc 1 2192 0
 3042 0024 164B     		ldr	r3, .L204	@ tmp126,
 3043 0026 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.83_3, pxCurrentTCB
 3044 0028 0433     		adds	r3, r3, #4	@ _4, pxCurrentTCB.83_3,
 3045 002a 1846     		mov	r0, r3	@, _4
 3046 002c FFF7FEFF 		bl	uxListRemove	@
 3047 0030 0346     		mov	r3, r0	@ _5,
 3048 0032 002B     		cmp	r3, #0	@ _5,
 3049 0034 0BD1     		bne	.L200	@,
 3050              	@ FreeRTOS/tasks.c:2196: 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority )
2193:FreeRTOS/tasks.c **** 	{
2194:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2195:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2196:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3051              		.loc 1 2196 0
 3052 0036 124B     		ldr	r3, .L204	@ tmp127,
 3053 0038 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.84_6, pxCurrentTCB
 3054 003a DB6A     		ldr	r3, [r3, #44]	@ _7, pxCurrentTCB.84_6->uxPriority
 3055 003c 0122     		movs	r2, #1	@ tmp128,
 3056 003e 02FA03F3 		lsl	r3, r2, r3	@ _8, tmp128, _7
 3057 0042 DA43     		mvns	r2, r3	@ _20, _8
 3058 0044 0F4B     		ldr	r3, .L204+4	@ tmp129,
 3059 0046 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.85_9, uxTopReadyPriority
 3060 0048 1340     		ands	r3, r3, r2	@, _10, uxTopReadyPriority.85_9, _20
 3061 004a 0E4A     		ldr	r2, .L204+4	@ tmp130,
 3062 004c 1360     		str	r3, [r2]	@ _10, uxTopReadyPriority
ARM GAS  /tmp/ccTV2SzP.s 			page 97


 3063              	.L200:
 3064              	@ FreeRTOS/tasks.c:2205: 		if( xTicksToWait == portMAX_DELAY )
2197:FreeRTOS/tasks.c **** 	}
2198:FreeRTOS/tasks.c **** 	else
2199:FreeRTOS/tasks.c **** 	{
2200:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2201:FreeRTOS/tasks.c **** 	}
2202:FreeRTOS/tasks.c **** 
2203:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2204:FreeRTOS/tasks.c **** 	{
2205:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 3065              		.loc 1 2205 0
 3066 004e 3B68     		ldr	r3, [r7]	@ tmp131, xTicksToWait
 3067 0050 B3F1FF3F 		cmp	r3, #-1	@ tmp131,
 3068 0054 07D1     		bne	.L201	@,
 3069              	@ FreeRTOS/tasks.c:2210: 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem 
2206:FreeRTOS/tasks.c **** 		{
2207:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2208:FreeRTOS/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2209:FreeRTOS/tasks.c **** 			block indefinitely. */
2210:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3070              		.loc 1 2210 0
 3071 0056 0A4B     		ldr	r3, .L204	@ tmp132,
 3072 0058 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.86_11, pxCurrentTCB
 3073 005a 0433     		adds	r3, r3, #4	@ _12, pxCurrentTCB.86_11,
 3074 005c 1946     		mov	r1, r3	@, _12
 3075 005e 0A48     		ldr	r0, .L204+8	@,
 3076 0060 FFF7FEFF 		bl	vListInsertEnd	@
 3077              	@ FreeRTOS/tasks.c:2230: }
2211:FreeRTOS/tasks.c **** 		}
2212:FreeRTOS/tasks.c **** 		else
2213:FreeRTOS/tasks.c **** 		{
2214:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2215:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2216:FreeRTOS/tasks.c **** 			scheduler will handle it. */
2217:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2218:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2219:FreeRTOS/tasks.c **** 		}
2220:FreeRTOS/tasks.c **** 	}
2221:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2222:FreeRTOS/tasks.c **** 	{
2223:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2224:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2225:FreeRTOS/tasks.c **** 			will handle it. */
2226:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2227:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2228:FreeRTOS/tasks.c **** 	}
2229:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2230:FreeRTOS/tasks.c **** }
 3078              		.loc 1 2230 0
 3079 0064 07E0     		b	.L203	@
 3080              	.L201:
 3081              	@ FreeRTOS/tasks.c:2217: 			xTimeToWake = xTickCount + xTicksToWait;
2217:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3082              		.loc 1 2217 0
 3083 0066 094B     		ldr	r3, .L204+12	@ tmp133,
 3084 0068 1B68     		ldr	r3, [r3]	@ xTickCount.87_13, xTickCount
ARM GAS  /tmp/ccTV2SzP.s 			page 98


 3085 006a 3A68     		ldr	r2, [r7]	@ tmp135, xTicksToWait
 3086 006c 1344     		add	r3, r3, r2	@ tmp134, tmp135
 3087 006e FB60     		str	r3, [r7, #12]	@ tmp134, xTimeToWake
 3088              	@ FreeRTOS/tasks.c:2218: 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2218:FreeRTOS/tasks.c **** 		}
 3089              		.loc 1 2218 0
 3090 0070 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 3091 0072 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 3092              	.L203:
 3093              	@ FreeRTOS/tasks.c:2230: }
 3094              		.loc 1 2230 0
 3095 0076 00BF     		nop
 3096 0078 1037     		adds	r7, r7, #16	@,,
 3097              		.cfi_def_cfa_offset 8
 3098 007a BD46     		mov	sp, r7	@,
 3099              		.cfi_def_cfa_register 13
 3100              		@ sp needed	@
 3101 007c 80BD     		pop	{r7, pc}	@
 3102              	.L205:
 3103 007e 00BF     		.align	2
 3104              	.L204:
 3105 0080 00000000 		.word	pxCurrentTCB
 3106 0084 00000000 		.word	uxTopReadyPriority
 3107 0088 00000000 		.word	xSuspendedTaskList
 3108 008c 00000000 		.word	xTickCount
 3109              		.cfi_endproc
 3110              	.LFE21:
 3111              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 3112              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3113              		.align	1
 3114              		.global	vTaskPlaceOnUnorderedEventList
 3115              		.syntax unified
 3116              		.thumb
 3117              		.thumb_func
 3118              		.fpu softvfp
 3119              		.type	vTaskPlaceOnUnorderedEventList, %function
 3120              	vTaskPlaceOnUnorderedEventList:
 3121              	.LFB22:
2231:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2232:FreeRTOS/tasks.c **** 
2233:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickT_t xItemValue, const TickT_t 
2234:FreeRTOS/tasks.c **** {
 3122              		.loc 1 2234 0
 3123              		.cfi_startproc
 3124              		@ args = 0, pretend = 0, frame = 24
 3125              		@ frame_needed = 1, uses_anonymous_args = 0
 3126 0000 80B5     		push	{r7, lr}	@
 3127              		.cfi_def_cfa_offset 8
 3128              		.cfi_offset 7, -8
 3129              		.cfi_offset 14, -4
 3130 0002 86B0     		sub	sp, sp, #24	@,,
 3131              		.cfi_def_cfa_offset 32
 3132 0004 00AF     		add	r7, sp, #0	@,,
 3133              		.cfi_def_cfa_register 7
 3134 0006 F860     		str	r0, [r7, #12]	@ pxEventList, pxEventList
 3135 0008 B960     		str	r1, [r7, #8]	@ xItemValue, xItemValue
 3136 000a 7A60     		str	r2, [r7, #4]	@ xTicksToWait, xTicksToWait
ARM GAS  /tmp/ccTV2SzP.s 			page 99


 3137              	@ FreeRTOS/tasks.c:2237: 	configASSERT( pxEventList );
2235:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2236:FreeRTOS/tasks.c **** 
2237:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3138              		.loc 1 2237 0
 3139 000c FB68     		ldr	r3, [r7, #12]	@ tmp127, pxEventList
 3140 000e 002B     		cmp	r3, #0	@ tmp127,
 3141 0010 02D1     		bne	.L207	@,
 3142              	@ FreeRTOS/tasks.c:2237: 	configASSERT( pxEventList );
 3143              		.loc 1 2237 0 is_stmt 0 discriminator 1
 3144 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3145              	.L208:
 3146 0016 FEE7     		b	.L208	@
 3147              	.L207:
 3148              	@ FreeRTOS/tasks.c:2241: 	configASSERT( uxSchedulerSuspended != 0 );
2238:FreeRTOS/tasks.c **** 
2239:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2240:FreeRTOS/tasks.c **** 	the event groups implementation. */
2241:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 3149              		.loc 1 2241 0 is_stmt 1
 3150 0018 204B     		ldr	r3, .L215	@ tmp128,
 3151 001a 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.88_1, uxSchedulerSuspended
 3152 001c 002B     		cmp	r3, #0	@ uxSchedulerSuspended.88_1,
 3153 001e 02D1     		bne	.L209	@,
 3154              	@ FreeRTOS/tasks.c:2241: 	configASSERT( uxSchedulerSuspended != 0 );
 3155              		.loc 1 2241 0 is_stmt 0 discriminator 1
 3156 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3157              	.L210:
 3158              	@ FreeRTOS/tasks.c:2241: 	configASSERT( uxSchedulerSuspended != 0 );
 3159              		.loc 1 2241 0 discriminator 2
 3160 0024 FEE7     		b	.L210	@
 3161              	.L209:
 3162              	@ FreeRTOS/tasks.c:2246: 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | 
2242:FreeRTOS/tasks.c **** 
2243:FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2244:FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2245:FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2246:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 3163              		.loc 1 2246 0 is_stmt 1
 3164 0026 1E4B     		ldr	r3, .L215+4	@ tmp129,
 3165 0028 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.89_2, pxCurrentTCB
 3166 002a BA68     		ldr	r2, [r7, #8]	@ tmp130, xItemValue
 3167 002c 42F00042 		orr	r2, r2, #-2147483648	@ _3, tmp130,
 3168 0030 9A61     		str	r2, [r3, #24]	@ _3, pxCurrentTCB.89_2->xEventListItem.xItemValue
 3169              	@ FreeRTOS/tasks.c:2253: 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2247:FreeRTOS/tasks.c **** 
2248:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2249:FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2250:FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2251:FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2252:FreeRTOS/tasks.c **** 	the task level). */
2253:FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 3170              		.loc 1 2253 0
 3171 0032 1B4B     		ldr	r3, .L215+4	@ tmp131,
 3172 0034 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.90_4, pxCurrentTCB
 3173 0036 1833     		adds	r3, r3, #24	@ _5, pxCurrentTCB.90_4,
 3174 0038 1946     		mov	r1, r3	@, _5
ARM GAS  /tmp/ccTV2SzP.s 			page 100


 3175 003a F868     		ldr	r0, [r7, #12]	@, pxEventList
 3176 003c FFF7FEFF 		bl	vListInsertEnd	@
 3177              	@ FreeRTOS/tasks.c:2258: 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0
2254:FreeRTOS/tasks.c **** 
2255:FreeRTOS/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2256:FreeRTOS/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2257:FreeRTOS/tasks.c **** 	scheduler is locked. */
2258:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 3178              		.loc 1 2258 0
 3179 0040 174B     		ldr	r3, .L215+4	@ tmp132,
 3180 0042 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.91_6, pxCurrentTCB
 3181 0044 0433     		adds	r3, r3, #4	@ _7, pxCurrentTCB.91_6,
 3182 0046 1846     		mov	r0, r3	@, _7
 3183 0048 FFF7FEFF 		bl	uxListRemove	@
 3184 004c 0346     		mov	r3, r0	@ _8,
 3185 004e 002B     		cmp	r3, #0	@ _8,
 3186 0050 0BD1     		bne	.L211	@,
 3187              	@ FreeRTOS/tasks.c:2262: 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority )
2259:FreeRTOS/tasks.c **** 	{
2260:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2261:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2262:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 3188              		.loc 1 2262 0
 3189 0052 134B     		ldr	r3, .L215+4	@ tmp133,
 3190 0054 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.92_9, pxCurrentTCB
 3191 0056 DB6A     		ldr	r3, [r3, #44]	@ _10, pxCurrentTCB.92_9->uxPriority
 3192 0058 0122     		movs	r2, #1	@ tmp134,
 3193 005a 02FA03F3 		lsl	r3, r2, r3	@ _11, tmp134, _10
 3194 005e DA43     		mvns	r2, r3	@ _25, _11
 3195 0060 104B     		ldr	r3, .L215+8	@ tmp135,
 3196 0062 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.93_12, uxTopReadyPriority
 3197 0064 1340     		ands	r3, r3, r2	@, _13, uxTopReadyPriority.93_12, _25
 3198 0066 0F4A     		ldr	r2, .L215+8	@ tmp136,
 3199 0068 1360     		str	r3, [r2]	@ _13, uxTopReadyPriority
 3200              	.L211:
 3201              	@ FreeRTOS/tasks.c:2271: 		if( xTicksToWait == portMAX_DELAY )
2263:FreeRTOS/tasks.c **** 	}
2264:FreeRTOS/tasks.c **** 	else
2265:FreeRTOS/tasks.c **** 	{
2266:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2267:FreeRTOS/tasks.c **** 	}
2268:FreeRTOS/tasks.c **** 
2269:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2270:FreeRTOS/tasks.c **** 	{
2271:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 3202              		.loc 1 2271 0
 3203 006a 7B68     		ldr	r3, [r7, #4]	@ tmp137, xTicksToWait
 3204 006c B3F1FF3F 		cmp	r3, #-1	@ tmp137,
 3205 0070 07D1     		bne	.L212	@,
 3206              	@ FreeRTOS/tasks.c:2276: 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem 
2272:FreeRTOS/tasks.c **** 		{
2273:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2274:FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2275:FreeRTOS/tasks.c **** 			indefinitely. */
2276:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3207              		.loc 1 2276 0
 3208 0072 0B4B     		ldr	r3, .L215+4	@ tmp138,
ARM GAS  /tmp/ccTV2SzP.s 			page 101


 3209 0074 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.94_14, pxCurrentTCB
 3210 0076 0433     		adds	r3, r3, #4	@ _15, pxCurrentTCB.94_14,
 3211 0078 1946     		mov	r1, r3	@, _15
 3212 007a 0B48     		ldr	r0, .L215+12	@,
 3213 007c FFF7FEFF 		bl	vListInsertEnd	@
 3214              	@ FreeRTOS/tasks.c:2296: }
2277:FreeRTOS/tasks.c **** 		}
2278:FreeRTOS/tasks.c **** 		else
2279:FreeRTOS/tasks.c **** 		{
2280:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2281:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2282:FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
2283:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2284:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2285:FreeRTOS/tasks.c **** 		}
2286:FreeRTOS/tasks.c **** 	}
2287:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2288:FreeRTOS/tasks.c **** 	{
2289:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2290:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2291:FreeRTOS/tasks.c **** 			will manage it correctly. */
2292:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2293:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2294:FreeRTOS/tasks.c **** 	}
2295:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2296:FreeRTOS/tasks.c **** }
 3215              		.loc 1 2296 0
 3216 0080 07E0     		b	.L214	@
 3217              	.L212:
 3218              	@ FreeRTOS/tasks.c:2283: 			xTimeToWake = xTickCount + xTicksToWait;
2283:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 3219              		.loc 1 2283 0
 3220 0082 0A4B     		ldr	r3, .L215+16	@ tmp139,
 3221 0084 1B68     		ldr	r3, [r3]	@ xTickCount.95_16, xTickCount
 3222 0086 7A68     		ldr	r2, [r7, #4]	@ tmp141, xTicksToWait
 3223 0088 1344     		add	r3, r3, r2	@ tmp140, tmp141
 3224 008a 7B61     		str	r3, [r7, #20]	@ tmp140, xTimeToWake
 3225              	@ FreeRTOS/tasks.c:2284: 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2284:FreeRTOS/tasks.c **** 		}
 3226              		.loc 1 2284 0
 3227 008c 7869     		ldr	r0, [r7, #20]	@, xTimeToWake
 3228 008e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 3229              	.L214:
 3230              	@ FreeRTOS/tasks.c:2296: }
 3231              		.loc 1 2296 0
 3232 0092 00BF     		nop
 3233 0094 1837     		adds	r7, r7, #24	@,,
 3234              		.cfi_def_cfa_offset 8
 3235 0096 BD46     		mov	sp, r7	@,
 3236              		.cfi_def_cfa_register 13
 3237              		@ sp needed	@
 3238 0098 80BD     		pop	{r7, pc}	@
 3239              	.L216:
 3240 009a 00BF     		.align	2
 3241              	.L215:
 3242 009c 00000000 		.word	uxSchedulerSuspended
 3243 00a0 00000000 		.word	pxCurrentTCB
ARM GAS  /tmp/ccTV2SzP.s 			page 102


 3244 00a4 00000000 		.word	uxTopReadyPriority
 3245 00a8 00000000 		.word	xSuspendedTaskList
 3246 00ac 00000000 		.word	xTickCount
 3247              		.cfi_endproc
 3248              	.LFE22:
 3249              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3250              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3251              		.align	1
 3252              		.global	xTaskRemoveFromEventList
 3253              		.syntax unified
 3254              		.thumb
 3255              		.thumb_func
 3256              		.fpu softvfp
 3257              		.type	xTaskRemoveFromEventList, %function
 3258              	xTaskRemoveFromEventList:
 3259              	.LFB23:
2297:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2298:FreeRTOS/tasks.c **** 
2299:FreeRTOS/tasks.c **** #if configUSE_TIMERS == 1
2300:FreeRTOS/tasks.c **** 
2301:FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickT_t xTicksToWait )
2302:FreeRTOS/tasks.c **** 	{
2303:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
2304:FreeRTOS/tasks.c **** 
2305:FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2306:FreeRTOS/tasks.c **** 
2307:FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2308:FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2309:FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2310:FreeRTOS/tasks.c **** 		it should be called from a critical section. */
2311:FreeRTOS/tasks.c **** 
2312:FreeRTOS/tasks.c **** 
2313:FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2314:FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2315:FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2316:FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2317:FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2318:FreeRTOS/tasks.c **** 
2319:FreeRTOS/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2320:FreeRTOS/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2321:FreeRTOS/tasks.c **** 		function is called form a critical section. */
2322:FreeRTOS/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
2323:FreeRTOS/tasks.c **** 		{
2324:FreeRTOS/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2325:FreeRTOS/tasks.c **** 			check, and the port reset macro can be called directly. */
2326:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2327:FreeRTOS/tasks.c **** 		}
2328:FreeRTOS/tasks.c **** 		else
2329:FreeRTOS/tasks.c **** 		{
2330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2331:FreeRTOS/tasks.c **** 		}
2332:FreeRTOS/tasks.c **** 
2333:FreeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
2334:FreeRTOS/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
2335:FreeRTOS/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
2336:FreeRTOS/tasks.c **** 
2337:FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL();
ARM GAS  /tmp/ccTV2SzP.s 			page 103


2338:FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
2339:FreeRTOS/tasks.c **** 	}
2340:FreeRTOS/tasks.c **** 
2341:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2342:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2343:FreeRTOS/tasks.c **** 
2344:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2345:FreeRTOS/tasks.c **** {
 3260              		.loc 1 2345 0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 16
 3263              		@ frame_needed = 1, uses_anonymous_args = 0
 3264 0000 80B5     		push	{r7, lr}	@
 3265              		.cfi_def_cfa_offset 8
 3266              		.cfi_offset 7, -8
 3267              		.cfi_offset 14, -4
 3268 0002 84B0     		sub	sp, sp, #16	@,,
 3269              		.cfi_def_cfa_offset 24
 3270 0004 00AF     		add	r7, sp, #0	@,,
 3271              		.cfi_def_cfa_register 7
 3272 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
 3273              	@ FreeRTOS/tasks.c:2362: 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2346:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2347:FreeRTOS/tasks.c **** BaseT_t xReturn;
2348:FreeRTOS/tasks.c **** 
2349:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2350:FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2351:FreeRTOS/tasks.c **** 
2352:FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2353:FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2354:FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2355:FreeRTOS/tasks.c **** 
2356:FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2357:FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2358:FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2359:FreeRTOS/tasks.c **** 
2360:FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2361:FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2362:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 3274              		.loc 1 2362 0
 3275 0008 7B68     		ldr	r3, [r7, #4]	@ tmp127, pxEventList
 3276 000a DB68     		ldr	r3, [r3, #12]	@ _1, pxEventList_20(D)->xListEnd.pxNext
 3277 000c DB68     		ldr	r3, [r3, #12]	@ tmp128, _1->pvOwner
 3278 000e BB60     		str	r3, [r7, #8]	@ tmp128, pxUnblockedTCB
 3279              	@ FreeRTOS/tasks.c:2363: 	configASSERT( pxUnblockedTCB );
2363:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3280              		.loc 1 2363 0
 3281 0010 BB68     		ldr	r3, [r7, #8]	@ tmp129, pxUnblockedTCB
 3282 0012 002B     		cmp	r3, #0	@ tmp129,
 3283 0014 02D1     		bne	.L218	@,
 3284              	@ FreeRTOS/tasks.c:2363: 	configASSERT( pxUnblockedTCB );
 3285              		.loc 1 2363 0 is_stmt 0 discriminator 1
 3286 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3287              	.L219:
 3288 001a FEE7     		b	.L219	@
 3289              	.L218:
 3290              	@ FreeRTOS/tasks.c:2364: 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
ARM GAS  /tmp/ccTV2SzP.s 			page 104


2364:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3291              		.loc 1 2364 0 is_stmt 1
 3292 001c BB68     		ldr	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
 3293 001e 1833     		adds	r3, r3, #24	@ _2, tmp130,
 3294 0020 1846     		mov	r0, r3	@, _2
 3295 0022 FFF7FEFF 		bl	uxListRemove	@
 3296              	@ FreeRTOS/tasks.c:2366: 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
2365:FreeRTOS/tasks.c **** 
2366:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 3297              		.loc 1 2366 0
 3298 0026 1D4B     		ldr	r3, .L225	@ tmp131,
 3299 0028 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.96_3, uxSchedulerSuspended
 3300 002a 002B     		cmp	r3, #0	@ uxSchedulerSuspended.96_3,
 3301 002c 1CD1     		bne	.L220	@,
 3302              	@ FreeRTOS/tasks.c:2368: 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2367:FreeRTOS/tasks.c **** 	{
2368:FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3303              		.loc 1 2368 0
 3304 002e BB68     		ldr	r3, [r7, #8]	@ tmp132, pxUnblockedTCB
 3305 0030 0433     		adds	r3, r3, #4	@ _4, tmp132,
 3306 0032 1846     		mov	r0, r3	@, _4
 3307 0034 FFF7FEFF 		bl	uxListRemove	@
 3308              	@ FreeRTOS/tasks.c:2369: 		prvAddTaskToReadyList( pxUnblockedTCB );
2369:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3309              		.loc 1 2369 0
 3310 0038 BB68     		ldr	r3, [r7, #8]	@ tmp133, pxUnblockedTCB
 3311 003a DB6A     		ldr	r3, [r3, #44]	@ _5, pxUnblockedTCB_21->uxPriority
 3312 003c 0122     		movs	r2, #1	@ tmp134,
 3313 003e 9A40     		lsls	r2, r2, r3	@ _6, tmp134, _5
 3314 0040 174B     		ldr	r3, .L225+4	@ tmp135,
 3315 0042 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.97_7, uxTopReadyPriority
 3316 0044 1343     		orrs	r3, r3, r2	@, _8, uxTopReadyPriority.97_7, _6
 3317 0046 164A     		ldr	r2, .L225+4	@ tmp136,
 3318 0048 1360     		str	r3, [r2]	@ _8, uxTopReadyPriority
 3319 004a BB68     		ldr	r3, [r7, #8]	@ tmp137, pxUnblockedTCB
 3320 004c DA6A     		ldr	r2, [r3, #44]	@ _9, pxUnblockedTCB_21->uxPriority
 3321 004e 1346     		mov	r3, r2	@ tmp138, _9
 3322 0050 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 3323 0052 1344     		add	r3, r3, r2	@ tmp138, _9
 3324 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 3325 0056 134A     		ldr	r2, .L225+8	@ tmp140,
 3326 0058 1A44     		add	r2, r2, r3	@ _10, tmp138
 3327 005a BB68     		ldr	r3, [r7, #8]	@ tmp141, pxUnblockedTCB
 3328 005c 0433     		adds	r3, r3, #4	@ _11, tmp141,
 3329 005e 1946     		mov	r1, r3	@, _11
 3330 0060 1046     		mov	r0, r2	@, _10
 3331 0062 FFF7FEFF 		bl	vListInsertEnd	@
 3332 0066 05E0     		b	.L221	@
 3333              	.L220:
 3334              	@ FreeRTOS/tasks.c:2375: 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListIte
2370:FreeRTOS/tasks.c **** 	}
2371:FreeRTOS/tasks.c **** 	else
2372:FreeRTOS/tasks.c **** 	{
2373:FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2374:FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2375:FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 3335              		.loc 1 2375 0
ARM GAS  /tmp/ccTV2SzP.s 			page 105


 3336 0068 BB68     		ldr	r3, [r7, #8]	@ tmp142, pxUnblockedTCB
 3337 006a 1833     		adds	r3, r3, #24	@ _12, tmp142,
 3338 006c 1946     		mov	r1, r3	@, _12
 3339 006e 0E48     		ldr	r0, .L225+12	@,
 3340 0070 FFF7FEFF 		bl	vListInsertEnd	@
 3341              	.L221:
 3342              	@ FreeRTOS/tasks.c:2378: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2376:FreeRTOS/tasks.c **** 	}
2377:FreeRTOS/tasks.c **** 
2378:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3343              		.loc 1 2378 0
 3344 0074 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxUnblockedTCB
 3345 0076 DA6A     		ldr	r2, [r3, #44]	@ _13, pxUnblockedTCB_21->uxPriority
 3346 0078 0C4B     		ldr	r3, .L225+16	@ tmp144,
 3347 007a 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.98_14, pxCurrentTCB
 3348 007c DB6A     		ldr	r3, [r3, #44]	@ _15, pxCurrentTCB.98_14->uxPriority
 3349 007e 9A42     		cmp	r2, r3	@ _13, _15
 3350 0080 05D9     		bls	.L222	@,
 3351              	@ FreeRTOS/tasks.c:2383: 		xReturn = pdTRUE;
2379:FreeRTOS/tasks.c **** 	{
2380:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2381:FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2382:FreeRTOS/tasks.c **** 		it should force a context switch now. */
2383:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 3352              		.loc 1 2383 0
 3353 0082 0123     		movs	r3, #1	@ tmp145,
 3354 0084 FB60     		str	r3, [r7, #12]	@ tmp145, xReturn
 3355              	@ FreeRTOS/tasks.c:2387: 		xYieldPending = pdTRUE;
2384:FreeRTOS/tasks.c **** 
2385:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2386:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2387:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3356              		.loc 1 2387 0
 3357 0086 0A4B     		ldr	r3, .L225+20	@ tmp146,
 3358 0088 0122     		movs	r2, #1	@ tmp147,
 3359 008a 1A60     		str	r2, [r3]	@ tmp147, xYieldPending
 3360 008c 01E0     		b	.L223	@
 3361              	.L222:
 3362              	@ FreeRTOS/tasks.c:2391: 		xReturn = pdFALSE;
2388:FreeRTOS/tasks.c **** 	}
2389:FreeRTOS/tasks.c **** 	else
2390:FreeRTOS/tasks.c **** 	{
2391:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 3363              		.loc 1 2391 0
 3364 008e 0023     		movs	r3, #0	@ tmp148,
 3365 0090 FB60     		str	r3, [r7, #12]	@ tmp148, xReturn
 3366              	.L223:
 3367              	@ FreeRTOS/tasks.c:2394: 	return xReturn;
2392:FreeRTOS/tasks.c **** 	}
2393:FreeRTOS/tasks.c **** 
2394:FreeRTOS/tasks.c **** 	return xReturn;
 3368              		.loc 1 2394 0
 3369 0092 FB68     		ldr	r3, [r7, #12]	@ _30, xReturn
 3370              	@ FreeRTOS/tasks.c:2395: }
2395:FreeRTOS/tasks.c **** }
 3371              		.loc 1 2395 0
 3372 0094 1846     		mov	r0, r3	@, <retval>
ARM GAS  /tmp/ccTV2SzP.s 			page 106


 3373 0096 1037     		adds	r7, r7, #16	@,,
 3374              		.cfi_def_cfa_offset 8
 3375 0098 BD46     		mov	sp, r7	@,
 3376              		.cfi_def_cfa_register 13
 3377              		@ sp needed	@
 3378 009a 80BD     		pop	{r7, pc}	@
 3379              	.L226:
 3380              		.align	2
 3381              	.L225:
 3382 009c 00000000 		.word	uxSchedulerSuspended
 3383 00a0 00000000 		.word	uxTopReadyPriority
 3384 00a4 00000000 		.word	pxReadyTasksLists
 3385 00a8 00000000 		.word	xPendingReadyList
 3386 00ac 00000000 		.word	pxCurrentTCB
 3387 00b0 00000000 		.word	xYieldPending
 3388              		.cfi_endproc
 3389              	.LFE23:
 3390              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3391              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3392              		.align	1
 3393              		.global	xTaskRemoveFromUnorderedEventList
 3394              		.syntax unified
 3395              		.thumb
 3396              		.thumb_func
 3397              		.fpu softvfp
 3398              		.type	xTaskRemoveFromUnorderedEventList, %function
 3399              	xTaskRemoveFromUnorderedEventList:
 3400              	.LFB24:
2396:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2397:FreeRTOS/tasks.c **** 
2398:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickT_t xItemValue )
2399:FreeRTOS/tasks.c **** {
 3401              		.loc 1 2399 0
 3402              		.cfi_startproc
 3403              		@ args = 0, pretend = 0, frame = 16
 3404              		@ frame_needed = 1, uses_anonymous_args = 0
 3405 0000 80B5     		push	{r7, lr}	@
 3406              		.cfi_def_cfa_offset 8
 3407              		.cfi_offset 7, -8
 3408              		.cfi_offset 14, -4
 3409 0002 84B0     		sub	sp, sp, #16	@,,
 3410              		.cfi_def_cfa_offset 24
 3411 0004 00AF     		add	r7, sp, #0	@,,
 3412              		.cfi_def_cfa_register 7
 3413 0006 7860     		str	r0, [r7, #4]	@ pxEventListItem, pxEventListItem
 3414 0008 3960     		str	r1, [r7]	@ xItemValue, xItemValue
 3415              	@ FreeRTOS/tasks.c:2405: 	configASSERT( uxSchedulerSuspended != pdFALSE );
2400:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2401:FreeRTOS/tasks.c **** BaseT_t xReturn;
2402:FreeRTOS/tasks.c **** 
2403:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2404:FreeRTOS/tasks.c **** 	the event flags implementation. */
2405:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3416              		.loc 1 2405 0
 3417 000a 244B     		ldr	r3, .L235	@ tmp125,
 3418 000c 1B68     		ldr	r3, [r3]	@ uxSchedulerSuspended.99_1, uxSchedulerSuspended
 3419 000e 002B     		cmp	r3, #0	@ uxSchedulerSuspended.99_1,
ARM GAS  /tmp/ccTV2SzP.s 			page 107


 3420 0010 02D1     		bne	.L228	@,
 3421              	@ FreeRTOS/tasks.c:2405: 	configASSERT( uxSchedulerSuspended != pdFALSE );
 3422              		.loc 1 2405 0 is_stmt 0 discriminator 1
 3423 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3424              	.L229:
 3425 0016 FEE7     		b	.L229	@
 3426              	.L228:
 3427              	@ FreeRTOS/tasks.c:2408: 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITE
2406:FreeRTOS/tasks.c **** 
2407:FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2408:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3428              		.loc 1 2408 0 is_stmt 1
 3429 0018 3B68     		ldr	r3, [r7]	@ tmp126, xItemValue
 3430 001a 43F00042 		orr	r2, r3, #-2147483648	@ _2, tmp126,
 3431 001e 7B68     		ldr	r3, [r7, #4]	@ tmp127, pxEventListItem
 3432 0020 1A60     		str	r2, [r3]	@ _2, pxEventListItem_18(D)->xItemValue
 3433              	@ FreeRTOS/tasks.c:2412: 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2409:FreeRTOS/tasks.c **** 
2410:FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2411:FreeRTOS/tasks.c **** 	event flags. */
2412:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3434              		.loc 1 2412 0
 3435 0022 7B68     		ldr	r3, [r7, #4]	@ tmp128, pxEventListItem
 3436 0024 DB68     		ldr	r3, [r3, #12]	@ tmp129, pxEventListItem_18(D)->pvOwner
 3437 0026 BB60     		str	r3, [r7, #8]	@ tmp129, pxUnblockedTCB
 3438              	@ FreeRTOS/tasks.c:2413: 	configASSERT( pxUnblockedTCB );
2413:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3439              		.loc 1 2413 0
 3440 0028 BB68     		ldr	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
 3441 002a 002B     		cmp	r3, #0	@ tmp130,
 3442 002c 02D1     		bne	.L230	@,
 3443              	@ FreeRTOS/tasks.c:2413: 	configASSERT( pxUnblockedTCB );
 3444              		.loc 1 2413 0 is_stmt 0 discriminator 1
 3445 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3446              	.L231:
 3447              	@ FreeRTOS/tasks.c:2413: 	configASSERT( pxUnblockedTCB );
 3448              		.loc 1 2413 0 discriminator 2
 3449 0032 FEE7     		b	.L231	@
 3450              	.L230:
 3451              	@ FreeRTOS/tasks.c:2414: 	( void ) uxListRemove( pxEventListItem );
2414:FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3452              		.loc 1 2414 0 is_stmt 1
 3453 0034 7868     		ldr	r0, [r7, #4]	@, pxEventListItem
 3454 0036 FFF7FEFF 		bl	uxListRemove	@
 3455              	@ FreeRTOS/tasks.c:2419: 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
2415:FreeRTOS/tasks.c **** 
2416:FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2417:FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2418:FreeRTOS/tasks.c **** 	lists. */
2419:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3456              		.loc 1 2419 0
 3457 003a BB68     		ldr	r3, [r7, #8]	@ tmp131, pxUnblockedTCB
 3458 003c 0433     		adds	r3, r3, #4	@ _3, tmp131,
 3459 003e 1846     		mov	r0, r3	@, _3
 3460 0040 FFF7FEFF 		bl	uxListRemove	@
 3461              	@ FreeRTOS/tasks.c:2420: 	prvAddTaskToReadyList( pxUnblockedTCB );
2420:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
ARM GAS  /tmp/ccTV2SzP.s 			page 108


 3462              		.loc 1 2420 0
 3463 0044 BB68     		ldr	r3, [r7, #8]	@ tmp132, pxUnblockedTCB
 3464 0046 DB6A     		ldr	r3, [r3, #44]	@ _4, pxUnblockedTCB_20->uxPriority
 3465 0048 0122     		movs	r2, #1	@ tmp133,
 3466 004a 9A40     		lsls	r2, r2, r3	@ _5, tmp133, _4
 3467 004c 144B     		ldr	r3, .L235+4	@ tmp134,
 3468 004e 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.100_6, uxTopReadyPriority
 3469 0050 1343     		orrs	r3, r3, r2	@, _7, uxTopReadyPriority.100_6, _5
 3470 0052 134A     		ldr	r2, .L235+4	@ tmp135,
 3471 0054 1360     		str	r3, [r2]	@ _7, uxTopReadyPriority
 3472 0056 BB68     		ldr	r3, [r7, #8]	@ tmp136, pxUnblockedTCB
 3473 0058 DA6A     		ldr	r2, [r3, #44]	@ _8, pxUnblockedTCB_20->uxPriority
 3474 005a 1346     		mov	r3, r2	@ tmp137, _8
 3475 005c 9B00     		lsls	r3, r3, #2	@ tmp137, tmp137,
 3476 005e 1344     		add	r3, r3, r2	@ tmp137, _8
 3477 0060 9B00     		lsls	r3, r3, #2	@ tmp138, tmp137,
 3478 0062 104A     		ldr	r2, .L235+8	@ tmp139,
 3479 0064 1A44     		add	r2, r2, r3	@ _9, tmp137
 3480 0066 BB68     		ldr	r3, [r7, #8]	@ tmp140, pxUnblockedTCB
 3481 0068 0433     		adds	r3, r3, #4	@ _10, tmp140,
 3482 006a 1946     		mov	r1, r3	@, _10
 3483 006c 1046     		mov	r0, r2	@, _9
 3484 006e FFF7FEFF 		bl	vListInsertEnd	@
 3485              	@ FreeRTOS/tasks.c:2422: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2421:FreeRTOS/tasks.c **** 
2422:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3486              		.loc 1 2422 0
 3487 0072 BB68     		ldr	r3, [r7, #8]	@ tmp141, pxUnblockedTCB
 3488 0074 DA6A     		ldr	r2, [r3, #44]	@ _11, pxUnblockedTCB_20->uxPriority
 3489 0076 0C4B     		ldr	r3, .L235+12	@ tmp142,
 3490 0078 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.101_12, pxCurrentTCB
 3491 007a DB6A     		ldr	r3, [r3, #44]	@ _13, pxCurrentTCB.101_12->uxPriority
 3492 007c 9A42     		cmp	r2, r3	@ _11, _13
 3493 007e 05D9     		bls	.L232	@,
 3494              	@ FreeRTOS/tasks.c:2428: 		xReturn = pdTRUE;
2423:FreeRTOS/tasks.c **** 	{
2424:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2425:FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2426:FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2427:FreeRTOS/tasks.c **** 		switch now. */
2428:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 3495              		.loc 1 2428 0
 3496 0080 0123     		movs	r3, #1	@ tmp143,
 3497 0082 FB60     		str	r3, [r7, #12]	@ tmp143, xReturn
 3498              	@ FreeRTOS/tasks.c:2432: 		xYieldPending = pdTRUE;
2429:FreeRTOS/tasks.c **** 
2430:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2431:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2432:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3499              		.loc 1 2432 0
 3500 0084 094B     		ldr	r3, .L235+16	@ tmp144,
 3501 0086 0122     		movs	r2, #1	@ tmp145,
 3502 0088 1A60     		str	r2, [r3]	@ tmp145, xYieldPending
 3503 008a 01E0     		b	.L233	@
 3504              	.L232:
 3505              	@ FreeRTOS/tasks.c:2436: 		xReturn = pdFALSE;
2433:FreeRTOS/tasks.c **** 	}
ARM GAS  /tmp/ccTV2SzP.s 			page 109


2434:FreeRTOS/tasks.c **** 	else
2435:FreeRTOS/tasks.c **** 	{
2436:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 3506              		.loc 1 2436 0
 3507 008c 0023     		movs	r3, #0	@ tmp146,
 3508 008e FB60     		str	r3, [r7, #12]	@ tmp146, xReturn
 3509              	.L233:
 3510              	@ FreeRTOS/tasks.c:2439: 	return xReturn;
2437:FreeRTOS/tasks.c **** 	}
2438:FreeRTOS/tasks.c **** 
2439:FreeRTOS/tasks.c **** 	return xReturn;
 3511              		.loc 1 2439 0
 3512 0090 FB68     		ldr	r3, [r7, #12]	@ _28, xReturn
 3513              	@ FreeRTOS/tasks.c:2440: }
2440:FreeRTOS/tasks.c **** }
 3514              		.loc 1 2440 0
 3515 0092 1846     		mov	r0, r3	@, <retval>
 3516 0094 1037     		adds	r7, r7, #16	@,,
 3517              		.cfi_def_cfa_offset 8
 3518 0096 BD46     		mov	sp, r7	@,
 3519              		.cfi_def_cfa_register 13
 3520              		@ sp needed	@
 3521 0098 80BD     		pop	{r7, pc}	@
 3522              	.L236:
 3523 009a 00BF     		.align	2
 3524              	.L235:
 3525 009c 00000000 		.word	uxSchedulerSuspended
 3526 00a0 00000000 		.word	uxTopReadyPriority
 3527 00a4 00000000 		.word	pxReadyTasksLists
 3528 00a8 00000000 		.word	pxCurrentTCB
 3529 00ac 00000000 		.word	xYieldPending
 3530              		.cfi_endproc
 3531              	.LFE24:
 3532              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 3533              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3534              		.align	1
 3535              		.global	vTaskSetTimeOutState
 3536              		.syntax unified
 3537              		.thumb
 3538              		.thumb_func
 3539              		.fpu softvfp
 3540              		.type	vTaskSetTimeOutState, %function
 3541              	vTaskSetTimeOutState:
 3542              	.LFB25:
2441:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2442:FreeRTOS/tasks.c **** 
2443:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2444:FreeRTOS/tasks.c **** {
 3543              		.loc 1 2444 0
 3544              		.cfi_startproc
 3545              		@ args = 0, pretend = 0, frame = 8
 3546              		@ frame_needed = 1, uses_anonymous_args = 0
 3547 0000 80B5     		push	{r7, lr}	@
 3548              		.cfi_def_cfa_offset 8
 3549              		.cfi_offset 7, -8
 3550              		.cfi_offset 14, -4
 3551 0002 82B0     		sub	sp, sp, #8	@,,
ARM GAS  /tmp/ccTV2SzP.s 			page 110


 3552              		.cfi_def_cfa_offset 16
 3553 0004 00AF     		add	r7, sp, #0	@,,
 3554              		.cfi_def_cfa_register 7
 3555 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
 3556              	@ FreeRTOS/tasks.c:2445: 	configASSERT( pxTimeOut );
2445:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3557              		.loc 1 2445 0
 3558 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, pxTimeOut
 3559 000a 002B     		cmp	r3, #0	@ tmp112,
 3560 000c 02D1     		bne	.L238	@,
 3561              	@ FreeRTOS/tasks.c:2445: 	configASSERT( pxTimeOut );
 3562              		.loc 1 2445 0 is_stmt 0 discriminator 1
 3563 000e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3564              	.L239:
 3565 0012 FEE7     		b	.L239	@
 3566              	.L238:
 3567              	@ FreeRTOS/tasks.c:2446: 	pxTimeOut->xOverflowCount = xNumOfOverflows;
2446:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3568              		.loc 1 2446 0 is_stmt 1
 3569 0014 054B     		ldr	r3, .L240	@ tmp113,
 3570 0016 1A68     		ldr	r2, [r3]	@ xNumOfOverflows.102_1, xNumOfOverflows
 3571 0018 7B68     		ldr	r3, [r7, #4]	@ tmp114, pxTimeOut
 3572 001a 1A60     		str	r2, [r3]	@ xNumOfOverflows.102_1, pxTimeOut_3(D)->xOverflowCount
 3573              	@ FreeRTOS/tasks.c:2447: 	pxTimeOut->xTimeOnEntering = xTickCount;
2447:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3574              		.loc 1 2447 0
 3575 001c 044B     		ldr	r3, .L240+4	@ tmp115,
 3576 001e 1A68     		ldr	r2, [r3]	@ xTickCount.103_2, xTickCount
 3577 0020 7B68     		ldr	r3, [r7, #4]	@ tmp116, pxTimeOut
 3578 0022 5A60     		str	r2, [r3, #4]	@ xTickCount.103_2, pxTimeOut_3(D)->xTimeOnEntering
 3579              	@ FreeRTOS/tasks.c:2448: }
2448:FreeRTOS/tasks.c **** }
 3580              		.loc 1 2448 0
 3581 0024 00BF     		nop
 3582 0026 0837     		adds	r7, r7, #8	@,,
 3583              		.cfi_def_cfa_offset 8
 3584 0028 BD46     		mov	sp, r7	@,
 3585              		.cfi_def_cfa_register 13
 3586              		@ sp needed	@
 3587 002a 80BD     		pop	{r7, pc}	@
 3588              	.L241:
 3589              		.align	2
 3590              	.L240:
 3591 002c 00000000 		.word	xNumOfOverflows
 3592 0030 00000000 		.word	xTickCount
 3593              		.cfi_endproc
 3594              	.LFE25:
 3595              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3596              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3597              		.align	1
 3598              		.global	xTaskCheckForTimeOut
 3599              		.syntax unified
 3600              		.thumb
 3601              		.thumb_func
 3602              		.fpu softvfp
 3603              		.type	xTaskCheckForTimeOut, %function
 3604              	xTaskCheckForTimeOut:
ARM GAS  /tmp/ccTV2SzP.s 			page 111


 3605              	.LFB26:
2449:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2450:FreeRTOS/tasks.c **** 
2451:FreeRTOS/tasks.c **** BaseT_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickT_t * const pxTicksToWait )
2452:FreeRTOS/tasks.c **** {
 3606              		.loc 1 2452 0
 3607              		.cfi_startproc
 3608              		@ args = 0, pretend = 0, frame = 16
 3609              		@ frame_needed = 1, uses_anonymous_args = 0
 3610 0000 80B5     		push	{r7, lr}	@
 3611              		.cfi_def_cfa_offset 8
 3612              		.cfi_offset 7, -8
 3613              		.cfi_offset 14, -4
 3614 0002 84B0     		sub	sp, sp, #16	@,,
 3615              		.cfi_def_cfa_offset 24
 3616 0004 00AF     		add	r7, sp, #0	@,,
 3617              		.cfi_def_cfa_register 7
 3618 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
 3619 0008 3960     		str	r1, [r7]	@ pxTicksToWait, pxTicksToWait
 3620              	@ FreeRTOS/tasks.c:2455: 	configASSERT( pxTimeOut );
2453:FreeRTOS/tasks.c **** BaseT_t xReturn;
2454:FreeRTOS/tasks.c **** 
2455:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3621              		.loc 1 2455 0
 3622 000a 7B68     		ldr	r3, [r7, #4]	@ tmp123, pxTimeOut
 3623 000c 002B     		cmp	r3, #0	@ tmp123,
 3624 000e 02D1     		bne	.L243	@,
 3625              	@ FreeRTOS/tasks.c:2455: 	configASSERT( pxTimeOut );
 3626              		.loc 1 2455 0 is_stmt 0 discriminator 1
 3627 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3628              	.L244:
 3629 0014 FEE7     		b	.L244	@
 3630              	.L243:
 3631              	@ FreeRTOS/tasks.c:2456: 	configASSERT( pxTicksToWait );
2456:FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 3632              		.loc 1 2456 0 is_stmt 1
 3633 0016 3B68     		ldr	r3, [r7]	@ tmp124, pxTicksToWait
 3634 0018 002B     		cmp	r3, #0	@ tmp124,
 3635 001a 02D1     		bne	.L245	@,
 3636              	@ FreeRTOS/tasks.c:2456: 	configASSERT( pxTicksToWait );
 3637              		.loc 1 2456 0 is_stmt 0 discriminator 1
 3638 001c FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3639              	.L246:
 3640              	@ FreeRTOS/tasks.c:2456: 	configASSERT( pxTicksToWait );
 3641              		.loc 1 2456 0 discriminator 2
 3642 0020 FEE7     		b	.L246	@
 3643              	.L245:
 3644              	@ FreeRTOS/tasks.c:2458: 	taskENTER_CRITICAL();
2457:FreeRTOS/tasks.c **** 
2458:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 3645              		.loc 1 2458 0 is_stmt 1
 3646 0022 FFF7FEFF 		bl	vPortEnterCritical	@
 3647              	.LBB14:
 3648              	@ FreeRTOS/tasks.c:2461: 		const TickT_t xConstTickCount = xTickCount;
2459:FreeRTOS/tasks.c **** 	{
2460:FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2461:FreeRTOS/tasks.c **** 		const TickT_t xConstTickCount = xTickCount;
ARM GAS  /tmp/ccTV2SzP.s 			page 112


 3649              		.loc 1 2461 0
 3650 0026 1C4B     		ldr	r3, .L252	@ tmp125,
 3651 0028 1B68     		ldr	r3, [r3]	@ tmp126, xTickCount
 3652 002a BB60     		str	r3, [r7, #8]	@ tmp126, xConstTickCount
 3653              	@ FreeRTOS/tasks.c:2467: 			if( *pxTicksToWait == portMAX_DELAY )
2462:FreeRTOS/tasks.c **** 
2463:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2464:FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2465:FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2466:FreeRTOS/tasks.c **** 			therefore never time out. */
2467:FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3654              		.loc 1 2467 0
 3655 002c 3B68     		ldr	r3, [r7]	@ tmp127, pxTicksToWait
 3656 002e 1B68     		ldr	r3, [r3]	@ _1, *pxTicksToWait_15(D)
 3657 0030 B3F1FF3F 		cmp	r3, #-1	@ _1,
 3658 0034 02D1     		bne	.L247	@,
 3659              	@ FreeRTOS/tasks.c:2469: 				xReturn = pdFALSE;
2468:FreeRTOS/tasks.c **** 			{
2469:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
 3660              		.loc 1 2469 0
 3661 0036 0023     		movs	r3, #0	@ tmp128,
 3662 0038 FB60     		str	r3, [r7, #12]	@ tmp128, xReturn
 3663 003a 26E0     		b	.L248	@
 3664              	.L247:
 3665              	@ FreeRTOS/tasks.c:2474: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCoun
2470:FreeRTOS/tasks.c **** 			}
2471:FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2472:FreeRTOS/tasks.c **** 		#endif
2473:FreeRTOS/tasks.c **** 
2474:FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3666              		.loc 1 2474 0
 3667 003c 7B68     		ldr	r3, [r7, #4]	@ tmp129, pxTimeOut
 3668 003e 1A68     		ldr	r2, [r3]	@ _2, pxTimeOut_14(D)->xOverflowCount
 3669 0040 164B     		ldr	r3, .L252+4	@ tmp130,
 3670 0042 1B68     		ldr	r3, [r3]	@ xNumOfOverflows.104_3, xNumOfOverflows
 3671 0044 9A42     		cmp	r2, r3	@ _2, xNumOfOverflows.104_3
 3672 0046 07D0     		beq	.L249	@,
 3673              	@ FreeRTOS/tasks.c:2474: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCoun
 3674              		.loc 1 2474 0 is_stmt 0 discriminator 1
 3675 0048 7B68     		ldr	r3, [r7, #4]	@ tmp131, pxTimeOut
 3676 004a 5B68     		ldr	r3, [r3, #4]	@ _4, pxTimeOut_14(D)->xTimeOnEntering
 3677 004c BA68     		ldr	r2, [r7, #8]	@ tmp132, xConstTickCount
 3678 004e 9A42     		cmp	r2, r3	@ tmp132, _4
 3679 0050 02D3     		bcc	.L249	@,
 3680              	@ FreeRTOS/tasks.c:2480: 			xReturn = pdTRUE;
2475:FreeRTOS/tasks.c **** 		{
2476:FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2477:FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2478:FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2479:FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2480:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3681              		.loc 1 2480 0 is_stmt 1
 3682 0052 0123     		movs	r3, #1	@ tmp133,
 3683 0054 FB60     		str	r3, [r7, #12]	@ tmp133, xReturn
 3684 0056 18E0     		b	.L248	@
 3685              	.L249:
 3686              	@ FreeRTOS/tasks.c:2482: 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWa
ARM GAS  /tmp/ccTV2SzP.s 			page 113


2481:FreeRTOS/tasks.c **** 		}
2482:FreeRTOS/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 3687              		.loc 1 2482 0
 3688 0058 7B68     		ldr	r3, [r7, #4]	@ tmp134, pxTimeOut
 3689 005a 5B68     		ldr	r3, [r3, #4]	@ _5, pxTimeOut_14(D)->xTimeOnEntering
 3690 005c BA68     		ldr	r2, [r7, #8]	@ tmp135, xConstTickCount
 3691 005e D21A     		subs	r2, r2, r3	@ _6, tmp135, _5
 3692 0060 3B68     		ldr	r3, [r7]	@ tmp136, pxTicksToWait
 3693 0062 1B68     		ldr	r3, [r3]	@ _7, *pxTicksToWait_15(D)
 3694 0064 9A42     		cmp	r2, r3	@ _6, _7
 3695 0066 0ED2     		bcs	.L250	@,
 3696              	@ FreeRTOS/tasks.c:2485: 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
2483:FreeRTOS/tasks.c **** 		{
2484:FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2485:FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 3697              		.loc 1 2485 0
 3698 0068 3B68     		ldr	r3, [r7]	@ tmp137, pxTicksToWait
 3699 006a 1A68     		ldr	r2, [r3]	@ _8, *pxTicksToWait_15(D)
 3700 006c 7B68     		ldr	r3, [r7, #4]	@ tmp138, pxTimeOut
 3701 006e 5968     		ldr	r1, [r3, #4]	@ _9, pxTimeOut_14(D)->xTimeOnEntering
 3702 0070 BB68     		ldr	r3, [r7, #8]	@ tmp139, xConstTickCount
 3703 0072 CB1A     		subs	r3, r1, r3	@ _10, _9, tmp139
 3704 0074 1A44     		add	r2, r2, r3	@ _11, _10
 3705 0076 3B68     		ldr	r3, [r7]	@ tmp140, pxTicksToWait
 3706 0078 1A60     		str	r2, [r3]	@ _11, *pxTicksToWait_15(D)
 3707              	@ FreeRTOS/tasks.c:2486: 			vTaskSetTimeOutState( pxTimeOut );
2486:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3708              		.loc 1 2486 0
 3709 007a 7868     		ldr	r0, [r7, #4]	@, pxTimeOut
 3710 007c FFF7FEFF 		bl	vTaskSetTimeOutState	@
 3711              	@ FreeRTOS/tasks.c:2487: 			xReturn = pdFALSE;
2487:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 3712              		.loc 1 2487 0
 3713 0080 0023     		movs	r3, #0	@ tmp141,
 3714 0082 FB60     		str	r3, [r7, #12]	@ tmp141, xReturn
 3715 0084 01E0     		b	.L248	@
 3716              	.L250:
 3717              	@ FreeRTOS/tasks.c:2491: 			xReturn = pdTRUE;
2488:FreeRTOS/tasks.c **** 		}
2489:FreeRTOS/tasks.c **** 		else
2490:FreeRTOS/tasks.c **** 		{
2491:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3718              		.loc 1 2491 0
 3719 0086 0123     		movs	r3, #1	@ tmp142,
 3720 0088 FB60     		str	r3, [r7, #12]	@ tmp142, xReturn
 3721              	.L248:
 3722              	.LBE14:
 3723              	@ FreeRTOS/tasks.c:2494: 	taskEXIT_CRITICAL();
2492:FreeRTOS/tasks.c **** 		}
2493:FreeRTOS/tasks.c **** 	}
2494:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 3724              		.loc 1 2494 0
 3725 008a FFF7FEFF 		bl	vPortExitCritical	@
 3726              	@ FreeRTOS/tasks.c:2496: 	return xReturn;
2495:FreeRTOS/tasks.c **** 
2496:FreeRTOS/tasks.c **** 	return xReturn;
 3727              		.loc 1 2496 0
ARM GAS  /tmp/ccTV2SzP.s 			page 114


 3728 008e FB68     		ldr	r3, [r7, #12]	@ _26, xReturn
 3729              	@ FreeRTOS/tasks.c:2497: }
2497:FreeRTOS/tasks.c **** }
 3730              		.loc 1 2497 0
 3731 0090 1846     		mov	r0, r3	@, <retval>
 3732 0092 1037     		adds	r7, r7, #16	@,,
 3733              		.cfi_def_cfa_offset 8
 3734 0094 BD46     		mov	sp, r7	@,
 3735              		.cfi_def_cfa_register 13
 3736              		@ sp needed	@
 3737 0096 80BD     		pop	{r7, pc}	@
 3738              	.L253:
 3739              		.align	2
 3740              	.L252:
 3741 0098 00000000 		.word	xTickCount
 3742 009c 00000000 		.word	xNumOfOverflows
 3743              		.cfi_endproc
 3744              	.LFE26:
 3745              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3746              		.section	.text.vTaskMissedYield,"ax",%progbits
 3747              		.align	1
 3748              		.global	vTaskMissedYield
 3749              		.syntax unified
 3750              		.thumb
 3751              		.thumb_func
 3752              		.fpu softvfp
 3753              		.type	vTaskMissedYield, %function
 3754              	vTaskMissedYield:
 3755              	.LFB27:
2498:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2499:FreeRTOS/tasks.c **** 
2500:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
2501:FreeRTOS/tasks.c **** {
 3756              		.loc 1 2501 0
 3757              		.cfi_startproc
 3758              		@ args = 0, pretend = 0, frame = 0
 3759              		@ frame_needed = 1, uses_anonymous_args = 0
 3760              		@ link register save eliminated.
 3761 0000 80B4     		push	{r7}	@
 3762              		.cfi_def_cfa_offset 4
 3763              		.cfi_offset 7, -4
 3764 0002 00AF     		add	r7, sp, #0	@,,
 3765              		.cfi_def_cfa_register 7
 3766              	@ FreeRTOS/tasks.c:2502: 	xYieldPending = pdTRUE;
2502:FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3767              		.loc 1 2502 0
 3768 0004 034B     		ldr	r3, .L255	@ tmp110,
 3769 0006 0122     		movs	r2, #1	@ tmp111,
 3770 0008 1A60     		str	r2, [r3]	@ tmp111, xYieldPending
 3771              	@ FreeRTOS/tasks.c:2503: }
2503:FreeRTOS/tasks.c **** }
 3772              		.loc 1 2503 0
 3773 000a 00BF     		nop
 3774 000c BD46     		mov	sp, r7	@,
 3775              		.cfi_def_cfa_register 13
 3776              		@ sp needed	@
 3777 000e 80BC     		pop	{r7}	@
ARM GAS  /tmp/ccTV2SzP.s 			page 115


 3778              		.cfi_restore 7
 3779              		.cfi_def_cfa_offset 0
 3780 0010 7047     		bx	lr	@
 3781              	.L256:
 3782 0012 00BF     		.align	2
 3783              	.L255:
 3784 0014 00000000 		.word	xYieldPending
 3785              		.cfi_endproc
 3786              	.LFE27:
 3787              		.size	vTaskMissedYield, .-vTaskMissedYield
 3788              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3789              		.align	1
 3790              		.global	uxTaskGetTaskNumber
 3791              		.syntax unified
 3792              		.thumb
 3793              		.thumb_func
 3794              		.fpu softvfp
 3795              		.type	uxTaskGetTaskNumber, %function
 3796              	uxTaskGetTaskNumber:
 3797              	.LFB28:
2504:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2505:FreeRTOS/tasks.c **** 
2506:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2507:FreeRTOS/tasks.c **** 
2508:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2509:FreeRTOS/tasks.c **** 	{
 3798              		.loc 1 2509 0
 3799              		.cfi_startproc
 3800              		@ args = 0, pretend = 0, frame = 16
 3801              		@ frame_needed = 1, uses_anonymous_args = 0
 3802              		@ link register save eliminated.
 3803 0000 80B4     		push	{r7}	@
 3804              		.cfi_def_cfa_offset 4
 3805              		.cfi_offset 7, -4
 3806 0002 85B0     		sub	sp, sp, #20	@,,
 3807              		.cfi_def_cfa_offset 24
 3808 0004 00AF     		add	r7, sp, #0	@,,
 3809              		.cfi_def_cfa_register 7
 3810 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 3811              	@ FreeRTOS/tasks.c:2513: 		if( xTask != NULL )
2510:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
2511:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2512:FreeRTOS/tasks.c **** 
2513:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3812              		.loc 1 2513 0
 3813 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, xTask
 3814 000a 002B     		cmp	r3, #0	@ tmp112,
 3815 000c 05D0     		beq	.L258	@,
 3816              	@ FreeRTOS/tasks.c:2515: 			pxTCB = ( TCB_t * ) xTask;
2514:FreeRTOS/tasks.c **** 		{
2515:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3817              		.loc 1 2515 0
 3818 000e 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 3819 0010 BB60     		str	r3, [r7, #8]	@ tmp113, pxTCB
 3820              	@ FreeRTOS/tasks.c:2516: 			uxReturn = pxTCB->uxTaskNumber;
2516:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 3821              		.loc 1 2516 0
ARM GAS  /tmp/ccTV2SzP.s 			page 116


 3822 0012 BB68     		ldr	r3, [r7, #8]	@ tmp114, pxTCB
 3823 0014 5B6C     		ldr	r3, [r3, #68]	@ tmp115, pxTCB_4->uxTaskNumber
 3824 0016 FB60     		str	r3, [r7, #12]	@ tmp115, uxReturn
 3825 0018 01E0     		b	.L259	@
 3826              	.L258:
 3827              	@ FreeRTOS/tasks.c:2520: 			uxReturn = 0U;
2517:FreeRTOS/tasks.c **** 		}
2518:FreeRTOS/tasks.c **** 		else
2519:FreeRTOS/tasks.c **** 		{
2520:FreeRTOS/tasks.c **** 			uxReturn = 0U;
 3828              		.loc 1 2520 0
 3829 001a 0023     		movs	r3, #0	@ tmp116,
 3830 001c FB60     		str	r3, [r7, #12]	@ tmp116, uxReturn
 3831              	.L259:
 3832              	@ FreeRTOS/tasks.c:2523: 		return uxReturn;
2521:FreeRTOS/tasks.c **** 		}
2522:FreeRTOS/tasks.c **** 
2523:FreeRTOS/tasks.c **** 		return uxReturn;
 3833              		.loc 1 2523 0
 3834 001e FB68     		ldr	r3, [r7, #12]	@ _7, uxReturn
 3835              	@ FreeRTOS/tasks.c:2524: 	}
2524:FreeRTOS/tasks.c **** 	}
 3836              		.loc 1 2524 0
 3837 0020 1846     		mov	r0, r3	@, <retval>
 3838 0022 1437     		adds	r7, r7, #20	@,,
 3839              		.cfi_def_cfa_offset 4
 3840 0024 BD46     		mov	sp, r7	@,
 3841              		.cfi_def_cfa_register 13
 3842              		@ sp needed	@
 3843 0026 80BC     		pop	{r7}	@
 3844              		.cfi_restore 7
 3845              		.cfi_def_cfa_offset 0
 3846 0028 7047     		bx	lr	@
 3847              		.cfi_endproc
 3848              	.LFE28:
 3849              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 3850              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3851              		.align	1
 3852              		.global	vTaskSetTaskNumber
 3853              		.syntax unified
 3854              		.thumb
 3855              		.thumb_func
 3856              		.fpu softvfp
 3857              		.type	vTaskSetTaskNumber, %function
 3858              	vTaskSetTaskNumber:
 3859              	.LFB29:
2525:FreeRTOS/tasks.c **** 
2526:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2527:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2528:FreeRTOS/tasks.c **** 
2529:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2530:FreeRTOS/tasks.c **** 
2531:FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseT_t uxHandle )
2532:FreeRTOS/tasks.c **** 	{
 3860              		.loc 1 2532 0
 3861              		.cfi_startproc
 3862              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccTV2SzP.s 			page 117


 3863              		@ frame_needed = 1, uses_anonymous_args = 0
 3864              		@ link register save eliminated.
 3865 0000 80B4     		push	{r7}	@
 3866              		.cfi_def_cfa_offset 4
 3867              		.cfi_offset 7, -4
 3868 0002 85B0     		sub	sp, sp, #20	@,,
 3869              		.cfi_def_cfa_offset 24
 3870 0004 00AF     		add	r7, sp, #0	@,,
 3871              		.cfi_def_cfa_register 7
 3872 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 3873 0008 3960     		str	r1, [r7]	@ uxHandle, uxHandle
 3874              	@ FreeRTOS/tasks.c:2535: 		if( xTask != NULL )
2533:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2534:FreeRTOS/tasks.c **** 
2535:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3875              		.loc 1 2535 0
 3876 000a 7B68     		ldr	r3, [r7, #4]	@ tmp110, xTask
 3877 000c 002B     		cmp	r3, #0	@ tmp110,
 3878 000e 04D0     		beq	.L263	@,
 3879              	@ FreeRTOS/tasks.c:2537: 			pxTCB = ( TCB_t * ) xTask;
2536:FreeRTOS/tasks.c **** 		{
2537:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3880              		.loc 1 2537 0
 3881 0010 7B68     		ldr	r3, [r7, #4]	@ tmp111, xTask
 3882 0012 FB60     		str	r3, [r7, #12]	@ tmp111, pxTCB
 3883              	@ FreeRTOS/tasks.c:2538: 			pxTCB->uxTaskNumber = uxHandle;
2538:FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 3884              		.loc 1 2538 0
 3885 0014 FB68     		ldr	r3, [r7, #12]	@ tmp112, pxTCB
 3886 0016 3A68     		ldr	r2, [r7]	@ tmp113, uxHandle
 3887 0018 5A64     		str	r2, [r3, #68]	@ tmp113, pxTCB_4->uxTaskNumber
 3888              	.L263:
 3889              	@ FreeRTOS/tasks.c:2540: 	}
2539:FreeRTOS/tasks.c **** 		}
2540:FreeRTOS/tasks.c **** 	}
 3890              		.loc 1 2540 0
 3891 001a 00BF     		nop
 3892 001c 1437     		adds	r7, r7, #20	@,,
 3893              		.cfi_def_cfa_offset 4
 3894 001e BD46     		mov	sp, r7	@,
 3895              		.cfi_def_cfa_register 13
 3896              		@ sp needed	@
 3897 0020 80BC     		pop	{r7}	@
 3898              		.cfi_restore 7
 3899              		.cfi_def_cfa_offset 0
 3900 0022 7047     		bx	lr	@
 3901              		.cfi_endproc
 3902              	.LFE29:
 3903              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 3904              		.section	.text.prvIdleTask,"ax",%progbits
 3905              		.align	1
 3906              		.syntax unified
 3907              		.thumb
 3908              		.thumb_func
 3909              		.fpu softvfp
 3910              		.type	prvIdleTask, %function
 3911              	prvIdleTask:
ARM GAS  /tmp/ccTV2SzP.s 			page 118


 3912              	.LFB30:
2541:FreeRTOS/tasks.c **** 
2542:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2543:FreeRTOS/tasks.c **** 
2544:FreeRTOS/tasks.c **** /*
2545:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
2546:FreeRTOS/tasks.c ****  * The Idle task.
2547:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
2548:FreeRTOS/tasks.c ****  *
2549:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2550:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2551:FreeRTOS/tasks.c ****  *
2552:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
2553:FreeRTOS/tasks.c ****  *
2554:FreeRTOS/tasks.c ****  */
2555:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2556:FreeRTOS/tasks.c **** {
 3913              		.loc 1 2556 0
 3914              		.cfi_startproc
 3915              		@ args = 0, pretend = 0, frame = 8
 3916              		@ frame_needed = 1, uses_anonymous_args = 0
 3917 0000 80B5     		push	{r7, lr}	@
 3918              		.cfi_def_cfa_offset 8
 3919              		.cfi_offset 7, -8
 3920              		.cfi_offset 14, -4
 3921 0002 82B0     		sub	sp, sp, #8	@,,
 3922              		.cfi_def_cfa_offset 16
 3923 0004 00AF     		add	r7, sp, #0	@,,
 3924              		.cfi_def_cfa_register 7
 3925 0006 7860     		str	r0, [r7, #4]	@ pvParameters, pvParameters
 3926              	.L265:
 3927              	@ FreeRTOS/tasks.c:2563: 		prvCheckTasksWaitingTermination();
2557:FreeRTOS/tasks.c **** 	/* Stop warnings. */
2558:FreeRTOS/tasks.c **** 	( void ) pvParameters;
2559:FreeRTOS/tasks.c **** 
2560:FreeRTOS/tasks.c **** 	for( ;; )
2561:FreeRTOS/tasks.c **** 	{
2562:FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
2563:FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 3928              		.loc 1 2563 0 discriminator 1
 3929 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination	@
 3930 000c FCE7     		b	.L265	@
 3931              		.cfi_endproc
 3932              	.LFE30:
 3933              		.size	prvIdleTask, .-prvIdleTask
 3934              		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 3935              		.align	1
 3936              		.syntax unified
 3937              		.thumb
 3938              		.thumb_func
 3939              		.fpu softvfp
 3940              		.type	prvInitialiseTCBVariables, %function
 3941              	prvInitialiseTCBVariables:
 3942              	.LFB31:
2564:FreeRTOS/tasks.c **** 
2565:FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2566:FreeRTOS/tasks.c **** 		{
ARM GAS  /tmp/ccTV2SzP.s 			page 119


2567:FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2568:FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
2569:FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
2570:FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
2571:FreeRTOS/tasks.c **** 			taskYIELD();
2572:FreeRTOS/tasks.c **** 		}
2573:FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2574:FreeRTOS/tasks.c **** 
2575:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2576:FreeRTOS/tasks.c **** 		{
2577:FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
2578:FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2579:FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
2580:FreeRTOS/tasks.c **** 			timeslice.
2581:FreeRTOS/tasks.c **** 
2582:FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
2583:FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2584:FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
2585:FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
2586:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseT_t ) 1 )
2587:FreeRTOS/tasks.c **** 			{
2588:FreeRTOS/tasks.c **** 				taskYIELD();
2589:FreeRTOS/tasks.c **** 			}
2590:FreeRTOS/tasks.c **** 			else
2591:FreeRTOS/tasks.c **** 			{
2592:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2593:FreeRTOS/tasks.c **** 			}
2594:FreeRTOS/tasks.c **** 		}
2595:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2596:FreeRTOS/tasks.c **** 
2597:FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2598:FreeRTOS/tasks.c **** 		{
2599:FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
2600:FreeRTOS/tasks.c **** 
2601:FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2602:FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
2603:FreeRTOS/tasks.c **** 			without the overhead of a separate task.
2604:FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2605:FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2606:FreeRTOS/tasks.c **** 			vApplicationIdleHook();
2607:FreeRTOS/tasks.c **** 		}
2608:FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2609:FreeRTOS/tasks.c **** 
2610:FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2611:FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2612:FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
2613:FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2614:FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2615:FreeRTOS/tasks.c **** 		{
2616:FreeRTOS/tasks.c **** 		TickT_t xExpectedIdleTime;
2617:FreeRTOS/tasks.c **** 
2618:FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2619:FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2620:FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
2621:FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2622:FreeRTOS/tasks.c **** 			valid. */
2623:FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
ARM GAS  /tmp/ccTV2SzP.s 			page 120


2624:FreeRTOS/tasks.c **** 
2625:FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2626:FreeRTOS/tasks.c **** 			{
2627:FreeRTOS/tasks.c **** 				vTaskSuspendAll();
2628:FreeRTOS/tasks.c **** 				{
2629:FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2630:FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
2631:FreeRTOS/tasks.c **** 					be used. */
2632:FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2633:FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2634:FreeRTOS/tasks.c **** 
2635:FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2636:FreeRTOS/tasks.c **** 					{
2637:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2638:FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2639:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
2640:FreeRTOS/tasks.c **** 					}
2641:FreeRTOS/tasks.c **** 					else
2642:FreeRTOS/tasks.c **** 					{
2643:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2644:FreeRTOS/tasks.c **** 					}
2645:FreeRTOS/tasks.c **** 				}
2646:FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
2647:FreeRTOS/tasks.c **** 			}
2648:FreeRTOS/tasks.c **** 			else
2649:FreeRTOS/tasks.c **** 			{
2650:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2651:FreeRTOS/tasks.c **** 			}
2652:FreeRTOS/tasks.c **** 		}
2653:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2654:FreeRTOS/tasks.c **** 	}
2655:FreeRTOS/tasks.c **** }
2656:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2657:FreeRTOS/tasks.c **** 
2658:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
2659:FreeRTOS/tasks.c **** 
2660:FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2661:FreeRTOS/tasks.c **** 	{
2662:FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2663:FreeRTOS/tasks.c **** 
2664:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2665:FreeRTOS/tasks.c **** 		{
2666:FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2667:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2668:FreeRTOS/tasks.c **** 		}
2669:FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
2670:FreeRTOS/tasks.c **** 		{
2671:FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2672:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2673:FreeRTOS/tasks.c **** 		}
2674:FreeRTOS/tasks.c **** 		else
2675:FreeRTOS/tasks.c **** 		{
2676:FreeRTOS/tasks.c **** 			#if configUSE_TIMERS == 0
2677:FreeRTOS/tasks.c **** 			{
2678:FreeRTOS/tasks.c **** 				/* The idle task exists in addition to the application tasks. */
2679:FreeRTOS/tasks.c **** 				const UBaseT_t uxNonApplicationTasks = 1;
2680:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 121


2681:FreeRTOS/tasks.c **** 				/* If timers are not being used and all the tasks are in the
2682:FreeRTOS/tasks.c **** 				suspended list (which might mean they have an infinite block
2683:FreeRTOS/tasks.c **** 				time rather than actually being suspended) then it is safe to
2684:FreeRTOS/tasks.c **** 				turn all clocks off and just wait for external interrupts. */
2685:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicati
2686:FreeRTOS/tasks.c **** 				{
2687:FreeRTOS/tasks.c **** 					eReturn = eNoTasksWaitingTimeout;
2688:FreeRTOS/tasks.c **** 				}
2689:FreeRTOS/tasks.c **** 				else
2690:FreeRTOS/tasks.c **** 				{
2691:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2692:FreeRTOS/tasks.c **** 				}
2693:FreeRTOS/tasks.c **** 			}
2694:FreeRTOS/tasks.c **** 			#endif /* configUSE_TIMERS */
2695:FreeRTOS/tasks.c **** 		}
2696:FreeRTOS/tasks.c **** 
2697:FreeRTOS/tasks.c **** 		return eReturn;
2698:FreeRTOS/tasks.c **** 	}
2699:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2700:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2701:FreeRTOS/tasks.c **** 
2702:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
2703:FreeRTOS/tasks.c **** {
 3943              		.loc 1 2703 0
 3944              		.cfi_startproc
 3945              		@ args = 4, pretend = 0, frame = 24
 3946              		@ frame_needed = 1, uses_anonymous_args = 0
 3947 0000 80B5     		push	{r7, lr}	@
 3948              		.cfi_def_cfa_offset 8
 3949              		.cfi_offset 7, -8
 3950              		.cfi_offset 14, -4
 3951 0002 86B0     		sub	sp, sp, #24	@,,
 3952              		.cfi_def_cfa_offset 32
 3953 0004 00AF     		add	r7, sp, #0	@,,
 3954              		.cfi_def_cfa_register 7
 3955 0006 F860     		str	r0, [r7, #12]	@ pxTCB, pxTCB
 3956 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 3957 000a 7A60     		str	r2, [r7, #4]	@ uxPriority, uxPriority
 3958 000c 3B60     		str	r3, [r7]	@ xRegions, xRegions
 3959              	@ FreeRTOS/tasks.c:2707: 	for( x = ( UBaseT_t ) 0; x < ( UBaseT_t ) configMAX_TASK_NAME_LEN; x++ )
2704:FreeRTOS/tasks.c **** UBaseT_t x;
2705:FreeRTOS/tasks.c **** 
2706:FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
2707:FreeRTOS/tasks.c **** 	for( x = ( UBaseT_t ) 0; x < ( UBaseT_t ) configMAX_TASK_NAME_LEN; x++ )
 3960              		.loc 1 2707 0
 3961 000e 0023     		movs	r3, #0	@ tmp117,
 3962 0010 7B61     		str	r3, [r7, #20]	@ tmp117, x
 3963 0012 12E0     		b	.L267	@
 3964              	.L270:
 3965              	@ FreeRTOS/tasks.c:2709: 		pxTCB->pcTaskName[ x ] = pcName[ x ];
2708:FreeRTOS/tasks.c **** 	{
2709:FreeRTOS/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 3966              		.loc 1 2709 0
 3967 0014 BA68     		ldr	r2, [r7, #8]	@ tmp118, pcName
 3968 0016 7B69     		ldr	r3, [r7, #20]	@ tmp119, x
 3969 0018 1344     		add	r3, r3, r2	@ _1, tmp118
 3970 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2	@ _2, *_1
ARM GAS  /tmp/ccTV2SzP.s 			page 122


 3971 001c FA68     		ldr	r2, [r7, #12]	@ tmp120, pxTCB
 3972 001e 7B69     		ldr	r3, [r7, #20]	@ tmp122, x
 3973 0020 1344     		add	r3, r3, r2	@ tmp121, tmp120
 3974 0022 3433     		adds	r3, r3, #52	@ tmp123, tmp121,
 3975 0024 0A46     		mov	r2, r1	@ tmp124, _2
 3976 0026 1A70     		strb	r2, [r3]	@ tmp124, pxTCB_15(D)->pcTaskName
 3977              	@ FreeRTOS/tasks.c:2714: 		if( pcName[ x ] == 0x00 )
2710:FreeRTOS/tasks.c **** 
2711:FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2712:FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2713:FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
2714:FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 3978              		.loc 1 2714 0
 3979 0028 BA68     		ldr	r2, [r7, #8]	@ tmp125, pcName
 3980 002a 7B69     		ldr	r3, [r7, #20]	@ tmp126, x
 3981 002c 1344     		add	r3, r3, r2	@ _3, tmp125
 3982 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ _4, *_3
 3983 0030 002B     		cmp	r3, #0	@ _4,
 3984 0032 06D0     		beq	.L272	@,
 3985              	@ FreeRTOS/tasks.c:2707: 	for( x = ( UBaseT_t ) 0; x < ( UBaseT_t ) configMAX_TASK_NAME_LEN; x++ )
2707:FreeRTOS/tasks.c **** 	{
 3986              		.loc 1 2707 0 discriminator 2
 3987 0034 7B69     		ldr	r3, [r7, #20]	@ tmp128, x
 3988 0036 0133     		adds	r3, r3, #1	@ tmp127, tmp128,
 3989 0038 7B61     		str	r3, [r7, #20]	@ tmp127, x
 3990              	.L267:
 3991              	@ FreeRTOS/tasks.c:2707: 	for( x = ( UBaseT_t ) 0; x < ( UBaseT_t ) configMAX_TASK_NAME_LEN; x++ )
2707:FreeRTOS/tasks.c **** 	{
 3992              		.loc 1 2707 0 is_stmt 0 discriminator 1
 3993 003a 7B69     		ldr	r3, [r7, #20]	@ tmp129, x
 3994 003c 0B2B     		cmp	r3, #11	@ tmp129,
 3995 003e E9D9     		bls	.L270	@,
 3996 0040 00E0     		b	.L269	@
 3997              	.L272:
 3998              	@ FreeRTOS/tasks.c:2716: 			break;
2715:FreeRTOS/tasks.c **** 		{
2716:FreeRTOS/tasks.c **** 			break;
 3999              		.loc 1 2716 0 is_stmt 1
 4000 0042 00BF     		nop
 4001              	.L269:
 4002              	@ FreeRTOS/tasks.c:2726: 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
2717:FreeRTOS/tasks.c **** 		}
2718:FreeRTOS/tasks.c **** 		else
2719:FreeRTOS/tasks.c **** 		{
2720:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2721:FreeRTOS/tasks.c **** 		}
2722:FreeRTOS/tasks.c **** 	}
2723:FreeRTOS/tasks.c **** 
2724:FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2725:FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2726:FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 4003              		.loc 1 2726 0
 4004 0044 FB68     		ldr	r3, [r7, #12]	@ tmp130, pxTCB
 4005 0046 0022     		movs	r2, #0	@ tmp131,
 4006 0048 83F83F20 		strb	r2, [r3, #63]	@ tmp132, pxTCB_15(D)->pcTaskName
 4007              	@ FreeRTOS/tasks.c:2730: 	if( uxPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
2727:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 123


2728:FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2729:FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
2730:FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 4008              		.loc 1 2730 0
 4009 004c 7B68     		ldr	r3, [r7, #4]	@ tmp133, uxPriority
 4010 004e 072B     		cmp	r3, #7	@ tmp133,
 4011 0050 01D9     		bls	.L271	@,
 4012              	@ FreeRTOS/tasks.c:2732: 		uxPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
2731:FreeRTOS/tasks.c **** 	{
2732:FreeRTOS/tasks.c **** 		uxPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 4013              		.loc 1 2732 0
 4014 0052 0723     		movs	r3, #7	@ tmp134,
 4015 0054 7B60     		str	r3, [r7, #4]	@ tmp134, uxPriority
 4016              	.L271:
 4017              	@ FreeRTOS/tasks.c:2739: 	pxTCB->uxPriority = uxPriority;
2733:FreeRTOS/tasks.c **** 	}
2734:FreeRTOS/tasks.c **** 	else
2735:FreeRTOS/tasks.c **** 	{
2736:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2737:FreeRTOS/tasks.c **** 	}
2738:FreeRTOS/tasks.c **** 
2739:FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 4018              		.loc 1 2739 0
 4019 0056 FB68     		ldr	r3, [r7, #12]	@ tmp135, pxTCB
 4020 0058 7A68     		ldr	r2, [r7, #4]	@ tmp136, uxPriority
 4021 005a DA62     		str	r2, [r3, #44]	@ tmp136, pxTCB_15(D)->uxPriority
 4022              	@ FreeRTOS/tasks.c:2742: 		pxTCB->uxBasePriority = uxPriority;
2740:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2741:FreeRTOS/tasks.c **** 	{
2742:FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 4023              		.loc 1 2742 0
 4024 005c FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 4025 005e 7A68     		ldr	r2, [r7, #4]	@ tmp138, uxPriority
 4026 0060 9A64     		str	r2, [r3, #72]	@ tmp138, pxTCB_15(D)->uxBasePriority
 4027              	@ FreeRTOS/tasks.c:2743: 		pxTCB->uxMutexesHeld = 0;
2743:FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 4028              		.loc 1 2743 0
 4029 0062 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 4030 0064 0022     		movs	r2, #0	@ tmp140,
 4031 0066 DA64     		str	r2, [r3, #76]	@ tmp140, pxTCB_15(D)->uxMutexesHeld
 4032              	@ FreeRTOS/tasks.c:2747: 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
2744:FreeRTOS/tasks.c **** 	}
2745:FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
2746:FreeRTOS/tasks.c **** 
2747:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 4033              		.loc 1 2747 0
 4034 0068 FB68     		ldr	r3, [r7, #12]	@ tmp141, pxTCB
 4035 006a 0433     		adds	r3, r3, #4	@ _5, tmp141,
 4036 006c 1846     		mov	r0, r3	@, _5
 4037 006e FFF7FEFF 		bl	vListInitialiseItem	@
 4038              	@ FreeRTOS/tasks.c:2748: 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
2748:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 4039              		.loc 1 2748 0
 4040 0072 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 4041 0074 1833     		adds	r3, r3, #24	@ _6, tmp142,
 4042 0076 1846     		mov	r0, r3	@, _6
 4043 0078 FFF7FEFF 		bl	vListInitialiseItem	@
ARM GAS  /tmp/ccTV2SzP.s 			page 124


 4044              	@ FreeRTOS/tasks.c:2752: 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
2749:FreeRTOS/tasks.c **** 
2750:FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2751:FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2752:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 4045              		.loc 1 2752 0
 4046 007c FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 4047 007e FA68     		ldr	r2, [r7, #12]	@ tmp144, pxTCB
 4048 0080 1A61     		str	r2, [r3, #16]	@ tmp144, pxTCB_15(D)->xGenericListItem.pvOwner
 4049              	@ FreeRTOS/tasks.c:2755: 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMA
2753:FreeRTOS/tasks.c **** 
2754:FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
2755:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( TickT_t 
 4050              		.loc 1 2755 0
 4051 0082 7B68     		ldr	r3, [r7, #4]	@ tmp145, uxPriority
 4052 0084 C3F10802 		rsb	r2, r3, #8	@ _7, tmp145,
 4053 0088 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 4054 008a 9A61     		str	r2, [r3, #24]	@ _7, pxTCB_15(D)->xEventListItem.xItemValue
 4055              	@ FreeRTOS/tasks.c:2756: 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
2756:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 4056              		.loc 1 2756 0
 4057 008c FB68     		ldr	r3, [r7, #12]	@ tmp147, pxTCB
 4058 008e FA68     		ldr	r2, [r7, #12]	@ tmp148, pxTCB
 4059 0090 5A62     		str	r2, [r3, #36]	@ tmp148, pxTCB_15(D)->xEventListItem.pvOwner
 4060              	@ FreeRTOS/tasks.c:2793: }
2757:FreeRTOS/tasks.c **** 
2758:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2759:FreeRTOS/tasks.c **** 	{
2760:FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseT_t ) 0U;
2761:FreeRTOS/tasks.c **** 	}
2762:FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2763:FreeRTOS/tasks.c **** 
2764:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2765:FreeRTOS/tasks.c **** 	{
2766:FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2767:FreeRTOS/tasks.c **** 	}
2768:FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2769:FreeRTOS/tasks.c **** 
2770:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2771:FreeRTOS/tasks.c **** 	{
2772:FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2773:FreeRTOS/tasks.c **** 	}
2774:FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2775:FreeRTOS/tasks.c **** 
2776:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2777:FreeRTOS/tasks.c **** 	{
2778:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2779:FreeRTOS/tasks.c **** 	}
2780:FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2781:FreeRTOS/tasks.c **** 	{
2782:FreeRTOS/tasks.c **** 		( void ) xRegions;
2783:FreeRTOS/tasks.c **** 		( void ) usStackDepth;
2784:FreeRTOS/tasks.c **** 	}
2785:FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2786:FreeRTOS/tasks.c **** 
2787:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2788:FreeRTOS/tasks.c **** 	{
ARM GAS  /tmp/ccTV2SzP.s 			page 125


2789:FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2790:FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2791:FreeRTOS/tasks.c **** 	}
2792:FreeRTOS/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2793:FreeRTOS/tasks.c **** }
 4061              		.loc 1 2793 0
 4062 0092 00BF     		nop
 4063 0094 1837     		adds	r7, r7, #24	@,,
 4064              		.cfi_def_cfa_offset 8
 4065 0096 BD46     		mov	sp, r7	@,
 4066              		.cfi_def_cfa_register 13
 4067              		@ sp needed	@
 4068 0098 80BD     		pop	{r7, pc}	@
 4069              		.cfi_endproc
 4070              	.LFE31:
 4071              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 4072              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 4073              		.align	1
 4074              		.syntax unified
 4075              		.thumb
 4076              		.thumb_func
 4077              		.fpu softvfp
 4078              		.type	prvInitialiseTaskLists, %function
 4079              	prvInitialiseTaskLists:
 4080              	.LFB32:
2794:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2795:FreeRTOS/tasks.c **** 
2796:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2797:FreeRTOS/tasks.c **** 
2798:FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2799:FreeRTOS/tasks.c **** 	{
2800:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2801:FreeRTOS/tasks.c **** 
2802:FreeRTOS/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2803:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2804:FreeRTOS/tasks.c **** 
2805:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2806:FreeRTOS/tasks.c **** 	}
2807:FreeRTOS/tasks.c **** 
2808:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2809:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2810:FreeRTOS/tasks.c **** 
2811:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
2812:FreeRTOS/tasks.c **** {
 4081              		.loc 1 2812 0
 4082              		.cfi_startproc
 4083              		@ args = 0, pretend = 0, frame = 8
 4084              		@ frame_needed = 1, uses_anonymous_args = 0
 4085 0000 80B5     		push	{r7, lr}	@
 4086              		.cfi_def_cfa_offset 8
 4087              		.cfi_offset 7, -8
 4088              		.cfi_offset 14, -4
 4089 0002 82B0     		sub	sp, sp, #8	@,,
 4090              		.cfi_def_cfa_offset 16
 4091 0004 00AF     		add	r7, sp, #0	@,,
 4092              		.cfi_def_cfa_register 7
 4093              	@ FreeRTOS/tasks.c:2815: 	for( uxPriority = ( UBaseT_t ) 0U; uxPriority < ( UBaseT_t ) configMAX_PR
ARM GAS  /tmp/ccTV2SzP.s 			page 126


2813:FreeRTOS/tasks.c **** UBaseT_t uxPriority;
2814:FreeRTOS/tasks.c **** 
2815:FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseT_t ) 0U; uxPriority < ( UBaseT_t ) configMAX_PRIORITIES; uxPriority++ )
 4094              		.loc 1 2815 0
 4095 0006 0023     		movs	r3, #0	@ tmp111,
 4096 0008 7B60     		str	r3, [r7, #4]	@ tmp111, uxPriority
 4097 000a 0CE0     		b	.L274	@
 4098              	.L275:
 4099              	@ FreeRTOS/tasks.c:2817: 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
2816:FreeRTOS/tasks.c **** 	{
2817:FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 4100              		.loc 1 2817 0 discriminator 3
 4101 000c 7A68     		ldr	r2, [r7, #4]	@ tmp112, uxPriority
 4102 000e 1346     		mov	r3, r2	@ tmp113, tmp112
 4103 0010 9B00     		lsls	r3, r3, #2	@ tmp113, tmp113,
 4104 0012 1344     		add	r3, r3, r2	@ tmp113, tmp112
 4105 0014 9B00     		lsls	r3, r3, #2	@ tmp114, tmp113,
 4106 0016 124A     		ldr	r2, .L276	@ tmp115,
 4107 0018 1344     		add	r3, r3, r2	@ _1, tmp115
 4108 001a 1846     		mov	r0, r3	@, _1
 4109 001c FFF7FEFF 		bl	vListInitialise	@
 4110              	@ FreeRTOS/tasks.c:2815: 	for( uxPriority = ( UBaseT_t ) 0U; uxPriority < ( UBaseT_t ) configMAX_PR
2815:FreeRTOS/tasks.c **** 	{
 4111              		.loc 1 2815 0 discriminator 3
 4112 0020 7B68     		ldr	r3, [r7, #4]	@ tmp117, uxPriority
 4113 0022 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 4114 0024 7B60     		str	r3, [r7, #4]	@ tmp116, uxPriority
 4115              	.L274:
 4116              	@ FreeRTOS/tasks.c:2815: 	for( uxPriority = ( UBaseT_t ) 0U; uxPriority < ( UBaseT_t ) configMAX_PR
2815:FreeRTOS/tasks.c **** 	{
 4117              		.loc 1 2815 0 is_stmt 0 discriminator 1
 4118 0026 7B68     		ldr	r3, [r7, #4]	@ tmp118, uxPriority
 4119 0028 072B     		cmp	r3, #7	@ tmp118,
 4120 002a EFD9     		bls	.L275	@,
 4121              	@ FreeRTOS/tasks.c:2820: 	vListInitialise( &xDelayedTaskList1 );
2818:FreeRTOS/tasks.c **** 	}
2819:FreeRTOS/tasks.c **** 
2820:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 4122              		.loc 1 2820 0 is_stmt 1
 4123 002c 0D48     		ldr	r0, .L276+4	@,
 4124 002e FFF7FEFF 		bl	vListInitialise	@
 4125              	@ FreeRTOS/tasks.c:2821: 	vListInitialise( &xDelayedTaskList2 );
2821:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 4126              		.loc 1 2821 0
 4127 0032 0D48     		ldr	r0, .L276+8	@,
 4128 0034 FFF7FEFF 		bl	vListInitialise	@
 4129              	@ FreeRTOS/tasks.c:2822: 	vListInitialise( &xPendingReadyList );
2822:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 4130              		.loc 1 2822 0
 4131 0038 0C48     		ldr	r0, .L276+12	@,
 4132 003a FFF7FEFF 		bl	vListInitialise	@
 4133              	@ FreeRTOS/tasks.c:2826: 		vListInitialise( &xTasksWaitingTermination );
2823:FreeRTOS/tasks.c **** 
2824:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2825:FreeRTOS/tasks.c **** 	{
2826:FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 4134              		.loc 1 2826 0
ARM GAS  /tmp/ccTV2SzP.s 			page 127


 4135 003e 0C48     		ldr	r0, .L276+16	@,
 4136 0040 FFF7FEFF 		bl	vListInitialise	@
 4137              	@ FreeRTOS/tasks.c:2832: 		vListInitialise( &xSuspendedTaskList );
2827:FreeRTOS/tasks.c **** 	}
2828:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
2829:FreeRTOS/tasks.c **** 
2830:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2831:FreeRTOS/tasks.c **** 	{
2832:FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 4138              		.loc 1 2832 0
 4139 0044 0B48     		ldr	r0, .L276+20	@,
 4140 0046 FFF7FEFF 		bl	vListInitialise	@
 4141              	@ FreeRTOS/tasks.c:2838: 	pxDelayedTaskList = &xDelayedTaskList1;
2833:FreeRTOS/tasks.c **** 	}
2834:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2835:FreeRTOS/tasks.c **** 
2836:FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2837:FreeRTOS/tasks.c **** 	using list2. */
2838:FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 4142              		.loc 1 2838 0
 4143 004a 0B4B     		ldr	r3, .L276+24	@ tmp119,
 4144 004c 054A     		ldr	r2, .L276+4	@ tmp120,
 4145 004e 1A60     		str	r2, [r3]	@ tmp120, pxDelayedTaskList
 4146              	@ FreeRTOS/tasks.c:2839: 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
2839:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 4147              		.loc 1 2839 0
 4148 0050 0A4B     		ldr	r3, .L276+28	@ tmp121,
 4149 0052 054A     		ldr	r2, .L276+8	@ tmp122,
 4150 0054 1A60     		str	r2, [r3]	@ tmp122, pxOverflowDelayedTaskList
 4151              	@ FreeRTOS/tasks.c:2840: }
2840:FreeRTOS/tasks.c **** }
 4152              		.loc 1 2840 0
 4153 0056 00BF     		nop
 4154 0058 0837     		adds	r7, r7, #8	@,,
 4155              		.cfi_def_cfa_offset 8
 4156 005a BD46     		mov	sp, r7	@,
 4157              		.cfi_def_cfa_register 13
 4158              		@ sp needed	@
 4159 005c 80BD     		pop	{r7, pc}	@
 4160              	.L277:
 4161 005e 00BF     		.align	2
 4162              	.L276:
 4163 0060 00000000 		.word	pxReadyTasksLists
 4164 0064 00000000 		.word	xDelayedTaskList1
 4165 0068 00000000 		.word	xDelayedTaskList2
 4166 006c 00000000 		.word	xPendingReadyList
 4167 0070 00000000 		.word	xTasksWaitingTermination
 4168 0074 00000000 		.word	xSuspendedTaskList
 4169 0078 00000000 		.word	pxDelayedTaskList
 4170 007c 00000000 		.word	pxOverflowDelayedTaskList
 4171              		.cfi_endproc
 4172              	.LFE32:
 4173              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 4174              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 4175              		.align	1
 4176              		.syntax unified
 4177              		.thumb
ARM GAS  /tmp/ccTV2SzP.s 			page 128


 4178              		.thumb_func
 4179              		.fpu softvfp
 4180              		.type	prvCheckTasksWaitingTermination, %function
 4181              	prvCheckTasksWaitingTermination:
 4182              	.LFB33:
2841:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2842:FreeRTOS/tasks.c **** 
2843:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2844:FreeRTOS/tasks.c **** {
 4183              		.loc 1 2844 0
 4184              		.cfi_startproc
 4185              		@ args = 0, pretend = 0, frame = 8
 4186              		@ frame_needed = 1, uses_anonymous_args = 0
 4187 0000 80B5     		push	{r7, lr}	@
 4188              		.cfi_def_cfa_offset 8
 4189              		.cfi_offset 7, -8
 4190              		.cfi_offset 14, -4
 4191 0002 82B0     		sub	sp, sp, #8	@,,
 4192              		.cfi_def_cfa_offset 16
 4193 0004 00AF     		add	r7, sp, #0	@,,
 4194              		.cfi_def_cfa_register 7
 4195              	.LBB15:
 4196              	@ FreeRTOS/tasks.c:2851: 		while( uxTasksDeleted > ( UBaseT_t ) 0U )
2845:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2846:FreeRTOS/tasks.c **** 	{
2847:FreeRTOS/tasks.c **** 		BaseT_t xListIsEmpty;
2848:FreeRTOS/tasks.c **** 
2849:FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2850:FreeRTOS/tasks.c **** 		too often in the idle task. */
2851:FreeRTOS/tasks.c **** 		while( uxTasksDeleted > ( UBaseT_t ) 0U )
 4197              		.loc 1 2851 0
 4198 0006 28E0     		b	.L279	@
 4199              	.L280:
 4200              	@ FreeRTOS/tasks.c:2853: 			vTaskSuspendAll();
2852:FreeRTOS/tasks.c **** 		{
2853:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 4201              		.loc 1 2853 0
 4202 0008 FFF7FEFF 		bl	vTaskSuspendAll	@
 4203              	@ FreeRTOS/tasks.c:2855: 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
2854:FreeRTOS/tasks.c **** 			{
2855:FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 4204              		.loc 1 2855 0
 4205 000c 174B     		ldr	r3, .L281	@ tmp119,
 4206 000e 1B68     		ldr	r3, [r3]	@ _1, xTasksWaitingTermination.uxNumberOfItems
 4207 0010 002B     		cmp	r3, #0	@ _1,
 4208 0012 0CBF     		ite	eq
 4209 0014 0123     		moveq	r3, #1	@ tmp121,
 4210 0016 0023     		movne	r3, #0	@ tmp121,
 4211 0018 DBB2     		uxtb	r3, r3	@ _2, tmp120
 4212 001a 7B60     		str	r3, [r7, #4]	@ _2, xListIsEmpty
 4213              	@ FreeRTOS/tasks.c:2857: 			( void ) xTaskResumeAll();
2856:FreeRTOS/tasks.c **** 			}
2857:FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
 4214              		.loc 1 2857 0
 4215 001c FFF7FEFF 		bl	xTaskResumeAll	@
 4216              	@ FreeRTOS/tasks.c:2859: 			if( xListIsEmpty == pdFALSE )
2858:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 129


2859:FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 4217              		.loc 1 2859 0
 4218 0020 7B68     		ldr	r3, [r7, #4]	@ tmp122, xListIsEmpty
 4219 0022 002B     		cmp	r3, #0	@ tmp122,
 4220 0024 19D1     		bne	.L279	@,
 4221              	.LBB16:
 4222              	@ FreeRTOS/tasks.c:2863: 				taskENTER_CRITICAL();
2860:FreeRTOS/tasks.c **** 			{
2861:FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
2862:FreeRTOS/tasks.c **** 
2863:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 4223              		.loc 1 2863 0
 4224 0026 FFF7FEFF 		bl	vPortEnterCritical	@
 4225              	@ FreeRTOS/tasks.c:2865: 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTerm
2864:FreeRTOS/tasks.c **** 				{
2865:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 4226              		.loc 1 2865 0
 4227 002a 104B     		ldr	r3, .L281	@ tmp123,
 4228 002c DB68     		ldr	r3, [r3, #12]	@ _3, xTasksWaitingTermination.xListEnd.pxNext
 4229 002e DB68     		ldr	r3, [r3, #12]	@ tmp124, _3->pvOwner
 4230 0030 3B60     		str	r3, [r7]	@ tmp124, pxTCB
 4231              	@ FreeRTOS/tasks.c:2866: 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
2866:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 4232              		.loc 1 2866 0
 4233 0032 3B68     		ldr	r3, [r7]	@ tmp125, pxTCB
 4234 0034 0433     		adds	r3, r3, #4	@ _4, tmp125,
 4235 0036 1846     		mov	r0, r3	@, _4
 4236 0038 FFF7FEFF 		bl	uxListRemove	@
 4237              	@ FreeRTOS/tasks.c:2867: 					--uxCurrentNumberOfTasks;
2867:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 4238              		.loc 1 2867 0
 4239 003c 0C4B     		ldr	r3, .L281+4	@ tmp126,
 4240 003e 1B68     		ldr	r3, [r3]	@ uxCurrentNumberOfTasks.105_5, uxCurrentNumberOfTasks
 4241 0040 013B     		subs	r3, r3, #1	@ _6, uxCurrentNumberOfTasks.105_5,
 4242 0042 0B4A     		ldr	r2, .L281+4	@ tmp127,
 4243 0044 1360     		str	r3, [r2]	@ _6, uxCurrentNumberOfTasks
 4244              	@ FreeRTOS/tasks.c:2868: 					--uxTasksDeleted;
2868:FreeRTOS/tasks.c **** 					--uxTasksDeleted;
 4245              		.loc 1 2868 0
 4246 0046 0B4B     		ldr	r3, .L281+8	@ tmp128,
 4247 0048 1B68     		ldr	r3, [r3]	@ uxTasksDeleted.106_7, uxTasksDeleted
 4248 004a 013B     		subs	r3, r3, #1	@ _8, uxTasksDeleted.106_7,
 4249 004c 094A     		ldr	r2, .L281+8	@ tmp129,
 4250 004e 1360     		str	r3, [r2]	@ _8, uxTasksDeleted
 4251              	@ FreeRTOS/tasks.c:2870: 				taskEXIT_CRITICAL();
2869:FreeRTOS/tasks.c **** 				}
2870:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 4252              		.loc 1 2870 0
 4253 0050 FFF7FEFF 		bl	vPortExitCritical	@
 4254              	@ FreeRTOS/tasks.c:2872: 				prvDeleteTCB( pxTCB );
2871:FreeRTOS/tasks.c **** 
2872:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 4255              		.loc 1 2872 0
 4256 0054 3868     		ldr	r0, [r7]	@, pxTCB
 4257 0056 FFF7FEFF 		bl	prvDeleteTCB	@
 4258              	.L279:
 4259              	.LBE16:
ARM GAS  /tmp/ccTV2SzP.s 			page 130


 4260              	@ FreeRTOS/tasks.c:2851: 		while( uxTasksDeleted > ( UBaseT_t ) 0U )
2851:FreeRTOS/tasks.c **** 		{
 4261              		.loc 1 2851 0
 4262 005a 064B     		ldr	r3, .L281+8	@ tmp130,
 4263 005c 1B68     		ldr	r3, [r3]	@ uxTasksDeleted.107_9, uxTasksDeleted
 4264 005e 002B     		cmp	r3, #0	@ uxTasksDeleted.107_9,
 4265 0060 D2D1     		bne	.L280	@,
 4266              	.LBE15:
 4267              	@ FreeRTOS/tasks.c:2881: }
2873:FreeRTOS/tasks.c **** 			}
2874:FreeRTOS/tasks.c **** 			else
2875:FreeRTOS/tasks.c **** 			{
2876:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2877:FreeRTOS/tasks.c **** 			}
2878:FreeRTOS/tasks.c **** 		}
2879:FreeRTOS/tasks.c **** 	}
2880:FreeRTOS/tasks.c **** 	#endif /* vTaskDelete */
2881:FreeRTOS/tasks.c **** }
 4268              		.loc 1 2881 0
 4269 0062 00BF     		nop
 4270 0064 0837     		adds	r7, r7, #8	@,,
 4271              		.cfi_def_cfa_offset 8
 4272 0066 BD46     		mov	sp, r7	@,
 4273              		.cfi_def_cfa_register 13
 4274              		@ sp needed	@
 4275 0068 80BD     		pop	{r7, pc}	@
 4276              	.L282:
 4277 006a 00BF     		.align	2
 4278              	.L281:
 4279 006c 00000000 		.word	xTasksWaitingTermination
 4280 0070 00000000 		.word	uxCurrentNumberOfTasks
 4281 0074 00000000 		.word	uxTasksDeleted
 4282              		.cfi_endproc
 4283              	.LFE33:
 4284              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 4285              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 4286              		.align	1
 4287              		.syntax unified
 4288              		.thumb
 4289              		.thumb_func
 4290              		.fpu softvfp
 4291              		.type	prvAddCurrentTaskToDelayedList, %function
 4292              	prvAddCurrentTaskToDelayedList:
 4293              	.LFB34:
2882:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2883:FreeRTOS/tasks.c **** 
2884:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake )
2885:FreeRTOS/tasks.c **** {
 4294              		.loc 1 2885 0
 4295              		.cfi_startproc
 4296              		@ args = 0, pretend = 0, frame = 8
 4297              		@ frame_needed = 1, uses_anonymous_args = 0
 4298 0000 80B5     		push	{r7, lr}	@
 4299              		.cfi_def_cfa_offset 8
 4300              		.cfi_offset 7, -8
 4301              		.cfi_offset 14, -4
 4302 0002 82B0     		sub	sp, sp, #8	@,,
ARM GAS  /tmp/ccTV2SzP.s 			page 131


 4303              		.cfi_def_cfa_offset 16
 4304 0004 00AF     		add	r7, sp, #0	@,,
 4305              		.cfi_def_cfa_register 7
 4306 0006 7860     		str	r0, [r7, #4]	@ xTimeToWake, xTimeToWake
 4307              	@ FreeRTOS/tasks.c:2887: 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake
2886:FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
2887:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 4308              		.loc 1 2887 0
 4309 0008 134B     		ldr	r3, .L287	@ tmp119,
 4310 000a 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.108_1, pxCurrentTCB
 4311 000c 7A68     		ldr	r2, [r7, #4]	@ tmp120, xTimeToWake
 4312 000e 5A60     		str	r2, [r3, #4]	@ tmp120, pxCurrentTCB.108_1->xGenericListItem.xItemValue
 4313              	@ FreeRTOS/tasks.c:2889: 	if( xTimeToWake < xTickCount )
2888:FreeRTOS/tasks.c **** 
2889:FreeRTOS/tasks.c **** 	if( xTimeToWake < xTickCount )
 4314              		.loc 1 2889 0
 4315 0010 124B     		ldr	r3, .L287+4	@ tmp121,
 4316 0012 1B68     		ldr	r3, [r3]	@ xTickCount.109_2, xTickCount
 4317 0014 7A68     		ldr	r2, [r7, #4]	@ tmp122, xTimeToWake
 4318 0016 9A42     		cmp	r2, r3	@ tmp122, xTickCount.109_2
 4319 0018 09D2     		bcs	.L284	@,
 4320              	@ FreeRTOS/tasks.c:2892: 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListIte
2890:FreeRTOS/tasks.c **** 	{
2891:FreeRTOS/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2892:FreeRTOS/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 4321              		.loc 1 2892 0
 4322 001a 114B     		ldr	r3, .L287+8	@ tmp123,
 4323 001c 1A68     		ldr	r2, [r3]	@ pxOverflowDelayedTaskList.110_3, pxOverflowDelayedTaskList
 4324 001e 0E4B     		ldr	r3, .L287	@ tmp124,
 4325 0020 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.111_4, pxCurrentTCB
 4326 0022 0433     		adds	r3, r3, #4	@ _5, pxCurrentTCB.111_4,
 4327 0024 1946     		mov	r1, r3	@, _5
 4328 0026 1046     		mov	r0, r2	@, pxOverflowDelayedTaskList.110_3
 4329 0028 FFF7FEFF 		bl	vListInsert	@
 4330              	@ FreeRTOS/tasks.c:2911: }
2893:FreeRTOS/tasks.c **** 	}
2894:FreeRTOS/tasks.c **** 	else
2895:FreeRTOS/tasks.c **** 	{
2896:FreeRTOS/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
2897:FreeRTOS/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2898:FreeRTOS/tasks.c **** 
2899:FreeRTOS/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2900:FreeRTOS/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2901:FreeRTOS/tasks.c **** 		too. */
2902:FreeRTOS/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
2903:FreeRTOS/tasks.c **** 		{
2904:FreeRTOS/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
2905:FreeRTOS/tasks.c **** 		}
2906:FreeRTOS/tasks.c **** 		else
2907:FreeRTOS/tasks.c **** 		{
2908:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2909:FreeRTOS/tasks.c **** 		}
2910:FreeRTOS/tasks.c **** 	}
2911:FreeRTOS/tasks.c **** }
 4331              		.loc 1 2911 0
 4332 002c 10E0     		b	.L286	@
 4333              	.L284:
ARM GAS  /tmp/ccTV2SzP.s 			page 132


 4334              	@ FreeRTOS/tasks.c:2897: 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2897:FreeRTOS/tasks.c **** 
 4335              		.loc 1 2897 0
 4336 002e 0D4B     		ldr	r3, .L287+12	@ tmp125,
 4337 0030 1A68     		ldr	r2, [r3]	@ pxDelayedTaskList.112_6, pxDelayedTaskList
 4338 0032 094B     		ldr	r3, .L287	@ tmp126,
 4339 0034 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.113_7, pxCurrentTCB
 4340 0036 0433     		adds	r3, r3, #4	@ _8, pxCurrentTCB.113_7,
 4341 0038 1946     		mov	r1, r3	@, _8
 4342 003a 1046     		mov	r0, r2	@, pxDelayedTaskList.112_6
 4343 003c FFF7FEFF 		bl	vListInsert	@
 4344              	@ FreeRTOS/tasks.c:2902: 		if( xTimeToWake < xNextTaskUnblockTime )
2902:FreeRTOS/tasks.c **** 		{
 4345              		.loc 1 2902 0
 4346 0040 094B     		ldr	r3, .L287+16	@ tmp127,
 4347 0042 1B68     		ldr	r3, [r3]	@ xNextTaskUnblockTime.114_9, xNextTaskUnblockTime
 4348 0044 7A68     		ldr	r2, [r7, #4]	@ tmp128, xTimeToWake
 4349 0046 9A42     		cmp	r2, r3	@ tmp128, xNextTaskUnblockTime.114_9
 4350 0048 02D2     		bcs	.L286	@,
 4351              	@ FreeRTOS/tasks.c:2904: 			xNextTaskUnblockTime = xTimeToWake;
2904:FreeRTOS/tasks.c **** 		}
 4352              		.loc 1 2904 0
 4353 004a 074A     		ldr	r2, .L287+16	@ tmp129,
 4354 004c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTimeToWake
 4355 004e 1360     		str	r3, [r2]	@ tmp130, xNextTaskUnblockTime
 4356              	.L286:
 4357              	@ FreeRTOS/tasks.c:2911: }
 4358              		.loc 1 2911 0
 4359 0050 00BF     		nop
 4360 0052 0837     		adds	r7, r7, #8	@,,
 4361              		.cfi_def_cfa_offset 8
 4362 0054 BD46     		mov	sp, r7	@,
 4363              		.cfi_def_cfa_register 13
 4364              		@ sp needed	@
 4365 0056 80BD     		pop	{r7, pc}	@
 4366              	.L288:
 4367              		.align	2
 4368              	.L287:
 4369 0058 00000000 		.word	pxCurrentTCB
 4370 005c 00000000 		.word	xTickCount
 4371 0060 00000000 		.word	pxOverflowDelayedTaskList
 4372 0064 00000000 		.word	pxDelayedTaskList
 4373 0068 00000000 		.word	xNextTaskUnblockTime
 4374              		.cfi_endproc
 4375              	.LFE34:
 4376              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 4377              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 4378              		.align	1
 4379              		.syntax unified
 4380              		.thumb
 4381              		.thumb_func
 4382              		.fpu softvfp
 4383              		.type	prvAllocateTCBAndStack, %function
 4384              	prvAllocateTCBAndStack:
 4385              	.LFB35:
2912:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2913:FreeRTOS/tasks.c **** 
ARM GAS  /tmp/ccTV2SzP.s 			page 133


2914:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
2915:FreeRTOS/tasks.c **** {
 4386              		.loc 1 2915 0
 4387              		.cfi_startproc
 4388              		@ args = 0, pretend = 0, frame = 16
 4389              		@ frame_needed = 1, uses_anonymous_args = 0
 4390 0000 80B5     		push	{r7, lr}	@
 4391              		.cfi_def_cfa_offset 8
 4392              		.cfi_offset 7, -8
 4393              		.cfi_offset 14, -4
 4394 0002 84B0     		sub	sp, sp, #16	@,,
 4395              		.cfi_def_cfa_offset 24
 4396 0004 00AF     		add	r7, sp, #0	@,,
 4397              		.cfi_def_cfa_register 7
 4398 0006 0346     		mov	r3, r0	@ tmp119, usStackDepth
 4399 0008 3960     		str	r1, [r7]	@ puxStackBuffer, puxStackBuffer
 4400 000a FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp120, usStackDepth
 4401              	@ FreeRTOS/tasks.c:2920: 	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
2916:FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
2917:FreeRTOS/tasks.c **** 
2918:FreeRTOS/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2919:FreeRTOS/tasks.c **** 	the implementation of the port malloc function. */
2920:FreeRTOS/tasks.c **** 	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 4402              		.loc 1 2920 0
 4403 000c 5020     		movs	r0, #80	@,
 4404 000e FFF7FEFF 		bl	pvPortMalloc	@
 4405 0012 F860     		str	r0, [r7, #12]	@, pxNewTCB
 4406              	@ FreeRTOS/tasks.c:2922: 	if( pxNewTCB != NULL )
2921:FreeRTOS/tasks.c **** 
2922:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 4407              		.loc 1 2922 0
 4408 0014 FB68     		ldr	r3, [r7, #12]	@ tmp121, pxNewTCB
 4409 0016 002B     		cmp	r3, #0	@ tmp121,
 4410 0018 1ED0     		beq	.L290	@,
 4411              	@ FreeRTOS/tasks.c:2927: 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) u
2923:FreeRTOS/tasks.c **** 	{
2924:FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2925:FreeRTOS/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2926:FreeRTOS/tasks.c **** 		be deleted later if required. */
2927:FreeRTOS/tasks.c **** 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( S
 4412              		.loc 1 2927 0
 4413 001a 3B68     		ldr	r3, [r7]	@ tmp122, puxStackBuffer
 4414 001c 002B     		cmp	r3, #0	@ tmp122,
 4415 001e 06D1     		bne	.L291	@,
 4416              	@ FreeRTOS/tasks.c:2927: 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) u
 4417              		.loc 1 2927 0 is_stmt 0 discriminator 1
 4418 0020 FB88     		ldrh	r3, [r7, #6]	@ _1, usStackDepth
 4419 0022 9B00     		lsls	r3, r3, #2	@ _2, _1,
 4420 0024 1846     		mov	r0, r3	@, _2
 4421 0026 FFF7FEFF 		bl	pvPortMalloc	@
 4422 002a 0346     		mov	r3, r0	@ iftmp.115_8,
 4423 002c 00E0     		b	.L292	@
 4424              	.L291:
 4425              	@ FreeRTOS/tasks.c:2927: 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) u
 4426              		.loc 1 2927 0 discriminator 2
 4427 002e 3B68     		ldr	r3, [r7]	@ iftmp.115_8, puxStackBuffer
 4428              	.L292:
ARM GAS  /tmp/ccTV2SzP.s 			page 134


 4429              	@ FreeRTOS/tasks.c:2927: 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) u
 4430              		.loc 1 2927 0 discriminator 4
 4431 0030 FA68     		ldr	r2, [r7, #12]	@ tmp123, pxNewTCB
 4432 0032 1363     		str	r3, [r2, #48]	@ iftmp.115_8, pxNewTCB_13->pxStack
 4433              	@ FreeRTOS/tasks.c:2929: 		if( pxNewTCB->pxStack == NULL )
2928:FreeRTOS/tasks.c **** 
2929:FreeRTOS/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 4434              		.loc 1 2929 0 is_stmt 1 discriminator 4
 4435 0034 FB68     		ldr	r3, [r7, #12]	@ tmp124, pxNewTCB
 4436 0036 1B6B     		ldr	r3, [r3, #48]	@ _3, pxNewTCB_13->pxStack
 4437 0038 002B     		cmp	r3, #0	@ _3,
 4438 003a 05D1     		bne	.L293	@,
 4439              	@ FreeRTOS/tasks.c:2932: 			vPortFree( pxNewTCB );
2930:FreeRTOS/tasks.c **** 		{
2931:FreeRTOS/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2932:FreeRTOS/tasks.c **** 			vPortFree( pxNewTCB );
 4440              		.loc 1 2932 0
 4441 003c F868     		ldr	r0, [r7, #12]	@, pxNewTCB
 4442 003e FFF7FEFF 		bl	vPortFree	@
 4443              	@ FreeRTOS/tasks.c:2933: 			pxNewTCB = NULL;
2933:FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
 4444              		.loc 1 2933 0
 4445 0042 0023     		movs	r3, #0	@ tmp125,
 4446 0044 FB60     		str	r3, [r7, #12]	@ tmp125, pxNewTCB
 4447 0046 07E0     		b	.L290	@
 4448              	.L293:
 4449              	@ FreeRTOS/tasks.c:2941: 				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size
2934:FreeRTOS/tasks.c **** 		}
2935:FreeRTOS/tasks.c **** 		else
2936:FreeRTOS/tasks.c **** 		{
2937:FreeRTOS/tasks.c **** 			/* Avoid dependency on memset() if it is not required. */
2938:FreeRTOS/tasks.c **** 			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_ux
2939:FreeRTOS/tasks.c **** 			{
2940:FreeRTOS/tasks.c **** 				/* Just to help debugging. */
2941:FreeRTOS/tasks.c **** 				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeo
 4450              		.loc 1 2941 0
 4451 0048 FB68     		ldr	r3, [r7, #12]	@ tmp126, pxNewTCB
 4452 004a 186B     		ldr	r0, [r3, #48]	@ _4, pxNewTCB_13->pxStack
 4453 004c FB88     		ldrh	r3, [r7, #6]	@ _5, usStackDepth
 4454 004e 9B00     		lsls	r3, r3, #2	@ _6, _5,
 4455 0050 1A46     		mov	r2, r3	@, _6
 4456 0052 A521     		movs	r1, #165	@,
 4457 0054 FFF7FEFF 		bl	memset	@
 4458              	.L290:
 4459              	@ FreeRTOS/tasks.c:2947: 	return pxNewTCB;
2942:FreeRTOS/tasks.c **** 			}
2943:FreeRTOS/tasks.c **** 			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( I
2944:FreeRTOS/tasks.c **** 		}
2945:FreeRTOS/tasks.c **** 	}
2946:FreeRTOS/tasks.c **** 
2947:FreeRTOS/tasks.c **** 	return pxNewTCB;
 4460              		.loc 1 2947 0
 4461 0058 FB68     		ldr	r3, [r7, #12]	@ _23, pxNewTCB
 4462              	@ FreeRTOS/tasks.c:2948: }
2948:FreeRTOS/tasks.c **** }
 4463              		.loc 1 2948 0
 4464 005a 1846     		mov	r0, r3	@, <retval>
ARM GAS  /tmp/ccTV2SzP.s 			page 135


 4465 005c 1037     		adds	r7, r7, #16	@,,
 4466              		.cfi_def_cfa_offset 8
 4467 005e BD46     		mov	sp, r7	@,
 4468              		.cfi_def_cfa_register 13
 4469              		@ sp needed	@
 4470 0060 80BD     		pop	{r7, pc}	@
 4471              		.cfi_endproc
 4472              	.LFE35:
 4473              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 4474              		.section	.text.prvListTaskWithinSingleList,"ax",%progbits
 4475              		.align	1
 4476              		.syntax unified
 4477              		.thumb
 4478              		.thumb_func
 4479              		.fpu softvfp
 4480              		.type	prvListTaskWithinSingleList, %function
 4481              	prvListTaskWithinSingleList:
 4482              	.LFB36:
2949:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:FreeRTOS/tasks.c **** 
2951:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2952:FreeRTOS/tasks.c **** 
2953:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
2954:FreeRTOS/tasks.c **** 	{
 4483              		.loc 1 2954 0
 4484              		.cfi_startproc
 4485              		@ args = 0, pretend = 0, frame = 40
 4486              		@ frame_needed = 1, uses_anonymous_args = 0
 4487 0000 90B5     		push	{r4, r7, lr}	@
 4488              		.cfi_def_cfa_offset 12
 4489              		.cfi_offset 4, -12
 4490              		.cfi_offset 7, -8
 4491              		.cfi_offset 14, -4
 4492 0002 8BB0     		sub	sp, sp, #44	@,,
 4493              		.cfi_def_cfa_offset 56
 4494 0004 00AF     		add	r7, sp, #0	@,,
 4495              		.cfi_def_cfa_register 7
 4496 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 4497 0008 B960     		str	r1, [r7, #8]	@ pxList, pxList
 4498 000a 1346     		mov	r3, r2	@ tmp152, eState
 4499 000c FB71     		strb	r3, [r7, #7]	@ tmp153, eState
 4500              	@ FreeRTOS/tasks.c:2956: 	UBaseT_t uxTask = 0;
2955:FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
2956:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0;
 4501              		.loc 1 2956 0
 4502 000e 0023     		movs	r3, #0	@ tmp154,
 4503 0010 7B62     		str	r3, [r7, #36]	@ tmp154, uxTask
 4504              	@ FreeRTOS/tasks.c:2958: 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseT_t ) 0 )
2957:FreeRTOS/tasks.c **** 
2958:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseT_t ) 0 )
 4505              		.loc 1 2958 0
 4506 0012 BB68     		ldr	r3, [r7, #8]	@ tmp155, pxList
 4507 0014 1B68     		ldr	r3, [r3]	@ _1, pxList_50(D)->uxNumberOfItems
 4508 0016 002B     		cmp	r3, #0	@ _1,
 4509 0018 78D0     		beq	.L296	@,
 4510              	.LBB17:
 4511              	@ FreeRTOS/tasks.c:2960: 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
ARM GAS  /tmp/ccTV2SzP.s 			page 136


2959:FreeRTOS/tasks.c **** 		{
2960:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4512              		.loc 1 2960 0
 4513 001a BB68     		ldr	r3, [r7, #8]	@ tmp156, pxList
 4514 001c 3B62     		str	r3, [r7, #32]	@ tmp156, pxConstList
 4515 001e 3B6A     		ldr	r3, [r7, #32]	@ tmp157, pxConstList
 4516 0020 5B68     		ldr	r3, [r3, #4]	@ _2, pxConstList_51->pxIndex
 4517 0022 5A68     		ldr	r2, [r3, #4]	@ _3, _2->pxNext
 4518 0024 3B6A     		ldr	r3, [r7, #32]	@ tmp158, pxConstList
 4519 0026 5A60     		str	r2, [r3, #4]	@ _3, pxConstList_51->pxIndex
 4520 0028 3B6A     		ldr	r3, [r7, #32]	@ tmp159, pxConstList
 4521 002a 5A68     		ldr	r2, [r3, #4]	@ _4, pxConstList_51->pxIndex
 4522 002c 3B6A     		ldr	r3, [r7, #32]	@ tmp160, pxConstList
 4523 002e 0833     		adds	r3, r3, #8	@ _5, tmp160,
 4524 0030 9A42     		cmp	r2, r3	@ _4, _5
 4525 0032 04D1     		bne	.L297	@,
 4526              	@ FreeRTOS/tasks.c:2960: 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4527              		.loc 1 2960 0 is_stmt 0 discriminator 1
 4528 0034 3B6A     		ldr	r3, [r7, #32]	@ tmp161, pxConstList
 4529 0036 5B68     		ldr	r3, [r3, #4]	@ _6, pxConstList_51->pxIndex
 4530 0038 5A68     		ldr	r2, [r3, #4]	@ _7, _6->pxNext
 4531 003a 3B6A     		ldr	r3, [r7, #32]	@ tmp162, pxConstList
 4532 003c 5A60     		str	r2, [r3, #4]	@ _7, pxConstList_51->pxIndex
 4533              	.L297:
 4534              	@ FreeRTOS/tasks.c:2960: 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 4535              		.loc 1 2960 0 discriminator 3
 4536 003e 3B6A     		ldr	r3, [r7, #32]	@ tmp163, pxConstList
 4537 0040 5B68     		ldr	r3, [r3, #4]	@ _8, pxConstList_51->pxIndex
 4538 0042 DB68     		ldr	r3, [r3, #12]	@ tmp164, _8->pvOwner
 4539 0044 FB61     		str	r3, [r7, #28]	@ tmp164, pxFirstTCB
 4540              	.L300:
 4541              	.LBE17:
 4542              	.LBB18:
 4543              	@ FreeRTOS/tasks.c:2968: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2961:FreeRTOS/tasks.c **** 
2962:FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
2963:FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
2964:FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
2965:FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
2966:FreeRTOS/tasks.c **** 			do
2967:FreeRTOS/tasks.c **** 			{
2968:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 4544              		.loc 1 2968 0 is_stmt 1
 4545 0046 BB68     		ldr	r3, [r7, #8]	@ tmp165, pxList
 4546 0048 BB61     		str	r3, [r7, #24]	@ tmp165, pxConstList
 4547 004a BB69     		ldr	r3, [r7, #24]	@ tmp166, pxConstList
 4548 004c 5B68     		ldr	r3, [r3, #4]	@ _9, pxConstList_55->pxIndex
 4549 004e 5A68     		ldr	r2, [r3, #4]	@ _10, _9->pxNext
 4550 0050 BB69     		ldr	r3, [r7, #24]	@ tmp167, pxConstList
 4551 0052 5A60     		str	r2, [r3, #4]	@ _10, pxConstList_55->pxIndex
 4552 0054 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxConstList
 4553 0056 5A68     		ldr	r2, [r3, #4]	@ _11, pxConstList_55->pxIndex
 4554 0058 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxConstList
 4555 005a 0833     		adds	r3, r3, #8	@ _12, tmp169,
 4556 005c 9A42     		cmp	r2, r3	@ _11, _12
 4557 005e 04D1     		bne	.L298	@,
 4558              	@ FreeRTOS/tasks.c:2968: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
ARM GAS  /tmp/ccTV2SzP.s 			page 137


 4559              		.loc 1 2968 0 is_stmt 0 discriminator 1
 4560 0060 BB69     		ldr	r3, [r7, #24]	@ tmp170, pxConstList
 4561 0062 5B68     		ldr	r3, [r3, #4]	@ _13, pxConstList_55->pxIndex
 4562 0064 5A68     		ldr	r2, [r3, #4]	@ _14, _13->pxNext
 4563 0066 BB69     		ldr	r3, [r7, #24]	@ tmp171, pxConstList
 4564 0068 5A60     		str	r2, [r3, #4]	@ _14, pxConstList_55->pxIndex
 4565              	.L298:
 4566              	@ FreeRTOS/tasks.c:2968: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 4567              		.loc 1 2968 0 discriminator 3
 4568 006a BB69     		ldr	r3, [r7, #24]	@ tmp172, pxConstList
 4569 006c 5B68     		ldr	r3, [r3, #4]	@ _15, pxConstList_55->pxIndex
 4570 006e DB68     		ldr	r3, [r3, #12]	@ tmp173, _15->pvOwner
 4571 0070 7B61     		str	r3, [r7, #20]	@ tmp173, pxNextTCB
 4572              	.LBE18:
 4573              	@ FreeRTOS/tasks.c:2970: 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
2969:FreeRTOS/tasks.c **** 
2970:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 4574              		.loc 1 2970 0 is_stmt 1 discriminator 3
 4575 0072 7B6A     		ldr	r3, [r7, #36]	@ tmp174, uxTask
 4576 0074 5B01     		lsls	r3, r3, #5	@ _16, tmp174,
 4577 0076 FA68     		ldr	r2, [r7, #12]	@ tmp175, pxTaskStatusArray
 4578 0078 1344     		add	r3, r3, r2	@ _17, tmp175
 4579 007a 7A69     		ldr	r2, [r7, #20]	@ tmp176, pxNextTCB
 4580 007c 1A60     		str	r2, [r3]	@ tmp176, _17->xHandle
 4581              	@ FreeRTOS/tasks.c:2971: 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB
2971:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 4582              		.loc 1 2971 0 discriminator 3
 4583 007e 7B6A     		ldr	r3, [r7, #36]	@ tmp177, uxTask
 4584 0080 5B01     		lsls	r3, r3, #5	@ _18, tmp177,
 4585 0082 FA68     		ldr	r2, [r7, #12]	@ tmp178, pxTaskStatusArray
 4586 0084 1344     		add	r3, r3, r2	@ _19, tmp178
 4587 0086 7A69     		ldr	r2, [r7, #20]	@ tmp179, pxNextTCB
 4588 0088 3432     		adds	r2, r2, #52	@ _20, tmp179,
 4589 008a 5A60     		str	r2, [r3, #4]	@ _20, _19->pcTaskName
 4590              	@ FreeRTOS/tasks.c:2972: 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
2972:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 4591              		.loc 1 2972 0 discriminator 3
 4592 008c 7B6A     		ldr	r3, [r7, #36]	@ tmp180, uxTask
 4593 008e 5B01     		lsls	r3, r3, #5	@ _21, tmp180,
 4594 0090 FA68     		ldr	r2, [r7, #12]	@ tmp181, pxTaskStatusArray
 4595 0092 1344     		add	r3, r3, r2	@ _22, tmp181
 4596 0094 7A69     		ldr	r2, [r7, #20]	@ tmp182, pxNextTCB
 4597 0096 126C     		ldr	r2, [r2, #64]	@ _23, pxNextTCB_58->uxTCBNumber
 4598 0098 9A60     		str	r2, [r3, #8]	@ _23, _22->xTaskNumber
 4599              	@ FreeRTOS/tasks.c:2973: 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
2973:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 4600              		.loc 1 2973 0 discriminator 3
 4601 009a 7B6A     		ldr	r3, [r7, #36]	@ tmp183, uxTask
 4602 009c 5B01     		lsls	r3, r3, #5	@ _24, tmp183,
 4603 009e FA68     		ldr	r2, [r7, #12]	@ tmp184, pxTaskStatusArray
 4604 00a0 1344     		add	r3, r3, r2	@ _25, tmp184
 4605 00a2 FA79     		ldrb	r2, [r7, #7]	@ tmp185, eState
 4606 00a4 1A73     		strb	r2, [r3, #12]	@ tmp185, _25->eCurrentState
 4607              	@ FreeRTOS/tasks.c:2974: 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
2974:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 4608              		.loc 1 2974 0 discriminator 3
 4609 00a6 7B6A     		ldr	r3, [r7, #36]	@ tmp186, uxTask
ARM GAS  /tmp/ccTV2SzP.s 			page 138


 4610 00a8 5B01     		lsls	r3, r3, #5	@ _26, tmp186,
 4611 00aa FA68     		ldr	r2, [r7, #12]	@ tmp187, pxTaskStatusArray
 4612 00ac 1344     		add	r3, r3, r2	@ _27, tmp187
 4613 00ae 7A69     		ldr	r2, [r7, #20]	@ tmp188, pxNextTCB
 4614 00b0 D26A     		ldr	r2, [r2, #44]	@ _28, pxNextTCB_58->uxPriority
 4615 00b2 1A61     		str	r2, [r3, #16]	@ _28, _27->uxCurrentPriority
 4616              	@ FreeRTOS/tasks.c:2981: 					if( eState == eSuspended )
2975:FreeRTOS/tasks.c **** 
2976:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2977:FreeRTOS/tasks.c **** 				{
2978:FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a chance
2979:FreeRTOS/tasks.c **** 					it is actually just blocked indefinitely - so really it should
2980:FreeRTOS/tasks.c **** 					be reported as being in the Blocked state. */
2981:FreeRTOS/tasks.c **** 					if( eState == eSuspended )
 4617              		.loc 1 2981 0 discriminator 3
 4618 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2	@ tmp189, eState
 4619 00b6 032B     		cmp	r3, #3	@ tmp189,
 4620 00b8 09D1     		bne	.L299	@,
 4621              	@ FreeRTOS/tasks.c:2983: 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NUL
2982:FreeRTOS/tasks.c **** 					{
2983:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 4622              		.loc 1 2983 0
 4623 00ba 7B69     		ldr	r3, [r7, #20]	@ tmp190, pxNextTCB
 4624 00bc 9B6A     		ldr	r3, [r3, #40]	@ _29, pxNextTCB_58->xEventListItem.pvContainer
 4625 00be 002B     		cmp	r3, #0	@ _29,
 4626 00c0 05D0     		beq	.L299	@,
 4627              	@ FreeRTOS/tasks.c:2985: 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
2984:FreeRTOS/tasks.c **** 						{
2985:FreeRTOS/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 4628              		.loc 1 2985 0
 4629 00c2 7B6A     		ldr	r3, [r7, #36]	@ tmp191, uxTask
 4630 00c4 5B01     		lsls	r3, r3, #5	@ _30, tmp191,
 4631 00c6 FA68     		ldr	r2, [r7, #12]	@ tmp192, pxTaskStatusArray
 4632 00c8 1344     		add	r3, r3, r2	@ _31, tmp192
 4633 00ca 0222     		movs	r2, #2	@ tmp193,
 4634 00cc 1A73     		strb	r2, [r3, #12]	@ tmp194, _31->eCurrentState
 4635              	.L299:
 4636              	@ FreeRTOS/tasks.c:2993: 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriorit
2986:FreeRTOS/tasks.c **** 						}
2987:FreeRTOS/tasks.c **** 					}
2988:FreeRTOS/tasks.c **** 				}
2989:FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
2990:FreeRTOS/tasks.c **** 
2991:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
2992:FreeRTOS/tasks.c **** 				{
2993:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 4637              		.loc 1 2993 0
 4638 00ce 7B6A     		ldr	r3, [r7, #36]	@ tmp195, uxTask
 4639 00d0 5B01     		lsls	r3, r3, #5	@ _32, tmp195,
 4640 00d2 FA68     		ldr	r2, [r7, #12]	@ tmp196, pxTaskStatusArray
 4641 00d4 1344     		add	r3, r3, r2	@ _33, tmp196
 4642 00d6 7A69     		ldr	r2, [r7, #20]	@ tmp197, pxNextTCB
 4643 00d8 926C     		ldr	r2, [r2, #72]	@ _34, pxNextTCB_58->uxBasePriority
 4644 00da 5A61     		str	r2, [r3, #20]	@ _34, _33->uxBasePriority
 4645              	@ FreeRTOS/tasks.c:3007: 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
2994:FreeRTOS/tasks.c **** 				}
2995:FreeRTOS/tasks.c **** 				#else
ARM GAS  /tmp/ccTV2SzP.s 			page 139


2996:FreeRTOS/tasks.c **** 				{
2997:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
2998:FreeRTOS/tasks.c **** 				}
2999:FreeRTOS/tasks.c **** 				#endif
3000:FreeRTOS/tasks.c **** 
3001:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3002:FreeRTOS/tasks.c **** 				{
3003:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3004:FreeRTOS/tasks.c **** 				}
3005:FreeRTOS/tasks.c **** 				#else
3006:FreeRTOS/tasks.c **** 				{
3007:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 4646              		.loc 1 3007 0
 4647 00dc 7B6A     		ldr	r3, [r7, #36]	@ tmp198, uxTask
 4648 00de 5B01     		lsls	r3, r3, #5	@ _35, tmp198,
 4649 00e0 FA68     		ldr	r2, [r7, #12]	@ tmp199, pxTaskStatusArray
 4650 00e2 1344     		add	r3, r3, r2	@ _36, tmp199
 4651 00e4 0022     		movs	r2, #0	@ tmp200,
 4652 00e6 9A61     		str	r2, [r3, #24]	@ tmp200, _36->ulRunTimeCounter
 4653              	@ FreeRTOS/tasks.c:3017: 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeSt
3008:FreeRTOS/tasks.c **** 				}
3009:FreeRTOS/tasks.c **** 				#endif
3010:FreeRTOS/tasks.c **** 
3011:FreeRTOS/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3012:FreeRTOS/tasks.c **** 				{
3013:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3014:FreeRTOS/tasks.c **** 				}
3015:FreeRTOS/tasks.c **** 				#else
3016:FreeRTOS/tasks.c **** 				{
3017:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
 4654              		.loc 1 3017 0
 4655 00e8 7B69     		ldr	r3, [r7, #20]	@ tmp201, pxNextTCB
 4656 00ea 196B     		ldr	r1, [r3, #48]	@ _37, pxNextTCB_58->pxStack
 4657 00ec 7B6A     		ldr	r3, [r7, #36]	@ tmp202, uxTask
 4658 00ee 5B01     		lsls	r3, r3, #5	@ _38, tmp202,
 4659 00f0 FA68     		ldr	r2, [r7, #12]	@ tmp203, pxTaskStatusArray
 4660 00f2 D418     		adds	r4, r2, r3	@ _39, tmp203, _38
 4661 00f4 0846     		mov	r0, r1	@, _37
 4662 00f6 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4663 00fa 0346     		mov	r3, r0	@ tmp204,
 4664 00fc A383     		strh	r3, [r4, #28]	@ movhi	@ tmp205, _39->usStackHighWaterMark
 4665              	@ FreeRTOS/tasks.c:3021: 				uxTask++;
3018:FreeRTOS/tasks.c **** 				}
3019:FreeRTOS/tasks.c **** 				#endif
3020:FreeRTOS/tasks.c **** 
3021:FreeRTOS/tasks.c **** 				uxTask++;
 4666              		.loc 1 3021 0
 4667 00fe 7B6A     		ldr	r3, [r7, #36]	@ tmp207, uxTask
 4668 0100 0133     		adds	r3, r3, #1	@ tmp206, tmp207,
 4669 0102 7B62     		str	r3, [r7, #36]	@ tmp206, uxTask
 4670              	@ FreeRTOS/tasks.c:3023: 			} while( pxNextTCB != pxFirstTCB );
3022:FreeRTOS/tasks.c **** 
3023:FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4671              		.loc 1 3023 0
 4672 0104 7A69     		ldr	r2, [r7, #20]	@ tmp208, pxNextTCB
 4673 0106 FB69     		ldr	r3, [r7, #28]	@ tmp209, pxFirstTCB
 4674 0108 9A42     		cmp	r2, r3	@ tmp208, tmp209
ARM GAS  /tmp/ccTV2SzP.s 			page 140


 4675 010a 9CD1     		bne	.L300	@,
 4676              	.L296:
 4677              	@ FreeRTOS/tasks.c:3030: 		return uxTask;
3024:FreeRTOS/tasks.c **** 		}
3025:FreeRTOS/tasks.c **** 		else
3026:FreeRTOS/tasks.c **** 		{
3027:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3028:FreeRTOS/tasks.c **** 		}
3029:FreeRTOS/tasks.c **** 
3030:FreeRTOS/tasks.c **** 		return uxTask;
 4678              		.loc 1 3030 0
 4679 010c 7B6A     		ldr	r3, [r7, #36]	@ _72, uxTask
 4680              	@ FreeRTOS/tasks.c:3031: 	}
3031:FreeRTOS/tasks.c **** 	}
 4681              		.loc 1 3031 0
 4682 010e 1846     		mov	r0, r3	@, <retval>
 4683 0110 2C37     		adds	r7, r7, #44	@,,
 4684              		.cfi_def_cfa_offset 12
 4685 0112 BD46     		mov	sp, r7	@,
 4686              		.cfi_def_cfa_register 13
 4687              		@ sp needed	@
 4688 0114 90BD     		pop	{r4, r7, pc}	@
 4689              		.cfi_endproc
 4690              	.LFE36:
 4691              		.size	prvListTaskWithinSingleList, .-prvListTaskWithinSingleList
 4692              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4693              		.align	1
 4694              		.syntax unified
 4695              		.thumb
 4696              		.thumb_func
 4697              		.fpu softvfp
 4698              		.type	prvTaskCheckFreeStackSpace, %function
 4699              	prvTaskCheckFreeStackSpace:
 4700              	.LFB37:
3032:FreeRTOS/tasks.c **** 
3033:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3034:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3035:FreeRTOS/tasks.c **** 
3036:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3037:FreeRTOS/tasks.c **** 
3038:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3039:FreeRTOS/tasks.c **** 	{
 4701              		.loc 1 3039 0
 4702              		.cfi_startproc
 4703              		@ args = 0, pretend = 0, frame = 16
 4704              		@ frame_needed = 1, uses_anonymous_args = 0
 4705              		@ link register save eliminated.
 4706 0000 80B4     		push	{r7}	@
 4707              		.cfi_def_cfa_offset 4
 4708              		.cfi_offset 7, -4
 4709 0002 85B0     		sub	sp, sp, #20	@,,
 4710              		.cfi_def_cfa_offset 24
 4711 0004 00AF     		add	r7, sp, #0	@,,
 4712              		.cfi_def_cfa_register 7
 4713 0006 7860     		str	r0, [r7, #4]	@ pucStackByte, pucStackByte
 4714              	@ FreeRTOS/tasks.c:3040: 	uint32_t ulCount = 0U;
3040:FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
ARM GAS  /tmp/ccTV2SzP.s 			page 141


 4715              		.loc 1 3040 0
 4716 0008 0023     		movs	r3, #0	@ tmp113,
 4717 000a FB60     		str	r3, [r7, #12]	@ tmp113, ulCount
 4718              	@ FreeRTOS/tasks.c:3042: 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3041:FreeRTOS/tasks.c **** 
3042:FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4719              		.loc 1 3042 0
 4720 000c 05E0     		b	.L303	@
 4721              	.L304:
 4722              	@ FreeRTOS/tasks.c:3044: 			pucStackByte -= portSTACK_GROWTH;
3043:FreeRTOS/tasks.c **** 		{
3044:FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4723              		.loc 1 3044 0
 4724 000e 7B68     		ldr	r3, [r7, #4]	@ tmp115, pucStackByte
 4725 0010 0133     		adds	r3, r3, #1	@ tmp114, tmp115,
 4726 0012 7B60     		str	r3, [r7, #4]	@ tmp114, pucStackByte
 4727              	@ FreeRTOS/tasks.c:3045: 			ulCount++;
3045:FreeRTOS/tasks.c **** 			ulCount++;
 4728              		.loc 1 3045 0
 4729 0014 FB68     		ldr	r3, [r7, #12]	@ tmp117, ulCount
 4730 0016 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 4731 0018 FB60     		str	r3, [r7, #12]	@ tmp116, ulCount
 4732              	.L303:
 4733              	@ FreeRTOS/tasks.c:3042: 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3042:FreeRTOS/tasks.c **** 		{
 4734              		.loc 1 3042 0
 4735 001a 7B68     		ldr	r3, [r7, #4]	@ tmp118, pucStackByte
 4736 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ _1, *pucStackByte_2
 4737 001e A52B     		cmp	r3, #165	@ _1,
 4738 0020 F5D0     		beq	.L304	@,
 4739              	@ FreeRTOS/tasks.c:3048: 		ulCount /= ( uint32_t ) sizeof( StackT_t ); /*lint !e961 Casting is not 
3046:FreeRTOS/tasks.c **** 		}
3047:FreeRTOS/tasks.c **** 
3048:FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackT_t ); /*lint !e961 Casting is not redundant on smaller arch
 4740              		.loc 1 3048 0
 4741 0022 FB68     		ldr	r3, [r7, #12]	@ tmp120, ulCount
 4742 0024 9B08     		lsrs	r3, r3, #2	@ tmp119, tmp120,
 4743 0026 FB60     		str	r3, [r7, #12]	@ tmp119, ulCount
 4744              	@ FreeRTOS/tasks.c:3050: 		return ( uint16_t ) ulCount;
3049:FreeRTOS/tasks.c **** 
3050:FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 4745              		.loc 1 3050 0
 4746 0028 FB68     		ldr	r3, [r7, #12]	@ tmp121, ulCount
 4747 002a 9BB2     		uxth	r3, r3	@ _8, tmp121
 4748              	@ FreeRTOS/tasks.c:3051: 	}
3051:FreeRTOS/tasks.c **** 	}
 4749              		.loc 1 3051 0
 4750 002c 1846     		mov	r0, r3	@, <retval>
 4751 002e 1437     		adds	r7, r7, #20	@,,
 4752              		.cfi_def_cfa_offset 4
 4753 0030 BD46     		mov	sp, r7	@,
 4754              		.cfi_def_cfa_register 13
 4755              		@ sp needed	@
 4756 0032 80BC     		pop	{r7}	@
 4757              		.cfi_restore 7
 4758              		.cfi_def_cfa_offset 0
 4759 0034 7047     		bx	lr	@
ARM GAS  /tmp/ccTV2SzP.s 			page 142


 4760              		.cfi_endproc
 4761              	.LFE37:
 4762              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 4763              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4764              		.align	1
 4765              		.global	uxTaskGetStackHighWaterMark
 4766              		.syntax unified
 4767              		.thumb
 4768              		.thumb_func
 4769              		.fpu softvfp
 4770              		.type	uxTaskGetStackHighWaterMark, %function
 4771              	uxTaskGetStackHighWaterMark:
 4772              	.LFB38:
3052:FreeRTOS/tasks.c **** 
3053:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3054:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3055:FreeRTOS/tasks.c **** 
3056:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3057:FreeRTOS/tasks.c **** 
3058:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3059:FreeRTOS/tasks.c **** 	{
 4773              		.loc 1 3059 0
 4774              		.cfi_startproc
 4775              		@ args = 0, pretend = 0, frame = 24
 4776              		@ frame_needed = 1, uses_anonymous_args = 0
 4777 0000 80B5     		push	{r7, lr}	@
 4778              		.cfi_def_cfa_offset 8
 4779              		.cfi_offset 7, -8
 4780              		.cfi_offset 14, -4
 4781 0002 86B0     		sub	sp, sp, #24	@,,
 4782              		.cfi_def_cfa_offset 32
 4783 0004 00AF     		add	r7, sp, #0	@,,
 4784              		.cfi_def_cfa_register 7
 4785 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 4786              	@ FreeRTOS/tasks.c:3064: 		pxTCB = prvGetTCBFromHandle( xTask );
3060:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3061:FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3062:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
3063:FreeRTOS/tasks.c **** 
3064:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4787              		.loc 1 3064 0
 4788 0008 7B68     		ldr	r3, [r7, #4]	@ tmp114, xTask
 4789 000a 002B     		cmp	r3, #0	@ tmp114,
 4790 000c 02D1     		bne	.L307	@,
 4791              	@ FreeRTOS/tasks.c:3064: 		pxTCB = prvGetTCBFromHandle( xTask );
 4792              		.loc 1 3064 0 is_stmt 0 discriminator 1
 4793 000e 094B     		ldr	r3, .L310	@ tmp115,
 4794 0010 1B68     		ldr	r3, [r3]	@ iftmp.116_2, pxCurrentTCB
 4795 0012 00E0     		b	.L308	@
 4796              	.L307:
 4797              	@ FreeRTOS/tasks.c:3064: 		pxTCB = prvGetTCBFromHandle( xTask );
 4798              		.loc 1 3064 0 discriminator 2
 4799 0014 7B68     		ldr	r3, [r7, #4]	@ iftmp.116_2, xTask
 4800              	.L308:
 4801              	@ FreeRTOS/tasks.c:3064: 		pxTCB = prvGetTCBFromHandle( xTask );
 4802              		.loc 1 3064 0 discriminator 4
 4803 0016 7B61     		str	r3, [r7, #20]	@ iftmp.116_2, pxTCB
ARM GAS  /tmp/ccTV2SzP.s 			page 143


 4804              	@ FreeRTOS/tasks.c:3068: 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3065:FreeRTOS/tasks.c **** 
3066:FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3067:FreeRTOS/tasks.c **** 		{
3068:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 4805              		.loc 1 3068 0 is_stmt 1 discriminator 4
 4806 0018 7B69     		ldr	r3, [r7, #20]	@ tmp116, pxTCB
 4807 001a 1B6B     		ldr	r3, [r3, #48]	@ tmp117, pxTCB_7->pxStack
 4808 001c 3B61     		str	r3, [r7, #16]	@ tmp117, pucEndOfStack
 4809              	@ FreeRTOS/tasks.c:3076: 		uxReturn = ( UBaseT_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3069:FreeRTOS/tasks.c **** 		}
3070:FreeRTOS/tasks.c **** 		#else
3071:FreeRTOS/tasks.c **** 		{
3072:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3073:FreeRTOS/tasks.c **** 		}
3074:FreeRTOS/tasks.c **** 		#endif
3075:FreeRTOS/tasks.c **** 
3076:FreeRTOS/tasks.c **** 		uxReturn = ( UBaseT_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 4810              		.loc 1 3076 0 discriminator 4
 4811 001e 3869     		ldr	r0, [r7, #16]	@, pucEndOfStack
 4812 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4813 0024 0346     		mov	r3, r0	@ tmp118,
 4814 0026 FB60     		str	r3, [r7, #12]	@ _1, uxReturn
 4815              	@ FreeRTOS/tasks.c:3078: 		return uxReturn;
3077:FreeRTOS/tasks.c **** 
3078:FreeRTOS/tasks.c **** 		return uxReturn;
 4816              		.loc 1 3078 0 discriminator 4
 4817 0028 FB68     		ldr	r3, [r7, #12]	@ _11, uxReturn
 4818              	@ FreeRTOS/tasks.c:3079: 	}
3079:FreeRTOS/tasks.c **** 	}
 4819              		.loc 1 3079 0 discriminator 4
 4820 002a 1846     		mov	r0, r3	@, <retval>
 4821 002c 1837     		adds	r7, r7, #24	@,,
 4822              		.cfi_def_cfa_offset 8
 4823 002e BD46     		mov	sp, r7	@,
 4824              		.cfi_def_cfa_register 13
 4825              		@ sp needed	@
 4826 0030 80BD     		pop	{r7, pc}	@
 4827              	.L311:
 4828 0032 00BF     		.align	2
 4829              	.L310:
 4830 0034 00000000 		.word	pxCurrentTCB
 4831              		.cfi_endproc
 4832              	.LFE38:
 4833              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 4834              		.section	.text.prvDeleteTCB,"ax",%progbits
 4835              		.align	1
 4836              		.syntax unified
 4837              		.thumb
 4838              		.thumb_func
 4839              		.fpu softvfp
 4840              		.type	prvDeleteTCB, %function
 4841              	prvDeleteTCB:
 4842              	.LFB39:
3080:FreeRTOS/tasks.c **** 
3081:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3082:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccTV2SzP.s 			page 144


3083:FreeRTOS/tasks.c **** 
3084:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3085:FreeRTOS/tasks.c **** 
3086:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3087:FreeRTOS/tasks.c **** 	{
 4843              		.loc 1 3087 0
 4844              		.cfi_startproc
 4845              		@ args = 0, pretend = 0, frame = 8
 4846              		@ frame_needed = 1, uses_anonymous_args = 0
 4847 0000 80B5     		push	{r7, lr}	@
 4848              		.cfi_def_cfa_offset 8
 4849              		.cfi_offset 7, -8
 4850              		.cfi_offset 14, -4
 4851 0002 82B0     		sub	sp, sp, #8	@,,
 4852              		.cfi_def_cfa_offset 16
 4853 0004 00AF     		add	r7, sp, #0	@,,
 4854              		.cfi_def_cfa_register 7
 4855 0006 7860     		str	r0, [r7, #4]	@ pxTCB, pxTCB
 4856              	@ FreeRTOS/tasks.c:3100: 		vPortFreeAligned( pxTCB->pxStack );
3088:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3089:FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3090:FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3091:FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3092:FreeRTOS/tasks.c **** 
3093:FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3094:FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3095:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3096:FreeRTOS/tasks.c **** 		{
3097:FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3098:FreeRTOS/tasks.c **** 		}
3099:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3100:FreeRTOS/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 4857              		.loc 1 3100 0
 4858 0008 7B68     		ldr	r3, [r7, #4]	@ tmp111, pxTCB
 4859 000a 1B6B     		ldr	r3, [r3, #48]	@ _1, pxTCB_3(D)->pxStack
 4860 000c 1846     		mov	r0, r3	@, _1
 4861 000e FFF7FEFF 		bl	vPortFree	@
 4862              	@ FreeRTOS/tasks.c:3101: 		vPortFree( pxTCB );
3101:FreeRTOS/tasks.c **** 		vPortFree( pxTCB );
 4863              		.loc 1 3101 0
 4864 0012 7868     		ldr	r0, [r7, #4]	@, pxTCB
 4865 0014 FFF7FEFF 		bl	vPortFree	@
 4866              	@ FreeRTOS/tasks.c:3102: 	}
3102:FreeRTOS/tasks.c **** 	}
 4867              		.loc 1 3102 0
 4868 0018 00BF     		nop
 4869 001a 0837     		adds	r7, r7, #8	@,,
 4870              		.cfi_def_cfa_offset 8
 4871 001c BD46     		mov	sp, r7	@,
 4872              		.cfi_def_cfa_register 13
 4873              		@ sp needed	@
 4874 001e 80BD     		pop	{r7, pc}	@
 4875              		.cfi_endproc
 4876              	.LFE39:
 4877              		.size	prvDeleteTCB, .-prvDeleteTCB
 4878              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4879              		.align	1
ARM GAS  /tmp/ccTV2SzP.s 			page 145


 4880              		.syntax unified
 4881              		.thumb
 4882              		.thumb_func
 4883              		.fpu softvfp
 4884              		.type	prvResetNextTaskUnblockTime, %function
 4885              	prvResetNextTaskUnblockTime:
 4886              	.LFB40:
3103:FreeRTOS/tasks.c **** 
3104:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3105:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3106:FreeRTOS/tasks.c **** 
3107:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3108:FreeRTOS/tasks.c **** {
 4887              		.loc 1 3108 0
 4888              		.cfi_startproc
 4889              		@ args = 0, pretend = 0, frame = 8
 4890              		@ frame_needed = 1, uses_anonymous_args = 0
 4891              		@ link register save eliminated.
 4892 0000 80B4     		push	{r7}	@
 4893              		.cfi_def_cfa_offset 4
 4894              		.cfi_offset 7, -4
 4895 0002 83B0     		sub	sp, sp, #12	@,,
 4896              		.cfi_def_cfa_offset 16
 4897 0004 00AF     		add	r7, sp, #0	@,,
 4898              		.cfi_def_cfa_register 7
 4899              	@ FreeRTOS/tasks.c:3111: 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3109:FreeRTOS/tasks.c **** TCB_t *pxTCB;
3110:FreeRTOS/tasks.c **** 
3111:FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4900              		.loc 1 3111 0
 4901 0006 0E4B     		ldr	r3, .L319	@ tmp116,
 4902 0008 1B68     		ldr	r3, [r3]	@ pxDelayedTaskList.118_1, pxDelayedTaskList
 4903 000a 1B68     		ldr	r3, [r3]	@ _2, pxDelayedTaskList.118_1->uxNumberOfItems
 4904 000c 002B     		cmp	r3, #0	@ _2,
 4905 000e 01D1     		bne	.L314	@,
 4906              	@ FreeRTOS/tasks.c:3111: 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4907              		.loc 1 3111 0 is_stmt 0 discriminator 1
 4908 0010 0123     		movs	r3, #1	@ iftmp.117_6,
 4909 0012 00E0     		b	.L315	@
 4910              	.L314:
 4911              	@ FreeRTOS/tasks.c:3111: 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4912              		.loc 1 3111 0 discriminator 2
 4913 0014 0023     		movs	r3, #0	@ iftmp.117_6,
 4914              	.L315:
 4915              	@ FreeRTOS/tasks.c:3111: 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4916              		.loc 1 3111 0 discriminator 4
 4917 0016 002B     		cmp	r3, #0	@ iftmp.117_6,
 4918 0018 04D0     		beq	.L316	@,
 4919              	@ FreeRTOS/tasks.c:3118: 		xNextTaskUnblockTime = portMAX_DELAY;
3112:FreeRTOS/tasks.c **** 	{
3113:FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set
3114:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime to the maximum possible value so it is
3115:FreeRTOS/tasks.c **** 		extremely unlikely that the
3116:FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3117:FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3118:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4920              		.loc 1 3118 0 is_stmt 1
ARM GAS  /tmp/ccTV2SzP.s 			page 146


 4921 001a 0A4B     		ldr	r3, .L319+4	@ tmp117,
 4922 001c 4FF0FF32 		mov	r2, #-1	@ tmp118,
 4923 0020 1A60     		str	r2, [r3]	@ tmp118, xNextTaskUnblockTime
 4924              	@ FreeRTOS/tasks.c:3129: }
3119:FreeRTOS/tasks.c **** 	}
3120:FreeRTOS/tasks.c **** 	else
3121:FreeRTOS/tasks.c **** 	{
3122:FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3123:FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3124:FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3125:FreeRTOS/tasks.c **** 		from the Blocked state. */
3126:FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3127:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
3128:FreeRTOS/tasks.c **** 	}
3129:FreeRTOS/tasks.c **** }
 4925              		.loc 1 3129 0
 4926 0022 08E0     		b	.L318	@
 4927              	.L316:
 4928              	@ FreeRTOS/tasks.c:3126: 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList )
3126:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 4929              		.loc 1 3126 0
 4930 0024 064B     		ldr	r3, .L319	@ tmp119,
 4931 0026 1B68     		ldr	r3, [r3]	@ pxDelayedTaskList.119_3, pxDelayedTaskList
 4932 0028 DB68     		ldr	r3, [r3, #12]	@ _4, pxDelayedTaskList.119_3->xListEnd.pxNext
 4933 002a DB68     		ldr	r3, [r3, #12]	@ tmp120, _4->pvOwner
 4934 002c 7B60     		str	r3, [r7, #4]	@ tmp120, pxTCB
 4935              	@ FreeRTOS/tasks.c:3127: 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericLi
3127:FreeRTOS/tasks.c **** 	}
 4936              		.loc 1 3127 0
 4937 002e 7B68     		ldr	r3, [r7, #4]	@ tmp121, pxTCB
 4938 0030 5B68     		ldr	r3, [r3, #4]	@ _5, pxTCB_11->xGenericListItem.xItemValue
 4939 0032 044A     		ldr	r2, .L319+4	@ tmp122,
 4940 0034 1360     		str	r3, [r2]	@ _5, xNextTaskUnblockTime
 4941              	.L318:
 4942              	@ FreeRTOS/tasks.c:3129: }
 4943              		.loc 1 3129 0
 4944 0036 00BF     		nop
 4945 0038 0C37     		adds	r7, r7, #12	@,,
 4946              		.cfi_def_cfa_offset 4
 4947 003a BD46     		mov	sp, r7	@,
 4948              		.cfi_def_cfa_register 13
 4949              		@ sp needed	@
 4950 003c 80BC     		pop	{r7}	@
 4951              		.cfi_restore 7
 4952              		.cfi_def_cfa_offset 0
 4953 003e 7047     		bx	lr	@
 4954              	.L320:
 4955              		.align	2
 4956              	.L319:
 4957 0040 00000000 		.word	pxDelayedTaskList
 4958 0044 00000000 		.word	xNextTaskUnblockTime
 4959              		.cfi_endproc
 4960              	.LFE40:
 4961              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4962              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4963              		.align	1
 4964              		.global	xTaskGetCurrentTaskHandle
ARM GAS  /tmp/ccTV2SzP.s 			page 147


 4965              		.syntax unified
 4966              		.thumb
 4967              		.thumb_func
 4968              		.fpu softvfp
 4969              		.type	xTaskGetCurrentTaskHandle, %function
 4970              	xTaskGetCurrentTaskHandle:
 4971              	.LFB41:
3130:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3131:FreeRTOS/tasks.c **** 
3132:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3133:FreeRTOS/tasks.c **** 
3134:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3135:FreeRTOS/tasks.c **** 	{
 4972              		.loc 1 3135 0
 4973              		.cfi_startproc
 4974              		@ args = 0, pretend = 0, frame = 8
 4975              		@ frame_needed = 1, uses_anonymous_args = 0
 4976              		@ link register save eliminated.
 4977 0000 80B4     		push	{r7}	@
 4978              		.cfi_def_cfa_offset 4
 4979              		.cfi_offset 7, -4
 4980 0002 83B0     		sub	sp, sp, #12	@,,
 4981              		.cfi_def_cfa_offset 16
 4982 0004 00AF     		add	r7, sp, #0	@,,
 4983              		.cfi_def_cfa_register 7
 4984              	@ FreeRTOS/tasks.c:3141: 		xReturn = pxCurrentTCB;
3136:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3137:FreeRTOS/tasks.c **** 
3138:FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3139:FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3140:FreeRTOS/tasks.c **** 		individual execution thread. */
3141:FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 4985              		.loc 1 3141 0
 4986 0006 044B     		ldr	r3, .L323	@ tmp112,
 4987 0008 1B68     		ldr	r3, [r3]	@ tmp113, pxCurrentTCB
 4988 000a 7B60     		str	r3, [r7, #4]	@ tmp113, xReturn
 4989              	@ FreeRTOS/tasks.c:3143: 		return xReturn;
3142:FreeRTOS/tasks.c **** 
3143:FreeRTOS/tasks.c **** 		return xReturn;
 4990              		.loc 1 3143 0
 4991 000c 7B68     		ldr	r3, [r7, #4]	@ _3, xReturn
 4992              	@ FreeRTOS/tasks.c:3144: 	}
3144:FreeRTOS/tasks.c **** 	}
 4993              		.loc 1 3144 0
 4994 000e 1846     		mov	r0, r3	@, <retval>
 4995 0010 0C37     		adds	r7, r7, #12	@,,
 4996              		.cfi_def_cfa_offset 4
 4997 0012 BD46     		mov	sp, r7	@,
 4998              		.cfi_def_cfa_register 13
 4999              		@ sp needed	@
 5000 0014 80BC     		pop	{r7}	@
 5001              		.cfi_restore 7
 5002              		.cfi_def_cfa_offset 0
 5003 0016 7047     		bx	lr	@
 5004              	.L324:
 5005              		.align	2
 5006              	.L323:
ARM GAS  /tmp/ccTV2SzP.s 			page 148


 5007 0018 00000000 		.word	pxCurrentTCB
 5008              		.cfi_endproc
 5009              	.LFE41:
 5010              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 5011              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 5012              		.align	1
 5013              		.global	vTaskPriorityInherit
 5014              		.syntax unified
 5015              		.thumb
 5016              		.thumb_func
 5017              		.fpu softvfp
 5018              		.type	vTaskPriorityInherit, %function
 5019              	vTaskPriorityInherit:
 5020              	.LFB42:
3145:FreeRTOS/tasks.c **** 
3146:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3147:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3148:FreeRTOS/tasks.c **** 
3149:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3150:FreeRTOS/tasks.c **** 
3151:FreeRTOS/tasks.c **** 	BaseT_t xTaskGetSchedulerState( void )
3152:FreeRTOS/tasks.c **** 	{
3153:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
3154:FreeRTOS/tasks.c **** 
3155:FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3156:FreeRTOS/tasks.c **** 		{
3157:FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3158:FreeRTOS/tasks.c **** 		}
3159:FreeRTOS/tasks.c **** 		else
3160:FreeRTOS/tasks.c **** 		{
3161:FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
3162:FreeRTOS/tasks.c **** 			{
3163:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3164:FreeRTOS/tasks.c **** 			}
3165:FreeRTOS/tasks.c **** 			else
3166:FreeRTOS/tasks.c **** 			{
3167:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3168:FreeRTOS/tasks.c **** 			}
3169:FreeRTOS/tasks.c **** 		}
3170:FreeRTOS/tasks.c **** 
3171:FreeRTOS/tasks.c **** 		return xReturn;
3172:FreeRTOS/tasks.c **** 	}
3173:FreeRTOS/tasks.c **** 
3174:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3175:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3176:FreeRTOS/tasks.c **** 
3177:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3178:FreeRTOS/tasks.c **** 
3179:FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3180:FreeRTOS/tasks.c **** 	{
 5021              		.loc 1 3180 0
 5022              		.cfi_startproc
 5023              		@ args = 0, pretend = 0, frame = 16
 5024              		@ frame_needed = 1, uses_anonymous_args = 0
 5025 0000 80B5     		push	{r7, lr}	@
 5026              		.cfi_def_cfa_offset 8
 5027              		.cfi_offset 7, -8
ARM GAS  /tmp/ccTV2SzP.s 			page 149


 5028              		.cfi_offset 14, -4
 5029 0002 84B0     		sub	sp, sp, #16	@,,
 5030              		.cfi_def_cfa_offset 24
 5031 0004 00AF     		add	r7, sp, #0	@,,
 5032              		.cfi_def_cfa_register 7
 5033 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
 5034              	@ FreeRTOS/tasks.c:3181: 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3181:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5035              		.loc 1 3181 0
 5036 0008 7B68     		ldr	r3, [r7, #4]	@ tmp142, pxMutexHolder
 5037 000a FB60     		str	r3, [r7, #12]	@ tmp142, pxTCB
 5038              	@ FreeRTOS/tasks.c:3185: 		if( pxMutexHolder != NULL )
3182:FreeRTOS/tasks.c **** 
3183:FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3184:FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3185:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 5039              		.loc 1 3185 0
 5040 000c 7B68     		ldr	r3, [r7, #4]	@ tmp143, pxMutexHolder
 5041 000e 002B     		cmp	r3, #0	@ tmp143,
 5042 0010 62D0     		beq	.L334	@,
 5043              	@ FreeRTOS/tasks.c:3187: 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3186:FreeRTOS/tasks.c **** 		{
3187:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 5044              		.loc 1 3187 0
 5045 0012 FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 5046 0014 DA6A     		ldr	r2, [r3, #44]	@ _1, pxTCB_39->uxPriority
 5047 0016 324B     		ldr	r3, .L335	@ tmp145,
 5048 0018 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.120_2, pxCurrentTCB
 5049 001a DB6A     		ldr	r3, [r3, #44]	@ _3, pxCurrentTCB.120_2->uxPriority
 5050 001c 9A42     		cmp	r2, r3	@ _1, _3
 5051 001e 5BD2     		bcs	.L334	@,
 5052              	@ FreeRTOS/tasks.c:3192: 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVEN
3188:FreeRTOS/tasks.c **** 			{
3189:FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3190:FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3191:FreeRTOS/tasks.c **** 				not	being used for anything else. */
3192:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 5053              		.loc 1 3192 0
 5054 0020 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 5055 0022 9B69     		ldr	r3, [r3, #24]	@ _4, pxTCB_39->xEventListItem.xItemValue
 5056 0024 002B     		cmp	r3, #0	@ _5,
 5057 0026 06DB     		blt	.L327	@,
 5058              	@ FreeRTOS/tasks.c:3194: 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) conf
3193:FreeRTOS/tasks.c **** 				{
3194:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 5059              		.loc 1 3194 0
 5060 0028 2D4B     		ldr	r3, .L335	@ tmp147,
 5061 002a 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.121_6, pxCurrentTCB
 5062 002c DB6A     		ldr	r3, [r3, #44]	@ _7, pxCurrentTCB.121_6->uxPriority
 5063 002e C3F10802 		rsb	r2, r3, #8	@ _8, _7,
 5064 0032 FB68     		ldr	r3, [r7, #12]	@ tmp148, pxTCB
 5065 0034 9A61     		str	r2, [r3, #24]	@ _8, pxTCB_39->xEventListItem.xItemValue
 5066              	.L327:
 5067              	@ FreeRTOS/tasks.c:3203: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ]
3195:FreeRTOS/tasks.c **** 				}
3196:FreeRTOS/tasks.c **** 				else
3197:FreeRTOS/tasks.c **** 				{
ARM GAS  /tmp/ccTV2SzP.s 			page 150


3198:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3199:FreeRTOS/tasks.c **** 				}
3200:FreeRTOS/tasks.c **** 
3201:FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need to
3202:FreeRTOS/tasks.c **** 				be moved into a new list. */
3203:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 5068              		.loc 1 3203 0
 5069 0036 FB68     		ldr	r3, [r7, #12]	@ tmp149, pxTCB
 5070 0038 5969     		ldr	r1, [r3, #20]	@ _9, pxTCB_39->xGenericListItem.pvContainer
 5071 003a FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 5072 003c DA6A     		ldr	r2, [r3, #44]	@ _10, pxTCB_39->uxPriority
 5073 003e 1346     		mov	r3, r2	@ tmp151, _10
 5074 0040 9B00     		lsls	r3, r3, #2	@ tmp151, tmp151,
 5075 0042 1344     		add	r3, r3, r2	@ tmp151, _10
 5076 0044 9B00     		lsls	r3, r3, #2	@ tmp152, tmp151,
 5077 0046 274A     		ldr	r2, .L335+4	@ tmp153,
 5078 0048 1344     		add	r3, r3, r2	@ _11, tmp153
 5079 004a 9942     		cmp	r1, r3	@ _9, _11
 5080 004c 01D1     		bne	.L328	@,
 5081              	@ FreeRTOS/tasks.c:3203: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ]
 5082              		.loc 1 3203 0 is_stmt 0 discriminator 1
 5083 004e 0123     		movs	r3, #1	@ iftmp.122_32,
 5084 0050 00E0     		b	.L329	@
 5085              	.L328:
 5086              	@ FreeRTOS/tasks.c:3203: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ]
 5087              		.loc 1 3203 0 discriminator 2
 5088 0052 0023     		movs	r3, #0	@ iftmp.122_32,
 5089              	.L329:
 5090              	@ FreeRTOS/tasks.c:3203: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ]
 5091              		.loc 1 3203 0 discriminator 4
 5092 0054 002B     		cmp	r3, #0	@ iftmp.122_32,
 5093 0056 3AD0     		beq	.L330	@,
 5094              	@ FreeRTOS/tasks.c:3205: 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
3204:FreeRTOS/tasks.c **** 				{
3205:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 5095              		.loc 1 3205 0 is_stmt 1
 5096 0058 FB68     		ldr	r3, [r7, #12]	@ tmp154, pxTCB
 5097 005a 0433     		adds	r3, r3, #4	@ _12, tmp154,
 5098 005c 1846     		mov	r0, r3	@, _12
 5099 005e FFF7FEFF 		bl	uxListRemove	@
 5100 0062 0346     		mov	r3, r0	@ _13,
 5101 0064 002B     		cmp	r3, #0	@ _13,
 5102 0066 15D1     		bne	.L331	@,
 5103              	@ FreeRTOS/tasks.c:3207: 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3206:FreeRTOS/tasks.c **** 					{
3207:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5104              		.loc 1 3207 0
 5105 0068 FB68     		ldr	r3, [r7, #12]	@ tmp155, pxTCB
 5106 006a DA6A     		ldr	r2, [r3, #44]	@ _14, pxTCB_39->uxPriority
 5107 006c 1D49     		ldr	r1, .L335+4	@ tmp156,
 5108 006e 1346     		mov	r3, r2	@ tmp157, _14
 5109 0070 9B00     		lsls	r3, r3, #2	@ tmp157, tmp157,
 5110 0072 1344     		add	r3, r3, r2	@ tmp157, _14
 5111 0074 9B00     		lsls	r3, r3, #2	@ tmp158, tmp157,
 5112 0076 0B44     		add	r3, r3, r1	@ tmp159, tmp156
 5113 0078 1B68     		ldr	r3, [r3]	@ _15, pxReadyTasksLists[_14].uxNumberOfItems
 5114 007a 002B     		cmp	r3, #0	@ _15,
ARM GAS  /tmp/ccTV2SzP.s 			page 151


 5115 007c 0AD1     		bne	.L331	@,
 5116              	@ FreeRTOS/tasks.c:3207: 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5117              		.loc 1 3207 0 is_stmt 0 discriminator 1
 5118 007e FB68     		ldr	r3, [r7, #12]	@ tmp160, pxTCB
 5119 0080 DB6A     		ldr	r3, [r3, #44]	@ _16, pxTCB_39->uxPriority
 5120 0082 0122     		movs	r2, #1	@ tmp161,
 5121 0084 02FA03F3 		lsl	r3, r2, r3	@ _17, tmp161, _16
 5122 0088 DA43     		mvns	r2, r3	@ _18, _17
 5123 008a 174B     		ldr	r3, .L335+8	@ tmp162,
 5124 008c 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.123_19, uxTopReadyPriority
 5125 008e 1340     		ands	r3, r3, r2	@, _20, uxTopReadyPriority.123_19, _18
 5126 0090 154A     		ldr	r2, .L335+8	@ tmp163,
 5127 0092 1360     		str	r3, [r2]	@ _20, uxTopReadyPriority
 5128              	.L331:
 5129              	@ FreeRTOS/tasks.c:3215: 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3208:FreeRTOS/tasks.c **** 					}
3209:FreeRTOS/tasks.c **** 					else
3210:FreeRTOS/tasks.c **** 					{
3211:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3212:FreeRTOS/tasks.c **** 					}
3213:FreeRTOS/tasks.c **** 
3214:FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3215:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 5130              		.loc 1 3215 0 is_stmt 1
 5131 0094 124B     		ldr	r3, .L335	@ tmp164,
 5132 0096 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.124_21, pxCurrentTCB
 5133 0098 DA6A     		ldr	r2, [r3, #44]	@ _22, pxCurrentTCB.124_21->uxPriority
 5134 009a FB68     		ldr	r3, [r7, #12]	@ tmp165, pxTCB
 5135 009c DA62     		str	r2, [r3, #44]	@ _22, pxTCB_39->uxPriority
 5136              	@ FreeRTOS/tasks.c:3216: 					prvAddTaskToReadyList( pxTCB );
3216:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5137              		.loc 1 3216 0
 5138 009e FB68     		ldr	r3, [r7, #12]	@ tmp166, pxTCB
 5139 00a0 DB6A     		ldr	r3, [r3, #44]	@ _23, pxTCB_39->uxPriority
 5140 00a2 0122     		movs	r2, #1	@ tmp167,
 5141 00a4 9A40     		lsls	r2, r2, r3	@ _24, tmp167, _23
 5142 00a6 104B     		ldr	r3, .L335+8	@ tmp168,
 5143 00a8 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.125_25, uxTopReadyPriority
 5144 00aa 1343     		orrs	r3, r3, r2	@, _26, uxTopReadyPriority.125_25, _24
 5145 00ac 0E4A     		ldr	r2, .L335+8	@ tmp169,
 5146 00ae 1360     		str	r3, [r2]	@ _26, uxTopReadyPriority
 5147 00b0 FB68     		ldr	r3, [r7, #12]	@ tmp170, pxTCB
 5148 00b2 DA6A     		ldr	r2, [r3, #44]	@ _27, pxTCB_39->uxPriority
 5149 00b4 1346     		mov	r3, r2	@ tmp171, _27
 5150 00b6 9B00     		lsls	r3, r3, #2	@ tmp171, tmp171,
 5151 00b8 1344     		add	r3, r3, r2	@ tmp171, _27
 5152 00ba 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 5153 00bc 094A     		ldr	r2, .L335+4	@ tmp173,
 5154 00be 1A44     		add	r2, r2, r3	@ _28, tmp171
 5155 00c0 FB68     		ldr	r3, [r7, #12]	@ tmp174, pxTCB
 5156 00c2 0433     		adds	r3, r3, #4	@ _29, tmp174,
 5157 00c4 1946     		mov	r1, r3	@, _29
 5158 00c6 1046     		mov	r0, r2	@, _28
 5159 00c8 FFF7FEFF 		bl	vListInsertEnd	@
 5160              	@ FreeRTOS/tasks.c:3235: 	}
3217:FreeRTOS/tasks.c **** 				}
3218:FreeRTOS/tasks.c **** 				else
ARM GAS  /tmp/ccTV2SzP.s 			page 152


3219:FreeRTOS/tasks.c **** 				{
3220:FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3221:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3222:FreeRTOS/tasks.c **** 				}
3223:FreeRTOS/tasks.c **** 
3224:FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3225:FreeRTOS/tasks.c **** 			}
3226:FreeRTOS/tasks.c **** 			else
3227:FreeRTOS/tasks.c **** 			{
3228:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3229:FreeRTOS/tasks.c **** 			}
3230:FreeRTOS/tasks.c **** 		}
3231:FreeRTOS/tasks.c **** 		else
3232:FreeRTOS/tasks.c **** 		{
3233:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3234:FreeRTOS/tasks.c **** 		}
3235:FreeRTOS/tasks.c **** 	}
 5161              		.loc 1 3235 0
 5162 00cc 04E0     		b	.L334	@
 5163              	.L330:
 5164              	@ FreeRTOS/tasks.c:3221: 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3221:FreeRTOS/tasks.c **** 				}
 5165              		.loc 1 3221 0
 5166 00ce 044B     		ldr	r3, .L335	@ tmp175,
 5167 00d0 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.126_30, pxCurrentTCB
 5168 00d2 DA6A     		ldr	r2, [r3, #44]	@ _31, pxCurrentTCB.126_30->uxPriority
 5169 00d4 FB68     		ldr	r3, [r7, #12]	@ tmp176, pxTCB
 5170 00d6 DA62     		str	r2, [r3, #44]	@ _31, pxTCB_39->uxPriority
 5171              	.L334:
 5172              	@ FreeRTOS/tasks.c:3235: 	}
 5173              		.loc 1 3235 0
 5174 00d8 00BF     		nop
 5175 00da 1037     		adds	r7, r7, #16	@,,
 5176              		.cfi_def_cfa_offset 8
 5177 00dc BD46     		mov	sp, r7	@,
 5178              		.cfi_def_cfa_register 13
 5179              		@ sp needed	@
 5180 00de 80BD     		pop	{r7, pc}	@
 5181              	.L336:
 5182              		.align	2
 5183              	.L335:
 5184 00e0 00000000 		.word	pxCurrentTCB
 5185 00e4 00000000 		.word	pxReadyTasksLists
 5186 00e8 00000000 		.word	uxTopReadyPriority
 5187              		.cfi_endproc
 5188              	.LFE42:
 5189              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 5190              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5191              		.align	1
 5192              		.global	xTaskPriorityDisinherit
 5193              		.syntax unified
 5194              		.thumb
 5195              		.thumb_func
 5196              		.fpu softvfp
 5197              		.type	xTaskPriorityDisinherit, %function
 5198              	xTaskPriorityDisinherit:
 5199              	.LFB43:
ARM GAS  /tmp/ccTV2SzP.s 			page 153


3236:FreeRTOS/tasks.c **** 
3237:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3238:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3239:FreeRTOS/tasks.c **** 
3240:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3241:FreeRTOS/tasks.c **** 
3242:FreeRTOS/tasks.c **** 	BaseT_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3243:FreeRTOS/tasks.c **** 	{
 5200              		.loc 1 3243 0
 5201              		.cfi_startproc
 5202              		@ args = 0, pretend = 0, frame = 16
 5203              		@ frame_needed = 1, uses_anonymous_args = 0
 5204 0000 80B5     		push	{r7, lr}	@
 5205              		.cfi_def_cfa_offset 8
 5206              		.cfi_offset 7, -8
 5207              		.cfi_offset 14, -4
 5208 0002 84B0     		sub	sp, sp, #16	@,,
 5209              		.cfi_def_cfa_offset 24
 5210 0004 00AF     		add	r7, sp, #0	@,,
 5211              		.cfi_def_cfa_register 7
 5212 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
 5213              	@ FreeRTOS/tasks.c:3244: 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3244:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 5214              		.loc 1 3244 0
 5215 0008 7B68     		ldr	r3, [r7, #4]	@ tmp137, pxMutexHolder
 5216 000a BB60     		str	r3, [r7, #8]	@ tmp137, pxTCB
 5217              	@ FreeRTOS/tasks.c:3245: 	BaseT_t xReturn = pdFALSE;
3245:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 5218              		.loc 1 3245 0
 5219 000c 0023     		movs	r3, #0	@ tmp138,
 5220 000e FB60     		str	r3, [r7, #12]	@ tmp138, xReturn
 5221              	@ FreeRTOS/tasks.c:3247: 		if( pxMutexHolder != NULL )
3246:FreeRTOS/tasks.c **** 
3247:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 5222              		.loc 1 3247 0
 5223 0010 7B68     		ldr	r3, [r7, #4]	@ tmp139, pxMutexHolder
 5224 0012 002B     		cmp	r3, #0	@ tmp139,
 5225 0014 56D0     		beq	.L338	@,
 5226              	@ FreeRTOS/tasks.c:3249: 			configASSERT( pxTCB->uxMutexesHeld );
3248:FreeRTOS/tasks.c **** 		{
3249:FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5227              		.loc 1 3249 0
 5228 0016 BB68     		ldr	r3, [r7, #8]	@ tmp140, pxTCB
 5229 0018 DB6C     		ldr	r3, [r3, #76]	@ _1, pxTCB_31->uxMutexesHeld
 5230 001a 002B     		cmp	r3, #0	@ _1,
 5231 001c 02D1     		bne	.L339	@,
 5232              	@ FreeRTOS/tasks.c:3249: 			configASSERT( pxTCB->uxMutexesHeld );
 5233              		.loc 1 3249 0 is_stmt 0 discriminator 1
 5234 001e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 5235              	.L340:
 5236 0022 FEE7     		b	.L340	@
 5237              	.L339:
 5238              	@ FreeRTOS/tasks.c:3250: 			( pxTCB->uxMutexesHeld )--;
3250:FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5239              		.loc 1 3250 0 is_stmt 1
 5240 0024 BB68     		ldr	r3, [r7, #8]	@ tmp141, pxTCB
 5241 0026 DB6C     		ldr	r3, [r3, #76]	@ _2, pxTCB_31->uxMutexesHeld
ARM GAS  /tmp/ccTV2SzP.s 			page 154


 5242 0028 5A1E     		subs	r2, r3, #1	@ _3, _2,
 5243 002a BB68     		ldr	r3, [r7, #8]	@ tmp142, pxTCB
 5244 002c DA64     		str	r2, [r3, #76]	@ _3, pxTCB_31->uxMutexesHeld
 5245              	@ FreeRTOS/tasks.c:3252: 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3251:FreeRTOS/tasks.c **** 
3252:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 5246              		.loc 1 3252 0
 5247 002e BB68     		ldr	r3, [r7, #8]	@ tmp143, pxTCB
 5248 0030 DA6A     		ldr	r2, [r3, #44]	@ _4, pxTCB_31->uxPriority
 5249 0032 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxTCB
 5250 0034 9B6C     		ldr	r3, [r3, #72]	@ _5, pxTCB_31->uxBasePriority
 5251 0036 9A42     		cmp	r2, r3	@ _4, _5
 5252 0038 44D0     		beq	.L338	@,
 5253              	@ FreeRTOS/tasks.c:3255: 				if( pxTCB->uxMutexesHeld == ( UBaseT_t ) 0 )
3253:FreeRTOS/tasks.c **** 			{
3254:FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3255:FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseT_t ) 0 )
 5254              		.loc 1 3255 0
 5255 003a BB68     		ldr	r3, [r7, #8]	@ tmp145, pxTCB
 5256 003c DB6C     		ldr	r3, [r3, #76]	@ _6, pxTCB_31->uxMutexesHeld
 5257 003e 002B     		cmp	r3, #0	@ _6,
 5258 0040 40D1     		bne	.L338	@,
 5259              	@ FreeRTOS/tasks.c:3259: 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
3256:FreeRTOS/tasks.c **** 				{
3257:FreeRTOS/tasks.c **** 					/* The holding task must be the running task to be able to give
3258:FreeRTOS/tasks.c **** 					the mutex back.  Remove the holding task from the ready list. */
3259:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 5260              		.loc 1 3259 0
 5261 0042 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxTCB
 5262 0044 0433     		adds	r3, r3, #4	@ _7, tmp146,
 5263 0046 1846     		mov	r0, r3	@, _7
 5264 0048 FFF7FEFF 		bl	uxListRemove	@
 5265 004c 0346     		mov	r3, r0	@ _8,
 5266 004e 002B     		cmp	r3, #0	@ _8,
 5267 0050 15D1     		bne	.L341	@,
 5268              	@ FreeRTOS/tasks.c:3261: 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3260:FreeRTOS/tasks.c **** 					{
3261:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5269              		.loc 1 3261 0
 5270 0052 BB68     		ldr	r3, [r7, #8]	@ tmp147, pxTCB
 5271 0054 DA6A     		ldr	r2, [r3, #44]	@ _9, pxTCB_31->uxPriority
 5272 0056 1E49     		ldr	r1, .L344	@ tmp148,
 5273 0058 1346     		mov	r3, r2	@ tmp149, _9
 5274 005a 9B00     		lsls	r3, r3, #2	@ tmp149, tmp149,
 5275 005c 1344     		add	r3, r3, r2	@ tmp149, _9
 5276 005e 9B00     		lsls	r3, r3, #2	@ tmp150, tmp149,
 5277 0060 0B44     		add	r3, r3, r1	@ tmp151, tmp148
 5278 0062 1B68     		ldr	r3, [r3]	@ _10, pxReadyTasksLists[_9].uxNumberOfItems
 5279 0064 002B     		cmp	r3, #0	@ _10,
 5280 0066 0AD1     		bne	.L341	@,
 5281              	@ FreeRTOS/tasks.c:3261: 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 5282              		.loc 1 3261 0 is_stmt 0 discriminator 1
 5283 0068 BB68     		ldr	r3, [r7, #8]	@ tmp152, pxTCB
 5284 006a DB6A     		ldr	r3, [r3, #44]	@ _11, pxTCB_31->uxPriority
 5285 006c 0122     		movs	r2, #1	@ tmp153,
 5286 006e 02FA03F3 		lsl	r3, r2, r3	@ _12, tmp153, _11
 5287 0072 DA43     		mvns	r2, r3	@ _13, _12
ARM GAS  /tmp/ccTV2SzP.s 			page 155


 5288 0074 174B     		ldr	r3, .L344+4	@ tmp154,
 5289 0076 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.127_14, uxTopReadyPriority
 5290 0078 1340     		ands	r3, r3, r2	@, _15, uxTopReadyPriority.127_14, _13
 5291 007a 164A     		ldr	r2, .L344+4	@ tmp155,
 5292 007c 1360     		str	r3, [r2]	@ _15, uxTopReadyPriority
 5293              	.L341:
 5294              	@ FreeRTOS/tasks.c:3271: 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3262:FreeRTOS/tasks.c **** 					}
3263:FreeRTOS/tasks.c **** 					else
3264:FreeRTOS/tasks.c **** 					{
3265:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3266:FreeRTOS/tasks.c **** 					}
3267:FreeRTOS/tasks.c **** 
3268:FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the new
3269:FreeRTOS/tasks.c **** 					ready list. */
3270:FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3271:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5295              		.loc 1 3271 0 is_stmt 1
 5296 007e BB68     		ldr	r3, [r7, #8]	@ tmp156, pxTCB
 5297 0080 9A6C     		ldr	r2, [r3, #72]	@ _16, pxTCB_31->uxBasePriority
 5298 0082 BB68     		ldr	r3, [r7, #8]	@ tmp157, pxTCB
 5299 0084 DA62     		str	r2, [r3, #44]	@ _16, pxTCB_31->uxPriority
 5300              	@ FreeRTOS/tasks.c:3276: 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) conf
3272:FreeRTOS/tasks.c **** 
3273:FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3274:FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3275:FreeRTOS/tasks.c **** 					running to give back the mutex. */
3276:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 5301              		.loc 1 3276 0
 5302 0086 BB68     		ldr	r3, [r7, #8]	@ tmp158, pxTCB
 5303 0088 DB6A     		ldr	r3, [r3, #44]	@ _17, pxTCB_31->uxPriority
 5304 008a C3F10802 		rsb	r2, r3, #8	@ _18, _17,
 5305 008e BB68     		ldr	r3, [r7, #8]	@ tmp159, pxTCB
 5306 0090 9A61     		str	r2, [r3, #24]	@ _18, pxTCB_31->xEventListItem.xItemValue
 5307              	@ FreeRTOS/tasks.c:3277: 					prvAddTaskToReadyList( pxTCB );
3277:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5308              		.loc 1 3277 0
 5309 0092 BB68     		ldr	r3, [r7, #8]	@ tmp160, pxTCB
 5310 0094 DB6A     		ldr	r3, [r3, #44]	@ _19, pxTCB_31->uxPriority
 5311 0096 0122     		movs	r2, #1	@ tmp161,
 5312 0098 9A40     		lsls	r2, r2, r3	@ _20, tmp161, _19
 5313 009a 0E4B     		ldr	r3, .L344+4	@ tmp162,
 5314 009c 1B68     		ldr	r3, [r3]	@ uxTopReadyPriority.128_21, uxTopReadyPriority
 5315 009e 1343     		orrs	r3, r3, r2	@, _22, uxTopReadyPriority.128_21, _20
 5316 00a0 0C4A     		ldr	r2, .L344+4	@ tmp163,
 5317 00a2 1360     		str	r3, [r2]	@ _22, uxTopReadyPriority
 5318 00a4 BB68     		ldr	r3, [r7, #8]	@ tmp164, pxTCB
 5319 00a6 DA6A     		ldr	r2, [r3, #44]	@ _23, pxTCB_31->uxPriority
 5320 00a8 1346     		mov	r3, r2	@ tmp165, _23
 5321 00aa 9B00     		lsls	r3, r3, #2	@ tmp165, tmp165,
 5322 00ac 1344     		add	r3, r3, r2	@ tmp165, _23
 5323 00ae 9B00     		lsls	r3, r3, #2	@ tmp166, tmp165,
 5324 00b0 074A     		ldr	r2, .L344	@ tmp167,
 5325 00b2 1A44     		add	r2, r2, r3	@ _24, tmp165
 5326 00b4 BB68     		ldr	r3, [r7, #8]	@ tmp168, pxTCB
 5327 00b6 0433     		adds	r3, r3, #4	@ _25, tmp168,
 5328 00b8 1946     		mov	r1, r3	@, _25
ARM GAS  /tmp/ccTV2SzP.s 			page 156


 5329 00ba 1046     		mov	r0, r2	@, _24
 5330 00bc FFF7FEFF 		bl	vListInsertEnd	@
 5331              	@ FreeRTOS/tasks.c:3283: 					xReturn = pdTRUE;
3278:FreeRTOS/tasks.c **** 
3279:FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3280:FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3281:FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3282:FreeRTOS/tasks.c **** 					in an order different to that in which they were taken. */
3283:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 5332              		.loc 1 3283 0
 5333 00c0 0123     		movs	r3, #1	@ tmp169,
 5334 00c2 FB60     		str	r3, [r7, #12]	@ tmp169, xReturn
 5335              	.L338:
 5336              	@ FreeRTOS/tasks.c:3300: 		return xReturn;
3284:FreeRTOS/tasks.c **** 				}
3285:FreeRTOS/tasks.c **** 				else
3286:FreeRTOS/tasks.c **** 				{
3287:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3288:FreeRTOS/tasks.c **** 				}
3289:FreeRTOS/tasks.c **** 			}
3290:FreeRTOS/tasks.c **** 			else
3291:FreeRTOS/tasks.c **** 			{
3292:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3293:FreeRTOS/tasks.c **** 			}
3294:FreeRTOS/tasks.c **** 		}
3295:FreeRTOS/tasks.c **** 		else
3296:FreeRTOS/tasks.c **** 		{
3297:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3298:FreeRTOS/tasks.c **** 		}
3299:FreeRTOS/tasks.c **** 
3300:FreeRTOS/tasks.c **** 		return xReturn;
 5337              		.loc 1 3300 0
 5338 00c4 FB68     		ldr	r3, [r7, #12]	@ _43, xReturn
 5339              	@ FreeRTOS/tasks.c:3301: 	}
3301:FreeRTOS/tasks.c **** 	}
 5340              		.loc 1 3301 0
 5341 00c6 1846     		mov	r0, r3	@, <retval>
 5342 00c8 1037     		adds	r7, r7, #16	@,,
 5343              		.cfi_def_cfa_offset 8
 5344 00ca BD46     		mov	sp, r7	@,
 5345              		.cfi_def_cfa_register 13
 5346              		@ sp needed	@
 5347 00cc 80BD     		pop	{r7, pc}	@
 5348              	.L345:
 5349 00ce 00BF     		.align	2
 5350              	.L344:
 5351 00d0 00000000 		.word	pxReadyTasksLists
 5352 00d4 00000000 		.word	uxTopReadyPriority
 5353              		.cfi_endproc
 5354              	.LFE43:
 5355              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 5356              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5357              		.align	1
 5358              		.global	uxTaskResetEventItemValue
 5359              		.syntax unified
 5360              		.thumb
 5361              		.thumb_func
ARM GAS  /tmp/ccTV2SzP.s 			page 157


 5362              		.fpu softvfp
 5363              		.type	uxTaskResetEventItemValue, %function
 5364              	uxTaskResetEventItemValue:
 5365              	.LFB44:
3302:FreeRTOS/tasks.c **** 
3303:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3304:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3305:FreeRTOS/tasks.c **** 
3306:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3307:FreeRTOS/tasks.c **** 
3308:FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3309:FreeRTOS/tasks.c **** 	{
3310:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3311:FreeRTOS/tasks.c **** 
3312:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3313:FreeRTOS/tasks.c **** 		{
3314:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3315:FreeRTOS/tasks.c **** 
3316:FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3317:FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3318:FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3319:FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3320:FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3321:FreeRTOS/tasks.c **** 			critical section. */
3322:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3323:FreeRTOS/tasks.c **** 			{
3324:FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3325:FreeRTOS/tasks.c **** 			}
3326:FreeRTOS/tasks.c **** 
3327:FreeRTOS/tasks.c **** 		}
3328:FreeRTOS/tasks.c **** 		else
3329:FreeRTOS/tasks.c **** 		{
3330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3331:FreeRTOS/tasks.c **** 		}
3332:FreeRTOS/tasks.c **** 	}
3333:FreeRTOS/tasks.c **** 
3334:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3335:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3336:FreeRTOS/tasks.c **** 
3337:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3338:FreeRTOS/tasks.c **** 
3339:FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3340:FreeRTOS/tasks.c **** 	{
3341:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3342:FreeRTOS/tasks.c **** 		{
3343:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3344:FreeRTOS/tasks.c **** 			{
3345:FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3346:FreeRTOS/tasks.c **** 
3347:FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3348:FreeRTOS/tasks.c **** 				{
3349:FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3350:FreeRTOS/tasks.c **** 				}
3351:FreeRTOS/tasks.c **** 				else
3352:FreeRTOS/tasks.c **** 				{
3353:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3354:FreeRTOS/tasks.c **** 				}
ARM GAS  /tmp/ccTV2SzP.s 			page 158


3355:FreeRTOS/tasks.c **** 			}
3356:FreeRTOS/tasks.c **** 			else
3357:FreeRTOS/tasks.c **** 			{
3358:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3359:FreeRTOS/tasks.c **** 			}
3360:FreeRTOS/tasks.c **** 		}
3361:FreeRTOS/tasks.c **** 		else
3362:FreeRTOS/tasks.c **** 		{
3363:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3364:FreeRTOS/tasks.c **** 		}
3365:FreeRTOS/tasks.c **** 	}
3366:FreeRTOS/tasks.c **** 
3367:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3368:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3369:FreeRTOS/tasks.c **** 
3370:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3371:FreeRTOS/tasks.c **** 
3372:FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3373:FreeRTOS/tasks.c **** 	{
3374:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3375:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3376:FreeRTOS/tasks.c **** 	char cStatus;
3377:FreeRTOS/tasks.c **** 
3378:FreeRTOS/tasks.c **** 		/*
3379:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3380:FreeRTOS/tasks.c **** 		 *
3381:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3382:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3383:FreeRTOS/tasks.c **** 		 * scheduler.
3384:FreeRTOS/tasks.c **** 		 *
3385:FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3386:FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3387:FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3388:FreeRTOS/tasks.c **** 		 *
3389:FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3390:FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3391:FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3392:FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3393:FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3394:FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3395:FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3396:FreeRTOS/tasks.c **** 		 *
3397:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3398:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3399:FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
3400:FreeRTOS/tasks.c **** 		 */
3401:FreeRTOS/tasks.c **** 
3402:FreeRTOS/tasks.c **** 
3403:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3404:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3405:FreeRTOS/tasks.c **** 
3406:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3407:FreeRTOS/tasks.c **** 		function is executing. */
3408:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3409:FreeRTOS/tasks.c **** 
3410:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3411:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
ARM GAS  /tmp/ccTV2SzP.s 			page 159


3412:FreeRTOS/tasks.c **** 
3413:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3414:FreeRTOS/tasks.c **** 		{
3415:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3416:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3417:FreeRTOS/tasks.c **** 
3418:FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3419:FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3420:FreeRTOS/tasks.c **** 			{
3421:FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3422:FreeRTOS/tasks.c **** 				{
3423:FreeRTOS/tasks.c **** 				case eReady:		cStatus = tskREADY_CHAR;
3424:FreeRTOS/tasks.c **** 									break;
3425:FreeRTOS/tasks.c **** 
3426:FreeRTOS/tasks.c **** 				case eBlocked:		cStatus = tskBLOCKED_CHAR;
3427:FreeRTOS/tasks.c **** 									break;
3428:FreeRTOS/tasks.c **** 
3429:FreeRTOS/tasks.c **** 				case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3430:FreeRTOS/tasks.c **** 									break;
3431:FreeRTOS/tasks.c **** 
3432:FreeRTOS/tasks.c **** 				case eDeleted:		cStatus = tskDELETED_CHAR;
3433:FreeRTOS/tasks.c **** 									break;
3434:FreeRTOS/tasks.c **** 
3435:FreeRTOS/tasks.c **** 				default:			/* Should not get here, but it is included
3436:FreeRTOS/tasks.c **** 									to prevent static checking errors. */
3437:FreeRTOS/tasks.c **** 									cStatus = 0x00;
3438:FreeRTOS/tasks.c **** 									break;
3439:FreeRTOS/tasks.c **** 				}
3440:FreeRTOS/tasks.c **** 
3441:FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus,
3442:FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3443:FreeRTOS/tasks.c **** 			}
3444:FreeRTOS/tasks.c **** 
3445:FreeRTOS/tasks.c **** 			/* Free the array again. */
3446:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3447:FreeRTOS/tasks.c **** 		}
3448:FreeRTOS/tasks.c **** 		else
3449:FreeRTOS/tasks.c **** 		{
3450:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3451:FreeRTOS/tasks.c **** 		}
3452:FreeRTOS/tasks.c **** 	}
3453:FreeRTOS/tasks.c **** 
3454:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) ) */
3455:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
3456:FreeRTOS/tasks.c **** 
3457:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3458:FreeRTOS/tasks.c **** 
3459:FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3460:FreeRTOS/tasks.c **** 	{
3461:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3462:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3463:FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3464:FreeRTOS/tasks.c **** 
3465:FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3466:FreeRTOS/tasks.c **** 		{
3467:FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3468:FreeRTOS/tasks.c **** 		}
ARM GAS  /tmp/ccTV2SzP.s 			page 160


3469:FreeRTOS/tasks.c **** 		#endif
3470:FreeRTOS/tasks.c **** 
3471:FreeRTOS/tasks.c **** 		/*
3472:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3473:FreeRTOS/tasks.c **** 		 *
3474:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3475:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3476:FreeRTOS/tasks.c **** 		 * scheduler.
3477:FreeRTOS/tasks.c **** 		 *
3478:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3479:FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3480:FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3481:FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
3482:FreeRTOS/tasks.c **** 		 *
3483:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3484:FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3485:FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3486:FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3487:FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3488:FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3489:FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
3490:FreeRTOS/tasks.c **** 		 *
3491:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3492:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3493:FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3494:FreeRTOS/tasks.c **** 		 */
3495:FreeRTOS/tasks.c **** 
3496:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3497:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3498:FreeRTOS/tasks.c **** 
3499:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3500:FreeRTOS/tasks.c **** 		function is executing. */
3501:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3502:FreeRTOS/tasks.c **** 
3503:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3504:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3505:FreeRTOS/tasks.c **** 
3506:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3507:FreeRTOS/tasks.c **** 		{
3508:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3509:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3510:FreeRTOS/tasks.c **** 
3511:FreeRTOS/tasks.c **** 			/* For percentage calculations. */
3512:FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
3513:FreeRTOS/tasks.c **** 
3514:FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
3515:FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
3516:FreeRTOS/tasks.c **** 			{
3517:FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
3518:FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3519:FreeRTOS/tasks.c **** 				{
3520:FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
3521:FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
3522:FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3523:FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3524:FreeRTOS/tasks.c **** 
3525:FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
ARM GAS  /tmp/ccTV2SzP.s 			page 161


3526:FreeRTOS/tasks.c **** 					{
3527:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3528:FreeRTOS/tasks.c **** 						{
3529:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskS
3530:FreeRTOS/tasks.c **** 						}
3531:FreeRTOS/tasks.c **** 						#else
3532:FreeRTOS/tasks.c **** 						{
3533:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3534:FreeRTOS/tasks.c **** 							printf() library can be used. */
3535:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t%u%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3536:FreeRTOS/tasks.c **** 						}
3537:FreeRTOS/tasks.c **** 						#endif
3538:FreeRTOS/tasks.c **** 					}
3539:FreeRTOS/tasks.c **** 					else
3540:FreeRTOS/tasks.c **** 					{
3541:FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
3542:FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
3543:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3544:FreeRTOS/tasks.c **** 						{
3545:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskSt
3546:FreeRTOS/tasks.c **** 						}
3547:FreeRTOS/tasks.c **** 						#else
3548:FreeRTOS/tasks.c **** 						{
3549:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3550:FreeRTOS/tasks.c **** 							printf() library can be used. */
3551:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3552:FreeRTOS/tasks.c **** 						}
3553:FreeRTOS/tasks.c **** 						#endif
3554:FreeRTOS/tasks.c **** 					}
3555:FreeRTOS/tasks.c **** 
3556:FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3557:FreeRTOS/tasks.c **** 				}
3558:FreeRTOS/tasks.c **** 			}
3559:FreeRTOS/tasks.c **** 			else
3560:FreeRTOS/tasks.c **** 			{
3561:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3562:FreeRTOS/tasks.c **** 			}
3563:FreeRTOS/tasks.c **** 
3564:FreeRTOS/tasks.c **** 			/* Free the array again. */
3565:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3566:FreeRTOS/tasks.c **** 		}
3567:FreeRTOS/tasks.c **** 		else
3568:FreeRTOS/tasks.c **** 		{
3569:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3570:FreeRTOS/tasks.c **** 		}
3571:FreeRTOS/tasks.c **** 	}
3572:FreeRTOS/tasks.c **** 
3573:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
3574:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3575:FreeRTOS/tasks.c **** 
3576:FreeRTOS/tasks.c **** TickT_t uxTaskResetEventItemValue( void )
3577:FreeRTOS/tasks.c **** {
 5366              		.loc 1 3577 0
 5367              		.cfi_startproc
 5368              		@ args = 0, pretend = 0, frame = 8
 5369              		@ frame_needed = 1, uses_anonymous_args = 0
 5370              		@ link register save eliminated.
ARM GAS  /tmp/ccTV2SzP.s 			page 162


 5371 0000 80B4     		push	{r7}	@
 5372              		.cfi_def_cfa_offset 4
 5373              		.cfi_offset 7, -4
 5374 0002 83B0     		sub	sp, sp, #12	@,,
 5375              		.cfi_def_cfa_offset 16
 5376 0004 00AF     		add	r7, sp, #0	@,,
 5377              		.cfi_def_cfa_register 7
 5378              	@ FreeRTOS/tasks.c:3580: 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
3578:FreeRTOS/tasks.c **** TickT_t uxReturn;
3579:FreeRTOS/tasks.c **** 
3580:FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 5379              		.loc 1 3580 0
 5380 0006 094B     		ldr	r3, .L348	@ tmp117,
 5381 0008 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.129_1, pxCurrentTCB
 5382 000a 9B69     		ldr	r3, [r3, #24]	@ tmp118, pxCurrentTCB.129_1->xEventListItem.xItemValue
 5383 000c 7B60     		str	r3, [r7, #4]	@ tmp118, uxReturn
 5384              	@ FreeRTOS/tasks.c:3584: 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickT_t )
3581:FreeRTOS/tasks.c **** 
3582:FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3583:FreeRTOS/tasks.c **** 	queues and semaphores. */
3584:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - (
 5385              		.loc 1 3584 0
 5386 000e 074B     		ldr	r3, .L348	@ tmp119,
 5387 0010 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.130_2, pxCurrentTCB
 5388 0012 DA6A     		ldr	r2, [r3, #44]	@ _3, pxCurrentTCB.130_2->uxPriority
 5389 0014 054B     		ldr	r3, .L348	@ tmp120,
 5390 0016 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.131_4, pxCurrentTCB
 5391 0018 C2F10802 		rsb	r2, r2, #8	@ _5, _3,
 5392 001c 9A61     		str	r2, [r3, #24]	@ _5, pxCurrentTCB.131_4->xEventListItem.xItemValue
 5393              	@ FreeRTOS/tasks.c:3586: 	return uxReturn;
3585:FreeRTOS/tasks.c **** 
3586:FreeRTOS/tasks.c **** 	return uxReturn;
 5394              		.loc 1 3586 0
 5395 001e 7B68     		ldr	r3, [r7, #4]	@ _9, uxReturn
 5396              	@ FreeRTOS/tasks.c:3587: }
3587:FreeRTOS/tasks.c **** }
 5397              		.loc 1 3587 0
 5398 0020 1846     		mov	r0, r3	@, <retval>
 5399 0022 0C37     		adds	r7, r7, #12	@,,
 5400              		.cfi_def_cfa_offset 4
 5401 0024 BD46     		mov	sp, r7	@,
 5402              		.cfi_def_cfa_register 13
 5403              		@ sp needed	@
 5404 0026 80BC     		pop	{r7}	@
 5405              		.cfi_restore 7
 5406              		.cfi_def_cfa_offset 0
 5407 0028 7047     		bx	lr	@
 5408              	.L349:
 5409 002a 00BF     		.align	2
 5410              	.L348:
 5411 002c 00000000 		.word	pxCurrentTCB
 5412              		.cfi_endproc
 5413              	.LFE44:
 5414              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 5415              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5416              		.align	1
 5417              		.global	pvTaskIncrementMutexHeldCount
ARM GAS  /tmp/ccTV2SzP.s 			page 163


 5418              		.syntax unified
 5419              		.thumb
 5420              		.thumb_func
 5421              		.fpu softvfp
 5422              		.type	pvTaskIncrementMutexHeldCount, %function
 5423              	pvTaskIncrementMutexHeldCount:
 5424              	.LFB45:
3588:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3589:FreeRTOS/tasks.c **** 
3590:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3591:FreeRTOS/tasks.c **** 
3592:FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3593:FreeRTOS/tasks.c **** 	{
 5425              		.loc 1 3593 0
 5426              		.cfi_startproc
 5427              		@ args = 0, pretend = 0, frame = 0
 5428              		@ frame_needed = 1, uses_anonymous_args = 0
 5429              		@ link register save eliminated.
 5430 0000 80B4     		push	{r7}	@
 5431              		.cfi_def_cfa_offset 4
 5432              		.cfi_offset 7, -4
 5433 0002 00AF     		add	r7, sp, #0	@,,
 5434              		.cfi_def_cfa_register 7
 5435              	@ FreeRTOS/tasks.c:3596: 		if( pxCurrentTCB != NULL )
3594:FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3595:FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
3596:FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 5436              		.loc 1 3596 0
 5437 0004 074B     		ldr	r3, .L353	@ tmp116,
 5438 0006 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.132_1, pxCurrentTCB
 5439 0008 002B     		cmp	r3, #0	@ pxCurrentTCB.132_1,
 5440 000a 04D0     		beq	.L351	@,
 5441              	@ FreeRTOS/tasks.c:3598: 			( pxCurrentTCB->uxMutexesHeld )++;
3597:FreeRTOS/tasks.c **** 		{
3598:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 5442              		.loc 1 3598 0
 5443 000c 054B     		ldr	r3, .L353	@ tmp117,
 5444 000e 1B68     		ldr	r3, [r3]	@ pxCurrentTCB.133_2, pxCurrentTCB
 5445 0010 DA6C     		ldr	r2, [r3, #76]	@ _3, pxCurrentTCB.133_2->uxMutexesHeld
 5446 0012 0132     		adds	r2, r2, #1	@ _4, _3,
 5447 0014 DA64     		str	r2, [r3, #76]	@ _4, pxCurrentTCB.133_2->uxMutexesHeld
 5448              	.L351:
 5449              	@ FreeRTOS/tasks.c:3601: 		return pxCurrentTCB;
3599:FreeRTOS/tasks.c **** 		}
3600:FreeRTOS/tasks.c **** 
3601:FreeRTOS/tasks.c **** 		return pxCurrentTCB;
 5450              		.loc 1 3601 0
 5451 0016 034B     		ldr	r3, .L353	@ tmp118,
 5452 0018 1B68     		ldr	r3, [r3]	@ _8, pxCurrentTCB
 5453              	@ FreeRTOS/tasks.c:3602: 	}
3602:FreeRTOS/tasks.c **** 	}
 5454              		.loc 1 3602 0
 5455 001a 1846     		mov	r0, r3	@, <retval>
 5456 001c BD46     		mov	sp, r7	@,
 5457              		.cfi_def_cfa_register 13
 5458              		@ sp needed	@
 5459 001e 80BC     		pop	{r7}	@
ARM GAS  /tmp/ccTV2SzP.s 			page 164


 5460              		.cfi_restore 7
 5461              		.cfi_def_cfa_offset 0
 5462 0020 7047     		bx	lr	@
 5463              	.L354:
 5464 0022 00BF     		.align	2
 5465              	.L353:
 5466 0024 00000000 		.word	pxCurrentTCB
 5467              		.cfi_endproc
 5468              	.LFE45:
 5469              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 5470              		.text
 5471              	.Letext0:
 5472              		.file 3 "/usr/lib/gcc/arm-none-eabi/7.1.0/include/stddef.h"
 5473              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 5474              		.file 5 "/usr/arm-none-eabi/include/sys/lock.h"
 5475              		.file 6 "/usr/arm-none-eabi/include/sys/_types.h"
 5476              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 5477              		.file 8 "/usr/arm-none-eabi/include/stdlib.h"
 5478              		.file 9 "/usr/arm-none-eabi/include/sys/_stdint.h"
 5479              		.file 10 "config/FreeRTOSConfig.h"
 5480              		.file 11 "FreeRTOS/include/projdefs.h"
 5481              		.file 12 "FreeRTOS/include/list.h"
 5482              		.file 13 "FreeRTOS/include/task.h"
 5483              		.section	.debug_info,"",%progbits
 5484              	.Ldebug_info0:
 5485 0000 5E1A0000 		.4byte	0x1a5e
 5486 0004 0400     		.2byte	0x4
 5487 0006 00000000 		.4byte	.Ldebug_abbrev0
 5488 000a 04       		.byte	0x4
 5489 000b 01       		.uleb128 0x1
 5490 000c AF5B0000 		.4byte	.LASF1502
 5491 0010 01       		.byte	0x1
 5492 0011 E86D0000 		.4byte	.LASF1503
 5493 0015 E1980000 		.4byte	.LASF1504
 5494 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5495 001d 00000000 		.4byte	0
 5496 0021 00000000 		.4byte	.Ldebug_line0
 5497 0025 00000000 		.4byte	.Ldebug_macro0
 5498 0029 02       		.uleb128 0x2
 5499 002a A5030000 		.4byte	.LASF1204
 5500 002e 03       		.byte	0x3
 5501 002f D8       		.byte	0xd8
 5502 0030 34000000 		.4byte	0x34
 5503 0034 03       		.uleb128 0x3
 5504 0035 04       		.byte	0x4
 5505 0036 07       		.byte	0x7
 5506 0037 0D620000 		.4byte	.LASF1202
 5507 003b 04       		.uleb128 0x4
 5508 003c 04       		.byte	0x4
 5509 003d 05       		.byte	0x5
 5510 003e 696E7400 		.ascii	"int\000"
 5511 0042 03       		.uleb128 0x3
 5512 0043 01       		.byte	0x1
 5513 0044 06       		.byte	0x6
 5514 0045 E6080000 		.4byte	.LASF1203
 5515 0049 02       		.uleb128 0x2
 5516 004a 3B7E0000 		.4byte	.LASF1205
ARM GAS  /tmp/ccTV2SzP.s 			page 165


 5517 004e 04       		.byte	0x4
 5518 004f 2B       		.byte	0x2b
 5519 0050 54000000 		.4byte	0x54
 5520 0054 03       		.uleb128 0x3
 5521 0055 01       		.byte	0x1
 5522 0056 08       		.byte	0x8
 5523 0057 E46C0000 		.4byte	.LASF1206
 5524 005b 03       		.uleb128 0x3
 5525 005c 02       		.byte	0x2
 5526 005d 05       		.byte	0x5
 5527 005e 45640000 		.4byte	.LASF1207
 5528 0062 02       		.uleb128 0x2
 5529 0063 7A330000 		.4byte	.LASF1208
 5530 0067 04       		.byte	0x4
 5531 0068 39       		.byte	0x39
 5532 0069 6D000000 		.4byte	0x6d
 5533 006d 03       		.uleb128 0x3
 5534 006e 02       		.byte	0x2
 5535 006f 07       		.byte	0x7
 5536 0070 37A00000 		.4byte	.LASF1209
 5537 0074 03       		.uleb128 0x3
 5538 0075 04       		.byte	0x4
 5539 0076 05       		.byte	0x5
 5540 0077 9E6B0000 		.4byte	.LASF1210
 5541 007b 02       		.uleb128 0x2
 5542 007c 7D570000 		.4byte	.LASF1211
 5543 0080 04       		.byte	0x4
 5544 0081 4F       		.byte	0x4f
 5545 0082 86000000 		.4byte	0x86
 5546 0086 03       		.uleb128 0x3
 5547 0087 04       		.byte	0x4
 5548 0088 07       		.byte	0x7
 5549 0089 4B480000 		.4byte	.LASF1212
 5550 008d 03       		.uleb128 0x3
 5551 008e 08       		.byte	0x8
 5552 008f 05       		.byte	0x5
 5553 0090 8B360000 		.4byte	.LASF1213
 5554 0094 03       		.uleb128 0x3
 5555 0095 08       		.byte	0x8
 5556 0096 07       		.byte	0x7
 5557 0097 4E770000 		.4byte	.LASF1214
 5558 009b 02       		.uleb128 0x2
 5559 009c CA4B0000 		.4byte	.LASF1215
 5560 00a0 05       		.byte	0x5
 5561 00a1 0C       		.byte	0xc
 5562 00a2 3B000000 		.4byte	0x3b
 5563 00a6 02       		.uleb128 0x2
 5564 00a7 9A9E0000 		.4byte	.LASF1216
 5565 00ab 06       		.byte	0x6
 5566 00ac 2C       		.byte	0x2c
 5567 00ad 74000000 		.4byte	0x74
 5568 00b1 02       		.uleb128 0x2
 5569 00b2 0D740000 		.4byte	.LASF1217
 5570 00b6 06       		.byte	0x6
 5571 00b7 72       		.byte	0x72
 5572 00b8 74000000 		.4byte	0x74
 5573 00bc 05       		.uleb128 0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 166


 5574 00bd 74810000 		.4byte	.LASF1218
 5575 00c1 03       		.byte	0x3
 5576 00c2 6501     		.2byte	0x165
 5577 00c4 34000000 		.4byte	0x34
 5578 00c8 06       		.uleb128 0x6
 5579 00c9 04       		.byte	0x4
 5580 00ca 06       		.byte	0x6
 5581 00cb A6       		.byte	0xa6
 5582 00cc E7000000 		.4byte	0xe7
 5583 00d0 07       		.uleb128 0x7
 5584 00d1 D0150000 		.4byte	.LASF1219
 5585 00d5 06       		.byte	0x6
 5586 00d6 A8       		.byte	0xa8
 5587 00d7 BC000000 		.4byte	0xbc
 5588 00db 07       		.uleb128 0x7
 5589 00dc 5F740000 		.4byte	.LASF1220
 5590 00e0 06       		.byte	0x6
 5591 00e1 A9       		.byte	0xa9
 5592 00e2 E7000000 		.4byte	0xe7
 5593 00e6 00       		.byte	0
 5594 00e7 08       		.uleb128 0x8
 5595 00e8 54000000 		.4byte	0x54
 5596 00ec F7000000 		.4byte	0xf7
 5597 00f0 09       		.uleb128 0x9
 5598 00f1 34000000 		.4byte	0x34
 5599 00f5 03       		.byte	0x3
 5600 00f6 00       		.byte	0
 5601 00f7 0A       		.uleb128 0xa
 5602 00f8 08       		.byte	0x8
 5603 00f9 06       		.byte	0x6
 5604 00fa A3       		.byte	0xa3
 5605 00fb 18010000 		.4byte	0x118
 5606 00ff 0B       		.uleb128 0xb
 5607 0100 F96D0000 		.4byte	.LASF1221
 5608 0104 06       		.byte	0x6
 5609 0105 A5       		.byte	0xa5
 5610 0106 3B000000 		.4byte	0x3b
 5611 010a 00       		.byte	0
 5612 010b 0B       		.uleb128 0xb
 5613 010c 99040000 		.4byte	.LASF1222
 5614 0110 06       		.byte	0x6
 5615 0111 AA       		.byte	0xaa
 5616 0112 C8000000 		.4byte	0xc8
 5617 0116 04       		.byte	0x4
 5618 0117 00       		.byte	0
 5619 0118 02       		.uleb128 0x2
 5620 0119 98740000 		.4byte	.LASF1223
 5621 011d 06       		.byte	0x6
 5622 011e AB       		.byte	0xab
 5623 011f F7000000 		.4byte	0xf7
 5624 0123 02       		.uleb128 0x2
 5625 0124 8E7E0000 		.4byte	.LASF1224
 5626 0128 06       		.byte	0x6
 5627 0129 AF       		.byte	0xaf
 5628 012a 9B000000 		.4byte	0x9b
 5629 012e 0C       		.uleb128 0xc
 5630 012f 04       		.byte	0x4
ARM GAS  /tmp/ccTV2SzP.s 			page 167


 5631 0130 0D       		.uleb128 0xd
 5632 0131 2E010000 		.4byte	0x12e
 5633 0135 0E       		.uleb128 0xe
 5634 0136 04       		.byte	0x4
 5635 0137 3B010000 		.4byte	0x13b
 5636 013b 03       		.uleb128 0x3
 5637 013c 01       		.byte	0x1
 5638 013d 08       		.byte	0x8
 5639 013e 9B6F0000 		.4byte	.LASF802
 5640 0142 0D       		.uleb128 0xd
 5641 0143 3B010000 		.4byte	0x13b
 5642 0147 02       		.uleb128 0x2
 5643 0148 A19A0000 		.4byte	.LASF1225
 5644 014c 07       		.byte	0x7
 5645 014d 16       		.byte	0x16
 5646 014e 86000000 		.4byte	0x86
 5647 0152 0F       		.uleb128 0xf
 5648 0153 D0520000 		.4byte	.LASF1230
 5649 0157 18       		.byte	0x18
 5650 0158 07       		.byte	0x7
 5651 0159 2F       		.byte	0x2f
 5652 015a A5010000 		.4byte	0x1a5
 5653 015e 0B       		.uleb128 0xb
 5654 015f D4810000 		.4byte	.LASF1226
 5655 0163 07       		.byte	0x7
 5656 0164 31       		.byte	0x31
 5657 0165 A5010000 		.4byte	0x1a5
 5658 0169 00       		.byte	0
 5659 016a 10       		.uleb128 0x10
 5660 016b 5F6B00   		.ascii	"_k\000"
 5661 016e 07       		.byte	0x7
 5662 016f 32       		.byte	0x32
 5663 0170 3B000000 		.4byte	0x3b
 5664 0174 04       		.byte	0x4
 5665 0175 0B       		.uleb128 0xb
 5666 0176 00540000 		.4byte	.LASF1227
 5667 017a 07       		.byte	0x7
 5668 017b 32       		.byte	0x32
 5669 017c 3B000000 		.4byte	0x3b
 5670 0180 08       		.byte	0x8
 5671 0181 0B       		.uleb128 0xb
 5672 0182 0A5E0000 		.4byte	.LASF1228
 5673 0186 07       		.byte	0x7
 5674 0187 32       		.byte	0x32
 5675 0188 3B000000 		.4byte	0x3b
 5676 018c 0C       		.byte	0xc
 5677 018d 0B       		.uleb128 0xb
 5678 018e 15340000 		.4byte	.LASF1229
 5679 0192 07       		.byte	0x7
 5680 0193 32       		.byte	0x32
 5681 0194 3B000000 		.4byte	0x3b
 5682 0198 10       		.byte	0x10
 5683 0199 10       		.uleb128 0x10
 5684 019a 5F7800   		.ascii	"_x\000"
 5685 019d 07       		.byte	0x7
 5686 019e 33       		.byte	0x33
 5687 019f AB010000 		.4byte	0x1ab
ARM GAS  /tmp/ccTV2SzP.s 			page 168


 5688 01a3 14       		.byte	0x14
 5689 01a4 00       		.byte	0
 5690 01a5 0E       		.uleb128 0xe
 5691 01a6 04       		.byte	0x4
 5692 01a7 52010000 		.4byte	0x152
 5693 01ab 08       		.uleb128 0x8
 5694 01ac 47010000 		.4byte	0x147
 5695 01b0 BB010000 		.4byte	0x1bb
 5696 01b4 09       		.uleb128 0x9
 5697 01b5 34000000 		.4byte	0x34
 5698 01b9 00       		.byte	0
 5699 01ba 00       		.byte	0
 5700 01bb 0F       		.uleb128 0xf
 5701 01bc 530C0000 		.4byte	.LASF1231
 5702 01c0 24       		.byte	0x24
 5703 01c1 07       		.byte	0x7
 5704 01c2 37       		.byte	0x37
 5705 01c3 34020000 		.4byte	0x234
 5706 01c7 0B       		.uleb128 0xb
 5707 01c8 6F0C0000 		.4byte	.LASF1232
 5708 01cc 07       		.byte	0x7
 5709 01cd 39       		.byte	0x39
 5710 01ce 3B000000 		.4byte	0x3b
 5711 01d2 00       		.byte	0
 5712 01d3 0B       		.uleb128 0xb
 5713 01d4 5CA90000 		.4byte	.LASF1233
 5714 01d8 07       		.byte	0x7
 5715 01d9 3A       		.byte	0x3a
 5716 01da 3B000000 		.4byte	0x3b
 5717 01de 04       		.byte	0x4
 5718 01df 0B       		.uleb128 0xb
 5719 01e0 5EA00000 		.4byte	.LASF1234
 5720 01e4 07       		.byte	0x7
 5721 01e5 3B       		.byte	0x3b
 5722 01e6 3B000000 		.4byte	0x3b
 5723 01ea 08       		.byte	0x8
 5724 01eb 0B       		.uleb128 0xb
 5725 01ec 4E430000 		.4byte	.LASF1235
 5726 01f0 07       		.byte	0x7
 5727 01f1 3C       		.byte	0x3c
 5728 01f2 3B000000 		.4byte	0x3b
 5729 01f6 0C       		.byte	0xc
 5730 01f7 0B       		.uleb128 0xb
 5731 01f8 55200000 		.4byte	.LASF1236
 5732 01fc 07       		.byte	0x7
 5733 01fd 3D       		.byte	0x3d
 5734 01fe 3B000000 		.4byte	0x3b
 5735 0202 10       		.byte	0x10
 5736 0203 0B       		.uleb128 0xb
 5737 0204 3A920000 		.4byte	.LASF1237
 5738 0208 07       		.byte	0x7
 5739 0209 3E       		.byte	0x3e
 5740 020a 3B000000 		.4byte	0x3b
 5741 020e 14       		.byte	0x14
 5742 020f 0B       		.uleb128 0xb
 5743 0210 CD6F0000 		.4byte	.LASF1238
 5744 0214 07       		.byte	0x7
ARM GAS  /tmp/ccTV2SzP.s 			page 169


 5745 0215 3F       		.byte	0x3f
 5746 0216 3B000000 		.4byte	0x3b
 5747 021a 18       		.byte	0x18
 5748 021b 0B       		.uleb128 0xb
 5749 021c 27710000 		.4byte	.LASF1239
 5750 0220 07       		.byte	0x7
 5751 0221 40       		.byte	0x40
 5752 0222 3B000000 		.4byte	0x3b
 5753 0226 1C       		.byte	0x1c
 5754 0227 0B       		.uleb128 0xb
 5755 0228 70A70000 		.4byte	.LASF1240
 5756 022c 07       		.byte	0x7
 5757 022d 41       		.byte	0x41
 5758 022e 3B000000 		.4byte	0x3b
 5759 0232 20       		.byte	0x20
 5760 0233 00       		.byte	0
 5761 0234 11       		.uleb128 0x11
 5762 0235 2B170000 		.4byte	.LASF1241
 5763 0239 0801     		.2byte	0x108
 5764 023b 07       		.byte	0x7
 5765 023c 4A       		.byte	0x4a
 5766 023d 74020000 		.4byte	0x274
 5767 0241 0B       		.uleb128 0xb
 5768 0242 FD0E0000 		.4byte	.LASF1242
 5769 0246 07       		.byte	0x7
 5770 0247 4B       		.byte	0x4b
 5771 0248 74020000 		.4byte	0x274
 5772 024c 00       		.byte	0
 5773 024d 0B       		.uleb128 0xb
 5774 024e CA780000 		.4byte	.LASF1243
 5775 0252 07       		.byte	0x7
 5776 0253 4C       		.byte	0x4c
 5777 0254 74020000 		.4byte	0x274
 5778 0258 80       		.byte	0x80
 5779 0259 12       		.uleb128 0x12
 5780 025a 611E0000 		.4byte	.LASF1244
 5781 025e 07       		.byte	0x7
 5782 025f 4E       		.byte	0x4e
 5783 0260 47010000 		.4byte	0x147
 5784 0264 0001     		.2byte	0x100
 5785 0266 12       		.uleb128 0x12
 5786 0267 F5970000 		.4byte	.LASF1245
 5787 026b 07       		.byte	0x7
 5788 026c 51       		.byte	0x51
 5789 026d 47010000 		.4byte	0x147
 5790 0271 0401     		.2byte	0x104
 5791 0273 00       		.byte	0
 5792 0274 08       		.uleb128 0x8
 5793 0275 2E010000 		.4byte	0x12e
 5794 0279 84020000 		.4byte	0x284
 5795 027d 09       		.uleb128 0x9
 5796 027e 34000000 		.4byte	0x34
 5797 0282 1F       		.byte	0x1f
 5798 0283 00       		.byte	0
 5799 0284 11       		.uleb128 0x11
 5800 0285 0F6C0000 		.4byte	.LASF1246
 5801 0289 9001     		.2byte	0x190
ARM GAS  /tmp/ccTV2SzP.s 			page 170


 5802 028b 07       		.byte	0x7
 5803 028c 5D       		.byte	0x5d
 5804 028d C2020000 		.4byte	0x2c2
 5805 0291 0B       		.uleb128 0xb
 5806 0292 D4810000 		.4byte	.LASF1226
 5807 0296 07       		.byte	0x7
 5808 0297 5E       		.byte	0x5e
 5809 0298 C2020000 		.4byte	0x2c2
 5810 029c 00       		.byte	0
 5811 029d 0B       		.uleb128 0xb
 5812 029e B6950000 		.4byte	.LASF1247
 5813 02a2 07       		.byte	0x7
 5814 02a3 5F       		.byte	0x5f
 5815 02a4 3B000000 		.4byte	0x3b
 5816 02a8 04       		.byte	0x4
 5817 02a9 0B       		.uleb128 0xb
 5818 02aa 7C300000 		.4byte	.LASF1248
 5819 02ae 07       		.byte	0x7
 5820 02af 61       		.byte	0x61
 5821 02b0 C8020000 		.4byte	0x2c8
 5822 02b4 08       		.byte	0x8
 5823 02b5 0B       		.uleb128 0xb
 5824 02b6 2B170000 		.4byte	.LASF1241
 5825 02ba 07       		.byte	0x7
 5826 02bb 62       		.byte	0x62
 5827 02bc 34020000 		.4byte	0x234
 5828 02c0 88       		.byte	0x88
 5829 02c1 00       		.byte	0
 5830 02c2 0E       		.uleb128 0xe
 5831 02c3 04       		.byte	0x4
 5832 02c4 84020000 		.4byte	0x284
 5833 02c8 08       		.uleb128 0x8
 5834 02c9 D8020000 		.4byte	0x2d8
 5835 02cd D8020000 		.4byte	0x2d8
 5836 02d1 09       		.uleb128 0x9
 5837 02d2 34000000 		.4byte	0x34
 5838 02d6 1F       		.byte	0x1f
 5839 02d7 00       		.byte	0
 5840 02d8 0E       		.uleb128 0xe
 5841 02d9 04       		.byte	0x4
 5842 02da DE020000 		.4byte	0x2de
 5843 02de 13       		.uleb128 0x13
 5844 02df 0F       		.uleb128 0xf
 5845 02e0 A1050000 		.4byte	.LASF1249
 5846 02e4 08       		.byte	0x8
 5847 02e5 07       		.byte	0x7
 5848 02e6 75       		.byte	0x75
 5849 02e7 04030000 		.4byte	0x304
 5850 02eb 0B       		.uleb128 0xb
 5851 02ec 217C0000 		.4byte	.LASF1250
 5852 02f0 07       		.byte	0x7
 5853 02f1 76       		.byte	0x76
 5854 02f2 04030000 		.4byte	0x304
 5855 02f6 00       		.byte	0
 5856 02f7 0B       		.uleb128 0xb
 5857 02f8 269C0000 		.4byte	.LASF1251
 5858 02fc 07       		.byte	0x7
ARM GAS  /tmp/ccTV2SzP.s 			page 171


 5859 02fd 77       		.byte	0x77
 5860 02fe 3B000000 		.4byte	0x3b
 5861 0302 04       		.byte	0x4
 5862 0303 00       		.byte	0
 5863 0304 0E       		.uleb128 0xe
 5864 0305 04       		.byte	0x4
 5865 0306 54000000 		.4byte	0x54
 5866 030a 0F       		.uleb128 0xf
 5867 030b A8490000 		.4byte	.LASF1252
 5868 030f 68       		.byte	0x68
 5869 0310 07       		.byte	0x7
 5870 0311 B5       		.byte	0xb5
 5871 0312 34040000 		.4byte	0x434
 5872 0316 10       		.uleb128 0x10
 5873 0317 5F7000   		.ascii	"_p\000"
 5874 031a 07       		.byte	0x7
 5875 031b B6       		.byte	0xb6
 5876 031c 04030000 		.4byte	0x304
 5877 0320 00       		.byte	0
 5878 0321 10       		.uleb128 0x10
 5879 0322 5F7200   		.ascii	"_r\000"
 5880 0325 07       		.byte	0x7
 5881 0326 B7       		.byte	0xb7
 5882 0327 3B000000 		.4byte	0x3b
 5883 032b 04       		.byte	0x4
 5884 032c 10       		.uleb128 0x10
 5885 032d 5F7700   		.ascii	"_w\000"
 5886 0330 07       		.byte	0x7
 5887 0331 B8       		.byte	0xb8
 5888 0332 3B000000 		.4byte	0x3b
 5889 0336 08       		.byte	0x8
 5890 0337 0B       		.uleb128 0xb
 5891 0338 DE6A0000 		.4byte	.LASF1253
 5892 033c 07       		.byte	0x7
 5893 033d B9       		.byte	0xb9
 5894 033e 5B000000 		.4byte	0x5b
 5895 0342 0C       		.byte	0xc
 5896 0343 0B       		.uleb128 0xb
 5897 0344 AE160000 		.4byte	.LASF1254
 5898 0348 07       		.byte	0x7
 5899 0349 BA       		.byte	0xba
 5900 034a 5B000000 		.4byte	0x5b
 5901 034e 0E       		.byte	0xe
 5902 034f 10       		.uleb128 0x10
 5903 0350 5F626600 		.ascii	"_bf\000"
 5904 0354 07       		.byte	0x7
 5905 0355 BB       		.byte	0xbb
 5906 0356 DF020000 		.4byte	0x2df
 5907 035a 10       		.byte	0x10
 5908 035b 0B       		.uleb128 0xb
 5909 035c 62950000 		.4byte	.LASF1255
 5910 0360 07       		.byte	0x7
 5911 0361 BC       		.byte	0xbc
 5912 0362 3B000000 		.4byte	0x3b
 5913 0366 18       		.byte	0x18
 5914 0367 0B       		.uleb128 0xb
 5915 0368 CA3F0000 		.4byte	.LASF1256
ARM GAS  /tmp/ccTV2SzP.s 			page 172


 5916 036c 07       		.byte	0x7
 5917 036d C3       		.byte	0xc3
 5918 036e 2E010000 		.4byte	0x12e
 5919 0372 1C       		.byte	0x1c
 5920 0373 0B       		.uleb128 0xb
 5921 0374 A8050000 		.4byte	.LASF1257
 5922 0378 07       		.byte	0x7
 5923 0379 C5       		.byte	0xc5
 5924 037a 8F050000 		.4byte	0x58f
 5925 037e 20       		.byte	0x20
 5926 037f 0B       		.uleb128 0xb
 5927 0380 4F080000 		.4byte	.LASF1258
 5928 0384 07       		.byte	0x7
 5929 0385 C7       		.byte	0xc7
 5930 0386 BE050000 		.4byte	0x5be
 5931 038a 24       		.byte	0x24
 5932 038b 0B       		.uleb128 0xb
 5933 038c 13730000 		.4byte	.LASF1259
 5934 0390 07       		.byte	0x7
 5935 0391 CA       		.byte	0xca
 5936 0392 E2050000 		.4byte	0x5e2
 5937 0396 28       		.byte	0x28
 5938 0397 0B       		.uleb128 0xb
 5939 0398 7A310000 		.4byte	.LASF1260
 5940 039c 07       		.byte	0x7
 5941 039d CB       		.byte	0xcb
 5942 039e FC050000 		.4byte	0x5fc
 5943 03a2 2C       		.byte	0x2c
 5944 03a3 10       		.uleb128 0x10
 5945 03a4 5F756200 		.ascii	"_ub\000"
 5946 03a8 07       		.byte	0x7
 5947 03a9 CE       		.byte	0xce
 5948 03aa DF020000 		.4byte	0x2df
 5949 03ae 30       		.byte	0x30
 5950 03af 10       		.uleb128 0x10
 5951 03b0 5F757000 		.ascii	"_up\000"
 5952 03b4 07       		.byte	0x7
 5953 03b5 CF       		.byte	0xcf
 5954 03b6 04030000 		.4byte	0x304
 5955 03ba 38       		.byte	0x38
 5956 03bb 10       		.uleb128 0x10
 5957 03bc 5F757200 		.ascii	"_ur\000"
 5958 03c0 07       		.byte	0x7
 5959 03c1 D0       		.byte	0xd0
 5960 03c2 3B000000 		.4byte	0x3b
 5961 03c6 3C       		.byte	0x3c
 5962 03c7 0B       		.uleb128 0xb
 5963 03c8 CA250000 		.4byte	.LASF1261
 5964 03cc 07       		.byte	0x7
 5965 03cd D3       		.byte	0xd3
 5966 03ce 02060000 		.4byte	0x602
 5967 03d2 40       		.byte	0x40
 5968 03d3 0B       		.uleb128 0xb
 5969 03d4 690C0000 		.4byte	.LASF1262
 5970 03d8 07       		.byte	0x7
 5971 03d9 D4       		.byte	0xd4
 5972 03da 12060000 		.4byte	0x612
ARM GAS  /tmp/ccTV2SzP.s 			page 173


 5973 03de 43       		.byte	0x43
 5974 03df 10       		.uleb128 0x10
 5975 03e0 5F6C6200 		.ascii	"_lb\000"
 5976 03e4 07       		.byte	0x7
 5977 03e5 D7       		.byte	0xd7
 5978 03e6 DF020000 		.4byte	0x2df
 5979 03ea 44       		.byte	0x44
 5980 03eb 0B       		.uleb128 0xb
 5981 03ec B57B0000 		.4byte	.LASF1263
 5982 03f0 07       		.byte	0x7
 5983 03f1 DA       		.byte	0xda
 5984 03f2 3B000000 		.4byte	0x3b
 5985 03f6 4C       		.byte	0x4c
 5986 03f7 0B       		.uleb128 0xb
 5987 03f8 1E430000 		.4byte	.LASF1264
 5988 03fc 07       		.byte	0x7
 5989 03fd DB       		.byte	0xdb
 5990 03fe A6000000 		.4byte	0xa6
 5991 0402 50       		.byte	0x50
 5992 0403 0B       		.uleb128 0xb
 5993 0404 04820000 		.4byte	.LASF1265
 5994 0408 07       		.byte	0x7
 5995 0409 DE       		.byte	0xde
 5996 040a 52040000 		.4byte	0x452
 5997 040e 54       		.byte	0x54
 5998 040f 0B       		.uleb128 0xb
 5999 0410 1C0F0000 		.4byte	.LASF1266
 6000 0414 07       		.byte	0x7
 6001 0415 E2       		.byte	0xe2
 6002 0416 23010000 		.4byte	0x123
 6003 041a 58       		.byte	0x58
 6004 041b 0B       		.uleb128 0xb
 6005 041c 106A0000 		.4byte	.LASF1267
 6006 0420 07       		.byte	0x7
 6007 0421 E4       		.byte	0xe4
 6008 0422 18010000 		.4byte	0x118
 6009 0426 5C       		.byte	0x5c
 6010 0427 0B       		.uleb128 0xb
 6011 0428 9C610000 		.4byte	.LASF1268
 6012 042c 07       		.byte	0x7
 6013 042d E5       		.byte	0xe5
 6014 042e 3B000000 		.4byte	0x3b
 6015 0432 64       		.byte	0x64
 6016 0433 00       		.byte	0
 6017 0434 14       		.uleb128 0x14
 6018 0435 3B000000 		.4byte	0x3b
 6019 0439 52040000 		.4byte	0x452
 6020 043d 15       		.uleb128 0x15
 6021 043e 52040000 		.4byte	0x452
 6022 0442 15       		.uleb128 0x15
 6023 0443 2E010000 		.4byte	0x12e
 6024 0447 15       		.uleb128 0x15
 6025 0448 35010000 		.4byte	0x135
 6026 044c 15       		.uleb128 0x15
 6027 044d 3B000000 		.4byte	0x3b
 6028 0451 00       		.byte	0
 6029 0452 0E       		.uleb128 0xe
ARM GAS  /tmp/ccTV2SzP.s 			page 174


 6030 0453 04       		.byte	0x4
 6031 0454 5D040000 		.4byte	0x45d
 6032 0458 0D       		.uleb128 0xd
 6033 0459 52040000 		.4byte	0x452
 6034 045d 16       		.uleb128 0x16
 6035 045e 342B0000 		.4byte	.LASF1269
 6036 0462 2804     		.2byte	0x428
 6037 0464 07       		.byte	0x7
 6038 0465 3902     		.2byte	0x239
 6039 0467 8F050000 		.4byte	0x58f
 6040 046b 17       		.uleb128 0x17
 6041 046c 3D4D0000 		.4byte	.LASF1270
 6042 0470 07       		.byte	0x7
 6043 0471 3B02     		.2byte	0x23b
 6044 0473 3B000000 		.4byte	0x3b
 6045 0477 00       		.byte	0
 6046 0478 17       		.uleb128 0x17
 6047 0479 9F340000 		.4byte	.LASF1271
 6048 047d 07       		.byte	0x7
 6049 047e 4002     		.2byte	0x240
 6050 0480 69060000 		.4byte	0x669
 6051 0484 04       		.byte	0x4
 6052 0485 17       		.uleb128 0x17
 6053 0486 607A0000 		.4byte	.LASF1272
 6054 048a 07       		.byte	0x7
 6055 048b 4002     		.2byte	0x240
 6056 048d 69060000 		.4byte	0x669
 6057 0491 08       		.byte	0x8
 6058 0492 17       		.uleb128 0x17
 6059 0493 F9670000 		.4byte	.LASF1273
 6060 0497 07       		.byte	0x7
 6061 0498 4002     		.2byte	0x240
 6062 049a 69060000 		.4byte	0x669
 6063 049e 0C       		.byte	0xc
 6064 049f 17       		.uleb128 0x17
 6065 04a0 8A2D0000 		.4byte	.LASF1274
 6066 04a4 07       		.byte	0x7
 6067 04a5 4202     		.2byte	0x242
 6068 04a7 3B000000 		.4byte	0x3b
 6069 04ab 10       		.byte	0x10
 6070 04ac 17       		.uleb128 0x17
 6071 04ad EA610000 		.4byte	.LASF1275
 6072 04b1 07       		.byte	0x7
 6073 04b2 4302     		.2byte	0x243
 6074 04b4 4B080000 		.4byte	0x84b
 6075 04b8 14       		.byte	0x14
 6076 04b9 17       		.uleb128 0x17
 6077 04ba A32A0000 		.4byte	.LASF1276
 6078 04be 07       		.byte	0x7
 6079 04bf 4602     		.2byte	0x246
 6080 04c1 3B000000 		.4byte	0x3b
 6081 04c5 30       		.byte	0x30
 6082 04c6 17       		.uleb128 0x17
 6083 04c7 999A0000 		.4byte	.LASF1277
 6084 04cb 07       		.byte	0x7
 6085 04cc 4702     		.2byte	0x247
 6086 04ce 60080000 		.4byte	0x860
ARM GAS  /tmp/ccTV2SzP.s 			page 175


 6087 04d2 34       		.byte	0x34
 6088 04d3 17       		.uleb128 0x17
 6089 04d4 B0490000 		.4byte	.LASF1278
 6090 04d8 07       		.byte	0x7
 6091 04d9 4902     		.2byte	0x249
 6092 04db 3B000000 		.4byte	0x3b
 6093 04df 38       		.byte	0x38
 6094 04e0 17       		.uleb128 0x17
 6095 04e1 C6540000 		.4byte	.LASF1279
 6096 04e5 07       		.byte	0x7
 6097 04e6 4B02     		.2byte	0x24b
 6098 04e8 71080000 		.4byte	0x871
 6099 04ec 3C       		.byte	0x3c
 6100 04ed 17       		.uleb128 0x17
 6101 04ee 6C9C0000 		.4byte	.LASF1280
 6102 04f2 07       		.byte	0x7
 6103 04f3 4E02     		.2byte	0x24e
 6104 04f5 A5010000 		.4byte	0x1a5
 6105 04f9 40       		.byte	0x40
 6106 04fa 17       		.uleb128 0x17
 6107 04fb 161B0000 		.4byte	.LASF1281
 6108 04ff 07       		.byte	0x7
 6109 0500 4F02     		.2byte	0x24f
 6110 0502 3B000000 		.4byte	0x3b
 6111 0506 44       		.byte	0x44
 6112 0507 17       		.uleb128 0x17
 6113 0508 12400000 		.4byte	.LASF1282
 6114 050c 07       		.byte	0x7
 6115 050d 5002     		.2byte	0x250
 6116 050f A5010000 		.4byte	0x1a5
 6117 0513 48       		.byte	0x48
 6118 0514 17       		.uleb128 0x17
 6119 0515 6B5D0000 		.4byte	.LASF1283
 6120 0519 07       		.byte	0x7
 6121 051a 5102     		.2byte	0x251
 6122 051c 77080000 		.4byte	0x877
 6123 0520 4C       		.byte	0x4c
 6124 0521 17       		.uleb128 0x17
 6125 0522 77090000 		.4byte	.LASF1284
 6126 0526 07       		.byte	0x7
 6127 0527 5402     		.2byte	0x254
 6128 0529 3B000000 		.4byte	0x3b
 6129 052d 50       		.byte	0x50
 6130 052e 17       		.uleb128 0x17
 6131 052f 46430000 		.4byte	.LASF1285
 6132 0533 07       		.byte	0x7
 6133 0534 5502     		.2byte	0x255
 6134 0536 35010000 		.4byte	0x135
 6135 053a 54       		.byte	0x54
 6136 053b 17       		.uleb128 0x17
 6137 053c 19670000 		.4byte	.LASF1286
 6138 0540 07       		.byte	0x7
 6139 0541 7802     		.2byte	0x278
 6140 0543 29080000 		.4byte	0x829
 6141 0547 58       		.byte	0x58
 6142 0548 18       		.uleb128 0x18
 6143 0549 0F6C0000 		.4byte	.LASF1246
ARM GAS  /tmp/ccTV2SzP.s 			page 176


 6144 054d 07       		.byte	0x7
 6145 054e 7C02     		.2byte	0x27c
 6146 0550 C2020000 		.4byte	0x2c2
 6147 0554 4801     		.2byte	0x148
 6148 0556 18       		.uleb128 0x18
 6149 0557 E6540000 		.4byte	.LASF1287
 6150 055b 07       		.byte	0x7
 6151 055c 7D02     		.2byte	0x27d
 6152 055e 84020000 		.4byte	0x284
 6153 0562 4C01     		.2byte	0x14c
 6154 0564 18       		.uleb128 0x18
 6155 0565 D5410000 		.4byte	.LASF1288
 6156 0569 07       		.byte	0x7
 6157 056a 8102     		.2byte	0x281
 6158 056c 88080000 		.4byte	0x888
 6159 0570 DC02     		.2byte	0x2dc
 6160 0572 18       		.uleb128 0x18
 6161 0573 1AA60000 		.4byte	.LASF1289
 6162 0577 07       		.byte	0x7
 6163 0578 8602     		.2byte	0x286
 6164 057a 2E060000 		.4byte	0x62e
 6165 057e E002     		.2byte	0x2e0
 6166 0580 18       		.uleb128 0x18
 6167 0581 5B050000 		.4byte	.LASF1290
 6168 0585 07       		.byte	0x7
 6169 0586 8702     		.2byte	0x287
 6170 0588 94080000 		.4byte	0x894
 6171 058c EC02     		.2byte	0x2ec
 6172 058e 00       		.byte	0
 6173 058f 0E       		.uleb128 0xe
 6174 0590 04       		.byte	0x4
 6175 0591 34040000 		.4byte	0x434
 6176 0595 14       		.uleb128 0x14
 6177 0596 3B000000 		.4byte	0x3b
 6178 059a B3050000 		.4byte	0x5b3
 6179 059e 15       		.uleb128 0x15
 6180 059f 52040000 		.4byte	0x452
 6181 05a3 15       		.uleb128 0x15
 6182 05a4 2E010000 		.4byte	0x12e
 6183 05a8 15       		.uleb128 0x15
 6184 05a9 B3050000 		.4byte	0x5b3
 6185 05ad 15       		.uleb128 0x15
 6186 05ae 3B000000 		.4byte	0x3b
 6187 05b2 00       		.byte	0
 6188 05b3 0E       		.uleb128 0xe
 6189 05b4 04       		.byte	0x4
 6190 05b5 42010000 		.4byte	0x142
 6191 05b9 0D       		.uleb128 0xd
 6192 05ba B3050000 		.4byte	0x5b3
 6193 05be 0E       		.uleb128 0xe
 6194 05bf 04       		.byte	0x4
 6195 05c0 95050000 		.4byte	0x595
 6196 05c4 14       		.uleb128 0x14
 6197 05c5 B1000000 		.4byte	0xb1
 6198 05c9 E2050000 		.4byte	0x5e2
 6199 05cd 15       		.uleb128 0x15
 6200 05ce 52040000 		.4byte	0x452
ARM GAS  /tmp/ccTV2SzP.s 			page 177


 6201 05d2 15       		.uleb128 0x15
 6202 05d3 2E010000 		.4byte	0x12e
 6203 05d7 15       		.uleb128 0x15
 6204 05d8 B1000000 		.4byte	0xb1
 6205 05dc 15       		.uleb128 0x15
 6206 05dd 3B000000 		.4byte	0x3b
 6207 05e1 00       		.byte	0
 6208 05e2 0E       		.uleb128 0xe
 6209 05e3 04       		.byte	0x4
 6210 05e4 C4050000 		.4byte	0x5c4
 6211 05e8 14       		.uleb128 0x14
 6212 05e9 3B000000 		.4byte	0x3b
 6213 05ed FC050000 		.4byte	0x5fc
 6214 05f1 15       		.uleb128 0x15
 6215 05f2 52040000 		.4byte	0x452
 6216 05f6 15       		.uleb128 0x15
 6217 05f7 2E010000 		.4byte	0x12e
 6218 05fb 00       		.byte	0
 6219 05fc 0E       		.uleb128 0xe
 6220 05fd 04       		.byte	0x4
 6221 05fe E8050000 		.4byte	0x5e8
 6222 0602 08       		.uleb128 0x8
 6223 0603 54000000 		.4byte	0x54
 6224 0607 12060000 		.4byte	0x612
 6225 060b 09       		.uleb128 0x9
 6226 060c 34000000 		.4byte	0x34
 6227 0610 02       		.byte	0x2
 6228 0611 00       		.byte	0
 6229 0612 08       		.uleb128 0x8
 6230 0613 54000000 		.4byte	0x54
 6231 0617 22060000 		.4byte	0x622
 6232 061b 09       		.uleb128 0x9
 6233 061c 34000000 		.4byte	0x34
 6234 0620 00       		.byte	0
 6235 0621 00       		.byte	0
 6236 0622 05       		.uleb128 0x5
 6237 0623 BA7E0000 		.4byte	.LASF1291
 6238 0627 07       		.byte	0x7
 6239 0628 1F01     		.2byte	0x11f
 6240 062a 0A030000 		.4byte	0x30a
 6241 062e 19       		.uleb128 0x19
 6242 062f F55D0000 		.4byte	.LASF1292
 6243 0633 0C       		.byte	0xc
 6244 0634 07       		.byte	0x7
 6245 0635 2301     		.2byte	0x123
 6246 0637 63060000 		.4byte	0x663
 6247 063b 17       		.uleb128 0x17
 6248 063c D4810000 		.4byte	.LASF1226
 6249 0640 07       		.byte	0x7
 6250 0641 2501     		.2byte	0x125
 6251 0643 63060000 		.4byte	0x663
 6252 0647 00       		.byte	0
 6253 0648 17       		.uleb128 0x17
 6254 0649 3A590000 		.4byte	.LASF1293
 6255 064d 07       		.byte	0x7
 6256 064e 2601     		.2byte	0x126
 6257 0650 3B000000 		.4byte	0x3b
ARM GAS  /tmp/ccTV2SzP.s 			page 178


 6258 0654 04       		.byte	0x4
 6259 0655 17       		.uleb128 0x17
 6260 0656 CD5D0000 		.4byte	.LASF1294
 6261 065a 07       		.byte	0x7
 6262 065b 2701     		.2byte	0x127
 6263 065d 69060000 		.4byte	0x669
 6264 0661 08       		.byte	0x8
 6265 0662 00       		.byte	0
 6266 0663 0E       		.uleb128 0xe
 6267 0664 04       		.byte	0x4
 6268 0665 2E060000 		.4byte	0x62e
 6269 0669 0E       		.uleb128 0xe
 6270 066a 04       		.byte	0x4
 6271 066b 22060000 		.4byte	0x622
 6272 066f 19       		.uleb128 0x19
 6273 0670 CF790000 		.4byte	.LASF1295
 6274 0674 0E       		.byte	0xe
 6275 0675 07       		.byte	0x7
 6276 0676 3F01     		.2byte	0x13f
 6277 0678 A4060000 		.4byte	0x6a4
 6278 067c 17       		.uleb128 0x17
 6279 067d B0720000 		.4byte	.LASF1296
 6280 0681 07       		.byte	0x7
 6281 0682 4001     		.2byte	0x140
 6282 0684 A4060000 		.4byte	0x6a4
 6283 0688 00       		.byte	0
 6284 0689 17       		.uleb128 0x17
 6285 068a D4110000 		.4byte	.LASF1297
 6286 068e 07       		.byte	0x7
 6287 068f 4101     		.2byte	0x141
 6288 0691 A4060000 		.4byte	0x6a4
 6289 0695 06       		.byte	0x6
 6290 0696 17       		.uleb128 0x17
 6291 0697 C59F0000 		.4byte	.LASF1298
 6292 069b 07       		.byte	0x7
 6293 069c 4201     		.2byte	0x142
 6294 069e 6D000000 		.4byte	0x6d
 6295 06a2 0C       		.byte	0xc
 6296 06a3 00       		.byte	0
 6297 06a4 08       		.uleb128 0x8
 6298 06a5 6D000000 		.4byte	0x6d
 6299 06a9 B4060000 		.4byte	0x6b4
 6300 06ad 09       		.uleb128 0x9
 6301 06ae 34000000 		.4byte	0x34
 6302 06b2 02       		.byte	0x2
 6303 06b3 00       		.byte	0
 6304 06b4 1A       		.uleb128 0x1a
 6305 06b5 D0       		.byte	0xd0
 6306 06b6 07       		.byte	0x7
 6307 06b7 5902     		.2byte	0x259
 6308 06b9 B5070000 		.4byte	0x7b5
 6309 06bd 17       		.uleb128 0x17
 6310 06be 36230000 		.4byte	.LASF1299
 6311 06c2 07       		.byte	0x7
 6312 06c3 5B02     		.2byte	0x25b
 6313 06c5 34000000 		.4byte	0x34
 6314 06c9 00       		.byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 179


 6315 06ca 17       		.uleb128 0x17
 6316 06cb F37C0000 		.4byte	.LASF1300
 6317 06cf 07       		.byte	0x7
 6318 06d0 5C02     		.2byte	0x25c
 6319 06d2 35010000 		.4byte	0x135
 6320 06d6 04       		.byte	0x4
 6321 06d7 17       		.uleb128 0x17
 6322 06d8 53090000 		.4byte	.LASF1301
 6323 06dc 07       		.byte	0x7
 6324 06dd 5D02     		.2byte	0x25d
 6325 06df B5070000 		.4byte	0x7b5
 6326 06e3 08       		.byte	0x8
 6327 06e4 17       		.uleb128 0x17
 6328 06e5 151D0000 		.4byte	.LASF1302
 6329 06e9 07       		.byte	0x7
 6330 06ea 5E02     		.2byte	0x25e
 6331 06ec BB010000 		.4byte	0x1bb
 6332 06f0 24       		.byte	0x24
 6333 06f1 17       		.uleb128 0x17
 6334 06f2 345B0000 		.4byte	.LASF1303
 6335 06f6 07       		.byte	0x7
 6336 06f7 5F02     		.2byte	0x25f
 6337 06f9 3B000000 		.4byte	0x3b
 6338 06fd 48       		.byte	0x48
 6339 06fe 17       		.uleb128 0x17
 6340 06ff 9A6A0000 		.4byte	.LASF1304
 6341 0703 07       		.byte	0x7
 6342 0704 6002     		.2byte	0x260
 6343 0706 94000000 		.4byte	0x94
 6344 070a 50       		.byte	0x50
 6345 070b 17       		.uleb128 0x17
 6346 070c 0A810000 		.4byte	.LASF1305
 6347 0710 07       		.byte	0x7
 6348 0711 6102     		.2byte	0x261
 6349 0713 6F060000 		.4byte	0x66f
 6350 0717 58       		.byte	0x58
 6351 0718 17       		.uleb128 0x17
 6352 0719 3C8C0000 		.4byte	.LASF1306
 6353 071d 07       		.byte	0x7
 6354 071e 6202     		.2byte	0x262
 6355 0720 18010000 		.4byte	0x118
 6356 0724 68       		.byte	0x68
 6357 0725 17       		.uleb128 0x17
 6358 0726 6D750000 		.4byte	.LASF1307
 6359 072a 07       		.byte	0x7
 6360 072b 6302     		.2byte	0x263
 6361 072d 18010000 		.4byte	0x118
 6362 0731 70       		.byte	0x70
 6363 0732 17       		.uleb128 0x17
 6364 0733 026A0000 		.4byte	.LASF1308
 6365 0737 07       		.byte	0x7
 6366 0738 6402     		.2byte	0x264
 6367 073a 18010000 		.4byte	0x118
 6368 073e 78       		.byte	0x78
 6369 073f 17       		.uleb128 0x17
 6370 0740 D60C0000 		.4byte	.LASF1309
 6371 0744 07       		.byte	0x7
ARM GAS  /tmp/ccTV2SzP.s 			page 180


 6372 0745 6502     		.2byte	0x265
 6373 0747 C5070000 		.4byte	0x7c5
 6374 074b 80       		.byte	0x80
 6375 074c 17       		.uleb128 0x17
 6376 074d B04F0000 		.4byte	.LASF1310
 6377 0751 07       		.byte	0x7
 6378 0752 6602     		.2byte	0x266
 6379 0754 D5070000 		.4byte	0x7d5
 6380 0758 88       		.byte	0x88
 6381 0759 17       		.uleb128 0x17
 6382 075a C7110000 		.4byte	.LASF1311
 6383 075e 07       		.byte	0x7
 6384 075f 6702     		.2byte	0x267
 6385 0761 3B000000 		.4byte	0x3b
 6386 0765 A0       		.byte	0xa0
 6387 0766 17       		.uleb128 0x17
 6388 0767 791A0000 		.4byte	.LASF1312
 6389 076b 07       		.byte	0x7
 6390 076c 6802     		.2byte	0x268
 6391 076e 18010000 		.4byte	0x118
 6392 0772 A4       		.byte	0xa4
 6393 0773 17       		.uleb128 0x17
 6394 0774 9A7D0000 		.4byte	.LASF1313
 6395 0778 07       		.byte	0x7
 6396 0779 6902     		.2byte	0x269
 6397 077b 18010000 		.4byte	0x118
 6398 077f AC       		.byte	0xac
 6399 0780 17       		.uleb128 0x17
 6400 0781 C9A30000 		.4byte	.LASF1314
 6401 0785 07       		.byte	0x7
 6402 0786 6A02     		.2byte	0x26a
 6403 0788 18010000 		.4byte	0x118
 6404 078c B4       		.byte	0xb4
 6405 078d 17       		.uleb128 0x17
 6406 078e AA650000 		.4byte	.LASF1315
 6407 0792 07       		.byte	0x7
 6408 0793 6B02     		.2byte	0x26b
 6409 0795 18010000 		.4byte	0x118
 6410 0799 BC       		.byte	0xbc
 6411 079a 17       		.uleb128 0x17
 6412 079b 580C0000 		.4byte	.LASF1316
 6413 079f 07       		.byte	0x7
 6414 07a0 6C02     		.2byte	0x26c
 6415 07a2 18010000 		.4byte	0x118
 6416 07a6 C4       		.byte	0xc4
 6417 07a7 17       		.uleb128 0x17
 6418 07a8 97310000 		.4byte	.LASF1317
 6419 07ac 07       		.byte	0x7
 6420 07ad 6D02     		.2byte	0x26d
 6421 07af 3B000000 		.4byte	0x3b
 6422 07b3 CC       		.byte	0xcc
 6423 07b4 00       		.byte	0
 6424 07b5 08       		.uleb128 0x8
 6425 07b6 3B010000 		.4byte	0x13b
 6426 07ba C5070000 		.4byte	0x7c5
 6427 07be 09       		.uleb128 0x9
 6428 07bf 34000000 		.4byte	0x34
ARM GAS  /tmp/ccTV2SzP.s 			page 181


 6429 07c3 19       		.byte	0x19
 6430 07c4 00       		.byte	0
 6431 07c5 08       		.uleb128 0x8
 6432 07c6 3B010000 		.4byte	0x13b
 6433 07ca D5070000 		.4byte	0x7d5
 6434 07ce 09       		.uleb128 0x9
 6435 07cf 34000000 		.4byte	0x34
 6436 07d3 07       		.byte	0x7
 6437 07d4 00       		.byte	0
 6438 07d5 08       		.uleb128 0x8
 6439 07d6 3B010000 		.4byte	0x13b
 6440 07da E5070000 		.4byte	0x7e5
 6441 07de 09       		.uleb128 0x9
 6442 07df 34000000 		.4byte	0x34
 6443 07e3 17       		.byte	0x17
 6444 07e4 00       		.byte	0
 6445 07e5 1A       		.uleb128 0x1a
 6446 07e6 F0       		.byte	0xf0
 6447 07e7 07       		.byte	0x7
 6448 07e8 7202     		.2byte	0x272
 6449 07ea 09080000 		.4byte	0x809
 6450 07ee 17       		.uleb128 0x17
 6451 07ef B1980000 		.4byte	.LASF1318
 6452 07f3 07       		.byte	0x7
 6453 07f4 7502     		.2byte	0x275
 6454 07f6 09080000 		.4byte	0x809
 6455 07fa 00       		.byte	0
 6456 07fb 17       		.uleb128 0x17
 6457 07fc 745A0000 		.4byte	.LASF1319
 6458 0800 07       		.byte	0x7
 6459 0801 7602     		.2byte	0x276
 6460 0803 19080000 		.4byte	0x819
 6461 0807 78       		.byte	0x78
 6462 0808 00       		.byte	0
 6463 0809 08       		.uleb128 0x8
 6464 080a 04030000 		.4byte	0x304
 6465 080e 19080000 		.4byte	0x819
 6466 0812 09       		.uleb128 0x9
 6467 0813 34000000 		.4byte	0x34
 6468 0817 1D       		.byte	0x1d
 6469 0818 00       		.byte	0
 6470 0819 08       		.uleb128 0x8
 6471 081a 34000000 		.4byte	0x34
 6472 081e 29080000 		.4byte	0x829
 6473 0822 09       		.uleb128 0x9
 6474 0823 34000000 		.4byte	0x34
 6475 0827 1D       		.byte	0x1d
 6476 0828 00       		.byte	0
 6477 0829 1B       		.uleb128 0x1b
 6478 082a F0       		.byte	0xf0
 6479 082b 07       		.byte	0x7
 6480 082c 5702     		.2byte	0x257
 6481 082e 4B080000 		.4byte	0x84b
 6482 0832 1C       		.uleb128 0x1c
 6483 0833 342B0000 		.4byte	.LASF1269
 6484 0837 07       		.byte	0x7
 6485 0838 6E02     		.2byte	0x26e
ARM GAS  /tmp/ccTV2SzP.s 			page 182


 6486 083a B4060000 		.4byte	0x6b4
 6487 083e 1C       		.uleb128 0x1c
 6488 083f D12C0000 		.4byte	.LASF1320
 6489 0843 07       		.byte	0x7
 6490 0844 7702     		.2byte	0x277
 6491 0846 E5070000 		.4byte	0x7e5
 6492 084a 00       		.byte	0
 6493 084b 08       		.uleb128 0x8
 6494 084c 3B010000 		.4byte	0x13b
 6495 0850 5B080000 		.4byte	0x85b
 6496 0854 09       		.uleb128 0x9
 6497 0855 34000000 		.4byte	0x34
 6498 0859 18       		.byte	0x18
 6499 085a 00       		.byte	0
 6500 085b 1D       		.uleb128 0x1d
 6501 085c 75040000 		.4byte	.LASF1505
 6502 0860 0E       		.uleb128 0xe
 6503 0861 04       		.byte	0x4
 6504 0862 5B080000 		.4byte	0x85b
 6505 0866 1E       		.uleb128 0x1e
 6506 0867 71080000 		.4byte	0x871
 6507 086b 15       		.uleb128 0x15
 6508 086c 52040000 		.4byte	0x452
 6509 0870 00       		.byte	0
 6510 0871 0E       		.uleb128 0xe
 6511 0872 04       		.byte	0x4
 6512 0873 66080000 		.4byte	0x866
 6513 0877 0E       		.uleb128 0xe
 6514 0878 04       		.byte	0x4
 6515 0879 A5010000 		.4byte	0x1a5
 6516 087d 1E       		.uleb128 0x1e
 6517 087e 88080000 		.4byte	0x888
 6518 0882 15       		.uleb128 0x15
 6519 0883 3B000000 		.4byte	0x3b
 6520 0887 00       		.byte	0
 6521 0888 0E       		.uleb128 0xe
 6522 0889 04       		.byte	0x4
 6523 088a 8E080000 		.4byte	0x88e
 6524 088e 0E       		.uleb128 0xe
 6525 088f 04       		.byte	0x4
 6526 0890 7D080000 		.4byte	0x87d
 6527 0894 08       		.uleb128 0x8
 6528 0895 22060000 		.4byte	0x622
 6529 0899 A4080000 		.4byte	0x8a4
 6530 089d 09       		.uleb128 0x9
 6531 089e 34000000 		.4byte	0x34
 6532 08a2 02       		.byte	0x2
 6533 08a3 00       		.byte	0
 6534 08a4 1F       		.uleb128 0x1f
 6535 08a5 C81A0000 		.4byte	.LASF1321
 6536 08a9 07       		.byte	0x7
 6537 08aa FE02     		.2byte	0x2fe
 6538 08ac 52040000 		.4byte	0x452
 6539 08b0 1F       		.uleb128 0x1f
 6540 08b1 486E0000 		.4byte	.LASF1322
 6541 08b5 07       		.byte	0x7
 6542 08b6 FF02     		.2byte	0x2ff
ARM GAS  /tmp/ccTV2SzP.s 			page 183


 6543 08b8 58040000 		.4byte	0x458
 6544 08bc 20       		.uleb128 0x20
 6545 08bd C2900000 		.4byte	.LASF1323
 6546 08c1 08       		.byte	0x8
 6547 08c2 63       		.byte	0x63
 6548 08c3 35010000 		.4byte	0x135
 6549 08c7 02       		.uleb128 0x2
 6550 08c8 AC230000 		.4byte	.LASF1324
 6551 08cc 09       		.byte	0x9
 6552 08cd 18       		.byte	0x18
 6553 08ce 49000000 		.4byte	0x49
 6554 08d2 0D       		.uleb128 0xd
 6555 08d3 C7080000 		.4byte	0x8c7
 6556 08d7 02       		.uleb128 0x2
 6557 08d8 50780000 		.4byte	.LASF1325
 6558 08dc 09       		.byte	0x9
 6559 08dd 24       		.byte	0x24
 6560 08de 62000000 		.4byte	0x62
 6561 08e2 0D       		.uleb128 0xd
 6562 08e3 D7080000 		.4byte	0x8d7
 6563 08e7 02       		.uleb128 0x2
 6564 08e8 089C0000 		.4byte	.LASF1326
 6565 08ec 09       		.byte	0x9
 6566 08ed 30       		.byte	0x30
 6567 08ee 7B000000 		.4byte	0x7b
 6568 08f2 20       		.uleb128 0x20
 6569 08f3 384A0000 		.4byte	.LASF1327
 6570 08f7 0A       		.byte	0xa
 6571 08f8 5A       		.byte	0x5a
 6572 08f9 E7080000 		.4byte	0x8e7
 6573 08fd 02       		.uleb128 0x2
 6574 08fe 871A0000 		.4byte	.LASF1328
 6575 0902 0B       		.byte	0xb
 6576 0903 49       		.byte	0x49
 6577 0904 08090000 		.4byte	0x908
 6578 0908 0E       		.uleb128 0xe
 6579 0909 04       		.byte	0x4
 6580 090a 0E090000 		.4byte	0x90e
 6581 090e 1E       		.uleb128 0x1e
 6582 090f 19090000 		.4byte	0x919
 6583 0913 15       		.uleb128 0x15
 6584 0914 2E010000 		.4byte	0x12e
 6585 0918 00       		.byte	0
 6586 0919 02       		.uleb128 0x2
 6587 091a 17000000 		.4byte	.LASF1329
 6588 091e 02       		.byte	0x2
 6589 091f 5E       		.byte	0x5e
 6590 0920 E7080000 		.4byte	0x8e7
 6591 0924 21       		.uleb128 0x21
 6592 0925 19090000 		.4byte	0x919
 6593 0929 02       		.uleb128 0x2
 6594 092a 58470000 		.4byte	.LASF1330
 6595 092e 02       		.byte	0x2
 6596 092f 60       		.byte	0x60
 6597 0930 74000000 		.4byte	0x74
 6598 0934 21       		.uleb128 0x21
 6599 0935 29090000 		.4byte	0x929
ARM GAS  /tmp/ccTV2SzP.s 			page 184


 6600 0939 02       		.uleb128 0x2
 6601 093a 9C3B0000 		.4byte	.LASF1331
 6602 093e 02       		.byte	0x2
 6603 093f 62       		.byte	0x62
 6604 0940 86000000 		.4byte	0x86
 6605 0944 21       		.uleb128 0x21
 6606 0945 39090000 		.4byte	0x939
 6607 0949 0D       		.uleb128 0xd
 6608 094a 39090000 		.4byte	0x939
 6609 094e 02       		.uleb128 0x2
 6610 094f B17C0000 		.4byte	.LASF1332
 6611 0953 02       		.byte	0x2
 6612 0954 68       		.byte	0x68
 6613 0955 E7080000 		.4byte	0x8e7
 6614 0959 02       		.uleb128 0x2
 6615 095a BF7A0000 		.4byte	.LASF1333
 6616 095e 02       		.byte	0x2
 6617 095f 69       		.byte	0x69
 6618 0960 E7080000 		.4byte	0x8e7
 6619 0964 21       		.uleb128 0x21
 6620 0965 59090000 		.4byte	0x959
 6621 0969 0D       		.uleb128 0xd
 6622 096a 59090000 		.4byte	0x959
 6623 096e 0E       		.uleb128 0xe
 6624 096f 04       		.byte	0x4
 6625 0970 C7080000 		.4byte	0x8c7
 6626 0974 0F       		.uleb128 0xf
 6627 0975 795C0000 		.4byte	.LASF1334
 6628 0979 14       		.byte	0x14
 6629 097a 0C       		.byte	0xc
 6630 097b 88       		.byte	0x88
 6631 097c BD090000 		.4byte	0x9bd
 6632 0980 0B       		.uleb128 0xb
 6633 0981 A3AA0000 		.4byte	.LASF1335
 6634 0985 0C       		.byte	0xc
 6635 0986 8A       		.byte	0x8a
 6636 0987 59090000 		.4byte	0x959
 6637 098b 00       		.byte	0
 6638 098c 0B       		.uleb128 0xb
 6639 098d 2F140000 		.4byte	.LASF1336
 6640 0991 0C       		.byte	0xc
 6641 0992 8B       		.byte	0x8b
 6642 0993 BD090000 		.4byte	0x9bd
 6643 0997 04       		.byte	0x4
 6644 0998 0B       		.uleb128 0xb
 6645 0999 787B0000 		.4byte	.LASF1337
 6646 099d 0C       		.byte	0xc
 6647 099e 8C       		.byte	0x8c
 6648 099f BD090000 		.4byte	0x9bd
 6649 09a3 08       		.byte	0x8
 6650 09a4 0B       		.uleb128 0xb
 6651 09a5 AF630000 		.4byte	.LASF1338
 6652 09a9 0C       		.byte	0xc
 6653 09aa 8D       		.byte	0x8d
 6654 09ab 2E010000 		.4byte	0x12e
 6655 09af 0C       		.byte	0xc
 6656 09b0 0B       		.uleb128 0xb
ARM GAS  /tmp/ccTV2SzP.s 			page 185


 6657 09b1 06570000 		.4byte	.LASF1339
 6658 09b5 0C       		.byte	0xc
 6659 09b6 8E       		.byte	0x8e
 6660 09b7 2E010000 		.4byte	0x12e
 6661 09bb 10       		.byte	0x10
 6662 09bc 00       		.byte	0
 6663 09bd 0E       		.uleb128 0xe
 6664 09be 04       		.byte	0x4
 6665 09bf 74090000 		.4byte	0x974
 6666 09c3 02       		.uleb128 0x2
 6667 09c4 86940000 		.4byte	.LASF1340
 6668 09c8 0C       		.byte	0xc
 6669 09c9 90       		.byte	0x90
 6670 09ca 74090000 		.4byte	0x974
 6671 09ce 0F       		.uleb128 0xf
 6672 09cf D4300000 		.4byte	.LASF1341
 6673 09d3 0C       		.byte	0xc
 6674 09d4 0C       		.byte	0xc
 6675 09d5 92       		.byte	0x92
 6676 09d6 FF090000 		.4byte	0x9ff
 6677 09da 0B       		.uleb128 0xb
 6678 09db A3AA0000 		.4byte	.LASF1335
 6679 09df 0C       		.byte	0xc
 6680 09e0 94       		.byte	0x94
 6681 09e1 59090000 		.4byte	0x959
 6682 09e5 00       		.byte	0
 6683 09e6 0B       		.uleb128 0xb
 6684 09e7 2F140000 		.4byte	.LASF1336
 6685 09eb 0C       		.byte	0xc
 6686 09ec 95       		.byte	0x95
 6687 09ed BD090000 		.4byte	0x9bd
 6688 09f1 04       		.byte	0x4
 6689 09f2 0B       		.uleb128 0xb
 6690 09f3 787B0000 		.4byte	.LASF1337
 6691 09f7 0C       		.byte	0xc
 6692 09f8 96       		.byte	0x96
 6693 09f9 BD090000 		.4byte	0x9bd
 6694 09fd 08       		.byte	0x8
 6695 09fe 00       		.byte	0
 6696 09ff 02       		.uleb128 0x2
 6697 0a00 CE970000 		.4byte	.LASF1342
 6698 0a04 0C       		.byte	0xc
 6699 0a05 98       		.byte	0x98
 6700 0a06 CE090000 		.4byte	0x9ce
 6701 0a0a 0F       		.uleb128 0xf
 6702 0a0b A0890000 		.4byte	.LASF1343
 6703 0a0f 14       		.byte	0x14
 6704 0a10 0C       		.byte	0xc
 6705 0a11 9D       		.byte	0x9d
 6706 0a12 3B0A0000 		.4byte	0xa3b
 6707 0a16 0B       		.uleb128 0xb
 6708 0a17 9B640000 		.4byte	.LASF1344
 6709 0a1b 0C       		.byte	0xc
 6710 0a1c 9F       		.byte	0x9f
 6711 0a1d 39090000 		.4byte	0x939
 6712 0a21 00       		.byte	0
 6713 0a22 0B       		.uleb128 0xb
ARM GAS  /tmp/ccTV2SzP.s 			page 186


 6714 0a23 752D0000 		.4byte	.LASF1345
 6715 0a27 0C       		.byte	0xc
 6716 0a28 A0       		.byte	0xa0
 6717 0a29 3B0A0000 		.4byte	0xa3b
 6718 0a2d 04       		.byte	0x4
 6719 0a2e 0B       		.uleb128 0xb
 6720 0a2f 656D0000 		.4byte	.LASF1346
 6721 0a33 0C       		.byte	0xc
 6722 0a34 A1       		.byte	0xa1
 6723 0a35 FF090000 		.4byte	0x9ff
 6724 0a39 08       		.byte	0x8
 6725 0a3a 00       		.byte	0
 6726 0a3b 0E       		.uleb128 0xe
 6727 0a3c 04       		.byte	0x4
 6728 0a3d C3090000 		.4byte	0x9c3
 6729 0a41 02       		.uleb128 0x2
 6730 0a42 936A0000 		.4byte	.LASF1347
 6731 0a46 0C       		.byte	0xc
 6732 0a47 A2       		.byte	0xa2
 6733 0a48 0A0A0000 		.4byte	0xa0a
 6734 0a4c 0D       		.uleb128 0xd
 6735 0a4d 410A0000 		.4byte	0xa41
 6736 0a51 02       		.uleb128 0x2
 6737 0a52 4D670000 		.4byte	.LASF1348
 6738 0a56 0D       		.byte	0xd
 6739 0a57 63       		.byte	0x63
 6740 0a58 2E010000 		.4byte	0x12e
 6741 0a5c 0D       		.uleb128 0xd
 6742 0a5d 510A0000 		.4byte	0xa51
 6743 0a61 22       		.uleb128 0x22
 6744 0a62 07       		.byte	0x7
 6745 0a63 01       		.byte	0x1
 6746 0a64 54000000 		.4byte	0x54
 6747 0a68 0D       		.byte	0xd
 6748 0a69 6D       		.byte	0x6d
 6749 0a6a 8D0A0000 		.4byte	0xa8d
 6750 0a6e 23       		.uleb128 0x23
 6751 0a6f 805F0000 		.4byte	.LASF1349
 6752 0a73 00       		.byte	0
 6753 0a74 23       		.uleb128 0x23
 6754 0a75 B9470000 		.4byte	.LASF1350
 6755 0a79 01       		.byte	0x1
 6756 0a7a 23       		.uleb128 0x23
 6757 0a7b 5B6E0000 		.4byte	.LASF1351
 6758 0a7f 02       		.byte	0x2
 6759 0a80 23       		.uleb128 0x23
 6760 0a81 A1230000 		.4byte	.LASF1352
 6761 0a85 03       		.byte	0x3
 6762 0a86 23       		.uleb128 0x23
 6763 0a87 EF740000 		.4byte	.LASF1353
 6764 0a8b 04       		.byte	0x4
 6765 0a8c 00       		.byte	0
 6766 0a8d 02       		.uleb128 0x2
 6767 0a8e 31090000 		.4byte	.LASF1354
 6768 0a92 0D       		.byte	0xd
 6769 0a93 73       		.byte	0x73
 6770 0a94 610A0000 		.4byte	0xa61
ARM GAS  /tmp/ccTV2SzP.s 			page 187


 6771 0a98 0F       		.uleb128 0xf
 6772 0a99 440B0000 		.4byte	.LASF1355
 6773 0a9d 08       		.byte	0x8
 6774 0a9e 0D       		.byte	0xd
 6775 0a9f 78       		.byte	0x78
 6776 0aa0 BD0A0000 		.4byte	0xabd
 6777 0aa4 0B       		.uleb128 0xb
 6778 0aa5 4B460000 		.4byte	.LASF1356
 6779 0aa9 0D       		.byte	0xd
 6780 0aaa 7A       		.byte	0x7a
 6781 0aab 29090000 		.4byte	0x929
 6782 0aaf 00       		.byte	0
 6783 0ab0 0B       		.uleb128 0xb
 6784 0ab1 682C0000 		.4byte	.LASF1357
 6785 0ab5 0D       		.byte	0xd
 6786 0ab6 7B       		.byte	0x7b
 6787 0ab7 59090000 		.4byte	0x959
 6788 0abb 04       		.byte	0x4
 6789 0abc 00       		.byte	0
 6790 0abd 02       		.uleb128 0x2
 6791 0abe 55340000 		.4byte	.LASF1358
 6792 0ac2 0D       		.byte	0xd
 6793 0ac3 7C       		.byte	0x7c
 6794 0ac4 980A0000 		.4byte	0xa98
 6795 0ac8 0F       		.uleb128 0xf
 6796 0ac9 A34C0000 		.4byte	.LASF1359
 6797 0acd 0C       		.byte	0xc
 6798 0ace 0D       		.byte	0xd
 6799 0acf 81       		.byte	0x81
 6800 0ad0 F90A0000 		.4byte	0xaf9
 6801 0ad4 0B       		.uleb128 0xb
 6802 0ad5 1C560000 		.4byte	.LASF1360
 6803 0ad9 0D       		.byte	0xd
 6804 0ada 83       		.byte	0x83
 6805 0adb 2E010000 		.4byte	0x12e
 6806 0adf 00       		.byte	0
 6807 0ae0 0B       		.uleb128 0xb
 6808 0ae1 7E890000 		.4byte	.LASF1361
 6809 0ae5 0D       		.byte	0xd
 6810 0ae6 84       		.byte	0x84
 6811 0ae7 E7080000 		.4byte	0x8e7
 6812 0aeb 04       		.byte	0x4
 6813 0aec 0B       		.uleb128 0xb
 6814 0aed 48A50000 		.4byte	.LASF1362
 6815 0af1 0D       		.byte	0xd
 6816 0af2 85       		.byte	0x85
 6817 0af3 E7080000 		.4byte	0x8e7
 6818 0af7 08       		.byte	0x8
 6819 0af8 00       		.byte	0
 6820 0af9 02       		.uleb128 0x2
 6821 0afa 71080000 		.4byte	.LASF1363
 6822 0afe 0D       		.byte	0xd
 6823 0aff 86       		.byte	0x86
 6824 0b00 C80A0000 		.4byte	0xac8
 6825 0b04 0D       		.uleb128 0xd
 6826 0b05 F90A0000 		.4byte	0xaf9
 6827 0b09 0E       		.uleb128 0xe
ARM GAS  /tmp/ccTV2SzP.s 			page 188


 6828 0b0a 04       		.byte	0x4
 6829 0b0b 19090000 		.4byte	0x919
 6830 0b0f 0D       		.uleb128 0xd
 6831 0b10 090B0000 		.4byte	0xb09
 6832 0b14 0F       		.uleb128 0xf
 6833 0b15 DC4A0000 		.4byte	.LASF1364
 6834 0b19 20       		.byte	0x20
 6835 0b1a 0D       		.byte	0xd
 6836 0b1b 98       		.byte	0x98
 6837 0b1c 810B0000 		.4byte	0xb81
 6838 0b20 0B       		.uleb128 0xb
 6839 0b21 890E0000 		.4byte	.LASF1365
 6840 0b25 0D       		.byte	0xd
 6841 0b26 9A       		.byte	0x9a
 6842 0b27 510A0000 		.4byte	0xa51
 6843 0b2b 00       		.byte	0
 6844 0b2c 0B       		.uleb128 0xb
 6845 0b2d 95720000 		.4byte	.LASF1366
 6846 0b31 0D       		.byte	0xd
 6847 0b32 9B       		.byte	0x9b
 6848 0b33 B3050000 		.4byte	0x5b3
 6849 0b37 04       		.byte	0x4
 6850 0b38 0B       		.uleb128 0xb
 6851 0b39 1B710000 		.4byte	.LASF1367
 6852 0b3d 0D       		.byte	0xd
 6853 0b3e 9C       		.byte	0x9c
 6854 0b3f 39090000 		.4byte	0x939
 6855 0b43 08       		.byte	0x8
 6856 0b44 0B       		.uleb128 0xb
 6857 0b45 7D850000 		.4byte	.LASF1368
 6858 0b49 0D       		.byte	0xd
 6859 0b4a 9D       		.byte	0x9d
 6860 0b4b 8D0A0000 		.4byte	0xa8d
 6861 0b4f 0C       		.byte	0xc
 6862 0b50 0B       		.uleb128 0xb
 6863 0b51 A0170000 		.4byte	.LASF1369
 6864 0b55 0D       		.byte	0xd
 6865 0b56 9E       		.byte	0x9e
 6866 0b57 39090000 		.4byte	0x939
 6867 0b5b 10       		.byte	0x10
 6868 0b5c 0B       		.uleb128 0xb
 6869 0b5d 5C160000 		.4byte	.LASF1370
 6870 0b61 0D       		.byte	0xd
 6871 0b62 9F       		.byte	0x9f
 6872 0b63 39090000 		.4byte	0x939
 6873 0b67 14       		.byte	0x14
 6874 0b68 0B       		.uleb128 0xb
 6875 0b69 6A370000 		.4byte	.LASF1371
 6876 0b6d 0D       		.byte	0xd
 6877 0b6e A0       		.byte	0xa0
 6878 0b6f E7080000 		.4byte	0x8e7
 6879 0b73 18       		.byte	0x18
 6880 0b74 0B       		.uleb128 0xb
 6881 0b75 866F0000 		.4byte	.LASF1372
 6882 0b79 0D       		.byte	0xd
 6883 0b7a A1       		.byte	0xa1
 6884 0b7b D7080000 		.4byte	0x8d7
ARM GAS  /tmp/ccTV2SzP.s 			page 189


 6885 0b7f 1C       		.byte	0x1c
 6886 0b80 00       		.byte	0
 6887 0b81 02       		.uleb128 0x2
 6888 0b82 39380000 		.4byte	.LASF1373
 6889 0b86 0D       		.byte	0xd
 6890 0b87 A2       		.byte	0xa2
 6891 0b88 140B0000 		.4byte	0xb14
 6892 0b8c 0F       		.uleb128 0xf
 6893 0b8d 66740000 		.4byte	.LASF1374
 6894 0b91 50       		.byte	0x50
 6895 0b92 01       		.byte	0x1
 6896 0b93 78       		.byte	0x78
 6897 0b94 110C0000 		.4byte	0xc11
 6898 0b98 0B       		.uleb128 0xb
 6899 0b99 7D2D0000 		.4byte	.LASF1375
 6900 0b9d 01       		.byte	0x1
 6901 0b9e 7A       		.byte	0x7a
 6902 0b9f 110C0000 		.4byte	0xc11
 6903 0ba3 00       		.byte	0
 6904 0ba4 0B       		.uleb128 0xb
 6905 0ba5 899E0000 		.4byte	.LASF1376
 6906 0ba9 01       		.byte	0x1
 6907 0baa 80       		.byte	0x80
 6908 0bab C3090000 		.4byte	0x9c3
 6909 0baf 04       		.byte	0x4
 6910 0bb0 0B       		.uleb128 0xb
 6911 0bb1 D7080000 		.4byte	.LASF1377
 6912 0bb5 01       		.byte	0x1
 6913 0bb6 81       		.byte	0x81
 6914 0bb7 C3090000 		.4byte	0x9c3
 6915 0bbb 18       		.byte	0x18
 6916 0bbc 0B       		.uleb128 0xb
 6917 0bbd DBAA0000 		.4byte	.LASF1378
 6918 0bc1 01       		.byte	0x1
 6919 0bc2 82       		.byte	0x82
 6920 0bc3 39090000 		.4byte	0x939
 6921 0bc7 2C       		.byte	0x2c
 6922 0bc8 0B       		.uleb128 0xb
 6923 0bc9 650D0000 		.4byte	.LASF1379
 6924 0bcd 01       		.byte	0x1
 6925 0bce 83       		.byte	0x83
 6926 0bcf 090B0000 		.4byte	0xb09
 6927 0bd3 30       		.byte	0x30
 6928 0bd4 0B       		.uleb128 0xb
 6929 0bd5 95720000 		.4byte	.LASF1366
 6930 0bd9 01       		.byte	0x1
 6931 0bda 84       		.byte	0x84
 6932 0bdb 170C0000 		.4byte	0xc17
 6933 0bdf 34       		.byte	0x34
 6934 0be0 0B       		.uleb128 0xb
 6935 0be1 51960000 		.4byte	.LASF1380
 6936 0be5 01       		.byte	0x1
 6937 0be6 8F       		.byte	0x8f
 6938 0be7 39090000 		.4byte	0x939
 6939 0beb 40       		.byte	0x40
 6940 0bec 0B       		.uleb128 0xb
 6941 0bed E20B0000 		.4byte	.LASF1381
ARM GAS  /tmp/ccTV2SzP.s 			page 190


 6942 0bf1 01       		.byte	0x1
 6943 0bf2 90       		.byte	0x90
 6944 0bf3 39090000 		.4byte	0x939
 6945 0bf7 44       		.byte	0x44
 6946 0bf8 0B       		.uleb128 0xb
 6947 0bf9 5C160000 		.4byte	.LASF1370
 6948 0bfd 01       		.byte	0x1
 6949 0bfe 94       		.byte	0x94
 6950 0bff 39090000 		.4byte	0x939
 6951 0c03 48       		.byte	0x48
 6952 0c04 0B       		.uleb128 0xb
 6953 0c05 3A660000 		.4byte	.LASF1382
 6954 0c09 01       		.byte	0x1
 6955 0c0a 95       		.byte	0x95
 6956 0c0b 39090000 		.4byte	0x939
 6957 0c0f 4C       		.byte	0x4c
 6958 0c10 00       		.byte	0
 6959 0c11 0E       		.uleb128 0xe
 6960 0c12 04       		.byte	0x4
 6961 0c13 24090000 		.4byte	0x924
 6962 0c17 08       		.uleb128 0x8
 6963 0c18 3B010000 		.4byte	0x13b
 6964 0c1c 270C0000 		.4byte	0xc27
 6965 0c20 09       		.uleb128 0x9
 6966 0c21 34000000 		.4byte	0x34
 6967 0c25 0B       		.byte	0xb
 6968 0c26 00       		.byte	0
 6969 0c27 02       		.uleb128 0x2
 6970 0c28 A7160000 		.4byte	.LASF1383
 6971 0c2c 01       		.byte	0x1
 6972 0c2d AB       		.byte	0xab
 6973 0c2e 8C0B0000 		.4byte	0xb8c
 6974 0c32 02       		.uleb128 0x2
 6975 0c33 68960000 		.4byte	.LASF1384
 6976 0c37 01       		.byte	0x1
 6977 0c38 AF       		.byte	0xaf
 6978 0c39 270C0000 		.4byte	0xc27
 6979 0c3d 21       		.uleb128 0x21
 6980 0c3e 320C0000 		.4byte	0xc32
 6981 0c42 0D       		.uleb128 0xd
 6982 0c43 320C0000 		.4byte	0xc32
 6983 0c47 24       		.uleb128 0x24
 6984 0c48 BB1A0000 		.4byte	.LASF1385
 6985 0c4c 01       		.byte	0x1
 6986 0c4d BC       		.byte	0xbc
 6987 0c4e 5E0C0000 		.4byte	0xc5e
 6988 0c52 05       		.uleb128 0x5
 6989 0c53 03       		.byte	0x3
 6990 0c54 00000000 		.4byte	pxCurrentTCB
 6991 0c58 0E       		.uleb128 0xe
 6992 0c59 04       		.byte	0x4
 6993 0c5a 320C0000 		.4byte	0xc32
 6994 0c5e 21       		.uleb128 0x21
 6995 0c5f 580C0000 		.4byte	0xc58
 6996 0c63 0D       		.uleb128 0xd
 6997 0c64 580C0000 		.4byte	0xc58
 6998 0c68 08       		.uleb128 0x8
ARM GAS  /tmp/ccTV2SzP.s 			page 191


 6999 0c69 410A0000 		.4byte	0xa41
 7000 0c6d 780C0000 		.4byte	0xc78
 7001 0c71 09       		.uleb128 0x9
 7002 0c72 34000000 		.4byte	0x34
 7003 0c76 07       		.byte	0x7
 7004 0c77 00       		.byte	0
 7005 0c78 25       		.uleb128 0x25
 7006 0c79 0A5F0000 		.4byte	.LASF1386
 7007 0c7d 01       		.byte	0x1
 7008 0c7e BF       		.byte	0xbf
 7009 0c7f 680C0000 		.4byte	0xc68
 7010 0c83 05       		.uleb128 0x5
 7011 0c84 03       		.byte	0x3
 7012 0c85 00000000 		.4byte	pxReadyTasksLists
 7013 0c89 25       		.uleb128 0x25
 7014 0c8a A5A30000 		.4byte	.LASF1387
 7015 0c8e 01       		.byte	0x1
 7016 0c8f C0       		.byte	0xc0
 7017 0c90 410A0000 		.4byte	0xa41
 7018 0c94 05       		.uleb128 0x5
 7019 0c95 03       		.byte	0x3
 7020 0c96 00000000 		.4byte	xDelayedTaskList1
 7021 0c9a 25       		.uleb128 0x25
 7022 0c9b B7A30000 		.4byte	.LASF1388
 7023 0c9f 01       		.byte	0x1
 7024 0ca0 C1       		.byte	0xc1
 7025 0ca1 410A0000 		.4byte	0xa41
 7026 0ca5 05       		.uleb128 0x5
 7027 0ca6 03       		.byte	0x3
 7028 0ca7 00000000 		.4byte	xDelayedTaskList2
 7029 0cab 25       		.uleb128 0x25
 7030 0cac 8E890000 		.4byte	.LASF1389
 7031 0cb0 01       		.byte	0x1
 7032 0cb1 C2       		.byte	0xc2
 7033 0cb2 C20C0000 		.4byte	0xcc2
 7034 0cb6 05       		.uleb128 0x5
 7035 0cb7 03       		.byte	0x3
 7036 0cb8 00000000 		.4byte	pxDelayedTaskList
 7037 0cbc 0E       		.uleb128 0xe
 7038 0cbd 04       		.byte	0x4
 7039 0cbe 410A0000 		.4byte	0xa41
 7040 0cc2 21       		.uleb128 0x21
 7041 0cc3 BC0C0000 		.4byte	0xcbc
 7042 0cc7 0D       		.uleb128 0xd
 7043 0cc8 BC0C0000 		.4byte	0xcbc
 7044 0ccc 25       		.uleb128 0x25
 7045 0ccd F38B0000 		.4byte	.LASF1390
 7046 0cd1 01       		.byte	0x1
 7047 0cd2 C3       		.byte	0xc3
 7048 0cd3 C20C0000 		.4byte	0xcc2
 7049 0cd7 05       		.uleb128 0x5
 7050 0cd8 03       		.byte	0x3
 7051 0cd9 00000000 		.4byte	pxOverflowDelayedTaskList
 7052 0cdd 25       		.uleb128 0x25
 7053 0cde 8A3B0000 		.4byte	.LASF1391
 7054 0ce2 01       		.byte	0x1
 7055 0ce3 C4       		.byte	0xc4
ARM GAS  /tmp/ccTV2SzP.s 			page 192


 7056 0ce4 410A0000 		.4byte	0xa41
 7057 0ce8 05       		.uleb128 0x5
 7058 0ce9 03       		.byte	0x3
 7059 0cea 00000000 		.4byte	xPendingReadyList
 7060 0cee 25       		.uleb128 0x25
 7061 0cef 00940000 		.4byte	.LASF1392
 7062 0cf3 01       		.byte	0x1
 7063 0cf4 C8       		.byte	0xc8
 7064 0cf5 410A0000 		.4byte	0xa41
 7065 0cf9 05       		.uleb128 0x5
 7066 0cfa 03       		.byte	0x3
 7067 0cfb 00000000 		.4byte	xTasksWaitingTermination
 7068 0cff 25       		.uleb128 0x25
 7069 0d00 37430000 		.4byte	.LASF1393
 7070 0d04 01       		.byte	0x1
 7071 0d05 C9       		.byte	0xc9
 7072 0d06 44090000 		.4byte	0x944
 7073 0d0a 05       		.uleb128 0x5
 7074 0d0b 03       		.byte	0x3
 7075 0d0c 00000000 		.4byte	uxTasksDeleted
 7076 0d10 25       		.uleb128 0x25
 7077 0d11 43230000 		.4byte	.LASF1394
 7078 0d15 01       		.byte	0x1
 7079 0d16 CF       		.byte	0xcf
 7080 0d17 410A0000 		.4byte	0xa41
 7081 0d1b 05       		.uleb128 0x5
 7082 0d1c 03       		.byte	0x3
 7083 0d1d 00000000 		.4byte	xSuspendedTaskList
 7084 0d21 25       		.uleb128 0x25
 7085 0d22 A0450000 		.4byte	.LASF1395
 7086 0d26 01       		.byte	0x1
 7087 0d27 DA       		.byte	0xda
 7088 0d28 44090000 		.4byte	0x944
 7089 0d2c 05       		.uleb128 0x5
 7090 0d2d 03       		.byte	0x3
 7091 0d2e 00000000 		.4byte	uxCurrentNumberOfTasks
 7092 0d32 25       		.uleb128 0x25
 7093 0d33 D70B0000 		.4byte	.LASF1396
 7094 0d37 01       		.byte	0x1
 7095 0d38 DB       		.byte	0xdb
 7096 0d39 64090000 		.4byte	0x964
 7097 0d3d 05       		.uleb128 0x5
 7098 0d3e 03       		.byte	0x3
 7099 0d3f 00000000 		.4byte	xTickCount
 7100 0d43 25       		.uleb128 0x25
 7101 0d44 7B810000 		.4byte	.LASF1397
 7102 0d48 01       		.byte	0x1
 7103 0d49 DC       		.byte	0xdc
 7104 0d4a 44090000 		.4byte	0x944
 7105 0d4e 05       		.uleb128 0x5
 7106 0d4f 03       		.byte	0x3
 7107 0d50 00000000 		.4byte	uxTopReadyPriority
 7108 0d54 25       		.uleb128 0x25
 7109 0d55 CD2E0000 		.4byte	.LASF1398
 7110 0d59 01       		.byte	0x1
 7111 0d5a DD       		.byte	0xdd
 7112 0d5b 34090000 		.4byte	0x934
ARM GAS  /tmp/ccTV2SzP.s 			page 193


 7113 0d5f 05       		.uleb128 0x5
 7114 0d60 03       		.byte	0x3
 7115 0d61 00000000 		.4byte	xSchedulerRunning
 7116 0d65 25       		.uleb128 0x25
 7117 0d66 782C0000 		.4byte	.LASF1399
 7118 0d6a 01       		.byte	0x1
 7119 0d6b DE       		.byte	0xde
 7120 0d6c 44090000 		.4byte	0x944
 7121 0d70 05       		.uleb128 0x5
 7122 0d71 03       		.byte	0x3
 7123 0d72 00000000 		.4byte	uxPendedTicks
 7124 0d76 25       		.uleb128 0x25
 7125 0d77 E6000000 		.4byte	.LASF1400
 7126 0d7b 01       		.byte	0x1
 7127 0d7c DF       		.byte	0xdf
 7128 0d7d 34090000 		.4byte	0x934
 7129 0d81 05       		.uleb128 0x5
 7130 0d82 03       		.byte	0x3
 7131 0d83 00000000 		.4byte	xYieldPending
 7132 0d87 25       		.uleb128 0x25
 7133 0d88 D4270000 		.4byte	.LASF1401
 7134 0d8c 01       		.byte	0x1
 7135 0d8d E0       		.byte	0xe0
 7136 0d8e 34090000 		.4byte	0x934
 7137 0d92 05       		.uleb128 0x5
 7138 0d93 03       		.byte	0x3
 7139 0d94 00000000 		.4byte	xNumOfOverflows
 7140 0d98 25       		.uleb128 0x25
 7141 0d99 E20B0000 		.4byte	.LASF1381
 7142 0d9d 01       		.byte	0x1
 7143 0d9e E1       		.byte	0xe1
 7144 0d9f 39090000 		.4byte	0x939
 7145 0da3 05       		.uleb128 0x5
 7146 0da4 03       		.byte	0x3
 7147 0da5 00000000 		.4byte	uxTaskNumber
 7148 0da9 25       		.uleb128 0x25
 7149 0daa 50360000 		.4byte	.LASF1402
 7150 0dae 01       		.byte	0x1
 7151 0daf E2       		.byte	0xe2
 7152 0db0 64090000 		.4byte	0x964
 7153 0db4 05       		.uleb128 0x5
 7154 0db5 03       		.byte	0x3
 7155 0db6 00000000 		.4byte	xNextTaskUnblockTime
 7156 0dba 25       		.uleb128 0x25
 7157 0dbb 65150000 		.4byte	.LASF1403
 7158 0dbf 01       		.byte	0x1
 7159 0dc0 EC       		.byte	0xec
 7160 0dc1 44090000 		.4byte	0x944
 7161 0dc5 05       		.uleb128 0x5
 7162 0dc6 03       		.byte	0x3
 7163 0dc7 00000000 		.4byte	uxSchedulerSuspended
 7164 0dcb 26       		.uleb128 0x26
 7165 0dcc 9D410000 		.4byte	.LASF1467
 7166 0dd0 01       		.byte	0x1
 7167 0dd1 080E     		.2byte	0xe08
 7168 0dd3 2E010000 		.4byte	0x12e
 7169 0dd7 00000000 		.4byte	.LFB45
ARM GAS  /tmp/ccTV2SzP.s 			page 194


 7170 0ddb 28000000 		.4byte	.LFE45-.LFB45
 7171 0ddf 01       		.uleb128 0x1
 7172 0de0 9C       		.byte	0x9c
 7173 0de1 27       		.uleb128 0x27
 7174 0de2 46380000 		.4byte	.LASF1405
 7175 0de6 01       		.byte	0x1
 7176 0de7 F80D     		.2byte	0xdf8
 7177 0de9 59090000 		.4byte	0x959
 7178 0ded 00000000 		.4byte	.LFB44
 7179 0df1 30000000 		.4byte	.LFE44-.LFB44
 7180 0df5 01       		.uleb128 0x1
 7181 0df6 9C       		.byte	0x9c
 7182 0df7 0B0E0000 		.4byte	0xe0b
 7183 0dfb 28       		.uleb128 0x28
 7184 0dfc F5130000 		.4byte	.LASF1404
 7185 0e00 01       		.byte	0x1
 7186 0e01 FA0D     		.2byte	0xdfa
 7187 0e03 59090000 		.4byte	0x959
 7188 0e07 02       		.uleb128 0x2
 7189 0e08 91       		.byte	0x91
 7190 0e09 74       		.sleb128 -12
 7191 0e0a 00       		.byte	0
 7192 0e0b 29       		.uleb128 0x29
 7193 0e0c B60F0000 		.4byte	.LASF1406
 7194 0e10 01       		.byte	0x1
 7195 0e11 AA0C     		.2byte	0xcaa
 7196 0e13 29090000 		.4byte	0x929
 7197 0e17 00000000 		.4byte	.LFB43
 7198 0e1b D8000000 		.4byte	.LFE43-.LFB43
 7199 0e1f 01       		.uleb128 0x1
 7200 0e20 9C       		.byte	0x9c
 7201 0e21 530E0000 		.4byte	0xe53
 7202 0e25 2A       		.uleb128 0x2a
 7203 0e26 30520000 		.4byte	.LASF1409
 7204 0e2a 01       		.byte	0x1
 7205 0e2b AA0C     		.2byte	0xcaa
 7206 0e2d 5C0A0000 		.4byte	0xa5c
 7207 0e31 02       		.uleb128 0x2
 7208 0e32 91       		.byte	0x91
 7209 0e33 6C       		.sleb128 -20
 7210 0e34 28       		.uleb128 0x28
 7211 0e35 C2AA0000 		.4byte	.LASF1407
 7212 0e39 01       		.byte	0x1
 7213 0e3a AC0C     		.2byte	0xcac
 7214 0e3c 630C0000 		.4byte	0xc63
 7215 0e40 02       		.uleb128 0x2
 7216 0e41 91       		.byte	0x91
 7217 0e42 70       		.sleb128 -16
 7218 0e43 28       		.uleb128 0x28
 7219 0e44 BC2A0000 		.4byte	.LASF1408
 7220 0e48 01       		.byte	0x1
 7221 0e49 AD0C     		.2byte	0xcad
 7222 0e4b 29090000 		.4byte	0x929
 7223 0e4f 02       		.uleb128 0x2
 7224 0e50 91       		.byte	0x91
 7225 0e51 74       		.sleb128 -12
 7226 0e52 00       		.byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 195


 7227 0e53 2B       		.uleb128 0x2b
 7228 0e54 80720000 		.4byte	.LASF1441
 7229 0e58 01       		.byte	0x1
 7230 0e59 6B0C     		.2byte	0xc6b
 7231 0e5b 00000000 		.4byte	.LFB42
 7232 0e5f EC000000 		.4byte	.LFE42-.LFB42
 7233 0e63 01       		.uleb128 0x1
 7234 0e64 9C       		.byte	0x9c
 7235 0e65 880E0000 		.4byte	0xe88
 7236 0e69 2A       		.uleb128 0x2a
 7237 0e6a 30520000 		.4byte	.LASF1409
 7238 0e6e 01       		.byte	0x1
 7239 0e6f 6B0C     		.2byte	0xc6b
 7240 0e71 5C0A0000 		.4byte	0xa5c
 7241 0e75 02       		.uleb128 0x2
 7242 0e76 91       		.byte	0x91
 7243 0e77 6C       		.sleb128 -20
 7244 0e78 28       		.uleb128 0x28
 7245 0e79 C2AA0000 		.4byte	.LASF1407
 7246 0e7d 01       		.byte	0x1
 7247 0e7e 6D0C     		.2byte	0xc6d
 7248 0e80 630C0000 		.4byte	0xc63
 7249 0e84 02       		.uleb128 0x2
 7250 0e85 91       		.byte	0x91
 7251 0e86 74       		.sleb128 -12
 7252 0e87 00       		.byte	0
 7253 0e88 27       		.uleb128 0x27
 7254 0e89 E3A90000 		.4byte	.LASF1410
 7255 0e8d 01       		.byte	0x1
 7256 0e8e 3E0C     		.2byte	0xc3e
 7257 0e90 510A0000 		.4byte	0xa51
 7258 0e94 00000000 		.4byte	.LFB41
 7259 0e98 1C000000 		.4byte	.LFE41-.LFB41
 7260 0e9c 01       		.uleb128 0x1
 7261 0e9d 9C       		.byte	0x9c
 7262 0e9e B20E0000 		.4byte	0xeb2
 7263 0ea2 28       		.uleb128 0x28
 7264 0ea3 BC2A0000 		.4byte	.LASF1408
 7265 0ea7 01       		.byte	0x1
 7266 0ea8 400C     		.2byte	0xc40
 7267 0eaa 510A0000 		.4byte	0xa51
 7268 0eae 02       		.uleb128 0x2
 7269 0eaf 91       		.byte	0x91
 7270 0eb0 74       		.sleb128 -12
 7271 0eb1 00       		.byte	0
 7272 0eb2 2C       		.uleb128 0x2c
 7273 0eb3 512B0000 		.4byte	.LASF1411
 7274 0eb7 01       		.byte	0x1
 7275 0eb8 230C     		.2byte	0xc23
 7276 0eba 00000000 		.4byte	.LFB40
 7277 0ebe 48000000 		.4byte	.LFE40-.LFB40
 7278 0ec2 01       		.uleb128 0x1
 7279 0ec3 9C       		.byte	0x9c
 7280 0ec4 D80E0000 		.4byte	0xed8
 7281 0ec8 28       		.uleb128 0x28
 7282 0ec9 C2AA0000 		.4byte	.LASF1407
 7283 0ecd 01       		.byte	0x1
ARM GAS  /tmp/ccTV2SzP.s 			page 196


 7284 0ece 250C     		.2byte	0xc25
 7285 0ed0 580C0000 		.4byte	0xc58
 7286 0ed4 02       		.uleb128 0x2
 7287 0ed5 91       		.byte	0x91
 7288 0ed6 74       		.sleb128 -12
 7289 0ed7 00       		.byte	0
 7290 0ed8 2D       		.uleb128 0x2d
 7291 0ed9 CA630000 		.4byte	.LASF1412
 7292 0edd 01       		.byte	0x1
 7293 0ede 0E0C     		.2byte	0xc0e
 7294 0ee0 00000000 		.4byte	.LFB39
 7295 0ee4 20000000 		.4byte	.LFE39-.LFB39
 7296 0ee8 01       		.uleb128 0x1
 7297 0ee9 9C       		.byte	0x9c
 7298 0eea FE0E0000 		.4byte	0xefe
 7299 0eee 2A       		.uleb128 0x2a
 7300 0eef C2AA0000 		.4byte	.LASF1407
 7301 0ef3 01       		.byte	0x1
 7302 0ef4 0E0C     		.2byte	0xc0e
 7303 0ef6 580C0000 		.4byte	0xc58
 7304 0efa 02       		.uleb128 0x2
 7305 0efb 91       		.byte	0x91
 7306 0efc 74       		.sleb128 -12
 7307 0efd 00       		.byte	0
 7308 0efe 29       		.uleb128 0x29
 7309 0eff 48660000 		.4byte	.LASF1413
 7310 0f03 01       		.byte	0x1
 7311 0f04 F20B     		.2byte	0xbf2
 7312 0f06 39090000 		.4byte	0x939
 7313 0f0a 00000000 		.4byte	.LFB38
 7314 0f0e 38000000 		.4byte	.LFE38-.LFB38
 7315 0f12 01       		.uleb128 0x1
 7316 0f13 9C       		.byte	0x9c
 7317 0f14 550F0000 		.4byte	0xf55
 7318 0f18 2A       		.uleb128 0x2a
 7319 0f19 78130000 		.4byte	.LASF1414
 7320 0f1d 01       		.byte	0x1
 7321 0f1e F20B     		.2byte	0xbf2
 7322 0f20 510A0000 		.4byte	0xa51
 7323 0f24 02       		.uleb128 0x2
 7324 0f25 91       		.byte	0x91
 7325 0f26 64       		.sleb128 -28
 7326 0f27 28       		.uleb128 0x28
 7327 0f28 C2AA0000 		.4byte	.LASF1407
 7328 0f2c 01       		.byte	0x1
 7329 0f2d F40B     		.2byte	0xbf4
 7330 0f2f 580C0000 		.4byte	0xc58
 7331 0f33 02       		.uleb128 0x2
 7332 0f34 91       		.byte	0x91
 7333 0f35 74       		.sleb128 -12
 7334 0f36 28       		.uleb128 0x28
 7335 0f37 2F400000 		.4byte	.LASF1415
 7336 0f3b 01       		.byte	0x1
 7337 0f3c F50B     		.2byte	0xbf5
 7338 0f3e 6E090000 		.4byte	0x96e
 7339 0f42 02       		.uleb128 0x2
 7340 0f43 91       		.byte	0x91
ARM GAS  /tmp/ccTV2SzP.s 			page 197


 7341 0f44 70       		.sleb128 -16
 7342 0f45 28       		.uleb128 0x28
 7343 0f46 F5130000 		.4byte	.LASF1404
 7344 0f4a 01       		.byte	0x1
 7345 0f4b F60B     		.2byte	0xbf6
 7346 0f4d 39090000 		.4byte	0x939
 7347 0f51 02       		.uleb128 0x2
 7348 0f52 91       		.byte	0x91
 7349 0f53 6C       		.sleb128 -20
 7350 0f54 00       		.byte	0
 7351 0f55 2E       		.uleb128 0x2e
 7352 0f56 50650000 		.4byte	.LASF1418
 7353 0f5a 01       		.byte	0x1
 7354 0f5b DE0B     		.2byte	0xbde
 7355 0f5d D7080000 		.4byte	0x8d7
 7356 0f61 00000000 		.4byte	.LFB37
 7357 0f65 36000000 		.4byte	.LFE37-.LFB37
 7358 0f69 01       		.uleb128 0x1
 7359 0f6a 9C       		.byte	0x9c
 7360 0f6b 8E0F0000 		.4byte	0xf8e
 7361 0f6f 2A       		.uleb128 0x2a
 7362 0f70 6E870000 		.4byte	.LASF1416
 7363 0f74 01       		.byte	0x1
 7364 0f75 DE0B     		.2byte	0xbde
 7365 0f77 8E0F0000 		.4byte	0xf8e
 7366 0f7b 02       		.uleb128 0x2
 7367 0f7c 91       		.byte	0x91
 7368 0f7d 6C       		.sleb128 -20
 7369 0f7e 28       		.uleb128 0x28
 7370 0f7f 81310000 		.4byte	.LASF1417
 7371 0f83 01       		.byte	0x1
 7372 0f84 E00B     		.2byte	0xbe0
 7373 0f86 E7080000 		.4byte	0x8e7
 7374 0f8a 02       		.uleb128 0x2
 7375 0f8b 91       		.byte	0x91
 7376 0f8c 74       		.sleb128 -12
 7377 0f8d 00       		.byte	0
 7378 0f8e 0E       		.uleb128 0xe
 7379 0f8f 04       		.byte	0x4
 7380 0f90 D2080000 		.4byte	0x8d2
 7381 0f94 2F       		.uleb128 0x2f
 7382 0f95 41590000 		.4byte	.LASF1419
 7383 0f99 01       		.byte	0x1
 7384 0f9a 890B     		.2byte	0xb89
 7385 0f9c 39090000 		.4byte	0x939
 7386 0fa0 00000000 		.4byte	.LFB36
 7387 0fa4 16010000 		.4byte	.LFE36-.LFB36
 7388 0fa8 01       		.uleb128 0x1
 7389 0fa9 9C       		.byte	0x9c
 7390 0faa 3F100000 		.4byte	0x103f
 7391 0fae 2A       		.uleb128 0x2a
 7392 0faf 4C760000 		.4byte	.LASF1420
 7393 0fb3 01       		.byte	0x1
 7394 0fb4 890B     		.2byte	0xb89
 7395 0fb6 3F100000 		.4byte	0x103f
 7396 0fba 02       		.uleb128 0x2
 7397 0fbb 91       		.byte	0x91
ARM GAS  /tmp/ccTV2SzP.s 			page 198


 7398 0fbc 54       		.sleb128 -44
 7399 0fbd 2A       		.uleb128 0x2a
 7400 0fbe DB370000 		.4byte	.LASF1421
 7401 0fc2 01       		.byte	0x1
 7402 0fc3 890B     		.2byte	0xb89
 7403 0fc5 BC0C0000 		.4byte	0xcbc
 7404 0fc9 02       		.uleb128 0x2
 7405 0fca 91       		.byte	0x91
 7406 0fcb 50       		.sleb128 -48
 7407 0fcc 2A       		.uleb128 0x2a
 7408 0fcd F93D0000 		.4byte	.LASF1422
 7409 0fd1 01       		.byte	0x1
 7410 0fd2 890B     		.2byte	0xb89
 7411 0fd4 8D0A0000 		.4byte	0xa8d
 7412 0fd8 02       		.uleb128 0x2
 7413 0fd9 91       		.byte	0x91
 7414 0fda 4F       		.sleb128 -49
 7415 0fdb 28       		.uleb128 0x28
 7416 0fdc 61240000 		.4byte	.LASF1423
 7417 0fe0 01       		.byte	0x1
 7418 0fe1 8B0B     		.2byte	0xb8b
 7419 0fe3 4A100000 		.4byte	0x104a
 7420 0fe7 02       		.uleb128 0x2
 7421 0fe8 91       		.byte	0x91
 7422 0fe9 5C       		.sleb128 -36
 7423 0fea 28       		.uleb128 0x28
 7424 0feb 1C540000 		.4byte	.LASF1424
 7425 0fef 01       		.byte	0x1
 7426 0ff0 8B0B     		.2byte	0xb8b
 7427 0ff2 4A100000 		.4byte	0x104a
 7428 0ff6 02       		.uleb128 0x2
 7429 0ff7 91       		.byte	0x91
 7430 0ff8 64       		.sleb128 -28
 7431 0ff9 28       		.uleb128 0x28
 7432 0ffa FD990000 		.4byte	.LASF1425
 7433 0ffe 01       		.byte	0x1
 7434 0fff 8C0B     		.2byte	0xb8c
 7435 1001 39090000 		.4byte	0x939
 7436 1005 02       		.uleb128 0x2
 7437 1006 91       		.byte	0x91
 7438 1007 6C       		.sleb128 -20
 7439 1008 30       		.uleb128 0x30
 7440 1009 1A000000 		.4byte	.LBB17
 7441 100d 2C000000 		.4byte	.LBE17-.LBB17
 7442 1011 25100000 		.4byte	0x1025
 7443 1015 28       		.uleb128 0x28
 7444 1016 A8400000 		.4byte	.LASF1426
 7445 101a 01       		.byte	0x1
 7446 101b 900B     		.2byte	0xb90
 7447 101d C70C0000 		.4byte	0xcc7
 7448 1021 02       		.uleb128 0x2
 7449 1022 91       		.byte	0x91
 7450 1023 68       		.sleb128 -24
 7451 1024 00       		.byte	0
 7452 1025 31       		.uleb128 0x31
 7453 1026 46000000 		.4byte	.LBB18
 7454 102a 2C000000 		.4byte	.LBE18-.LBB18
ARM GAS  /tmp/ccTV2SzP.s 			page 199


 7455 102e 28       		.uleb128 0x28
 7456 102f A8400000 		.4byte	.LASF1426
 7457 1033 01       		.byte	0x1
 7458 1034 980B     		.2byte	0xb98
 7459 1036 C70C0000 		.4byte	0xcc7
 7460 103a 02       		.uleb128 0x2
 7461 103b 91       		.byte	0x91
 7462 103c 60       		.sleb128 -32
 7463 103d 00       		.byte	0
 7464 103e 00       		.byte	0
 7465 103f 0E       		.uleb128 0xe
 7466 1040 04       		.byte	0x4
 7467 1041 810B0000 		.4byte	0xb81
 7468 1045 0D       		.uleb128 0xd
 7469 1046 3F100000 		.4byte	0x103f
 7470 104a 0E       		.uleb128 0xe
 7471 104b 04       		.byte	0x4
 7472 104c 3D0C0000 		.4byte	0xc3d
 7473 1050 2F       		.uleb128 0x2f
 7474 1051 9D2E0000 		.4byte	.LASF1427
 7475 1055 01       		.byte	0x1
 7476 1056 620B     		.2byte	0xb62
 7477 1058 580C0000 		.4byte	0xc58
 7478 105c 00000000 		.4byte	.LFB35
 7479 1060 62000000 		.4byte	.LFE35-.LFB35
 7480 1064 01       		.uleb128 0x1
 7481 1065 9C       		.byte	0x9c
 7482 1066 98100000 		.4byte	0x1098
 7483 106a 2A       		.uleb128 0x2a
 7484 106b 94050000 		.4byte	.LASF1428
 7485 106f 01       		.byte	0x1
 7486 1070 620B     		.2byte	0xb62
 7487 1072 E2080000 		.4byte	0x8e2
 7488 1076 02       		.uleb128 0x2
 7489 1077 91       		.byte	0x91
 7490 1078 6E       		.sleb128 -18
 7491 1079 2A       		.uleb128 0x2a
 7492 107a 0B860000 		.4byte	.LASF1429
 7493 107e 01       		.byte	0x1
 7494 107f 620B     		.2byte	0xb62
 7495 1081 0F0B0000 		.4byte	0xb0f
 7496 1085 02       		.uleb128 0x2
 7497 1086 91       		.byte	0x91
 7498 1087 68       		.sleb128 -24
 7499 1088 28       		.uleb128 0x28
 7500 1089 92140000 		.4byte	.LASF1430
 7501 108d 01       		.byte	0x1
 7502 108e 640B     		.2byte	0xb64
 7503 1090 580C0000 		.4byte	0xc58
 7504 1094 02       		.uleb128 0x2
 7505 1095 91       		.byte	0x91
 7506 1096 74       		.sleb128 -12
 7507 1097 00       		.byte	0
 7508 1098 2D       		.uleb128 0x2d
 7509 1099 A07A0000 		.4byte	.LASF1431
 7510 109d 01       		.byte	0x1
 7511 109e 440B     		.2byte	0xb44
ARM GAS  /tmp/ccTV2SzP.s 			page 200


 7512 10a0 00000000 		.4byte	.LFB34
 7513 10a4 6C000000 		.4byte	.LFE34-.LFB34
 7514 10a8 01       		.uleb128 0x1
 7515 10a9 9C       		.byte	0x9c
 7516 10aa BE100000 		.4byte	0x10be
 7517 10ae 2A       		.uleb128 0x2a
 7518 10af 10160000 		.4byte	.LASF1432
 7519 10b3 01       		.byte	0x1
 7520 10b4 440B     		.2byte	0xb44
 7521 10b6 69090000 		.4byte	0x969
 7522 10ba 02       		.uleb128 0x2
 7523 10bb 91       		.byte	0x91
 7524 10bc 74       		.sleb128 -12
 7525 10bd 00       		.byte	0
 7526 10be 2D       		.uleb128 0x2d
 7527 10bf 7A7D0000 		.4byte	.LASF1433
 7528 10c3 01       		.byte	0x1
 7529 10c4 1B0B     		.2byte	0xb1b
 7530 10c6 00000000 		.4byte	.LFB33
 7531 10ca 78000000 		.4byte	.LFE33-.LFB33
 7532 10ce 01       		.uleb128 0x1
 7533 10cf 9C       		.byte	0x9c
 7534 10d0 07110000 		.4byte	0x1107
 7535 10d4 31       		.uleb128 0x31
 7536 10d5 06000000 		.4byte	.LBB15
 7537 10d9 5C000000 		.4byte	.LBE15-.LBB15
 7538 10dd 28       		.uleb128 0x28
 7539 10de 72A80000 		.4byte	.LASF1434
 7540 10e2 01       		.byte	0x1
 7541 10e3 1F0B     		.2byte	0xb1f
 7542 10e5 29090000 		.4byte	0x929
 7543 10e9 02       		.uleb128 0x2
 7544 10ea 91       		.byte	0x91
 7545 10eb 74       		.sleb128 -12
 7546 10ec 31       		.uleb128 0x31
 7547 10ed 26000000 		.4byte	.LBB16
 7548 10f1 34000000 		.4byte	.LBE16-.LBB16
 7549 10f5 28       		.uleb128 0x28
 7550 10f6 C2AA0000 		.4byte	.LASF1407
 7551 10fa 01       		.byte	0x1
 7552 10fb 2D0B     		.2byte	0xb2d
 7553 10fd 580C0000 		.4byte	0xc58
 7554 1101 02       		.uleb128 0x2
 7555 1102 91       		.byte	0x91
 7556 1103 70       		.sleb128 -16
 7557 1104 00       		.byte	0
 7558 1105 00       		.byte	0
 7559 1106 00       		.byte	0
 7560 1107 2D       		.uleb128 0x2d
 7561 1108 C1A20000 		.4byte	.LASF1435
 7562 110c 01       		.byte	0x1
 7563 110d FB0A     		.2byte	0xafb
 7564 110f 00000000 		.4byte	.LFB32
 7565 1113 80000000 		.4byte	.LFE32-.LFB32
 7566 1117 01       		.uleb128 0x1
 7567 1118 9C       		.byte	0x9c
 7568 1119 2D110000 		.4byte	0x112d
ARM GAS  /tmp/ccTV2SzP.s 			page 201


 7569 111d 28       		.uleb128 0x28
 7570 111e DBAA0000 		.4byte	.LASF1378
 7571 1122 01       		.byte	0x1
 7572 1123 FD0A     		.2byte	0xafd
 7573 1125 39090000 		.4byte	0x939
 7574 1129 02       		.uleb128 0x2
 7575 112a 91       		.byte	0x91
 7576 112b 74       		.sleb128 -12
 7577 112c 00       		.byte	0
 7578 112d 2D       		.uleb128 0x2d
 7579 112e 8C270000 		.4byte	.LASF1436
 7580 1132 01       		.byte	0x1
 7581 1133 8E0A     		.2byte	0xa8e
 7582 1135 00000000 		.4byte	.LFB31
 7583 1139 9A000000 		.4byte	.LFE31-.LFB31
 7584 113d 01       		.uleb128 0x1
 7585 113e 9C       		.byte	0x9c
 7586 113f 9C110000 		.4byte	0x119c
 7587 1143 2A       		.uleb128 0x2a
 7588 1144 C2AA0000 		.4byte	.LASF1407
 7589 1148 01       		.byte	0x1
 7590 1149 8E0A     		.2byte	0xa8e
 7591 114b 630C0000 		.4byte	0xc63
 7592 114f 02       		.uleb128 0x2
 7593 1150 91       		.byte	0x91
 7594 1151 6C       		.sleb128 -20
 7595 1152 2A       		.uleb128 0x2a
 7596 1153 A3210000 		.4byte	.LASF1437
 7597 1157 01       		.byte	0x1
 7598 1158 8E0A     		.2byte	0xa8e
 7599 115a B9050000 		.4byte	0x5b9
 7600 115e 02       		.uleb128 0x2
 7601 115f 91       		.byte	0x91
 7602 1160 68       		.sleb128 -24
 7603 1161 2A       		.uleb128 0x2a
 7604 1162 DBAA0000 		.4byte	.LASF1378
 7605 1166 01       		.byte	0x1
 7606 1167 8E0A     		.2byte	0xa8e
 7607 1169 39090000 		.4byte	0x939
 7608 116d 02       		.uleb128 0x2
 7609 116e 91       		.byte	0x91
 7610 116f 64       		.sleb128 -28
 7611 1170 2A       		.uleb128 0x2a
 7612 1171 989C0000 		.4byte	.LASF1438
 7613 1175 01       		.byte	0x1
 7614 1176 8E0A     		.2byte	0xa8e
 7615 1178 A2110000 		.4byte	0x11a2
 7616 117c 02       		.uleb128 0x2
 7617 117d 91       		.byte	0x91
 7618 117e 60       		.sleb128 -32
 7619 117f 2A       		.uleb128 0x2a
 7620 1180 94050000 		.4byte	.LASF1428
 7621 1184 01       		.byte	0x1
 7622 1185 8E0A     		.2byte	0xa8e
 7623 1187 E2080000 		.4byte	0x8e2
 7624 118b 02       		.uleb128 0x2
 7625 118c 91       		.byte	0x91
ARM GAS  /tmp/ccTV2SzP.s 			page 202


 7626 118d 00       		.sleb128 0
 7627 118e 32       		.uleb128 0x32
 7628 118f 7800     		.ascii	"x\000"
 7629 1191 01       		.byte	0x1
 7630 1192 900A     		.2byte	0xa90
 7631 1194 39090000 		.4byte	0x939
 7632 1198 02       		.uleb128 0x2
 7633 1199 91       		.byte	0x91
 7634 119a 74       		.sleb128 -12
 7635 119b 00       		.byte	0
 7636 119c 0E       		.uleb128 0xe
 7637 119d 04       		.byte	0x4
 7638 119e 040B0000 		.4byte	0xb04
 7639 11a2 0D       		.uleb128 0xd
 7640 11a3 9C110000 		.4byte	0x119c
 7641 11a7 2D       		.uleb128 0x2d
 7642 11a8 C8270000 		.4byte	.LASF1439
 7643 11ac 01       		.byte	0x1
 7644 11ad FB09     		.2byte	0x9fb
 7645 11af 00000000 		.4byte	.LFB30
 7646 11b3 0E000000 		.4byte	.LFE30-.LFB30
 7647 11b7 01       		.uleb128 0x1
 7648 11b8 9C       		.byte	0x9c
 7649 11b9 CD110000 		.4byte	0x11cd
 7650 11bd 2A       		.uleb128 0x2a
 7651 11be F0990000 		.4byte	.LASF1440
 7652 11c2 01       		.byte	0x1
 7653 11c3 FB09     		.2byte	0x9fb
 7654 11c5 2E010000 		.4byte	0x12e
 7655 11c9 02       		.uleb128 0x2
 7656 11ca 91       		.byte	0x91
 7657 11cb 74       		.sleb128 -12
 7658 11cc 00       		.byte	0
 7659 11cd 33       		.uleb128 0x33
 7660 11ce 84550000 		.4byte	.LASF1442
 7661 11d2 01       		.byte	0x1
 7662 11d3 E309     		.2byte	0x9e3
 7663 11d5 00000000 		.4byte	.LFB29
 7664 11d9 24000000 		.4byte	.LFE29-.LFB29
 7665 11dd 01       		.uleb128 0x1
 7666 11de 9C       		.byte	0x9c
 7667 11df 11120000 		.4byte	0x1211
 7668 11e3 2A       		.uleb128 0x2a
 7669 11e4 78130000 		.4byte	.LASF1414
 7670 11e8 01       		.byte	0x1
 7671 11e9 E309     		.2byte	0x9e3
 7672 11eb 510A0000 		.4byte	0xa51
 7673 11ef 02       		.uleb128 0x2
 7674 11f0 91       		.byte	0x91
 7675 11f1 6C       		.sleb128 -20
 7676 11f2 2A       		.uleb128 0x2a
 7677 11f3 13130000 		.4byte	.LASF1443
 7678 11f7 01       		.byte	0x1
 7679 11f8 E309     		.2byte	0x9e3
 7680 11fa 49090000 		.4byte	0x949
 7681 11fe 02       		.uleb128 0x2
 7682 11ff 91       		.byte	0x91
ARM GAS  /tmp/ccTV2SzP.s 			page 203


 7683 1200 68       		.sleb128 -24
 7684 1201 28       		.uleb128 0x28
 7685 1202 C2AA0000 		.4byte	.LASF1407
 7686 1206 01       		.byte	0x1
 7687 1207 E509     		.2byte	0x9e5
 7688 1209 580C0000 		.4byte	0xc58
 7689 120d 02       		.uleb128 0x2
 7690 120e 91       		.byte	0x91
 7691 120f 74       		.sleb128 -12
 7692 1210 00       		.byte	0
 7693 1211 27       		.uleb128 0x27
 7694 1212 2A240000 		.4byte	.LASF1444
 7695 1216 01       		.byte	0x1
 7696 1217 CC09     		.2byte	0x9cc
 7697 1219 39090000 		.4byte	0x939
 7698 121d 00000000 		.4byte	.LFB28
 7699 1221 2A000000 		.4byte	.LFE28-.LFB28
 7700 1225 01       		.uleb128 0x1
 7701 1226 9C       		.byte	0x9c
 7702 1227 59120000 		.4byte	0x1259
 7703 122b 2A       		.uleb128 0x2a
 7704 122c 78130000 		.4byte	.LASF1414
 7705 1230 01       		.byte	0x1
 7706 1231 CC09     		.2byte	0x9cc
 7707 1233 510A0000 		.4byte	0xa51
 7708 1237 02       		.uleb128 0x2
 7709 1238 91       		.byte	0x91
 7710 1239 6C       		.sleb128 -20
 7711 123a 28       		.uleb128 0x28
 7712 123b F5130000 		.4byte	.LASF1404
 7713 123f 01       		.byte	0x1
 7714 1240 CE09     		.2byte	0x9ce
 7715 1242 39090000 		.4byte	0x939
 7716 1246 02       		.uleb128 0x2
 7717 1247 91       		.byte	0x91
 7718 1248 74       		.sleb128 -12
 7719 1249 28       		.uleb128 0x28
 7720 124a C2AA0000 		.4byte	.LASF1407
 7721 124e 01       		.byte	0x1
 7722 124f CF09     		.2byte	0x9cf
 7723 1251 580C0000 		.4byte	0xc58
 7724 1255 02       		.uleb128 0x2
 7725 1256 91       		.byte	0x91
 7726 1257 70       		.sleb128 -16
 7727 1258 00       		.byte	0
 7728 1259 34       		.uleb128 0x34
 7729 125a 6C480000 		.4byte	.LASF1475
 7730 125e 01       		.byte	0x1
 7731 125f C409     		.2byte	0x9c4
 7732 1261 00000000 		.4byte	.LFB27
 7733 1265 18000000 		.4byte	.LFE27-.LFB27
 7734 1269 01       		.uleb128 0x1
 7735 126a 9C       		.byte	0x9c
 7736 126b 29       		.uleb128 0x29
 7737 126c 724E0000 		.4byte	.LASF1445
 7738 1270 01       		.byte	0x1
 7739 1271 9309     		.2byte	0x993
ARM GAS  /tmp/ccTV2SzP.s 			page 204


 7740 1273 29090000 		.4byte	0x929
 7741 1277 00000000 		.4byte	.LFB26
 7742 127b A0000000 		.4byte	.LFE26-.LFB26
 7743 127f 01       		.uleb128 0x1
 7744 1280 9C       		.byte	0x9c
 7745 1281 CC120000 		.4byte	0x12cc
 7746 1285 2A       		.uleb128 0x2a
 7747 1286 ED460000 		.4byte	.LASF1446
 7748 128a 01       		.byte	0x1
 7749 128b 9309     		.2byte	0x993
 7750 128d D2120000 		.4byte	0x12d2
 7751 1291 02       		.uleb128 0x2
 7752 1292 91       		.byte	0x91
 7753 1293 6C       		.sleb128 -20
 7754 1294 2A       		.uleb128 0x2a
 7755 1295 1B210000 		.4byte	.LASF1447
 7756 1299 01       		.byte	0x1
 7757 129a 9309     		.2byte	0x993
 7758 129c DD120000 		.4byte	0x12dd
 7759 12a0 02       		.uleb128 0x2
 7760 12a1 91       		.byte	0x91
 7761 12a2 68       		.sleb128 -24
 7762 12a3 28       		.uleb128 0x28
 7763 12a4 BC2A0000 		.4byte	.LASF1408
 7764 12a8 01       		.byte	0x1
 7765 12a9 9509     		.2byte	0x995
 7766 12ab 29090000 		.4byte	0x929
 7767 12af 02       		.uleb128 0x2
 7768 12b0 91       		.byte	0x91
 7769 12b1 74       		.sleb128 -12
 7770 12b2 31       		.uleb128 0x31
 7771 12b3 26000000 		.4byte	.LBB14
 7772 12b7 64000000 		.4byte	.LBE14-.LBB14
 7773 12bb 28       		.uleb128 0x28
 7774 12bc 016E0000 		.4byte	.LASF1448
 7775 12c0 01       		.byte	0x1
 7776 12c1 9D09     		.2byte	0x99d
 7777 12c3 69090000 		.4byte	0x969
 7778 12c7 02       		.uleb128 0x2
 7779 12c8 91       		.byte	0x91
 7780 12c9 70       		.sleb128 -16
 7781 12ca 00       		.byte	0
 7782 12cb 00       		.byte	0
 7783 12cc 0E       		.uleb128 0xe
 7784 12cd 04       		.byte	0x4
 7785 12ce BD0A0000 		.4byte	0xabd
 7786 12d2 0D       		.uleb128 0xd
 7787 12d3 CC120000 		.4byte	0x12cc
 7788 12d7 0E       		.uleb128 0xe
 7789 12d8 04       		.byte	0x4
 7790 12d9 59090000 		.4byte	0x959
 7791 12dd 0D       		.uleb128 0xd
 7792 12de D7120000 		.4byte	0x12d7
 7793 12e2 2B       		.uleb128 0x2b
 7794 12e3 D0490000 		.4byte	.LASF1449
 7795 12e7 01       		.byte	0x1
 7796 12e8 8B09     		.2byte	0x98b
ARM GAS  /tmp/ccTV2SzP.s 			page 205


 7797 12ea 00000000 		.4byte	.LFB25
 7798 12ee 34000000 		.4byte	.LFE25-.LFB25
 7799 12f2 01       		.uleb128 0x1
 7800 12f3 9C       		.byte	0x9c
 7801 12f4 08130000 		.4byte	0x1308
 7802 12f8 2A       		.uleb128 0x2a
 7803 12f9 ED460000 		.4byte	.LASF1446
 7804 12fd 01       		.byte	0x1
 7805 12fe 8B09     		.2byte	0x98b
 7806 1300 D2120000 		.4byte	0x12d2
 7807 1304 02       		.uleb128 0x2
 7808 1305 91       		.byte	0x91
 7809 1306 74       		.sleb128 -12
 7810 1307 00       		.byte	0
 7811 1308 29       		.uleb128 0x29
 7812 1309 3FA60000 		.4byte	.LASF1450
 7813 130d 01       		.byte	0x1
 7814 130e 5E09     		.2byte	0x95e
 7815 1310 29090000 		.4byte	0x929
 7816 1314 00000000 		.4byte	.LFB24
 7817 1318 B0000000 		.4byte	.LFE24-.LFB24
 7818 131c 01       		.uleb128 0x1
 7819 131d 9C       		.byte	0x9c
 7820 131e 5F130000 		.4byte	0x135f
 7821 1322 2A       		.uleb128 0x2a
 7822 1323 BA770000 		.4byte	.LASF1451
 7823 1327 01       		.byte	0x1
 7824 1328 5E09     		.2byte	0x95e
 7825 132a 3B0A0000 		.4byte	0xa3b
 7826 132e 02       		.uleb128 0x2
 7827 132f 91       		.byte	0x91
 7828 1330 6C       		.sleb128 -20
 7829 1331 2A       		.uleb128 0x2a
 7830 1332 A3AA0000 		.4byte	.LASF1335
 7831 1336 01       		.byte	0x1
 7832 1337 5E09     		.2byte	0x95e
 7833 1339 69090000 		.4byte	0x969
 7834 133d 02       		.uleb128 0x2
 7835 133e 91       		.byte	0x91
 7836 133f 68       		.sleb128 -24
 7837 1340 28       		.uleb128 0x28
 7838 1341 B9650000 		.4byte	.LASF1452
 7839 1345 01       		.byte	0x1
 7840 1346 6009     		.2byte	0x960
 7841 1348 580C0000 		.4byte	0xc58
 7842 134c 02       		.uleb128 0x2
 7843 134d 91       		.byte	0x91
 7844 134e 70       		.sleb128 -16
 7845 134f 28       		.uleb128 0x28
 7846 1350 BC2A0000 		.4byte	.LASF1408
 7847 1354 01       		.byte	0x1
 7848 1355 6109     		.2byte	0x961
 7849 1357 29090000 		.4byte	0x929
 7850 135b 02       		.uleb128 0x2
 7851 135c 91       		.byte	0x91
 7852 135d 74       		.sleb128 -12
 7853 135e 00       		.byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 206


 7854 135f 29       		.uleb128 0x29
 7855 1360 3B2F0000 		.4byte	.LASF1453
 7856 1364 01       		.byte	0x1
 7857 1365 2809     		.2byte	0x928
 7858 1367 29090000 		.4byte	0x929
 7859 136b 00000000 		.4byte	.LFB23
 7860 136f B4000000 		.4byte	.LFE23-.LFB23
 7861 1373 01       		.uleb128 0x1
 7862 1374 9C       		.byte	0x9c
 7863 1375 A7130000 		.4byte	0x13a7
 7864 1379 2A       		.uleb128 0x2a
 7865 137a 3F480000 		.4byte	.LASF1454
 7866 137e 01       		.byte	0x1
 7867 137f 2809     		.2byte	0x928
 7868 1381 AD130000 		.4byte	0x13ad
 7869 1385 02       		.uleb128 0x2
 7870 1386 91       		.byte	0x91
 7871 1387 6C       		.sleb128 -20
 7872 1388 28       		.uleb128 0x28
 7873 1389 B9650000 		.4byte	.LASF1452
 7874 138d 01       		.byte	0x1
 7875 138e 2A09     		.2byte	0x92a
 7876 1390 580C0000 		.4byte	0xc58
 7877 1394 02       		.uleb128 0x2
 7878 1395 91       		.byte	0x91
 7879 1396 70       		.sleb128 -16
 7880 1397 28       		.uleb128 0x28
 7881 1398 BC2A0000 		.4byte	.LASF1408
 7882 139c 01       		.byte	0x1
 7883 139d 2B09     		.2byte	0x92b
 7884 139f 29090000 		.4byte	0x929
 7885 13a3 02       		.uleb128 0x2
 7886 13a4 91       		.byte	0x91
 7887 13a5 74       		.sleb128 -12
 7888 13a6 00       		.byte	0
 7889 13a7 0E       		.uleb128 0xe
 7890 13a8 04       		.byte	0x4
 7891 13a9 4C0A0000 		.4byte	0xa4c
 7892 13ad 0D       		.uleb128 0xd
 7893 13ae A7130000 		.4byte	0x13a7
 7894 13b2 2B       		.uleb128 0x2b
 7895 13b3 168D0000 		.4byte	.LASF1455
 7896 13b7 01       		.byte	0x1
 7897 13b8 B908     		.2byte	0x8b9
 7898 13ba 00000000 		.4byte	.LFB22
 7899 13be B0000000 		.4byte	.LFE22-.LFB22
 7900 13c2 01       		.uleb128 0x1
 7901 13c3 9C       		.byte	0x9c
 7902 13c4 05140000 		.4byte	0x1405
 7903 13c8 2A       		.uleb128 0x2a
 7904 13c9 3F480000 		.4byte	.LASF1454
 7905 13cd 01       		.byte	0x1
 7906 13ce B908     		.2byte	0x8b9
 7907 13d0 BC0C0000 		.4byte	0xcbc
 7908 13d4 02       		.uleb128 0x2
 7909 13d5 91       		.byte	0x91
 7910 13d6 6C       		.sleb128 -20
ARM GAS  /tmp/ccTV2SzP.s 			page 207


 7911 13d7 2A       		.uleb128 0x2a
 7912 13d8 A3AA0000 		.4byte	.LASF1335
 7913 13dc 01       		.byte	0x1
 7914 13dd B908     		.2byte	0x8b9
 7915 13df 69090000 		.4byte	0x969
 7916 13e3 02       		.uleb128 0x2
 7917 13e4 91       		.byte	0x91
 7918 13e5 68       		.sleb128 -24
 7919 13e6 2A       		.uleb128 0x2a
 7920 13e7 2C6B0000 		.4byte	.LASF1456
 7921 13eb 01       		.byte	0x1
 7922 13ec B908     		.2byte	0x8b9
 7923 13ee 69090000 		.4byte	0x969
 7924 13f2 02       		.uleb128 0x2
 7925 13f3 91       		.byte	0x91
 7926 13f4 64       		.sleb128 -28
 7927 13f5 28       		.uleb128 0x28
 7928 13f6 10160000 		.4byte	.LASF1432
 7929 13fa 01       		.byte	0x1
 7930 13fb BB08     		.2byte	0x8bb
 7931 13fd 59090000 		.4byte	0x959
 7932 1401 02       		.uleb128 0x2
 7933 1402 91       		.byte	0x91
 7934 1403 74       		.sleb128 -12
 7935 1404 00       		.byte	0
 7936 1405 2B       		.uleb128 0x2b
 7937 1406 D0540000 		.4byte	.LASF1457
 7938 140a 01       		.byte	0x1
 7939 140b 7E08     		.2byte	0x87e
 7940 140d 00000000 		.4byte	.LFB21
 7941 1411 90000000 		.4byte	.LFE21-.LFB21
 7942 1415 01       		.uleb128 0x1
 7943 1416 9C       		.byte	0x9c
 7944 1417 49140000 		.4byte	0x1449
 7945 141b 2A       		.uleb128 0x2a
 7946 141c 3F480000 		.4byte	.LASF1454
 7947 1420 01       		.byte	0x1
 7948 1421 7E08     		.2byte	0x87e
 7949 1423 C70C0000 		.4byte	0xcc7
 7950 1427 02       		.uleb128 0x2
 7951 1428 91       		.byte	0x91
 7952 1429 6C       		.sleb128 -20
 7953 142a 2A       		.uleb128 0x2a
 7954 142b 2C6B0000 		.4byte	.LASF1456
 7955 142f 01       		.byte	0x1
 7956 1430 7E08     		.2byte	0x87e
 7957 1432 69090000 		.4byte	0x969
 7958 1436 02       		.uleb128 0x2
 7959 1437 91       		.byte	0x91
 7960 1438 68       		.sleb128 -24
 7961 1439 28       		.uleb128 0x28
 7962 143a 10160000 		.4byte	.LASF1432
 7963 143e 01       		.byte	0x1
 7964 143f 8008     		.2byte	0x880
 7965 1441 59090000 		.4byte	0x959
 7966 1445 02       		.uleb128 0x2
 7967 1446 91       		.byte	0x91
ARM GAS  /tmp/ccTV2SzP.s 			page 208


 7968 1447 74       		.sleb128 -12
 7969 1448 00       		.byte	0
 7970 1449 2B       		.uleb128 0x2b
 7971 144a 063F0000 		.4byte	.LASF1458
 7972 144e 01       		.byte	0x1
 7973 144f 4208     		.2byte	0x842
 7974 1451 00000000 		.4byte	.LFB20
 7975 1455 A4000000 		.4byte	.LFE20-.LFB20
 7976 1459 01       		.uleb128 0x1
 7977 145a 9C       		.byte	0x9c
 7978 145b C1140000 		.4byte	0x14c1
 7979 145f 31       		.uleb128 0x31
 7980 1460 1C000000 		.4byte	.LBB10
 7981 1464 6A000000 		.4byte	.LBE10-.LBB10
 7982 1468 28       		.uleb128 0x28
 7983 1469 13760000 		.4byte	.LASF1459
 7984 146d 01       		.byte	0x1
 7985 146e 7008     		.2byte	0x870
 7986 1470 39090000 		.4byte	0x939
 7987 1474 02       		.uleb128 0x2
 7988 1475 91       		.byte	0x91
 7989 1476 74       		.sleb128 -12
 7990 1477 30       		.uleb128 0x30
 7991 1478 4C000000 		.4byte	.LBB13
 7992 147c 3A000000 		.4byte	.LBE13-.LBB13
 7993 1480 94140000 		.4byte	0x1494
 7994 1484 28       		.uleb128 0x28
 7995 1485 A8400000 		.4byte	.LASF1426
 7996 1489 01       		.byte	0x1
 7997 148a 7008     		.2byte	0x870
 7998 148c C70C0000 		.4byte	0xcc7
 7999 1490 02       		.uleb128 0x2
 8000 1491 91       		.byte	0x91
 8001 1492 70       		.sleb128 -16
 8002 1493 00       		.byte	0
 8003 1494 35       		.uleb128 0x35
 8004 1495 3E1A0000 		.4byte	0x1a3e
 8005 1499 22000000 		.4byte	.LBB11
 8006 149d 0A000000 		.4byte	.LBE11-.LBB11
 8007 14a1 01       		.byte	0x1
 8008 14a2 7008     		.2byte	0x870
 8009 14a4 36       		.uleb128 0x36
 8010 14a5 4A1A0000 		.4byte	0x1a4a
 8011 14a9 02       		.uleb128 0x2
 8012 14aa 91       		.byte	0x91
 8013 14ab 6C       		.sleb128 -20
 8014 14ac 31       		.uleb128 0x31
 8015 14ad 22000000 		.4byte	.LBB12
 8016 14b1 0A000000 		.4byte	.LBE12-.LBB12
 8017 14b5 37       		.uleb128 0x37
 8018 14b6 551A0000 		.4byte	0x1a55
 8019 14ba 02       		.uleb128 0x2
 8020 14bb 91       		.byte	0x91
 8021 14bc 6B       		.sleb128 -21
 8022 14bd 00       		.byte	0
 8023 14be 00       		.byte	0
 8024 14bf 00       		.byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 209


 8025 14c0 00       		.byte	0
 8026 14c1 29       		.uleb128 0x29
 8027 14c2 E9790000 		.4byte	.LASF1460
 8028 14c6 01       		.byte	0x1
 8029 14c7 3A07     		.2byte	0x73a
 8030 14c9 29090000 		.4byte	0x929
 8031 14cd 00000000 		.4byte	.LFB19
 8032 14d1 7C010000 		.4byte	.LFE19-.LFB19
 8033 14d5 01       		.uleb128 0x1
 8034 14d6 9C       		.byte	0x9c
 8035 14d7 3B150000 		.4byte	0x153b
 8036 14db 28       		.uleb128 0x28
 8037 14dc C2AA0000 		.4byte	.LASF1407
 8038 14e0 01       		.byte	0x1
 8039 14e1 3C07     		.2byte	0x73c
 8040 14e3 580C0000 		.4byte	0xc58
 8041 14e7 02       		.uleb128 0x2
 8042 14e8 91       		.byte	0x91
 8043 14e9 68       		.sleb128 -24
 8044 14ea 28       		.uleb128 0x28
 8045 14eb A3AA0000 		.4byte	.LASF1335
 8046 14ef 01       		.byte	0x1
 8047 14f0 3D07     		.2byte	0x73d
 8048 14f2 59090000 		.4byte	0x959
 8049 14f6 02       		.uleb128 0x2
 8050 14f7 91       		.byte	0x91
 8051 14f8 64       		.sleb128 -28
 8052 14f9 28       		.uleb128 0x28
 8053 14fa AA7E0000 		.4byte	.LASF1461
 8054 14fe 01       		.byte	0x1
 8055 14ff 3E07     		.2byte	0x73e
 8056 1501 29090000 		.4byte	0x929
 8057 1505 02       		.uleb128 0x2
 8058 1506 91       		.byte	0x91
 8059 1507 74       		.sleb128 -12
 8060 1508 31       		.uleb128 0x31
 8061 1509 1E000000 		.4byte	.LBB8
 8062 150d E4000000 		.4byte	.LBE8-.LBB8
 8063 1511 28       		.uleb128 0x28
 8064 1512 016E0000 		.4byte	.LASF1448
 8065 1516 01       		.byte	0x1
 8066 1517 4D07     		.2byte	0x74d
 8067 1519 69090000 		.4byte	0x969
 8068 151d 02       		.uleb128 0x2
 8069 151e 91       		.byte	0x91
 8070 151f 70       		.sleb128 -16
 8071 1520 31       		.uleb128 0x31
 8072 1521 2A000000 		.4byte	.LBB9
 8073 1525 32000000 		.4byte	.LBE9-.LBB9
 8074 1529 28       		.uleb128 0x28
 8075 152a 7E840000 		.4byte	.LASF1462
 8076 152e 01       		.byte	0x1
 8077 152f 5107     		.2byte	0x751
 8078 1531 BC0C0000 		.4byte	0xcbc
 8079 1535 02       		.uleb128 0x2
 8080 1536 91       		.byte	0x91
 8081 1537 6C       		.sleb128 -20
ARM GAS  /tmp/ccTV2SzP.s 			page 210


 8082 1538 00       		.byte	0
 8083 1539 00       		.byte	0
 8084 153a 00       		.byte	0
 8085 153b 29       		.uleb128 0x29
 8086 153c A99A0000 		.4byte	.LASF1463
 8087 1540 01       		.byte	0x1
 8088 1541 D206     		.2byte	0x6d2
 8089 1543 39090000 		.4byte	0x939
 8090 1547 00000000 		.4byte	.LFB18
 8091 154b F4000000 		.4byte	.LFE18-.LFB18
 8092 154f 01       		.uleb128 0x1
 8093 1550 9C       		.byte	0x9c
 8094 1551 A1150000 		.4byte	0x15a1
 8095 1555 2A       		.uleb128 0x2a
 8096 1556 4C760000 		.4byte	.LASF1420
 8097 155a 01       		.byte	0x1
 8098 155b D206     		.2byte	0x6d2
 8099 155d 45100000 		.4byte	0x1045
 8100 1561 02       		.uleb128 0x2
 8101 1562 91       		.byte	0x91
 8102 1563 6C       		.sleb128 -20
 8103 1564 2A       		.uleb128 0x2a
 8104 1565 9C400000 		.4byte	.LASF1464
 8105 1569 01       		.byte	0x1
 8106 156a D206     		.2byte	0x6d2
 8107 156c 49090000 		.4byte	0x949
 8108 1570 02       		.uleb128 0x2
 8109 1571 91       		.byte	0x91
 8110 1572 68       		.sleb128 -24
 8111 1573 2A       		.uleb128 0x2a
 8112 1574 170A0000 		.4byte	.LASF1465
 8113 1578 01       		.byte	0x1
 8114 1579 D206     		.2byte	0x6d2
 8115 157b A7150000 		.4byte	0x15a7
 8116 157f 02       		.uleb128 0x2
 8117 1580 91       		.byte	0x91
 8118 1581 64       		.sleb128 -28
 8119 1582 28       		.uleb128 0x28
 8120 1583 FD990000 		.4byte	.LASF1425
 8121 1587 01       		.byte	0x1
 8122 1588 D406     		.2byte	0x6d4
 8123 158a 39090000 		.4byte	0x939
 8124 158e 02       		.uleb128 0x2
 8125 158f 91       		.byte	0x91
 8126 1590 74       		.sleb128 -12
 8127 1591 28       		.uleb128 0x28
 8128 1592 F2910000 		.4byte	.LASF1466
 8129 1596 01       		.byte	0x1
 8130 1597 D406     		.2byte	0x6d4
 8131 1599 39090000 		.4byte	0x939
 8132 159d 02       		.uleb128 0x2
 8133 159e 91       		.byte	0x91
 8134 159f 70       		.sleb128 -16
 8135 15a0 00       		.byte	0
 8136 15a1 0E       		.uleb128 0xe
 8137 15a2 04       		.byte	0x4
 8138 15a3 E7080000 		.4byte	0x8e7
ARM GAS  /tmp/ccTV2SzP.s 			page 211


 8139 15a7 0D       		.uleb128 0xd
 8140 15a8 A1150000 		.4byte	0x15a1
 8141 15ac 26       		.uleb128 0x26
 8142 15ad 050F0000 		.4byte	.LASF1468
 8143 15b1 01       		.byte	0x1
 8144 15b2 B906     		.2byte	0x6b9
 8145 15b4 39090000 		.4byte	0x939
 8146 15b8 00000000 		.4byte	.LFB17
 8147 15bc 14000000 		.4byte	.LFE17-.LFB17
 8148 15c0 01       		.uleb128 0x1
 8149 15c1 9C       		.byte	0x9c
 8150 15c2 29       		.uleb128 0x29
 8151 15c3 8F490000 		.4byte	.LASF1469
 8152 15c7 01       		.byte	0x1
 8153 15c8 9A06     		.2byte	0x69a
 8154 15ca 59090000 		.4byte	0x959
 8155 15ce 00000000 		.4byte	.LFB16
 8156 15d2 2C000000 		.4byte	.LFE16-.LFB16
 8157 15d6 01       		.uleb128 0x1
 8158 15d7 9C       		.byte	0x9c
 8159 15d8 FB150000 		.4byte	0x15fb
 8160 15dc 28       		.uleb128 0x28
 8161 15dd BC2A0000 		.4byte	.LASF1408
 8162 15e1 01       		.byte	0x1
 8163 15e2 9C06     		.2byte	0x69c
 8164 15e4 59090000 		.4byte	0x959
 8165 15e8 02       		.uleb128 0x2
 8166 15e9 91       		.byte	0x91
 8167 15ea 70       		.sleb128 -16
 8168 15eb 28       		.uleb128 0x28
 8169 15ec 88570000 		.4byte	.LASF1470
 8170 15f0 01       		.byte	0x1
 8171 15f1 9D06     		.2byte	0x69d
 8172 15f3 39090000 		.4byte	0x939
 8173 15f7 02       		.uleb128 0x2
 8174 15f8 91       		.byte	0x91
 8175 15f9 74       		.sleb128 -12
 8176 15fa 00       		.byte	0
 8177 15fb 29       		.uleb128 0x29
 8178 15fc 421D0000 		.4byte	.LASF1471
 8179 1600 01       		.byte	0x1
 8180 1601 8B06     		.2byte	0x68b
 8181 1603 59090000 		.4byte	0x959
 8182 1607 00000000 		.4byte	.LFB15
 8183 160b 24000000 		.4byte	.LFE15-.LFB15
 8184 160f 01       		.uleb128 0x1
 8185 1610 9C       		.byte	0x9c
 8186 1611 25160000 		.4byte	0x1625
 8187 1615 28       		.uleb128 0x28
 8188 1616 33450000 		.4byte	.LASF1472
 8189 161a 01       		.byte	0x1
 8190 161b 8D06     		.2byte	0x68d
 8191 161d 59090000 		.4byte	0x959
 8192 1621 02       		.uleb128 0x2
 8193 1622 91       		.byte	0x91
 8194 1623 74       		.sleb128 -12
 8195 1624 00       		.byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 212


 8196 1625 29       		.uleb128 0x29
 8197 1626 A76B0000 		.4byte	.LASF1473
 8198 162a 01       		.byte	0x1
 8199 162b 2E06     		.2byte	0x62e
 8200 162d 29090000 		.4byte	0x929
 8201 1631 00000000 		.4byte	.LFB14
 8202 1635 08010000 		.4byte	.LFE14-.LFB14
 8203 1639 01       		.uleb128 0x1
 8204 163a 9C       		.byte	0x9c
 8205 163b 5E160000 		.4byte	0x165e
 8206 163f 28       		.uleb128 0x28
 8207 1640 C2AA0000 		.4byte	.LASF1407
 8208 1644 01       		.byte	0x1
 8209 1645 3006     		.2byte	0x630
 8210 1647 580C0000 		.4byte	0xc58
 8211 164b 02       		.uleb128 0x2
 8212 164c 91       		.byte	0x91
 8213 164d 70       		.sleb128 -16
 8214 164e 28       		.uleb128 0x28
 8215 164f F4810000 		.4byte	.LASF1474
 8216 1653 01       		.byte	0x1
 8217 1654 3106     		.2byte	0x631
 8218 1656 29090000 		.4byte	0x929
 8219 165a 02       		.uleb128 0x2
 8220 165b 91       		.byte	0x91
 8221 165c 74       		.sleb128 -12
 8222 165d 00       		.byte	0
 8223 165e 34       		.uleb128 0x34
 8224 165f B7450000 		.4byte	.LASF1476
 8225 1663 01       		.byte	0x1
 8226 1664 0806     		.2byte	0x608
 8227 1666 00000000 		.4byte	.LFB13
 8228 166a 1C000000 		.4byte	.LFE13-.LFB13
 8229 166e 01       		.uleb128 0x1
 8230 166f 9C       		.byte	0x9c
 8231 1670 38       		.uleb128 0x38
 8232 1671 277C0000 		.4byte	.LASF1477
 8233 1675 01       		.byte	0x1
 8234 1676 FD05     		.2byte	0x5fd
 8235 1678 00000000 		.4byte	.LFB12
 8236 167c 1C000000 		.4byte	.LFE12-.LFB12
 8237 1680 01       		.uleb128 0x1
 8238 1681 9C       		.byte	0x9c
 8239 1682 2B       		.uleb128 0x2b
 8240 1683 B2620000 		.4byte	.LASF1478
 8241 1687 01       		.byte	0x1
 8242 1688 AF05     		.2byte	0x5af
 8243 168a 00000000 		.4byte	.LFB11
 8244 168e 68000000 		.4byte	.LFE11-.LFB11
 8245 1692 01       		.uleb128 0x1
 8246 1693 9C       		.byte	0x9c
 8247 1694 A8160000 		.4byte	0x16a8
 8248 1698 28       		.uleb128 0x28
 8249 1699 BC2A0000 		.4byte	.LASF1408
 8250 169d 01       		.byte	0x1
 8251 169e B105     		.2byte	0x5b1
 8252 16a0 29090000 		.4byte	0x929
ARM GAS  /tmp/ccTV2SzP.s 			page 213


 8253 16a4 02       		.uleb128 0x2
 8254 16a5 91       		.byte	0x91
 8255 16a6 74       		.sleb128 -12
 8256 16a7 00       		.byte	0
 8257 16a8 29       		.uleb128 0x29
 8258 16a9 69380000 		.4byte	.LASF1479
 8259 16ad 01       		.byte	0x1
 8260 16ae 6905     		.2byte	0x569
 8261 16b0 29090000 		.4byte	0x929
 8262 16b4 00000000 		.4byte	.LFB10
 8263 16b8 B8000000 		.4byte	.LFE10-.LFB10
 8264 16bc 01       		.uleb128 0x1
 8265 16bd 9C       		.byte	0x9c
 8266 16be FF160000 		.4byte	0x16ff
 8267 16c2 2A       		.uleb128 0x2a
 8268 16c3 C7410000 		.4byte	.LASF1480
 8269 16c7 01       		.byte	0x1
 8270 16c8 6905     		.2byte	0x569
 8271 16ca 510A0000 		.4byte	0xa51
 8272 16ce 02       		.uleb128 0x2
 8273 16cf 91       		.byte	0x91
 8274 16d0 64       		.sleb128 -28
 8275 16d1 28       		.uleb128 0x28
 8276 16d2 14590000 		.4byte	.LASF1481
 8277 16d6 01       		.byte	0x1
 8278 16d7 6B05     		.2byte	0x56b
 8279 16d9 29090000 		.4byte	0x929
 8280 16dd 02       		.uleb128 0x2
 8281 16de 91       		.byte	0x91
 8282 16df 74       		.sleb128 -12
 8283 16e0 28       		.uleb128 0x28
 8284 16e1 C2AA0000 		.4byte	.LASF1407
 8285 16e5 01       		.byte	0x1
 8286 16e6 6C05     		.2byte	0x56c
 8287 16e8 630C0000 		.4byte	0xc63
 8288 16ec 02       		.uleb128 0x2
 8289 16ed 91       		.byte	0x91
 8290 16ee 70       		.sleb128 -16
 8291 16ef 28       		.uleb128 0x28
 8292 16f0 88570000 		.4byte	.LASF1470
 8293 16f4 01       		.byte	0x1
 8294 16f5 6D05     		.2byte	0x56d
 8295 16f7 39090000 		.4byte	0x939
 8296 16fb 02       		.uleb128 0x2
 8297 16fc 91       		.byte	0x91
 8298 16fd 6C       		.sleb128 -20
 8299 16fe 00       		.byte	0
 8300 16ff 2B       		.uleb128 0x2b
 8301 1700 037C0000 		.4byte	.LASF1482
 8302 1704 01       		.byte	0x1
 8303 1705 3305     		.2byte	0x533
 8304 1707 00000000 		.4byte	.LFB9
 8305 170b 9C000000 		.4byte	.LFE9-.LFB9
 8306 170f 01       		.uleb128 0x1
 8307 1710 9C       		.byte	0x9c
 8308 1711 34170000 		.4byte	0x1734
 8309 1715 2A       		.uleb128 0x2a
ARM GAS  /tmp/ccTV2SzP.s 			page 214


 8310 1716 C7410000 		.4byte	.LASF1480
 8311 171a 01       		.byte	0x1
 8312 171b 3305     		.2byte	0x533
 8313 171d 510A0000 		.4byte	0xa51
 8314 1721 02       		.uleb128 0x2
 8315 1722 91       		.byte	0x91
 8316 1723 6C       		.sleb128 -20
 8317 1724 28       		.uleb128 0x28
 8318 1725 C2AA0000 		.4byte	.LASF1407
 8319 1729 01       		.byte	0x1
 8320 172a 3505     		.2byte	0x535
 8321 172c 630C0000 		.4byte	0xc63
 8322 1730 02       		.uleb128 0x2
 8323 1731 91       		.byte	0x91
 8324 1732 74       		.sleb128 -12
 8325 1733 00       		.byte	0
 8326 1734 2F       		.uleb128 0x2f
 8327 1735 FB2E0000 		.4byte	.LASF1483
 8328 1739 01       		.byte	0x1
 8329 173a 0505     		.2byte	0x505
 8330 173c 29090000 		.4byte	0x929
 8331 1740 00000000 		.4byte	.LFB8
 8332 1744 64000000 		.4byte	.LFE8-.LFB8
 8333 1748 01       		.uleb128 0x1
 8334 1749 9C       		.byte	0x9c
 8335 174a 7C170000 		.4byte	0x177c
 8336 174e 2A       		.uleb128 0x2a
 8337 174f 78130000 		.4byte	.LASF1414
 8338 1753 01       		.byte	0x1
 8339 1754 0505     		.2byte	0x505
 8340 1756 5C0A0000 		.4byte	0xa5c
 8341 175a 02       		.uleb128 0x2
 8342 175b 91       		.byte	0x91
 8343 175c 6C       		.sleb128 -20
 8344 175d 28       		.uleb128 0x28
 8345 175e BC2A0000 		.4byte	.LASF1408
 8346 1762 01       		.byte	0x1
 8347 1763 0705     		.2byte	0x507
 8348 1765 29090000 		.4byte	0x929
 8349 1769 02       		.uleb128 0x2
 8350 176a 91       		.byte	0x91
 8351 176b 74       		.sleb128 -12
 8352 176c 28       		.uleb128 0x28
 8353 176d C2AA0000 		.4byte	.LASF1407
 8354 1771 01       		.byte	0x1
 8355 1772 0805     		.2byte	0x508
 8356 1774 82170000 		.4byte	0x1782
 8357 1778 02       		.uleb128 0x2
 8358 1779 91       		.byte	0x91
 8359 177a 70       		.sleb128 -16
 8360 177b 00       		.byte	0
 8361 177c 0E       		.uleb128 0xe
 8362 177d 04       		.byte	0x4
 8363 177e 420C0000 		.4byte	0xc42
 8364 1782 0D       		.uleb128 0xd
 8365 1783 7C170000 		.4byte	0x177c
 8366 1787 2B       		.uleb128 0x2b
ARM GAS  /tmp/ccTV2SzP.s 			page 215


 8367 1788 01720000 		.4byte	.LASF1484
 8368 178c 01       		.byte	0x1
 8369 178d AC04     		.2byte	0x4ac
 8370 178f 00000000 		.4byte	.LFB7
 8371 1793 F4000000 		.4byte	.LFE7-.LFB7
 8372 1797 01       		.uleb128 0x1
 8373 1798 9C       		.byte	0x9c
 8374 1799 BC170000 		.4byte	0x17bc
 8375 179d 2A       		.uleb128 0x2a
 8376 179e D5120000 		.4byte	.LASF1485
 8377 17a2 01       		.byte	0x1
 8378 17a3 AC04     		.2byte	0x4ac
 8379 17a5 510A0000 		.4byte	0xa51
 8380 17a9 02       		.uleb128 0x2
 8381 17aa 91       		.byte	0x91
 8382 17ab 6C       		.sleb128 -20
 8383 17ac 28       		.uleb128 0x28
 8384 17ad C2AA0000 		.4byte	.LASF1407
 8385 17b1 01       		.byte	0x1
 8386 17b2 AE04     		.2byte	0x4ae
 8387 17b4 580C0000 		.4byte	0xc58
 8388 17b8 02       		.uleb128 0x2
 8389 17b9 91       		.byte	0x91
 8390 17ba 74       		.sleb128 -12
 8391 17bb 00       		.byte	0
 8392 17bc 2B       		.uleb128 0x2b
 8393 17bd 968C0000 		.4byte	.LASF1486
 8394 17c1 01       		.byte	0x1
 8395 17c2 0804     		.2byte	0x408
 8396 17c4 00000000 		.4byte	.LFB6
 8397 17c8 3C010000 		.4byte	.LFE6-.LFB6
 8398 17cc 01       		.uleb128 0x1
 8399 17cd 9C       		.byte	0x9c
 8400 17ce 2D180000 		.4byte	0x182d
 8401 17d2 2A       		.uleb128 0x2a
 8402 17d3 78130000 		.4byte	.LASF1414
 8403 17d7 01       		.byte	0x1
 8404 17d8 0804     		.2byte	0x408
 8405 17da 510A0000 		.4byte	0xa51
 8406 17de 02       		.uleb128 0x2
 8407 17df 91       		.byte	0x91
 8408 17e0 64       		.sleb128 -28
 8409 17e1 2A       		.uleb128 0x2a
 8410 17e2 66780000 		.4byte	.LASF1487
 8411 17e6 01       		.byte	0x1
 8412 17e7 0804     		.2byte	0x408
 8413 17e9 39090000 		.4byte	0x939
 8414 17ed 02       		.uleb128 0x2
 8415 17ee 91       		.byte	0x91
 8416 17ef 60       		.sleb128 -32
 8417 17f0 28       		.uleb128 0x28
 8418 17f1 C2AA0000 		.4byte	.LASF1407
 8419 17f5 01       		.byte	0x1
 8420 17f6 0A04     		.2byte	0x40a
 8421 17f8 580C0000 		.4byte	0xc58
 8422 17fc 02       		.uleb128 0x2
 8423 17fd 91       		.byte	0x91
ARM GAS  /tmp/ccTV2SzP.s 			page 216


 8424 17fe 70       		.sleb128 -16
 8425 17ff 28       		.uleb128 0x28
 8426 1800 EF190000 		.4byte	.LASF1488
 8427 1804 01       		.byte	0x1
 8428 1805 0B04     		.2byte	0x40b
 8429 1807 39090000 		.4byte	0x939
 8430 180b 02       		.uleb128 0x2
 8431 180c 91       		.byte	0x91
 8432 180d 6C       		.sleb128 -20
 8433 180e 28       		.uleb128 0x28
 8434 180f 52720000 		.4byte	.LASF1489
 8435 1813 01       		.byte	0x1
 8436 1814 0B04     		.2byte	0x40b
 8437 1816 39090000 		.4byte	0x939
 8438 181a 02       		.uleb128 0x2
 8439 181b 91       		.byte	0x91
 8440 181c 68       		.sleb128 -24
 8441 181d 28       		.uleb128 0x28
 8442 181e 14590000 		.4byte	.LASF1481
 8443 1822 01       		.byte	0x1
 8444 1823 0C04     		.2byte	0x40c
 8445 1825 29090000 		.4byte	0x929
 8446 1829 02       		.uleb128 0x2
 8447 182a 91       		.byte	0x91
 8448 182b 74       		.sleb128 -12
 8449 182c 00       		.byte	0
 8450 182d 29       		.uleb128 0x29
 8451 182e 746F0000 		.4byte	.LASF1490
 8452 1832 01       		.byte	0x1
 8453 1833 F203     		.2byte	0x3f2
 8454 1835 39090000 		.4byte	0x939
 8455 1839 00000000 		.4byte	.LFB5
 8456 183d 34000000 		.4byte	.LFE5-.LFB5
 8457 1841 01       		.uleb128 0x1
 8458 1842 9C       		.byte	0x9c
 8459 1843 75180000 		.4byte	0x1875
 8460 1847 2A       		.uleb128 0x2a
 8461 1848 78130000 		.4byte	.LASF1414
 8462 184c 01       		.byte	0x1
 8463 184d F203     		.2byte	0x3f2
 8464 184f 510A0000 		.4byte	0xa51
 8465 1853 02       		.uleb128 0x2
 8466 1854 91       		.byte	0x91
 8467 1855 6C       		.sleb128 -20
 8468 1856 28       		.uleb128 0x28
 8469 1857 C2AA0000 		.4byte	.LASF1407
 8470 185b 01       		.byte	0x1
 8471 185c F403     		.2byte	0x3f4
 8472 185e 580C0000 		.4byte	0xc58
 8473 1862 02       		.uleb128 0x2
 8474 1863 91       		.byte	0x91
 8475 1864 74       		.sleb128 -12
 8476 1865 28       		.uleb128 0x28
 8477 1866 F5130000 		.4byte	.LASF1404
 8478 186a 01       		.byte	0x1
 8479 186b F503     		.2byte	0x3f5
 8480 186d 39090000 		.4byte	0x939
ARM GAS  /tmp/ccTV2SzP.s 			page 217


 8481 1871 02       		.uleb128 0x2
 8482 1872 91       		.byte	0x91
 8483 1873 70       		.sleb128 -16
 8484 1874 00       		.byte	0
 8485 1875 2B       		.uleb128 0x2b
 8486 1876 BB740000 		.4byte	.LASF1491
 8487 187a 01       		.byte	0x1
 8488 187b 6A03     		.2byte	0x36a
 8489 187d 00000000 		.4byte	.LFB4
 8490 1881 88000000 		.4byte	.LFE4-.LFB4
 8491 1885 01       		.uleb128 0x1
 8492 1886 9C       		.byte	0x9c
 8493 1887 B9180000 		.4byte	0x18b9
 8494 188b 2A       		.uleb128 0x2a
 8495 188c A8970000 		.4byte	.LASF1492
 8496 1890 01       		.byte	0x1
 8497 1891 6A03     		.2byte	0x36a
 8498 1893 69090000 		.4byte	0x969
 8499 1897 02       		.uleb128 0x2
 8500 1898 91       		.byte	0x91
 8501 1899 6C       		.sleb128 -20
 8502 189a 28       		.uleb128 0x28
 8503 189b 10160000 		.4byte	.LASF1432
 8504 189f 01       		.byte	0x1
 8505 18a0 6C03     		.2byte	0x36c
 8506 18a2 59090000 		.4byte	0x959
 8507 18a6 02       		.uleb128 0x2
 8508 18a7 91       		.byte	0x91
 8509 18a8 70       		.sleb128 -16
 8510 18a9 28       		.uleb128 0x28
 8511 18aa F4810000 		.4byte	.LASF1474
 8512 18ae 01       		.byte	0x1
 8513 18af 6D03     		.2byte	0x36d
 8514 18b1 29090000 		.4byte	0x929
 8515 18b5 02       		.uleb128 0x2
 8516 18b6 91       		.byte	0x91
 8517 18b7 74       		.sleb128 -12
 8518 18b8 00       		.byte	0
 8519 18b9 2B       		.uleb128 0x2b
 8520 18ba DE7B0000 		.4byte	.LASF1493
 8521 18be 01       		.byte	0x1
 8522 18bf 0A03     		.2byte	0x30a
 8523 18c1 00000000 		.4byte	.LFB3
 8524 18c5 E4000000 		.4byte	.LFE3-.LFB3
 8525 18c9 01       		.uleb128 0x1
 8526 18ca 9C       		.byte	0x9c
 8527 18cb 34190000 		.4byte	0x1934
 8528 18cf 2A       		.uleb128 0x2a
 8529 18d0 977E0000 		.4byte	.LASF1494
 8530 18d4 01       		.byte	0x1
 8531 18d5 0A03     		.2byte	0x30a
 8532 18d7 DD120000 		.4byte	0x12dd
 8533 18db 02       		.uleb128 0x2
 8534 18dc 91       		.byte	0x91
 8535 18dd 64       		.sleb128 -28
 8536 18de 2A       		.uleb128 0x2a
 8537 18df 7A740000 		.4byte	.LASF1495
ARM GAS  /tmp/ccTV2SzP.s 			page 218


 8538 18e3 01       		.byte	0x1
 8539 18e4 0A03     		.2byte	0x30a
 8540 18e6 69090000 		.4byte	0x969
 8541 18ea 02       		.uleb128 0x2
 8542 18eb 91       		.byte	0x91
 8543 18ec 60       		.sleb128 -32
 8544 18ed 28       		.uleb128 0x28
 8545 18ee 10160000 		.4byte	.LASF1432
 8546 18f2 01       		.byte	0x1
 8547 18f3 0C03     		.2byte	0x30c
 8548 18f5 59090000 		.4byte	0x959
 8549 18f9 02       		.uleb128 0x2
 8550 18fa 91       		.byte	0x91
 8551 18fb 6C       		.sleb128 -20
 8552 18fc 28       		.uleb128 0x28
 8553 18fd F4810000 		.4byte	.LASF1474
 8554 1901 01       		.byte	0x1
 8555 1902 0D03     		.2byte	0x30d
 8556 1904 29090000 		.4byte	0x929
 8557 1908 02       		.uleb128 0x2
 8558 1909 91       		.byte	0x91
 8559 190a 68       		.sleb128 -24
 8560 190b 28       		.uleb128 0x28
 8561 190c D17B0000 		.4byte	.LASF1496
 8562 1910 01       		.byte	0x1
 8563 1911 0D03     		.2byte	0x30d
 8564 1913 29090000 		.4byte	0x929
 8565 1917 02       		.uleb128 0x2
 8566 1918 91       		.byte	0x91
 8567 1919 74       		.sleb128 -12
 8568 191a 31       		.uleb128 0x31
 8569 191b 38000000 		.4byte	.LBB7
 8570 191f 84000000 		.4byte	.LBE7-.LBB7
 8571 1923 28       		.uleb128 0x28
 8572 1924 016E0000 		.4byte	.LASF1448
 8573 1928 01       		.byte	0x1
 8574 1929 1703     		.2byte	0x317
 8575 192b 69090000 		.4byte	0x969
 8576 192f 02       		.uleb128 0x2
 8577 1930 91       		.byte	0x91
 8578 1931 70       		.sleb128 -16
 8579 1932 00       		.byte	0
 8580 1933 00       		.byte	0
 8581 1934 2B       		.uleb128 0x2b
 8582 1935 44360000 		.4byte	.LASF1497
 8583 1939 01       		.byte	0x1
 8584 193a B802     		.2byte	0x2b8
 8585 193c 00000000 		.4byte	.LFB2
 8586 1940 E8000000 		.4byte	.LFE2-.LFB2
 8587 1944 01       		.uleb128 0x1
 8588 1945 9C       		.byte	0x9c
 8589 1946 69190000 		.4byte	0x1969
 8590 194a 2A       		.uleb128 0x2a
 8591 194b E79F0000 		.4byte	.LASF1498
 8592 194f 01       		.byte	0x1
 8593 1950 B802     		.2byte	0x2b8
 8594 1952 510A0000 		.4byte	0xa51
ARM GAS  /tmp/ccTV2SzP.s 			page 219


 8595 1956 02       		.uleb128 0x2
 8596 1957 91       		.byte	0x91
 8597 1958 6C       		.sleb128 -20
 8598 1959 28       		.uleb128 0x28
 8599 195a C2AA0000 		.4byte	.LASF1407
 8600 195e 01       		.byte	0x1
 8601 195f BA02     		.2byte	0x2ba
 8602 1961 580C0000 		.4byte	0xc58
 8603 1965 02       		.uleb128 0x2
 8604 1966 91       		.byte	0x91
 8605 1967 74       		.sleb128 -12
 8606 1968 00       		.byte	0
 8607 1969 29       		.uleb128 0x29
 8608 196a 1A860000 		.4byte	.LASF1499
 8609 196e 01       		.byte	0x1
 8610 196f 0402     		.2byte	0x204
 8611 1971 29090000 		.4byte	0x929
 8612 1975 00000000 		.4byte	.LFB1
 8613 1979 64010000 		.4byte	.LFE1-.LFB1
 8614 197d 01       		.uleb128 0x1
 8615 197e 9C       		.byte	0x9c
 8616 197f 331A0000 		.4byte	0x1a33
 8617 1983 2A       		.uleb128 0x2a
 8618 1984 9D300000 		.4byte	.LASF1500
 8619 1988 01       		.byte	0x1
 8620 1989 0402     		.2byte	0x204
 8621 198b FD080000 		.4byte	0x8fd
 8622 198f 02       		.uleb128 0x2
 8623 1990 91       		.byte	0x91
 8624 1991 64       		.sleb128 -28
 8625 1992 2A       		.uleb128 0x2a
 8626 1993 A3210000 		.4byte	.LASF1437
 8627 1997 01       		.byte	0x1
 8628 1998 0402     		.2byte	0x204
 8629 199a B9050000 		.4byte	0x5b9
 8630 199e 02       		.uleb128 0x2
 8631 199f 91       		.byte	0x91
 8632 19a0 60       		.sleb128 -32
 8633 19a1 2A       		.uleb128 0x2a
 8634 19a2 94050000 		.4byte	.LASF1428
 8635 19a6 01       		.byte	0x1
 8636 19a7 0402     		.2byte	0x204
 8637 19a9 E2080000 		.4byte	0x8e2
 8638 19ad 02       		.uleb128 0x2
 8639 19ae 91       		.byte	0x91
 8640 19af 5E       		.sleb128 -34
 8641 19b0 2A       		.uleb128 0x2a
 8642 19b1 F0990000 		.4byte	.LASF1440
 8643 19b5 01       		.byte	0x1
 8644 19b6 0402     		.2byte	0x204
 8645 19b8 30010000 		.4byte	0x130
 8646 19bc 02       		.uleb128 0x2
 8647 19bd 91       		.byte	0x91
 8648 19be 58       		.sleb128 -40
 8649 19bf 2A       		.uleb128 0x2a
 8650 19c0 DBAA0000 		.4byte	.LASF1378
 8651 19c4 01       		.byte	0x1
ARM GAS  /tmp/ccTV2SzP.s 			page 220


 8652 19c5 0402     		.2byte	0x204
 8653 19c7 39090000 		.4byte	0x939
 8654 19cb 02       		.uleb128 0x2
 8655 19cc 91       		.byte	0x91
 8656 19cd 00       		.sleb128 0
 8657 19ce 2A       		.uleb128 0x2a
 8658 19cf 54410000 		.4byte	.LASF1501
 8659 19d3 01       		.byte	0x1
 8660 19d4 0402     		.2byte	0x204
 8661 19d6 391A0000 		.4byte	0x1a39
 8662 19da 02       		.uleb128 0x2
 8663 19db 91       		.byte	0x91
 8664 19dc 04       		.sleb128 4
 8665 19dd 2A       		.uleb128 0x2a
 8666 19de 0B860000 		.4byte	.LASF1429
 8667 19e2 01       		.byte	0x1
 8668 19e3 0402     		.2byte	0x204
 8669 19e5 0F0B0000 		.4byte	0xb0f
 8670 19e9 02       		.uleb128 0x2
 8671 19ea 91       		.byte	0x91
 8672 19eb 08       		.sleb128 8
 8673 19ec 2A       		.uleb128 0x2a
 8674 19ed 989C0000 		.4byte	.LASF1438
 8675 19f1 01       		.byte	0x1
 8676 19f2 0402     		.2byte	0x204
 8677 19f4 A2110000 		.4byte	0x11a2
 8678 19f8 02       		.uleb128 0x2
 8679 19f9 91       		.byte	0x91
 8680 19fa 0C       		.sleb128 12
 8681 19fb 28       		.uleb128 0x28
 8682 19fc BC2A0000 		.4byte	.LASF1408
 8683 1a00 01       		.byte	0x1
 8684 1a01 0602     		.2byte	0x206
 8685 1a03 29090000 		.4byte	0x929
 8686 1a07 02       		.uleb128 0x2
 8687 1a08 91       		.byte	0x91
 8688 1a09 74       		.sleb128 -12
 8689 1a0a 28       		.uleb128 0x28
 8690 1a0b 92140000 		.4byte	.LASF1430
 8691 1a0f 01       		.byte	0x1
 8692 1a10 0702     		.2byte	0x207
 8693 1a12 580C0000 		.4byte	0xc58
 8694 1a16 02       		.uleb128 0x2
 8695 1a17 91       		.byte	0x91
 8696 1a18 70       		.sleb128 -16
 8697 1a19 31       		.uleb128 0x31
 8698 1a1a 3A000000 		.4byte	.LBB6
 8699 1a1e E2000000 		.4byte	.LBE6-.LBB6
 8700 1a22 28       		.uleb128 0x28
 8701 1a23 7D2D0000 		.4byte	.LASF1375
 8702 1a27 01       		.byte	0x1
 8703 1a28 1202     		.2byte	0x212
 8704 1a2a 090B0000 		.4byte	0xb09
 8705 1a2e 02       		.uleb128 0x2
 8706 1a2f 91       		.byte	0x91
 8707 1a30 6C       		.sleb128 -20
 8708 1a31 00       		.byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 221


 8709 1a32 00       		.byte	0
 8710 1a33 0E       		.uleb128 0xe
 8711 1a34 04       		.byte	0x4
 8712 1a35 510A0000 		.4byte	0xa51
 8713 1a39 0D       		.uleb128 0xd
 8714 1a3a 331A0000 		.4byte	0x1a33
 8715 1a3e 39       		.uleb128 0x39
 8716 1a3f 163C0000 		.4byte	.LASF1506
 8717 1a43 02       		.byte	0x2
 8718 1a44 A1       		.byte	0xa1
 8719 1a45 C7080000 		.4byte	0x8c7
 8720 1a49 03       		.byte	0x3
 8721 1a4a 3A       		.uleb128 0x3a
 8722 1a4b 819F0000 		.4byte	.LASF1507
 8723 1a4f 02       		.byte	0x2
 8724 1a50 A1       		.byte	0xa1
 8725 1a51 E7080000 		.4byte	0x8e7
 8726 1a55 3B       		.uleb128 0x3b
 8727 1a56 CD0C0000 		.4byte	.LASF1508
 8728 1a5a 02       		.byte	0x2
 8729 1a5b A3       		.byte	0xa3
 8730 1a5c C7080000 		.4byte	0x8c7
 8731 1a60 00       		.byte	0
 8732 1a61 00       		.byte	0
 8733              		.section	.debug_abbrev,"",%progbits
 8734              	.Ldebug_abbrev0:
 8735 0000 01       		.uleb128 0x1
 8736 0001 11       		.uleb128 0x11
 8737 0002 01       		.byte	0x1
 8738 0003 25       		.uleb128 0x25
 8739 0004 0E       		.uleb128 0xe
 8740 0005 13       		.uleb128 0x13
 8741 0006 0B       		.uleb128 0xb
 8742 0007 03       		.uleb128 0x3
 8743 0008 0E       		.uleb128 0xe
 8744 0009 1B       		.uleb128 0x1b
 8745 000a 0E       		.uleb128 0xe
 8746 000b 55       		.uleb128 0x55
 8747 000c 17       		.uleb128 0x17
 8748 000d 11       		.uleb128 0x11
 8749 000e 01       		.uleb128 0x1
 8750 000f 10       		.uleb128 0x10
 8751 0010 17       		.uleb128 0x17
 8752 0011 9942     		.uleb128 0x2119
 8753 0013 17       		.uleb128 0x17
 8754 0014 00       		.byte	0
 8755 0015 00       		.byte	0
 8756 0016 02       		.uleb128 0x2
 8757 0017 16       		.uleb128 0x16
 8758 0018 00       		.byte	0
 8759 0019 03       		.uleb128 0x3
 8760 001a 0E       		.uleb128 0xe
 8761 001b 3A       		.uleb128 0x3a
 8762 001c 0B       		.uleb128 0xb
 8763 001d 3B       		.uleb128 0x3b
 8764 001e 0B       		.uleb128 0xb
 8765 001f 49       		.uleb128 0x49
ARM GAS  /tmp/ccTV2SzP.s 			page 222


 8766 0020 13       		.uleb128 0x13
 8767 0021 00       		.byte	0
 8768 0022 00       		.byte	0
 8769 0023 03       		.uleb128 0x3
 8770 0024 24       		.uleb128 0x24
 8771 0025 00       		.byte	0
 8772 0026 0B       		.uleb128 0xb
 8773 0027 0B       		.uleb128 0xb
 8774 0028 3E       		.uleb128 0x3e
 8775 0029 0B       		.uleb128 0xb
 8776 002a 03       		.uleb128 0x3
 8777 002b 0E       		.uleb128 0xe
 8778 002c 00       		.byte	0
 8779 002d 00       		.byte	0
 8780 002e 04       		.uleb128 0x4
 8781 002f 24       		.uleb128 0x24
 8782 0030 00       		.byte	0
 8783 0031 0B       		.uleb128 0xb
 8784 0032 0B       		.uleb128 0xb
 8785 0033 3E       		.uleb128 0x3e
 8786 0034 0B       		.uleb128 0xb
 8787 0035 03       		.uleb128 0x3
 8788 0036 08       		.uleb128 0x8
 8789 0037 00       		.byte	0
 8790 0038 00       		.byte	0
 8791 0039 05       		.uleb128 0x5
 8792 003a 16       		.uleb128 0x16
 8793 003b 00       		.byte	0
 8794 003c 03       		.uleb128 0x3
 8795 003d 0E       		.uleb128 0xe
 8796 003e 3A       		.uleb128 0x3a
 8797 003f 0B       		.uleb128 0xb
 8798 0040 3B       		.uleb128 0x3b
 8799 0041 05       		.uleb128 0x5
 8800 0042 49       		.uleb128 0x49
 8801 0043 13       		.uleb128 0x13
 8802 0044 00       		.byte	0
 8803 0045 00       		.byte	0
 8804 0046 06       		.uleb128 0x6
 8805 0047 17       		.uleb128 0x17
 8806 0048 01       		.byte	0x1
 8807 0049 0B       		.uleb128 0xb
 8808 004a 0B       		.uleb128 0xb
 8809 004b 3A       		.uleb128 0x3a
 8810 004c 0B       		.uleb128 0xb
 8811 004d 3B       		.uleb128 0x3b
 8812 004e 0B       		.uleb128 0xb
 8813 004f 01       		.uleb128 0x1
 8814 0050 13       		.uleb128 0x13
 8815 0051 00       		.byte	0
 8816 0052 00       		.byte	0
 8817 0053 07       		.uleb128 0x7
 8818 0054 0D       		.uleb128 0xd
 8819 0055 00       		.byte	0
 8820 0056 03       		.uleb128 0x3
 8821 0057 0E       		.uleb128 0xe
 8822 0058 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccTV2SzP.s 			page 223


 8823 0059 0B       		.uleb128 0xb
 8824 005a 3B       		.uleb128 0x3b
 8825 005b 0B       		.uleb128 0xb
 8826 005c 49       		.uleb128 0x49
 8827 005d 13       		.uleb128 0x13
 8828 005e 00       		.byte	0
 8829 005f 00       		.byte	0
 8830 0060 08       		.uleb128 0x8
 8831 0061 01       		.uleb128 0x1
 8832 0062 01       		.byte	0x1
 8833 0063 49       		.uleb128 0x49
 8834 0064 13       		.uleb128 0x13
 8835 0065 01       		.uleb128 0x1
 8836 0066 13       		.uleb128 0x13
 8837 0067 00       		.byte	0
 8838 0068 00       		.byte	0
 8839 0069 09       		.uleb128 0x9
 8840 006a 21       		.uleb128 0x21
 8841 006b 00       		.byte	0
 8842 006c 49       		.uleb128 0x49
 8843 006d 13       		.uleb128 0x13
 8844 006e 2F       		.uleb128 0x2f
 8845 006f 0B       		.uleb128 0xb
 8846 0070 00       		.byte	0
 8847 0071 00       		.byte	0
 8848 0072 0A       		.uleb128 0xa
 8849 0073 13       		.uleb128 0x13
 8850 0074 01       		.byte	0x1
 8851 0075 0B       		.uleb128 0xb
 8852 0076 0B       		.uleb128 0xb
 8853 0077 3A       		.uleb128 0x3a
 8854 0078 0B       		.uleb128 0xb
 8855 0079 3B       		.uleb128 0x3b
 8856 007a 0B       		.uleb128 0xb
 8857 007b 01       		.uleb128 0x1
 8858 007c 13       		.uleb128 0x13
 8859 007d 00       		.byte	0
 8860 007e 00       		.byte	0
 8861 007f 0B       		.uleb128 0xb
 8862 0080 0D       		.uleb128 0xd
 8863 0081 00       		.byte	0
 8864 0082 03       		.uleb128 0x3
 8865 0083 0E       		.uleb128 0xe
 8866 0084 3A       		.uleb128 0x3a
 8867 0085 0B       		.uleb128 0xb
 8868 0086 3B       		.uleb128 0x3b
 8869 0087 0B       		.uleb128 0xb
 8870 0088 49       		.uleb128 0x49
 8871 0089 13       		.uleb128 0x13
 8872 008a 38       		.uleb128 0x38
 8873 008b 0B       		.uleb128 0xb
 8874 008c 00       		.byte	0
 8875 008d 00       		.byte	0
 8876 008e 0C       		.uleb128 0xc
 8877 008f 0F       		.uleb128 0xf
 8878 0090 00       		.byte	0
 8879 0091 0B       		.uleb128 0xb
ARM GAS  /tmp/ccTV2SzP.s 			page 224


 8880 0092 0B       		.uleb128 0xb
 8881 0093 00       		.byte	0
 8882 0094 00       		.byte	0
 8883 0095 0D       		.uleb128 0xd
 8884 0096 26       		.uleb128 0x26
 8885 0097 00       		.byte	0
 8886 0098 49       		.uleb128 0x49
 8887 0099 13       		.uleb128 0x13
 8888 009a 00       		.byte	0
 8889 009b 00       		.byte	0
 8890 009c 0E       		.uleb128 0xe
 8891 009d 0F       		.uleb128 0xf
 8892 009e 00       		.byte	0
 8893 009f 0B       		.uleb128 0xb
 8894 00a0 0B       		.uleb128 0xb
 8895 00a1 49       		.uleb128 0x49
 8896 00a2 13       		.uleb128 0x13
 8897 00a3 00       		.byte	0
 8898 00a4 00       		.byte	0
 8899 00a5 0F       		.uleb128 0xf
 8900 00a6 13       		.uleb128 0x13
 8901 00a7 01       		.byte	0x1
 8902 00a8 03       		.uleb128 0x3
 8903 00a9 0E       		.uleb128 0xe
 8904 00aa 0B       		.uleb128 0xb
 8905 00ab 0B       		.uleb128 0xb
 8906 00ac 3A       		.uleb128 0x3a
 8907 00ad 0B       		.uleb128 0xb
 8908 00ae 3B       		.uleb128 0x3b
 8909 00af 0B       		.uleb128 0xb
 8910 00b0 01       		.uleb128 0x1
 8911 00b1 13       		.uleb128 0x13
 8912 00b2 00       		.byte	0
 8913 00b3 00       		.byte	0
 8914 00b4 10       		.uleb128 0x10
 8915 00b5 0D       		.uleb128 0xd
 8916 00b6 00       		.byte	0
 8917 00b7 03       		.uleb128 0x3
 8918 00b8 08       		.uleb128 0x8
 8919 00b9 3A       		.uleb128 0x3a
 8920 00ba 0B       		.uleb128 0xb
 8921 00bb 3B       		.uleb128 0x3b
 8922 00bc 0B       		.uleb128 0xb
 8923 00bd 49       		.uleb128 0x49
 8924 00be 13       		.uleb128 0x13
 8925 00bf 38       		.uleb128 0x38
 8926 00c0 0B       		.uleb128 0xb
 8927 00c1 00       		.byte	0
 8928 00c2 00       		.byte	0
 8929 00c3 11       		.uleb128 0x11
 8930 00c4 13       		.uleb128 0x13
 8931 00c5 01       		.byte	0x1
 8932 00c6 03       		.uleb128 0x3
 8933 00c7 0E       		.uleb128 0xe
 8934 00c8 0B       		.uleb128 0xb
 8935 00c9 05       		.uleb128 0x5
 8936 00ca 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccTV2SzP.s 			page 225


 8937 00cb 0B       		.uleb128 0xb
 8938 00cc 3B       		.uleb128 0x3b
 8939 00cd 0B       		.uleb128 0xb
 8940 00ce 01       		.uleb128 0x1
 8941 00cf 13       		.uleb128 0x13
 8942 00d0 00       		.byte	0
 8943 00d1 00       		.byte	0
 8944 00d2 12       		.uleb128 0x12
 8945 00d3 0D       		.uleb128 0xd
 8946 00d4 00       		.byte	0
 8947 00d5 03       		.uleb128 0x3
 8948 00d6 0E       		.uleb128 0xe
 8949 00d7 3A       		.uleb128 0x3a
 8950 00d8 0B       		.uleb128 0xb
 8951 00d9 3B       		.uleb128 0x3b
 8952 00da 0B       		.uleb128 0xb
 8953 00db 49       		.uleb128 0x49
 8954 00dc 13       		.uleb128 0x13
 8955 00dd 38       		.uleb128 0x38
 8956 00de 05       		.uleb128 0x5
 8957 00df 00       		.byte	0
 8958 00e0 00       		.byte	0
 8959 00e1 13       		.uleb128 0x13
 8960 00e2 15       		.uleb128 0x15
 8961 00e3 00       		.byte	0
 8962 00e4 27       		.uleb128 0x27
 8963 00e5 19       		.uleb128 0x19
 8964 00e6 00       		.byte	0
 8965 00e7 00       		.byte	0
 8966 00e8 14       		.uleb128 0x14
 8967 00e9 15       		.uleb128 0x15
 8968 00ea 01       		.byte	0x1
 8969 00eb 27       		.uleb128 0x27
 8970 00ec 19       		.uleb128 0x19
 8971 00ed 49       		.uleb128 0x49
 8972 00ee 13       		.uleb128 0x13
 8973 00ef 01       		.uleb128 0x1
 8974 00f0 13       		.uleb128 0x13
 8975 00f1 00       		.byte	0
 8976 00f2 00       		.byte	0
 8977 00f3 15       		.uleb128 0x15
 8978 00f4 05       		.uleb128 0x5
 8979 00f5 00       		.byte	0
 8980 00f6 49       		.uleb128 0x49
 8981 00f7 13       		.uleb128 0x13
 8982 00f8 00       		.byte	0
 8983 00f9 00       		.byte	0
 8984 00fa 16       		.uleb128 0x16
 8985 00fb 13       		.uleb128 0x13
 8986 00fc 01       		.byte	0x1
 8987 00fd 03       		.uleb128 0x3
 8988 00fe 0E       		.uleb128 0xe
 8989 00ff 0B       		.uleb128 0xb
 8990 0100 05       		.uleb128 0x5
 8991 0101 3A       		.uleb128 0x3a
 8992 0102 0B       		.uleb128 0xb
 8993 0103 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccTV2SzP.s 			page 226


 8994 0104 05       		.uleb128 0x5
 8995 0105 01       		.uleb128 0x1
 8996 0106 13       		.uleb128 0x13
 8997 0107 00       		.byte	0
 8998 0108 00       		.byte	0
 8999 0109 17       		.uleb128 0x17
 9000 010a 0D       		.uleb128 0xd
 9001 010b 00       		.byte	0
 9002 010c 03       		.uleb128 0x3
 9003 010d 0E       		.uleb128 0xe
 9004 010e 3A       		.uleb128 0x3a
 9005 010f 0B       		.uleb128 0xb
 9006 0110 3B       		.uleb128 0x3b
 9007 0111 05       		.uleb128 0x5
 9008 0112 49       		.uleb128 0x49
 9009 0113 13       		.uleb128 0x13
 9010 0114 38       		.uleb128 0x38
 9011 0115 0B       		.uleb128 0xb
 9012 0116 00       		.byte	0
 9013 0117 00       		.byte	0
 9014 0118 18       		.uleb128 0x18
 9015 0119 0D       		.uleb128 0xd
 9016 011a 00       		.byte	0
 9017 011b 03       		.uleb128 0x3
 9018 011c 0E       		.uleb128 0xe
 9019 011d 3A       		.uleb128 0x3a
 9020 011e 0B       		.uleb128 0xb
 9021 011f 3B       		.uleb128 0x3b
 9022 0120 05       		.uleb128 0x5
 9023 0121 49       		.uleb128 0x49
 9024 0122 13       		.uleb128 0x13
 9025 0123 38       		.uleb128 0x38
 9026 0124 05       		.uleb128 0x5
 9027 0125 00       		.byte	0
 9028 0126 00       		.byte	0
 9029 0127 19       		.uleb128 0x19
 9030 0128 13       		.uleb128 0x13
 9031 0129 01       		.byte	0x1
 9032 012a 03       		.uleb128 0x3
 9033 012b 0E       		.uleb128 0xe
 9034 012c 0B       		.uleb128 0xb
 9035 012d 0B       		.uleb128 0xb
 9036 012e 3A       		.uleb128 0x3a
 9037 012f 0B       		.uleb128 0xb
 9038 0130 3B       		.uleb128 0x3b
 9039 0131 05       		.uleb128 0x5
 9040 0132 01       		.uleb128 0x1
 9041 0133 13       		.uleb128 0x13
 9042 0134 00       		.byte	0
 9043 0135 00       		.byte	0
 9044 0136 1A       		.uleb128 0x1a
 9045 0137 13       		.uleb128 0x13
 9046 0138 01       		.byte	0x1
 9047 0139 0B       		.uleb128 0xb
 9048 013a 0B       		.uleb128 0xb
 9049 013b 3A       		.uleb128 0x3a
 9050 013c 0B       		.uleb128 0xb
ARM GAS  /tmp/ccTV2SzP.s 			page 227


 9051 013d 3B       		.uleb128 0x3b
 9052 013e 05       		.uleb128 0x5
 9053 013f 01       		.uleb128 0x1
 9054 0140 13       		.uleb128 0x13
 9055 0141 00       		.byte	0
 9056 0142 00       		.byte	0
 9057 0143 1B       		.uleb128 0x1b
 9058 0144 17       		.uleb128 0x17
 9059 0145 01       		.byte	0x1
 9060 0146 0B       		.uleb128 0xb
 9061 0147 0B       		.uleb128 0xb
 9062 0148 3A       		.uleb128 0x3a
 9063 0149 0B       		.uleb128 0xb
 9064 014a 3B       		.uleb128 0x3b
 9065 014b 05       		.uleb128 0x5
 9066 014c 01       		.uleb128 0x1
 9067 014d 13       		.uleb128 0x13
 9068 014e 00       		.byte	0
 9069 014f 00       		.byte	0
 9070 0150 1C       		.uleb128 0x1c
 9071 0151 0D       		.uleb128 0xd
 9072 0152 00       		.byte	0
 9073 0153 03       		.uleb128 0x3
 9074 0154 0E       		.uleb128 0xe
 9075 0155 3A       		.uleb128 0x3a
 9076 0156 0B       		.uleb128 0xb
 9077 0157 3B       		.uleb128 0x3b
 9078 0158 05       		.uleb128 0x5
 9079 0159 49       		.uleb128 0x49
 9080 015a 13       		.uleb128 0x13
 9081 015b 00       		.byte	0
 9082 015c 00       		.byte	0
 9083 015d 1D       		.uleb128 0x1d
 9084 015e 13       		.uleb128 0x13
 9085 015f 00       		.byte	0
 9086 0160 03       		.uleb128 0x3
 9087 0161 0E       		.uleb128 0xe
 9088 0162 3C       		.uleb128 0x3c
 9089 0163 19       		.uleb128 0x19
 9090 0164 00       		.byte	0
 9091 0165 00       		.byte	0
 9092 0166 1E       		.uleb128 0x1e
 9093 0167 15       		.uleb128 0x15
 9094 0168 01       		.byte	0x1
 9095 0169 27       		.uleb128 0x27
 9096 016a 19       		.uleb128 0x19
 9097 016b 01       		.uleb128 0x1
 9098 016c 13       		.uleb128 0x13
 9099 016d 00       		.byte	0
 9100 016e 00       		.byte	0
 9101 016f 1F       		.uleb128 0x1f
 9102 0170 34       		.uleb128 0x34
 9103 0171 00       		.byte	0
 9104 0172 03       		.uleb128 0x3
 9105 0173 0E       		.uleb128 0xe
 9106 0174 3A       		.uleb128 0x3a
 9107 0175 0B       		.uleb128 0xb
ARM GAS  /tmp/ccTV2SzP.s 			page 228


 9108 0176 3B       		.uleb128 0x3b
 9109 0177 05       		.uleb128 0x5
 9110 0178 49       		.uleb128 0x49
 9111 0179 13       		.uleb128 0x13
 9112 017a 3F       		.uleb128 0x3f
 9113 017b 19       		.uleb128 0x19
 9114 017c 3C       		.uleb128 0x3c
 9115 017d 19       		.uleb128 0x19
 9116 017e 00       		.byte	0
 9117 017f 00       		.byte	0
 9118 0180 20       		.uleb128 0x20
 9119 0181 34       		.uleb128 0x34
 9120 0182 00       		.byte	0
 9121 0183 03       		.uleb128 0x3
 9122 0184 0E       		.uleb128 0xe
 9123 0185 3A       		.uleb128 0x3a
 9124 0186 0B       		.uleb128 0xb
 9125 0187 3B       		.uleb128 0x3b
 9126 0188 0B       		.uleb128 0xb
 9127 0189 49       		.uleb128 0x49
 9128 018a 13       		.uleb128 0x13
 9129 018b 3F       		.uleb128 0x3f
 9130 018c 19       		.uleb128 0x19
 9131 018d 3C       		.uleb128 0x3c
 9132 018e 19       		.uleb128 0x19
 9133 018f 00       		.byte	0
 9134 0190 00       		.byte	0
 9135 0191 21       		.uleb128 0x21
 9136 0192 35       		.uleb128 0x35
 9137 0193 00       		.byte	0
 9138 0194 49       		.uleb128 0x49
 9139 0195 13       		.uleb128 0x13
 9140 0196 00       		.byte	0
 9141 0197 00       		.byte	0
 9142 0198 22       		.uleb128 0x22
 9143 0199 04       		.uleb128 0x4
 9144 019a 01       		.byte	0x1
 9145 019b 3E       		.uleb128 0x3e
 9146 019c 0B       		.uleb128 0xb
 9147 019d 0B       		.uleb128 0xb
 9148 019e 0B       		.uleb128 0xb
 9149 019f 49       		.uleb128 0x49
 9150 01a0 13       		.uleb128 0x13
 9151 01a1 3A       		.uleb128 0x3a
 9152 01a2 0B       		.uleb128 0xb
 9153 01a3 3B       		.uleb128 0x3b
 9154 01a4 0B       		.uleb128 0xb
 9155 01a5 01       		.uleb128 0x1
 9156 01a6 13       		.uleb128 0x13
 9157 01a7 00       		.byte	0
 9158 01a8 00       		.byte	0
 9159 01a9 23       		.uleb128 0x23
 9160 01aa 28       		.uleb128 0x28
 9161 01ab 00       		.byte	0
 9162 01ac 03       		.uleb128 0x3
 9163 01ad 0E       		.uleb128 0xe
 9164 01ae 1C       		.uleb128 0x1c
ARM GAS  /tmp/ccTV2SzP.s 			page 229


 9165 01af 0B       		.uleb128 0xb
 9166 01b0 00       		.byte	0
 9167 01b1 00       		.byte	0
 9168 01b2 24       		.uleb128 0x24
 9169 01b3 34       		.uleb128 0x34
 9170 01b4 00       		.byte	0
 9171 01b5 03       		.uleb128 0x3
 9172 01b6 0E       		.uleb128 0xe
 9173 01b7 3A       		.uleb128 0x3a
 9174 01b8 0B       		.uleb128 0xb
 9175 01b9 3B       		.uleb128 0x3b
 9176 01ba 0B       		.uleb128 0xb
 9177 01bb 49       		.uleb128 0x49
 9178 01bc 13       		.uleb128 0x13
 9179 01bd 3F       		.uleb128 0x3f
 9180 01be 19       		.uleb128 0x19
 9181 01bf 02       		.uleb128 0x2
 9182 01c0 18       		.uleb128 0x18
 9183 01c1 00       		.byte	0
 9184 01c2 00       		.byte	0
 9185 01c3 25       		.uleb128 0x25
 9186 01c4 34       		.uleb128 0x34
 9187 01c5 00       		.byte	0
 9188 01c6 03       		.uleb128 0x3
 9189 01c7 0E       		.uleb128 0xe
 9190 01c8 3A       		.uleb128 0x3a
 9191 01c9 0B       		.uleb128 0xb
 9192 01ca 3B       		.uleb128 0x3b
 9193 01cb 0B       		.uleb128 0xb
 9194 01cc 49       		.uleb128 0x49
 9195 01cd 13       		.uleb128 0x13
 9196 01ce 02       		.uleb128 0x2
 9197 01cf 18       		.uleb128 0x18
 9198 01d0 00       		.byte	0
 9199 01d1 00       		.byte	0
 9200 01d2 26       		.uleb128 0x26
 9201 01d3 2E       		.uleb128 0x2e
 9202 01d4 00       		.byte	0
 9203 01d5 3F       		.uleb128 0x3f
 9204 01d6 19       		.uleb128 0x19
 9205 01d7 03       		.uleb128 0x3
 9206 01d8 0E       		.uleb128 0xe
 9207 01d9 3A       		.uleb128 0x3a
 9208 01da 0B       		.uleb128 0xb
 9209 01db 3B       		.uleb128 0x3b
 9210 01dc 05       		.uleb128 0x5
 9211 01dd 27       		.uleb128 0x27
 9212 01de 19       		.uleb128 0x19
 9213 01df 49       		.uleb128 0x49
 9214 01e0 13       		.uleb128 0x13
 9215 01e1 11       		.uleb128 0x11
 9216 01e2 01       		.uleb128 0x1
 9217 01e3 12       		.uleb128 0x12
 9218 01e4 06       		.uleb128 0x6
 9219 01e5 40       		.uleb128 0x40
 9220 01e6 18       		.uleb128 0x18
 9221 01e7 9742     		.uleb128 0x2117
ARM GAS  /tmp/ccTV2SzP.s 			page 230


 9222 01e9 19       		.uleb128 0x19
 9223 01ea 00       		.byte	0
 9224 01eb 00       		.byte	0
 9225 01ec 27       		.uleb128 0x27
 9226 01ed 2E       		.uleb128 0x2e
 9227 01ee 01       		.byte	0x1
 9228 01ef 3F       		.uleb128 0x3f
 9229 01f0 19       		.uleb128 0x19
 9230 01f1 03       		.uleb128 0x3
 9231 01f2 0E       		.uleb128 0xe
 9232 01f3 3A       		.uleb128 0x3a
 9233 01f4 0B       		.uleb128 0xb
 9234 01f5 3B       		.uleb128 0x3b
 9235 01f6 05       		.uleb128 0x5
 9236 01f7 27       		.uleb128 0x27
 9237 01f8 19       		.uleb128 0x19
 9238 01f9 49       		.uleb128 0x49
 9239 01fa 13       		.uleb128 0x13
 9240 01fb 11       		.uleb128 0x11
 9241 01fc 01       		.uleb128 0x1
 9242 01fd 12       		.uleb128 0x12
 9243 01fe 06       		.uleb128 0x6
 9244 01ff 40       		.uleb128 0x40
 9245 0200 18       		.uleb128 0x18
 9246 0201 9742     		.uleb128 0x2117
 9247 0203 19       		.uleb128 0x19
 9248 0204 01       		.uleb128 0x1
 9249 0205 13       		.uleb128 0x13
 9250 0206 00       		.byte	0
 9251 0207 00       		.byte	0
 9252 0208 28       		.uleb128 0x28
 9253 0209 34       		.uleb128 0x34
 9254 020a 00       		.byte	0
 9255 020b 03       		.uleb128 0x3
 9256 020c 0E       		.uleb128 0xe
 9257 020d 3A       		.uleb128 0x3a
 9258 020e 0B       		.uleb128 0xb
 9259 020f 3B       		.uleb128 0x3b
 9260 0210 05       		.uleb128 0x5
 9261 0211 49       		.uleb128 0x49
 9262 0212 13       		.uleb128 0x13
 9263 0213 02       		.uleb128 0x2
 9264 0214 18       		.uleb128 0x18
 9265 0215 00       		.byte	0
 9266 0216 00       		.byte	0
 9267 0217 29       		.uleb128 0x29
 9268 0218 2E       		.uleb128 0x2e
 9269 0219 01       		.byte	0x1
 9270 021a 3F       		.uleb128 0x3f
 9271 021b 19       		.uleb128 0x19
 9272 021c 03       		.uleb128 0x3
 9273 021d 0E       		.uleb128 0xe
 9274 021e 3A       		.uleb128 0x3a
 9275 021f 0B       		.uleb128 0xb
 9276 0220 3B       		.uleb128 0x3b
 9277 0221 05       		.uleb128 0x5
 9278 0222 27       		.uleb128 0x27
ARM GAS  /tmp/ccTV2SzP.s 			page 231


 9279 0223 19       		.uleb128 0x19
 9280 0224 49       		.uleb128 0x49
 9281 0225 13       		.uleb128 0x13
 9282 0226 11       		.uleb128 0x11
 9283 0227 01       		.uleb128 0x1
 9284 0228 12       		.uleb128 0x12
 9285 0229 06       		.uleb128 0x6
 9286 022a 40       		.uleb128 0x40
 9287 022b 18       		.uleb128 0x18
 9288 022c 9642     		.uleb128 0x2116
 9289 022e 19       		.uleb128 0x19
 9290 022f 01       		.uleb128 0x1
 9291 0230 13       		.uleb128 0x13
 9292 0231 00       		.byte	0
 9293 0232 00       		.byte	0
 9294 0233 2A       		.uleb128 0x2a
 9295 0234 05       		.uleb128 0x5
 9296 0235 00       		.byte	0
 9297 0236 03       		.uleb128 0x3
 9298 0237 0E       		.uleb128 0xe
 9299 0238 3A       		.uleb128 0x3a
 9300 0239 0B       		.uleb128 0xb
 9301 023a 3B       		.uleb128 0x3b
 9302 023b 05       		.uleb128 0x5
 9303 023c 49       		.uleb128 0x49
 9304 023d 13       		.uleb128 0x13
 9305 023e 02       		.uleb128 0x2
 9306 023f 18       		.uleb128 0x18
 9307 0240 00       		.byte	0
 9308 0241 00       		.byte	0
 9309 0242 2B       		.uleb128 0x2b
 9310 0243 2E       		.uleb128 0x2e
 9311 0244 01       		.byte	0x1
 9312 0245 3F       		.uleb128 0x3f
 9313 0246 19       		.uleb128 0x19
 9314 0247 03       		.uleb128 0x3
 9315 0248 0E       		.uleb128 0xe
 9316 0249 3A       		.uleb128 0x3a
 9317 024a 0B       		.uleb128 0xb
 9318 024b 3B       		.uleb128 0x3b
 9319 024c 05       		.uleb128 0x5
 9320 024d 27       		.uleb128 0x27
 9321 024e 19       		.uleb128 0x19
 9322 024f 11       		.uleb128 0x11
 9323 0250 01       		.uleb128 0x1
 9324 0251 12       		.uleb128 0x12
 9325 0252 06       		.uleb128 0x6
 9326 0253 40       		.uleb128 0x40
 9327 0254 18       		.uleb128 0x18
 9328 0255 9642     		.uleb128 0x2116
 9329 0257 19       		.uleb128 0x19
 9330 0258 01       		.uleb128 0x1
 9331 0259 13       		.uleb128 0x13
 9332 025a 00       		.byte	0
 9333 025b 00       		.byte	0
 9334 025c 2C       		.uleb128 0x2c
 9335 025d 2E       		.uleb128 0x2e
ARM GAS  /tmp/ccTV2SzP.s 			page 232


 9336 025e 01       		.byte	0x1
 9337 025f 03       		.uleb128 0x3
 9338 0260 0E       		.uleb128 0xe
 9339 0261 3A       		.uleb128 0x3a
 9340 0262 0B       		.uleb128 0xb
 9341 0263 3B       		.uleb128 0x3b
 9342 0264 05       		.uleb128 0x5
 9343 0265 27       		.uleb128 0x27
 9344 0266 19       		.uleb128 0x19
 9345 0267 11       		.uleb128 0x11
 9346 0268 01       		.uleb128 0x1
 9347 0269 12       		.uleb128 0x12
 9348 026a 06       		.uleb128 0x6
 9349 026b 40       		.uleb128 0x40
 9350 026c 18       		.uleb128 0x18
 9351 026d 9742     		.uleb128 0x2117
 9352 026f 19       		.uleb128 0x19
 9353 0270 01       		.uleb128 0x1
 9354 0271 13       		.uleb128 0x13
 9355 0272 00       		.byte	0
 9356 0273 00       		.byte	0
 9357 0274 2D       		.uleb128 0x2d
 9358 0275 2E       		.uleb128 0x2e
 9359 0276 01       		.byte	0x1
 9360 0277 03       		.uleb128 0x3
 9361 0278 0E       		.uleb128 0xe
 9362 0279 3A       		.uleb128 0x3a
 9363 027a 0B       		.uleb128 0xb
 9364 027b 3B       		.uleb128 0x3b
 9365 027c 05       		.uleb128 0x5
 9366 027d 27       		.uleb128 0x27
 9367 027e 19       		.uleb128 0x19
 9368 027f 11       		.uleb128 0x11
 9369 0280 01       		.uleb128 0x1
 9370 0281 12       		.uleb128 0x12
 9371 0282 06       		.uleb128 0x6
 9372 0283 40       		.uleb128 0x40
 9373 0284 18       		.uleb128 0x18
 9374 0285 9642     		.uleb128 0x2116
 9375 0287 19       		.uleb128 0x19
 9376 0288 01       		.uleb128 0x1
 9377 0289 13       		.uleb128 0x13
 9378 028a 00       		.byte	0
 9379 028b 00       		.byte	0
 9380 028c 2E       		.uleb128 0x2e
 9381 028d 2E       		.uleb128 0x2e
 9382 028e 01       		.byte	0x1
 9383 028f 03       		.uleb128 0x3
 9384 0290 0E       		.uleb128 0xe
 9385 0291 3A       		.uleb128 0x3a
 9386 0292 0B       		.uleb128 0xb
 9387 0293 3B       		.uleb128 0x3b
 9388 0294 05       		.uleb128 0x5
 9389 0295 27       		.uleb128 0x27
 9390 0296 19       		.uleb128 0x19
 9391 0297 49       		.uleb128 0x49
 9392 0298 13       		.uleb128 0x13
ARM GAS  /tmp/ccTV2SzP.s 			page 233


 9393 0299 11       		.uleb128 0x11
 9394 029a 01       		.uleb128 0x1
 9395 029b 12       		.uleb128 0x12
 9396 029c 06       		.uleb128 0x6
 9397 029d 40       		.uleb128 0x40
 9398 029e 18       		.uleb128 0x18
 9399 029f 9742     		.uleb128 0x2117
 9400 02a1 19       		.uleb128 0x19
 9401 02a2 01       		.uleb128 0x1
 9402 02a3 13       		.uleb128 0x13
 9403 02a4 00       		.byte	0
 9404 02a5 00       		.byte	0
 9405 02a6 2F       		.uleb128 0x2f
 9406 02a7 2E       		.uleb128 0x2e
 9407 02a8 01       		.byte	0x1
 9408 02a9 03       		.uleb128 0x3
 9409 02aa 0E       		.uleb128 0xe
 9410 02ab 3A       		.uleb128 0x3a
 9411 02ac 0B       		.uleb128 0xb
 9412 02ad 3B       		.uleb128 0x3b
 9413 02ae 05       		.uleb128 0x5
 9414 02af 27       		.uleb128 0x27
 9415 02b0 19       		.uleb128 0x19
 9416 02b1 49       		.uleb128 0x49
 9417 02b2 13       		.uleb128 0x13
 9418 02b3 11       		.uleb128 0x11
 9419 02b4 01       		.uleb128 0x1
 9420 02b5 12       		.uleb128 0x12
 9421 02b6 06       		.uleb128 0x6
 9422 02b7 40       		.uleb128 0x40
 9423 02b8 18       		.uleb128 0x18
 9424 02b9 9642     		.uleb128 0x2116
 9425 02bb 19       		.uleb128 0x19
 9426 02bc 01       		.uleb128 0x1
 9427 02bd 13       		.uleb128 0x13
 9428 02be 00       		.byte	0
 9429 02bf 00       		.byte	0
 9430 02c0 30       		.uleb128 0x30
 9431 02c1 0B       		.uleb128 0xb
 9432 02c2 01       		.byte	0x1
 9433 02c3 11       		.uleb128 0x11
 9434 02c4 01       		.uleb128 0x1
 9435 02c5 12       		.uleb128 0x12
 9436 02c6 06       		.uleb128 0x6
 9437 02c7 01       		.uleb128 0x1
 9438 02c8 13       		.uleb128 0x13
 9439 02c9 00       		.byte	0
 9440 02ca 00       		.byte	0
 9441 02cb 31       		.uleb128 0x31
 9442 02cc 0B       		.uleb128 0xb
 9443 02cd 01       		.byte	0x1
 9444 02ce 11       		.uleb128 0x11
 9445 02cf 01       		.uleb128 0x1
 9446 02d0 12       		.uleb128 0x12
 9447 02d1 06       		.uleb128 0x6
 9448 02d2 00       		.byte	0
 9449 02d3 00       		.byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 234


 9450 02d4 32       		.uleb128 0x32
 9451 02d5 34       		.uleb128 0x34
 9452 02d6 00       		.byte	0
 9453 02d7 03       		.uleb128 0x3
 9454 02d8 08       		.uleb128 0x8
 9455 02d9 3A       		.uleb128 0x3a
 9456 02da 0B       		.uleb128 0xb
 9457 02db 3B       		.uleb128 0x3b
 9458 02dc 05       		.uleb128 0x5
 9459 02dd 49       		.uleb128 0x49
 9460 02de 13       		.uleb128 0x13
 9461 02df 02       		.uleb128 0x2
 9462 02e0 18       		.uleb128 0x18
 9463 02e1 00       		.byte	0
 9464 02e2 00       		.byte	0
 9465 02e3 33       		.uleb128 0x33
 9466 02e4 2E       		.uleb128 0x2e
 9467 02e5 01       		.byte	0x1
 9468 02e6 3F       		.uleb128 0x3f
 9469 02e7 19       		.uleb128 0x19
 9470 02e8 03       		.uleb128 0x3
 9471 02e9 0E       		.uleb128 0xe
 9472 02ea 3A       		.uleb128 0x3a
 9473 02eb 0B       		.uleb128 0xb
 9474 02ec 3B       		.uleb128 0x3b
 9475 02ed 05       		.uleb128 0x5
 9476 02ee 27       		.uleb128 0x27
 9477 02ef 19       		.uleb128 0x19
 9478 02f0 11       		.uleb128 0x11
 9479 02f1 01       		.uleb128 0x1
 9480 02f2 12       		.uleb128 0x12
 9481 02f3 06       		.uleb128 0x6
 9482 02f4 40       		.uleb128 0x40
 9483 02f5 18       		.uleb128 0x18
 9484 02f6 9742     		.uleb128 0x2117
 9485 02f8 19       		.uleb128 0x19
 9486 02f9 01       		.uleb128 0x1
 9487 02fa 13       		.uleb128 0x13
 9488 02fb 00       		.byte	0
 9489 02fc 00       		.byte	0
 9490 02fd 34       		.uleb128 0x34
 9491 02fe 2E       		.uleb128 0x2e
 9492 02ff 00       		.byte	0
 9493 0300 3F       		.uleb128 0x3f
 9494 0301 19       		.uleb128 0x19
 9495 0302 03       		.uleb128 0x3
 9496 0303 0E       		.uleb128 0xe
 9497 0304 3A       		.uleb128 0x3a
 9498 0305 0B       		.uleb128 0xb
 9499 0306 3B       		.uleb128 0x3b
 9500 0307 05       		.uleb128 0x5
 9501 0308 27       		.uleb128 0x27
 9502 0309 19       		.uleb128 0x19
 9503 030a 11       		.uleb128 0x11
 9504 030b 01       		.uleb128 0x1
 9505 030c 12       		.uleb128 0x12
 9506 030d 06       		.uleb128 0x6
ARM GAS  /tmp/ccTV2SzP.s 			page 235


 9507 030e 40       		.uleb128 0x40
 9508 030f 18       		.uleb128 0x18
 9509 0310 9742     		.uleb128 0x2117
 9510 0312 19       		.uleb128 0x19
 9511 0313 00       		.byte	0
 9512 0314 00       		.byte	0
 9513 0315 35       		.uleb128 0x35
 9514 0316 1D       		.uleb128 0x1d
 9515 0317 01       		.byte	0x1
 9516 0318 31       		.uleb128 0x31
 9517 0319 13       		.uleb128 0x13
 9518 031a 11       		.uleb128 0x11
 9519 031b 01       		.uleb128 0x1
 9520 031c 12       		.uleb128 0x12
 9521 031d 06       		.uleb128 0x6
 9522 031e 58       		.uleb128 0x58
 9523 031f 0B       		.uleb128 0xb
 9524 0320 59       		.uleb128 0x59
 9525 0321 05       		.uleb128 0x5
 9526 0322 00       		.byte	0
 9527 0323 00       		.byte	0
 9528 0324 36       		.uleb128 0x36
 9529 0325 05       		.uleb128 0x5
 9530 0326 00       		.byte	0
 9531 0327 31       		.uleb128 0x31
 9532 0328 13       		.uleb128 0x13
 9533 0329 02       		.uleb128 0x2
 9534 032a 18       		.uleb128 0x18
 9535 032b 00       		.byte	0
 9536 032c 00       		.byte	0
 9537 032d 37       		.uleb128 0x37
 9538 032e 34       		.uleb128 0x34
 9539 032f 00       		.byte	0
 9540 0330 31       		.uleb128 0x31
 9541 0331 13       		.uleb128 0x13
 9542 0332 02       		.uleb128 0x2
 9543 0333 18       		.uleb128 0x18
 9544 0334 00       		.byte	0
 9545 0335 00       		.byte	0
 9546 0336 38       		.uleb128 0x38
 9547 0337 2E       		.uleb128 0x2e
 9548 0338 00       		.byte	0
 9549 0339 3F       		.uleb128 0x3f
 9550 033a 19       		.uleb128 0x19
 9551 033b 03       		.uleb128 0x3
 9552 033c 0E       		.uleb128 0xe
 9553 033d 3A       		.uleb128 0x3a
 9554 033e 0B       		.uleb128 0xb
 9555 033f 3B       		.uleb128 0x3b
 9556 0340 05       		.uleb128 0x5
 9557 0341 27       		.uleb128 0x27
 9558 0342 19       		.uleb128 0x19
 9559 0343 11       		.uleb128 0x11
 9560 0344 01       		.uleb128 0x1
 9561 0345 12       		.uleb128 0x12
 9562 0346 06       		.uleb128 0x6
 9563 0347 40       		.uleb128 0x40
ARM GAS  /tmp/ccTV2SzP.s 			page 236


 9564 0348 18       		.uleb128 0x18
 9565 0349 9642     		.uleb128 0x2116
 9566 034b 19       		.uleb128 0x19
 9567 034c 00       		.byte	0
 9568 034d 00       		.byte	0
 9569 034e 39       		.uleb128 0x39
 9570 034f 2E       		.uleb128 0x2e
 9571 0350 01       		.byte	0x1
 9572 0351 03       		.uleb128 0x3
 9573 0352 0E       		.uleb128 0xe
 9574 0353 3A       		.uleb128 0x3a
 9575 0354 0B       		.uleb128 0xb
 9576 0355 3B       		.uleb128 0x3b
 9577 0356 0B       		.uleb128 0xb
 9578 0357 27       		.uleb128 0x27
 9579 0358 19       		.uleb128 0x19
 9580 0359 49       		.uleb128 0x49
 9581 035a 13       		.uleb128 0x13
 9582 035b 20       		.uleb128 0x20
 9583 035c 0B       		.uleb128 0xb
 9584 035d 00       		.byte	0
 9585 035e 00       		.byte	0
 9586 035f 3A       		.uleb128 0x3a
 9587 0360 05       		.uleb128 0x5
 9588 0361 00       		.byte	0
 9589 0362 03       		.uleb128 0x3
 9590 0363 0E       		.uleb128 0xe
 9591 0364 3A       		.uleb128 0x3a
 9592 0365 0B       		.uleb128 0xb
 9593 0366 3B       		.uleb128 0x3b
 9594 0367 0B       		.uleb128 0xb
 9595 0368 49       		.uleb128 0x49
 9596 0369 13       		.uleb128 0x13
 9597 036a 00       		.byte	0
 9598 036b 00       		.byte	0
 9599 036c 3B       		.uleb128 0x3b
 9600 036d 34       		.uleb128 0x34
 9601 036e 00       		.byte	0
 9602 036f 03       		.uleb128 0x3
 9603 0370 0E       		.uleb128 0xe
 9604 0371 3A       		.uleb128 0x3a
 9605 0372 0B       		.uleb128 0xb
 9606 0373 3B       		.uleb128 0x3b
 9607 0374 0B       		.uleb128 0xb
 9608 0375 49       		.uleb128 0x49
 9609 0376 13       		.uleb128 0x13
 9610 0377 00       		.byte	0
 9611 0378 00       		.byte	0
 9612 0379 00       		.byte	0
 9613              		.section	.debug_aranges,"",%progbits
 9614 0000 7C010000 		.4byte	0x17c
 9615 0004 0200     		.2byte	0x2
 9616 0006 00000000 		.4byte	.Ldebug_info0
 9617 000a 04       		.byte	0x4
 9618 000b 00       		.byte	0
 9619 000c 0000     		.2byte	0
 9620 000e 0000     		.2byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 237


 9621 0010 00000000 		.4byte	.LFB1
 9622 0014 64010000 		.4byte	.LFE1-.LFB1
 9623 0018 00000000 		.4byte	.LFB2
 9624 001c E8000000 		.4byte	.LFE2-.LFB2
 9625 0020 00000000 		.4byte	.LFB3
 9626 0024 E4000000 		.4byte	.LFE3-.LFB3
 9627 0028 00000000 		.4byte	.LFB4
 9628 002c 88000000 		.4byte	.LFE4-.LFB4
 9629 0030 00000000 		.4byte	.LFB5
 9630 0034 34000000 		.4byte	.LFE5-.LFB5
 9631 0038 00000000 		.4byte	.LFB6
 9632 003c 3C010000 		.4byte	.LFE6-.LFB6
 9633 0040 00000000 		.4byte	.LFB7
 9634 0044 F4000000 		.4byte	.LFE7-.LFB7
 9635 0048 00000000 		.4byte	.LFB8
 9636 004c 64000000 		.4byte	.LFE8-.LFB8
 9637 0050 00000000 		.4byte	.LFB9
 9638 0054 9C000000 		.4byte	.LFE9-.LFB9
 9639 0058 00000000 		.4byte	.LFB10
 9640 005c B8000000 		.4byte	.LFE10-.LFB10
 9641 0060 00000000 		.4byte	.LFB11
 9642 0064 68000000 		.4byte	.LFE11-.LFB11
 9643 0068 00000000 		.4byte	.LFB12
 9644 006c 1C000000 		.4byte	.LFE12-.LFB12
 9645 0070 00000000 		.4byte	.LFB13
 9646 0074 1C000000 		.4byte	.LFE13-.LFB13
 9647 0078 00000000 		.4byte	.LFB14
 9648 007c 08010000 		.4byte	.LFE14-.LFB14
 9649 0080 00000000 		.4byte	.LFB15
 9650 0084 24000000 		.4byte	.LFE15-.LFB15
 9651 0088 00000000 		.4byte	.LFB16
 9652 008c 2C000000 		.4byte	.LFE16-.LFB16
 9653 0090 00000000 		.4byte	.LFB17
 9654 0094 14000000 		.4byte	.LFE17-.LFB17
 9655 0098 00000000 		.4byte	.LFB18
 9656 009c F4000000 		.4byte	.LFE18-.LFB18
 9657 00a0 00000000 		.4byte	.LFB19
 9658 00a4 7C010000 		.4byte	.LFE19-.LFB19
 9659 00a8 00000000 		.4byte	.LFB20
 9660 00ac A4000000 		.4byte	.LFE20-.LFB20
 9661 00b0 00000000 		.4byte	.LFB21
 9662 00b4 90000000 		.4byte	.LFE21-.LFB21
 9663 00b8 00000000 		.4byte	.LFB22
 9664 00bc B0000000 		.4byte	.LFE22-.LFB22
 9665 00c0 00000000 		.4byte	.LFB23
 9666 00c4 B4000000 		.4byte	.LFE23-.LFB23
 9667 00c8 00000000 		.4byte	.LFB24
 9668 00cc B0000000 		.4byte	.LFE24-.LFB24
 9669 00d0 00000000 		.4byte	.LFB25
 9670 00d4 34000000 		.4byte	.LFE25-.LFB25
 9671 00d8 00000000 		.4byte	.LFB26
 9672 00dc A0000000 		.4byte	.LFE26-.LFB26
 9673 00e0 00000000 		.4byte	.LFB27
 9674 00e4 18000000 		.4byte	.LFE27-.LFB27
 9675 00e8 00000000 		.4byte	.LFB28
 9676 00ec 2A000000 		.4byte	.LFE28-.LFB28
 9677 00f0 00000000 		.4byte	.LFB29
ARM GAS  /tmp/ccTV2SzP.s 			page 238


 9678 00f4 24000000 		.4byte	.LFE29-.LFB29
 9679 00f8 00000000 		.4byte	.LFB30
 9680 00fc 0E000000 		.4byte	.LFE30-.LFB30
 9681 0100 00000000 		.4byte	.LFB31
 9682 0104 9A000000 		.4byte	.LFE31-.LFB31
 9683 0108 00000000 		.4byte	.LFB32
 9684 010c 80000000 		.4byte	.LFE32-.LFB32
 9685 0110 00000000 		.4byte	.LFB33
 9686 0114 78000000 		.4byte	.LFE33-.LFB33
 9687 0118 00000000 		.4byte	.LFB34
 9688 011c 6C000000 		.4byte	.LFE34-.LFB34
 9689 0120 00000000 		.4byte	.LFB35
 9690 0124 62000000 		.4byte	.LFE35-.LFB35
 9691 0128 00000000 		.4byte	.LFB36
 9692 012c 16010000 		.4byte	.LFE36-.LFB36
 9693 0130 00000000 		.4byte	.LFB37
 9694 0134 36000000 		.4byte	.LFE37-.LFB37
 9695 0138 00000000 		.4byte	.LFB38
 9696 013c 38000000 		.4byte	.LFE38-.LFB38
 9697 0140 00000000 		.4byte	.LFB39
 9698 0144 20000000 		.4byte	.LFE39-.LFB39
 9699 0148 00000000 		.4byte	.LFB40
 9700 014c 48000000 		.4byte	.LFE40-.LFB40
 9701 0150 00000000 		.4byte	.LFB41
 9702 0154 1C000000 		.4byte	.LFE41-.LFB41
 9703 0158 00000000 		.4byte	.LFB42
 9704 015c EC000000 		.4byte	.LFE42-.LFB42
 9705 0160 00000000 		.4byte	.LFB43
 9706 0164 D8000000 		.4byte	.LFE43-.LFB43
 9707 0168 00000000 		.4byte	.LFB44
 9708 016c 30000000 		.4byte	.LFE44-.LFB44
 9709 0170 00000000 		.4byte	.LFB45
 9710 0174 28000000 		.4byte	.LFE45-.LFB45
 9711 0178 00000000 		.4byte	0
 9712 017c 00000000 		.4byte	0
 9713              		.section	.debug_ranges,"",%progbits
 9714              	.Ldebug_ranges0:
 9715 0000 00000000 		.4byte	.LFB1
 9716 0004 64010000 		.4byte	.LFE1
 9717 0008 00000000 		.4byte	.LFB2
 9718 000c E8000000 		.4byte	.LFE2
 9719 0010 00000000 		.4byte	.LFB3
 9720 0014 E4000000 		.4byte	.LFE3
 9721 0018 00000000 		.4byte	.LFB4
 9722 001c 88000000 		.4byte	.LFE4
 9723 0020 00000000 		.4byte	.LFB5
 9724 0024 34000000 		.4byte	.LFE5
 9725 0028 00000000 		.4byte	.LFB6
 9726 002c 3C010000 		.4byte	.LFE6
 9727 0030 00000000 		.4byte	.LFB7
 9728 0034 F4000000 		.4byte	.LFE7
 9729 0038 00000000 		.4byte	.LFB8
 9730 003c 64000000 		.4byte	.LFE8
 9731 0040 00000000 		.4byte	.LFB9
 9732 0044 9C000000 		.4byte	.LFE9
 9733 0048 00000000 		.4byte	.LFB10
 9734 004c B8000000 		.4byte	.LFE10
ARM GAS  /tmp/ccTV2SzP.s 			page 239


 9735 0050 00000000 		.4byte	.LFB11
 9736 0054 68000000 		.4byte	.LFE11
 9737 0058 00000000 		.4byte	.LFB12
 9738 005c 1C000000 		.4byte	.LFE12
 9739 0060 00000000 		.4byte	.LFB13
 9740 0064 1C000000 		.4byte	.LFE13
 9741 0068 00000000 		.4byte	.LFB14
 9742 006c 08010000 		.4byte	.LFE14
 9743 0070 00000000 		.4byte	.LFB15
 9744 0074 24000000 		.4byte	.LFE15
 9745 0078 00000000 		.4byte	.LFB16
 9746 007c 2C000000 		.4byte	.LFE16
 9747 0080 00000000 		.4byte	.LFB17
 9748 0084 14000000 		.4byte	.LFE17
 9749 0088 00000000 		.4byte	.LFB18
 9750 008c F4000000 		.4byte	.LFE18
 9751 0090 00000000 		.4byte	.LFB19
 9752 0094 7C010000 		.4byte	.LFE19
 9753 0098 00000000 		.4byte	.LFB20
 9754 009c A4000000 		.4byte	.LFE20
 9755 00a0 00000000 		.4byte	.LFB21
 9756 00a4 90000000 		.4byte	.LFE21
 9757 00a8 00000000 		.4byte	.LFB22
 9758 00ac B0000000 		.4byte	.LFE22
 9759 00b0 00000000 		.4byte	.LFB23
 9760 00b4 B4000000 		.4byte	.LFE23
 9761 00b8 00000000 		.4byte	.LFB24
 9762 00bc B0000000 		.4byte	.LFE24
 9763 00c0 00000000 		.4byte	.LFB25
 9764 00c4 34000000 		.4byte	.LFE25
 9765 00c8 00000000 		.4byte	.LFB26
 9766 00cc A0000000 		.4byte	.LFE26
 9767 00d0 00000000 		.4byte	.LFB27
 9768 00d4 18000000 		.4byte	.LFE27
 9769 00d8 00000000 		.4byte	.LFB28
 9770 00dc 2A000000 		.4byte	.LFE28
 9771 00e0 00000000 		.4byte	.LFB29
 9772 00e4 24000000 		.4byte	.LFE29
 9773 00e8 00000000 		.4byte	.LFB30
 9774 00ec 0E000000 		.4byte	.LFE30
 9775 00f0 00000000 		.4byte	.LFB31
 9776 00f4 9A000000 		.4byte	.LFE31
 9777 00f8 00000000 		.4byte	.LFB32
 9778 00fc 80000000 		.4byte	.LFE32
 9779 0100 00000000 		.4byte	.LFB33
 9780 0104 78000000 		.4byte	.LFE33
 9781 0108 00000000 		.4byte	.LFB34
 9782 010c 6C000000 		.4byte	.LFE34
 9783 0110 00000000 		.4byte	.LFB35
 9784 0114 62000000 		.4byte	.LFE35
 9785 0118 00000000 		.4byte	.LFB36
 9786 011c 16010000 		.4byte	.LFE36
 9787 0120 00000000 		.4byte	.LFB37
 9788 0124 36000000 		.4byte	.LFE37
 9789 0128 00000000 		.4byte	.LFB38
 9790 012c 38000000 		.4byte	.LFE38
 9791 0130 00000000 		.4byte	.LFB39
ARM GAS  /tmp/ccTV2SzP.s 			page 240


 9792 0134 20000000 		.4byte	.LFE39
 9793 0138 00000000 		.4byte	.LFB40
 9794 013c 48000000 		.4byte	.LFE40
 9795 0140 00000000 		.4byte	.LFB41
 9796 0144 1C000000 		.4byte	.LFE41
 9797 0148 00000000 		.4byte	.LFB42
 9798 014c EC000000 		.4byte	.LFE42
 9799 0150 00000000 		.4byte	.LFB43
 9800 0154 D8000000 		.4byte	.LFE43
 9801 0158 00000000 		.4byte	.LFB44
 9802 015c 30000000 		.4byte	.LFE44
 9803 0160 00000000 		.4byte	.LFB45
 9804 0164 28000000 		.4byte	.LFE45
 9805 0168 00000000 		.4byte	0
 9806 016c 00000000 		.4byte	0
 9807              		.section	.debug_macro,"",%progbits
 9808              	.Ldebug_macro0:
 9809 0000 0400     		.2byte	0x4
 9810 0002 02       		.byte	0x2
 9811 0003 00000000 		.4byte	.Ldebug_line0
 9812 0007 07       		.byte	0x7
 9813 0008 00000000 		.4byte	.Ldebug_macro1
 9814 000c 03       		.byte	0x3
 9815 000d 00       		.uleb128 0
 9816 000e 01       		.uleb128 0x1
 9817 000f 03       		.byte	0x3
 9818 0010 43       		.uleb128 0x43
 9819 0011 08       		.uleb128 0x8
 9820 0012 05       		.byte	0x5
 9821 0013 08       		.uleb128 0x8
 9822 0014 19940000 		.4byte	.LASF434
 9823              		.file 14 "/usr/arm-none-eabi/include/machine/ieeefp.h"
 9824 0018 03       		.byte	0x3
 9825 0019 0A       		.uleb128 0xa
 9826 001a 0E       		.uleb128 0xe
 9827 001b 05       		.byte	0x5
 9828 001c 3C       		.uleb128 0x3c
 9829 001d 6D6B0000 		.4byte	.LASF435
 9830 0021 04       		.byte	0x4
 9831              		.file 15 "/usr/arm-none-eabi/include/_ansi.h"
 9832 0022 03       		.byte	0x3
 9833 0023 0B       		.uleb128 0xb
 9834 0024 0F       		.uleb128 0xf
 9835 0025 05       		.byte	0x5
 9836 0026 0D       		.uleb128 0xd
 9837 0027 325F0000 		.4byte	.LASF436
 9838              		.file 16 "/usr/arm-none-eabi/include/newlib.h"
 9839 002b 03       		.byte	0x3
 9840 002c 0F       		.uleb128 0xf
 9841 002d 10       		.uleb128 0x10
 9842 002e 05       		.byte	0x5
 9843 002f 08       		.uleb128 0x8
 9844 0030 35160000 		.4byte	.LASF437
 9845              		.file 17 "/usr/arm-none-eabi/include/_newlib_version.h"
 9846 0034 03       		.byte	0x3
 9847 0035 0E       		.uleb128 0xe
 9848 0036 11       		.uleb128 0x11
ARM GAS  /tmp/ccTV2SzP.s 			page 241


 9849 0037 07       		.byte	0x7
 9850 0038 00000000 		.4byte	.Ldebug_macro2
 9851 003c 04       		.byte	0x4
 9852 003d 07       		.byte	0x7
 9853 003e 00000000 		.4byte	.Ldebug_macro3
 9854 0042 04       		.byte	0x4
 9855              		.file 18 "/usr/arm-none-eabi/include/sys/config.h"
 9856 0043 03       		.byte	0x3
 9857 0044 10       		.uleb128 0x10
 9858 0045 12       		.uleb128 0x12
 9859 0046 05       		.byte	0x5
 9860 0047 02       		.uleb128 0x2
 9861 0048 A35A0000 		.4byte	.LASF455
 9862 004c 03       		.byte	0x3
 9863 004d 04       		.uleb128 0x4
 9864 004e 0E       		.uleb128 0xe
 9865 004f 04       		.byte	0x4
 9866              		.file 19 "/usr/arm-none-eabi/include/sys/features.h"
 9867 0050 03       		.byte	0x3
 9868 0051 05       		.uleb128 0x5
 9869 0052 13       		.uleb128 0x13
 9870 0053 07       		.byte	0x7
 9871 0054 00000000 		.4byte	.Ldebug_macro4
 9872 0058 04       		.byte	0x4
 9873 0059 07       		.byte	0x7
 9874 005a 00000000 		.4byte	.Ldebug_macro5
 9875 005e 04       		.byte	0x4
 9876 005f 07       		.byte	0x7
 9877 0060 00000000 		.4byte	.Ldebug_macro6
 9878 0064 04       		.byte	0x4
 9879 0065 07       		.byte	0x7
 9880 0066 00000000 		.4byte	.Ldebug_macro7
 9881 006a 03       		.byte	0x3
 9882 006b 10       		.uleb128 0x10
 9883 006c 03       		.uleb128 0x3
 9884 006d 07       		.byte	0x7
 9885 006e 00000000 		.4byte	.Ldebug_macro8
 9886 0072 04       		.byte	0x4
 9887 0073 03       		.byte	0x3
 9888 0074 12       		.uleb128 0x12
 9889 0075 07       		.uleb128 0x7
 9890 0076 05       		.byte	0x5
 9891 0077 0B       		.uleb128 0xb
 9892 0078 20640000 		.4byte	.LASF549
 9893 007c 03       		.byte	0x3
 9894 007d 0D       		.uleb128 0xd
 9895 007e 0F       		.uleb128 0xf
 9896 007f 04       		.byte	0x4
 9897 0080 03       		.byte	0x3
 9898 0081 0E       		.uleb128 0xe
 9899 0082 03       		.uleb128 0x3
 9900 0083 07       		.byte	0x7
 9901 0084 00000000 		.4byte	.Ldebug_macro9
 9902 0088 04       		.byte	0x4
 9903 0089 03       		.byte	0x3
 9904 008a 0F       		.uleb128 0xf
 9905 008b 06       		.uleb128 0x6
ARM GAS  /tmp/ccTV2SzP.s 			page 242


 9906 008c 05       		.byte	0x5
 9907 008d 14       		.uleb128 0x14
 9908 008e DC480000 		.4byte	.LASF564
 9909              		.file 20 "/usr/arm-none-eabi/include/machine/_types.h"
 9910 0092 03       		.byte	0x3
 9911 0093 18       		.uleb128 0x18
 9912 0094 14       		.uleb128 0x14
 9913 0095 05       		.byte	0x5
 9914 0096 06       		.uleb128 0x6
 9915 0097 396B0000 		.4byte	.LASF565
 9916 009b 03       		.byte	0x3
 9917 009c 07       		.uleb128 0x7
 9918 009d 04       		.uleb128 0x4
 9919 009e 07       		.byte	0x7
 9920 009f 00000000 		.4byte	.Ldebug_macro10
 9921 00a3 04       		.byte	0x4
 9922 00a4 04       		.byte	0x4
 9923 00a5 03       		.byte	0x3
 9924 00a6 19       		.uleb128 0x19
 9925 00a7 05       		.uleb128 0x5
 9926 00a8 07       		.byte	0x7
 9927 00a9 00000000 		.4byte	.Ldebug_macro11
 9928 00ad 04       		.byte	0x4
 9929 00ae 07       		.byte	0x7
 9930 00af 00000000 		.4byte	.Ldebug_macro12
 9931 00b3 03       		.byte	0x3
 9932 00b4 9F01     		.uleb128 0x9f
 9933 00b6 03       		.uleb128 0x3
 9934 00b7 07       		.byte	0x7
 9935 00b8 00000000 		.4byte	.Ldebug_macro13
 9936 00bc 04       		.byte	0x4
 9937 00bd 07       		.byte	0x7
 9938 00be 00000000 		.4byte	.Ldebug_macro14
 9939 00c2 04       		.byte	0x4
 9940 00c3 07       		.byte	0x7
 9941 00c4 00000000 		.4byte	.Ldebug_macro15
 9942 00c8 04       		.byte	0x4
 9943              		.file 21 "/usr/arm-none-eabi/include/sys/cdefs.h"
 9944 00c9 03       		.byte	0x3
 9945 00ca 13       		.uleb128 0x13
 9946 00cb 15       		.uleb128 0x15
 9947 00cc 05       		.byte	0x5
 9948 00cd 29       		.uleb128 0x29
 9949 00ce 6BA40000 		.4byte	.LASF658
 9950 00d2 03       		.byte	0x3
 9951 00d3 2D       		.uleb128 0x2d
 9952 00d4 03       		.uleb128 0x3
 9953 00d5 04       		.byte	0x4
 9954 00d6 07       		.byte	0x7
 9955 00d7 00000000 		.4byte	.Ldebug_macro16
 9956 00db 04       		.byte	0x4
 9957              		.file 22 "/usr/arm-none-eabi/include/machine/stdlib.h"
 9958 00dc 03       		.byte	0x3
 9959 00dd 14       		.uleb128 0x14
 9960 00de 16       		.uleb128 0x16
 9961 00df 05       		.byte	0x5
 9962 00e0 02       		.uleb128 0x2
ARM GAS  /tmp/ccTV2SzP.s 			page 243


 9963 00e1 8F2D0000 		.4byte	.LASF784
 9964 00e5 04       		.byte	0x4
 9965              		.file 23 "/usr/arm-none-eabi/include/alloca.h"
 9966 00e6 03       		.byte	0x3
 9967 00e7 16       		.uleb128 0x16
 9968 00e8 17       		.uleb128 0x17
 9969 00e9 07       		.byte	0x7
 9970 00ea 00000000 		.4byte	.Ldebug_macro17
 9971 00ee 04       		.byte	0x4
 9972 00ef 07       		.byte	0x7
 9973 00f0 00000000 		.4byte	.Ldebug_macro18
 9974 00f4 04       		.byte	0x4
 9975              		.file 24 "/usr/arm-none-eabi/include/string.h"
 9976 00f5 03       		.byte	0x3
 9977 00f6 44       		.uleb128 0x44
 9978 00f7 18       		.uleb128 0x18
 9979 00f8 07       		.byte	0x7
 9980 00f9 00000000 		.4byte	.Ldebug_macro19
 9981 00fd 03       		.byte	0x3
 9982 00fe 11       		.uleb128 0x11
 9983 00ff 03       		.uleb128 0x3
 9984 0100 07       		.byte	0x7
 9985 0101 00000000 		.4byte	.Ldebug_macro20
 9986 0105 04       		.byte	0x4
 9987              		.file 25 "/usr/arm-none-eabi/include/xlocale.h"
 9988 0106 03       		.byte	0x3
 9989 0107 14       		.uleb128 0x14
 9990 0108 19       		.uleb128 0x19
 9991 0109 05       		.byte	0x5
 9992 010a 04       		.uleb128 0x4
 9993 010b 5B330000 		.4byte	.LASF795
 9994 010f 04       		.byte	0x4
 9995              		.file 26 "/usr/arm-none-eabi/include/sys/string.h"
 9996 0110 03       		.byte	0x3
 9997 0111 C001     		.uleb128 0xc0
 9998 0113 1A       		.uleb128 0x1a
 9999 0114 04       		.byte	0x4
 10000 0115 04       		.byte	0x4
 10001 0116 05       		.byte	0x5
 10002 0117 49       		.uleb128 0x49
 10003 0118 75900000 		.4byte	.LASF796
 10004              		.file 27 "FreeRTOS/include/FreeRTOS.h"
 10005 011c 03       		.byte	0x3
 10006 011d 4C       		.uleb128 0x4c
 10007 011e 1B       		.uleb128 0x1b
 10008 011f 05       		.byte	0x5
 10009 0120 43       		.uleb128 0x43
 10010 0121 A0720000 		.4byte	.LASF797
 10011 0125 03       		.byte	0x3
 10012 0126 48       		.uleb128 0x48
 10013 0127 03       		.uleb128 0x3
 10014 0128 04       		.byte	0x4
 10015              		.file 28 "/usr/lib/gcc/arm-none-eabi/7.1.0/include/stdint.h"
 10016 0129 03       		.byte	0x3
 10017 012a 57       		.uleb128 0x57
 10018 012b 1C       		.uleb128 0x1c
 10019              		.file 29 "/usr/arm-none-eabi/include/stdint.h"
ARM GAS  /tmp/ccTV2SzP.s 			page 244


 10020 012c 03       		.byte	0x3
 10021 012d 09       		.uleb128 0x9
 10022 012e 1D       		.uleb128 0x1d
 10023 012f 05       		.byte	0x5
 10024 0130 0A       		.uleb128 0xa
 10025 0131 F9A40000 		.4byte	.LASF798
 10026              		.file 30 "/usr/arm-none-eabi/include/sys/_intsup.h"
 10027 0135 03       		.byte	0x3
 10028 0136 0D       		.uleb128 0xd
 10029 0137 1E       		.uleb128 0x1e
 10030 0138 07       		.byte	0x7
 10031 0139 00000000 		.4byte	.Ldebug_macro21
 10032 013d 04       		.byte	0x4
 10033 013e 03       		.byte	0x3
 10034 013f 0E       		.uleb128 0xe
 10035 0140 09       		.uleb128 0x9
 10036 0141 07       		.byte	0x7
 10037 0142 00000000 		.4byte	.Ldebug_macro22
 10038 0146 04       		.byte	0x4
 10039 0147 07       		.byte	0x7
 10040 0148 00000000 		.4byte	.Ldebug_macro23
 10041 014c 04       		.byte	0x4
 10042 014d 05       		.byte	0x5
 10043 014e 0D       		.uleb128 0xd
 10044 014f D9620000 		.4byte	.LASF913
 10045 0153 04       		.byte	0x4
 10046 0154 03       		.byte	0x3
 10047 0155 5E       		.uleb128 0x5e
 10048 0156 0A       		.uleb128 0xa
 10049 0157 07       		.byte	0x7
 10050 0158 00000000 		.4byte	.Ldebug_macro24
 10051 015c 04       		.byte	0x4
 10052 015d 03       		.byte	0x3
 10053 015e 61       		.uleb128 0x61
 10054 015f 0B       		.uleb128 0xb
 10055 0160 07       		.byte	0x7
 10056 0161 00000000 		.4byte	.Ldebug_macro25
 10057 0165 04       		.byte	0x4
 10058              		.file 31 "FreeRTOS/include/portable.h"
 10059 0166 03       		.byte	0x3
 10060 0167 64       		.uleb128 0x64
 10061 0168 1F       		.uleb128 0x1f
 10062 0169 05       		.byte	0x5
 10063 016a 47       		.uleb128 0x47
 10064 016b 2F2F0000 		.4byte	.LASF967
 10065 016f 03       		.byte	0x3
 10066 0170 C401     		.uleb128 0xc4
 10067 0172 02       		.uleb128 0x2
 10068 0173 07       		.byte	0x7
 10069 0174 00000000 		.4byte	.Ldebug_macro26
 10070 0178 04       		.byte	0x4
 10071 0179 07       		.byte	0x7
 10072 017a 00000000 		.4byte	.Ldebug_macro27
 10073              		.file 32 "FreeRTOS/include/mpu_wrappers.h"
 10074 017e 03       		.byte	0x3
 10075 017f E002     		.uleb128 0x160
 10076 0181 20       		.uleb128 0x20
ARM GAS  /tmp/ccTV2SzP.s 			page 245


 10077 0182 07       		.byte	0x7
 10078 0183 00000000 		.4byte	.Ldebug_macro28
 10079 0187 04       		.byte	0x4
 10080 0188 04       		.byte	0x4
 10081 0189 07       		.byte	0x7
 10082 018a 00000000 		.4byte	.Ldebug_macro29
 10083 018e 04       		.byte	0x4
 10084 018f 03       		.byte	0x3
 10085 0190 4D       		.uleb128 0x4d
 10086 0191 0D       		.uleb128 0xd
 10087 0192 05       		.byte	0x5
 10088 0193 44       		.uleb128 0x44
 10089 0194 5D600000 		.4byte	.LASF1128
 10090 0198 03       		.byte	0x3
 10091 0199 4A       		.uleb128 0x4a
 10092 019a 0C       		.uleb128 0xc
 10093 019b 07       		.byte	0x7
 10094 019c 00000000 		.4byte	.Ldebug_macro30
 10095 01a0 04       		.byte	0x4
 10096 01a1 07       		.byte	0x7
 10097 01a2 00000000 		.4byte	.Ldebug_macro31
 10098 01a6 04       		.byte	0x4
 10099              		.file 33 "FreeRTOS/include/timers.h"
 10100 01a7 03       		.byte	0x3
 10101 01a8 4E       		.uleb128 0x4e
 10102 01a9 21       		.uleb128 0x21
 10103 01aa 05       		.byte	0x5
 10104 01ab 44       		.uleb128 0x44
 10105 01ac FF100000 		.4byte	.LASF1161
 10106 01b0 03       		.byte	0x3
 10107 01b1 4C       		.uleb128 0x4c
 10108 01b2 0D       		.uleb128 0xd
 10109 01b3 04       		.byte	0x4
 10110 01b4 07       		.byte	0x7
 10111 01b5 00000000 		.4byte	.Ldebug_macro32
 10112 01b9 04       		.byte	0x4
 10113              		.file 34 "FreeRTOS/include/StackMacros.h"
 10114 01ba 03       		.byte	0x3
 10115 01bb 4F       		.uleb128 0x4f
 10116 01bc 22       		.uleb128 0x22
 10117 01bd 07       		.byte	0x7
 10118 01be 00000000 		.4byte	.Ldebug_macro33
 10119 01c2 04       		.byte	0x4
 10120 01c3 06       		.byte	0x6
 10121 01c4 55       		.uleb128 0x55
 10122 01c5 C17E0000 		.4byte	.LASF1187
 10123 01c9 05       		.byte	0x5
 10124 01ca 69       		.uleb128 0x69
 10125 01cb C0700000 		.4byte	.LASF1188
 10126 01cf 05       		.byte	0x5
 10127 01d0 70       		.uleb128 0x70
 10128 01d1 2E980000 		.4byte	.LASF1189
 10129 01d5 05       		.byte	0x5
 10130 01d6 FD01     		.uleb128 0xfd
 10131 01d8 34120000 		.4byte	.LASF1190
 10132 01dc 05       		.byte	0x5
 10133 01dd 8202     		.uleb128 0x102
ARM GAS  /tmp/ccTV2SzP.s 			page 246


 10134 01df B01E0000 		.4byte	.LASF1191
 10135 01e3 05       		.byte	0x5
 10136 01e4 8302     		.uleb128 0x103
 10137 01e6 E33D0000 		.4byte	.LASF1192
 10138 01ea 05       		.byte	0x5
 10139 01eb 8402     		.uleb128 0x104
 10140 01ed AA210000 		.4byte	.LASF1193
 10141 01f1 05       		.byte	0x5
 10142 01f2 8502     		.uleb128 0x105
 10143 01f4 77030000 		.4byte	.LASF1194
 10144 01f8 05       		.byte	0x5
 10145 01f9 B802     		.uleb128 0x138
 10146 01fb C35F0000 		.4byte	.LASF1195
 10147 01ff 05       		.byte	0x5
 10148 0200 BC02     		.uleb128 0x13c
 10149 0202 D2050000 		.4byte	.LASF1196
 10150 0206 05       		.byte	0x5
 10151 0207 CB02     		.uleb128 0x14b
 10152 0209 23320000 		.4byte	.LASF1197
 10153 020d 05       		.byte	0x5
 10154 020e D902     		.uleb128 0x159
 10155 0210 E7340000 		.4byte	.LASF1198
 10156 0214 05       		.byte	0x5
 10157 0215 ED02     		.uleb128 0x16d
 10158 0217 AF820000 		.4byte	.LASF1199
 10159 021b 05       		.byte	0x5
 10160 021c F902     		.uleb128 0x179
 10161 021e 2F100000 		.4byte	.LASF1200
 10162 0222 05       		.byte	0x5
 10163 0223 8603     		.uleb128 0x186
 10164 0225 0E7D0000 		.4byte	.LASF1201
 10165 0229 04       		.byte	0x4
 10166 022a 00       		.byte	0
 10167              		.section	.debug_macro,"G",%progbits,wm4.0.575902ec30e623f99ccb935f1e727f1f,comdat
 10168              	.Ldebug_macro1:
 10169 0000 0400     		.2byte	0x4
 10170 0002 00       		.byte	0
 10171 0003 05       		.byte	0x5
 10172 0004 00       		.uleb128 0
 10173 0005 0E670000 		.4byte	.LASF0
 10174 0009 05       		.byte	0x5
 10175 000a 00       		.uleb128 0
 10176 000b 2D0E0000 		.4byte	.LASF1
 10177 000f 05       		.byte	0x5
 10178 0010 00       		.uleb128 0
 10179 0011 EB480000 		.4byte	.LASF2
 10180 0015 05       		.byte	0x5
 10181 0016 00       		.uleb128 0
 10182 0017 17820000 		.4byte	.LASF3
 10183 001b 05       		.byte	0x5
 10184 001c 00       		.uleb128 0
 10185 001d FC240000 		.4byte	.LASF4
 10186 0021 05       		.byte	0x5
 10187 0022 00       		.uleb128 0
 10188 0023 1B140000 		.4byte	.LASF5
 10189 0027 05       		.byte	0x5
 10190 0028 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 247


 10191 0029 A28E0000 		.4byte	.LASF6
 10192 002d 05       		.byte	0x5
 10193 002e 00       		.uleb128 0
 10194 002f 4A2A0000 		.4byte	.LASF7
 10195 0033 05       		.byte	0x5
 10196 0034 00       		.uleb128 0
 10197 0035 63450000 		.4byte	.LASF8
 10198 0039 05       		.byte	0x5
 10199 003a 00       		.uleb128 0
 10200 003b 02500000 		.4byte	.LASF9
 10201 003f 05       		.byte	0x5
 10202 0040 00       		.uleb128 0
 10203 0041 F2A70000 		.4byte	.LASF10
 10204 0045 05       		.byte	0x5
 10205 0046 00       		.uleb128 0
 10206 0047 ED070000 		.4byte	.LASF11
 10207 004b 05       		.byte	0x5
 10208 004c 00       		.uleb128 0
 10209 004d 617B0000 		.4byte	.LASF12
 10210 0051 05       		.byte	0x5
 10211 0052 00       		.uleb128 0
 10212 0053 FA9A0000 		.4byte	.LASF13
 10213 0057 05       		.byte	0x5
 10214 0058 00       		.uleb128 0
 10215 0059 72200000 		.4byte	.LASF14
 10216 005d 05       		.byte	0x5
 10217 005e 00       		.uleb128 0
 10218 005f 3C090000 		.4byte	.LASF15
 10219 0063 05       		.byte	0x5
 10220 0064 00       		.uleb128 0
 10221 0065 AB2C0000 		.4byte	.LASF16
 10222 0069 05       		.byte	0x5
 10223 006a 00       		.uleb128 0
 10224 006b E4270000 		.4byte	.LASF17
 10225 006f 05       		.byte	0x5
 10226 0070 00       		.uleb128 0
 10227 0071 48210000 		.4byte	.LASF18
 10228 0075 05       		.byte	0x5
 10229 0076 00       		.uleb128 0
 10230 0077 B42E0000 		.4byte	.LASF19
 10231 007b 05       		.byte	0x5
 10232 007c 00       		.uleb128 0
 10233 007d FD970000 		.4byte	.LASF20
 10234 0081 05       		.byte	0x5
 10235 0082 00       		.uleb128 0
 10236 0083 125C0000 		.4byte	.LASF21
 10237 0087 05       		.byte	0x5
 10238 0088 00       		.uleb128 0
 10239 0089 D86E0000 		.4byte	.LASF22
 10240 008d 05       		.byte	0x5
 10241 008e 00       		.uleb128 0
 10242 008f EE760000 		.4byte	.LASF23
 10243 0093 05       		.byte	0x5
 10244 0094 00       		.uleb128 0
 10245 0095 A2130000 		.4byte	.LASF24
 10246 0099 05       		.byte	0x5
 10247 009a 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 248


 10248 009b 890A0000 		.4byte	.LASF25
 10249 009f 05       		.byte	0x5
 10250 00a0 00       		.uleb128 0
 10251 00a1 B85E0000 		.4byte	.LASF26
 10252 00a5 05       		.byte	0x5
 10253 00a6 00       		.uleb128 0
 10254 00a7 5A670000 		.4byte	.LASF27
 10255 00ab 05       		.byte	0x5
 10256 00ac 00       		.uleb128 0
 10257 00ad E01C0000 		.4byte	.LASF28
 10258 00b1 05       		.byte	0x5
 10259 00b2 00       		.uleb128 0
 10260 00b3 A30A0000 		.4byte	.LASF29
 10261 00b7 05       		.byte	0x5
 10262 00b8 00       		.uleb128 0
 10263 00b9 183A0000 		.4byte	.LASF30
 10264 00bd 05       		.byte	0x5
 10265 00be 00       		.uleb128 0
 10266 00bf 660B0000 		.4byte	.LASF31
 10267 00c3 05       		.byte	0x5
 10268 00c4 00       		.uleb128 0
 10269 00c5 42600000 		.4byte	.LASF32
 10270 00c9 05       		.byte	0x5
 10271 00ca 00       		.uleb128 0
 10272 00cb D0830000 		.4byte	.LASF33
 10273 00cf 05       		.byte	0x5
 10274 00d0 00       		.uleb128 0
 10275 00d1 87630000 		.4byte	.LASF34
 10276 00d5 05       		.byte	0x5
 10277 00d6 00       		.uleb128 0
 10278 00d7 6B880000 		.4byte	.LASF35
 10279 00db 05       		.byte	0x5
 10280 00dc 00       		.uleb128 0
 10281 00dd 671F0000 		.4byte	.LASF36
 10282 00e1 05       		.byte	0x5
 10283 00e2 00       		.uleb128 0
 10284 00e3 710E0000 		.4byte	.LASF37
 10285 00e7 05       		.byte	0x5
 10286 00e8 00       		.uleb128 0
 10287 00e9 140B0000 		.4byte	.LASF38
 10288 00ed 05       		.byte	0x5
 10289 00ee 00       		.uleb128 0
 10290 00ef 870C0000 		.4byte	.LASF39
 10291 00f3 05       		.byte	0x5
 10292 00f4 00       		.uleb128 0
 10293 00f5 05A80000 		.4byte	.LASF40
 10294 00f9 05       		.byte	0x5
 10295 00fa 00       		.uleb128 0
 10296 00fb 925B0000 		.4byte	.LASF41
 10297 00ff 05       		.byte	0x5
 10298 0100 00       		.uleb128 0
 10299 0101 DC670000 		.4byte	.LASF42
 10300 0105 05       		.byte	0x5
 10301 0106 00       		.uleb128 0
 10302 0107 0D490000 		.4byte	.LASF43
 10303 010b 05       		.byte	0x5
 10304 010c 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 249


 10305 010d 9E990000 		.4byte	.LASF44
 10306 0111 05       		.byte	0x5
 10307 0112 00       		.uleb128 0
 10308 0113 7A230000 		.4byte	.LASF45
 10309 0117 05       		.byte	0x5
 10310 0118 00       		.uleb128 0
 10311 0119 F51C0000 		.4byte	.LASF46
 10312 011d 05       		.byte	0x5
 10313 011e 00       		.uleb128 0
 10314 011f A69F0000 		.4byte	.LASF47
 10315 0123 05       		.byte	0x5
 10316 0124 00       		.uleb128 0
 10317 0125 F8740000 		.4byte	.LASF48
 10318 0129 05       		.byte	0x5
 10319 012a 00       		.uleb128 0
 10320 012b FDAA0000 		.4byte	.LASF49
 10321 012f 05       		.byte	0x5
 10322 0130 00       		.uleb128 0
 10323 0131 69190000 		.4byte	.LASF50
 10324 0135 05       		.byte	0x5
 10325 0136 00       		.uleb128 0
 10326 0137 2F4B0000 		.4byte	.LASF51
 10327 013b 05       		.byte	0x5
 10328 013c 00       		.uleb128 0
 10329 013d 87820000 		.4byte	.LASF52
 10330 0141 05       		.byte	0x5
 10331 0142 00       		.uleb128 0
 10332 0143 044E0000 		.4byte	.LASF53
 10333 0147 05       		.byte	0x5
 10334 0148 00       		.uleb128 0
 10335 0149 1D1C0000 		.4byte	.LASF54
 10336 014d 05       		.byte	0x5
 10337 014e 00       		.uleb128 0
 10338 014f 41790000 		.4byte	.LASF55
 10339 0153 05       		.byte	0x5
 10340 0154 00       		.uleb128 0
 10341 0155 C0510000 		.4byte	.LASF56
 10342 0159 05       		.byte	0x5
 10343 015a 00       		.uleb128 0
 10344 015b DB0E0000 		.4byte	.LASF57
 10345 015f 05       		.byte	0x5
 10346 0160 00       		.uleb128 0
 10347 0161 7B4A0000 		.4byte	.LASF58
 10348 0165 05       		.byte	0x5
 10349 0166 00       		.uleb128 0
 10350 0167 3B9D0000 		.4byte	.LASF59
 10351 016b 05       		.byte	0x5
 10352 016c 00       		.uleb128 0
 10353 016d A6270000 		.4byte	.LASF60
 10354 0171 05       		.byte	0x5
 10355 0172 00       		.uleb128 0
 10356 0173 A8300000 		.4byte	.LASF61
 10357 0177 05       		.byte	0x5
 10358 0178 00       		.uleb128 0
 10359 0179 57880000 		.4byte	.LASF62
 10360 017d 05       		.byte	0x5
 10361 017e 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 250


 10362 017f 8E880000 		.4byte	.LASF63
 10363 0183 05       		.byte	0x5
 10364 0184 00       		.uleb128 0
 10365 0185 23460000 		.4byte	.LASF64
 10366 0189 05       		.byte	0x5
 10367 018a 00       		.uleb128 0
 10368 018b 7C380000 		.4byte	.LASF65
 10369 018f 05       		.byte	0x5
 10370 0190 00       		.uleb128 0
 10371 0191 65360000 		.4byte	.LASF66
 10372 0195 05       		.byte	0x5
 10373 0196 00       		.uleb128 0
 10374 0197 AB640000 		.4byte	.LASF67
 10375 019b 05       		.byte	0x5
 10376 019c 00       		.uleb128 0
 10377 019d CA770000 		.4byte	.LASF68
 10378 01a1 05       		.byte	0x5
 10379 01a2 00       		.uleb128 0
 10380 01a3 E6AA0000 		.4byte	.LASF69
 10381 01a7 05       		.byte	0x5
 10382 01a8 00       		.uleb128 0
 10383 01a9 3EA40000 		.4byte	.LASF70
 10384 01ad 05       		.byte	0x5
 10385 01ae 00       		.uleb128 0
 10386 01af 67700000 		.4byte	.LASF71
 10387 01b3 05       		.byte	0x5
 10388 01b4 00       		.uleb128 0
 10389 01b5 14080000 		.4byte	.LASF72
 10390 01b9 05       		.byte	0x5
 10391 01ba 00       		.uleb128 0
 10392 01bb F5560000 		.4byte	.LASF73
 10393 01bf 05       		.byte	0x5
 10394 01c0 00       		.uleb128 0
 10395 01c1 E89E0000 		.4byte	.LASF74
 10396 01c5 05       		.byte	0x5
 10397 01c6 00       		.uleb128 0
 10398 01c7 799E0000 		.4byte	.LASF75
 10399 01cb 05       		.byte	0x5
 10400 01cc 00       		.uleb128 0
 10401 01cd 60050000 		.4byte	.LASF76
 10402 01d1 05       		.byte	0x5
 10403 01d2 00       		.uleb128 0
 10404 01d3 8CA30000 		.4byte	.LASF77
 10405 01d7 05       		.byte	0x5
 10406 01d8 00       		.uleb128 0
 10407 01d9 264A0000 		.4byte	.LASF78
 10408 01dd 05       		.byte	0x5
 10409 01de 00       		.uleb128 0
 10410 01df 816A0000 		.4byte	.LASF79
 10411 01e3 05       		.byte	0x5
 10412 01e4 00       		.uleb128 0
 10413 01e5 88930000 		.4byte	.LASF80
 10414 01e9 05       		.byte	0x5
 10415 01ea 00       		.uleb128 0
 10416 01eb 0A560000 		.4byte	.LASF81
 10417 01ef 05       		.byte	0x5
 10418 01f0 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 251


 10419 01f1 23590000 		.4byte	.LASF82
 10420 01f5 05       		.byte	0x5
 10421 01f6 00       		.uleb128 0
 10422 01f7 E5A50000 		.4byte	.LASF83
 10423 01fb 05       		.byte	0x5
 10424 01fc 00       		.uleb128 0
 10425 01fd 805B0000 		.4byte	.LASF84
 10426 0201 05       		.byte	0x5
 10427 0202 00       		.uleb128 0
 10428 0203 CD140000 		.4byte	.LASF85
 10429 0207 05       		.byte	0x5
 10430 0208 00       		.uleb128 0
 10431 0209 2B9E0000 		.4byte	.LASF86
 10432 020d 05       		.byte	0x5
 10433 020e 00       		.uleb128 0
 10434 020f AE050000 		.4byte	.LASF87
 10435 0213 05       		.byte	0x5
 10436 0214 00       		.uleb128 0
 10437 0215 1E5B0000 		.4byte	.LASF88
 10438 0219 05       		.byte	0x5
 10439 021a 00       		.uleb128 0
 10440 021b 7DAA0000 		.4byte	.LASF89
 10441 021f 05       		.byte	0x5
 10442 0220 00       		.uleb128 0
 10443 0221 C81C0000 		.4byte	.LASF90
 10444 0225 05       		.byte	0x5
 10445 0226 00       		.uleb128 0
 10446 0227 270A0000 		.4byte	.LASF91
 10447 022b 05       		.byte	0x5
 10448 022c 00       		.uleb128 0
 10449 022d 1B900000 		.4byte	.LASF92
 10450 0231 05       		.byte	0x5
 10451 0232 00       		.uleb128 0
 10452 0233 91180000 		.4byte	.LASF93
 10453 0237 05       		.byte	0x5
 10454 0238 00       		.uleb128 0
 10455 0239 91940000 		.4byte	.LASF94
 10456 023d 05       		.byte	0x5
 10457 023e 00       		.uleb128 0
 10458 023f A7470000 		.4byte	.LASF95
 10459 0243 05       		.byte	0x5
 10460 0244 00       		.uleb128 0
 10461 0245 86920000 		.4byte	.LASF96
 10462 0249 05       		.byte	0x5
 10463 024a 00       		.uleb128 0
 10464 024b 584B0000 		.4byte	.LASF97
 10465 024f 05       		.byte	0x5
 10466 0250 00       		.uleb128 0
 10467 0251 FD630000 		.4byte	.LASF98
 10468 0255 05       		.byte	0x5
 10469 0256 00       		.uleb128 0
 10470 0257 1A340000 		.4byte	.LASF99
 10471 025b 05       		.byte	0x5
 10472 025c 00       		.uleb128 0
 10473 025d 3B2B0000 		.4byte	.LASF100
 10474 0261 05       		.byte	0x5
 10475 0262 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 252


 10476 0263 CB430000 		.4byte	.LASF101
 10477 0267 05       		.byte	0x5
 10478 0268 00       		.uleb128 0
 10479 0269 6F430000 		.4byte	.LASF102
 10480 026d 05       		.byte	0x5
 10481 026e 00       		.uleb128 0
 10482 026f 1B450000 		.4byte	.LASF103
 10483 0273 05       		.byte	0x5
 10484 0274 00       		.uleb128 0
 10485 0275 0E720000 		.4byte	.LASF104
 10486 0279 05       		.byte	0x5
 10487 027a 00       		.uleb128 0
 10488 027b 329F0000 		.4byte	.LASF105
 10489 027f 05       		.byte	0x5
 10490 0280 00       		.uleb128 0
 10491 0281 4F370000 		.4byte	.LASF106
 10492 0285 05       		.byte	0x5
 10493 0286 00       		.uleb128 0
 10494 0287 61A60000 		.4byte	.LASF107
 10495 028b 05       		.byte	0x5
 10496 028c 00       		.uleb128 0
 10497 028d F4400000 		.4byte	.LASF108
 10498 0291 05       		.byte	0x5
 10499 0292 00       		.uleb128 0
 10500 0293 105E0000 		.4byte	.LASF109
 10501 0297 05       		.byte	0x5
 10502 0298 00       		.uleb128 0
 10503 0299 7E130000 		.4byte	.LASF110
 10504 029d 05       		.byte	0x5
 10505 029e 00       		.uleb128 0
 10506 029f 5C210000 		.4byte	.LASF111
 10507 02a3 05       		.byte	0x5
 10508 02a4 00       		.uleb128 0
 10509 02a5 144C0000 		.4byte	.LASF112
 10510 02a9 05       		.byte	0x5
 10511 02aa 00       		.uleb128 0
 10512 02ab D7890000 		.4byte	.LASF113
 10513 02af 05       		.byte	0x5
 10514 02b0 00       		.uleb128 0
 10515 02b1 28470000 		.4byte	.LASF114
 10516 02b5 05       		.byte	0x5
 10517 02b6 00       		.uleb128 0
 10518 02b7 4A140000 		.4byte	.LASF115
 10519 02bb 05       		.byte	0x5
 10520 02bc 00       		.uleb128 0
 10521 02bd 780C0000 		.4byte	.LASF116
 10522 02c1 05       		.byte	0x5
 10523 02c2 00       		.uleb128 0
 10524 02c3 69250000 		.4byte	.LASF117
 10525 02c7 05       		.byte	0x5
 10526 02c8 00       		.uleb128 0
 10527 02c9 358D0000 		.4byte	.LASF118
 10528 02cd 05       		.byte	0x5
 10529 02ce 00       		.uleb128 0
 10530 02cf 99460000 		.4byte	.LASF119
 10531 02d3 05       		.byte	0x5
 10532 02d4 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 253


 10533 02d5 1A390000 		.4byte	.LASF120
 10534 02d9 05       		.byte	0x5
 10535 02da 00       		.uleb128 0
 10536 02db 21760000 		.4byte	.LASF121
 10537 02df 05       		.byte	0x5
 10538 02e0 00       		.uleb128 0
 10539 02e1 ED4D0000 		.4byte	.LASF122
 10540 02e5 05       		.byte	0x5
 10541 02e6 00       		.uleb128 0
 10542 02e7 C4960000 		.4byte	.LASF123
 10543 02eb 05       		.byte	0x5
 10544 02ec 00       		.uleb128 0
 10545 02ed E6640000 		.4byte	.LASF124
 10546 02f1 05       		.byte	0x5
 10547 02f2 00       		.uleb128 0
 10548 02f3 837B0000 		.4byte	.LASF125
 10549 02f7 05       		.byte	0x5
 10550 02f8 00       		.uleb128 0
 10551 02f9 44160000 		.4byte	.LASF126
 10552 02fd 05       		.byte	0x5
 10553 02fe 00       		.uleb128 0
 10554 02ff 2C2A0000 		.4byte	.LASF127
 10555 0303 05       		.byte	0x5
 10556 0304 00       		.uleb128 0
 10557 0305 B6970000 		.4byte	.LASF128
 10558 0309 05       		.byte	0x5
 10559 030a 00       		.uleb128 0
 10560 030b D41A0000 		.4byte	.LASF129
 10561 030f 05       		.byte	0x5
 10562 0310 00       		.uleb128 0
 10563 0311 BD120000 		.4byte	.LASF130
 10564 0315 05       		.byte	0x5
 10565 0316 00       		.uleb128 0
 10566 0317 7A150000 		.4byte	.LASF131
 10567 031b 05       		.byte	0x5
 10568 031c 00       		.uleb128 0
 10569 031d E0160000 		.4byte	.LASF132
 10570 0321 05       		.byte	0x5
 10571 0322 00       		.uleb128 0
 10572 0323 35200000 		.4byte	.LASF133
 10573 0327 05       		.byte	0x5
 10574 0328 00       		.uleb128 0
 10575 0329 5D590000 		.4byte	.LASF134
 10576 032d 05       		.byte	0x5
 10577 032e 00       		.uleb128 0
 10578 032f 5B170000 		.4byte	.LASF135
 10579 0333 05       		.byte	0x5
 10580 0334 00       		.uleb128 0
 10581 0335 D6590000 		.4byte	.LASF136
 10582 0339 05       		.byte	0x5
 10583 033a 00       		.uleb128 0
 10584 033b 80400000 		.4byte	.LASF137
 10585 033f 05       		.byte	0x5
 10586 0340 00       		.uleb128 0
 10587 0341 C2280000 		.4byte	.LASF138
 10588 0345 05       		.byte	0x5
 10589 0346 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 254


 10590 0347 AA480000 		.4byte	.LASF139
 10591 034b 05       		.byte	0x5
 10592 034c 00       		.uleb128 0
 10593 034d 2F640000 		.4byte	.LASF140
 10594 0351 05       		.byte	0x5
 10595 0352 00       		.uleb128 0
 10596 0353 EF490000 		.4byte	.LASF141
 10597 0357 05       		.byte	0x5
 10598 0358 00       		.uleb128 0
 10599 0359 3E410000 		.4byte	.LASF142
 10600 035d 05       		.byte	0x5
 10601 035e 00       		.uleb128 0
 10602 035f EE570000 		.4byte	.LASF143
 10603 0363 05       		.byte	0x5
 10604 0364 00       		.uleb128 0
 10605 0365 39500000 		.4byte	.LASF144
 10606 0369 05       		.byte	0x5
 10607 036a 00       		.uleb128 0
 10608 036b E8260000 		.4byte	.LASF145
 10609 036f 05       		.byte	0x5
 10610 0370 00       		.uleb128 0
 10611 0371 54620000 		.4byte	.LASF146
 10612 0375 05       		.byte	0x5
 10613 0376 00       		.uleb128 0
 10614 0377 8D770000 		.4byte	.LASF147
 10615 037b 05       		.byte	0x5
 10616 037c 00       		.uleb128 0
 10617 037d 5E200000 		.4byte	.LASF148
 10618 0381 05       		.byte	0x5
 10619 0382 00       		.uleb128 0
 10620 0383 49280000 		.4byte	.LASF149
 10621 0387 05       		.byte	0x5
 10622 0388 00       		.uleb128 0
 10623 0389 F9220000 		.4byte	.LASF150
 10624 038d 05       		.byte	0x5
 10625 038e 00       		.uleb128 0
 10626 038f 2A560000 		.4byte	.LASF151
 10627 0393 05       		.byte	0x5
 10628 0394 00       		.uleb128 0
 10629 0395 342D0000 		.4byte	.LASF152
 10630 0399 05       		.byte	0x5
 10631 039a 00       		.uleb128 0
 10632 039b 72390000 		.4byte	.LASF153
 10633 039f 05       		.byte	0x5
 10634 03a0 00       		.uleb128 0
 10635 03a1 7B370000 		.4byte	.LASF154
 10636 03a5 05       		.byte	0x5
 10637 03a6 00       		.uleb128 0
 10638 03a7 FF0A0000 		.4byte	.LASF155
 10639 03ab 05       		.byte	0x5
 10640 03ac 00       		.uleb128 0
 10641 03ad 41470000 		.4byte	.LASF156
 10642 03b1 05       		.byte	0x5
 10643 03b2 00       		.uleb128 0
 10644 03b3 CE000000 		.4byte	.LASF157
 10645 03b7 05       		.byte	0x5
 10646 03b8 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 255


 10647 03b9 AEAA0000 		.4byte	.LASF158
 10648 03bd 05       		.byte	0x5
 10649 03be 00       		.uleb128 0
 10650 03bf 0C890000 		.4byte	.LASF159
 10651 03c3 05       		.byte	0x5
 10652 03c4 00       		.uleb128 0
 10653 03c5 68720000 		.4byte	.LASF160
 10654 03c9 05       		.byte	0x5
 10655 03ca 00       		.uleb128 0
 10656 03cb 42A80000 		.4byte	.LASF161
 10657 03cf 05       		.byte	0x5
 10658 03d0 00       		.uleb128 0
 10659 03d1 DF4F0000 		.4byte	.LASF162
 10660 03d5 05       		.byte	0x5
 10661 03d6 00       		.uleb128 0
 10662 03d7 60090000 		.4byte	.LASF163
 10663 03db 05       		.byte	0x5
 10664 03dc 00       		.uleb128 0
 10665 03dd 7C910000 		.4byte	.LASF164
 10666 03e1 05       		.byte	0x5
 10667 03e2 00       		.uleb128 0
 10668 03e3 08A00000 		.4byte	.LASF165
 10669 03e7 05       		.byte	0x5
 10670 03e8 00       		.uleb128 0
 10671 03e9 D49D0000 		.4byte	.LASF166
 10672 03ed 05       		.byte	0x5
 10673 03ee 00       		.uleb128 0
 10674 03ef BB460000 		.4byte	.LASF167
 10675 03f3 05       		.byte	0x5
 10676 03f4 00       		.uleb128 0
 10677 03f5 66610000 		.4byte	.LASF168
 10678 03f9 05       		.byte	0x5
 10679 03fa 00       		.uleb128 0
 10680 03fb D2340000 		.4byte	.LASF169
 10681 03ff 05       		.byte	0x5
 10682 0400 00       		.uleb128 0
 10683 0401 A48F0000 		.4byte	.LASF170
 10684 0405 05       		.byte	0x5
 10685 0406 00       		.uleb128 0
 10686 0407 A9850000 		.4byte	.LASF171
 10687 040b 05       		.byte	0x5
 10688 040c 00       		.uleb128 0
 10689 040d 330C0000 		.4byte	.LASF172
 10690 0411 05       		.byte	0x5
 10691 0412 00       		.uleb128 0
 10692 0413 B59D0000 		.4byte	.LASF173
 10693 0417 05       		.byte	0x5
 10694 0418 00       		.uleb128 0
 10695 0419 86340000 		.4byte	.LASF174
 10696 041d 05       		.byte	0x5
 10697 041e 00       		.uleb128 0
 10698 041f 836B0000 		.4byte	.LASF175
 10699 0423 05       		.byte	0x5
 10700 0424 00       		.uleb128 0
 10701 0425 CF2B0000 		.4byte	.LASF176
 10702 0429 05       		.byte	0x5
 10703 042a 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 256


 10704 042b A9600000 		.4byte	.LASF177
 10705 042f 05       		.byte	0x5
 10706 0430 00       		.uleb128 0
 10707 0431 38000000 		.4byte	.LASF178
 10708 0435 05       		.byte	0x5
 10709 0436 00       		.uleb128 0
 10710 0437 8B3E0000 		.4byte	.LASF179
 10711 043b 05       		.byte	0x5
 10712 043c 00       		.uleb128 0
 10713 043d A6370000 		.4byte	.LASF180
 10714 0441 05       		.byte	0x5
 10715 0442 00       		.uleb128 0
 10716 0443 5D8B0000 		.4byte	.LASF181
 10717 0447 05       		.byte	0x5
 10718 0448 00       		.uleb128 0
 10719 0449 874E0000 		.4byte	.LASF182
 10720 044d 05       		.byte	0x5
 10721 044e 00       		.uleb128 0
 10722 044f 3C530000 		.4byte	.LASF183
 10723 0453 05       		.byte	0x5
 10724 0454 00       		.uleb128 0
 10725 0455 15740000 		.4byte	.LASF184
 10726 0459 05       		.byte	0x5
 10727 045a 00       		.uleb128 0
 10728 045b 513D0000 		.4byte	.LASF185
 10729 045f 05       		.byte	0x5
 10730 0460 00       		.uleb128 0
 10731 0461 EF580000 		.4byte	.LASF186
 10732 0465 05       		.byte	0x5
 10733 0466 00       		.uleb128 0
 10734 0467 274D0000 		.4byte	.LASF187
 10735 046b 05       		.byte	0x5
 10736 046c 00       		.uleb128 0
 10737 046d 03730000 		.4byte	.LASF188
 10738 0471 05       		.byte	0x5
 10739 0472 00       		.uleb128 0
 10740 0473 51110000 		.4byte	.LASF189
 10741 0477 05       		.byte	0x5
 10742 0478 00       		.uleb128 0
 10743 0479 CD6D0000 		.4byte	.LASF190
 10744 047d 05       		.byte	0x5
 10745 047e 00       		.uleb128 0
 10746 047f F71D0000 		.4byte	.LASF191
 10747 0483 05       		.byte	0x5
 10748 0484 00       		.uleb128 0
 10749 0485 4D150000 		.4byte	.LASF192
 10750 0489 05       		.byte	0x5
 10751 048a 00       		.uleb128 0
 10752 048b 4E0B0000 		.4byte	.LASF193
 10753 048f 05       		.byte	0x5
 10754 0490 00       		.uleb128 0
 10755 0491 E4880000 		.4byte	.LASF194
 10756 0495 05       		.byte	0x5
 10757 0496 00       		.uleb128 0
 10758 0497 E2800000 		.4byte	.LASF195
 10759 049b 05       		.byte	0x5
 10760 049c 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 257


 10761 049d DF5E0000 		.4byte	.LASF196
 10762 04a1 05       		.byte	0x5
 10763 04a2 00       		.uleb128 0
 10764 04a3 594D0000 		.4byte	.LASF197
 10765 04a7 05       		.byte	0x5
 10766 04a8 00       		.uleb128 0
 10767 04a9 E1960000 		.4byte	.LASF198
 10768 04ad 05       		.byte	0x5
 10769 04ae 00       		.uleb128 0
 10770 04af FE570000 		.4byte	.LASF199
 10771 04b3 05       		.byte	0x5
 10772 04b4 00       		.uleb128 0
 10773 04b5 1C3D0000 		.4byte	.LASF200
 10774 04b9 05       		.byte	0x5
 10775 04ba 00       		.uleb128 0
 10776 04bb 39900000 		.4byte	.LASF201
 10777 04bf 05       		.byte	0x5
 10778 04c0 00       		.uleb128 0
 10779 04c1 A19E0000 		.4byte	.LASF202
 10780 04c5 05       		.byte	0x5
 10781 04c6 00       		.uleb128 0
 10782 04c7 9B140000 		.4byte	.LASF203
 10783 04cb 05       		.byte	0x5
 10784 04cc 00       		.uleb128 0
 10785 04cd 51120000 		.4byte	.LASF204
 10786 04d1 05       		.byte	0x5
 10787 04d2 00       		.uleb128 0
 10788 04d3 7D5A0000 		.4byte	.LASF205
 10789 04d7 05       		.byte	0x5
 10790 04d8 00       		.uleb128 0
 10791 04d9 791C0000 		.4byte	.LASF206
 10792 04dd 05       		.byte	0x5
 10793 04de 00       		.uleb128 0
 10794 04df 33070000 		.4byte	.LASF207
 10795 04e3 05       		.byte	0x5
 10796 04e4 00       		.uleb128 0
 10797 04e5 E00C0000 		.4byte	.LASF208
 10798 04e9 05       		.byte	0x5
 10799 04ea 00       		.uleb128 0
 10800 04eb D65A0000 		.4byte	.LASF209
 10801 04ef 05       		.byte	0x5
 10802 04f0 00       		.uleb128 0
 10803 04f1 B04A0000 		.4byte	.LASF210
 10804 04f5 05       		.byte	0x5
 10805 04f6 00       		.uleb128 0
 10806 04f7 0F010000 		.4byte	.LASF211
 10807 04fb 05       		.byte	0x5
 10808 04fc 00       		.uleb128 0
 10809 04fd 5B630000 		.4byte	.LASF212
 10810 0501 05       		.byte	0x5
 10811 0502 00       		.uleb128 0
 10812 0503 80040000 		.4byte	.LASF213
 10813 0507 05       		.byte	0x5
 10814 0508 00       		.uleb128 0
 10815 0509 6B620000 		.4byte	.LASF214
 10816 050d 05       		.byte	0x5
 10817 050e 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 258


 10818 050f 545D0000 		.4byte	.LASF215
 10819 0513 05       		.byte	0x5
 10820 0514 00       		.uleb128 0
 10821 0515 687A0000 		.4byte	.LASF216
 10822 0519 05       		.byte	0x5
 10823 051a 00       		.uleb128 0
 10824 051b 88210000 		.4byte	.LASF217
 10825 051f 05       		.byte	0x5
 10826 0520 00       		.uleb128 0
 10827 0521 301F0000 		.4byte	.LASF218
 10828 0525 05       		.byte	0x5
 10829 0526 00       		.uleb128 0
 10830 0527 0B460000 		.4byte	.LASF219
 10831 052b 05       		.byte	0x5
 10832 052c 00       		.uleb128 0
 10833 052d C93D0000 		.4byte	.LASF220
 10834 0531 05       		.byte	0x5
 10835 0532 00       		.uleb128 0
 10836 0533 FC1A0000 		.4byte	.LASF221
 10837 0537 05       		.byte	0x5
 10838 0538 00       		.uleb128 0
 10839 0539 8B800000 		.4byte	.LASF222
 10840 053d 05       		.byte	0x5
 10841 053e 00       		.uleb128 0
 10842 053f 495A0000 		.4byte	.LASF223
 10843 0543 05       		.byte	0x5
 10844 0544 00       		.uleb128 0
 10845 0545 7C1B0000 		.4byte	.LASF224
 10846 0549 05       		.byte	0x5
 10847 054a 00       		.uleb128 0
 10848 054b F7270000 		.4byte	.LASF225
 10849 054f 05       		.byte	0x5
 10850 0550 00       		.uleb128 0
 10851 0551 21500000 		.4byte	.LASF226
 10852 0555 05       		.byte	0x5
 10853 0556 00       		.uleb128 0
 10854 0557 D8180000 		.4byte	.LASF227
 10855 055b 05       		.byte	0x5
 10856 055c 00       		.uleb128 0
 10857 055d 201B0000 		.4byte	.LASF228
 10858 0561 05       		.byte	0x5
 10859 0562 00       		.uleb128 0
 10860 0563 65310000 		.4byte	.LASF229
 10861 0567 05       		.byte	0x5
 10862 0568 00       		.uleb128 0
 10863 0569 55970000 		.4byte	.LASF230
 10864 056d 05       		.byte	0x5
 10865 056e 00       		.uleb128 0
 10866 056f BB490000 		.4byte	.LASF231
 10867 0573 05       		.byte	0x5
 10868 0574 00       		.uleb128 0
 10869 0575 18950000 		.4byte	.LASF232
 10870 0579 05       		.byte	0x5
 10871 057a 00       		.uleb128 0
 10872 057b B2170000 		.4byte	.LASF233
 10873 057f 05       		.byte	0x5
 10874 0580 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 259


 10875 0581 99150000 		.4byte	.LASF234
 10876 0585 05       		.byte	0x5
 10877 0586 00       		.uleb128 0
 10878 0587 FE060000 		.4byte	.LASF235
 10879 058b 05       		.byte	0x5
 10880 058c 00       		.uleb128 0
 10881 058d 38770000 		.4byte	.LASF236
 10882 0591 05       		.byte	0x5
 10883 0592 00       		.uleb128 0
 10884 0593 DE3E0000 		.4byte	.LASF237
 10885 0597 05       		.byte	0x5
 10886 0598 00       		.uleb128 0
 10887 0599 BE0A0000 		.4byte	.LASF238
 10888 059d 05       		.byte	0x5
 10889 059e 00       		.uleb128 0
 10890 059f 32910000 		.4byte	.LASF239
 10891 05a3 05       		.byte	0x5
 10892 05a4 00       		.uleb128 0
 10893 05a5 60220000 		.4byte	.LASF240
 10894 05a9 05       		.byte	0x5
 10895 05aa 00       		.uleb128 0
 10896 05ab B29E0000 		.4byte	.LASF241
 10897 05af 05       		.byte	0x5
 10898 05b0 00       		.uleb128 0
 10899 05b1 DF410000 		.4byte	.LASF242
 10900 05b5 05       		.byte	0x5
 10901 05b6 00       		.uleb128 0
 10902 05b7 C76A0000 		.4byte	.LASF243
 10903 05bb 05       		.byte	0x5
 10904 05bc 00       		.uleb128 0
 10905 05bd D71B0000 		.4byte	.LASF244
 10906 05c1 05       		.byte	0x5
 10907 05c2 00       		.uleb128 0
 10908 05c3 AA280000 		.4byte	.LASF245
 10909 05c7 05       		.byte	0x5
 10910 05c8 00       		.uleb128 0
 10911 05c9 BE890000 		.4byte	.LASF246
 10912 05cd 05       		.byte	0x5
 10913 05ce 00       		.uleb128 0
 10914 05cf 70280000 		.4byte	.LASF247
 10915 05d3 05       		.byte	0x5
 10916 05d4 00       		.uleb128 0
 10917 05d5 F4000000 		.4byte	.LASF248
 10918 05d9 05       		.byte	0x5
 10919 05da 00       		.uleb128 0
 10920 05db E52B0000 		.4byte	.LASF249
 10921 05df 05       		.byte	0x5
 10922 05e0 00       		.uleb128 0
 10923 05e1 44040000 		.4byte	.LASF250
 10924 05e5 05       		.byte	0x5
 10925 05e6 00       		.uleb128 0
 10926 05e7 305E0000 		.4byte	.LASF251
 10927 05eb 05       		.byte	0x5
 10928 05ec 00       		.uleb128 0
 10929 05ed 85840000 		.4byte	.LASF252
 10930 05f1 05       		.byte	0x5
 10931 05f2 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 260


 10932 05f3 B4A50000 		.4byte	.LASF253
 10933 05f7 05       		.byte	0x5
 10934 05f8 00       		.uleb128 0
 10935 05f9 46130000 		.4byte	.LASF254
 10936 05fd 05       		.byte	0x5
 10937 05fe 00       		.uleb128 0
 10938 05ff CD420000 		.4byte	.LASF255
 10939 0603 05       		.byte	0x5
 10940 0604 00       		.uleb128 0
 10941 0605 67330000 		.4byte	.LASF256
 10942 0609 05       		.byte	0x5
 10943 060a 00       		.uleb128 0
 10944 060b C5330000 		.4byte	.LASF257
 10945 060f 05       		.byte	0x5
 10946 0610 00       		.uleb128 0
 10947 0611 E4100000 		.4byte	.LASF258
 10948 0615 05       		.byte	0x5
 10949 0616 00       		.uleb128 0
 10950 0617 10420000 		.4byte	.LASF259
 10951 061b 05       		.byte	0x5
 10952 061c 00       		.uleb128 0
 10953 061d 9E240000 		.4byte	.LASF260
 10954 0621 05       		.byte	0x5
 10955 0622 00       		.uleb128 0
 10956 0623 5E760000 		.4byte	.LASF261
 10957 0627 05       		.byte	0x5
 10958 0628 00       		.uleb128 0
 10959 0629 9F090000 		.4byte	.LASF262
 10960 062d 05       		.byte	0x5
 10961 062e 00       		.uleb128 0
 10962 062f 2C620000 		.4byte	.LASF263
 10963 0633 05       		.byte	0x5
 10964 0634 00       		.uleb128 0
 10965 0635 6E6D0000 		.4byte	.LASF264
 10966 0639 05       		.byte	0x5
 10967 063a 00       		.uleb128 0
 10968 063b 8E110000 		.4byte	.LASF265
 10969 063f 05       		.byte	0x5
 10970 0640 00       		.uleb128 0
 10971 0641 DB710000 		.4byte	.LASF266
 10972 0645 05       		.byte	0x5
 10973 0646 00       		.uleb128 0
 10974 0647 CE170000 		.4byte	.LASF267
 10975 064b 05       		.byte	0x5
 10976 064c 00       		.uleb128 0
 10977 064d 755D0000 		.4byte	.LASF268
 10978 0651 05       		.byte	0x5
 10979 0652 00       		.uleb128 0
 10980 0653 D8560000 		.4byte	.LASF269
 10981 0657 05       		.byte	0x5
 10982 0658 00       		.uleb128 0
 10983 0659 2E950000 		.4byte	.LASF270
 10984 065d 05       		.byte	0x5
 10985 065e 00       		.uleb128 0
 10986 065f 1C720000 		.4byte	.LASF271
 10987 0663 05       		.byte	0x5
 10988 0664 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 261


 10989 0665 F7460000 		.4byte	.LASF272
 10990 0669 05       		.byte	0x5
 10991 066a 00       		.uleb128 0
 10992 066b 6B660000 		.4byte	.LASF273
 10993 066f 05       		.byte	0x5
 10994 0670 00       		.uleb128 0
 10995 0671 316C0000 		.4byte	.LASF274
 10996 0675 05       		.byte	0x5
 10997 0676 00       		.uleb128 0
 10998 0677 20120000 		.4byte	.LASF275
 10999 067b 05       		.byte	0x5
 11000 067c 00       		.uleb128 0
 11001 067d C8AA0000 		.4byte	.LASF276
 11002 0681 05       		.byte	0x5
 11003 0682 00       		.uleb128 0
 11004 0683 BC7C0000 		.4byte	.LASF277
 11005 0687 05       		.byte	0x5
 11006 0688 00       		.uleb128 0
 11007 0689 5A910000 		.4byte	.LASF278
 11008 068d 05       		.byte	0x5
 11009 068e 00       		.uleb128 0
 11010 068f 1B890000 		.4byte	.LASF279
 11011 0693 05       		.byte	0x5
 11012 0694 00       		.uleb128 0
 11013 0695 4AA00000 		.4byte	.LASF280
 11014 0699 05       		.byte	0x5
 11015 069a 00       		.uleb128 0
 11016 069b D99B0000 		.4byte	.LASF281
 11017 069f 05       		.byte	0x5
 11018 06a0 00       		.uleb128 0
 11019 06a1 86160000 		.4byte	.LASF282
 11020 06a5 05       		.byte	0x5
 11021 06a6 00       		.uleb128 0
 11022 06a7 01870000 		.4byte	.LASF283
 11023 06ab 05       		.byte	0x5
 11024 06ac 00       		.uleb128 0
 11025 06ad 6DA50000 		.4byte	.LASF284
 11026 06b1 05       		.byte	0x5
 11027 06b2 00       		.uleb128 0
 11028 06b3 3F0E0000 		.4byte	.LASF285
 11029 06b7 05       		.byte	0x5
 11030 06b8 00       		.uleb128 0
 11031 06b9 4A540000 		.4byte	.LASF286
 11032 06bd 05       		.byte	0x5
 11033 06be 00       		.uleb128 0
 11034 06bf 759A0000 		.4byte	.LASF287
 11035 06c3 05       		.byte	0x5
 11036 06c4 00       		.uleb128 0
 11037 06c5 351E0000 		.4byte	.LASF288
 11038 06c9 05       		.byte	0x5
 11039 06ca 00       		.uleb128 0
 11040 06cb 41950000 		.4byte	.LASF289
 11041 06cf 05       		.byte	0x5
 11042 06d0 00       		.uleb128 0
 11043 06d1 51AB0000 		.4byte	.LASF290
 11044 06d5 05       		.byte	0x5
 11045 06d6 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 262


 11046 06d7 0D1E0000 		.4byte	.LASF291
 11047 06db 05       		.byte	0x5
 11048 06dc 00       		.uleb128 0
 11049 06dd AD790000 		.4byte	.LASF292
 11050 06e1 05       		.byte	0x5
 11051 06e2 00       		.uleb128 0
 11052 06e3 3C880000 		.4byte	.LASF293
 11053 06e7 05       		.byte	0x5
 11054 06e8 00       		.uleb128 0
 11055 06e9 A6A90000 		.4byte	.LASF294
 11056 06ed 05       		.byte	0x5
 11057 06ee 00       		.uleb128 0
 11058 06ef 2E3C0000 		.4byte	.LASF295
 11059 06f3 05       		.byte	0x5
 11060 06f4 00       		.uleb128 0
 11061 06f5 C6620000 		.4byte	.LASF296
 11062 06f9 05       		.byte	0x5
 11063 06fa 00       		.uleb128 0
 11064 06fb F06E0000 		.4byte	.LASF297
 11065 06ff 05       		.byte	0x5
 11066 0700 00       		.uleb128 0
 11067 0701 FA090000 		.4byte	.LASF298
 11068 0705 05       		.byte	0x5
 11069 0706 00       		.uleb128 0
 11070 0707 8B850000 		.4byte	.LASF299
 11071 070b 05       		.byte	0x5
 11072 070c 00       		.uleb128 0
 11073 070d 051A0000 		.4byte	.LASF300
 11074 0711 05       		.byte	0x5
 11075 0712 00       		.uleb128 0
 11076 0713 C48B0000 		.4byte	.LASF301
 11077 0717 05       		.byte	0x5
 11078 0718 00       		.uleb128 0
 11079 0719 2E080000 		.4byte	.LASF302
 11080 071d 05       		.byte	0x5
 11081 071e 00       		.uleb128 0
 11082 071f 60470000 		.4byte	.LASF303
 11083 0723 05       		.byte	0x5
 11084 0724 00       		.uleb128 0
 11085 0725 7B9D0000 		.4byte	.LASF304
 11086 0729 05       		.byte	0x5
 11087 072a 00       		.uleb128 0
 11088 072b 4E560000 		.4byte	.LASF305
 11089 072f 05       		.byte	0x5
 11090 0730 00       		.uleb128 0
 11091 0731 0F810000 		.4byte	.LASF306
 11092 0735 05       		.byte	0x5
 11093 0736 00       		.uleb128 0
 11094 0737 C93E0000 		.4byte	.LASF307
 11095 073b 05       		.byte	0x5
 11096 073c 00       		.uleb128 0
 11097 073d FC650000 		.4byte	.LASF308
 11098 0741 05       		.byte	0x5
 11099 0742 00       		.uleb128 0
 11100 0743 D73A0000 		.4byte	.LASF309
 11101 0747 05       		.byte	0x5
 11102 0748 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 263


 11103 0749 733C0000 		.4byte	.LASF310
 11104 074d 05       		.byte	0x5
 11105 074e 00       		.uleb128 0
 11106 074f EC150000 		.4byte	.LASF311
 11107 0753 05       		.byte	0x5
 11108 0754 00       		.uleb128 0
 11109 0755 7F960000 		.4byte	.LASF312
 11110 0759 05       		.byte	0x5
 11111 075a 00       		.uleb128 0
 11112 075b 387A0000 		.4byte	.LASF313
 11113 075f 05       		.byte	0x5
 11114 0760 00       		.uleb128 0
 11115 0761 582D0000 		.4byte	.LASF314
 11116 0765 05       		.byte	0x5
 11117 0766 00       		.uleb128 0
 11118 0767 00080000 		.4byte	.LASF315
 11119 076b 05       		.byte	0x5
 11120 076c 00       		.uleb128 0
 11121 076d A6770000 		.4byte	.LASF316
 11122 0771 05       		.byte	0x5
 11123 0772 00       		.uleb128 0
 11124 0773 4E570000 		.4byte	.LASF317
 11125 0777 05       		.byte	0x5
 11126 0778 00       		.uleb128 0
 11127 0779 3B0D0000 		.4byte	.LASF318
 11128 077d 05       		.byte	0x5
 11129 077e 00       		.uleb128 0
 11130 077f 969D0000 		.4byte	.LASF319
 11131 0783 05       		.byte	0x5
 11132 0784 00       		.uleb128 0
 11133 0785 92260000 		.4byte	.LASF320
 11134 0789 05       		.byte	0x5
 11135 078a 00       		.uleb128 0
 11136 078b 9C4A0000 		.4byte	.LASF321
 11137 078f 05       		.byte	0x5
 11138 0790 00       		.uleb128 0
 11139 0791 34050000 		.4byte	.LASF322
 11140 0795 05       		.byte	0x5
 11141 0796 00       		.uleb128 0
 11142 0797 E0420000 		.4byte	.LASF323
 11143 079b 05       		.byte	0x5
 11144 079c 00       		.uleb128 0
 11145 079d DD240000 		.4byte	.LASF324
 11146 07a1 05       		.byte	0x5
 11147 07a2 00       		.uleb128 0
 11148 07a3 3C9C0000 		.4byte	.LASF325
 11149 07a7 05       		.byte	0x5
 11150 07a8 00       		.uleb128 0
 11151 07a9 72630000 		.4byte	.LASF326
 11152 07ad 05       		.byte	0x5
 11153 07ae 00       		.uleb128 0
 11154 07af 8F970000 		.4byte	.LASF327
 11155 07b3 05       		.byte	0x5
 11156 07b4 00       		.uleb128 0
 11157 07b5 BA090000 		.4byte	.LASF328
 11158 07b9 05       		.byte	0x5
 11159 07ba 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 264


 11160 07bb 02780000 		.4byte	.LASF329
 11161 07bf 05       		.byte	0x5
 11162 07c0 00       		.uleb128 0
 11163 07c1 44940000 		.4byte	.LASF330
 11164 07c5 05       		.byte	0x5
 11165 07c6 00       		.uleb128 0
 11166 07c7 8E810000 		.4byte	.LASF331
 11167 07cb 05       		.byte	0x5
 11168 07cc 00       		.uleb128 0
 11169 07cd B2A20000 		.4byte	.LASF332
 11170 07d1 05       		.byte	0x5
 11171 07d2 00       		.uleb128 0
 11172 07d3 083C0000 		.4byte	.LASF333
 11173 07d7 05       		.byte	0x5
 11174 07d8 00       		.uleb128 0
 11175 07d9 E6130000 		.4byte	.LASF334
 11176 07dd 05       		.byte	0x5
 11177 07de 00       		.uleb128 0
 11178 07df 7B0A0000 		.4byte	.LASF335
 11179 07e3 05       		.byte	0x5
 11180 07e4 00       		.uleb128 0
 11181 07e5 31780000 		.4byte	.LASF336
 11182 07e9 05       		.byte	0x5
 11183 07ea 00       		.uleb128 0
 11184 07eb 007D0000 		.4byte	.LASF337
 11185 07ef 05       		.byte	0x5
 11186 07f0 00       		.uleb128 0
 11187 07f1 6D2B0000 		.4byte	.LASF338
 11188 07f5 05       		.byte	0x5
 11189 07f6 00       		.uleb128 0
 11190 07f7 25070000 		.4byte	.LASF339
 11191 07fb 05       		.byte	0x5
 11192 07fc 00       		.uleb128 0
 11193 07fd 9B650000 		.4byte	.LASF340
 11194 0801 05       		.byte	0x5
 11195 0802 00       		.uleb128 0
 11196 0803 7C3E0000 		.4byte	.LASF341
 11197 0807 05       		.byte	0x5
 11198 0808 00       		.uleb128 0
 11199 0809 82140000 		.4byte	.LASF342
 11200 080d 05       		.byte	0x5
 11201 080e 00       		.uleb128 0
 11202 080f 8C830000 		.4byte	.LASF343
 11203 0813 05       		.byte	0x5
 11204 0814 00       		.uleb128 0
 11205 0815 92130000 		.4byte	.LASF344
 11206 0819 05       		.byte	0x5
 11207 081a 00       		.uleb128 0
 11208 081b 28820000 		.4byte	.LASF345
 11209 081f 05       		.byte	0x5
 11210 0820 00       		.uleb128 0
 11211 0821 69600000 		.4byte	.LASF346
 11212 0825 05       		.byte	0x5
 11213 0826 00       		.uleb128 0
 11214 0827 D89A0000 		.4byte	.LASF347
 11215 082b 05       		.byte	0x5
 11216 082c 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 265


 11217 082d 8F7A0000 		.4byte	.LASF348
 11218 0831 05       		.byte	0x5
 11219 0832 00       		.uleb128 0
 11220 0833 5C800000 		.4byte	.LASF349
 11221 0837 05       		.byte	0x5
 11222 0838 00       		.uleb128 0
 11223 0839 89310000 		.4byte	.LASF350
 11224 083d 05       		.byte	0x5
 11225 083e 00       		.uleb128 0
 11226 083f B6590000 		.4byte	.LASF351
 11227 0843 05       		.byte	0x5
 11228 0844 00       		.uleb128 0
 11229 0845 6B800000 		.4byte	.LASF352
 11230 0849 05       		.byte	0x5
 11231 084a 00       		.uleb128 0
 11232 084b 5D480000 		.4byte	.LASF353
 11233 084f 05       		.byte	0x5
 11234 0850 00       		.uleb128 0
 11235 0851 7C360000 		.4byte	.LASF354
 11236 0855 05       		.byte	0x5
 11237 0856 00       		.uleb128 0
 11238 0857 D6A60000 		.4byte	.LASF355
 11239 085b 05       		.byte	0x5
 11240 085c 00       		.uleb128 0
 11241 085d A23D0000 		.4byte	.LASF356
 11242 0861 05       		.byte	0x5
 11243 0862 00       		.uleb128 0
 11244 0863 506F0000 		.4byte	.LASF357
 11245 0867 05       		.byte	0x5
 11246 0868 00       		.uleb128 0
 11247 0869 FB5D0000 		.4byte	.LASF358
 11248 086d 05       		.byte	0x5
 11249 086e 00       		.uleb128 0
 11250 086f 5D9D0000 		.4byte	.LASF359
 11251 0873 05       		.byte	0x5
 11252 0874 00       		.uleb128 0
 11253 0875 1C6B0000 		.4byte	.LASF360
 11254 0879 05       		.byte	0x5
 11255 087a 00       		.uleb128 0
 11256 087b 542F0000 		.4byte	.LASF361
 11257 087f 05       		.byte	0x5
 11258 0880 00       		.uleb128 0
 11259 0881 5D1C0000 		.4byte	.LASF362
 11260 0885 05       		.byte	0x5
 11261 0886 00       		.uleb128 0
 11262 0887 998D0000 		.4byte	.LASF363
 11263 088b 05       		.byte	0x5
 11264 088c 00       		.uleb128 0
 11265 088d D4220000 		.4byte	.LASF364
 11266 0891 05       		.byte	0x5
 11267 0892 00       		.uleb128 0
 11268 0893 D6940000 		.4byte	.LASF365
 11269 0897 05       		.byte	0x5
 11270 0898 00       		.uleb128 0
 11271 0899 CF880000 		.4byte	.LASF366
 11272 089d 05       		.byte	0x5
 11273 089e 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 266


 11274 089f 58430000 		.4byte	.LASF367
 11275 08a3 05       		.byte	0x5
 11276 08a4 00       		.uleb128 0
 11277 08a5 04100000 		.4byte	.LASF368
 11278 08a9 05       		.byte	0x5
 11279 08aa 00       		.uleb128 0
 11280 08ab 168E0000 		.4byte	.LASF369
 11281 08af 05       		.byte	0x5
 11282 08b0 00       		.uleb128 0
 11283 08b1 91030000 		.4byte	.LASF370
 11284 08b5 05       		.byte	0x5
 11285 08b6 00       		.uleb128 0
 11286 08b7 AF0D0000 		.4byte	.LASF371
 11287 08bb 05       		.byte	0x5
 11288 08bc 00       		.uleb128 0
 11289 08bd D42F0000 		.4byte	.LASF372
 11290 08c1 05       		.byte	0x5
 11291 08c2 00       		.uleb128 0
 11292 08c3 1C790000 		.4byte	.LASF373
 11293 08c7 05       		.byte	0x5
 11294 08c8 00       		.uleb128 0
 11295 08c9 241D0000 		.4byte	.LASF374
 11296 08cd 05       		.byte	0x5
 11297 08ce 00       		.uleb128 0
 11298 08cf F16B0000 		.4byte	.LASF375
 11299 08d3 05       		.byte	0x5
 11300 08d4 00       		.uleb128 0
 11301 08d5 734F0000 		.4byte	.LASF376
 11302 08d9 05       		.byte	0x5
 11303 08da 00       		.uleb128 0
 11304 08db 12250000 		.4byte	.LASF377
 11305 08df 05       		.byte	0x5
 11306 08e0 00       		.uleb128 0
 11307 08e1 56030000 		.4byte	.LASF378
 11308 08e5 05       		.byte	0x5
 11309 08e6 00       		.uleb128 0
 11310 08e7 6B3B0000 		.4byte	.LASF379
 11311 08eb 05       		.byte	0x5
 11312 08ec 00       		.uleb128 0
 11313 08ed 61840000 		.4byte	.LASF380
 11314 08f1 05       		.byte	0x5
 11315 08f2 00       		.uleb128 0
 11316 08f3 30570000 		.4byte	.LASF381
 11317 08f7 05       		.byte	0x5
 11318 08f8 00       		.uleb128 0
 11319 08f9 EA590000 		.4byte	.LASF382
 11320 08fd 05       		.byte	0x5
 11321 08fe 00       		.uleb128 0
 11322 08ff 4F3C0000 		.4byte	.LASF383
 11323 0903 05       		.byte	0x5
 11324 0904 00       		.uleb128 0
 11325 0905 BF160000 		.4byte	.LASF384
 11326 0909 05       		.byte	0x5
 11327 090a 00       		.uleb128 0
 11328 090b 0F480000 		.4byte	.LASF385
 11329 090f 05       		.byte	0x5
 11330 0910 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 267


 11331 0911 DF2E0000 		.4byte	.LASF386
 11332 0915 05       		.byte	0x5
 11333 0916 00       		.uleb128 0
 11334 0917 645C0000 		.4byte	.LASF387
 11335 091b 05       		.byte	0x5
 11336 091c 00       		.uleb128 0
 11337 091d A2950000 		.4byte	.LASF388
 11338 0921 05       		.byte	0x5
 11339 0922 00       		.uleb128 0
 11340 0923 8B660000 		.4byte	.LASF389
 11341 0927 06       		.byte	0x6
 11342 0928 00       		.uleb128 0
 11343 0929 C4590000 		.4byte	.LASF390
 11344 092d 05       		.byte	0x5
 11345 092e 00       		.uleb128 0
 11346 092f 3A450000 		.4byte	.LASF391
 11347 0933 05       		.byte	0x5
 11348 0934 00       		.uleb128 0
 11349 0935 08540000 		.4byte	.LASF392
 11350 0939 06       		.byte	0x6
 11351 093a 00       		.uleb128 0
 11352 093b CD740000 		.4byte	.LASF393
 11353 093f 05       		.byte	0x5
 11354 0940 00       		.uleb128 0
 11355 0941 CF950000 		.4byte	.LASF394
 11356 0945 06       		.byte	0x6
 11357 0946 00       		.uleb128 0
 11358 0947 04700000 		.4byte	.LASF395
 11359 094b 05       		.byte	0x5
 11360 094c 00       		.uleb128 0
 11361 094d ED710000 		.4byte	.LASF396
 11362 0951 05       		.byte	0x5
 11363 0952 00       		.uleb128 0
 11364 0953 E3A40000 		.4byte	.LASF397
 11365 0957 05       		.byte	0x5
 11366 0958 00       		.uleb128 0
 11367 0959 4F450000 		.4byte	.LASF398
 11368 095d 06       		.byte	0x6
 11369 095e 00       		.uleb128 0
 11370 095f 9B830000 		.4byte	.LASF399
 11371 0963 06       		.byte	0x6
 11372 0964 00       		.uleb128 0
 11373 0965 5F6F0000 		.4byte	.LASF400
 11374 0969 05       		.byte	0x5
 11375 096a 00       		.uleb128 0
 11376 096b C86C0000 		.4byte	.LASF401
 11377 096f 05       		.byte	0x5
 11378 0970 00       		.uleb128 0
 11379 0971 F4450000 		.4byte	.LASF402
 11380 0975 05       		.byte	0x5
 11381 0976 00       		.uleb128 0
 11382 0977 2E0B0000 		.4byte	.LASF403
 11383 097b 05       		.byte	0x5
 11384 097c 00       		.uleb128 0
 11385 097d 186D0000 		.4byte	.LASF404
 11386 0981 05       		.byte	0x5
 11387 0982 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 268


 11388 0983 9F570000 		.4byte	.LASF405
 11389 0987 05       		.byte	0x5
 11390 0988 00       		.uleb128 0
 11391 0989 23780000 		.4byte	.LASF406
 11392 098d 05       		.byte	0x5
 11393 098e 00       		.uleb128 0
 11394 098f 68A00000 		.4byte	.LASF407
 11395 0993 05       		.byte	0x5
 11396 0994 00       		.uleb128 0
 11397 0995 E3990000 		.4byte	.LASF408
 11398 0999 05       		.byte	0x5
 11399 099a 00       		.uleb128 0
 11400 099b 58810000 		.4byte	.LASF409
 11401 099f 05       		.byte	0x5
 11402 09a0 00       		.uleb128 0
 11403 09a1 50700000 		.4byte	.LASF410
 11404 09a5 05       		.byte	0x5
 11405 09a6 00       		.uleb128 0
 11406 09a7 5DA10000 		.4byte	.LASF411
 11407 09ab 05       		.byte	0x5
 11408 09ac 00       		.uleb128 0
 11409 09ad 82490000 		.4byte	.LASF412
 11410 09b1 05       		.byte	0x5
 11411 09b2 00       		.uleb128 0
 11412 09b3 6B160000 		.4byte	.LASF413
 11413 09b7 06       		.byte	0x6
 11414 09b8 00       		.uleb128 0
 11415 09b9 AD590000 		.4byte	.LASF414
 11416 09bd 06       		.byte	0x6
 11417 09be 00       		.uleb128 0
 11418 09bf F6480000 		.4byte	.LASF415
 11419 09c3 06       		.byte	0x6
 11420 09c4 00       		.uleb128 0
 11421 09c5 2A6E0000 		.4byte	.LASF416
 11422 09c9 06       		.byte	0x6
 11423 09ca 00       		.uleb128 0
 11424 09cb EC650000 		.4byte	.LASF417
 11425 09cf 06       		.byte	0x6
 11426 09d0 00       		.uleb128 0
 11427 09d1 58850000 		.4byte	.LASF418
 11428 09d5 06       		.byte	0x6
 11429 09d6 00       		.uleb128 0
 11430 09d7 891F0000 		.4byte	.LASF419
 11431 09db 06       		.byte	0x6
 11432 09dc 00       		.uleb128 0
 11433 09dd 267A0000 		.4byte	.LASF420
 11434 09e1 06       		.byte	0x6
 11435 09e2 00       		.uleb128 0
 11436 09e3 CC1D0000 		.4byte	.LASF421
 11437 09e7 06       		.byte	0x6
 11438 09e8 00       		.uleb128 0
 11439 09e9 FD330000 		.4byte	.LASF422
 11440 09ed 06       		.byte	0x6
 11441 09ee 00       		.uleb128 0
 11442 09ef FE7E0000 		.4byte	.LASF423
 11443 09f3 05       		.byte	0x5
 11444 09f4 00       		.uleb128 0
ARM GAS  /tmp/ccTV2SzP.s 			page 269


 11445 09f5 1F1E0000 		.4byte	.LASF424
 11446 09f9 05       		.byte	0x5
 11447 09fa 00       		.uleb128 0
 11448 09fb C51B0000 		.4byte	.LASF425
 11449 09ff 05       		.byte	0x5
 11450 0a00 00       		.uleb128 0
 11451 0a01 183E0000 		.4byte	.LASF426
 11452 0a05 05       		.byte	0x5
 11453 0a06 00       		.uleb128 0
 11454 0a07 945A0000 		.4byte	.LASF427
 11455 0a0b 05       		.byte	0x5
 11456 0a0c 00       		.uleb128 0
 11457 0a0d 003E0000 		.4byte	.LASF428
 11458 0a11 05       		.byte	0x5
 11459 0a12 00       		.uleb128 0
 11460 0a13 38670000 		.4byte	.LASF429
 11461 0a17 05       		.byte	0x5
 11462 0a18 00       		.uleb128 0
 11463 0a19 C4980000 		.4byte	.LASF430
 11464 0a1d 05       		.byte	0x5
 11465 0a1e 00       		.uleb128 0
 11466 0a1f E9950000 		.4byte	.LASF431
 11467 0a23 05       		.byte	0x5
 11468 0a24 00       		.uleb128 0
 11469 0a25 2F810000 		.4byte	.LASF432
 11470 0a29 05       		.byte	0x5
 11471 0a2a 00       		.uleb128 0
 11472 0a2b 0C910000 		.4byte	.LASF433
 11473 0a2f 00       		.byte	0
 11474              		.section	.debug_macro,"G",%progbits,wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19,comda
 11475              	.Ldebug_macro2:
 11476 0000 0400     		.2byte	0x4
 11477 0002 00       		.byte	0
 11478 0003 05       		.byte	0x5
 11479 0004 04       		.uleb128 0x4
 11480 0005 1A570000 		.4byte	.LASF438
 11481 0009 05       		.byte	0x5
 11482 000a 06       		.uleb128 0x6
 11483 000b CDA50000 		.4byte	.LASF439
 11484 000f 05       		.byte	0x5
 11485 0010 07       		.uleb128 0x7
 11486 0011 86220000 		.4byte	.LASF440
 11487 0015 05       		.byte	0x5
 11488 0016 08       		.uleb128 0x8
 11489 0017 75210000 		.4byte	.LASF441
 11490 001b 05       		.byte	0x5
 11491 001c 09       		.uleb128 0x9
 11492 001d D6760000 		.4byte	.LASF442
 11493 0021 00       		.byte	0
 11494              		.section	.debug_macro,"G",%progbits,wm4.newlib.h.21.0b9fc973bddc8b940a18de2b6ea6adc7,comdat
 11495              	.Ldebug_macro3:
 11496 0000 0400     		.2byte	0x4
 11497 0002 00       		.byte	0
 11498 0003 05       		.byte	0x5
 11499 0004 15       		.uleb128 0x15
 11500 0005 7FA80000 		.4byte	.LASF443
 11501 0009 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 270


 11502 000a 18       		.uleb128 0x18
 11503 000b 9B920000 		.4byte	.LASF444
 11504 000f 05       		.byte	0x5
 11505 0010 28       		.uleb128 0x28
 11506 0011 0C360000 		.4byte	.LASF445
 11507 0015 05       		.byte	0x5
 11508 0016 32       		.uleb128 0x32
 11509 0017 EC890000 		.4byte	.LASF446
 11510 001b 05       		.byte	0x5
 11511 001c 36       		.uleb128 0x36
 11512 001d 65570000 		.4byte	.LASF447
 11513 0021 05       		.byte	0x5
 11514 0022 39       		.uleb128 0x39
 11515 0023 4D240000 		.4byte	.LASF448
 11516 0027 05       		.byte	0x5
 11517 0028 3C       		.uleb128 0x3c
 11518 0029 435B0000 		.4byte	.LASF449
 11519 002d 05       		.byte	0x5
 11520 002e 3F       		.uleb128 0x3f
 11521 002f FDA90000 		.4byte	.LASF450
 11522 0033 05       		.byte	0x5
 11523 0034 42       		.uleb128 0x42
 11524 0035 BC130000 		.4byte	.LASF451
 11525 0039 05       		.byte	0x5
 11526 003a 45       		.uleb128 0x45
 11527 003b 8E700000 		.4byte	.LASF452
 11528 003f 05       		.byte	0x5
 11529 0040 48       		.uleb128 0x48
 11530 0041 C5390000 		.4byte	.LASF453
 11531 0045 05       		.byte	0x5
 11532 0046 4B       		.uleb128 0x4b
 11533 0047 BB950000 		.4byte	.LASF454
 11534 004b 00       		.byte	0
 11535              		.section	.debug_macro,"G",%progbits,wm4.features.h.22.692cd1f2e947ca7b8fea300222f5f1f2,comdat
 11536              	.Ldebug_macro4:
 11537 0000 0400     		.2byte	0x4
 11538 0002 00       		.byte	0
 11539 0003 05       		.byte	0x5
 11540 0004 16       		.uleb128 0x16
 11541 0005 3F010000 		.4byte	.LASF456
 11542 0009 05       		.byte	0x5
 11543 000a 21       		.uleb128 0x21
 11544 000b 171A0000 		.4byte	.LASF457
 11545 000f 05       		.byte	0x5
 11546 0010 28       		.uleb128 0x28
 11547 0011 A9940000 		.4byte	.LASF458
 11548 0015 06       		.byte	0x6
 11549 0016 8001     		.uleb128 0x80
 11550 0018 049A0000 		.4byte	.LASF459
 11551 001c 05       		.byte	0x5
 11552 001d 8101     		.uleb128 0x81
 11553 001f B24C0000 		.4byte	.LASF460
 11554 0023 06       		.byte	0x6
 11555 0024 8501     		.uleb128 0x85
 11556 0026 30490000 		.4byte	.LASF461
 11557 002a 05       		.byte	0x5
 11558 002b 8601     		.uleb128 0x86
ARM GAS  /tmp/ccTV2SzP.s 			page 271


 11559 002d CA9C0000 		.4byte	.LASF462
 11560 0031 06       		.byte	0x6
 11561 0032 8701     		.uleb128 0x87
 11562 0034 6DAA0000 		.4byte	.LASF463
 11563 0038 05       		.byte	0x5
 11564 0039 8801     		.uleb128 0x88
 11565 003b FA1F0000 		.4byte	.LASF464
 11566 003f 06       		.byte	0x6
 11567 0040 9B01     		.uleb128 0x9b
 11568 0042 FF430000 		.4byte	.LASF465
 11569 0046 05       		.byte	0x5
 11570 0047 9C01     		.uleb128 0x9c
 11571 0049 765E0000 		.4byte	.LASF466
 11572 004d 05       		.byte	0x5
 11573 004e F201     		.uleb128 0xf2
 11574 0050 2E420000 		.4byte	.LASF467
 11575 0054 05       		.byte	0x5
 11576 0055 F801     		.uleb128 0xf8
 11577 0057 9C5C0000 		.4byte	.LASF468
 11578 005b 05       		.byte	0x5
 11579 005c 8002     		.uleb128 0x100
 11580 005e 40780000 		.4byte	.LASF469
 11581 0062 05       		.byte	0x5
 11582 0063 8802     		.uleb128 0x108
 11583 0065 E4220000 		.4byte	.LASF470
 11584 0069 05       		.byte	0x5
 11585 006a 9002     		.uleb128 0x110
 11586 006c 4A220000 		.4byte	.LASF471
 11587 0070 05       		.byte	0x5
 11588 0071 9402     		.uleb128 0x114
 11589 0073 B3730000 		.4byte	.LASF472
 11590 0077 05       		.byte	0x5
 11591 0078 9A02     		.uleb128 0x11a
 11592 007a 895F0000 		.4byte	.LASF473
 11593 007e 05       		.byte	0x5
 11594 007f AA02     		.uleb128 0x12a
 11595 0081 4B000000 		.4byte	.LASF474
 11596 0085 05       		.byte	0x5
 11597 0086 BA02     		.uleb128 0x13a
 11598 0088 F0930000 		.4byte	.LASF475
 11599 008c 00       		.byte	0
 11600              		.section	.debug_macro,"G",%progbits,wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e,comdat
 11601              	.Ldebug_macro5:
 11602 0000 0400     		.2byte	0x4
 11603 0002 00       		.byte	0
 11604 0003 05       		.byte	0x5
 11605 0004 DB01     		.uleb128 0xdb
 11606 0006 34130000 		.4byte	.LASF476
 11607 000a 06       		.byte	0x6
 11608 000b E101     		.uleb128 0xe1
 11609 000d B4160000 		.4byte	.LASF477
 11610 0011 05       		.byte	0x5
 11611 0012 E501     		.uleb128 0xe5
 11612 0014 1B190000 		.4byte	.LASF478
 11613 0018 05       		.byte	0x5
 11614 0019 F401     		.uleb128 0xf4
 11615 001b F8690000 		.4byte	.LASF479
ARM GAS  /tmp/ccTV2SzP.s 			page 272


 11616 001f 05       		.byte	0x5
 11617 0020 F801     		.uleb128 0xf8
 11618 0022 E56A0000 		.4byte	.LASF480
 11619 0026 05       		.byte	0x5
 11620 0027 FF01     		.uleb128 0xff
 11621 0029 5D2A0000 		.4byte	.LASF481
 11622 002d 05       		.byte	0x5
 11623 002e 8502     		.uleb128 0x105
 11624 0030 5E4A0000 		.4byte	.LASF482
 11625 0034 00       		.byte	0
 11626              		.section	.debug_macro,"G",%progbits,wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51,comdat
 11627              	.Ldebug_macro6:
 11628 0000 0400     		.2byte	0x4
 11629 0002 00       		.byte	0
 11630 0003 05       		.byte	0x5
 11631 0004 17       		.uleb128 0x17
 11632 0005 278A0000 		.4byte	.LASF483
 11633 0009 05       		.byte	0x5
 11634 000a 2C       		.uleb128 0x2c
 11635 000b 4E6C0000 		.4byte	.LASF484
 11636 000f 05       		.byte	0x5
 11637 0010 2D       		.uleb128 0x2d
 11638 0011 2D380000 		.4byte	.LASF485
 11639 0015 05       		.byte	0x5
 11640 0016 2E       		.uleb128 0x2e
 11641 0017 1C5F0000 		.4byte	.LASF486
 11642 001b 05       		.byte	0x5
 11643 001c 32       		.uleb128 0x32
 11644 001d 6D9E0000 		.4byte	.LASF487
 11645 0021 05       		.byte	0x5
 11646 0022 33       		.uleb128 0x33
 11647 0023 C6740000 		.4byte	.LASF488
 11648 0027 05       		.byte	0x5
 11649 0028 34       		.uleb128 0x34
 11650 0029 0A820000 		.4byte	.LASF489
 11651 002d 05       		.byte	0x5
 11652 002e 35       		.uleb128 0x35
 11653 002f 22810000 		.4byte	.LASF490
 11654 0033 05       		.byte	0x5
 11655 0034 36       		.uleb128 0x36
 11656 0035 982C0000 		.4byte	.LASF491
 11657 0039 05       		.byte	0x5
 11658 003a 37       		.uleb128 0x37
 11659 003b 27540000 		.4byte	.LASF492
 11660 003f 05       		.byte	0x5
 11661 0040 38       		.uleb128 0x38
 11662 0041 E2570000 		.4byte	.LASF493
 11663 0045 05       		.byte	0x5
 11664 0046 39       		.uleb128 0x39
 11665 0047 5D960000 		.4byte	.LASF494
 11666 004b 05       		.byte	0x5
 11667 004c 40       		.uleb128 0x40
 11668 004d 21650000 		.4byte	.LASF495
 11669 0051 05       		.byte	0x5
 11670 0052 41       		.uleb128 0x41
 11671 0053 4D3F0000 		.4byte	.LASF496
 11672 0057 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 273


 11673 0058 42       		.uleb128 0x42
 11674 0059 A6340000 		.4byte	.LASF497
 11675 005d 05       		.byte	0x5
 11676 005e 43       		.uleb128 0x43
 11677 005f D92C0000 		.4byte	.LASF498
 11678 0063 05       		.byte	0x5
 11679 0064 45       		.uleb128 0x45
 11680 0065 1F260000 		.4byte	.LASF499
 11681 0069 05       		.byte	0x5
 11682 006a 46       		.uleb128 0x46
 11683 006b 0D7E0000 		.4byte	.LASF500
 11684 006f 05       		.byte	0x5
 11685 0070 47       		.uleb128 0x47
 11686 0071 B6800000 		.4byte	.LASF501
 11687 0075 05       		.byte	0x5
 11688 0076 49       		.uleb128 0x49
 11689 0077 7B050000 		.4byte	.LASF502
 11690 007b 05       		.byte	0x5
 11691 007c 4C       		.uleb128 0x4c
 11692 007d 9D200000 		.4byte	.LASF503
 11693 0081 05       		.byte	0x5
 11694 0082 65       		.uleb128 0x65
 11695 0083 B58E0000 		.4byte	.LASF504
 11696 0087 05       		.byte	0x5
 11697 0088 7B       		.uleb128 0x7b
 11698 0089 896D0000 		.4byte	.LASF505
 11699 008d 05       		.byte	0x5
 11700 008e 8301     		.uleb128 0x83
 11701 0090 341C0000 		.4byte	.LASF506
 11702 0094 05       		.byte	0x5
 11703 0095 8401     		.uleb128 0x84
 11704 0097 39170000 		.4byte	.LASF507
 11705 009b 00       		.byte	0
 11706              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2,comdat
 11707              	.Ldebug_macro7:
 11708 0000 0400     		.2byte	0x4
 11709 0002 00       		.byte	0
 11710 0003 05       		.byte	0x5
 11711 0004 0D       		.uleb128 0xd
 11712 0005 CC370000 		.4byte	.LASF508
 11713 0009 05       		.byte	0x5
 11714 000a 0E       		.uleb128 0xe
 11715 000b 13300000 		.4byte	.LASF509
 11716 000f 05       		.byte	0x5
 11717 0010 0F       		.uleb128 0xf
 11718 0011 08340000 		.4byte	.LASF510
 11719 0015 00       		.byte	0
 11720              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1,comdat
 11721              	.Ldebug_macro8:
 11722 0000 0400     		.2byte	0x4
 11723 0002 00       		.byte	0
 11724 0003 05       		.byte	0x5
 11725 0004 BB01     		.uleb128 0xbb
 11726 0006 6D1C0000 		.4byte	.LASF511
 11727 000a 05       		.byte	0x5
 11728 000b BC01     		.uleb128 0xbc
 11729 000d 220F0000 		.4byte	.LASF512
ARM GAS  /tmp/ccTV2SzP.s 			page 274


 11730 0011 05       		.byte	0x5
 11731 0012 BD01     		.uleb128 0xbd
 11732 0014 C9340000 		.4byte	.LASF513
 11733 0018 05       		.byte	0x5
 11734 0019 BE01     		.uleb128 0xbe
 11735 001b 4F580000 		.4byte	.LASF514
 11736 001f 05       		.byte	0x5
 11737 0020 BF01     		.uleb128 0xbf
 11738 0022 E5490000 		.4byte	.LASF515
 11739 0026 05       		.byte	0x5
 11740 0027 C001     		.uleb128 0xc0
 11741 0029 60380000 		.4byte	.LASF516
 11742 002d 05       		.byte	0x5
 11743 002e C101     		.uleb128 0xc1
 11744 0030 C3420000 		.4byte	.LASF517
 11745 0034 05       		.byte	0x5
 11746 0035 C201     		.uleb128 0xc2
 11747 0037 D8570000 		.4byte	.LASF518
 11748 003b 05       		.byte	0x5
 11749 003c C301     		.uleb128 0xc3
 11750 003e 2D7E0000 		.4byte	.LASF519
 11751 0042 05       		.byte	0x5
 11752 0043 C401     		.uleb128 0xc4
 11753 0045 1A620000 		.4byte	.LASF520
 11754 0049 05       		.byte	0x5
 11755 004a C501     		.uleb128 0xc5
 11756 004c FF150000 		.4byte	.LASF521
 11757 0050 05       		.byte	0x5
 11758 0051 C601     		.uleb128 0xc6
 11759 0053 76270000 		.4byte	.LASF522
 11760 0057 05       		.byte	0x5
 11761 0058 C701     		.uleb128 0xc7
 11762 005a 4D1F0000 		.4byte	.LASF523
 11763 005e 05       		.byte	0x5
 11764 005f C801     		.uleb128 0xc8
 11765 0061 458D0000 		.4byte	.LASF524
 11766 0065 05       		.byte	0x5
 11767 0066 C901     		.uleb128 0xc9
 11768 0068 1D9A0000 		.4byte	.LASF525
 11769 006c 05       		.byte	0x5
 11770 006d CA01     		.uleb128 0xca
 11771 006f 483D0000 		.4byte	.LASF526
 11772 0073 05       		.byte	0x5
 11773 0074 D201     		.uleb128 0xd2
 11774 0076 8F120000 		.4byte	.LASF527
 11775 007a 06       		.byte	0x6
 11776 007b EE01     		.uleb128 0xee
 11777 007d 413C0000 		.4byte	.LASF528
 11778 0081 05       		.byte	0x5
 11779 0082 8B02     		.uleb128 0x10b
 11780 0084 D2580000 		.4byte	.LASF529
 11781 0088 05       		.byte	0x5
 11782 0089 8C02     		.uleb128 0x10c
 11783 008b 7B930000 		.4byte	.LASF530
 11784 008f 05       		.byte	0x5
 11785 0090 8D02     		.uleb128 0x10d
 11786 0092 206E0000 		.4byte	.LASF531
ARM GAS  /tmp/ccTV2SzP.s 			page 275


 11787 0096 05       		.byte	0x5
 11788 0097 8E02     		.uleb128 0x10e
 11789 0099 8E9A0000 		.4byte	.LASF532
 11790 009d 05       		.byte	0x5
 11791 009e 8F02     		.uleb128 0x10f
 11792 00a0 243E0000 		.4byte	.LASF533
 11793 00a4 05       		.byte	0x5
 11794 00a5 9002     		.uleb128 0x110
 11795 00a7 15120000 		.4byte	.LASF534
 11796 00ab 05       		.byte	0x5
 11797 00ac 9102     		.uleb128 0x111
 11798 00ae 837E0000 		.4byte	.LASF535
 11799 00b2 05       		.byte	0x5
 11800 00b3 9202     		.uleb128 0x112
 11801 00b5 F73E0000 		.4byte	.LASF536
 11802 00b9 05       		.byte	0x5
 11803 00ba 9302     		.uleb128 0x113
 11804 00bc B2390000 		.4byte	.LASF537
 11805 00c0 05       		.byte	0x5
 11806 00c1 9402     		.uleb128 0x114
 11807 00c3 0F7C0000 		.4byte	.LASF538
 11808 00c7 05       		.byte	0x5
 11809 00c8 9502     		.uleb128 0x115
 11810 00ca D76F0000 		.4byte	.LASF539
 11811 00ce 05       		.byte	0x5
 11812 00cf 9602     		.uleb128 0x116
 11813 00d1 E4120000 		.4byte	.LASF540
 11814 00d5 05       		.byte	0x5
 11815 00d6 9702     		.uleb128 0x117
 11816 00d8 7A800000 		.4byte	.LASF541
 11817 00dc 05       		.byte	0x5
 11818 00dd 9802     		.uleb128 0x118
 11819 00df 66810000 		.4byte	.LASF542
 11820 00e3 05       		.byte	0x5
 11821 00e4 9902     		.uleb128 0x119
 11822 00e6 B7630000 		.4byte	.LASF543
 11823 00ea 06       		.byte	0x6
 11824 00eb A602     		.uleb128 0x126
 11825 00ed 0B9B0000 		.4byte	.LASF544
 11826 00f1 06       		.byte	0x6
 11827 00f2 DB02     		.uleb128 0x15b
 11828 00f4 42110000 		.4byte	.LASF545
 11829 00f8 06       		.byte	0x6
 11830 00f9 9103     		.uleb128 0x191
 11831 00fb C7450000 		.4byte	.LASF546
 11832 00ff 05       		.byte	0x5
 11833 0100 9603     		.uleb128 0x196
 11834 0102 93220000 		.4byte	.LASF547
 11835 0106 06       		.byte	0x6
 11836 0107 9C03     		.uleb128 0x19c
 11837 0109 08590000 		.4byte	.LASF548
 11838 010d 00       		.byte	0
 11839              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef,comdat
 11840              	.Ldebug_macro9:
 11841 0000 0400     		.2byte	0x4
 11842 0002 00       		.byte	0
 11843 0003 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 276


 11844 0004 27       		.uleb128 0x27
 11845 0005 A78C0000 		.4byte	.LASF550
 11846 0009 05       		.byte	0x5
 11847 000a 28       		.uleb128 0x28
 11848 000b 46720000 		.4byte	.LASF551
 11849 000f 05       		.byte	0x5
 11850 0010 2A       		.uleb128 0x2a
 11851 0011 5E540000 		.4byte	.LASF552
 11852 0015 05       		.byte	0x5
 11853 0016 8901     		.uleb128 0x89
 11854 0018 265F0000 		.4byte	.LASF553
 11855 001c 05       		.byte	0x5
 11856 001d 8A01     		.uleb128 0x8a
 11857 001f 2F530000 		.4byte	.LASF554
 11858 0023 05       		.byte	0x5
 11859 0024 8B01     		.uleb128 0x8b
 11860 0026 8F650000 		.4byte	.LASF555
 11861 002a 05       		.byte	0x5
 11862 002b 8C01     		.uleb128 0x8c
 11863 002d 59780000 		.4byte	.LASF556
 11864 0031 05       		.byte	0x5
 11865 0032 8D01     		.uleb128 0x8d
 11866 0034 93910000 		.4byte	.LASF557
 11867 0038 05       		.byte	0x5
 11868 0039 8E01     		.uleb128 0x8e
 11869 003b 26430000 		.4byte	.LASF558
 11870 003f 05       		.byte	0x5
 11871 0040 8F01     		.uleb128 0x8f
 11872 0042 1C520000 		.4byte	.LASF559
 11873 0046 05       		.byte	0x5
 11874 0047 9001     		.uleb128 0x90
 11875 0049 076F0000 		.4byte	.LASF560
 11876 004d 05       		.byte	0x5
 11877 004e 9101     		.uleb128 0x91
 11878 0050 076B0000 		.4byte	.LASF561
 11879 0054 06       		.byte	0x6
 11880 0055 A101     		.uleb128 0xa1
 11881 0057 49910000 		.4byte	.LASF562
 11882 005b 06       		.byte	0x6
 11883 005c EE01     		.uleb128 0xee
 11884 005e 413C0000 		.4byte	.LASF528
 11885 0062 06       		.byte	0x6
 11886 0063 DB02     		.uleb128 0x15b
 11887 0065 42110000 		.4byte	.LASF545
 11888 0069 06       		.byte	0x6
 11889 006a 9103     		.uleb128 0x191
 11890 006c C7450000 		.4byte	.LASF546
 11891 0070 05       		.byte	0x5
 11892 0071 9603     		.uleb128 0x196
 11893 0073 93220000 		.4byte	.LASF547
 11894 0077 06       		.byte	0x6
 11895 0078 9C03     		.uleb128 0x19c
 11896 007a 08590000 		.4byte	.LASF548
 11897 007e 05       		.byte	0x5
 11898 007f A103     		.uleb128 0x1a1
 11899 0081 B54D0000 		.4byte	.LASF563
 11900 0085 00       		.byte	0
ARM GAS  /tmp/ccTV2SzP.s 			page 277


 11901              		.section	.debug_macro,"G",%progbits,wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd,comdat
 11902              	.Ldebug_macro10:
 11903 0000 0400     		.2byte	0x4
 11904 0002 00       		.byte	0
 11905 0003 05       		.byte	0x5
 11906 0004 06       		.uleb128 0x6
 11907 0005 BD6E0000 		.4byte	.LASF566
 11908 0009 05       		.byte	0x5
 11909 000a 0F       		.uleb128 0xf
 11910 000b A35E0000 		.4byte	.LASF567
 11911 000f 05       		.byte	0x5
 11912 0010 1A       		.uleb128 0x1a
 11913 0011 A17B0000 		.4byte	.LASF568
 11914 0015 05       		.byte	0x5
 11915 0016 21       		.uleb128 0x21
 11916 0017 62390000 		.4byte	.LASF569
 11917 001b 05       		.byte	0x5
 11918 001c 2F       		.uleb128 0x2f
 11919 001d 2B480000 		.4byte	.LASF570
 11920 0021 05       		.byte	0x5
 11921 0022 3D       		.uleb128 0x3d
 11922 0023 2D340000 		.4byte	.LASF571
 11923 0027 05       		.byte	0x5
 11924 0028 53       		.uleb128 0x53
 11925 0029 48A10000 		.4byte	.LASF572
 11926 002d 05       		.byte	0x5
 11927 002e 6D       		.uleb128 0x6d
 11928 002f 541D0000 		.4byte	.LASF573
 11929 0033 05       		.byte	0x5
 11930 0034 8C01     		.uleb128 0x8c
 11931 0036 1E670000 		.4byte	.LASF574
 11932 003a 05       		.byte	0x5
 11933 003b A601     		.uleb128 0xa6
 11934 003d AA1B0000 		.4byte	.LASF575
 11935 0041 05       		.byte	0x5
 11936 0042 BC01     		.uleb128 0xbc
 11937 0044 3D850000 		.4byte	.LASF576
 11938 0048 05       		.byte	0x5
 11939 0049 CE01     		.uleb128 0xce
 11940 004b 519C0000 		.4byte	.LASF577
 11941 004f 06       		.byte	0x6
 11942 0050 F401     		.uleb128 0xf4
 11943 0052 07740000 		.4byte	.LASF578
 11944 0056 00       		.byte	0
 11945              		.section	.debug_macro,"G",%progbits,wm4.lock.h.2.408dfd8112071273287811a44077560f,comdat
 11946              	.Ldebug_macro11:
 11947 0000 0400     		.2byte	0x4
 11948 0002 00       		.byte	0
 11949 0003 05       		.byte	0x5
 11950 0004 02       		.uleb128 0x2
 11951 0005 20A90000 		.4byte	.LASF579
 11952 0009 05       		.byte	0x5
 11953 000a 0E       		.uleb128 0xe
 11954 000b A06F0000 		.4byte	.LASF580
 11955 000f 05       		.byte	0x5
 11956 0010 0F       		.uleb128 0xf
 11957 0011 6B950000 		.4byte	.LASF581
ARM GAS  /tmp/ccTV2SzP.s 			page 278


 11958 0015 05       		.byte	0x5
 11959 0016 10       		.uleb128 0x10
 11960 0017 4C6B0000 		.4byte	.LASF582
 11961 001b 05       		.byte	0x5
 11962 001c 11       		.uleb128 0x11
 11963 001d D7A10000 		.4byte	.LASF583
 11964 0021 05       		.byte	0x5
 11965 0022 12       		.uleb128 0x12
 11966 0023 F8A50000 		.4byte	.LASF584
 11967 0027 05       		.byte	0x5
 11968 0028 13       		.uleb128 0x13
 11969 0029 F00D0000 		.4byte	.LASF585
 11970 002d 05       		.byte	0x5
 11971 002e 14       		.uleb128 0x14
 11972 002f 21550000 		.4byte	.LASF586
 11973 0033 05       		.byte	0x5
 11974 0034 15       		.uleb128 0x15
 11975 0035 E43F0000 		.4byte	.LASF587
 11976 0039 05       		.byte	0x5
 11977 003a 16       		.uleb128 0x16
 11978 003b 16330000 		.4byte	.LASF588
 11979 003f 05       		.byte	0x5
 11980 0040 17       		.uleb128 0x17
 11981 0041 19730000 		.4byte	.LASF589
 11982 0045 05       		.byte	0x5
 11983 0046 18       		.uleb128 0x18
 11984 0047 A97D0000 		.4byte	.LASF590
 11985 004b 05       		.byte	0x5
 11986 004c 19       		.uleb128 0x19
 11987 004d 44920000 		.4byte	.LASF591
 11988 0051 00       		.byte	0
 11989              		.section	.debug_macro,"G",%progbits,wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068,comdat
 11990              	.Ldebug_macro12:
 11991 0000 0400     		.2byte	0x4
 11992 0002 00       		.byte	0
 11993 0003 06       		.byte	0x6
 11994 0004 7D       		.uleb128 0x7d
 11995 0005 0B770000 		.4byte	.LASF592
 11996 0009 05       		.byte	0x5
 11997 000a 9001     		.uleb128 0x90
 11998 000c 2A660000 		.4byte	.LASF593
 11999 0010 06       		.byte	0x6
 12000 0011 9201     		.uleb128 0x92
 12001 0013 338C0000 		.4byte	.LASF594
 12002 0017 05       		.byte	0x5
 12003 0018 9E01     		.uleb128 0x9e
 12004 001a 6C9D0000 		.4byte	.LASF595
 12005 001e 00       		.byte	0
 12006              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34,comdat
 12007              	.Ldebug_macro13:
 12008 0000 0400     		.2byte	0x4
 12009 0002 00       		.byte	0
 12010 0003 06       		.byte	0x6
 12011 0004 A101     		.uleb128 0xa1
 12012 0006 49910000 		.4byte	.LASF562
 12013 000a 06       		.byte	0x6
 12014 000b EE01     		.uleb128 0xee
ARM GAS  /tmp/ccTV2SzP.s 			page 279


 12015 000d 413C0000 		.4byte	.LASF528
 12016 0011 06       		.byte	0x6
 12017 0012 DB02     		.uleb128 0x15b
 12018 0014 42110000 		.4byte	.LASF545
 12019 0018 05       		.byte	0x5
 12020 0019 E002     		.uleb128 0x160
 12021 001b 41310000 		.4byte	.LASF596
 12022 001f 06       		.byte	0x6
 12023 0020 E702     		.uleb128 0x167
 12024 0022 8C540000 		.4byte	.LASF597
 12025 0026 06       		.byte	0x6
 12026 0027 9103     		.uleb128 0x191
 12027 0029 C7450000 		.4byte	.LASF546
 12028 002d 05       		.byte	0x5
 12029 002e 9603     		.uleb128 0x196
 12030 0030 93220000 		.4byte	.LASF547
 12031 0034 06       		.byte	0x6
 12032 0035 9C03     		.uleb128 0x19c
 12033 0037 08590000 		.4byte	.LASF548
 12034 003b 05       		.byte	0x5
 12035 003c A103     		.uleb128 0x1a1
 12036 003e B54D0000 		.4byte	.LASF563
 12037 0042 00       		.byte	0
 12038              		.section	.debug_macro,"G",%progbits,wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098,comdat
 12039              	.Ldebug_macro14:
 12040 0000 0400     		.2byte	0x4
 12041 0002 00       		.byte	0
 12042 0003 05       		.byte	0x5
 12043 0004 B701     		.uleb128 0xb7
 12044 0006 FD2C0000 		.4byte	.LASF598
 12045 000a 05       		.byte	0x5
 12046 000b BA01     		.uleb128 0xba
 12047 000d 1C660000 		.4byte	.LASF599
 12048 0011 05       		.byte	0x5
 12049 0012 BD01     		.uleb128 0xbd
 12050 0014 12800000 		.4byte	.LASF600
 12051 0018 05       		.byte	0x5
 12052 0019 C001     		.uleb128 0xc0
 12053 001b B24B0000 		.4byte	.LASF601
 12054 001f 00       		.byte	0
 12055              		.section	.debug_macro,"G",%progbits,wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f,comdat
 12056              	.Ldebug_macro15:
 12057 0000 0400     		.2byte	0x4
 12058 0002 00       		.byte	0
 12059 0003 05       		.byte	0x5
 12060 0004 11       		.uleb128 0x11
 12061 0005 EA910000 		.4byte	.LASF602
 12062 0009 05       		.byte	0x5
 12063 000a 15       		.uleb128 0x15
 12064 000b 31850000 		.4byte	.LASF603
 12065 000f 05       		.byte	0x5
 12066 0010 48       		.uleb128 0x48
 12067 0011 1A360000 		.4byte	.LASF604
 12068 0015 05       		.byte	0x5
 12069 0016 64       		.uleb128 0x64
 12070 0017 62410000 		.4byte	.LASF605
 12071 001b 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 280


 12072 001c 6A       		.uleb128 0x6a
 12073 001d 568D0000 		.4byte	.LASF606
 12074 0021 05       		.byte	0x5
 12075 0022 B201     		.uleb128 0xb2
 12076 0024 EF540000 		.4byte	.LASF607
 12077 0028 05       		.byte	0x5
 12078 0029 B802     		.uleb128 0x138
 12079 002b 845C0000 		.4byte	.LASF608
 12080 002f 05       		.byte	0x5
 12081 0030 B902     		.uleb128 0x139
 12082 0032 A8510000 		.4byte	.LASF609
 12083 0036 05       		.byte	0x5
 12084 0037 BA02     		.uleb128 0x13a
 12085 0039 EF6A0000 		.4byte	.LASF610
 12086 003d 05       		.byte	0x5
 12087 003e BB02     		.uleb128 0x13b
 12088 0040 DD970000 		.4byte	.LASF611
 12089 0044 05       		.byte	0x5
 12090 0045 BC02     		.uleb128 0x13c
 12091 0047 B8830000 		.4byte	.LASF612
 12092 004b 05       		.byte	0x5
 12093 004c BD02     		.uleb128 0x13d
 12094 004e 09650000 		.4byte	.LASF613
 12095 0052 05       		.byte	0x5
 12096 0053 BE02     		.uleb128 0x13e
 12097 0055 BFA40000 		.4byte	.LASF614
 12098 0059 05       		.byte	0x5
 12099 005a CA02     		.uleb128 0x14a
 12100 005c 84200000 		.4byte	.LASF615
 12101 0060 05       		.byte	0x5
 12102 0061 CB02     		.uleb128 0x14b
 12103 0063 8FA90000 		.4byte	.LASF616
 12104 0067 05       		.byte	0x5
 12105 0068 CC02     		.uleb128 0x14c
 12106 006a 9E070000 		.4byte	.LASF617
 12107 006e 05       		.byte	0x5
 12108 006f F404     		.uleb128 0x274
 12109 0071 71180000 		.4byte	.LASF618
 12110 0075 05       		.byte	0x5
 12111 0076 8A05     		.uleb128 0x28a
 12112 0078 01680000 		.4byte	.LASF619
 12113 007c 05       		.byte	0x5
 12114 007d BA05     		.uleb128 0x2ba
 12115 007f 50010000 		.4byte	.LASF620
 12116 0083 05       		.byte	0x5
 12117 0084 C805     		.uleb128 0x2c8
 12118 0086 BE9A0000 		.4byte	.LASF621
 12119 008a 05       		.byte	0x5
 12120 008b C905     		.uleb128 0x2c9
 12121 008d D6150000 		.4byte	.LASF622
 12122 0091 05       		.byte	0x5
 12123 0092 CA05     		.uleb128 0x2ca
 12124 0094 2C800000 		.4byte	.LASF623
 12125 0098 05       		.byte	0x5
 12126 0099 CB05     		.uleb128 0x2cb
 12127 009b 152D0000 		.4byte	.LASF624
 12128 009f 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 281


 12129 00a0 CC05     		.uleb128 0x2cc
 12130 00a2 FF870000 		.4byte	.LASF625
 12131 00a6 05       		.byte	0x5
 12132 00a7 CD05     		.uleb128 0x2cd
 12133 00a9 A3740000 		.4byte	.LASF626
 12134 00ad 05       		.byte	0x5
 12135 00ae CE05     		.uleb128 0x2ce
 12136 00b0 6E540000 		.4byte	.LASF627
 12137 00b4 05       		.byte	0x5
 12138 00b5 D005     		.uleb128 0x2d0
 12139 00b7 083B0000 		.4byte	.LASF628
 12140 00bb 05       		.byte	0x5
 12141 00bc D105     		.uleb128 0x2d1
 12142 00be 921C0000 		.4byte	.LASF629
 12143 00c2 05       		.byte	0x5
 12144 00c3 D205     		.uleb128 0x2d2
 12145 00c5 31190000 		.4byte	.LASF630
 12146 00c9 05       		.byte	0x5
 12147 00ca D305     		.uleb128 0x2d3
 12148 00cc 17580000 		.4byte	.LASF631
 12149 00d0 05       		.byte	0x5
 12150 00d1 D405     		.uleb128 0x2d4
 12151 00d3 863C0000 		.4byte	.LASF632
 12152 00d7 05       		.byte	0x5
 12153 00d8 D505     		.uleb128 0x2d5
 12154 00da B40E0000 		.4byte	.LASF633
 12155 00de 05       		.byte	0x5
 12156 00df D605     		.uleb128 0x2d6
 12157 00e1 D0250000 		.4byte	.LASF634
 12158 00e5 05       		.byte	0x5
 12159 00e6 D705     		.uleb128 0x2d7
 12160 00e8 BB670000 		.4byte	.LASF635
 12161 00ec 05       		.byte	0x5
 12162 00ed D805     		.uleb128 0x2d8
 12163 00ef D40A0000 		.4byte	.LASF636
 12164 00f3 05       		.byte	0x5
 12165 00f4 D905     		.uleb128 0x2d9
 12166 00f6 3D4C0000 		.4byte	.LASF637
 12167 00fa 05       		.byte	0x5
 12168 00fb DA05     		.uleb128 0x2da
 12169 00fd 193F0000 		.4byte	.LASF638
 12170 0101 05       		.byte	0x5
 12171 0102 DB05     		.uleb128 0x2db
 12172 0104 484E0000 		.4byte	.LASF639
 12173 0108 05       		.byte	0x5
 12174 0109 DC05     		.uleb128 0x2dc
 12175 010b 3C290000 		.4byte	.LASF640
 12176 010f 05       		.byte	0x5
 12177 0110 DD05     		.uleb128 0x2dd
 12178 0112 94440000 		.4byte	.LASF641
 12179 0116 05       		.byte	0x5
 12180 0117 DE05     		.uleb128 0x2de
 12181 0119 0E440000 		.4byte	.LASF642
 12182 011d 05       		.byte	0x5
 12183 011e DF05     		.uleb128 0x2df
 12184 0120 8E780000 		.4byte	.LASF643
 12185 0124 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 282


 12186 0125 E005     		.uleb128 0x2e0
 12187 0127 915D0000 		.4byte	.LASF644
 12188 012b 05       		.byte	0x5
 12189 012c E105     		.uleb128 0x2e1
 12190 012e 03310000 		.4byte	.LASF645
 12191 0132 05       		.byte	0x5
 12192 0133 E205     		.uleb128 0x2e2
 12193 0135 0CAA0000 		.4byte	.LASF646
 12194 0139 05       		.byte	0x5
 12195 013a E305     		.uleb128 0x2e3
 12196 013c 3C7D0000 		.4byte	.LASF647
 12197 0140 05       		.byte	0x5
 12198 0141 E405     		.uleb128 0x2e4
 12199 0143 A6260000 		.4byte	.LASF648
 12200 0147 05       		.byte	0x5
 12201 0148 E505     		.uleb128 0x2e5
 12202 014a 425E0000 		.4byte	.LASF649
 12203 014e 05       		.byte	0x5
 12204 014f E605     		.uleb128 0x2e6
 12205 0151 54A30000 		.4byte	.LASF650
 12206 0155 05       		.byte	0x5
 12207 0156 E705     		.uleb128 0x2e7
 12208 0158 31A70000 		.4byte	.LASF651
 12209 015c 05       		.byte	0x5
 12210 015d EB05     		.uleb128 0x2eb
 12211 015f 37710000 		.4byte	.LASF652
 12212 0163 05       		.byte	0x5
 12213 0164 F305     		.uleb128 0x2f3
 12214 0166 D0070000 		.4byte	.LASF653
 12215 016a 05       		.byte	0x5
 12216 016b FB05     		.uleb128 0x2fb
 12217 016d 8A8F0000 		.4byte	.LASF654
 12218 0171 05       		.byte	0x5
 12219 0172 8B06     		.uleb128 0x30b
 12220 0174 42340000 		.4byte	.LASF655
 12221 0178 05       		.byte	0x5
 12222 0179 8E06     		.uleb128 0x30e
 12223 017b C9910000 		.4byte	.LASF656
 12224 017f 05       		.byte	0x5
 12225 0180 9406     		.uleb128 0x314
 12226 0182 AC030000 		.4byte	.LASF657
 12227 0186 00       		.byte	0
 12228              		.section	.debug_macro,"G",%progbits,wm4.cdefs.h.47.14948c9210d429a388eac802a838bb4c,comdat
 12229              	.Ldebug_macro16:
 12230 0000 0400     		.2byte	0x4
 12231 0002 00       		.byte	0
 12232 0003 05       		.byte	0x5
 12233 0004 2F       		.uleb128 0x2f
 12234 0005 5F280000 		.4byte	.LASF659
 12235 0009 05       		.byte	0x5
 12236 000a 30       		.uleb128 0x30
 12237 000b 2B770000 		.4byte	.LASF660
 12238 000f 05       		.byte	0x5
 12239 0010 31       		.uleb128 0x31
 12240 0011 EC5D0000 		.4byte	.LASF661
 12241 0015 05       		.byte	0x5
 12242 0016 34       		.uleb128 0x34
ARM GAS  /tmp/ccTV2SzP.s 			page 283


 12243 0017 09110000 		.4byte	.LASF662
 12244 001b 05       		.byte	0x5
 12245 001c 37       		.uleb128 0x37
 12246 001d 3E240000 		.4byte	.LASF663
 12247 0021 05       		.byte	0x5
 12248 0022 38       		.uleb128 0x38
 12249 0023 CC9E0000 		.4byte	.LASF664
 12250 0027 05       		.byte	0x5
 12251 0028 3A       		.uleb128 0x3a
 12252 0029 104A0000 		.4byte	.LASF665
 12253 002d 05       		.byte	0x5
 12254 002e 3B       		.uleb128 0x3b
 12255 002f 82170000 		.4byte	.LASF666
 12256 0033 05       		.byte	0x5
 12257 0034 3C       		.uleb128 0x3c
 12258 0035 53270000 		.4byte	.LASF667
 12259 0039 05       		.byte	0x5
 12260 003a 3D       		.uleb128 0x3d
 12261 003b B4900000 		.4byte	.LASF668
 12262 003f 05       		.byte	0x5
 12263 0040 40       		.uleb128 0x40
 12264 0041 99120000 		.4byte	.LASF669
 12265 0045 05       		.byte	0x5
 12266 0046 41       		.uleb128 0x41
 12267 0047 6D0D0000 		.4byte	.LASF670
 12268 004b 05       		.byte	0x5
 12269 004c 42       		.uleb128 0x42
 12270 004d 2A2C0000 		.4byte	.LASF671
 12271 0051 05       		.byte	0x5
 12272 0052 4C       		.uleb128 0x4c
 12273 0053 B2150000 		.4byte	.LASF672
 12274 0057 05       		.byte	0x5
 12275 0058 4F       		.uleb128 0x4f
 12276 0059 15470000 		.4byte	.LASF673
 12277 005d 05       		.byte	0x5
 12278 005e 55       		.uleb128 0x55
 12279 005f 498C0000 		.4byte	.LASF674
 12280 0063 05       		.byte	0x5
 12281 0064 5C       		.uleb128 0x5c
 12282 0065 89740000 		.4byte	.LASF675
 12283 0069 05       		.byte	0x5
 12284 006a 5D       		.uleb128 0x5d
 12285 006b 878A0000 		.4byte	.LASF676
 12286 006f 05       		.byte	0x5
 12287 0070 69       		.uleb128 0x69
 12288 0071 6E960000 		.4byte	.LASF677
 12289 0075 05       		.byte	0x5
 12290 0076 6A       		.uleb128 0x6a
 12291 0077 C0990000 		.4byte	.LASF678
 12292 007b 05       		.byte	0x5
 12293 007c 6E       		.uleb128 0x6e
 12294 007d 80080000 		.4byte	.LASF679
 12295 0081 05       		.byte	0x5
 12296 0082 6F       		.uleb128 0x6f
 12297 0083 A6890000 		.4byte	.LASF680
 12298 0087 05       		.byte	0x5
 12299 0088 70       		.uleb128 0x70
ARM GAS  /tmp/ccTV2SzP.s 			page 284


 12300 0089 00000000 		.4byte	.LASF681
 12301 008d 05       		.byte	0x5
 12302 008e 73       		.uleb128 0x73
 12303 008f 0E850000 		.4byte	.LASF682
 12304 0093 05       		.byte	0x5
 12305 0094 76       		.uleb128 0x76
 12306 0095 A48B0000 		.4byte	.LASF683
 12307 0099 05       		.byte	0x5
 12308 009a 7D       		.uleb128 0x7d
 12309 009b BA3A0000 		.4byte	.LASF684
 12310 009f 05       		.byte	0x5
 12311 00a0 7E       		.uleb128 0x7e
 12312 00a1 99930000 		.4byte	.LASF685
 12313 00a5 05       		.byte	0x5
 12314 00a6 7F       		.uleb128 0x7f
 12315 00a7 11980000 		.4byte	.LASF686
 12316 00ab 05       		.byte	0x5
 12317 00ac 8301     		.uleb128 0x83
 12318 00ae FF5A0000 		.4byte	.LASF687
 12319 00b2 05       		.byte	0x5
 12320 00b3 8A01     		.uleb128 0x8a
 12321 00b5 40A20000 		.4byte	.LASF688
 12322 00b9 05       		.byte	0x5
 12323 00ba 8E01     		.uleb128 0x8e
 12324 00bc 176F0000 		.4byte	.LASF689
 12325 00c0 05       		.byte	0x5
 12326 00c1 8F01     		.uleb128 0x8f
 12327 00c3 29280000 		.4byte	.LASF690
 12328 00c7 05       		.byte	0x5
 12329 00c8 9201     		.uleb128 0x92
 12330 00ca 8D600000 		.4byte	.LASF691
 12331 00ce 05       		.byte	0x5
 12332 00cf 9501     		.uleb128 0x95
 12333 00d1 14770000 		.4byte	.LASF692
 12334 00d5 05       		.byte	0x5
 12335 00d6 9601     		.uleb128 0x96
 12336 00d8 F3350000 		.4byte	.LASF693
 12337 00dc 05       		.byte	0x5
 12338 00dd 9701     		.uleb128 0x97
 12339 00df 7E8D0000 		.4byte	.LASF694
 12340 00e3 05       		.byte	0x5
 12341 00e4 9901     		.uleb128 0x99
 12342 00e6 6B520000 		.4byte	.LASF695
 12343 00ea 05       		.byte	0x5
 12344 00eb 9A01     		.uleb128 0x9a
 12345 00ed 359A0000 		.4byte	.LASF696
 12346 00f1 05       		.byte	0x5
 12347 00f2 9C01     		.uleb128 0x9c
 12348 00f4 EC9B0000 		.4byte	.LASF697
 12349 00f8 05       		.byte	0x5
 12350 00f9 9E01     		.uleb128 0x9e
 12351 00fb 12200000 		.4byte	.LASF698
 12352 00ff 05       		.byte	0x5
 12353 0100 AF01     		.uleb128 0xaf
 12354 0102 BE2C0000 		.4byte	.LASF699
 12355 0106 05       		.byte	0x5
 12356 0107 B001     		.uleb128 0xb0
ARM GAS  /tmp/ccTV2SzP.s 			page 285


 12357 0109 62130000 		.4byte	.LASF700
 12358 010d 05       		.byte	0x5
 12359 010e B101     		.uleb128 0xb1
 12360 0110 22A60000 		.4byte	.LASF701
 12361 0114 05       		.byte	0x5
 12362 0115 B201     		.uleb128 0xb2
 12363 0117 116E0000 		.4byte	.LASF702
 12364 011b 05       		.byte	0x5
 12365 011c B301     		.uleb128 0xb3
 12366 011e 99390000 		.4byte	.LASF703
 12367 0122 05       		.byte	0x5
 12368 0123 B501     		.uleb128 0xb5
 12369 0125 97550000 		.4byte	.LASF704
 12370 0129 05       		.byte	0x5
 12371 012a B601     		.uleb128 0xb6
 12372 012c 7A7A0000 		.4byte	.LASF705
 12373 0130 05       		.byte	0x5
 12374 0131 B701     		.uleb128 0xb7
 12375 0133 57A40000 		.4byte	.LASF706
 12376 0137 05       		.byte	0x5
 12377 0138 EF01     		.uleb128 0xef
 12378 013a 85330000 		.4byte	.LASF707
 12379 013e 05       		.byte	0x5
 12380 013f FC01     		.uleb128 0xfc
 12381 0141 4B730000 		.4byte	.LASF708
 12382 0145 05       		.byte	0x5
 12383 0146 FD01     		.uleb128 0xfd
 12384 0148 504F0000 		.4byte	.LASF709
 12385 014c 05       		.byte	0x5
 12386 014d FE01     		.uleb128 0xfe
 12387 014f D75C0000 		.4byte	.LASF710
 12388 0153 05       		.byte	0x5
 12389 0154 FF01     		.uleb128 0xff
 12390 0156 DC330000 		.4byte	.LASF711
 12391 015a 05       		.byte	0x5
 12392 015b 8002     		.uleb128 0x100
 12393 015d 1DA80000 		.4byte	.LASF712
 12394 0161 05       		.byte	0x5
 12395 0162 8102     		.uleb128 0x101
 12396 0164 A00C0000 		.4byte	.LASF713
 12397 0168 05       		.byte	0x5
 12398 0169 8202     		.uleb128 0x102
 12399 016b 884D0000 		.4byte	.LASF714
 12400 016f 05       		.byte	0x5
 12401 0170 8502     		.uleb128 0x105
 12402 0172 A5550000 		.4byte	.LASF715
 12403 0176 05       		.byte	0x5
 12404 0177 8A02     		.uleb128 0x10a
 12405 0179 34250000 		.4byte	.LASF716
 12406 017d 05       		.byte	0x5
 12407 017e A002     		.uleb128 0x120
 12408 0180 4F2C0000 		.4byte	.LASF717
 12409 0184 05       		.byte	0x5
 12410 0185 A702     		.uleb128 0x127
 12411 0187 D35D0000 		.4byte	.LASF718
 12412 018b 05       		.byte	0x5
 12413 018c B002     		.uleb128 0x130
ARM GAS  /tmp/ccTV2SzP.s 			page 286


 12414 018e 039E0000 		.4byte	.LASF719
 12415 0192 05       		.byte	0x5
 12416 0193 B602     		.uleb128 0x136
 12417 0195 196A0000 		.4byte	.LASF720
 12418 0199 05       		.byte	0x5
 12419 019a D302     		.uleb128 0x153
 12420 019c 85420000 		.4byte	.LASF721
 12421 01a0 05       		.byte	0x5
 12422 01a1 E702     		.uleb128 0x167
 12423 01a3 F38A0000 		.4byte	.LASF722
 12424 01a7 05       		.byte	0x5
 12425 01a8 F602     		.uleb128 0x176
 12426 01aa 994B0000 		.4byte	.LASF723
 12427 01ae 05       		.byte	0x5
 12428 01af FC02     		.uleb128 0x17c
 12429 01b1 786C0000 		.4byte	.LASF724
 12430 01b5 05       		.byte	0x5
 12431 01b6 FD02     		.uleb128 0x17d
 12432 01b8 5B3E0000 		.4byte	.LASF725
 12433 01bc 05       		.byte	0x5
 12434 01bd 8403     		.uleb128 0x184
 12435 01bf 6B240000 		.4byte	.LASF726
 12436 01c3 05       		.byte	0x5
 12437 01c4 8A03     		.uleb128 0x18a
 12438 01c6 EB310000 		.4byte	.LASF727
 12439 01ca 05       		.byte	0x5
 12440 01cb 9003     		.uleb128 0x190
 12441 01cd 3E520000 		.4byte	.LASF728
 12442 01d1 05       		.byte	0x5
 12443 01d2 9103     		.uleb128 0x191
 12444 01d4 295D0000 		.4byte	.LASF729
 12445 01d8 05       		.byte	0x5
 12446 01d9 9803     		.uleb128 0x198
 12447 01db 268E0000 		.4byte	.LASF730
 12448 01df 05       		.byte	0x5
 12449 01e0 9903     		.uleb128 0x199
 12450 01e2 B5930000 		.4byte	.LASF731
 12451 01e6 05       		.byte	0x5
 12452 01e7 A003     		.uleb128 0x1a0
 12453 01e9 6B3F0000 		.4byte	.LASF732
 12454 01ed 05       		.byte	0x5
 12455 01ee A603     		.uleb128 0x1a6
 12456 01f0 BE640000 		.4byte	.LASF733
 12457 01f4 05       		.byte	0x5
 12458 01f5 B803     		.uleb128 0x1b8
 12459 01f7 1F630000 		.4byte	.LASF734
 12460 01fb 05       		.byte	0x5
 12461 01fc DB03     		.uleb128 0x1db
 12462 01fe 44260000 		.4byte	.LASF735
 12463 0202 05       		.byte	0x5
 12464 0203 DC03     		.uleb128 0x1dc
 12465 0205 2B630000 		.4byte	.LASF736
 12466 0209 05       		.byte	0x5
 12467 020a E303     		.uleb128 0x1e3
 12468 020c 4E1B0000 		.4byte	.LASF737
 12469 0210 05       		.byte	0x5
 12470 0211 E403     		.uleb128 0x1e4
ARM GAS  /tmp/ccTV2SzP.s 			page 287


 12471 0213 CE0F0000 		.4byte	.LASF738
 12472 0217 05       		.byte	0x5
 12473 0218 E703     		.uleb128 0x1e7
 12474 021a 23300000 		.4byte	.LASF739
 12475 021e 05       		.byte	0x5
 12476 021f F103     		.uleb128 0x1f1
 12477 0221 7D480000 		.4byte	.LASF740
 12478 0225 05       		.byte	0x5
 12479 0226 F203     		.uleb128 0x1f2
 12480 0228 AE1F0000 		.4byte	.LASF741
 12481 022c 05       		.byte	0x5
 12482 022d FC03     		.uleb128 0x1fc
 12483 022f DD8E0000 		.4byte	.LASF742
 12484 0233 05       		.byte	0x5
 12485 0234 9204     		.uleb128 0x212
 12486 0236 B78D0000 		.4byte	.LASF743
 12487 023a 05       		.byte	0x5
 12488 023b 9404     		.uleb128 0x214
 12489 023d F8960000 		.4byte	.LASF744
 12490 0241 05       		.byte	0x5
 12491 0242 9604     		.uleb128 0x216
 12492 0244 02A20000 		.4byte	.LASF745
 12493 0248 05       		.byte	0x5
 12494 0249 9704     		.uleb128 0x217
 12495 024b BA200000 		.4byte	.LASF746
 12496 024f 05       		.byte	0x5
 12497 0250 9904     		.uleb128 0x219
 12498 0252 8C190000 		.4byte	.LASF747
 12499 0256 05       		.byte	0x5
 12500 0257 A304     		.uleb128 0x223
 12501 0259 B6720000 		.4byte	.LASF748
 12502 025d 05       		.byte	0x5
 12503 025e A804     		.uleb128 0x228
 12504 0260 A53B0000 		.4byte	.LASF749
 12505 0264 05       		.byte	0x5
 12506 0265 AD04     		.uleb128 0x22d
 12507 0267 F5140000 		.4byte	.LASF750
 12508 026b 05       		.byte	0x5
 12509 026c B004     		.uleb128 0x230
 12510 026e 61560000 		.4byte	.LASF751
 12511 0272 05       		.byte	0x5
 12512 0273 B404     		.uleb128 0x234
 12513 0275 65980000 		.4byte	.LASF752
 12514 0279 05       		.byte	0x5
 12515 027a B604     		.uleb128 0x236
 12516 027c C42A0000 		.4byte	.LASF753
 12517 0280 05       		.byte	0x5
 12518 0281 D904     		.uleb128 0x259
 12519 0283 948A0000 		.4byte	.LASF754
 12520 0287 05       		.byte	0x5
 12521 0288 DD04     		.uleb128 0x25d
 12522 028a 3A890000 		.4byte	.LASF755
 12523 028e 05       		.byte	0x5
 12524 028f E104     		.uleb128 0x261
 12525 0291 7F090000 		.4byte	.LASF756
 12526 0295 05       		.byte	0x5
 12527 0296 E504     		.uleb128 0x265
ARM GAS  /tmp/ccTV2SzP.s 			page 288


 12528 0298 BA220000 		.4byte	.LASF757
 12529 029c 05       		.byte	0x5
 12530 029d E904     		.uleb128 0x269
 12531 029f BE710000 		.4byte	.LASF758
 12532 02a3 05       		.byte	0x5
 12533 02a4 ED04     		.uleb128 0x26d
 12534 02a6 E7A30000 		.4byte	.LASF759
 12535 02aa 05       		.byte	0x5
 12536 02ab F104     		.uleb128 0x271
 12537 02ad B1920000 		.4byte	.LASF760
 12538 02b1 05       		.byte	0x5
 12539 02b2 F504     		.uleb128 0x275
 12540 02b4 8FA70000 		.4byte	.LASF761
 12541 02b8 05       		.byte	0x5
 12542 02b9 FC04     		.uleb128 0x27c
 12543 02bb 96170000 		.4byte	.LASF762
 12544 02bf 05       		.byte	0x5
 12545 02c0 FD04     		.uleb128 0x27d
 12546 02c2 480C0000 		.4byte	.LASF763
 12547 02c6 05       		.byte	0x5
 12548 02c7 FE04     		.uleb128 0x27e
 12549 02c9 9C0D0000 		.4byte	.LASF764
 12550 02cd 05       		.byte	0x5
 12551 02ce FF04     		.uleb128 0x27f
 12552 02d0 954F0000 		.4byte	.LASF765
 12553 02d4 05       		.byte	0x5
 12554 02d5 8005     		.uleb128 0x280
 12555 02d7 665B0000 		.4byte	.LASF766
 12556 02db 05       		.byte	0x5
 12557 02dc 9505     		.uleb128 0x295
 12558 02de EC700000 		.4byte	.LASF767
 12559 02e2 05       		.byte	0x5
 12560 02e3 9605     		.uleb128 0x296
 12561 02e5 34A30000 		.4byte	.LASF768
 12562 02e9 05       		.byte	0x5
 12563 02ea A805     		.uleb128 0x2a8
 12564 02ec 8E8E0000 		.4byte	.LASF769
 12565 02f0 05       		.byte	0x5
 12566 02f1 AC05     		.uleb128 0x2ac
 12567 02f3 028A0000 		.4byte	.LASF770
 12568 02f7 05       		.byte	0x5
 12569 02f8 AF05     		.uleb128 0x2af
 12570 02fa 19990000 		.4byte	.LASF771
 12571 02fe 05       		.byte	0x5
 12572 02ff B105     		.uleb128 0x2b1
 12573 0301 0A960000 		.4byte	.LASF772
 12574 0305 05       		.byte	0x5
 12575 0306 B505     		.uleb128 0x2b5
 12576 0308 397C0000 		.4byte	.LASF773
 12577 030c 05       		.byte	0x5
 12578 030d B705     		.uleb128 0x2b7
 12579 030f CE440000 		.4byte	.LASF774
 12580 0313 05       		.byte	0x5
 12581 0314 BB05     		.uleb128 0x2bb
 12582 0316 BB690000 		.4byte	.LASF775
 12583 031a 05       		.byte	0x5
 12584 031b BE05     		.uleb128 0x2be
ARM GAS  /tmp/ccTV2SzP.s 			page 289


 12585 031d D8520000 		.4byte	.LASF776
 12586 0321 05       		.byte	0x5
 12587 0322 C005     		.uleb128 0x2c0
 12588 0324 D9A80000 		.4byte	.LASF777
 12589 0328 05       		.byte	0x5
 12590 0329 C405     		.uleb128 0x2c4
 12591 032b A1040000 		.4byte	.LASF778
 12592 032f 05       		.byte	0x5
 12593 0330 C605     		.uleb128 0x2c6
 12594 0332 E2370000 		.4byte	.LASF779
 12595 0336 05       		.byte	0x5
 12596 0337 C805     		.uleb128 0x2c8
 12597 0339 E94A0000 		.4byte	.LASF780
 12598 033d 05       		.byte	0x5
 12599 033e CC05     		.uleb128 0x2cc
 12600 0340 457E0000 		.4byte	.LASF781
 12601 0344 05       		.byte	0x5
 12602 0345 CF05     		.uleb128 0x2cf
 12603 0347 E78C0000 		.4byte	.LASF782
 12604 034b 05       		.byte	0x5
 12605 034c D005     		.uleb128 0x2d0
 12606 034e B28C0000 		.4byte	.LASF783
 12607 0352 00       		.byte	0
 12608              		.section	.debug_macro,"G",%progbits,wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d,comdat
 12609              	.Ldebug_macro17:
 12610 0000 0400     		.2byte	0x4
 12611 0002 00       		.byte	0
 12612 0003 05       		.byte	0x5
 12613 0004 08       		.uleb128 0x8
 12614 0005 363D0000 		.4byte	.LASF785
 12615 0009 06       		.byte	0x6
 12616 000a 0D       		.uleb128 0xd
 12617 000b 64660000 		.4byte	.LASF786
 12618 000f 05       		.byte	0x5
 12619 0010 10       		.uleb128 0x10
 12620 0011 EE7F0000 		.4byte	.LASF787
 12621 0015 00       		.byte	0
 12622              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45,comdat
 12623              	.Ldebug_macro18:
 12624 0000 0400     		.2byte	0x4
 12625 0002 00       		.byte	0
 12626 0003 05       		.byte	0x5
 12627 0004 38       		.uleb128 0x38
 12628 0005 80730000 		.4byte	.LASF788
 12629 0009 05       		.byte	0x5
 12630 000a 3C       		.uleb128 0x3c
 12631 000b D4A40000 		.4byte	.LASF789
 12632 000f 05       		.byte	0x5
 12633 0010 3D       		.uleb128 0x3d
 12634 0011 C59D0000 		.4byte	.LASF790
 12635 0015 05       		.byte	0x5
 12636 0016 3F       		.uleb128 0x3f
 12637 0017 3E490000 		.4byte	.LASF791
 12638 001b 05       		.byte	0x5
 12639 001c 43       		.uleb128 0x43
 12640 001d B55A0000 		.4byte	.LASF792
 12641 0021 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 290


 12642 0022 A501     		.uleb128 0xa5
 12643 0024 66990000 		.4byte	.LASF793
 12644 0028 00       		.byte	0
 12645              		.section	.debug_macro,"G",%progbits,wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd,comdat
 12646              	.Ldebug_macro19:
 12647 0000 0400     		.2byte	0x4
 12648 0002 00       		.byte	0
 12649 0003 05       		.byte	0x5
 12650 0004 08       		.uleb128 0x8
 12651 0005 8A8C0000 		.4byte	.LASF794
 12652 0009 05       		.byte	0x5
 12653 000a 0F       		.uleb128 0xf
 12654 000b CC370000 		.4byte	.LASF508
 12655 000f 05       		.byte	0x5
 12656 0010 10       		.uleb128 0x10
 12657 0011 08340000 		.4byte	.LASF510
 12658 0015 00       		.byte	0
 12659              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.161.19e15733342b50ead2919490b095303e,comdat
 12660              	.Ldebug_macro20:
 12661 0000 0400     		.2byte	0x4
 12662 0002 00       		.byte	0
 12663 0003 06       		.byte	0x6
 12664 0004 A101     		.uleb128 0xa1
 12665 0006 49910000 		.4byte	.LASF562
 12666 000a 06       		.byte	0x6
 12667 000b EE01     		.uleb128 0xee
 12668 000d 413C0000 		.4byte	.LASF528
 12669 0011 06       		.byte	0x6
 12670 0012 DB02     		.uleb128 0x15b
 12671 0014 42110000 		.4byte	.LASF545
 12672 0018 06       		.byte	0x6
 12673 0019 9103     		.uleb128 0x191
 12674 001b C7450000 		.4byte	.LASF546
 12675 001f 05       		.byte	0x5
 12676 0020 9603     		.uleb128 0x196
 12677 0022 93220000 		.4byte	.LASF547
 12678 0026 06       		.byte	0x6
 12679 0027 9C03     		.uleb128 0x19c
 12680 0029 08590000 		.4byte	.LASF548
 12681 002d 05       		.byte	0x5
 12682 002e A103     		.uleb128 0x1a1
 12683 0030 B54D0000 		.4byte	.LASF563
 12684 0034 00       		.byte	0
 12685              		.section	.debug_macro,"G",%progbits,wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5,comdat
 12686              	.Ldebug_macro21:
 12687 0000 0400     		.2byte	0x4
 12688 0002 00       		.byte	0
 12689 0003 05       		.byte	0x5
 12690 0004 0A       		.uleb128 0xa
 12691 0005 2C9C0000 		.4byte	.LASF799
 12692 0009 05       		.byte	0x5
 12693 000a 10       		.uleb128 0x10
 12694 000b 875E0000 		.4byte	.LASF800
 12695 000f 06       		.byte	0x6
 12696 0010 2A       		.uleb128 0x2a
 12697 0011 4AAB0000 		.4byte	.LASF801
 12698 0015 06       		.byte	0x6
ARM GAS  /tmp/ccTV2SzP.s 			page 291


 12699 0016 2B       		.uleb128 0x2b
 12700 0017 338C0000 		.4byte	.LASF594
 12701 001b 06       		.byte	0x6
 12702 001c 2C       		.uleb128 0x2c
 12703 001d 9B6F0000 		.4byte	.LASF802
 12704 0021 06       		.byte	0x6
 12705 0022 2D       		.uleb128 0x2d
 12706 0023 31710000 		.4byte	.LASF803
 12707 0027 02       		.byte	0x2
 12708 0028 2E       		.uleb128 0x2e
 12709 0029 696E7400 		.ascii	"int\000"
 12710 002d 06       		.byte	0x6
 12711 002e 2F       		.uleb128 0x2f
 12712 002f 30A90000 		.4byte	.LASF804
 12713 0033 06       		.byte	0x6
 12714 0034 30       		.uleb128 0x30
 12715 0035 8A7A0000 		.4byte	.LASF805
 12716 0039 05       		.byte	0x5
 12717 003a 31       		.uleb128 0x31
 12718 003b BA310000 		.4byte	.LASF806
 12719 003f 05       		.byte	0x5
 12720 0040 32       		.uleb128 0x32
 12721 0041 15500000 		.4byte	.LASF807
 12722 0045 05       		.byte	0x5
 12723 0046 33       		.uleb128 0x33
 12724 0047 5F1F0000 		.4byte	.LASF808
 12725 004b 05       		.byte	0x5
 12726 004c 34       		.uleb128 0x34
 12727 004d 149A0000 		.4byte	.LASF809
 12728 0051 05       		.byte	0x5
 12729 0052 35       		.uleb128 0x35
 12730 0053 5C000000 		.4byte	.LASF810
 12731 0057 05       		.byte	0x5
 12732 0058 36       		.uleb128 0x36
 12733 0059 D8510000 		.4byte	.LASF811
 12734 005d 05       		.byte	0x5
 12735 005e 37       		.uleb128 0x37
 12736 005f 93A40000 		.4byte	.LASF812
 12737 0063 05       		.byte	0x5
 12738 0064 40       		.uleb128 0x40
 12739 0065 E4450000 		.4byte	.LASF813
 12740 0069 05       		.byte	0x5
 12741 006a 47       		.uleb128 0x47
 12742 006b 38A50000 		.4byte	.LASF814
 12743 006f 05       		.byte	0x5
 12744 0070 4F       		.uleb128 0x4f
 12745 0071 900D0000 		.4byte	.LASF815
 12746 0075 05       		.byte	0x5
 12747 0076 5A       		.uleb128 0x5a
 12748 0077 FD640000 		.4byte	.LASF816
 12749 007b 05       		.byte	0x5
 12750 007c 65       		.uleb128 0x65
 12751 007d B8980000 		.4byte	.LASF817
 12752 0081 05       		.byte	0x5
 12753 0082 6E       		.uleb128 0x6e
 12754 0083 DAA30000 		.4byte	.LASF818
 12755 0087 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 292


 12756 0088 75       		.uleb128 0x75
 12757 0089 698F0000 		.4byte	.LASF819
 12758 008d 05       		.byte	0x5
 12759 008e 7E       		.uleb128 0x7e
 12760 008f FE210000 		.4byte	.LASF820
 12761 0093 05       		.byte	0x5
 12762 0094 8501     		.uleb128 0x85
 12763 0096 25530000 		.4byte	.LASF821
 12764 009a 05       		.byte	0x5
 12765 009b 9001     		.uleb128 0x90
 12766 009d F44F0000 		.4byte	.LASF822
 12767 00a1 05       		.byte	0x5
 12768 00a2 9401     		.uleb128 0x94
 12769 00a4 46620000 		.4byte	.LASF823
 12770 00a8 05       		.byte	0x5
 12771 00a9 9F01     		.uleb128 0x9f
 12772 00ab A98D0000 		.4byte	.LASF824
 12773 00af 05       		.byte	0x5
 12774 00b0 AA01     		.uleb128 0xaa
 12775 00b2 78160000 		.4byte	.LASF825
 12776 00b6 05       		.byte	0x5
 12777 00b7 B301     		.uleb128 0xb3
 12778 00b9 71730000 		.4byte	.LASF826
 12779 00bd 06       		.byte	0x6
 12780 00be B501     		.uleb128 0xb5
 12781 00c0 4AAB0000 		.4byte	.LASF801
 12782 00c4 06       		.byte	0x6
 12783 00c5 B601     		.uleb128 0xb6
 12784 00c7 338C0000 		.4byte	.LASF594
 12785 00cb 06       		.byte	0x6
 12786 00cc B701     		.uleb128 0xb7
 12787 00ce 9B6F0000 		.4byte	.LASF802
 12788 00d2 06       		.byte	0x6
 12789 00d3 B801     		.uleb128 0xb8
 12790 00d5 31710000 		.4byte	.LASF803
 12791 00d9 02       		.byte	0x2
 12792 00da B901     		.uleb128 0xb9
 12793 00dc 696E7400 		.ascii	"int\000"
 12794 00e0 06       		.byte	0x6
 12795 00e1 BA01     		.uleb128 0xba
 12796 00e3 8A7A0000 		.4byte	.LASF805
 12797 00e7 06       		.byte	0x6
 12798 00e8 BF01     		.uleb128 0xbf
 12799 00ea 30A90000 		.4byte	.LASF804
 12800 00ee 00       		.byte	0
 12801              		.section	.debug_macro,"G",%progbits,wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841,comdat
 12802              	.Ldebug_macro22:
 12803 0000 0400     		.2byte	0x4
 12804 0002 00       		.byte	0
 12805 0003 05       		.byte	0x5
 12806 0004 0A       		.uleb128 0xa
 12807 0005 934C0000 		.4byte	.LASF827
 12808 0009 05       		.byte	0x5
 12809 000a 15       		.uleb128 0x15
 12810 000b 20910000 		.4byte	.LASF828
 12811 000f 05       		.byte	0x5
 12812 0010 19       		.uleb128 0x19
ARM GAS  /tmp/ccTV2SzP.s 			page 293


 12813 0011 BE7B0000 		.4byte	.LASF829
 12814 0015 05       		.byte	0x5
 12815 0016 1B       		.uleb128 0x1b
 12816 0017 1D1F0000 		.4byte	.LASF830
 12817 001b 05       		.byte	0x5
 12818 001c 21       		.uleb128 0x21
 12819 001d F59F0000 		.4byte	.LASF831
 12820 0021 05       		.byte	0x5
 12821 0022 25       		.uleb128 0x25
 12822 0023 36140000 		.4byte	.LASF832
 12823 0027 05       		.byte	0x5
 12824 0028 27       		.uleb128 0x27
 12825 0029 36540000 		.4byte	.LASF833
 12826 002d 05       		.byte	0x5
 12827 002e 2D       		.uleb128 0x2d
 12828 002f E79A0000 		.4byte	.LASF834
 12829 0033 05       		.byte	0x5
 12830 0034 31       		.uleb128 0x31
 12831 0035 CD7D0000 		.4byte	.LASF835
 12832 0039 05       		.byte	0x5
 12833 003a 33       		.uleb128 0x33
 12834 003b F43A0000 		.4byte	.LASF836
 12835 003f 05       		.byte	0x5
 12836 0040 39       		.uleb128 0x39
 12837 0041 52940000 		.4byte	.LASF837
 12838 0045 05       		.byte	0x5
 12839 0046 3D       		.uleb128 0x3d
 12840 0047 D6610000 		.4byte	.LASF838
 12841 004b 05       		.byte	0x5
 12842 004c 3F       		.uleb128 0x3f
 12843 004d 72920000 		.4byte	.LASF839
 12844 0051 05       		.byte	0x5
 12845 0052 44       		.uleb128 0x44
 12846 0053 79600000 		.4byte	.LASF840
 12847 0057 05       		.byte	0x5
 12848 0058 49       		.uleb128 0x49
 12849 0059 98790000 		.4byte	.LASF841
 12850 005d 05       		.byte	0x5
 12851 005e 4E       		.uleb128 0x4e
 12852 005f 7D180000 		.4byte	.LASF842
 12853 0063 05       		.byte	0x5
 12854 0064 53       		.uleb128 0x53
 12855 0065 EE7B0000 		.4byte	.LASF843
 12856 0069 00       		.byte	0
 12857              		.section	.debug_macro,"G",%progbits,wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed,comdat
 12858              	.Ldebug_macro23:
 12859 0000 0400     		.2byte	0x4
 12860 0002 00       		.byte	0
 12861 0003 05       		.byte	0x5
 12862 0004 17       		.uleb128 0x17
 12863 0005 7AA40000 		.4byte	.LASF844
 12864 0009 05       		.byte	0x5
 12865 000a 1D       		.uleb128 0x1d
 12866 000b 63AB0000 		.4byte	.LASF845
 12867 000f 05       		.byte	0x5
 12868 0010 23       		.uleb128 0x23
 12869 0011 70A60000 		.4byte	.LASF846
ARM GAS  /tmp/ccTV2SzP.s 			page 294


 12870 0015 05       		.byte	0x5
 12871 0016 29       		.uleb128 0x29
 12872 0017 24410000 		.4byte	.LASF847
 12873 001b 05       		.byte	0x5
 12874 001c 35       		.uleb128 0x35
 12875 001d CC450000 		.4byte	.LASF848
 12876 0021 05       		.byte	0x5
 12877 0022 3F       		.uleb128 0x3f
 12878 0023 566A0000 		.4byte	.LASF849
 12879 0027 05       		.byte	0x5
 12880 0028 49       		.uleb128 0x49
 12881 0029 A4120000 		.4byte	.LASF850
 12882 002d 05       		.byte	0x5
 12883 002e 53       		.uleb128 0x53
 12884 002f 362C0000 		.4byte	.LASF851
 12885 0033 05       		.byte	0x5
 12886 0034 8001     		.uleb128 0x80
 12887 0036 C2A90000 		.4byte	.LASF852
 12888 003a 05       		.byte	0x5
 12889 003b 8101     		.uleb128 0x81
 12890 003d 5F0A0000 		.4byte	.LASF853
 12891 0041 05       		.byte	0x5
 12892 0042 8201     		.uleb128 0x82
 12893 0044 D91D0000 		.4byte	.LASF854
 12894 0048 05       		.byte	0x5
 12895 0049 9801     		.uleb128 0x98
 12896 004b FE130000 		.4byte	.LASF855
 12897 004f 05       		.byte	0x5
 12898 0050 9901     		.uleb128 0x99
 12899 0052 BE610000 		.4byte	.LASF856
 12900 0056 05       		.byte	0x5
 12901 0057 9A01     		.uleb128 0x9a
 12902 0059 24A40000 		.4byte	.LASF857
 12903 005d 05       		.byte	0x5
 12904 005e A201     		.uleb128 0xa2
 12905 0060 A0910000 		.4byte	.LASF858
 12906 0064 05       		.byte	0x5
 12907 0065 A301     		.uleb128 0xa3
 12908 0067 3B0A0000 		.4byte	.LASF859
 12909 006b 05       		.byte	0x5
 12910 006c A401     		.uleb128 0xa4
 12911 006e 4F900000 		.4byte	.LASF860
 12912 0072 05       		.byte	0x5
 12913 0073 AE01     		.uleb128 0xae
 12914 0075 15050000 		.4byte	.LASF861
 12915 0079 05       		.byte	0x5
 12916 007a AF01     		.uleb128 0xaf
 12917 007c DA110000 		.4byte	.LASF862
 12918 0080 05       		.byte	0x5
 12919 0081 B001     		.uleb128 0xb0
 12920 0083 A4700000 		.4byte	.LASF863
 12921 0087 05       		.byte	0x5
 12922 0088 B801     		.uleb128 0xb8
 12923 008a AC5C0000 		.4byte	.LASF864
 12924 008e 05       		.byte	0x5
 12925 008f B901     		.uleb128 0xb9
 12926 0091 A33E0000 		.4byte	.LASF865
ARM GAS  /tmp/ccTV2SzP.s 			page 295


 12927 0095 05       		.byte	0x5
 12928 0096 BA01     		.uleb128 0xba
 12929 0098 F2380000 		.4byte	.LASF866
 12930 009c 05       		.byte	0x5
 12931 009d C401     		.uleb128 0xc4
 12932 009f 39810000 		.4byte	.LASF867
 12933 00a3 05       		.byte	0x5
 12934 00a4 C501     		.uleb128 0xc5
 12935 00a6 2A360000 		.4byte	.LASF868
 12936 00aa 05       		.byte	0x5
 12937 00ab C601     		.uleb128 0xc6
 12938 00ad B6580000 		.4byte	.LASF869
 12939 00b1 05       		.byte	0x5
 12940 00b2 D401     		.uleb128 0xd4
 12941 00b4 403B0000 		.4byte	.LASF870
 12942 00b8 05       		.byte	0x5
 12943 00b9 D501     		.uleb128 0xd5
 12944 00bb 56300000 		.4byte	.LASF871
 12945 00bf 05       		.byte	0x5
 12946 00c0 D601     		.uleb128 0xd6
 12947 00c2 46870000 		.4byte	.LASF872
 12948 00c6 05       		.byte	0x5
 12949 00c7 E601     		.uleb128 0xe6
 12950 00c9 6F8E0000 		.4byte	.LASF873
 12951 00cd 05       		.byte	0x5
 12952 00ce E701     		.uleb128 0xe7
 12953 00d0 5E580000 		.4byte	.LASF874
 12954 00d4 05       		.byte	0x5
 12955 00d5 E801     		.uleb128 0xe8
 12956 00d7 2E220000 		.4byte	.LASF875
 12957 00db 05       		.byte	0x5
 12958 00dc F601     		.uleb128 0xf6
 12959 00de 00170000 		.4byte	.LASF876
 12960 00e2 05       		.byte	0x5
 12961 00e3 F701     		.uleb128 0xf7
 12962 00e5 A4250000 		.4byte	.LASF877
 12963 00e9 05       		.byte	0x5
 12964 00ea F801     		.uleb128 0xf8
 12965 00ec 65770000 		.4byte	.LASF878
 12966 00f0 05       		.byte	0x5
 12967 00f1 8602     		.uleb128 0x106
 12968 00f3 B2A80000 		.4byte	.LASF879
 12969 00f7 05       		.byte	0x5
 12970 00f8 8702     		.uleb128 0x107
 12971 00fa 122B0000 		.4byte	.LASF880
 12972 00fe 05       		.byte	0x5
 12973 00ff 8802     		.uleb128 0x108
 12974 0101 DE770000 		.4byte	.LASF881
 12975 0105 05       		.byte	0x5
 12976 0106 9602     		.uleb128 0x116
 12977 0108 75990000 		.4byte	.LASF882
 12978 010c 05       		.byte	0x5
 12979 010d 9702     		.uleb128 0x117
 12980 010f 4F640000 		.4byte	.LASF883
 12981 0113 05       		.byte	0x5
 12982 0114 9802     		.uleb128 0x118
 12983 0116 D7630000 		.4byte	.LASF884
ARM GAS  /tmp/ccTV2SzP.s 			page 296


 12984 011a 05       		.byte	0x5
 12985 011b A602     		.uleb128 0x126
 12986 011d F2180000 		.4byte	.LASF885
 12987 0121 05       		.byte	0x5
 12988 0122 A702     		.uleb128 0x127
 12989 0124 38A90000 		.4byte	.LASF886
 12990 0128 05       		.byte	0x5
 12991 0129 A802     		.uleb128 0x128
 12992 012b F0320000 		.4byte	.LASF887
 12993 012f 05       		.byte	0x5
 12994 0130 B602     		.uleb128 0x136
 12995 0132 7B6E0000 		.4byte	.LASF888
 12996 0136 05       		.byte	0x5
 12997 0137 B702     		.uleb128 0x137
 12998 0139 749C0000 		.4byte	.LASF889
 12999 013d 05       		.byte	0x5
 13000 013e B802     		.uleb128 0x138
 13001 0140 7C3D0000 		.4byte	.LASF890
 13002 0144 05       		.byte	0x5
 13003 0145 C602     		.uleb128 0x146
 13004 0147 774C0000 		.4byte	.LASF891
 13005 014b 05       		.byte	0x5
 13006 014c C702     		.uleb128 0x147
 13007 014e B4230000 		.4byte	.LASF892
 13008 0152 05       		.byte	0x5
 13009 0153 CF02     		.uleb128 0x14f
 13010 0155 DF510000 		.4byte	.LASF893
 13011 0159 05       		.byte	0x5
 13012 015a D702     		.uleb128 0x157
 13013 015c B5140000 		.4byte	.LASF894
 13014 0160 05       		.byte	0x5
 13015 0161 DD02     		.uleb128 0x15d
 13016 0163 9E3F0000 		.4byte	.LASF895
 13017 0167 05       		.byte	0x5
 13018 0168 DE02     		.uleb128 0x15e
 13019 016a C4310000 		.4byte	.LASF896
 13020 016e 05       		.byte	0x5
 13021 016f E202     		.uleb128 0x162
 13022 0171 590F0000 		.4byte	.LASF897
 13023 0175 05       		.byte	0x5
 13024 0176 E602     		.uleb128 0x166
 13025 0178 4EAA0000 		.4byte	.LASF898
 13026 017c 05       		.byte	0x5
 13027 017d EB02     		.uleb128 0x16b
 13028 017f A0310000 		.4byte	.LASF899
 13029 0183 05       		.byte	0x5
 13030 0184 F602     		.uleb128 0x176
 13031 0186 C8800000 		.4byte	.LASF900
 13032 018a 05       		.byte	0x5
 13033 018b 8003     		.uleb128 0x180
 13034 018d 728F0000 		.4byte	.LASF901
 13035 0191 05       		.byte	0x5
 13036 0192 8503     		.uleb128 0x185
 13037 0194 20000000 		.4byte	.LASF902
 13038 0198 05       		.byte	0x5
 13039 0199 8C03     		.uleb128 0x18c
 13040 019b 484A0000 		.4byte	.LASF903
ARM GAS  /tmp/ccTV2SzP.s 			page 297


 13041 019f 05       		.byte	0x5
 13042 01a0 8D03     		.uleb128 0x18d
 13043 01a2 4A390000 		.4byte	.LASF904
 13044 01a6 05       		.byte	0x5
 13045 01a7 9803     		.uleb128 0x198
 13046 01a9 1C130000 		.4byte	.LASF905
 13047 01ad 05       		.byte	0x5
 13048 01ae 9903     		.uleb128 0x199
 13049 01b0 42800000 		.4byte	.LASF906
 13050 01b4 05       		.byte	0x5
 13051 01b5 A403     		.uleb128 0x1a4
 13052 01b7 F3850000 		.4byte	.LASF907
 13053 01bb 05       		.byte	0x5
 13054 01bc A503     		.uleb128 0x1a5
 13055 01be 85620000 		.4byte	.LASF908
 13056 01c2 05       		.byte	0x5
 13057 01c3 B103     		.uleb128 0x1b1
 13058 01c5 E7430000 		.4byte	.LASF909
 13059 01c9 05       		.byte	0x5
 13060 01ca B203     		.uleb128 0x1b2
 13061 01cc DA810000 		.4byte	.LASF910
 13062 01d0 05       		.byte	0x5
 13063 01d1 C103     		.uleb128 0x1c1
 13064 01d3 F92F0000 		.4byte	.LASF911
 13065 01d7 05       		.byte	0x5
 13066 01d8 C203     		.uleb128 0x1c2
 13067 01da 97730000 		.4byte	.LASF912
 13068 01de 00       		.byte	0
 13069              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8,comda
 13070              	.Ldebug_macro24:
 13071 0000 0400     		.2byte	0x4
 13072 0002 00       		.byte	0
 13073 0003 05       		.byte	0x5
 13074 0004 44       		.uleb128 0x44
 13075 0005 693D0000 		.4byte	.LASF914
 13076 0009 05       		.byte	0x5
 13077 000a 5C       		.uleb128 0x5c
 13078 000b 0D410000 		.4byte	.LASF915
 13079 000f 05       		.byte	0x5
 13080 0010 5D       		.uleb128 0x5d
 13081 0011 7A0D0000 		.4byte	.LASF916
 13082 0015 05       		.byte	0x5
 13083 0016 5E       		.uleb128 0x5e
 13084 0017 4A310000 		.4byte	.LASF917
 13085 001b 05       		.byte	0x5
 13086 001c 5F       		.uleb128 0x5f
 13087 001d 94430000 		.4byte	.LASF918
 13088 0021 05       		.byte	0x5
 13089 0022 60       		.uleb128 0x60
 13090 0023 2B740000 		.4byte	.LASF919
 13091 0027 05       		.byte	0x5
 13092 0028 61       		.uleb128 0x61
 13093 0029 B0240000 		.4byte	.LASF920
 13094 002d 05       		.byte	0x5
 13095 002e 62       		.uleb128 0x62
 13096 002f 87670000 		.4byte	.LASF921
 13097 0033 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 298


 13098 0034 63       		.uleb128 0x63
 13099 0035 D8550000 		.4byte	.LASF922
 13100 0039 05       		.byte	0x5
 13101 003a 64       		.uleb128 0x64
 13102 003b F6260000 		.4byte	.LASF923
 13103 003f 05       		.byte	0x5
 13104 0040 65       		.uleb128 0x65
 13105 0041 D7A70000 		.4byte	.LASF924
 13106 0045 05       		.byte	0x5
 13107 0046 66       		.uleb128 0x66
 13108 0047 033D0000 		.4byte	.LASF925
 13109 004b 05       		.byte	0x5
 13110 004c 67       		.uleb128 0x67
 13111 004d 9A900000 		.4byte	.LASF926
 13112 0051 05       		.byte	0x5
 13113 0052 68       		.uleb128 0x68
 13114 0053 2E720000 		.4byte	.LASF927
 13115 0057 05       		.byte	0x5
 13116 0058 69       		.uleb128 0x69
 13117 0059 0D550000 		.4byte	.LASF928
 13118 005d 05       		.byte	0x5
 13119 005e 6B       		.uleb128 0x6b
 13120 005f A26C0000 		.4byte	.LASF929
 13121 0063 05       		.byte	0x5
 13122 0064 6D       		.uleb128 0x6d
 13123 0065 C1600000 		.4byte	.LASF930
 13124 0069 05       		.byte	0x5
 13125 006a 6E       		.uleb128 0x6e
 13126 006b B4070000 		.4byte	.LASF931
 13127 006f 05       		.byte	0x5
 13128 0070 6F       		.uleb128 0x6f
 13129 0071 AA430000 		.4byte	.LASF932
 13130 0075 05       		.byte	0x5
 13131 0076 70       		.uleb128 0x70
 13132 0077 B2520000 		.4byte	.LASF933
 13133 007b 05       		.byte	0x5
 13134 007c 71       		.uleb128 0x71
 13135 007d 78580000 		.4byte	.LASF934
 13136 0081 05       		.byte	0x5
 13137 0082 72       		.uleb128 0x72
 13138 0083 52490000 		.4byte	.LASF935
 13139 0087 05       		.byte	0x5
 13140 0088 77       		.uleb128 0x77
 13141 0089 356F0000 		.4byte	.LASF936
 13142 008d 05       		.byte	0x5
 13143 008e 78       		.uleb128 0x78
 13144 008f 37270000 		.4byte	.LASF937
 13145 0093 05       		.byte	0x5
 13146 0094 79       		.uleb128 0x79
 13147 0095 5CA80000 		.4byte	.LASF938
 13148 0099 05       		.byte	0x5
 13149 009a 7A       		.uleb128 0x7a
 13150 009b 1C880000 		.4byte	.LASF939
 13151 009f 05       		.byte	0x5
 13152 00a0 7B       		.uleb128 0x7b
 13153 00a1 314E0000 		.4byte	.LASF940
 13154 00a5 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 299


 13155 00a6 7C       		.uleb128 0x7c
 13156 00a7 30390000 		.4byte	.LASF941
 13157 00ab 05       		.byte	0x5
 13158 00ac 7D       		.uleb128 0x7d
 13159 00ad 444D0000 		.4byte	.LASF942
 13160 00b1 05       		.byte	0x5
 13161 00b2 7E       		.uleb128 0x7e
 13162 00b3 87590000 		.4byte	.LASF943
 13163 00b7 05       		.byte	0x5
 13164 00b8 8101     		.uleb128 0x81
 13165 00ba D3130000 		.4byte	.LASF944
 13166 00be 05       		.byte	0x5
 13167 00bf 8201     		.uleb128 0x82
 13168 00c1 9F620000 		.4byte	.LASF945
 13169 00c5 05       		.byte	0x5
 13170 00c6 8301     		.uleb128 0x83
 13171 00c8 1C0E0000 		.4byte	.LASF946
 13172 00cc 05       		.byte	0x5
 13173 00cd 8401     		.uleb128 0x84
 13174 00cf E2140000 		.4byte	.LASF947
 13175 00d3 05       		.byte	0x5
 13176 00d4 8701     		.uleb128 0x87
 13177 00d6 0A430000 		.4byte	.LASF948
 13178 00da 05       		.byte	0x5
 13179 00db 8801     		.uleb128 0x88
 13180 00dd E6090000 		.4byte	.LASF949
 13181 00e1 05       		.byte	0x5
 13182 00e2 8901     		.uleb128 0x89
 13183 00e4 7BA70000 		.4byte	.LASF950
 13184 00e8 05       		.byte	0x5
 13185 00e9 8A01     		.uleb128 0x8a
 13186 00eb D7790000 		.4byte	.LASF951
 13187 00ef 05       		.byte	0x5
 13188 00f0 9001     		.uleb128 0x90
 13189 00f2 6F6A0000 		.4byte	.LASF952
 13190 00f6 05       		.byte	0x5
 13191 00f7 9401     		.uleb128 0x94
 13192 00f9 B4400000 		.4byte	.LASF953
 13193 00fd 05       		.byte	0x5
 13194 00fe 9601     		.uleb128 0x96
 13195 0100 EF0B0000 		.4byte	.LASF954
 13196 0104 05       		.byte	0x5
 13197 0105 9C01     		.uleb128 0x9c
 13198 0107 4A440000 		.4byte	.LASF955
 13199 010b 00       		.byte	0
 13200              		.section	.debug_macro,"G",%progbits,wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066,comdat
 13201              	.Ldebug_macro25:
 13202 0000 0400     		.2byte	0x4
 13203 0002 00       		.byte	0
 13204 0003 05       		.byte	0x5
 13205 0004 43       		.uleb128 0x43
 13206 0005 BB410000 		.4byte	.LASF956
 13207 0009 05       		.byte	0x5
 13208 000a 4C       		.uleb128 0x4c
 13209 000b C44C0000 		.4byte	.LASF957
 13210 000f 05       		.byte	0x5
 13211 0010 4E       		.uleb128 0x4e
ARM GAS  /tmp/ccTV2SzP.s 			page 300


 13212 0011 C2480000 		.4byte	.LASF958
 13213 0015 05       		.byte	0x5
 13214 0016 4F       		.uleb128 0x4f
 13215 0017 A46E0000 		.4byte	.LASF959
 13216 001b 05       		.byte	0x5
 13217 001c 51       		.uleb128 0x51
 13218 001d D23F0000 		.4byte	.LASF960
 13219 0021 05       		.byte	0x5
 13220 0022 52       		.uleb128 0x52
 13221 0023 8CA50000 		.4byte	.LASF961
 13222 0027 05       		.byte	0x5
 13223 0028 53       		.uleb128 0x53
 13224 0029 E36F0000 		.4byte	.LASF962
 13225 002d 05       		.byte	0x5
 13226 002e 54       		.uleb128 0x54
 13227 002f 4F8E0000 		.4byte	.LASF963
 13228 0033 05       		.byte	0x5
 13229 0034 57       		.uleb128 0x57
 13230 0035 2E3E0000 		.4byte	.LASF964
 13231 0039 05       		.byte	0x5
 13232 003a 58       		.uleb128 0x58
 13233 003b 55A50000 		.4byte	.LASF965
 13234 003f 05       		.byte	0x5
 13235 0040 59       		.uleb128 0x59
 13236 0041 A4220000 		.4byte	.LASF966
 13237 0045 00       		.byte	0
 13238              		.section	.debug_macro,"G",%progbits,wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946,comdat
 13239              	.Ldebug_macro26:
 13240 0000 0400     		.2byte	0x4
 13241 0002 00       		.byte	0
 13242 0003 05       		.byte	0x5
 13243 0004 44       		.uleb128 0x44
 13244 0005 75170000 		.4byte	.LASF968
 13245 0009 05       		.byte	0x5
 13246 000a 55       		.uleb128 0x55
 13247 000b 6B1A0000 		.4byte	.LASF969
 13248 000f 05       		.byte	0x5
 13249 0010 56       		.uleb128 0x56
 13250 0011 C1850000 		.4byte	.LASF970
 13251 0015 05       		.byte	0x5
 13252 0016 57       		.uleb128 0x57
 13253 0017 862C0000 		.4byte	.LASF971
 13254 001b 05       		.byte	0x5
 13255 001c 58       		.uleb128 0x58
 13256 001d 15320000 		.4byte	.LASF972
 13257 0021 05       		.byte	0x5
 13258 0022 59       		.uleb128 0x59
 13259 0023 DF580000 		.4byte	.LASF973
 13260 0027 05       		.byte	0x5
 13261 0028 5A       		.uleb128 0x5a
 13262 0029 17400000 		.4byte	.LASF974
 13263 002d 05       		.byte	0x5
 13264 002e 5B       		.uleb128 0x5b
 13265 002f 4E7B0000 		.4byte	.LASF975
 13266 0033 05       		.byte	0x5
 13267 0034 6A       		.uleb128 0x6a
 13268 0035 FC790000 		.4byte	.LASF976
ARM GAS  /tmp/ccTV2SzP.s 			page 301


 13269 0039 05       		.byte	0x5
 13270 003a 6F       		.uleb128 0x6f
 13271 003b 405F0000 		.4byte	.LASF977
 13272 003f 05       		.byte	0x5
 13273 0040 70       		.uleb128 0x70
 13274 0041 095A0000 		.4byte	.LASF978
 13275 0045 05       		.byte	0x5
 13276 0046 71       		.uleb128 0x71
 13277 0047 119C0000 		.4byte	.LASF979
 13278 004b 05       		.byte	0x5
 13279 004c 77       		.uleb128 0x77
 13280 004d 215C0000 		.4byte	.LASF980
 13281 0051 05       		.byte	0x5
 13282 0052 78       		.uleb128 0x78
 13283 0053 9C420000 		.4byte	.LASF981
 13284 0057 05       		.byte	0x5
 13285 0058 79       		.uleb128 0x79
 13286 0059 7D2B0000 		.4byte	.LASF982
 13287 005d 05       		.byte	0x5
 13288 005e 7A       		.uleb128 0x7a
 13289 005f A2660000 		.4byte	.LASF983
 13290 0063 05       		.byte	0x5
 13291 0064 7B       		.uleb128 0x7b
 13292 0065 019F0000 		.4byte	.LASF984
 13293 0069 05       		.byte	0x5
 13294 006a 8301     		.uleb128 0x83
 13295 006c B66B0000 		.4byte	.LASF985
 13296 0070 05       		.byte	0x5
 13297 0071 8401     		.uleb128 0x84
 13298 0073 CC900000 		.4byte	.LASF986
 13299 0077 05       		.byte	0x5
 13300 0078 8501     		.uleb128 0x85
 13301 007a E6940000 		.4byte	.LASF987
 13302 007e 05       		.byte	0x5
 13303 007f 8601     		.uleb128 0x86
 13304 0081 C0470000 		.4byte	.LASF988
 13305 0085 05       		.byte	0x5
 13306 0086 8701     		.uleb128 0x87
 13307 0088 76450000 		.4byte	.LASF989
 13308 008c 05       		.byte	0x5
 13309 008d 8801     		.uleb128 0x88
 13310 008f 585F0000 		.4byte	.LASF990
 13311 0093 05       		.byte	0x5
 13312 0094 8E01     		.uleb128 0x8e
 13313 0096 597F0000 		.4byte	.LASF991
 13314 009a 05       		.byte	0x5
 13315 009b 8F01     		.uleb128 0x8f
 13316 009d EE830000 		.4byte	.LASF992
 13317 00a1 05       		.byte	0x5
 13318 00a2 9501     		.uleb128 0x95
 13319 00a4 BB8F0000 		.4byte	.LASF993
 13320 00a8 05       		.byte	0x5
 13321 00a9 9B01     		.uleb128 0x9b
 13322 00ab AE8A0000 		.4byte	.LASF994
 13323 00af 05       		.byte	0x5
 13324 00b0 AF01     		.uleb128 0xaf
 13325 00b2 A3840000 		.4byte	.LASF995
ARM GAS  /tmp/ccTV2SzP.s 			page 302


 13326 00b6 05       		.byte	0x5
 13327 00b7 B001     		.uleb128 0xb0
 13328 00b9 FB600000 		.4byte	.LASF996
 13329 00bd 05       		.byte	0x5
 13330 00be B401     		.uleb128 0xb4
 13331 00c0 7B870000 		.4byte	.LASF997
 13332 00c4 05       		.byte	0x5
 13333 00c5 BC01     		.uleb128 0xbc
 13334 00c7 E5A60000 		.4byte	.LASF998
 13335 00cb 05       		.byte	0x5
 13336 00cc C001     		.uleb128 0xc0
 13337 00ce 2A9A0000 		.4byte	.LASF999
 13338 00d2 00       		.byte	0
 13339              		.section	.debug_macro,"G",%progbits,wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5,comdat
 13340              	.Ldebug_macro27:
 13341 0000 0400     		.2byte	0x4
 13342 0002 00       		.byte	0
 13343 0003 05       		.byte	0x5
 13344 0004 C502     		.uleb128 0x145
 13345 0006 090D0000 		.4byte	.LASF1000
 13346 000a 05       		.byte	0x5
 13347 000b D902     		.uleb128 0x159
 13348 000d E4300000 		.4byte	.LASF1001
 13349 0011 00       		.byte	0
 13350              		.section	.debug_macro,"G",%progbits,wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168,comdat
 13351              	.Ldebug_macro28:
 13352 0000 0400     		.2byte	0x4
 13353 0002 00       		.byte	0
 13354 0003 05       		.byte	0x5
 13355 0004 43       		.uleb128 0x43
 13356 0005 8C7C0000 		.4byte	.LASF1002
 13357 0009 05       		.byte	0x5
 13358 000a 9101     		.uleb128 0x91
 13359 000c 1A100000 		.4byte	.LASF1003
 13360 0010 05       		.byte	0x5
 13361 0011 9201     		.uleb128 0x92
 13362 0013 C2210000 		.4byte	.LASF1004
 13363 0017 05       		.byte	0x5
 13364 0018 9301     		.uleb128 0x93
 13365 001a 37700000 		.4byte	.LASF1005
 13366 001e 00       		.byte	0
 13367              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e,comdat
 13368              	.Ldebug_macro29:
 13369 0000 0400     		.2byte	0x4
 13370 0002 00       		.byte	0
 13371 0003 05       		.byte	0x5
 13372 0004 AB01     		.uleb128 0xab
 13373 0006 D4390000 		.4byte	.LASF1006
 13374 000a 05       		.byte	0x5
 13375 000b AF01     		.uleb128 0xaf
 13376 000d A19C0000 		.4byte	.LASF1007
 13377 0011 05       		.byte	0x5
 13378 0012 B301     		.uleb128 0xb3
 13379 0014 18700000 		.4byte	.LASF1008
 13380 0018 05       		.byte	0x5
 13381 0019 B701     		.uleb128 0xb7
 13382 001b 2D3A0000 		.4byte	.LASF1009
ARM GAS  /tmp/ccTV2SzP.s 			page 303


 13383 001f 05       		.byte	0x5
 13384 0020 BB01     		.uleb128 0xbb
 13385 0022 81300000 		.4byte	.LASF1010
 13386 0026 05       		.byte	0x5
 13387 0027 BF01     		.uleb128 0xbf
 13388 0029 65940000 		.4byte	.LASF1011
 13389 002d 05       		.byte	0x5
 13390 002e C701     		.uleb128 0xc7
 13391 0030 AD330000 		.4byte	.LASF1012
 13392 0034 05       		.byte	0x5
 13393 0035 D301     		.uleb128 0xd3
 13394 0037 3B1B0000 		.4byte	.LASF1013
 13395 003b 05       		.byte	0x5
 13396 003c DF01     		.uleb128 0xdf
 13397 003e 94A80000 		.4byte	.LASF1014
 13398 0042 05       		.byte	0x5
 13399 0043 EF01     		.uleb128 0xef
 13400 0045 63400000 		.4byte	.LASF1015
 13401 0049 05       		.byte	0x5
 13402 004a F301     		.uleb128 0xf3
 13403 004c 7DAB0000 		.4byte	.LASF1016
 13404 0050 05       		.byte	0x5
 13405 0051 F701     		.uleb128 0xf7
 13406 0053 838B0000 		.4byte	.LASF1017
 13407 0057 05       		.byte	0x5
 13408 0058 FE01     		.uleb128 0xfe
 13409 005a 646E0000 		.4byte	.LASF1018
 13410 005e 05       		.byte	0x5
 13411 005f 9302     		.uleb128 0x113
 13412 0061 F4110000 		.4byte	.LASF1019
 13413 0065 05       		.byte	0x5
 13414 0066 9702     		.uleb128 0x117
 13415 0068 6B650000 		.4byte	.LASF1020
 13416 006c 05       		.byte	0x5
 13417 006d A402     		.uleb128 0x124
 13418 006f 0F230000 		.4byte	.LASF1021
 13419 0073 05       		.byte	0x5
 13420 0074 A802     		.uleb128 0x128
 13421 0076 962B0000 		.4byte	.LASF1022
 13422 007a 05       		.byte	0x5
 13423 007b AC02     		.uleb128 0x12c
 13424 007d 6A110000 		.4byte	.LASF1023
 13425 0081 05       		.byte	0x5
 13426 0082 B902     		.uleb128 0x139
 13427 0084 25940000 		.4byte	.LASF1024
 13428 0088 05       		.byte	0x5
 13429 0089 C002     		.uleb128 0x140
 13430 008b 2D0D0000 		.4byte	.LASF1025
 13431 008f 05       		.byte	0x5
 13432 0090 C602     		.uleb128 0x146
 13433 0092 53890000 		.4byte	.LASF1026
 13434 0096 05       		.byte	0x5
 13435 0097 CC02     		.uleb128 0x14c
 13436 0099 D4030000 		.4byte	.LASF1027
 13437 009d 05       		.byte	0x5
 13438 009e D202     		.uleb128 0x152
 13439 00a0 CA9F0000 		.4byte	.LASF1028
ARM GAS  /tmp/ccTV2SzP.s 			page 304


 13440 00a4 05       		.byte	0x5
 13441 00a5 D702     		.uleb128 0x157
 13442 00a7 25600000 		.4byte	.LASF1029
 13443 00ab 05       		.byte	0x5
 13444 00ac DC02     		.uleb128 0x15c
 13445 00ae 56080000 		.4byte	.LASF1030
 13446 00b2 05       		.byte	0x5
 13447 00b3 E202     		.uleb128 0x162
 13448 00b5 B21D0000 		.4byte	.LASF1031
 13449 00b9 05       		.byte	0x5
 13450 00ba EB02     		.uleb128 0x16b
 13451 00bc A0100000 		.4byte	.LASF1032
 13452 00c0 05       		.byte	0x5
 13453 00c1 F302     		.uleb128 0x173
 13454 00c3 D2280000 		.4byte	.LASF1033
 13455 00c7 05       		.byte	0x5
 13456 00c8 FB02     		.uleb128 0x17b
 13457 00ca 3C6D0000 		.4byte	.LASF1034
 13458 00ce 05       		.byte	0x5
 13459 00cf 8303     		.uleb128 0x183
 13460 00d1 5A460000 		.4byte	.LASF1035
 13461 00d5 05       		.byte	0x5
 13462 00d6 8D03     		.uleb128 0x18d
 13463 00d8 C7AB0000 		.4byte	.LASF1036
 13464 00dc 05       		.byte	0x5
 13465 00dd 9103     		.uleb128 0x191
 13466 00df 73260000 		.4byte	.LASF1037
 13467 00e3 05       		.byte	0x5
 13468 00e4 9503     		.uleb128 0x195
 13469 00e6 5F340000 		.4byte	.LASF1038
 13470 00ea 05       		.byte	0x5
 13471 00eb 9903     		.uleb128 0x199
 13472 00ed FD510000 		.4byte	.LASF1039
 13473 00f1 05       		.byte	0x5
 13474 00f2 9D03     		.uleb128 0x19d
 13475 00f4 D40D0000 		.4byte	.LASF1040
 13476 00f8 05       		.byte	0x5
 13477 00f9 A103     		.uleb128 0x1a1
 13478 00fb 18290000 		.4byte	.LASF1041
 13479 00ff 05       		.byte	0x5
 13480 0100 A503     		.uleb128 0x1a5
 13481 0102 2B6A0000 		.4byte	.LASF1042
 13482 0106 05       		.byte	0x5
 13483 0107 A903     		.uleb128 0x1a9
 13484 0109 FB250000 		.4byte	.LASF1043
 13485 010d 05       		.byte	0x5
 13486 010e AD03     		.uleb128 0x1ad
 13487 0110 D3210000 		.4byte	.LASF1044
 13488 0114 05       		.byte	0x5
 13489 0115 B103     		.uleb128 0x1b1
 13490 0117 15270000 		.4byte	.LASF1045
 13491 011b 05       		.byte	0x5
 13492 011c B503     		.uleb128 0x1b5
 13493 011e 7E470000 		.4byte	.LASF1046
 13494 0122 05       		.byte	0x5
 13495 0123 B903     		.uleb128 0x1b9
 13496 0125 74780000 		.4byte	.LASF1047
ARM GAS  /tmp/ccTV2SzP.s 			page 305


 13497 0129 05       		.byte	0x5
 13498 012a BD03     		.uleb128 0x1bd
 13499 012c A3960000 		.4byte	.LASF1048
 13500 0130 05       		.byte	0x5
 13501 0131 C103     		.uleb128 0x1c1
 13502 0133 9C810000 		.4byte	.LASF1049
 13503 0137 05       		.byte	0x5
 13504 0138 C503     		.uleb128 0x1c5
 13505 013a E3170000 		.4byte	.LASF1050
 13506 013e 05       		.byte	0x5
 13507 013f C903     		.uleb128 0x1c9
 13508 0141 BC4F0000 		.4byte	.LASF1051
 13509 0145 05       		.byte	0x5
 13510 0146 CD03     		.uleb128 0x1cd
 13511 0148 9BA40000 		.4byte	.LASF1052
 13512 014c 05       		.byte	0x5
 13513 014d D103     		.uleb128 0x1d1
 13514 014f AC880000 		.4byte	.LASF1053
 13515 0153 05       		.byte	0x5
 13516 0154 D503     		.uleb128 0x1d5
 13517 0156 65A90000 		.4byte	.LASF1054
 13518 015a 05       		.byte	0x5
 13519 015b D903     		.uleb128 0x1d9
 13520 015d F26C0000 		.4byte	.LASF1055
 13521 0161 05       		.byte	0x5
 13522 0162 DD03     		.uleb128 0x1dd
 13523 0164 FC5C0000 		.4byte	.LASF1056
 13524 0168 05       		.byte	0x5
 13525 0169 E103     		.uleb128 0x1e1
 13526 016b 20AB0000 		.4byte	.LASF1057
 13527 016f 05       		.byte	0x5
 13528 0170 E503     		.uleb128 0x1e5
 13529 0172 F3470000 		.4byte	.LASF1058
 13530 0176 05       		.byte	0x5
 13531 0177 E903     		.uleb128 0x1e9
 13532 0179 5C6C0000 		.4byte	.LASF1059
 13533 017d 05       		.byte	0x5
 13534 017e ED03     		.uleb128 0x1ed
 13535 0180 D88A0000 		.4byte	.LASF1060
 13536 0184 05       		.byte	0x5
 13537 0185 F103     		.uleb128 0x1f1
 13538 0187 A56A0000 		.4byte	.LASF1061
 13539 018b 05       		.byte	0x5
 13540 018c F503     		.uleb128 0x1f5
 13541 018e 80460000 		.4byte	.LASF1062
 13542 0192 05       		.byte	0x5
 13543 0193 F903     		.uleb128 0x1f9
 13544 0195 5A750000 		.4byte	.LASF1063
 13545 0199 05       		.byte	0x5
 13546 019a FD03     		.uleb128 0x1fd
 13547 019c 5C8C0000 		.4byte	.LASF1064
 13548 01a0 05       		.byte	0x5
 13549 01a1 8104     		.uleb128 0x201
 13550 01a3 56230000 		.4byte	.LASF1065
 13551 01a7 05       		.byte	0x5
 13552 01a8 8504     		.uleb128 0x205
 13553 01aa 6B3A0000 		.4byte	.LASF1066
ARM GAS  /tmp/ccTV2SzP.s 			page 306


 13554 01ae 05       		.byte	0x5
 13555 01af 8904     		.uleb128 0x209
 13556 01b1 8AA60000 		.4byte	.LASF1067
 13557 01b5 05       		.byte	0x5
 13558 01b6 8D04     		.uleb128 0x20d
 13559 01b8 A1110000 		.4byte	.LASF1068
 13560 01bc 05       		.byte	0x5
 13561 01bd 9104     		.uleb128 0x211
 13562 01bf 29210000 		.4byte	.LASF1069
 13563 01c3 05       		.byte	0x5
 13564 01c4 9504     		.uleb128 0x215
 13565 01c6 8A9F0000 		.4byte	.LASF1070
 13566 01ca 05       		.byte	0x5
 13567 01cb 9904     		.uleb128 0x219
 13568 01cd BC3C0000 		.4byte	.LASF1071
 13569 01d1 05       		.byte	0x5
 13570 01d2 9D04     		.uleb128 0x21d
 13571 01d4 F6120000 		.4byte	.LASF1072
 13572 01d8 05       		.byte	0x5
 13573 01d9 A104     		.uleb128 0x221
 13574 01db 59790000 		.4byte	.LASF1073
 13575 01df 05       		.byte	0x5
 13576 01e0 A504     		.uleb128 0x225
 13577 01e2 56040000 		.4byte	.LASF1074
 13578 01e6 05       		.byte	0x5
 13579 01e7 A904     		.uleb128 0x229
 13580 01e9 3E330000 		.4byte	.LASF1075
 13581 01ed 05       		.byte	0x5
 13582 01ee AD04     		.uleb128 0x22d
 13583 01f0 0D8C0000 		.4byte	.LASF1076
 13584 01f4 05       		.byte	0x5
 13585 01f5 B104     		.uleb128 0x231
 13586 01f7 6D970000 		.4byte	.LASF1077
 13587 01fb 05       		.byte	0x5
 13588 01fc B504     		.uleb128 0x235
 13589 01fe D6780000 		.4byte	.LASF1078
 13590 0202 05       		.byte	0x5
 13591 0203 B904     		.uleb128 0x239
 13592 0205 69A10000 		.4byte	.LASF1079
 13593 0209 05       		.byte	0x5
 13594 020a BD04     		.uleb128 0x23d
 13595 020c 770F0000 		.4byte	.LASF1080
 13596 0210 05       		.byte	0x5
 13597 0211 C104     		.uleb128 0x241
 13598 0213 67000000 		.4byte	.LASF1081
 13599 0217 05       		.byte	0x5
 13600 0218 C504     		.uleb128 0x245
 13601 021a DC4B0000 		.4byte	.LASF1082
 13602 021e 05       		.byte	0x5
 13603 021f C904     		.uleb128 0x249
 13604 0221 96080000 		.4byte	.LASF1083
 13605 0225 05       		.byte	0x5
 13606 0226 CD04     		.uleb128 0x24d
 13607 0228 04A50000 		.4byte	.LASF1084
 13608 022c 05       		.byte	0x5
 13609 022d D104     		.uleb128 0x251
 13610 022f 6F760000 		.4byte	.LASF1085
ARM GAS  /tmp/ccTV2SzP.s 			page 307


 13611 0233 05       		.byte	0x5
 13612 0234 D504     		.uleb128 0x255
 13613 0236 08220000 		.4byte	.LASF1086
 13614 023a 05       		.byte	0x5
 13615 023b D904     		.uleb128 0x259
 13616 023d 41420000 		.4byte	.LASF1087
 13617 0241 05       		.byte	0x5
 13618 0242 DD04     		.uleb128 0x25d
 13619 0244 0C7F0000 		.4byte	.LASF1088
 13620 0248 05       		.byte	0x5
 13621 0249 E104     		.uleb128 0x261
 13622 024b 8D3A0000 		.4byte	.LASF1089
 13623 024f 05       		.byte	0x5
 13624 0250 F704     		.uleb128 0x277
 13625 0252 D9720000 		.4byte	.LASF1090
 13626 0256 05       		.byte	0x5
 13627 0257 FB04     		.uleb128 0x27b
 13628 0259 5F890000 		.4byte	.LASF1091
 13629 025d 05       		.byte	0x5
 13630 025e FF04     		.uleb128 0x27f
 13631 0260 73640000 		.4byte	.LASF1092
 13632 0264 05       		.byte	0x5
 13633 0265 8305     		.uleb128 0x283
 13634 0267 63140000 		.4byte	.LASF1093
 13635 026b 05       		.byte	0x5
 13636 026c 8705     		.uleb128 0x287
 13637 026e D64E0000 		.4byte	.LASF1094
 13638 0272 05       		.byte	0x5
 13639 0273 8B05     		.uleb128 0x28b
 13640 0275 63070000 		.4byte	.LASF1095
 13641 0279 05       		.byte	0x5
 13642 027a 9305     		.uleb128 0x293
 13643 027c 5F820000 		.4byte	.LASF1096
 13644 0280 05       		.byte	0x5
 13645 0281 9B05     		.uleb128 0x29b
 13646 0283 A4610000 		.4byte	.LASF1097
 13647 0287 05       		.byte	0x5
 13648 0288 9F05     		.uleb128 0x29f
 13649 028a 85250000 		.4byte	.LASF1098
 13650 028e 05       		.byte	0x5
 13651 028f A305     		.uleb128 0x2a3
 13652 0291 7D2E0000 		.4byte	.LASF1099
 13653 0295 05       		.byte	0x5
 13654 0296 A705     		.uleb128 0x2a7
 13655 0298 4C070000 		.4byte	.LASF1100
 13656 029c 05       		.byte	0x5
 13657 029d AB05     		.uleb128 0x2ab
 13658 029f D37C0000 		.4byte	.LASF1101
 13659 02a3 05       		.byte	0x5
 13660 02a4 AF05     		.uleb128 0x2af
 13661 02a6 E57E0000 		.4byte	.LASF1102
 13662 02aa 05       		.byte	0x5
 13663 02ab B305     		.uleb128 0x2b3
 13664 02ad 79A20000 		.4byte	.LASF1103
 13665 02b1 05       		.byte	0x5
 13666 02b2 B705     		.uleb128 0x2b7
 13667 02b4 540E0000 		.4byte	.LASF1104
ARM GAS  /tmp/ccTV2SzP.s 			page 308


 13668 02b8 05       		.byte	0x5
 13669 02b9 BB05     		.uleb128 0x2bb
 13670 02bb 724B0000 		.4byte	.LASF1105
 13671 02bf 05       		.byte	0x5
 13672 02c0 C705     		.uleb128 0x2c7
 13673 02c2 176C0000 		.4byte	.LASF1106
 13674 02c6 05       		.byte	0x5
 13675 02c7 CB05     		.uleb128 0x2cb
 13676 02c9 F5610000 		.4byte	.LASF1107
 13677 02cd 05       		.byte	0x5
 13678 02ce D505     		.uleb128 0x2d5
 13679 02d0 B04E0000 		.4byte	.LASF1108
 13680 02d4 05       		.byte	0x5
 13681 02d5 D905     		.uleb128 0x2d9
 13682 02d7 941E0000 		.4byte	.LASF1109
 13683 02db 05       		.byte	0x5
 13684 02dc DA05     		.uleb128 0x2da
 13685 02de 9C7C0000 		.4byte	.LASF1110
 13686 02e2 05       		.byte	0x5
 13687 02e3 DB05     		.uleb128 0x2db
 13688 02e5 1C160000 		.4byte	.LASF1111
 13689 02e9 05       		.byte	0x5
 13690 02ea DC05     		.uleb128 0x2dc
 13691 02ec 69550000 		.4byte	.LASF1112
 13692 02f0 05       		.byte	0x5
 13693 02f1 DD05     		.uleb128 0x2dd
 13694 02f3 A05F0000 		.4byte	.LASF1113
 13695 02f7 05       		.byte	0x5
 13696 02f8 DE05     		.uleb128 0x2de
 13697 02fa 95580000 		.4byte	.LASF1114
 13698 02fe 05       		.byte	0x5
 13699 02ff DF05     		.uleb128 0x2df
 13700 0301 16750000 		.4byte	.LASF1115
 13701 0305 05       		.byte	0x5
 13702 0306 E005     		.uleb128 0x2e0
 13703 0308 43750000 		.4byte	.LASF1116
 13704 030c 05       		.byte	0x5
 13705 030d E105     		.uleb128 0x2e1
 13706 030f 122F0000 		.4byte	.LASF1117
 13707 0313 05       		.byte	0x5
 13708 0314 E205     		.uleb128 0x2e2
 13709 0316 B5A60000 		.4byte	.LASF1118
 13710 031a 05       		.byte	0x5
 13711 031b E305     		.uleb128 0x2e3
 13712 031d D68B0000 		.4byte	.LASF1119
 13713 0321 05       		.byte	0x5
 13714 0322 E405     		.uleb128 0x2e4
 13715 0324 2B870000 		.4byte	.LASF1120
 13716 0328 05       		.byte	0x5
 13717 0329 E505     		.uleb128 0x2e5
 13718 032b F5390000 		.4byte	.LASF1121
 13719 032f 05       		.byte	0x5
 13720 0330 E605     		.uleb128 0x2e6
 13721 0332 3D840000 		.4byte	.LASF1122
 13722 0336 05       		.byte	0x5
 13723 0337 E705     		.uleb128 0x2e7
 13724 0339 45550000 		.4byte	.LASF1123
ARM GAS  /tmp/ccTV2SzP.s 			page 309


 13725 033d 05       		.byte	0x5
 13726 033e EB05     		.uleb128 0x2eb
 13727 0340 AC760000 		.4byte	.LASF1124
 13728 0344 05       		.byte	0x5
 13729 0345 EC05     		.uleb128 0x2ec
 13730 0347 B9810000 		.4byte	.LASF1125
 13731 034b 05       		.byte	0x5
 13732 034c ED05     		.uleb128 0x2ed
 13733 034e 9FA50000 		.4byte	.LASF1126
 13734 0352 05       		.byte	0x5
 13735 0353 EE05     		.uleb128 0x2ee
 13736 0355 E2740000 		.4byte	.LASF1127
 13737 0359 00       		.byte	0
 13738              		.section	.debug_macro,"G",%progbits,wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370,comdat
 13739              	.Ldebug_macro30:
 13740 0000 0400     		.2byte	0x4
 13741 0002 00       		.byte	0
 13742 0003 05       		.byte	0x5
 13743 0004 60       		.uleb128 0x60
 13744 0005 12570000 		.4byte	.LASF1129
 13745 0009 05       		.byte	0x5
 13746 000a 7F       		.uleb128 0x7f
 13747 000b 9D1D0000 		.4byte	.LASF1130
 13748 000f 05       		.byte	0x5
 13749 0010 AB01     		.uleb128 0xab
 13750 0012 DA9C0000 		.4byte	.LASF1131
 13751 0016 05       		.byte	0x5
 13752 0017 B401     		.uleb128 0xb4
 13753 0019 FA910000 		.4byte	.LASF1132
 13754 001d 05       		.byte	0x5
 13755 001e BD01     		.uleb128 0xbd
 13756 0020 ED030000 		.4byte	.LASF1133
 13757 0024 05       		.byte	0x5
 13758 0025 C701     		.uleb128 0xc7
 13759 0027 C4730000 		.4byte	.LASF1134
 13760 002b 05       		.byte	0x5
 13761 002c D001     		.uleb128 0xd0
 13762 002e D1230000 		.4byte	.LASF1135
 13763 0032 05       		.byte	0x5
 13764 0033 D801     		.uleb128 0xd8
 13765 0035 F2080000 		.4byte	.LASF1136
 13766 0039 05       		.byte	0x5
 13767 003a E001     		.uleb128 0xe0
 13768 003c 14A10000 		.4byte	.LASF1137
 13769 0040 05       		.byte	0x5
 13770 0041 E801     		.uleb128 0xe8
 13771 0043 338A0000 		.4byte	.LASF1138
 13772 0047 05       		.byte	0x5
 13773 0048 F101     		.uleb128 0xf1
 13774 004a D8A20000 		.4byte	.LASF1139
 13775 004e 05       		.byte	0x5
 13776 004f F601     		.uleb128 0xf6
 13777 0051 AE7F0000 		.4byte	.LASF1140
 13778 0055 05       		.byte	0x5
 13779 0056 8C02     		.uleb128 0x10c
 13780 0058 4D500000 		.4byte	.LASF1141
 13781 005c 05       		.byte	0x5
ARM GAS  /tmp/ccTV2SzP.s 			page 310


 13782 005d AA02     		.uleb128 0x12a
 13783 005f 820B0000 		.4byte	.LASF1142
 13784 0063 05       		.byte	0x5
 13785 0064 B502     		.uleb128 0x135
 13786 0066 FD170000 		.4byte	.LASF1143
 13787 006a 05       		.byte	0x5
 13788 006b BD02     		.uleb128 0x13d
 13789 006d AE380000 		.4byte	.LASF1144
 13790 0071 05       		.byte	0x5
 13791 0072 C402     		.uleb128 0x144
 13792 0074 C81E0000 		.4byte	.LASF1145
 13793 0078 00       		.byte	0
 13794              		.section	.debug_macro,"G",%progbits,wm4.task.h.84.e110bc08aaffa67ce542955b890201b4,comdat
 13795              	.Ldebug_macro31:
 13796 0000 0400     		.2byte	0x4
 13797 0002 00       		.byte	0
 13798 0003 05       		.byte	0x5
 13799 0004 54       		.uleb128 0x54
 13800 0005 D1850000 		.4byte	.LASF1146
 13801 0009 05       		.byte	0x5
 13802 000a 55       		.uleb128 0x55
 13803 000b E1600000 		.4byte	.LASF1147
 13804 000f 05       		.byte	0x5
 13805 0010 56       		.uleb128 0x56
 13806 0011 BE180000 		.4byte	.LASF1148
 13807 0015 05       		.byte	0x5
 13808 0016 57       		.uleb128 0x57
 13809 0017 226D0000 		.4byte	.LASF1149
 13810 001b 05       		.byte	0x5
 13811 001c B201     		.uleb128 0xb2
 13812 001e 961A0000 		.4byte	.LASF1150
 13813 0022 05       		.byte	0x5
 13814 0023 BC01     		.uleb128 0xbc
 13815 0025 B13D0000 		.4byte	.LASF1151
 13816 0029 05       		.byte	0x5
 13817 002a CA01     		.uleb128 0xca
 13818 002c 6A1E0000 		.4byte	.LASF1152
 13819 0030 05       		.byte	0x5
 13820 0031 D801     		.uleb128 0xd8
 13821 0033 37820000 		.4byte	.LASF1153
 13822 0037 05       		.byte	0x5
 13823 0038 E201     		.uleb128 0xe2
 13824 003a ED620000 		.4byte	.LASF1154
 13825 003e 05       		.byte	0x5
 13826 003f EC01     		.uleb128 0xec
 13827 0041 3D9E0000 		.4byte	.LASF1155
 13828 0045 05       		.byte	0x5
 13829 0046 F101     		.uleb128 0xf1
 13830 0048 792A0000 		.4byte	.LASF1156
 13831 004c 05       		.byte	0x5
 13832 004d F201     		.uleb128 0xf2
 13833 004f 74A00000 		.4byte	.LASF1157
 13834 0053 05       		.byte	0x5
 13835 0054 F301     		.uleb128 0xf3
 13836 0056 4D9A0000 		.4byte	.LASF1158
 13837 005a 05       		.byte	0x5
 13838 005b CA02     		.uleb128 0x14a
ARM GAS  /tmp/ccTV2SzP.s 			page 311


 13839 005d 9F2D0000 		.4byte	.LASF1159
 13840 0061 05       		.byte	0x5
 13841 0062 8F03     		.uleb128 0x18f
 13842 0064 2D860000 		.4byte	.LASF1160
 13843 0068 00       		.byte	0
 13844              		.section	.debug_macro,"G",%progbits,wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d,comdat
 13845              	.Ldebug_macro32:
 13846 0000 0400     		.2byte	0x4
 13847 0002 00       		.byte	0
 13848 0003 05       		.byte	0x5
 13849 0004 5C       		.uleb128 0x5c
 13850 0005 499F0000 		.4byte	.LASF1162
 13851 0009 05       		.byte	0x5
 13852 000a 5D       		.uleb128 0x5d
 13853 000b 8F710000 		.4byte	.LASF1163
 13854 000f 05       		.byte	0x5
 13855 0010 5E       		.uleb128 0x5e
 13856 0011 84520000 		.4byte	.LASF1164
 13857 0015 05       		.byte	0x5
 13858 0016 5F       		.uleb128 0x5f
 13859 0017 F2040000 		.4byte	.LASF1165
 13860 001b 05       		.byte	0x5
 13861 001c 60       		.uleb128 0x60
 13862 001d 910E0000 		.4byte	.LASF1166
 13863 0021 05       		.byte	0x5
 13864 0022 61       		.uleb128 0x61
 13865 0023 6D120000 		.4byte	.LASF1167
 13866 0027 05       		.byte	0x5
 13867 0028 62       		.uleb128 0x62
 13868 0029 F21B0000 		.4byte	.LASF1168
 13869 002d 05       		.byte	0x5
 13870 002e 63       		.uleb128 0x63
 13871 002f C8650000 		.4byte	.LASF1169
 13872 0033 05       		.byte	0x5
 13873 0034 65       		.uleb128 0x65
 13874 0035 9A540000 		.4byte	.LASF1170
 13875 0039 05       		.byte	0x5
 13876 003a 66       		.uleb128 0x66
 13877 003b AC570000 		.4byte	.LASF1171
 13878 003f 05       		.byte	0x5
 13879 0040 67       		.uleb128 0x67
 13880 0041 E17D0000 		.4byte	.LASF1172
 13881 0045 05       		.byte	0x5
 13882 0046 68       		.uleb128 0x68
 13883 0047 2E0F0000 		.4byte	.LASF1173
 13884 004b 05       		.byte	0x5
 13885 004c 69       		.uleb128 0x69
 13886 004d 691D0000 		.4byte	.LASF1174
 13887 0051 05       		.byte	0x5
 13888 0052 FA02     		.uleb128 0x17a
 13889 0054 C77A0000 		.4byte	.LASF1175
 13890 0058 05       		.byte	0x5
 13891 0059 A403     		.uleb128 0x1a4
 13892 005b 642F0000 		.4byte	.LASF1176
 13893 005f 05       		.byte	0x5
 13894 0060 F403     		.uleb128 0x1f4
 13895 0062 7B750000 		.4byte	.LASF1177
ARM GAS  /tmp/ccTV2SzP.s 			page 312


 13896 0066 05       		.byte	0x5
 13897 0067 9A04     		.uleb128 0x21a
 13898 0069 A0A00000 		.4byte	.LASF1178
 13899 006d 05       		.byte	0x5
 13900 006e 9605     		.uleb128 0x296
 13901 0070 F4920000 		.4byte	.LASF1179
 13902 0074 05       		.byte	0x5
 13903 0075 EC05     		.uleb128 0x2ec
 13904 0077 76290000 		.4byte	.LASF1180
 13905 007b 05       		.byte	0x5
 13906 007c AB06     		.uleb128 0x32b
 13907 007e 69530000 		.4byte	.LASF1181
 13908 0082 05       		.byte	0x5
 13909 0083 F406     		.uleb128 0x374
 13910 0085 199B0000 		.4byte	.LASF1182
 13911 0089 05       		.byte	0x5
 13912 008a CA07     		.uleb128 0x3ca
 13913 008c 99360000 		.4byte	.LASF1183
 13914 0090 00       		.byte	0
 13915              		.section	.debug_macro,"G",%progbits,wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95,comdat
 13916              	.Ldebug_macro33:
 13917 0000 0400     		.2byte	0x4
 13918 0002 00       		.byte	0
 13919 0003 05       		.byte	0x5
 13920 0004 43       		.uleb128 0x43
 13921 0005 72490000 		.4byte	.LASF1184
 13922 0009 05       		.byte	0x5
 13923 000a 58       		.uleb128 0x58
 13924 000b 3D400000 		.4byte	.LASF1185
 13925 000f 05       		.byte	0x5
 13926 0010 59       		.uleb128 0x59
 13927 0011 A0AB0000 		.4byte	.LASF1186
 13928 0015 00       		.byte	0
 13929              		.section	.debug_line,"",%progbits
 13930              	.Ldebug_line0:
 13931 0000 AA0A0000 		.section	.debug_str,"MS",%progbits,1
 13931      02009802 
 13931      00000201 
 13931      FB0E0D00 
 13931      01010101 
 13932              	.LASF681:
 13933 0000 5F5F474E 		.ascii	"__GNUCLIKE___SECTION 1\000"
 13933      55434C49 
 13933      4B455F5F 
 13933      5F534543 
 13933      54494F4E 
 13934              	.LASF1329:
 13935 0017 53746163 		.ascii	"StackT_t\000"
 13935      6B545F74 
 13935      00
 13936              	.LASF902:
 13937 0020 57494E54 		.ascii	"WINT_MIN (__WINT_MIN__)\000"
 13937      5F4D494E 
 13937      20285F5F 
 13937      57494E54 
 13937      5F4D494E 
 13938              	.LASF178:
ARM GAS  /tmp/ccTV2SzP.s 			page 313


 13939 0038 5F5F4445 		.ascii	"__DECIMAL_DIG__ 17\000"
 13939      43494D41 
 13939      4C5F4449 
 13939      475F5F20 
 13939      313700
 13940              	.LASF474:
 13941 004b 5F5F5356 		.ascii	"__SVID_VISIBLE 1\000"
 13941      49445F56 
 13941      49534942 
 13941      4C452031 
 13941      00
 13942              	.LASF810:
 13943 005c 5F5F696E 		.ascii	"__int20 +2\000"
 13943      74323020 
 13943      2B3200
 13944              	.LASF1081:
 13945 0067 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_END(xEventGroup,uxBitsTo"
 13945      65455645 
 13945      4E545F47 
 13945      524F5550 
 13945      5F574149 
 13946 009a 57616974 		.ascii	"WaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred"
 13946      466F722C 
 13946      7854696D 
 13946      656F7574 
 13946      4F636375 
 13947 00cd 00       		.ascii	"\000"
 13948              	.LASF157:
 13949 00ce 5F5F464C 		.ascii	"__FLT_HAS_QUIET_NAN__ 1\000"
 13949      545F4841 
 13949      535F5155 
 13949      4945545F 
 13949      4E414E5F 
 13950              	.LASF1400:
 13951 00e6 78596965 		.ascii	"xYieldPending\000"
 13951      6C645065 
 13951      6E64696E 
 13951      6700
 13952              	.LASF248:
 13953 00f4 5F5F4445 		.ascii	"__DEC128_EPSILON__ 1E-33DL\000"
 13953      43313238 
 13953      5F455053 
 13953      494C4F4E 
 13953      5F5F2031 
 13954              	.LASF211:
 13955 010f 5F5F464C 		.ascii	"__FLT64_DENORM_MIN__ 4.9406564584124654e-324F64\000"
 13955      5436345F 
 13955      44454E4F 
 13955      524D5F4D 
 13955      494E5F5F 
 13956              	.LASF456:
 13957 013f 5F535953 		.ascii	"_SYS_FEATURES_H \000"
 13957      5F464541 
 13957      54555245 
 13957      535F4820 
 13957      00
 13958              	.LASF620:
ARM GAS  /tmp/ccTV2SzP.s 			page 314


 13959 0150 5F524545 		.ascii	"_REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = &(var"
 13959      4E545F49 
 13959      4E49545F 
 13959      5054525F 
 13959      5A45524F 
 13960 0183 292D3E5F 		.ascii	")->__sf[0]; (var)->_stdout = &(var)->__sf[1]; (var)"
 13960      5F73665B 
 13960      305D3B20 
 13960      28766172 
 13960      292D3E5F 
 13961 01b6 2D3E5F73 		.ascii	"->_stderr = &(var)->__sf[2]; (var)->_new._reent._ra"
 13961      74646572 
 13961      72203D20 
 13961      26287661 
 13961      72292D3E 
 13962 01e9 6E645F6E 		.ascii	"nd_next = 1; (var)->_new._reent._r48._seed[0] = _RA"
 13962      65787420 
 13962      3D20313B 
 13962      20287661 
 13962      72292D3E 
 13963 021c 4E443438 		.ascii	"ND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RA"
 13963      5F534545 
 13963      445F303B 
 13963      20287661 
 13963      72292D3E 
 13964 024f 4E443438 		.ascii	"ND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RA"
 13964      5F534545 
 13964      445F313B 
 13964      20287661 
 13964      72292D3E 
 13965 0282 4E443438 		.ascii	"ND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RA"
 13965      5F534545 
 13965      445F323B 
 13965      20287661 
 13965      72292D3E 
 13966 02b5 4E443438 		.ascii	"ND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RA"
 13966      5F4D554C 
 13966      545F303B 
 13966      20287661 
 13966      72292D3E 
 13967 02e8 4E443438 		.ascii	"ND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RA"
 13967      5F4D554C 
 13967      545F313B 
 13967      20287661 
 13967      72292D3E 
 13968 031b 4E443438 		.ascii	"ND48_MULT_2; (var)->_new._reent._r48._add = _RAND48"
 13968      5F4D554C 
 13968      545F323B 
 13968      20287661 
 13968      72292D3E 
 13969 034e 5F414444 		.ascii	"_ADD; }\000"
 13969      3B207D00 
 13970              	.LASF378:
 13971 0356 5F5F4743 		.ascii	"__GCC_ATOMIC_WCHAR_T_LOCK_FREE 2\000"
 13971      435F4154 
 13971      4F4D4943 
 13971      5F574348 
ARM GAS  /tmp/ccTV2SzP.s 			page 315


 13971      41525F54 
 13972              	.LASF1194:
 13973 0377 74736B53 		.ascii	"tskSUSPENDED_CHAR ( 'S' )\000"
 13973      55535045 
 13973      4E444544 
 13973      5F434841 
 13973      52202820 
 13974              	.LASF370:
 13975 0391 5F5F4348 		.ascii	"__CHAR_UNSIGNED__ 1\000"
 13975      41525F55 
 13975      4E534947 
 13975      4E45445F 
 13975      5F203100 
 13976              	.LASF1204:
 13977 03a5 73697A65 		.ascii	"size_t\000"
 13977      5F7400
 13978              	.LASF657:
 13979 03ac 5F474C4F 		.ascii	"_GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)\000"
 13979      42414C5F 
 13979      41544558 
 13979      49542028 
 13979      5F474C4F 
 13980              	.LASF1027:
 13981 03d4 74726163 		.ascii	"traceTASK_SWITCHED_IN() \000"
 13981      65544153 
 13981      4B5F5357 
 13981      49544348 
 13981      45445F49 
 13982              	.LASF1133:
 13983 03ed 6C697374 		.ascii	"listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( ( pxLi"
 13983      5345545F 
 13983      4C495354 
 13983      5F495445 
 13983      4D5F5641 
 13984 0420 73744974 		.ascii	"stItem )->xItemValue = ( xValue ) )\000"
 13984      656D2029 
 13984      2D3E7849 
 13984      74656D56 
 13984      616C7565 
 13985              	.LASF250:
 13986 0444 5F5F5346 		.ascii	"__SFRACT_FBIT__ 7\000"
 13986      52414354 
 13986      5F464249 
 13986      545F5F20 
 13986      3700
 13987              	.LASF1074:
 13988 0456 74726163 		.ascii	"traceMALLOC(pvAddress,uiSize) \000"
 13988      654D414C 
 13988      4C4F4328 
 13988      70764164 
 13988      64726573 
 13989              	.LASF1505:
 13990 0475 5F5F6C6F 		.ascii	"__locale_t\000"
 13990      63616C65 
 13990      5F7400
 13991              	.LASF213:
 13992 0480 5F5F464C 		.ascii	"__FLT64_HAS_INFINITY__ 1\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 316


 13992      5436345F 
 13992      4841535F 
 13992      494E4649 
 13992      4E495459 
 13993              	.LASF1222:
 13994 0499 5F5F7661 		.ascii	"__value\000"
 13994      6C756500 
 13995              	.LASF778:
 13996 04a1 5F5F7265 		.ascii	"__requires_exclusive(...) __lock_annotate(exclusive"
 13996      71756972 
 13996      65735F65 
 13996      78636C75 
 13996      73697665 
 13997 04d4 5F6C6F63 		.ascii	"_locks_required(__VA_ARGS__))\000"
 13997      6B735F72 
 13997      65717569 
 13997      72656428 
 13997      5F5F5641 
 13998              	.LASF1165:
 13999 04f2 746D7243 		.ascii	"tmrCOMMAND_START ( ( BaseT_t ) 1 )\000"
 13999      4F4D4D41 
 13999      4E445F53 
 13999      54415254 
 13999      20282028 
 14000              	.LASF861:
 14001 0515 494E5431 		.ascii	"INT16_MIN (-__INT16_MAX__ - 1)\000"
 14001      365F4D49 
 14001      4E20282D 
 14001      5F5F494E 
 14001      5431365F 
 14002              	.LASF322:
 14003 0534 5F5F4C4C 		.ascii	"__LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)\000"
 14003      41434355 
 14003      4D5F4D49 
 14003      4E5F5F20 
 14003      282D3058 
 14004              	.LASF1290:
 14005 055b 5F5F7366 		.ascii	"__sf\000"
 14005      00
 14006              	.LASF76:
 14007 0560 5F5F5054 		.ascii	"__PTRDIFF_MAX__ 0x7fffffff\000"
 14007      52444946 
 14007      465F4D41 
 14007      585F5F20 
 14007      30783766 
 14008              	.LASF502:
 14009 057b 5F4C4F4E 		.ascii	"_LONG_DOUBLE long double\000"
 14009      475F444F 
 14009      55424C45 
 14009      206C6F6E 
 14009      6720646F 
 14010              	.LASF1428:
 14011 0594 75735374 		.ascii	"usStackDepth\000"
 14011      61636B44 
 14011      65707468 
 14011      00
 14012              	.LASF1249:
ARM GAS  /tmp/ccTV2SzP.s 			page 317


 14013 05a1 5F5F7362 		.ascii	"__sbuf\000"
 14013      756600
 14014              	.LASF1257:
 14015 05a8 5F726561 		.ascii	"_read\000"
 14015      6400
 14016              	.LASF87:
 14017 05ae 5F5F494E 		.ascii	"__INTMAX_MAX__ 0x7fffffffffffffffLL\000"
 14017      544D4158 
 14017      5F4D4158 
 14017      5F5F2030 
 14017      78376666 
 14018              	.LASF1196:
 14019 05d2 7461736B 		.ascii	"taskSELECT_HIGHEST_PRIORITY_TASK() { UBaseT_t uxTop"
 14019      53454C45 
 14019      43545F48 
 14019      49474845 
 14019      53545F50 
 14020 0605 5072696F 		.ascii	"Priority; portGET_HIGHEST_PRIORITY( uxTopPriority, "
 14020      72697479 
 14020      3B20706F 
 14020      72744745 
 14020      545F4849 
 14021 0638 7578546F 		.ascii	"uxTopReadyPriority ); configASSERT( listCURRENT_LIS"
 14021      70526561 
 14021      64795072 
 14021      696F7269 
 14021      74792029 
 14022 066b 545F4C45 		.ascii	"T_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) )"
 14022      4E475448 
 14022      28202628 
 14022      20707852 
 14022      65616479 
 14023 069e 203E2030 		.ascii	" > 0 ); listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, "
 14023      20293B20 
 14023      6C697374 
 14023      4745545F 
 14023      4F574E45 
 14024 06d1 26282070 		.ascii	"&( pxReadyTasksLists[ uxTopPriority ] ) ); }\000"
 14024      78526561 
 14024      64795461 
 14024      736B734C 
 14024      69737473 
 14025              	.LASF235:
 14026 06fe 5F5F4445 		.ascii	"__DEC32_SUBNORMAL_MIN__ 0.000001E-95DF\000"
 14026      4333325F 
 14026      5355424E 
 14026      4F524D41 
 14026      4C5F4D49 
 14027              	.LASF339:
 14028 0725 5F5F5451 		.ascii	"__TQ_IBIT__ 0\000"
 14028      5F494249 
 14028      545F5F20 
 14028      3000
 14029              	.LASF207:
 14030 0733 5F5F464C 		.ascii	"__FLT64_DECIMAL_DIG__ 17\000"
 14030      5436345F 
 14030      44454349 
ARM GAS  /tmp/ccTV2SzP.s 			page 318


 14030      4D414C5F 
 14030      4449475F 
 14031              	.LASF1100:
 14032 074c 636F6E66 		.ascii	"configUSE_QUEUE_SETS 0\000"
 14032      69675553 
 14032      455F5155 
 14032      4555455F 
 14032      53455453 
 14033              	.LASF1095:
 14034 0763 76506F72 		.ascii	"vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockT"
 14034      74467265 
 14034      65416C69 
 14034      676E6564 
 14034      28707642 
 14035 0796 6F467265 		.ascii	"oFree )\000"
 14035      65202900 
 14036              	.LASF617:
 14037 079e 5F524545 		.ascii	"_REENT_SIGNAL_SIZE 24\000"
 14037      4E545F53 
 14037      49474E41 
 14037      4C5F5349 
 14037      5A452032 
 14038              	.LASF931:
 14039 07b4 636F6E66 		.ascii	"configUSE_ALTERNATIVE_API 0\000"
 14039      69675553 
 14039      455F414C 
 14039      5445524E 
 14039      41544956 
 14040              	.LASF653:
 14041 07d0 5F4B6D61 		.ascii	"_Kmax (sizeof (size_t) << 3)\000"
 14041      78202873 
 14041      697A656F 
 14041      66202873 
 14041      697A655F 
 14042              	.LASF11:
 14043 07ed 5F5F4154 		.ascii	"__ATOMIC_CONSUME 1\000"
 14043      4F4D4943 
 14043      5F434F4E 
 14043      53554D45 
 14043      203100
 14044              	.LASF315:
 14045 0800 5F5F554C 		.ascii	"__ULACCUM_FBIT__ 32\000"
 14045      41434355 
 14045      4D5F4642 
 14045      49545F5F 
 14045      20333200 
 14046              	.LASF72:
 14047 0814 5F5F5743 		.ascii	"__WCHAR_MAX__ 0xffffffffU\000"
 14047      4841525F 
 14047      4D41585F 
 14047      5F203078 
 14047      66666666 
 14048              	.LASF302:
 14049 082e 5F5F4143 		.ascii	"__ACCUM_MIN__ (-0X1P15K-0X1P15K)\000"
 14049      43554D5F 
 14049      4D494E5F 
 14049      5F20282D 
ARM GAS  /tmp/ccTV2SzP.s 			page 319


 14049      30583150 
 14050              	.LASF1258:
 14051 084f 5F777269 		.ascii	"_write\000"
 14051      746500
 14052              	.LASF1030:
 14053 0856 74726163 		.ascii	"traceLOW_POWER_IDLE_END() \000"
 14053      654C4F57 
 14053      5F504F57 
 14053      45525F49 
 14053      444C455F 
 14054              	.LASF1363:
 14055 0871 4D656D6F 		.ascii	"MemoryRegion_t\000"
 14055      72795265 
 14055      67696F6E 
 14055      5F7400
 14056              	.LASF679:
 14057 0880 5F5F474E 		.ascii	"__GNUCLIKE___TYPEOF 1\000"
 14057      55434C49 
 14057      4B455F5F 
 14057      5F545950 
 14057      454F4620 
 14058              	.LASF1083:
 14059 0896 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(xEventGroup,ux"
 14059      65455645 
 14059      4E545F47 
 14059      524F5550 
 14059      5F434C45 
 14060 08c9 42697473 		.ascii	"BitsToClear) \000"
 14060      546F436C 
 14060      65617229 
 14060      2000
 14061              	.LASF1377:
 14062 08d7 78457665 		.ascii	"xEventListItem\000"
 14062      6E744C69 
 14062      73744974 
 14062      656D00
 14063              	.LASF1203:
 14064 08e6 7369676E 		.ascii	"signed char\000"
 14064      65642063 
 14064      68617200 
 14065              	.LASF1136:
 14066 08f2 6C697374 		.ascii	"listGET_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd"
 14066      4745545F 
 14066      48454144 
 14066      5F454E54 
 14066      52592870 
 14067 0925 20292E70 		.ascii	" ).pxNext )\000"
 14067      784E6578 
 14067      74202900 
 14068              	.LASF1354:
 14069 0931 65546173 		.ascii	"eTaskState\000"
 14069      6B537461 
 14069      746500
 14070              	.LASF15:
 14071 093c 5F5F5349 		.ascii	"__SIZEOF_LONG_LONG__ 8\000"
 14071      5A454F46 
 14071      5F4C4F4E 
ARM GAS  /tmp/ccTV2SzP.s 			page 320


 14071      475F4C4F 
 14071      4E475F5F 
 14072              	.LASF1301:
 14073 0953 5F617363 		.ascii	"_asctime_buf\000"
 14073      74696D65 
 14073      5F627566 
 14073      00
 14074              	.LASF163:
 14075 0960 5F5F4442 		.ascii	"__DBL_MAX_10_EXP__ 308\000"
 14075      4C5F4D41 
 14075      585F3130 
 14075      5F455850 
 14075      5F5F2033 
 14076              	.LASF1284:
 14077 0977 5F637674 		.ascii	"_cvtlen\000"
 14077      6C656E00 
 14078              	.LASF756:
 14079 097f 5F5F5243 		.ascii	"__RCSID_SOURCE(s) struct __hack\000"
 14079      5349445F 
 14079      534F5552 
 14079      43452873 
 14079      29207374 
 14080              	.LASF262:
 14081 099f 5F5F4652 		.ascii	"__FRACT_MIN__ (-0.5R-0.5R)\000"
 14081      4143545F 
 14081      4D494E5F 
 14081      5F20282D 
 14081      302E3552 
 14082              	.LASF328:
 14083 09ba 5F5F554C 		.ascii	"__ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK\000"
 14083      4C414343 
 14083      554D5F4D 
 14083      41585F5F 
 14083      20305846 
 14084              	.LASF949:
 14085 09e6 636F6E66 		.ascii	"configNET_MASK1 255\000"
 14085      69674E45 
 14085      545F4D41 
 14085      534B3120 
 14085      32353500 
 14086              	.LASF298:
 14087 09fa 5F5F5553 		.ascii	"__USACCUM_MAX__ 0XFFFFP-8UHK\000"
 14087      41434355 
 14087      4D5F4D41 
 14087      585F5F20 
 14087      30584646 
 14088              	.LASF1465:
 14089 0a17 70756C54 		.ascii	"pulTotalRunTime\000"
 14089      6F74616C 
 14089      52756E54 
 14089      696D6500 
 14090              	.LASF91:
 14091 0a27 5F5F494E 		.ascii	"__INTMAX_WIDTH__ 64\000"
 14091      544D4158 
 14091      5F574944 
 14091      54485F5F 
 14091      20363400 
ARM GAS  /tmp/ccTV2SzP.s 			page 321


 14092              	.LASF859:
 14093 0a3b 494E545F 		.ascii	"INT_LEAST8_MAX (__INT_LEAST8_MAX__)\000"
 14093      4C454153 
 14093      54385F4D 
 14093      41582028 
 14093      5F5F494E 
 14094              	.LASF853:
 14095 0a5f 494E5450 		.ascii	"INTPTR_MAX (__INTPTR_MAX__)\000"
 14095      54525F4D 
 14095      41582028 
 14095      5F5F494E 
 14095      54505452 
 14096              	.LASF335:
 14097 0a7b 5F5F5351 		.ascii	"__SQ_IBIT__ 0\000"
 14097      5F494249 
 14097      545F5F20 
 14097      3000
 14098              	.LASF25:
 14099 0a89 5F5F4F52 		.ascii	"__ORDER_PDP_ENDIAN__ 3412\000"
 14099      4445525F 
 14099      5044505F 
 14099      454E4449 
 14099      414E5F5F 
 14100              	.LASF29:
 14101 0aa3 5F5F5349 		.ascii	"__SIZE_TYPE__ unsigned int\000"
 14101      5A455F54 
 14101      5950455F 
 14101      5F20756E 
 14101      7369676E 
 14102              	.LASF238:
 14103 0abe 5F5F4445 		.ascii	"__DEC64_MAX_EXP__ 385\000"
 14103      4336345F 
 14103      4D41585F 
 14103      4558505F 
 14103      5F203338 
 14104              	.LASF636:
 14105 0ad4 5F524545 		.ascii	"_REENT_MP_FREELIST(ptr) ((ptr)->_freelist)\000"
 14105      4E545F4D 
 14105      505F4652 
 14105      45454C49 
 14105      53542870 
 14106              	.LASF155:
 14107 0aff 5F5F464C 		.ascii	"__FLT_HAS_DENORM__ 1\000"
 14107      545F4841 
 14107      535F4445 
 14107      4E4F524D 
 14107      5F5F2031 
 14108              	.LASF38:
 14109 0b14 5F5F494E 		.ascii	"__INT8_TYPE__ signed char\000"
 14109      54385F54 
 14109      5950455F 
 14109      5F207369 
 14109      676E6564 
 14110              	.LASF403:
 14111 0b2e 5F5F4152 		.ascii	"__ARM_ARCH_PROFILE 77\000"
 14111      4D5F4152 
 14111      43485F50 
ARM GAS  /tmp/ccTV2SzP.s 			page 322


 14111      524F4649 
 14111      4C452037 
 14112              	.LASF1355:
 14113 0b44 7854494D 		.ascii	"xTIME_OUT\000"
 14113      455F4F55 
 14113      5400
 14114              	.LASF193:
 14115 0b4e 5F5F464C 		.ascii	"__FLT32_DECIMAL_DIG__ 9\000"
 14115      5433325F 
 14115      44454349 
 14115      4D414C5F 
 14115      4449475F 
 14116              	.LASF31:
 14117 0b66 5F5F5743 		.ascii	"__WCHAR_TYPE__ unsigned int\000"
 14117      4841525F 
 14117      54595045 
 14117      5F5F2075 
 14117      6E736967 
 14118              	.LASF1142:
 14119 0b82 6C697374 		.ascii	"listGET_OWNER_OF_HEAD_ENTRY(pxList) ( (&( ( pxList "
 14119      4745545F 
 14119      4F574E45 
 14119      525F4F46 
 14119      5F484541 
 14120 0bb5 292D3E78 		.ascii	")->xListEnd ))->pxNext->pvOwner )\000"
 14120      4C697374 
 14120      456E6420 
 14120      29292D3E 
 14120      70784E65 
 14121              	.LASF1396:
 14122 0bd7 78546963 		.ascii	"xTickCount\000"
 14122      6B436F75 
 14122      6E7400
 14123              	.LASF1381:
 14124 0be2 75785461 		.ascii	"uxTaskNumber\000"
 14124      736B4E75 
 14124      6D626572 
 14124      00
 14125              	.LASF954:
 14126 0bef 636F6E66 		.ascii	"configMAX_SYSCALL_INTERRUPT_PRIORITY ( 5 << (8 - co"
 14126      69674D41 
 14126      585F5359 
 14126      5343414C 
 14126      4C5F494E 
 14127 0c22 6E666967 		.ascii	"nfigPRIO_BITS) )\000"
 14127      5052494F 
 14127      5F424954 
 14127      53292029 
 14127      00
 14128              	.LASF172:
 14129 0c33 5F5F4C44 		.ascii	"__LDBL_MANT_DIG__ 53\000"
 14129      424C5F4D 
 14129      414E545F 
 14129      4449475F 
 14129      5F203533 
 14130              	.LASF763:
 14131 0c48 5F4E756C 		.ascii	"_Nullable \000"
ARM GAS  /tmp/ccTV2SzP.s 			page 323


 14131      6C61626C 
 14131      652000
 14132              	.LASF1231:
 14133 0c53 5F5F746D 		.ascii	"__tm\000"
 14133      00
 14134              	.LASF1316:
 14135 0c58 5F776373 		.ascii	"_wcsrtombs_state\000"
 14135      72746F6D 
 14135      62735F73 
 14135      74617465 
 14135      00
 14136              	.LASF1262:
 14137 0c69 5F6E6275 		.ascii	"_nbuf\000"
 14137      6600
 14138              	.LASF1232:
 14139 0c6f 5F5F746D 		.ascii	"__tm_sec\000"
 14139      5F736563 
 14139      00
 14140              	.LASF116:
 14141 0c78 5F5F5549 		.ascii	"__UINT8_C(c) c\000"
 14141      4E54385F 
 14141      43286329 
 14141      206300
 14142              	.LASF39:
 14143 0c87 5F5F494E 		.ascii	"__INT16_TYPE__ short int\000"
 14143      5431365F 
 14143      54595045 
 14143      5F5F2073 
 14143      686F7274 
 14144              	.LASF713:
 14145 0ca0 5F5F616C 		.ascii	"__aligned(x) __attribute__((__aligned__(x)))\000"
 14145      69676E65 
 14145      64287829 
 14145      205F5F61 
 14145      74747269 
 14146              	.LASF1508:
 14147 0ccd 75635265 		.ascii	"ucReturn\000"
 14147      7475726E 
 14147      00
 14148              	.LASF1309:
 14149 0cd6 5F6C3634 		.ascii	"_l64a_buf\000"
 14149      615F6275 
 14149      6600
 14150              	.LASF208:
 14151 0ce0 5F5F464C 		.ascii	"__FLT64_MAX__ 1.7976931348623157e+308F64\000"
 14151      5436345F 
 14151      4D41585F 
 14151      5F20312E 
 14151      37393736 
 14152              	.LASF1000:
 14153 0d09 706F7274 		.ascii	"portBYTE_ALIGNMENT_MASK ( 0x0007U )\000"
 14153      42595445 
 14153      5F414C49 
 14153      474E4D45 
 14153      4E545F4D 
 14154              	.LASF1025:
 14155 0d2d 74726163 		.ascii	"traceSTART() \000"
ARM GAS  /tmp/ccTV2SzP.s 			page 324


 14155      65535441 
 14155      52542829 
 14155      2000
 14156              	.LASF318:
 14157 0d3b 5F5F554C 		.ascii	"__ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK\000"
 14157      41434355 
 14157      4D5F4D41 
 14157      585F5F20 
 14157      30584646 
 14158              	.LASF1379:
 14159 0d65 70785374 		.ascii	"pxStack\000"
 14159      61636B00 
 14160              	.LASF670:
 14161 0d6d 5F5F756E 		.ascii	"__unbounded \000"
 14161      626F756E 
 14161      64656420 
 14161      00
 14162              	.LASF916:
 14163 0d7a 636F6E66 		.ascii	"configUSE_IDLE_HOOK 0\000"
 14163      69675553 
 14163      455F4944 
 14163      4C455F48 
 14163      4F4F4B20 
 14164              	.LASF815:
 14165 0d90 5F5F494E 		.ascii	"__INT8 \"hh\"\000"
 14165      54382022 
 14165      68682200 
 14166              	.LASF764:
 14167 0d9c 5F4E756C 		.ascii	"_Null_unspecified \000"
 14167      6C5F756E 
 14167      73706563 
 14167      69666965 
 14167      642000
 14168              	.LASF371:
 14169 0daf 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1\000"
 14169      435F4841 
 14169      56455F53 
 14169      594E435F 
 14169      434F4D50 
 14170              	.LASF1040:
 14171 0dd4 74726163 		.ascii	"traceCREATE_MUTEX_FAILED() \000"
 14171      65435245 
 14171      4154455F 
 14171      4D555445 
 14171      585F4641 
 14172              	.LASF585:
 14173 0df0 5F5F6C6F 		.ascii	"__lock_close_recursive(lock) (_CAST_VOID 0)\000"
 14173      636B5F63 
 14173      6C6F7365 
 14173      5F726563 
 14173      75727369 
 14174              	.LASF946:
 14175 0e1c 636F6E66 		.ascii	"configIP_ADDR2 0\000"
 14175      69674950 
 14175      5F414444 
 14175      52322030 
 14175      00
ARM GAS  /tmp/ccTV2SzP.s 			page 325


 14176              	.LASF1:
 14177 0e2d 5F5F5354 		.ascii	"__STDC_HOSTED__ 1\000"
 14177      44435F48 
 14177      4F535445 
 14177      445F5F20 
 14177      3100
 14178              	.LASF285:
 14179 0e3f 5F5F554C 		.ascii	"__ULLFRACT_FBIT__ 64\000"
 14179      4C465241 
 14179      43545F46 
 14179      4249545F 
 14179      5F203634 
 14180              	.LASF1104:
 14181 0e54 636F6E66 		.ascii	"configUSE_NEWLIB_REENTRANT 0\000"
 14181      69675553 
 14181      455F4E45 
 14181      574C4942 
 14181      5F524545 
 14182              	.LASF37:
 14183 0e71 5F5F5349 		.ascii	"__SIG_ATOMIC_TYPE__ int\000"
 14183      475F4154 
 14183      4F4D4943 
 14183      5F545950 
 14183      455F5F20 
 14184              	.LASF1365:
 14185 0e89 7848616E 		.ascii	"xHandle\000"
 14185      646C6500 
 14186              	.LASF1166:
 14187 0e91 746D7243 		.ascii	"tmrCOMMAND_RESET ( ( BaseT_t ) 2 )\000"
 14187      4F4D4D41 
 14187      4E445F52 
 14187      45534554 
 14187      20282028 
 14188              	.LASF633:
 14189 0eb4 5F524545 		.ascii	"_REENT_MP_RESULT(ptr) ((ptr)->_result)\000"
 14189      4E545F4D 
 14189      505F5245 
 14189      53554C54 
 14189      28707472 
 14190              	.LASF57:
 14191 0edb 5F5F494E 		.ascii	"__INT_FAST64_TYPE__ long long int\000"
 14191      545F4641 
 14191      53543634 
 14191      5F545950 
 14191      455F5F20 
 14192              	.LASF1242:
 14193 0efd 5F666E61 		.ascii	"_fnargs\000"
 14193      72677300 
 14194              	.LASF1468:
 14195 0f05 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 14195      736B4765 
 14195      744E756D 
 14195      6265724F 
 14195      66546173 
 14196              	.LASF1266:
 14197 0f1c 5F6C6F63 		.ascii	"_lock\000"
 14197      6B00
ARM GAS  /tmp/ccTV2SzP.s 			page 326


 14198              	.LASF512:
 14199 0f22 5F5F5349 		.ascii	"__SIZE_T__ \000"
 14199      5A455F54 
 14199      5F5F2000 
 14200              	.LASF1173:
 14201 0f2e 746D7243 		.ascii	"tmrCOMMAND_STOP_FROM_ISR ( ( BaseT_t ) 8 )\000"
 14201      4F4D4D41 
 14201      4E445F53 
 14201      544F505F 
 14201      46524F4D 
 14202              	.LASF897:
 14203 0f59 50545244 		.ascii	"PTRDIFF_MAX (__PTRDIFF_MAX__)\000"
 14203      4946465F 
 14203      4D415820 
 14203      285F5F50 
 14203      54524449 
 14204              	.LASF1080:
 14205 0f77 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_BLOCK(xEventGroup,uxBits"
 14205      65455645 
 14205      4E545F47 
 14205      524F5550 
 14205      5F574149 
 14206 0faa 546F5761 		.ascii	"ToWaitFor) \000"
 14206      6974466F 
 14206      72292000 
 14207              	.LASF1406:
 14208 0fb6 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 14208      6B507269 
 14208      6F726974 
 14208      79446973 
 14208      696E6865 
 14209              	.LASF738:
 14210 0fce 5F5F6578 		.ascii	"__exported __attribute__((__visibility__(\"default\""
 14210      706F7274 
 14210      6564205F 
 14210      5F617474 
 14210      72696275 
 14211 1000 29292900 		.ascii	")))\000"
 14212              	.LASF368:
 14213 1004 5F5F474E 		.ascii	"__GNUC_GNU_INLINE__ 1\000"
 14213      55435F47 
 14213      4E555F49 
 14213      4E4C494E 
 14213      455F5F20 
 14214              	.LASF1003:
 14215 101a 50524956 		.ascii	"PRIVILEGED_FUNCTION \000"
 14215      494C4547 
 14215      45445F46 
 14215      554E4354 
 14215      494F4E20 
 14216              	.LASF1200:
 14217 102f 70727647 		.ascii	"prvGetTCBFromHandle(pxHandle) ( ( ( pxHandle ) == N"
 14217      65745443 
 14217      4246726F 
 14217      6D48616E 
 14217      646C6528 
 14218 1062 554C4C20 		.ascii	"ULL ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( px"
ARM GAS  /tmp/ccTV2SzP.s 			page 327


 14218      29203F20 
 14218      28205443 
 14218      425F7420 
 14218      2A202920 
 14219 1095 48616E64 		.ascii	"Handle ) )\000"
 14219      6C652029 
 14219      202900
 14220              	.LASF1032:
 14221 10a0 74726163 		.ascii	"traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInh"
 14221      65544153 
 14221      4B5F5052 
 14221      494F5249 
 14221      54595F49 
 14222 10d3 65726974 		.ascii	"eritedPriority) \000"
 14222      65645072 
 14222      696F7269 
 14222      74792920 
 14222      00
 14223              	.LASF258:
 14224 10e4 5F5F5553 		.ascii	"__USFRACT_MAX__ 0XFFP-8UHR\000"
 14224      46524143 
 14224      545F4D41 
 14224      585F5F20 
 14224      30584646 
 14225              	.LASF1161:
 14226 10ff 54494D45 		.ascii	"TIMERS_H \000"
 14226      52535F48 
 14226      2000
 14227              	.LASF662:
 14228 1109 5F5F4153 		.ascii	"__ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) "
 14228      4D4E414D 
 14228      4528636E 
 14228      616D6529 
 14228      205F5F58 
 14229 113c 636E616D 		.ascii	"cname\000"
 14229      6500
 14230              	.LASF545:
 14231 1142 5F5F6E65 		.ascii	"__need_wchar_t\000"
 14231      65645F77 
 14231      63686172 
 14231      5F7400
 14232              	.LASF189:
 14233 1151 5F5F464C 		.ascii	"__FLT32_MIN_EXP__ (-125)\000"
 14233      5433325F 
 14233      4D494E5F 
 14233      4558505F 
 14233      5F20282D 
 14234              	.LASF1023:
 14235 116a 706F7274 		.ascii	"portSETUP_TCB(pxTCB) ( void ) pxTCB\000"
 14235      53455455 
 14235      505F5443 
 14235      42287078 
 14235      54434229 
 14236              	.LASF265:
 14237 118e 5F5F5546 		.ascii	"__UFRACT_FBIT__ 16\000"
 14237      52414354 
 14237      5F464249 
ARM GAS  /tmp/ccTV2SzP.s 			page 328


 14237      545F5F20 
 14237      313600
 14238              	.LASF1068:
 14239 11a1 74726163 		.ascii	"traceTASK_INCREMENT_TICK(xTickCount) \000"
 14239      65544153 
 14239      4B5F494E 
 14239      4352454D 
 14239      454E545F 
 14240              	.LASF1311:
 14241 11c7 5F676574 		.ascii	"_getdate_err\000"
 14241      64617465 
 14241      5F657272 
 14241      00
 14242              	.LASF1297:
 14243 11d4 5F6D756C 		.ascii	"_mult\000"
 14243      7400
 14244              	.LASF862:
 14245 11da 494E5431 		.ascii	"INT16_MAX (__INT16_MAX__)\000"
 14245      365F4D41 
 14245      5820285F 
 14245      5F494E54 
 14245      31365F4D 
 14246              	.LASF1019:
 14247 11f4 494E434C 		.ascii	"INCLUDE_xTaskGetSchedulerState 0\000"
 14247      5544455F 
 14247      78546173 
 14247      6B476574 
 14247      53636865 
 14248              	.LASF534:
 14249 1215 5F5F5743 		.ascii	"__WCHAR_T \000"
 14249      4841525F 
 14249      542000
 14250              	.LASF275:
 14251 1220 5F5F554C 		.ascii	"__ULFRACT_FBIT__ 32\000"
 14251      46524143 
 14251      545F4642 
 14251      49545F5F 
 14251      20333200 
 14252              	.LASF1190:
 14253 1234 74736B53 		.ascii	"tskSTACK_FILL_BYTE ( 0xa5U )\000"
 14253      5441434B 
 14253      5F46494C 
 14253      4C5F4259 
 14253      54452028 
 14254              	.LASF204:
 14255 1251 5F5F464C 		.ascii	"__FLT64_MIN_10_EXP__ (-307)\000"
 14255      5436345F 
 14255      4D494E5F 
 14255      31305F45 
 14255      58505F5F 
 14256              	.LASF1167:
 14257 126d 746D7243 		.ascii	"tmrCOMMAND_STOP ( ( BaseT_t ) 3 )\000"
 14257      4F4D4D41 
 14257      4E445F53 
 14257      544F5020 
 14257      28202820 
 14258              	.LASF527:
ARM GAS  /tmp/ccTV2SzP.s 			page 329


 14259 128f 5F5F7369 		.ascii	"__size_t \000"
 14259      7A655F74 
 14259      2000
 14260              	.LASF669:
 14261 1299 5F5F626F 		.ascii	"__bounded \000"
 14261      756E6465 
 14261      642000
 14262              	.LASF850:
 14263 12a4 5F5F696E 		.ascii	"__int_fast32_t_defined 1\000"
 14263      745F6661 
 14263      73743332 
 14263      5F745F64 
 14263      6566696E 
 14264              	.LASF130:
 14265 12bd 5F5F494E 		.ascii	"__INT_FAST64_WIDTH__ 64\000"
 14265      545F4641 
 14265      53543634 
 14265      5F574944 
 14265      54485F5F 
 14266              	.LASF1485:
 14267 12d5 78546173 		.ascii	"xTaskToSuspend\000"
 14267      6B546F53 
 14267      75737065 
 14267      6E6400
 14268              	.LASF540:
 14269 12e4 5F5F5F69 		.ascii	"___int_wchar_t_h \000"
 14269      6E745F77 
 14269      63686172 
 14269      5F745F68 
 14269      2000
 14270              	.LASF1072:
 14271 12f6 74726163 		.ascii	"traceTIMER_EXPIRED(pxTimer) \000"
 14271      6554494D 
 14271      45525F45 
 14271      58504952 
 14271      45442870 
 14272              	.LASF1443:
 14273 1313 75784861 		.ascii	"uxHandle\000"
 14273      6E646C65 
 14273      00
 14274              	.LASF905:
 14275 131c 494E5431 		.ascii	"INT16_C(x) __INT16_C(x)\000"
 14275      365F4328 
 14275      7829205F 
 14275      5F494E54 
 14275      31365F43 
 14276              	.LASF476:
 14277 1334 5F504F49 		.ascii	"_POINTER_INT long\000"
 14277      4E544552 
 14277      5F494E54 
 14277      206C6F6E 
 14277      6700
 14278              	.LASF254:
 14279 1346 5F5F5346 		.ascii	"__SFRACT_EPSILON__ 0x1P-7HR\000"
 14279      52414354 
 14279      5F455053 
 14279      494C4F4E 
ARM GAS  /tmp/ccTV2SzP.s 			page 330


 14279      5F5F2030 
 14280              	.LASF700:
 14281 1362 5F5F434F 		.ascii	"__CONCAT1(x,y) x ## y\000"
 14281      4E434154 
 14281      3128782C 
 14281      79292078 
 14281      20232320 
 14282              	.LASF1414:
 14283 1378 78546173 		.ascii	"xTask\000"
 14283      6B00
 14284              	.LASF110:
 14285 137e 5F5F494E 		.ascii	"__INT32_C(c) c ## L\000"
 14285      5433325F 
 14285      43286329 
 14285      20632023 
 14285      23204C00 
 14286              	.LASF344:
 14287 1392 5F5F5553 		.ascii	"__USQ_FBIT__ 32\000"
 14287      515F4642 
 14287      49545F5F 
 14287      20333200 
 14288              	.LASF24:
 14289 13a2 5F5F4F52 		.ascii	"__ORDER_BIG_ENDIAN__ 4321\000"
 14289      4445525F 
 14289      4249475F 
 14289      454E4449 
 14289      414E5F5F 
 14290              	.LASF451:
 14291 13bc 5F465657 		.ascii	"_FVWRITE_IN_STREAMIO 1\000"
 14291      52495445 
 14291      5F494E5F 
 14291      53545245 
 14291      414D494F 
 14292              	.LASF944:
 14293 13d3 636F6E66 		.ascii	"configIP_ADDR0 192\000"
 14293      69674950 
 14293      5F414444 
 14293      52302031 
 14293      393200
 14294              	.LASF334:
 14295 13e6 5F5F5351 		.ascii	"__SQ_FBIT__ 31\000"
 14295      5F464249 
 14295      545F5F20 
 14295      333100
 14296              	.LASF1404:
 14297 13f5 75785265 		.ascii	"uxReturn\000"
 14297      7475726E 
 14297      00
 14298              	.LASF855:
 14299 13fe 494E5438 		.ascii	"INT8_MIN (-__INT8_MAX__ - 1)\000"
 14299      5F4D494E 
 14299      20282D5F 
 14299      5F494E54 
 14299      385F4D41 
 14300              	.LASF5:
 14301 141b 5F5F5645 		.ascii	"__VERSION__ \"7.1.0\"\000"
 14301      5253494F 
ARM GAS  /tmp/ccTV2SzP.s 			page 331


 14301      4E5F5F20 
 14301      22372E31 
 14301      2E302200 
 14302              	.LASF1336:
 14303 142f 70784E65 		.ascii	"pxNext\000"
 14303      787400
 14304              	.LASF832:
 14305 1436 5F55494E 		.ascii	"_UINT16_T_DECLARED \000"
 14305      5431365F 
 14305      545F4445 
 14305      434C4152 
 14305      45442000 
 14306              	.LASF115:
 14307 144a 5F5F5549 		.ascii	"__UINT_LEAST8_MAX__ 0xff\000"
 14307      4E545F4C 
 14307      45415354 
 14307      385F4D41 
 14307      585F5F20 
 14308              	.LASF1093:
 14309 1463 706F7274 		.ascii	"portYIELD_WITHIN_API portYIELD\000"
 14309      5949454C 
 14309      445F5749 
 14309      5448494E 
 14309      5F415049 
 14310              	.LASF342:
 14311 1482 5F5F5548 		.ascii	"__UHQ_FBIT__ 16\000"
 14311      515F4642 
 14311      49545F5F 
 14311      20313600 
 14312              	.LASF1430:
 14313 1492 70784E65 		.ascii	"pxNewTCB\000"
 14313      77544342 
 14313      00
 14314              	.LASF203:
 14315 149b 5F5F464C 		.ascii	"__FLT64_MIN_EXP__ (-1021)\000"
 14315      5436345F 
 14315      4D494E5F 
 14315      4558505F 
 14315      5F20282D 
 14316              	.LASF894:
 14317 14b5 53495A45 		.ascii	"SIZE_MAX (__SIZE_MAX__)\000"
 14317      5F4D4158 
 14317      20285F5F 
 14317      53495A45 
 14317      5F4D4158 
 14318              	.LASF85:
 14319 14cd 5F5F5054 		.ascii	"__PTRDIFF_WIDTH__ 32\000"
 14319      52444946 
 14319      465F5749 
 14319      4454485F 
 14319      5F203332 
 14320              	.LASF947:
 14321 14e2 636F6E66 		.ascii	"configIP_ADDR3 201\000"
 14321      69674950 
 14321      5F414444 
 14321      52332032 
 14321      303100
ARM GAS  /tmp/ccTV2SzP.s 			page 332


 14322              	.LASF750:
 14323 14f5 5F5F7765 		.ascii	"__weak_reference(sym,alias) __asm__(\".weak \" #ali"
 14323      616B5F72 
 14323      65666572 
 14323      656E6365 
 14323      2873796D 
 14324 1526 6173293B 		.ascii	"as); __asm__(\".equ \" #alias \", \" #sym)\000"
 14324      205F5F61 
 14324      736D5F5F 
 14324      28222E65 
 14324      71752022 
 14325              	.LASF192:
 14326 154d 5F5F464C 		.ascii	"__FLT32_MAX_10_EXP__ 38\000"
 14326      5433325F 
 14326      4D41585F 
 14326      31305F45 
 14326      58505F5F 
 14327              	.LASF1403:
 14328 1565 75785363 		.ascii	"uxSchedulerSuspended\000"
 14328      68656475 
 14328      6C657253 
 14328      75737065 
 14328      6E646564 
 14329              	.LASF131:
 14330 157a 5F5F5549 		.ascii	"__UINT_FAST8_MAX__ 0xffffffffU\000"
 14330      4E545F46 
 14330      41535438 
 14330      5F4D4158 
 14330      5F5F2030 
 14331              	.LASF234:
 14332 1599 5F5F4445 		.ascii	"__DEC32_EPSILON__ 1E-6DF\000"
 14332      4333325F 
 14332      45505349 
 14332      4C4F4E5F 
 14332      5F203145 
 14333              	.LASF672:
 14334 15b2 5F5F6861 		.ascii	"__has_extension __has_feature\000"
 14334      735F6578 
 14334      74656E73 
 14334      696F6E20 
 14334      5F5F6861 
 14335              	.LASF1219:
 14336 15d0 5F5F7763 		.ascii	"__wch\000"
 14336      6800
 14337              	.LASF622:
 14338 15d6 5F524545 		.ascii	"_REENT_CHECK_MP(ptr) \000"
 14338      4E545F43 
 14338      4845434B 
 14338      5F4D5028 
 14338      70747229 
 14339              	.LASF311:
 14340 15ec 5F5F4C41 		.ascii	"__LACCUM_IBIT__ 32\000"
 14340      4343554D 
 14340      5F494249 
 14340      545F5F20 
 14340      333200
 14341              	.LASF521:
ARM GAS  /tmp/ccTV2SzP.s 			page 333


 14342 15ff 5F53495A 		.ascii	"_SIZE_T_DEFINED \000"
 14342      455F545F 
 14342      44454649 
 14342      4E454420 
 14342      00
 14343              	.LASF1432:
 14344 1610 7854696D 		.ascii	"xTimeToWake\000"
 14344      65546F57 
 14344      616B6500 
 14345              	.LASF1111:
 14346 161c 78546173 		.ascii	"xTaskHandle TaskHandle_t\000"
 14346      6B48616E 
 14346      646C6520 
 14346      5461736B 
 14346      48616E64 
 14347              	.LASF437:
 14348 1635 5F5F4E45 		.ascii	"__NEWLIB_H__ 1\000"
 14348      574C4942 
 14348      5F485F5F 
 14348      203100
 14349              	.LASF126:
 14350 1644 5F5F494E 		.ascii	"__INT_FAST16_WIDTH__ 32\000"
 14350      545F4641 
 14350      53543136 
 14350      5F574944 
 14350      54485F5F 
 14351              	.LASF1370:
 14352 165c 75784261 		.ascii	"uxBasePriority\000"
 14352      73655072 
 14352      696F7269 
 14352      747900
 14353              	.LASF413:
 14354 166b 5F5F5646 		.ascii	"__VFP_FP__ 1\000"
 14354      505F4650 
 14354      5F5F2031 
 14354      00
 14355              	.LASF825:
 14356 1678 5F5F4C45 		.ascii	"__LEAST32 \"l\"\000"
 14356      41535433 
 14356      3220226C 
 14356      2200
 14357              	.LASF282:
 14358 1686 5F5F4C4C 		.ascii	"__LLFRACT_MIN__ (-0.5LLR-0.5LLR)\000"
 14358      46524143 
 14358      545F4D49 
 14358      4E5F5F20 
 14358      282D302E 
 14359              	.LASF1383:
 14360 16a7 74736B54 		.ascii	"tskTCB\000"
 14360      434200
 14361              	.LASF1254:
 14362 16ae 5F66696C 		.ascii	"_file\000"
 14362      6500
 14363              	.LASF477:
 14364 16b4 5F5F5241 		.ascii	"__RAND_MAX\000"
 14364      4E445F4D 
 14364      415800
ARM GAS  /tmp/ccTV2SzP.s 			page 334


 14365              	.LASF384:
 14366 16bf 5F5F4743 		.ascii	"__GCC_ATOMIC_POINTER_LOCK_FREE 2\000"
 14366      435F4154 
 14366      4F4D4943 
 14366      5F504F49 
 14366      4E544552 
 14367              	.LASF132:
 14368 16e0 5F5F5549 		.ascii	"__UINT_FAST16_MAX__ 0xffffffffU\000"
 14368      4E545F46 
 14368      41535431 
 14368      365F4D41 
 14368      585F5F20 
 14369              	.LASF876:
 14370 1700 494E545F 		.ascii	"INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)\000"
 14370      4C454153 
 14370      5436345F 
 14370      4D494E20 
 14370      282D5F5F 
 14371              	.LASF1241:
 14372 172b 5F6F6E5F 		.ascii	"_on_exit_args\000"
 14372      65786974 
 14372      5F617267 
 14372      7300
 14373              	.LASF507:
 14374 1739 5F4E4F49 		.ascii	"_NOINLINE_STATIC _NOINLINE static\000"
 14374      4E4C494E 
 14374      455F5354 
 14374      41544943 
 14374      205F4E4F 
 14375              	.LASF135:
 14376 175b 5F5F494E 		.ascii	"__INTPTR_MAX__ 0x7fffffff\000"
 14376      54505452 
 14376      5F4D4158 
 14376      5F5F2030 
 14376      78376666 
 14377              	.LASF968:
 14378 1775 504F5254 		.ascii	"PORTMACRO_H \000"
 14378      4D414352 
 14378      4F5F4820 
 14378      00
 14379              	.LASF666:
 14380 1782 5F5F6174 		.ascii	"__attribute_pure__ \000"
 14380      74726962 
 14380      7574655F 
 14380      70757265 
 14380      5F5F2000 
 14381              	.LASF762:
 14382 1796 5F4E6F6E 		.ascii	"_Nonnull \000"
 14382      6E756C6C 
 14382      2000
 14383              	.LASF1369:
 14384 17a0 75784375 		.ascii	"uxCurrentPriority\000"
 14384      7272656E 
 14384      74507269 
 14384      6F726974 
 14384      7900
 14385              	.LASF233:
ARM GAS  /tmp/ccTV2SzP.s 			page 335


 14386 17b2 5F5F4445 		.ascii	"__DEC32_MAX__ 9.999999E96DF\000"
 14386      4333325F 
 14386      4D41585F 
 14386      5F20392E 
 14386      39393939 
 14387              	.LASF267:
 14388 17ce 5F5F5546 		.ascii	"__UFRACT_MIN__ 0.0UR\000"
 14388      52414354 
 14388      5F4D494E 
 14388      5F5F2030 
 14388      2E305552 
 14389              	.LASF1050:
 14390 17e3 74726163 		.ascii	"traceQUEUE_PEEK(pxQueue) \000"
 14390      65515545 
 14390      55455F50 
 14390      45454B28 
 14390      70785175 
 14391              	.LASF1143:
 14392 17fd 6C697374 		.ascii	"listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( Base"
 14392      49535F43 
 14392      4F4E5441 
 14392      494E4544 
 14392      5F574954 
 14393 1830 545F7420 		.ascii	"T_t ) ( ( pxListItem )->pvContainer == ( void * ) ("
 14393      29202820 
 14393      28207078 
 14393      4C697374 
 14393      4974656D 
 14394 1863 2070784C 		.ascii	" pxList ) ) )\000"
 14394      69737420 
 14394      29202920 
 14394      2900
 14395              	.LASF618:
 14396 1871 5F4E5F4C 		.ascii	"_N_LISTS 30\000"
 14396      49535453 
 14396      20333000 
 14397              	.LASF842:
 14398 187d 5F494E54 		.ascii	"_INTPTR_T_DECLARED \000"
 14398      5054525F 
 14398      545F4445 
 14398      434C4152 
 14398      45442000 
 14399              	.LASF93:
 14400 1891 5F5F5349 		.ascii	"__SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)\000"
 14400      475F4154 
 14400      4F4D4943 
 14400      5F4D494E 
 14400      5F5F2028 
 14401              	.LASF1148:
 14402 18be 74736B4B 		.ascii	"tskKERNEL_VERSION_MINOR 1\000"
 14402      45524E45 
 14402      4C5F5645 
 14402      5253494F 
 14402      4E5F4D49 
 14403              	.LASF227:
 14404 18d8 5F5F464C 		.ascii	"__FLT32X_HAS_INFINITY__ 1\000"
 14404      54333258 
ARM GAS  /tmp/ccTV2SzP.s 			page 336


 14404      5F484153 
 14404      5F494E46 
 14404      494E4954 
 14405              	.LASF885:
 14406 18f2 494E545F 		.ascii	"INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)\000"
 14406      46415354 
 14406      33325F4D 
 14406      494E2028 
 14406      2D5F5F49 
 14407              	.LASF478:
 14408 191b 5F5F5241 		.ascii	"__RAND_MAX 0x7fffffff\000"
 14408      4E445F4D 
 14408      41582030 
 14408      78376666 
 14408      66666666 
 14409              	.LASF630:
 14410 1931 5F524545 		.ascii	"_REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._s"
 14410      4E545F52 
 14410      414E4434 
 14410      385F5345 
 14410      45442870 
 14411 1964 65656429 		.ascii	"eed)\000"
 14411      00
 14412              	.LASF50:
 14413 1969 5F5F5549 		.ascii	"__UINT_LEAST8_TYPE__ unsigned char\000"
 14413      4E545F4C 
 14413      45415354 
 14413      385F5459 
 14413      50455F5F 
 14414              	.LASF747:
 14415 198c 5F5F7374 		.ascii	"__strftimelike(fmtarg,firstvararg) __attribute__((_"
 14415      72667469 
 14415      6D656C69 
 14415      6B652866 
 14415      6D746172 
 14416 19bf 5F666F72 		.ascii	"_format__ (__strftime__, fmtarg, firstvararg)))\000"
 14416      6D61745F 
 14416      5F20285F 
 14416      5F737472 
 14416      6674696D 
 14417              	.LASF1488:
 14418 19ef 75784375 		.ascii	"uxCurrentBasePriority\000"
 14418      7272656E 
 14418      74426173 
 14418      65507269 
 14418      6F726974 
 14419              	.LASF300:
 14420 1a05 5F5F4143 		.ascii	"__ACCUM_FBIT__ 15\000"
 14420      43554D5F 
 14420      46424954 
 14420      5F5F2031 
 14420      3500
 14421              	.LASF457:
 14422 1a17 5F5F474E 		.ascii	"__GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_M"
 14422      55435F50 
 14422      52455245 
 14422      51286D61 
ARM GAS  /tmp/ccTV2SzP.s 			page 337


 14422      6A2C6D69 
 14423 1a4a 494E4F52 		.ascii	"INOR__ >= ((maj) << 16) + (min))\000"
 14423      5F5F203E 
 14423      3D202828 
 14423      6D616A29 
 14423      203C3C20 
 14424              	.LASF969:
 14425 1a6b 706F7274 		.ascii	"portCHAR char\000"
 14425      43484152 
 14425      20636861 
 14425      7200
 14426              	.LASF1312:
 14427 1a79 5F6D6272 		.ascii	"_mbrlen_state\000"
 14427      6C656E5F 
 14427      73746174 
 14427      6500
 14428              	.LASF1328:
 14429 1a87 5461736B 		.ascii	"TaskFunction_t\000"
 14429      46756E63 
 14429      74696F6E 
 14429      5F7400
 14430              	.LASF1150:
 14431 1a96 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( UBaseT_t ) 0U )\000"
 14431      444C455F 
 14431      5052494F 
 14431      52495459 
 14431      20282028 
 14432              	.LASF1385:
 14433 1abb 70784375 		.ascii	"pxCurrentTCB\000"
 14433      7272656E 
 14433      74544342 
 14433      00
 14434              	.LASF1321:
 14435 1ac8 5F696D70 		.ascii	"_impure_ptr\000"
 14435      7572655F 
 14435      70747200 
 14436              	.LASF129:
 14437 1ad4 5F5F494E 		.ascii	"__INT_FAST64_MAX__ 0x7fffffffffffffffLL\000"
 14437      545F4641 
 14437      53543634 
 14437      5F4D4158 
 14437      5F5F2030 
 14438              	.LASF221:
 14439 1afc 5F5F464C 		.ascii	"__FLT32X_DECIMAL_DIG__ 17\000"
 14439      54333258 
 14439      5F444543 
 14439      494D414C 
 14439      5F444947 
 14440              	.LASF1281:
 14441 1b16 5F726573 		.ascii	"_result_k\000"
 14441      756C745F 
 14441      6B00
 14442              	.LASF228:
 14443 1b20 5F5F464C 		.ascii	"__FLT32X_HAS_QUIET_NAN__ 1\000"
 14443      54333258 
 14443      5F484153 
 14443      5F515549 
ARM GAS  /tmp/ccTV2SzP.s 			page 338


 14443      45545F4E 
 14444              	.LASF1013:
 14445 1b3b 636F6E66 		.ascii	"configUSE_TIMERS 0\000"
 14445      69675553 
 14445      455F5449 
 14445      4D455253 
 14445      203000
 14446              	.LASF737:
 14447 1b4e 5F5F6E75 		.ascii	"__null_sentinel __attribute__((__sentinel__))\000"
 14447      6C6C5F73 
 14447      656E7469 
 14447      6E656C20 
 14447      5F5F6174 
 14448              	.LASF224:
 14449 1b7c 5F5F464C 		.ascii	"__FLT32X_EPSILON__ 2.2204460492503131e-16F32x\000"
 14449      54333258 
 14449      5F455053 
 14449      494C4F4E 
 14449      5F5F2032 
 14450              	.LASF575:
 14451 1baa 5F5F5F69 		.ascii	"___int_least16_t_defined 1\000"
 14451      6E745F6C 
 14451      65617374 
 14451      31365F74 
 14451      5F646566 
 14452              	.LASF425:
 14453 1bc5 5F5F4152 		.ascii	"__ARM_ARCH_7M__ 1\000"
 14453      4D5F4152 
 14453      43485F37 
 14453      4D5F5F20 
 14453      3100
 14454              	.LASF244:
 14455 1bd7 5F5F4445 		.ascii	"__DEC128_MIN_EXP__ (-6142)\000"
 14455      43313238 
 14455      5F4D494E 
 14455      5F455850 
 14455      5F5F2028 
 14456              	.LASF1168:
 14457 1bf2 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD ( ( BaseT_t ) 4 )\000"
 14457      4F4D4D41 
 14457      4E445F43 
 14457      48414E47 
 14457      455F5045 
 14458              	.LASF54:
 14459 1c1d 5F5F494E 		.ascii	"__INT_FAST8_TYPE__ int\000"
 14459      545F4641 
 14459      5354385F 
 14459      54595045 
 14459      5F5F2069 
 14460              	.LASF506:
 14461 1c34 5F4E4F49 		.ascii	"_NOINLINE __attribute__ ((__noinline__))\000"
 14461      4E4C494E 
 14461      45205F5F 
 14461      61747472 
 14461      69627574 
 14462              	.LASF362:
 14463 1c5d 5F5F5544 		.ascii	"__UDA_FBIT__ 32\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 339


 14463      415F4642 
 14463      49545F5F 
 14463      20333200 
 14464              	.LASF511:
 14465 1c6d 5F5F7369 		.ascii	"__size_t__ \000"
 14465      7A655F74 
 14465      5F5F2000 
 14466              	.LASF206:
 14467 1c79 5F5F464C 		.ascii	"__FLT64_MAX_10_EXP__ 308\000"
 14467      5436345F 
 14467      4D41585F 
 14467      31305F45 
 14467      58505F5F 
 14468              	.LASF629:
 14469 1c92 5F524545 		.ascii	"_REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_nex"
 14469      4E545F52 
 14469      414E445F 
 14469      4E455854 
 14469      28707472 
 14470 1cc5 742900   		.ascii	"t)\000"
 14471              	.LASF90:
 14472 1cc8 5F5F5549 		.ascii	"__UINTMAX_C(c) c ## ULL\000"
 14472      4E544D41 
 14472      585F4328 
 14472      63292063 
 14472      20232320 
 14473              	.LASF28:
 14474 1ce0 5F5F5349 		.ascii	"__SIZEOF_POINTER__ 4\000"
 14474      5A454F46 
 14474      5F504F49 
 14474      4E544552 
 14474      5F5F2034 
 14475              	.LASF46:
 14476 1cf5 5F5F494E 		.ascii	"__INT_LEAST8_TYPE__ signed char\000"
 14476      545F4C45 
 14476      41535438 
 14476      5F545950 
 14476      455F5F20 
 14477              	.LASF1302:
 14478 1d15 5F6C6F63 		.ascii	"_localtime_buf\000"
 14478      616C7469 
 14478      6D655F62 
 14478      756600
 14479              	.LASF374:
 14480 1d24 5F5F4743 		.ascii	"__GCC_ATOMIC_BOOL_LOCK_FREE 2\000"
 14480      435F4154 
 14480      4F4D4943 
 14480      5F424F4F 
 14480      4C5F4C4F 
 14481              	.LASF1471:
 14482 1d42 78546173 		.ascii	"xTaskGetTickCount\000"
 14482      6B476574 
 14482      5469636B 
 14482      436F756E 
 14482      7400
 14483              	.LASF573:
 14484 1d54 5F5F5F69 		.ascii	"___int64_t_defined 1\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 340


 14484      6E743634 
 14484      5F745F64 
 14484      6566696E 
 14484      65642031 
 14485              	.LASF1174:
 14486 1d69 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD_FROM_ISR ( ( BaseT_t ) 9 )"
 14486      4F4D4D41 
 14486      4E445F43 
 14486      48414E47 
 14486      455F5045 
 14487 1d9c 00       		.ascii	"\000"
 14488              	.LASF1130:
 14489 1d9d 636F6E66 		.ascii	"configLIST_VOLATILE \000"
 14489      69674C49 
 14489      53545F56 
 14489      4F4C4154 
 14489      494C4520 
 14490              	.LASF1031:
 14491 1db2 74726163 		.ascii	"traceTASK_SWITCHED_OUT() \000"
 14491      65544153 
 14491      4B5F5357 
 14491      49544348 
 14491      45445F4F 
 14492              	.LASF421:
 14493 1dcc 5F5F4152 		.ascii	"__ARM_NEON__\000"
 14493      4D5F4E45 
 14493      4F4E5F5F 
 14493      00
 14494              	.LASF854:
 14495 1dd9 55494E54 		.ascii	"UINTPTR_MAX (__UINTPTR_MAX__)\000"
 14495      5054525F 
 14495      4D415820 
 14495      285F5F55 
 14495      494E5450 
 14496              	.LASF191:
 14497 1df7 5F5F464C 		.ascii	"__FLT32_MAX_EXP__ 128\000"
 14497      5433325F 
 14497      4D41585F 
 14497      4558505F 
 14497      5F203132 
 14498              	.LASF291:
 14499 1e0d 5F5F5341 		.ascii	"__SACCUM_IBIT__ 8\000"
 14499      4343554D 
 14499      5F494249 
 14499      545F5F20 
 14499      3800
 14500              	.LASF424:
 14501 1e1f 5F5F5448 		.ascii	"__THUMB_INTERWORK__ 1\000"
 14501      554D425F 
 14501      494E5445 
 14501      52574F52 
 14501      4B5F5F20 
 14502              	.LASF288:
 14503 1e35 5F5F554C 		.ascii	"__ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR\000"
 14503      4C465241 
 14503      43545F4D 
 14503      41585F5F 
ARM GAS  /tmp/ccTV2SzP.s 			page 341


 14503      20305846 
 14504              	.LASF1244:
 14505 1e61 5F666E74 		.ascii	"_fntypes\000"
 14505      79706573 
 14505      00
 14506              	.LASF1152:
 14507 1e6a 7461736B 		.ascii	"taskENTER_CRITICAL() portENTER_CRITICAL()\000"
 14507      454E5445 
 14507      525F4352 
 14507      49544943 
 14507      414C2829 
 14508              	.LASF1109:
 14509 1e94 65546173 		.ascii	"eTaskStateGet eTaskGetState\000"
 14509      6B537461 
 14509      74654765 
 14509      74206554 
 14509      61736B47 
 14510              	.LASF1191:
 14511 1eb0 74736B42 		.ascii	"tskBLOCKED_CHAR ( 'B' )\000"
 14511      4C4F434B 
 14511      45445F43 
 14511      48415220 
 14511      28202742 
 14512              	.LASF1145:
 14513 1ec8 6C697374 		.ascii	"listLIST_IS_INITIALISED(pxList) ( ( pxList )->xList"
 14513      4C495354 
 14513      5F49535F 
 14513      494E4954 
 14513      49414C49 
 14514 1efb 456E642E 		.ascii	"End.xItemValue == portMAX_DELAY )\000"
 14514      78497465 
 14514      6D56616C 
 14514      7565203D 
 14514      3D20706F 
 14515              	.LASF830:
 14516 1f1d 5F5F696E 		.ascii	"__int8_t_defined 1\000"
 14516      74385F74 
 14516      5F646566 
 14516      696E6564 
 14516      203100
 14517              	.LASF218:
 14518 1f30 5F5F464C 		.ascii	"__FLT32X_MIN_10_EXP__ (-307)\000"
 14518      54333258 
 14518      5F4D494E 
 14518      5F31305F 
 14518      4558505F 
 14519              	.LASF523:
 14520 1f4d 5F53495A 		.ascii	"_SIZE_T_DECLARED \000"
 14520      455F545F 
 14520      4445434C 
 14520      41524544 
 14520      2000
 14521              	.LASF808:
 14522 1f5f 63686172 		.ascii	"char +0\000"
 14522      202B3000 
 14523              	.LASF36:
 14524 1f67 5F5F4348 		.ascii	"__CHAR32_TYPE__ long unsigned int\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 342


 14524      41523332 
 14524      5F545950 
 14524      455F5F20 
 14524      6C6F6E67 
 14525              	.LASF419:
 14526 1f89 5F5F4152 		.ascii	"__ARM_FEATURE_FP16_VECTOR_ARITHMETIC\000"
 14526      4D5F4645 
 14526      41545552 
 14526      455F4650 
 14526      31365F56 
 14527              	.LASF741:
 14528 1fae 5F5F7261 		.ascii	"__rangeof(type,start,end) (__offsetof(type, end) - "
 14528      6E67656F 
 14528      66287479 
 14528      70652C73 
 14528      74617274 
 14529 1fe1 5F5F6F66 		.ascii	"__offsetof(type, start))\000"
 14529      66736574 
 14529      6F662874 
 14529      7970652C 
 14529      20737461 
 14530              	.LASF464:
 14531 1ffa 5F504F53 		.ascii	"_POSIX_C_SOURCE 200809L\000"
 14531      49585F43 
 14531      5F534F55 
 14531      52434520 
 14531      32303038 
 14532              	.LASF698:
 14533 2012 5F5F4343 		.ascii	"__CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1\000"
 14533      5F535550 
 14533      504F5254 
 14533      535F4459 
 14533      4E414D49 
 14534              	.LASF133:
 14535 2035 5F5F5549 		.ascii	"__UINT_FAST32_MAX__ 0xffffffffU\000"
 14535      4E545F46 
 14535      41535433 
 14535      325F4D41 
 14535      585F5F20 
 14536              	.LASF1236:
 14537 2055 5F5F746D 		.ascii	"__tm_mon\000"
 14537      5F6D6F6E 
 14537      00
 14538              	.LASF148:
 14539 205e 5F5F464C 		.ascii	"__FLT_MAX_EXP__ 128\000"
 14539      545F4D41 
 14539      585F4558 
 14539      505F5F20 
 14539      31323800 
 14540              	.LASF14:
 14541 2072 5F5F5349 		.ascii	"__SIZEOF_LONG__ 4\000"
 14541      5A454F46 
 14541      5F4C4F4E 
 14541      475F5F20 
 14541      3400
 14542              	.LASF615:
 14543 2084 5F524545 		.ascii	"_REENT_EMERGENCY_SIZE 25\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 343


 14543      4E545F45 
 14543      4D455247 
 14543      454E4359 
 14543      5F53495A 
 14544              	.LASF503:
 14545 209d 5F504152 		.ascii	"_PARAMS(paramlist) paramlist\000"
 14545      414D5328 
 14545      70617261 
 14545      6D6C6973 
 14545      74292070 
 14546              	.LASF746:
 14547 20ba 5F5F7374 		.ascii	"__strfmonlike(fmtarg,firstvararg) __attribute__((__"
 14547      72666D6F 
 14547      6E6C696B 
 14547      6528666D 
 14547      74617267 
 14548 20ed 666F726D 		.ascii	"format__ (__strfmon__, fmtarg, firstvararg)))\000"
 14548      61745F5F 
 14548      20285F5F 
 14548      73747266 
 14548      6D6F6E5F 
 14549              	.LASF1447:
 14550 211b 70785469 		.ascii	"pxTicksToWait\000"
 14550      636B7354 
 14550      6F576169 
 14550      7400
 14551              	.LASF1069:
 14552 2129 74726163 		.ascii	"traceTIMER_CREATE(pxNewTimer) \000"
 14552      6554494D 
 14552      45525F43 
 14552      52454154 
 14552      45287078 
 14553              	.LASF18:
 14554 2148 5F5F5349 		.ascii	"__SIZEOF_DOUBLE__ 8\000"
 14554      5A454F46 
 14554      5F444F55 
 14554      424C455F 
 14554      5F203800 
 14555              	.LASF111:
 14556 215c 5F5F494E 		.ascii	"__INT_LEAST32_WIDTH__ 32\000"
 14556      545F4C45 
 14556      41535433 
 14556      325F5749 
 14556      4454485F 
 14557              	.LASF441:
 14558 2175 5F5F4E45 		.ascii	"__NEWLIB_MINOR__ 5\000"
 14558      574C4942 
 14558      5F4D494E 
 14558      4F525F5F 
 14558      203500
 14559              	.LASF217:
 14560 2188 5F5F464C 		.ascii	"__FLT32X_MIN_EXP__ (-1021)\000"
 14560      54333258 
 14560      5F4D494E 
 14560      5F455850 
 14560      5F5F2028 
 14561              	.LASF1437:
ARM GAS  /tmp/ccTV2SzP.s 			page 344


 14562 21a3 70634E61 		.ascii	"pcName\000"
 14562      6D6500
 14563              	.LASF1193:
 14564 21aa 74736B44 		.ascii	"tskDELETED_CHAR ( 'D' )\000"
 14564      454C4554 
 14564      45445F43 
 14564      48415220 
 14564      28202744 
 14565              	.LASF1004:
 14566 21c2 50524956 		.ascii	"PRIVILEGED_DATA \000"
 14566      494C4547 
 14566      45445F44 
 14566      41544120 
 14566      00
 14567              	.LASF1044:
 14568 21d3 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 14568      6554414B 
 14568      455F4D55 
 14568      5445585F 
 14568      52454355 
 14569              	.LASF820:
 14570 21fe 5F5F4641 		.ascii	"__FAST16 \000"
 14570      53543136 
 14570      2000
 14571              	.LASF1086:
 14572 2208 74726163 		.ascii	"traceEVENT_GROUP_DELETE(xEventGroup) \000"
 14572      65455645 
 14572      4E545F47 
 14572      524F5550 
 14572      5F44454C 
 14573              	.LASF875:
 14574 222e 55494E54 		.ascii	"UINT64_MAX (__UINT64_MAX__)\000"
 14574      36345F4D 
 14574      41582028 
 14574      5F5F5549 
 14574      4E543634 
 14575              	.LASF471:
 14576 224a 5F5F4C41 		.ascii	"__LARGEFILE_VISIBLE 0\000"
 14576      52474546 
 14576      494C455F 
 14576      56495349 
 14576      424C4520 
 14577              	.LASF240:
 14578 2260 5F5F4445 		.ascii	"__DEC64_MAX__ 9.999999999999999E384DD\000"
 14578      4336345F 
 14578      4D41585F 
 14578      5F20392E 
 14578      39393939 
 14579              	.LASF440:
 14580 2286 5F5F4E45 		.ascii	"__NEWLIB__ 2\000"
 14580      574C4942 
 14580      5F5F2032 
 14580      00
 14581              	.LASF547:
 14582 2293 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 14582      20282876 
 14582      6F696420 
ARM GAS  /tmp/ccTV2SzP.s 			page 345


 14582      2A293029 
 14582      00
 14583              	.LASF966:
 14584 22a4 65727251 		.ascii	"errQUEUE_YIELD ( -5 )\000"
 14584      55455545 
 14584      5F594945 
 14584      4C442028 
 14584      202D3520 
 14585              	.LASF757:
 14586 22ba 5F5F5343 		.ascii	"__SCCSID(s) struct __hack\000"
 14586      43534944 
 14586      28732920 
 14586      73747275 
 14586      6374205F 
 14587              	.LASF364:
 14588 22d4 5F5F5554 		.ascii	"__UTA_FBIT__ 64\000"
 14588      415F4642 
 14588      49545F5F 
 14588      20363400 
 14589              	.LASF470:
 14590 22e4 5F5F4953 		.ascii	"__ISO_C_VISIBLE 1999\000"
 14590      4F5F435F 
 14590      56495349 
 14590      424C4520 
 14590      31393939 
 14591              	.LASF150:
 14592 22f9 5F5F464C 		.ascii	"__FLT_DECIMAL_DIG__ 9\000"
 14592      545F4445 
 14592      43494D41 
 14592      4C5F4449 
 14592      475F5F20 
 14593              	.LASF1021:
 14594 230f 706F7274 		.ascii	"portCLEAN_UP_TCB(pxTCB) ( void ) pxTCB\000"
 14594      434C4541 
 14594      4E5F5550 
 14594      5F544342 
 14594      28707854 
 14595              	.LASF1299:
 14596 2336 5F756E75 		.ascii	"_unused_rand\000"
 14596      7365645F 
 14596      72616E64 
 14596      00
 14597              	.LASF1394:
 14598 2343 78537573 		.ascii	"xSuspendedTaskList\000"
 14598      70656E64 
 14598      65645461 
 14598      736B4C69 
 14598      737400
 14599              	.LASF1065:
 14600 2356 74726163 		.ascii	"traceTASK_SUSPEND(pxTaskToSuspend) \000"
 14600      65544153 
 14600      4B5F5355 
 14600      5350454E 
 14600      44287078 
 14601              	.LASF45:
 14602 237a 5F5F5549 		.ascii	"__UINT64_TYPE__ long long unsigned int\000"
 14602      4E543634 
ARM GAS  /tmp/ccTV2SzP.s 			page 346


 14602      5F545950 
 14602      455F5F20 
 14602      6C6F6E67 
 14603              	.LASF1352:
 14604 23a1 65537573 		.ascii	"eSuspended\000"
 14604      70656E64 
 14604      656400
 14605              	.LASF1324:
 14606 23ac 75696E74 		.ascii	"uint8_t\000"
 14606      385F7400 
 14607              	.LASF892:
 14608 23b4 494E544D 		.ascii	"INTMAX_MIN (-INTMAX_MAX - 1)\000"
 14608      41585F4D 
 14608      494E2028 
 14608      2D494E54 
 14608      4D41585F 
 14609              	.LASF1135:
 14610 23d1 6C697374 		.ascii	"listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList) ( ( ( pxLi"
 14610      4745545F 
 14610      4954454D 
 14610      5F56414C 
 14610      55455F4F 
 14611 2404 73742029 		.ascii	"st )->xListEnd ).pxNext->xItemValue )\000"
 14611      2D3E784C 
 14611      69737445 
 14611      6E642029 
 14611      2E70784E 
 14612              	.LASF1444:
 14613 242a 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 14613      736B4765 
 14613      74546173 
 14613      6B4E756D 
 14613      62657200 
 14614              	.LASF663:
 14615 243e 5F5F7074 		.ascii	"__ptr_t void *\000"
 14615      725F7420 
 14615      766F6964 
 14615      202A00
 14616              	.LASF448:
 14617 244d 5F484156 		.ascii	"_HAVE_LONG_DOUBLE 1\000"
 14617      455F4C4F 
 14617      4E475F44 
 14617      4F55424C 
 14617      45203100 
 14618              	.LASF1423:
 14619 2461 70784E65 		.ascii	"pxNextTCB\000"
 14619      78745443 
 14619      4200
 14620              	.LASF726:
 14621 246b 5F5F616C 		.ascii	"__always_inline __attribute__((__always_inline__))\000"
 14621      77617973 
 14621      5F696E6C 
 14621      696E6520 
 14621      5F5F6174 
 14622              	.LASF260:
 14623 249e 5F5F4652 		.ascii	"__FRACT_FBIT__ 15\000"
 14623      4143545F 
ARM GAS  /tmp/ccTV2SzP.s 			page 347


 14623      46424954 
 14623      5F5F2031 
 14623      3500
 14624              	.LASF920:
 14625 24b0 636F6E66 		.ascii	"configTICK_RATE_HZ ( ( portTickType ) 1200 )\000"
 14625      69675449 
 14625      434B5F52 
 14625      4154455F 
 14625      485A2028 
 14626              	.LASF324:
 14627 24dd 5F5F4C4C 		.ascii	"__LLACCUM_EPSILON__ 0x1P-31LLK\000"
 14627      41434355 
 14627      4D5F4550 
 14627      53494C4F 
 14627      4E5F5F20 
 14628              	.LASF4:
 14629 24fc 5F5F474E 		.ascii	"__GNUC_PATCHLEVEL__ 0\000"
 14629      55435F50 
 14629      41544348 
 14629      4C455645 
 14629      4C5F5F20 
 14630              	.LASF377:
 14631 2512 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR32_T_LOCK_FREE 2\000"
 14631      435F4154 
 14631      4F4D4943 
 14631      5F434841 
 14631      5233325F 
 14632              	.LASF716:
 14633 2534 5F5F616C 		.ascii	"__alloc_align(x) __attribute__((__alloc_align__(x))"
 14633      6C6F635F 
 14633      616C6967 
 14633      6E287829 
 14633      205F5F61 
 14634 2567 2900     		.ascii	")\000"
 14635              	.LASF117:
 14636 2569 5F5F5549 		.ascii	"__UINT_LEAST16_MAX__ 0xffff\000"
 14636      4E545F4C 
 14636      45415354 
 14636      31365F4D 
 14636      41585F5F 
 14637              	.LASF1098:
 14638 2585 636F6E66 		.ascii	"configPRE_SLEEP_PROCESSING(x) \000"
 14638      69675052 
 14638      455F534C 
 14638      4545505F 
 14638      50524F43 
 14639              	.LASF877:
 14640 25a4 494E545F 		.ascii	"INT_LEAST64_MAX (__INT_LEAST64_MAX__)\000"
 14640      4C454153 
 14640      5436345F 
 14640      4D415820 
 14640      285F5F49 
 14641              	.LASF1261:
 14642 25ca 5F756275 		.ascii	"_ubuf\000"
 14642      6600
 14643              	.LASF634:
 14644 25d0 5F524545 		.ascii	"_REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 348


 14644      4E545F4D 
 14644      505F5245 
 14644      53554C54 
 14644      5F4B2870 
 14645              	.LASF1043:
 14646 25fb 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE(pxMutex) \000"
 14646      6554414B 
 14646      455F4D55 
 14646      5445585F 
 14646      52454355 
 14647              	.LASF499:
 14648 261f 5F444546 		.ascii	"_DEFUN(name,arglist,args) name(args)\000"
 14648      554E286E 
 14648      616D652C 
 14648      6172676C 
 14648      6973742C 
 14649              	.LASF735:
 14650 2644 5F5F7072 		.ascii	"__predict_true(exp) __builtin_expect((exp), 1)\000"
 14650      65646963 
 14650      745F7472 
 14650      75652865 
 14650      78702920 
 14651              	.LASF1037:
 14652 2673 74726163 		.ascii	"traceQUEUE_CREATE(pxNewQueue) \000"
 14652      65515545 
 14652      55455F43 
 14652      52454154 
 14652      45287078 
 14653              	.LASF320:
 14654 2692 5F5F4C4C 		.ascii	"__LLACCUM_FBIT__ 31\000"
 14654      41434355 
 14654      4D5F4642 
 14654      49545F5F 
 14654      20333100 
 14655              	.LASF648:
 14656 26a6 5F524545 		.ascii	"_REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wc"
 14656      4E545F57 
 14656      43535254 
 14656      4F4D4253 
 14656      5F535441 
 14657 26d9 7372746F 		.ascii	"srtombs_state)\000"
 14657      6D62735F 
 14657      73746174 
 14657      652900
 14658              	.LASF145:
 14659 26e8 5F5F464C 		.ascii	"__FLT_DIG__ 6\000"
 14659      545F4449 
 14659      475F5F20 
 14659      3600
 14660              	.LASF923:
 14661 26f6 636F6E66 		.ascii	"configMAX_TASK_NAME_LEN ( 12 )\000"
 14661      69674D41 
 14661      585F5441 
 14661      534B5F4E 
 14661      414D455F 
 14662              	.LASF1045:
 14663 2715 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE() \000"
ARM GAS  /tmp/ccTV2SzP.s 			page 349


 14663      65435245 
 14663      4154455F 
 14663      434F554E 
 14663      54494E47 
 14664              	.LASF937:
 14665 2737 494E434C 		.ascii	"INCLUDE_uxTaskPriorityGet 1\000"
 14665      5544455F 
 14665      75785461 
 14665      736B5072 
 14665      696F7269 
 14666              	.LASF667:
 14667 2753 5F5F6174 		.ascii	"__attribute_format_strfmon__(a,b) \000"
 14667      74726962 
 14667      7574655F 
 14667      666F726D 
 14667      61745F73 
 14668              	.LASF522:
 14669 2776 5F425344 		.ascii	"_BSD_SIZE_T_DEFINED_ \000"
 14669      5F53495A 
 14669      455F545F 
 14669      44454649 
 14669      4E45445F 
 14670              	.LASF1436:
 14671 278c 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 14671      6E697469 
 14671      616C6973 
 14671      65544342 
 14671      56617269 
 14672              	.LASF60:
 14673 27a6 5F5F5549 		.ascii	"__UINT_FAST32_TYPE__ unsigned int\000"
 14673      4E545F46 
 14673      41535433 
 14673      325F5459 
 14673      50455F5F 
 14674              	.LASF1439:
 14675 27c8 70727649 		.ascii	"prvIdleTask\000"
 14675      646C6554 
 14675      61736B00 
 14676              	.LASF1401:
 14677 27d4 784E756D 		.ascii	"xNumOfOverflows\000"
 14677      4F664F76 
 14677      6572666C 
 14677      6F777300 
 14678              	.LASF17:
 14679 27e4 5F5F5349 		.ascii	"__SIZEOF_FLOAT__ 4\000"
 14679      5A454F46 
 14679      5F464C4F 
 14679      41545F5F 
 14679      203400
 14680              	.LASF225:
 14681 27f7 5F5F464C 		.ascii	"__FLT32X_DENORM_MIN__ 4.9406564584124654e-324F32x\000"
 14681      54333258 
 14681      5F44454E 
 14681      4F524D5F 
 14681      4D494E5F 
 14682              	.LASF690:
 14683 2829 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_RELOPS \000"
ARM GAS  /tmp/ccTV2SzP.s 			page 350


 14683      55434C49 
 14683      4B455F4D 
 14683      4154485F 
 14683      4255494C 
 14684              	.LASF149:
 14685 2849 5F5F464C 		.ascii	"__FLT_MAX_10_EXP__ 38\000"
 14685      545F4D41 
 14685      585F3130 
 14685      5F455850 
 14685      5F5F2033 
 14686              	.LASF659:
 14687 285f 5F5F504D 		.ascii	"__PMT(args) args\000"
 14687      54286172 
 14687      67732920 
 14687      61726773 
 14687      00
 14688              	.LASF247:
 14689 2870 5F5F4445 		.ascii	"__DEC128_MAX__ 9.999999999999999999999999999999999E"
 14689      43313238 
 14689      5F4D4158 
 14689      5F5F2039 
 14689      2E393939 
 14690 28a3 36313434 		.ascii	"6144DL\000"
 14690      444C00
 14691              	.LASF245:
 14692 28aa 5F5F4445 		.ascii	"__DEC128_MAX_EXP__ 6145\000"
 14692      43313238 
 14692      5F4D4158 
 14692      5F455850 
 14692      5F5F2036 
 14693              	.LASF138:
 14694 28c2 5F5F4743 		.ascii	"__GCC_IEC_559 0\000"
 14694      435F4945 
 14694      435F3535 
 14694      39203000 
 14695              	.LASF1033:
 14696 28d2 74726163 		.ascii	"traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,ux"
 14696      65544153 
 14696      4B5F5052 
 14696      494F5249 
 14696      54595F44 
 14697 2905 4F726967 		.ascii	"OriginalPriority) \000"
 14697      696E616C 
 14697      5072696F 
 14697      72697479 
 14697      292000
 14698              	.LASF1041:
 14699 2918 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE(pxMutex) \000"
 14699      65474956 
 14699      455F4D55 
 14699      5445585F 
 14699      52454355 
 14700              	.LASF640:
 14701 293c 5F524545 		.ascii	"_REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok"
 14701      4E545F53 
 14701      5452544F 
 14701      4B5F4C41 
ARM GAS  /tmp/ccTV2SzP.s 			page 351


 14701      53542870 
 14702 296f 5F6C6173 		.ascii	"_last)\000"
 14702      742900
 14703              	.LASF1180:
 14704 2976 7854696D 		.ascii	"xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken"
 14704      65725374 
 14704      61727446 
 14704      726F6D49 
 14704      53522878 
 14705 29a9 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STAR"
 14705      696D6572 
 14705      47656E65 
 14705      72696343 
 14705      6F6D6D61 
 14706 29dc 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 14706      4F4D5F49 
 14706      53522C20 
 14706      28207854 
 14706      61736B47 
 14707 2a0f 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 14707      72696F72 
 14707      69747954 
 14707      61736B57 
 14707      6F6B656E 
 14708              	.LASF127:
 14709 2a2c 5F5F494E 		.ascii	"__INT_FAST32_MAX__ 0x7fffffff\000"
 14709      545F4641 
 14709      53543332 
 14709      5F4D4158 
 14709      5F5F2030 
 14710              	.LASF7:
 14711 2a4a 5F5F4154 		.ascii	"__ATOMIC_SEQ_CST 5\000"
 14711      4F4D4943 
 14711      5F534551 
 14711      5F435354 
 14711      203500
 14712              	.LASF481:
 14713 2a5d 5F524541 		.ascii	"_READ_WRITE_RETURN_TYPE int\000"
 14713      445F5752 
 14713      4954455F 
 14713      52455455 
 14713      524E5F54 
 14714              	.LASF1156:
 14715 2a79 7461736B 		.ascii	"taskSCHEDULER_SUSPENDED ( ( BaseT_t ) 0 )\000"
 14715      53434845 
 14715      44554C45 
 14715      525F5355 
 14715      5350454E 
 14716              	.LASF1276:
 14717 2aa3 5F756E73 		.ascii	"_unspecified_locale_info\000"
 14717      70656369 
 14717      66696564 
 14717      5F6C6F63 
 14717      616C655F 
 14718              	.LASF1408:
 14719 2abc 78526574 		.ascii	"xReturn\000"
 14719      75726E00 
ARM GAS  /tmp/ccTV2SzP.s 			page 352


 14720              	.LASF753:
 14721 2ac4 5F5F7379 		.ascii	"__sym_default(sym,impl,verid) __asm__(\".symver \" "
 14721      6D5F6465 
 14721      6661756C 
 14721      74287379 
 14721      6D2C696D 
 14722 2af5 23696D70 		.ascii	"#impl \", \" #sym \"@@\" #verid)\000"
 14722      6C20222C 
 14722      20222023 
 14722      73796D20 
 14722      22404022 
 14723              	.LASF880:
 14724 2b12 494E545F 		.ascii	"INT_FAST8_MAX (__INT_FAST8_MAX__)\000"
 14724      46415354 
 14724      385F4D41 
 14724      5820285F 
 14724      5F494E54 
 14725              	.LASF1269:
 14726 2b34 5F726565 		.ascii	"_reent\000"
 14726      6E7400
 14727              	.LASF100:
 14728 2b3b 5F5F5549 		.ascii	"__UINT16_MAX__ 0xffff\000"
 14728      4E543136 
 14728      5F4D4158 
 14728      5F5F2030 
 14728      78666666 
 14729              	.LASF1411:
 14730 2b51 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 14730      65736574 
 14730      4E657874 
 14730      5461736B 
 14730      556E626C 
 14731              	.LASF338:
 14732 2b6d 5F5F5451 		.ascii	"__TQ_FBIT__ 127\000"
 14732      5F464249 
 14732      545F5F20 
 14732      31323700 
 14733              	.LASF982:
 14734 2b7d 706F7274 		.ascii	"portYIELD() vPortYield()\000"
 14734      5949454C 
 14734      44282920 
 14734      76506F72 
 14734      74596965 
 14735              	.LASF1022:
 14736 2b96 706F7274 		.ascii	"portPRE_TASK_DELETE_HOOK(pvTaskToDelete,pxYieldPend"
 14736      5052455F 
 14736      5441534B 
 14736      5F44454C 
 14736      4554455F 
 14737 2bc9 696E6729 		.ascii	"ing) \000"
 14737      2000
 14738              	.LASF176:
 14739 2bcf 5F5F4C44 		.ascii	"__LDBL_MAX_EXP__ 1024\000"
 14739      424C5F4D 
 14739      41585F45 
 14739      58505F5F 
 14739      20313032 
ARM GAS  /tmp/ccTV2SzP.s 			page 353


 14740              	.LASF249:
 14741 2be5 5F5F4445 		.ascii	"__DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000"
 14741      43313238 
 14741      5F535542 
 14741      4E4F524D 
 14741      414C5F4D 
 14742 2c18 30303030 		.ascii	"000000001E-6143DL\000"
 14742      30303030 
 14742      31452D36 
 14742      31343344 
 14742      4C00
 14743              	.LASF671:
 14744 2c2a 5F5F7074 		.ascii	"__ptrvalue \000"
 14744      7276616C 
 14744      75652000 
 14745              	.LASF851:
 14746 2c36 5F5F696E 		.ascii	"__int_fast64_t_defined 1\000"
 14746      745F6661 
 14746      73743634 
 14746      5F745F64 
 14746      6566696E 
 14747              	.LASF717:
 14748 2c4f 5F416C69 		.ascii	"_Alignas(x) __aligned(x)\000"
 14748      676E6173 
 14748      28782920 
 14748      5F5F616C 
 14748      69676E65 
 14749              	.LASF1357:
 14750 2c68 7854696D 		.ascii	"xTimeOnEntering\000"
 14750      654F6E45 
 14750      6E746572 
 14750      696E6700 
 14751              	.LASF1399:
 14752 2c78 75785065 		.ascii	"uxPendedTicks\000"
 14752      6E646564 
 14752      5469636B 
 14752      7300
 14753              	.LASF971:
 14754 2c86 706F7274 		.ascii	"portDOUBLE double\000"
 14754      444F5542 
 14754      4C452064 
 14754      6F75626C 
 14754      6500
 14755              	.LASF491:
 14756 2c98 5F564F4C 		.ascii	"_VOLATILE volatile\000"
 14756      4154494C 
 14756      4520766F 
 14756      6C617469 
 14756      6C6500
 14757              	.LASF16:
 14758 2cab 5F5F5349 		.ascii	"__SIZEOF_SHORT__ 2\000"
 14758      5A454F46 
 14758      5F53484F 
 14758      52545F5F 
 14758      203200
 14759              	.LASF699:
 14760 2cbe 5F5F5028 		.ascii	"__P(protos) protos\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 354


 14760      70726F74 
 14760      6F732920 
 14760      70726F74 
 14760      6F7300
 14761              	.LASF1320:
 14762 2cd1 5F756E75 		.ascii	"_unused\000"
 14762      73656400 
 14763              	.LASF498:
 14764 2cd9 5F455846 		.ascii	"_EXFNPTR(name,proto) (* name) proto\000"
 14764      4E505452 
 14764      286E616D 
 14764      652C7072 
 14764      6F746F29 
 14765              	.LASF598:
 14766 2cfd 5F434C4F 		.ascii	"_CLOCK_T_ unsigned long\000"
 14766      434B5F54 
 14766      5F20756E 
 14766      7369676E 
 14766      6564206C 
 14767              	.LASF624:
 14768 2d15 5F524545 		.ascii	"_REENT_CHECK_ASCTIME_BUF(ptr) \000"
 14768      4E545F43 
 14768      4845434B 
 14768      5F415343 
 14768      54494D45 
 14769              	.LASF152:
 14770 2d34 5F5F464C 		.ascii	"__FLT_MIN__ 1.1754943508222875e-38F\000"
 14770      545F4D49 
 14770      4E5F5F20 
 14770      312E3137 
 14770      35343934 
 14771              	.LASF314:
 14772 2d58 5F5F4C41 		.ascii	"__LACCUM_EPSILON__ 0x1P-31LK\000"
 14772      4343554D 
 14772      5F455053 
 14772      494C4F4E 
 14772      5F5F2030 
 14773              	.LASF1345:
 14774 2d75 7078496E 		.ascii	"pxIndex\000"
 14774      64657800 
 14775              	.LASF1375:
 14776 2d7d 7078546F 		.ascii	"pxTopOfStack\000"
 14776      704F6653 
 14776      7461636B 
 14776      00
 14777              	.LASF1274:
 14778 2d8a 5F696E63 		.ascii	"_inc\000"
 14778      00
 14779              	.LASF784:
 14780 2d8f 5F4D4143 		.ascii	"_MACHSTDLIB_H_ \000"
 14780      48535444 
 14780      4C49425F 
 14780      485F2000 
 14781              	.LASF1159:
 14782 2d9f 78546173 		.ascii	"xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParame"
 14782      6B437265 
 14782      61746528 
ARM GAS  /tmp/ccTV2SzP.s 			page 355


 14782      70765461 
 14782      736B436F 
 14783 2dd2 74657273 		.ascii	"ters,uxPriority,pxCreatedTask) xTaskGenericCreate( "
 14783      2C757850 
 14783      72696F72 
 14783      6974792C 
 14783      70784372 
 14784 2e05 28207076 		.ascii	"( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvP"
 14784      5461736B 
 14784      436F6465 
 14784      20292C20 
 14784      28207063 
 14785 2e38 6172616D 		.ascii	"arameters ), ( uxPriority ), ( pxCreatedTask ), ( N"
 14785      65746572 
 14785      7320292C 
 14785      20282075 
 14785      78507269 
 14786 2e6b 554C4C20 		.ascii	"ULL ), ( NULL ) )\000"
 14786      292C2028 
 14786      204E554C 
 14786      4C202920 
 14786      2900
 14787              	.LASF1099:
 14788 2e7d 636F6E66 		.ascii	"configPOST_SLEEP_PROCESSING(x) \000"
 14788      6967504F 
 14788      53545F53 
 14788      4C454550 
 14788      5F50524F 
 14789              	.LASF1427:
 14790 2e9d 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 14790      6C6C6F63 
 14790      61746554 
 14790      4342416E 
 14790      64537461 
 14791              	.LASF19:
 14792 2eb4 5F5F5349 		.ascii	"__SIZEOF_LONG_DOUBLE__ 8\000"
 14792      5A454F46 
 14792      5F4C4F4E 
 14792      475F444F 
 14792      55424C45 
 14793              	.LASF1398:
 14794 2ecd 78536368 		.ascii	"xSchedulerRunning\000"
 14794      6564756C 
 14794      65725275 
 14794      6E6E696E 
 14794      6700
 14795              	.LASF386:
 14796 2edf 5F5F5052 		.ascii	"__PRAGMA_REDEFINE_EXTNAME 1\000"
 14796      41474D41 
 14796      5F524544 
 14796      4546494E 
 14796      455F4558 
 14797              	.LASF1483:
 14798 2efb 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 14798      61736B49 
 14798      73546173 
 14798      6B537573 
ARM GAS  /tmp/ccTV2SzP.s 			page 356


 14798      70656E64 
 14799              	.LASF1117:
 14800 2f12 784D656D 		.ascii	"xMemoryRegion MemoryRegion_t\000"
 14800      6F727952 
 14800      6567696F 
 14800      6E204D65 
 14800      6D6F7279 
 14801              	.LASF967:
 14802 2f2f 504F5254 		.ascii	"PORTABLE_H \000"
 14802      41424C45 
 14802      5F482000 
 14803              	.LASF1453:
 14804 2f3b 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 14804      6B52656D 
 14804      6F766546 
 14804      726F6D45 
 14804      76656E74 
 14805              	.LASF361:
 14806 2f54 5F5F5553 		.ascii	"__USA_IBIT__ 16\000"
 14806      415F4942 
 14806      49545F5F 
 14806      20313600 
 14807              	.LASF1176:
 14808 2f64 7854696D 		.ascii	"xTimerStop(xTimer,xTicksToWait) xTimerGenericComman"
 14808      65725374 
 14808      6F702878 
 14808      54696D65 
 14808      722C7854 
 14809 2f97 64282028 		.ascii	"d( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksT"
 14809      20785469 
 14809      6D657220 
 14809      292C2074 
 14809      6D72434F 
 14810 2fca 6F576169 		.ascii	"oWait ) )\000"
 14810      74202920 
 14810      2900
 14811              	.LASF372:
 14812 2fd4 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1\000"
 14812      435F4841 
 14812      56455F53 
 14812      594E435F 
 14812      434F4D50 
 14813              	.LASF911:
 14814 2ff9 494E544D 		.ascii	"INTMAX_C(x) __INTMAX_C(x)\000"
 14814      41585F43 
 14814      28782920 
 14814      5F5F494E 
 14814      544D4158 
 14815              	.LASF509:
 14816 3013 5F5F6E65 		.ascii	"__need_wchar_t \000"
 14816      65645F77 
 14816      63686172 
 14816      5F742000 
 14817              	.LASF739:
 14818 3023 5F5F6869 		.ascii	"__hidden __attribute__((__visibility__(\"hidden\"))"
 14818      6464656E 
 14818      205F5F61 
ARM GAS  /tmp/ccTV2SzP.s 			page 357


 14818      74747269 
 14818      62757465 
 14819 3054 2900     		.ascii	")\000"
 14820              	.LASF871:
 14821 3056 494E545F 		.ascii	"INT_LEAST32_MAX (__INT_LEAST32_MAX__)\000"
 14821      4C454153 
 14821      5433325F 
 14821      4D415820 
 14821      285F5F49 
 14822              	.LASF1248:
 14823 307c 5F666E73 		.ascii	"_fns\000"
 14823      00
 14824              	.LASF1010:
 14825 3081 494E434C 		.ascii	"INCLUDE_pcTaskGetTaskName 0\000"
 14825      5544455F 
 14825      70635461 
 14825      736B4765 
 14825      74546173 
 14826              	.LASF1500:
 14827 309d 70785461 		.ascii	"pxTaskCode\000"
 14827      736B436F 
 14827      646500
 14828              	.LASF61:
 14829 30a8 5F5F5549 		.ascii	"__UINT_FAST64_TYPE__ long long unsigned int\000"
 14829      4E545F46 
 14829      41535436 
 14829      345F5459 
 14829      50455F5F 
 14830              	.LASF1341:
 14831 30d4 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 14831      495F4C49 
 14831      53545F49 
 14831      54454D00 
 14832              	.LASF1001:
 14833 30e4 706F7274 		.ascii	"portNUM_CONFIGURABLE_REGIONS 1\000"
 14833      4E554D5F 
 14833      434F4E46 
 14833      49475552 
 14833      41424C45 
 14834              	.LASF645:
 14835 3103 5F524545 		.ascii	"_REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrt"
 14835      4E545F4D 
 14835      4252544F 
 14835      57435F53 
 14835      54415445 
 14836 3136 6F77635F 		.ascii	"owc_state)\000"
 14836      73746174 
 14836      652900
 14837              	.LASF596:
 14838 3141 5F57494E 		.ascii	"_WINT_T \000"
 14838      545F5420 
 14838      00
 14839              	.LASF917:
 14840 314a 636F6E66 		.ascii	"configMAX_PRIORITIES ( 8 )\000"
 14840      69674D41 
 14840      585F5052 
 14840      494F5249 
ARM GAS  /tmp/ccTV2SzP.s 			page 358


 14840      54494553 
 14841              	.LASF229:
 14842 3165 5F5F4445 		.ascii	"__DEC32_MANT_DIG__ 7\000"
 14842      4333325F 
 14842      4D414E54 
 14842      5F444947 
 14842      5F5F2037 
 14843              	.LASF1260:
 14844 317a 5F636C6F 		.ascii	"_close\000"
 14844      736500
 14845              	.LASF1417:
 14846 3181 756C436F 		.ascii	"ulCount\000"
 14846      756E7400 
 14847              	.LASF350:
 14848 3189 5F5F4841 		.ascii	"__HA_FBIT__ 7\000"
 14848      5F464249 
 14848      545F5F20 
 14848      3700
 14849              	.LASF1317:
 14850 3197 5F685F65 		.ascii	"_h_errno\000"
 14850      72726E6F 
 14850      00
 14851              	.LASF899:
 14852 31a0 57434841 		.ascii	"WCHAR_MIN (__WCHAR_MIN__)\000"
 14852      525F4D49 
 14852      4E20285F 
 14852      5F574348 
 14852      41525F4D 
 14853              	.LASF806:
 14854 31ba 7369676E 		.ascii	"signed +0\000"
 14854      6564202B 
 14854      3000
 14855              	.LASF896:
 14856 31c4 5349475F 		.ascii	"SIG_ATOMIC_MAX (__STDINT_EXP(INT_MAX))\000"
 14856      41544F4D 
 14856      49435F4D 
 14856      41582028 
 14856      5F5F5354 
 14857              	.LASF727:
 14858 31eb 5F5F6E6F 		.ascii	"__noinline __attribute__ ((__noinline__))\000"
 14858      696E6C69 
 14858      6E65205F 
 14858      5F617474 
 14858      72696275 
 14859              	.LASF972:
 14860 3215 706F7274 		.ascii	"portLONG long\000"
 14860      4C4F4E47 
 14860      206C6F6E 
 14860      6700
 14861              	.LASF1197:
 14862 3223 7461736B 		.ascii	"taskRESET_READY_PRIORITY(uxPriority) { if( listCURR"
 14862      52455345 
 14862      545F5245 
 14862      4144595F 
 14862      5052494F 
 14863 3256 454E545F 		.ascii	"ENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority"
 14863      4C495354 
ARM GAS  /tmp/ccTV2SzP.s 			page 359


 14863      5F4C454E 
 14863      47544828 
 14863      20262820 
 14864 3289 2029205D 		.ascii	" ) ] ) ) == ( UBaseT_t ) 0 ) { portRESET_READY_PRIO"
 14864      20292029 
 14864      203D3D20 
 14864      28205542 
 14864      61736554 
 14865 32bc 52495459 		.ascii	"RITY( ( uxPriority ), ( uxTopReadyPriority ) ); } }"
 14865      28202820 
 14865      75785072 
 14865      696F7269 
 14865      74792029 
 14866 32ef 00       		.ascii	"\000"
 14867              	.LASF887:
 14868 32f0 55494E54 		.ascii	"UINT_FAST32_MAX (__UINT_FAST32_MAX__)\000"
 14868      5F464153 
 14868      5433325F 
 14868      4D415820 
 14868      285F5F55 
 14869              	.LASF588:
 14870 3316 5F5F6C6F 		.ascii	"__lock_try_acquire(lock) (_CAST_VOID 0)\000"
 14870      636B5F74 
 14870      72795F61 
 14870      63717569 
 14870      7265286C 
 14871              	.LASF1075:
 14872 333e 74726163 		.ascii	"traceFREE(pvAddress,uiSize) \000"
 14872      65465245 
 14872      45287076 
 14872      41646472 
 14872      6573732C 
 14873              	.LASF795:
 14874 335b 5F584C4F 		.ascii	"_XLOCALE_H \000"
 14874      43414C45 
 14874      5F482000 
 14875              	.LASF256:
 14876 3367 5F5F5553 		.ascii	"__USFRACT_IBIT__ 0\000"
 14876      46524143 
 14876      545F4942 
 14876      49545F5F 
 14876      203000
 14877              	.LASF1208:
 14878 337a 5F5F7569 		.ascii	"__uint16_t\000"
 14878      6E743136 
 14878      5F7400
 14879              	.LASF707:
 14880 3385 5F5F7765 		.ascii	"__weak_symbol __attribute__((__weak__))\000"
 14880      616B5F73 
 14880      796D626F 
 14880      6C205F5F 
 14880      61747472 
 14881              	.LASF1012:
 14882 33ad 494E434C 		.ascii	"INCLUDE_eTaskGetState 0\000"
 14882      5544455F 
 14882      65546173 
 14882      6B476574 
ARM GAS  /tmp/ccTV2SzP.s 			page 360


 14882      53746174 
 14883              	.LASF257:
 14884 33c5 5F5F5553 		.ascii	"__USFRACT_MIN__ 0.0UHR\000"
 14884      46524143 
 14884      545F4D49 
 14884      4E5F5F20 
 14884      302E3055 
 14885              	.LASF711:
 14886 33dc 5F5F7573 		.ascii	"__used __attribute__((__used__))\000"
 14886      6564205F 
 14886      5F617474 
 14886      72696275 
 14886      74655F5F 
 14887              	.LASF422:
 14888 33fd 5F5F4152 		.ascii	"__ARM_NEON\000"
 14888      4D5F4E45 
 14888      4F4E00
 14889              	.LASF510:
 14890 3408 5F5F6E65 		.ascii	"__need_NULL \000"
 14890      65645F4E 
 14890      554C4C20 
 14890      00
 14891              	.LASF1229:
 14892 3415 5F776473 		.ascii	"_wds\000"
 14892      00
 14893              	.LASF99:
 14894 341a 5F5F5549 		.ascii	"__UINT8_MAX__ 0xff\000"
 14894      4E54385F 
 14894      4D41585F 
 14894      5F203078 
 14894      666600
 14895              	.LASF571:
 14896 342d 5F5F5F69 		.ascii	"___int16_t_defined 1\000"
 14896      6E743136 
 14896      5F745F64 
 14896      6566696E 
 14896      65642031 
 14897              	.LASF655:
 14898 3442 5F524545 		.ascii	"_REENT _impure_ptr\000"
 14898      4E54205F 
 14898      696D7075 
 14898      72655F70 
 14898      747200
 14899              	.LASF1358:
 14900 3455 54696D65 		.ascii	"TimeOut_t\000"
 14900      4F75745F 
 14900      7400
 14901              	.LASF1038:
 14902 345f 74726163 		.ascii	"traceQUEUE_CREATE_FAILED(ucQueueType) \000"
 14902      65515545 
 14902      55455F43 
 14902      52454154 
 14902      455F4641 
 14903              	.LASF174:
 14904 3486 5F5F4C44 		.ascii	"__LDBL_MIN_EXP__ (-1021)\000"
 14904      424C5F4D 
 14904      494E5F45 
ARM GAS  /tmp/ccTV2SzP.s 			page 361


 14904      58505F5F 
 14904      20282D31 
 14905              	.LASF1271:
 14906 349f 5F737464 		.ascii	"_stdin\000"
 14906      696E00
 14907              	.LASF497:
 14908 34a6 5F455850 		.ascii	"_EXPARM(name,proto) (* name) proto\000"
 14908      41524D28 
 14908      6E616D65 
 14908      2C70726F 
 14908      746F2920 
 14909              	.LASF513:
 14910 34c9 5F53495A 		.ascii	"_SIZE_T \000"
 14910      455F5420 
 14910      00
 14911              	.LASF169:
 14912 34d2 5F5F4442 		.ascii	"__DBL_HAS_DENORM__ 1\000"
 14912      4C5F4841 
 14912      535F4445 
 14912      4E4F524D 
 14912      5F5F2031 
 14913              	.LASF1198:
 14914 34e7 7461736B 		.ascii	"taskSWITCH_DELAYED_LISTS() { List_t *pxTemp; config"
 14914      53574954 
 14914      43485F44 
 14914      454C4159 
 14914      45445F4C 
 14915 351a 41535345 		.ascii	"ASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) "
 14915      52542820 
 14915      28206C69 
 14915      73744C49 
 14915      53545F49 
 14916 354d 293B2070 		.ascii	"); pxTemp = pxDelayedTaskList; pxDelayedTaskList = "
 14916      7854656D 
 14916      70203D20 
 14916      70784465 
 14916      6C617965 
 14917 3580 70784F76 		.ascii	"pxOverflowDelayedTaskList; pxOverflowDelayedTaskLis"
 14917      6572666C 
 14917      6F774465 
 14917      6C617965 
 14917      64546173 
 14918 35b3 74203D20 		.ascii	"t = pxTemp; xNumOfOverflows++; prvResetNextTaskUnbl"
 14918      70785465 
 14918      6D703B20 
 14918      784E756D 
 14918      4F664F76 
 14919 35e6 6F636B54 		.ascii	"ockTime(); }\000"
 14919      696D6528 
 14919      293B207D 
 14919      00
 14920              	.LASF693:
 14921 35f3 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE 1\000"
 14921      5F535550 
 14921      504F5254 
 14921      535F5F5F 
 14921      494E4C49 
ARM GAS  /tmp/ccTV2SzP.s 			page 362


 14922              	.LASF445:
 14923 360c 5F4D425F 		.ascii	"_MB_LEN_MAX 1\000"
 14923      4C454E5F 
 14923      4D415820 
 14923      3100
 14924              	.LASF604:
 14925 361a 5F415445 		.ascii	"_ATEXIT_SIZE 32\000"
 14925      5849545F 
 14925      53495A45 
 14925      20333200 
 14926              	.LASF868:
 14927 362a 494E5433 		.ascii	"INT32_MAX (__INT32_MAX__)\000"
 14927      325F4D41 
 14927      5820285F 
 14927      5F494E54 
 14927      33325F4D 
 14928              	.LASF1497:
 14929 3644 76546173 		.ascii	"vTaskDelete\000"
 14929      6B44656C 
 14929      65746500 
 14930              	.LASF1402:
 14931 3650 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 14931      74546173 
 14931      6B556E62 
 14931      6C6F636B 
 14931      54696D65 
 14932              	.LASF66:
 14933 3665 5F5F4758 		.ascii	"__GXX_ABI_VERSION 1011\000"
 14933      585F4142 
 14933      495F5645 
 14933      5253494F 
 14933      4E203130 
 14934              	.LASF354:
 14935 367c 5F5F4441 		.ascii	"__DA_FBIT__ 31\000"
 14935      5F464249 
 14935      545F5F20 
 14935      333100
 14936              	.LASF1213:
 14937 368b 6C6F6E67 		.ascii	"long long int\000"
 14937      206C6F6E 
 14937      6720696E 
 14937      7400
 14938              	.LASF1183:
 14939 3699 7854696D 		.ascii	"xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken"
 14939      65725265 
 14939      73657446 
 14939      726F6D49 
 14939      53522878 
 14940 36cc 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESE"
 14940      696D6572 
 14940      47656E65 
 14940      72696343 
 14940      6F6D6D61 
 14941 36ff 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 14941      4F4D5F49 
 14941      53522C20 
 14941      28207854 
ARM GAS  /tmp/ccTV2SzP.s 			page 363


 14941      61736B47 
 14942 3732 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 14942      72696F72 
 14942      69747954 
 14942      61736B57 
 14942      6F6B656E 
 14943              	.LASF106:
 14944 374f 5F5F494E 		.ascii	"__INT_LEAST16_MAX__ 0x7fff\000"
 14944      545F4C45 
 14944      41535431 
 14944      365F4D41 
 14944      585F5F20 
 14945              	.LASF1371:
 14946 376a 756C5275 		.ascii	"ulRunTimeCounter\000"
 14946      6E54696D 
 14946      65436F75 
 14946      6E746572 
 14946      00
 14947              	.LASF154:
 14948 377b 5F5F464C 		.ascii	"__FLT_DENORM_MIN__ 1.4012984643248171e-45F\000"
 14948      545F4445 
 14948      4E4F524D 
 14948      5F4D494E 
 14948      5F5F2031 
 14949              	.LASF180:
 14950 37a6 5F5F4C44 		.ascii	"__LDBL_MAX__ 1.7976931348623157e+308L\000"
 14950      424C5F4D 
 14950      41585F5F 
 14950      20312E37 
 14950      39373639 
 14951              	.LASF508:
 14952 37cc 5F5F6E65 		.ascii	"__need_size_t \000"
 14952      65645F73 
 14952      697A655F 
 14952      742000
 14953              	.LASF1421:
 14954 37db 70784C69 		.ascii	"pxList\000"
 14954      737400
 14955              	.LASF779:
 14956 37e2 5F5F7265 		.ascii	"__requires_shared(...) __lock_annotate(shared_locks"
 14956      71756972 
 14956      65735F73 
 14956      68617265 
 14956      64282E2E 
 14957 3815 5F726571 		.ascii	"_required(__VA_ARGS__))\000"
 14957      75697265 
 14957      64285F5F 
 14957      56415F41 
 14957      5247535F 
 14958              	.LASF485:
 14959 382d 5F454E44 		.ascii	"_END_STD_C \000"
 14959      5F535444 
 14959      5F432000 
 14960              	.LASF1373:
 14961 3839 5461736B 		.ascii	"TaskStatus_t\000"
 14961      53746174 
 14961      75735F74 
ARM GAS  /tmp/ccTV2SzP.s 			page 364


 14961      00
 14962              	.LASF1405:
 14963 3846 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 14963      736B5265 
 14963      73657445 
 14963      76656E74 
 14963      4974656D 
 14964              	.LASF516:
 14965 3860 5F545F53 		.ascii	"_T_SIZE \000"
 14965      495A4520 
 14965      00
 14966              	.LASF1479:
 14967 3869 78546173 		.ascii	"xTaskResumeFromISR\000"
 14967      6B526573 
 14967      756D6546 
 14967      726F6D49 
 14967      535200
 14968              	.LASF65:
 14969 387c 5F5F6861 		.ascii	"__has_include_next(STR) __has_include_next__(STR)\000"
 14969      735F696E 
 14969      636C7564 
 14969      655F6E65 
 14969      78742853 
 14970              	.LASF1144:
 14971 38ae 6C697374 		.ascii	"listLIST_ITEM_CONTAINER(pxListItem) ( ( pxListItem "
 14971      4C495354 
 14971      5F495445 
 14971      4D5F434F 
 14971      4E544149 
 14972 38e1 292D3E70 		.ascii	")->pvContainer )\000"
 14972      76436F6E 
 14972      7461696E 
 14972      65722029 
 14972      00
 14973              	.LASF866:
 14974 38f2 55494E54 		.ascii	"UINT_LEAST16_MAX (__UINT_LEAST16_MAX__)\000"
 14974      5F4C4541 
 14974      53543136 
 14974      5F4D4158 
 14974      20285F5F 
 14975              	.LASF120:
 14976 391a 5F5F5549 		.ascii	"__UINT32_C(c) c ## UL\000"
 14976      4E543332 
 14976      5F432863 
 14976      29206320 
 14976      23232055 
 14977              	.LASF941:
 14978 3930 494E434C 		.ascii	"INCLUDE_vTaskDelayUntil 1\000"
 14978      5544455F 
 14978      76546173 
 14978      6B44656C 
 14978      6179556E 
 14979              	.LASF904:
 14980 394a 55494E54 		.ascii	"UINT8_C(x) __UINT8_C(x)\000"
 14980      385F4328 
 14980      7829205F 
 14980      5F55494E 
ARM GAS  /tmp/ccTV2SzP.s 			page 365


 14980      54385F43 
 14981              	.LASF569:
 14982 3962 5F5F6861 		.ascii	"__have_long32 1\000"
 14982      76655F6C 
 14982      6F6E6733 
 14982      32203100 
 14983              	.LASF153:
 14984 3972 5F5F464C 		.ascii	"__FLT_EPSILON__ 1.1920928955078125e-7F\000"
 14984      545F4550 
 14984      53494C4F 
 14984      4E5F5F20 
 14984      312E3139 
 14985              	.LASF703:
 14986 3999 5F5F5853 		.ascii	"__XSTRING(x) __STRING(x)\000"
 14986      5452494E 
 14986      47287829 
 14986      205F5F53 
 14986      5452494E 
 14987              	.LASF537:
 14988 39b2 5F574348 		.ascii	"_WCHAR_T_DEFINED_ \000"
 14988      41525F54 
 14988      5F444546 
 14988      494E4544 
 14988      5F2000
 14989              	.LASF453:
 14990 39c5 5F574944 		.ascii	"_WIDE_ORIENT 1\000"
 14990      455F4F52 
 14990      49454E54 
 14990      203100
 14991              	.LASF1006:
 14992 39d4 494E434C 		.ascii	"INCLUDE_xTaskGetIdleTaskHandle 0\000"
 14992      5544455F 
 14992      78546173 
 14992      6B476574 
 14992      49646C65 
 14993              	.LASF1121:
 14994 39f5 78436F52 		.ascii	"xCoRoutineHandle CoRoutineHandle_t\000"
 14994      6F757469 
 14994      6E654861 
 14994      6E646C65 
 14994      20436F52 
 14995              	.LASF30:
 14996 3a18 5F5F5054 		.ascii	"__PTRDIFF_TYPE__ int\000"
 14996      52444946 
 14996      465F5459 
 14996      50455F5F 
 14996      20696E74 
 14997              	.LASF1009:
 14998 3a2d 494E434C 		.ascii	"INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetM"
 14998      5544455F 
 14998      7853656D 
 14998      6170686F 
 14998      72654765 
 14999 3a60 75746578 		.ascii	"utexHolder\000"
 14999      486F6C64 
 14999      657200
 15000              	.LASF1066:
ARM GAS  /tmp/ccTV2SzP.s 			page 366


 15001 3a6b 74726163 		.ascii	"traceTASK_RESUME(pxTaskToResume) \000"
 15001      65544153 
 15001      4B5F5245 
 15001      53554D45 
 15001      28707854 
 15002              	.LASF1089:
 15003 3a8d 74726163 		.ascii	"traceQUEUE_REGISTRY_ADD(xQueue,pcQueueName) \000"
 15003      65515545 
 15003      55455F52 
 15003      45474953 
 15003      5452595F 
 15004              	.LASF684:
 15005 3aba 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VARARGS 1\000"
 15005      55434C49 
 15005      4B455F42 
 15005      55494C54 
 15005      494E5F56 
 15006              	.LASF309:
 15007 3ad7 5F5F5541 		.ascii	"__UACCUM_EPSILON__ 0x1P-16UK\000"
 15007      4343554D 
 15007      5F455053 
 15007      494C4F4E 
 15007      5F5F2030 
 15008              	.LASF836:
 15009 3af4 5F5F696E 		.ascii	"__int32_t_defined 1\000"
 15009      7433325F 
 15009      745F6465 
 15009      66696E65 
 15009      64203100 
 15010              	.LASF628:
 15011 3b08 5F524545 		.ascii	"_REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_sign"
 15011      4E545F53 
 15011      49474E47 
 15011      414D2870 
 15011      74722920 
 15012 3b3b 67616D29 		.ascii	"gam)\000"
 15012      00
 15013              	.LASF870:
 15014 3b40 494E545F 		.ascii	"INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)\000"
 15014      4C454153 
 15014      5433325F 
 15014      4D494E20 
 15014      282D5F5F 
 15015              	.LASF379:
 15016 3b6b 5F5F4743 		.ascii	"__GCC_ATOMIC_SHORT_LOCK_FREE 2\000"
 15016      435F4154 
 15016      4F4D4943 
 15016      5F53484F 
 15016      52545F4C 
 15017              	.LASF1391:
 15018 3b8a 7850656E 		.ascii	"xPendingReadyList\000"
 15018      64696E67 
 15018      52656164 
 15018      794C6973 
 15018      7400
 15019              	.LASF1331:
 15020 3b9c 55426173 		.ascii	"UBaseT_t\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 367


 15020      65545F74 
 15020      00
 15021              	.LASF749:
 15022 3ba5 5F5F7374 		.ascii	"__strong_reference(sym,aliassym) extern __typeof (s"
 15022      726F6E67 
 15022      5F726566 
 15022      6572656E 
 15022      63652873 
 15023 3bd8 796D2920 		.ascii	"ym) aliassym __attribute__ ((__alias__ (#sym)))\000"
 15023      616C6961 
 15023      7373796D 
 15023      205F5F61 
 15023      74747269 
 15024              	.LASF333:
 15025 3c08 5F5F4851 		.ascii	"__HQ_IBIT__ 0\000"
 15025      5F494249 
 15025      545F5F20 
 15025      3000
 15026              	.LASF1506:
 15027 3c16 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 15027      7274436F 
 15027      756E744C 
 15027      65616469 
 15027      6E675A65 
 15028              	.LASF295:
 15029 3c2e 5F5F5553 		.ascii	"__USACCUM_FBIT__ 8\000"
 15029      41434355 
 15029      4D5F4642 
 15029      49545F5F 
 15029      203800
 15030              	.LASF528:
 15031 3c41 5F5F6E65 		.ascii	"__need_size_t\000"
 15031      65645F73 
 15031      697A655F 
 15031      7400
 15032              	.LASF383:
 15033 3c4f 5F5F4743 		.ascii	"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1\000"
 15033      435F4154 
 15033      4F4D4943 
 15033      5F544553 
 15033      545F414E 
 15034              	.LASF310:
 15035 3c73 5F5F4C41 		.ascii	"__LACCUM_FBIT__ 31\000"
 15035      4343554D 
 15035      5F464249 
 15035      545F5F20 
 15035      333100
 15036              	.LASF632:
 15037 3c86 5F524545 		.ascii	"_REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._ad"
 15037      4E545F52 
 15037      414E4434 
 15037      385F4144 
 15037      44287074 
 15038 3cb9 642900   		.ascii	"d)\000"
 15039              	.LASF1071:
 15040 3cbc 74726163 		.ascii	"traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageV"
 15040      6554494D 
ARM GAS  /tmp/ccTV2SzP.s 			page 368


 15040      45525F43 
 15040      4F4D4D41 
 15040      4E445F53 
 15041 3cef 616C7565 		.ascii	"alueValue,xReturn) \000"
 15041      56616C75 
 15041      652C7852 
 15041      65747572 
 15041      6E292000 
 15042              	.LASF925:
 15043 3d03 636F6E66 		.ascii	"configUSE_16_BIT_TICKS 0\000"
 15043      69675553 
 15043      455F3136 
 15043      5F424954 
 15043      5F544943 
 15044              	.LASF200:
 15045 3d1c 5F5F464C 		.ascii	"__FLT32_HAS_QUIET_NAN__ 1\000"
 15045      5433325F 
 15045      4841535F 
 15045      51554945 
 15045      545F4E41 
 15046              	.LASF785:
 15047 3d36 5F4E4557 		.ascii	"_NEWLIB_ALLOCA_H \000"
 15047      4C49425F 
 15047      414C4C4F 
 15047      43415F48 
 15047      2000
 15048              	.LASF526:
 15049 3d48 5F53495A 		.ascii	"_SIZET_ \000"
 15049      45545F20 
 15049      00
 15050              	.LASF185:
 15051 3d51 5F5F4C44 		.ascii	"__LDBL_HAS_INFINITY__ 1\000"
 15051      424C5F48 
 15051      41535F49 
 15051      4E46494E 
 15051      4954595F 
 15052              	.LASF914:
 15053 3d69 46524545 		.ascii	"FREERTOS_CONFIG_H \000"
 15053      52544F53 
 15053      5F434F4E 
 15053      4649475F 
 15053      482000
 15054              	.LASF890:
 15055 3d7c 55494E54 		.ascii	"UINT_FAST64_MAX (__UINT_FAST64_MAX__)\000"
 15055      5F464153 
 15055      5436345F 
 15055      4D415820 
 15055      285F5F55 
 15056              	.LASF356:
 15057 3da2 5F5F5441 		.ascii	"__TA_FBIT__ 63\000"
 15057      5F464249 
 15057      545F5F20 
 15057      363300
 15058              	.LASF1151:
 15059 3db1 7461736B 		.ascii	"taskYIELD() portYIELD()\000"
 15059      5949454C 
 15059      44282920 
ARM GAS  /tmp/ccTV2SzP.s 			page 369


 15059      706F7274 
 15059      5949454C 
 15060              	.LASF220:
 15061 3dc9 5F5F464C 		.ascii	"__FLT32X_MAX_10_EXP__ 308\000"
 15061      54333258 
 15061      5F4D4158 
 15061      5F31305F 
 15061      4558505F 
 15062              	.LASF1192:
 15063 3de3 74736B52 		.ascii	"tskREADY_CHAR ( 'R' )\000"
 15063      45414459 
 15063      5F434841 
 15063      52202820 
 15063      27522720 
 15064              	.LASF1422:
 15065 3df9 65537461 		.ascii	"eState\000"
 15065      746500
 15066              	.LASF428:
 15067 3e00 5F5F4152 		.ascii	"__ARM_ARCH_EXT_IDIV__ 1\000"
 15067      4D5F4152 
 15067      43485F45 
 15067      58545F49 
 15067      4449565F 
 15068              	.LASF426:
 15069 3e18 5F5F4152 		.ascii	"__ARM_PCS 1\000"
 15069      4D5F5043 
 15069      53203100 
 15070              	.LASF533:
 15071 3e24 5F545F57 		.ascii	"_T_WCHAR \000"
 15071      43484152 
 15071      2000
 15072              	.LASF964:
 15073 3e2e 65727243 		.ascii	"errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )\000"
 15073      4F554C44 
 15073      5F4E4F54 
 15073      5F414C4C 
 15073      4F434154 
 15074              	.LASF725:
 15075 3e5b 5F5F7075 		.ascii	"__pure __attribute__((__pure__))\000"
 15075      7265205F 
 15075      5F617474 
 15075      72696275 
 15075      74655F5F 
 15076              	.LASF341:
 15077 3e7c 5F5F5551 		.ascii	"__UQQ_IBIT__ 0\000"
 15077      515F4942 
 15077      49545F5F 
 15077      203000
 15078              	.LASF179:
 15079 3e8b 5F5F4C44 		.ascii	"__LDBL_DECIMAL_DIG__ 17\000"
 15079      424C5F44 
 15079      4543494D 
 15079      414C5F44 
 15079      49475F5F 
 15080              	.LASF865:
 15081 3ea3 494E545F 		.ascii	"INT_LEAST16_MAX (__INT_LEAST16_MAX__)\000"
 15081      4C454153 
ARM GAS  /tmp/ccTV2SzP.s 			page 370


 15081      5431365F 
 15081      4D415820 
 15081      285F5F49 
 15082              	.LASF307:
 15083 3ec9 5F5F5541 		.ascii	"__UACCUM_MIN__ 0.0UK\000"
 15083      4343554D 
 15083      5F4D494E 
 15083      5F5F2030 
 15083      2E30554B 
 15084              	.LASF237:
 15085 3ede 5F5F4445 		.ascii	"__DEC64_MIN_EXP__ (-382)\000"
 15085      4336345F 
 15085      4D494E5F 
 15085      4558505F 
 15085      5F20282D 
 15086              	.LASF536:
 15087 3ef7 5F425344 		.ascii	"_BSD_WCHAR_T_ \000"
 15087      5F574348 
 15087      41525F54 
 15087      5F2000
 15088              	.LASF1458:
 15089 3f06 76546173 		.ascii	"vTaskSwitchContext\000"
 15089      6B537769 
 15089      74636843 
 15089      6F6E7465 
 15089      787400
 15090              	.LASF638:
 15091 3f19 5F524545 		.ascii	"_REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)"
 15091      4E545F54 
 15091      4D287074 
 15091      72292028 
 15091      26287074 
 15092 3f4c 00       		.ascii	"\000"
 15093              	.LASF496:
 15094 3f4d 5F455846 		.ascii	"_EXFUN(name,proto) name proto\000"
 15094      554E286E 
 15094      616D652C 
 15094      70726F74 
 15094      6F29206E 
 15095              	.LASF732:
 15096 3f6b 5F5F7265 		.ascii	"__returns_twice __attribute__((__returns_twice__))\000"
 15096      7475726E 
 15096      735F7477 
 15096      69636520 
 15096      5F5F6174 
 15097              	.LASF895:
 15098 3f9e 5349475F 		.ascii	"SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)\000"
 15098      41544F4D 
 15098      49435F4D 
 15098      494E2028 
 15098      2D5F5F53 
 15099              	.LASF1256:
 15100 3fca 5F636F6F 		.ascii	"_cookie\000"
 15100      6B696500 
 15101              	.LASF960:
 15102 3fd2 70645041 		.ascii	"pdPASS ( pdTRUE )\000"
 15102      53532028 
ARM GAS  /tmp/ccTV2SzP.s 			page 371


 15102      20706454 
 15102      52554520 
 15102      2900
 15103              	.LASF587:
 15104 3fe4 5F5F6C6F 		.ascii	"__lock_acquire_recursive(lock) (_CAST_VOID 0)\000"
 15104      636B5F61 
 15104      63717569 
 15104      72655F72 
 15104      65637572 
 15105              	.LASF1282:
 15106 4012 5F703573 		.ascii	"_p5s\000"
 15106      00
 15107              	.LASF974:
 15108 4017 706F7274 		.ascii	"portSTACK_TYPE uint32_t\000"
 15108      53544143 
 15108      4B5F5459 
 15108      50452075 
 15108      696E7433 
 15109              	.LASF1415:
 15110 402f 70756345 		.ascii	"pucEndOfStack\000"
 15110      6E644F66 
 15110      53746163 
 15110      6B00
 15111              	.LASF1185:
 15112 403d 7461736B 		.ascii	"taskFIRST_CHECK_FOR_STACK_OVERFLOW() \000"
 15112      46495253 
 15112      545F4348 
 15112      45434B5F 
 15112      464F525F 
 15113              	.LASF1015:
 15114 4063 494E434C 		.ascii	"INCLUDE_xTaskResumeFromISR 1\000"
 15114      5544455F 
 15114      78546173 
 15114      6B526573 
 15114      756D6546 
 15115              	.LASF137:
 15116 4080 5F5F5549 		.ascii	"__UINTPTR_MAX__ 0xffffffffU\000"
 15116      4E545054 
 15116      525F4D41 
 15116      585F5F20 
 15116      30786666 
 15117              	.LASF1464:
 15118 409c 75784172 		.ascii	"uxArraySize\000"
 15118      72617953 
 15118      697A6500 
 15119              	.LASF1426:
 15120 40a8 7078436F 		.ascii	"pxConstList\000"
 15120      6E73744C 
 15120      69737400 
 15121              	.LASF953:
 15122 40b4 636F6E66 		.ascii	"configKERNEL_INTERRUPT_PRIORITY ( 31 << (8 - config"
 15122      69674B45 
 15122      524E454C 
 15122      5F494E54 
 15122      45525255 
 15123 40e7 5052494F 		.ascii	"PRIO_BITS) )\000"
 15123      5F424954 
ARM GAS  /tmp/ccTV2SzP.s 			page 372


 15123      53292029 
 15123      00
 15124              	.LASF108:
 15125 40f4 5F5F494E 		.ascii	"__INT_LEAST16_WIDTH__ 16\000"
 15125      545F4C45 
 15125      41535431 
 15125      365F5749 
 15125      4454485F 
 15126              	.LASF915:
 15127 410d 636F6E66 		.ascii	"configUSE_PREEMPTION 1\000"
 15127      69675553 
 15127      455F5052 
 15127      45454D50 
 15127      54494F4E 
 15128              	.LASF847:
 15129 4124 5F5F696E 		.ascii	"__int_least64_t_defined 1\000"
 15129      745F6C65 
 15129      61737436 
 15129      345F745F 
 15129      64656669 
 15130              	.LASF142:
 15131 413e 5F5F4445 		.ascii	"__DEC_EVAL_METHOD__ 2\000"
 15131      435F4556 
 15131      414C5F4D 
 15131      4554484F 
 15131      445F5F20 
 15132              	.LASF1501:
 15133 4154 70784372 		.ascii	"pxCreatedTask\000"
 15133      65617465 
 15133      64546173 
 15133      6B00
 15134              	.LASF605:
 15135 4162 5F415445 		.ascii	"_ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL},"
 15135      5849545F 
 15135      494E4954 
 15135      207B5F4E 
 15135      554C4C2C 
 15136 4195 20302C20 		.ascii	" 0, 0}}\000"
 15136      307D7D00 
 15137              	.LASF1467:
 15138 419d 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 15138      736B496E 
 15138      6372656D 
 15138      656E744D 
 15138      75746578 
 15139              	.LASF956:
 15140 41bb 50524F4A 		.ascii	"PROJDEFS_H \000"
 15140      44454653 
 15140      5F482000 
 15141              	.LASF1480:
 15142 41c7 78546173 		.ascii	"xTaskToResume\000"
 15142      6B546F52 
 15142      6573756D 
 15142      6500
 15143              	.LASF1288:
 15144 41d5 5F736967 		.ascii	"_sig_func\000"
 15144      5F66756E 
ARM GAS  /tmp/ccTV2SzP.s 			page 373


 15144      6300
 15145              	.LASF242:
 15146 41df 5F5F4445 		.ascii	"__DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD\000"
 15146      4336345F 
 15146      5355424E 
 15146      4F524D41 
 15146      4C5F4D49 
 15147              	.LASF259:
 15148 4210 5F5F5553 		.ascii	"__USFRACT_EPSILON__ 0x1P-8UHR\000"
 15148      46524143 
 15148      545F4550 
 15148      53494C4F 
 15148      4E5F5F20 
 15149              	.LASF467:
 15150 422e 5F5F4154 		.ascii	"__ATFILE_VISIBLE 1\000"
 15150      46494C45 
 15150      5F564953 
 15150      49424C45 
 15150      203100
 15151              	.LASF1087:
 15152 4241 74726163 		.ascii	"tracePEND_FUNC_CALL(xFunctionToPend,pvParameter1,ul"
 15152      6550454E 
 15152      445F4655 
 15152      4E435F43 
 15152      414C4C28 
 15153 4274 50617261 		.ascii	"Parameter2,ret) \000"
 15153      6D657465 
 15153      72322C72 
 15153      65742920 
 15153      00
 15154              	.LASF721:
 15155 4285 5F546872 		.ascii	"_Thread_local __thread\000"
 15155      6561645F 
 15155      6C6F6361 
 15155      6C205F5F 
 15155      74687265 
 15156              	.LASF981:
 15157 429c 706F7274 		.ascii	"portNVIC_PENDSVSET_BIT ( 1UL << 28UL )\000"
 15157      4E564943 
 15157      5F50454E 
 15157      44535653 
 15157      45545F42 
 15158              	.LASF517:
 15159 42c3 5F5F5349 		.ascii	"__SIZE_T \000"
 15159      5A455F54 
 15159      2000
 15160              	.LASF255:
 15161 42cd 5F5F5553 		.ascii	"__USFRACT_FBIT__ 8\000"
 15161      46524143 
 15161      545F4642 
 15161      49545F5F 
 15161      203800
 15162              	.LASF323:
 15163 42e0 5F5F4C4C 		.ascii	"__LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK\000"
 15163      41434355 
 15163      4D5F4D41 
 15163      585F5F20 
ARM GAS  /tmp/ccTV2SzP.s 			page 374


 15163      30583746 
 15164              	.LASF948:
 15165 430a 636F6E66 		.ascii	"configNET_MASK0 255\000"
 15165      69674E45 
 15165      545F4D41 
 15165      534B3020 
 15165      32353500 
 15166              	.LASF1264:
 15167 431e 5F6F6666 		.ascii	"_offset\000"
 15167      73657400 
 15168              	.LASF558:
 15169 4326 5F425344 		.ascii	"_BSD_PTRDIFF_T_ \000"
 15169      5F505452 
 15169      44494646 
 15169      5F545F20 
 15169      00
 15170              	.LASF1393:
 15171 4337 75785461 		.ascii	"uxTasksDeleted\000"
 15171      736B7344 
 15171      656C6574 
 15171      656400
 15172              	.LASF1285:
 15173 4346 5F637674 		.ascii	"_cvtbuf\000"
 15173      62756600 
 15174              	.LASF1235:
 15175 434e 5F5F746D 		.ascii	"__tm_mday\000"
 15175      5F6D6461 
 15175      7900
 15176              	.LASF367:
 15177 4358 5F5F5553 		.ascii	"__USER_LABEL_PREFIX__ \000"
 15177      45525F4C 
 15177      4142454C 
 15177      5F505245 
 15177      4649585F 
 15178              	.LASF102:
 15179 436f 5F5F5549 		.ascii	"__UINT64_MAX__ 0xffffffffffffffffULL\000"
 15179      4E543634 
 15179      5F4D4158 
 15179      5F5F2030 
 15179      78666666 
 15180              	.LASF918:
 15181 4394 636F6E66 		.ascii	"configUSE_TICK_HOOK 1\000"
 15181      69675553 
 15181      455F5449 
 15181      434B5F48 
 15181      4F4F4B20 
 15182              	.LASF932:
 15183 43aa 636F6E66 		.ascii	"configCHECK_FOR_STACK_OVERFLOW 0\000"
 15183      69674348 
 15183      45434B5F 
 15183      464F525F 
 15183      53544143 
 15184              	.LASF101:
 15185 43cb 5F5F5549 		.ascii	"__UINT32_MAX__ 0xffffffffUL\000"
 15185      4E543332 
 15185      5F4D4158 
 15185      5F5F2030 
ARM GAS  /tmp/ccTV2SzP.s 			page 375


 15185      78666666 
 15186              	.LASF909:
 15187 43e7 494E5436 		.ascii	"INT64_C(x) __INT64_C(x)\000"
 15187      345F4328 
 15187      7829205F 
 15187      5F494E54 
 15187      36345F43 
 15188              	.LASF465:
 15189 43ff 5F415446 		.ascii	"_ATFILE_SOURCE\000"
 15189      494C455F 
 15189      534F5552 
 15189      434500
 15190              	.LASF642:
 15191 440e 5F524545 		.ascii	"_REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtow"
 15191      4E545F4D 
 15191      42544F57 
 15191      435F5354 
 15191      41544528 
 15192 4441 635F7374 		.ascii	"c_state)\000"
 15192      61746529 
 15192      00
 15193              	.LASF955:
 15194 444a 636F6E66 		.ascii	"configASSERT(x) if( ( x ) == 0 ) { taskDISABLE_INTE"
 15194      69674153 
 15194      53455254 
 15194      28782920 
 15194      69662820 
 15195 447d 52525550 		.ascii	"RRUPTS(); for( ;; ); }\000"
 15195      54532829 
 15195      3B20666F 
 15195      7228203B 
 15195      3B20293B 
 15196              	.LASF641:
 15197 4494 5F524545 		.ascii	"_REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_"
 15197      4E545F4D 
 15197      424C454E 
 15197      5F535441 
 15197      54452870 
 15198 44c7 73746174 		.ascii	"state)\000"
 15198      652900
 15199              	.LASF774:
 15200 44ce 5F5F7472 		.ascii	"__trylocks_shared(...) __lock_annotate(shared_trylo"
 15200      796C6F63 
 15200      6B735F73 
 15200      68617265 
 15200      64282E2E 
 15201 4501 636B5F66 		.ascii	"ck_function(__VA_ARGS__))\000"
 15201      756E6374 
 15201      696F6E28 
 15201      5F5F5641 
 15201      5F415247 
 15202              	.LASF103:
 15203 451b 5F5F494E 		.ascii	"__INT_LEAST8_MAX__ 0x7f\000"
 15203      545F4C45 
 15203      41535438 
 15203      5F4D4158 
 15203      5F5F2030 
ARM GAS  /tmp/ccTV2SzP.s 			page 376


 15204              	.LASF1472:
 15205 4533 78546963 		.ascii	"xTicks\000"
 15205      6B7300
 15206              	.LASF391:
 15207 453a 5F5F4152 		.ascii	"__ARM_FEATURE_QBIT 1\000"
 15207      4D5F4645 
 15207      41545552 
 15207      455F5142 
 15207      49542031 
 15208              	.LASF398:
 15209 454f 5F5F4152 		.ascii	"__ARM_FEATURE_CLZ 1\000"
 15209      4D5F4645 
 15209      41545552 
 15209      455F434C 
 15209      5A203100 
 15210              	.LASF8:
 15211 4563 5F5F4154 		.ascii	"__ATOMIC_ACQUIRE 2\000"
 15211      4F4D4943 
 15211      5F414351 
 15211      55495245 
 15211      203200
 15212              	.LASF989:
 15213 4576 706F7274 		.ascii	"portENTER_CRITICAL() vPortEnterCritical()\000"
 15213      454E5445 
 15213      525F4352 
 15213      49544943 
 15213      414C2829 
 15214              	.LASF1395:
 15215 45a0 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 15215      7272656E 
 15215      744E756D 
 15215      6265724F 
 15215      66546173 
 15216              	.LASF1476:
 15217 45b7 76546173 		.ascii	"vTaskSuspendAll\000"
 15217      6B537573 
 15217      70656E64 
 15217      416C6C00 
 15218              	.LASF546:
 15219 45c7 4E554C4C 		.ascii	"NULL\000"
 15219      00
 15220              	.LASF848:
 15221 45cc 5F5F696E 		.ascii	"__int_fast8_t_defined 1\000"
 15221      745F6661 
 15221      7374385F 
 15221      745F6465 
 15221      66696E65 
 15222              	.LASF813:
 15223 45e4 5F494E54 		.ascii	"_INTPTR_EQ_INT \000"
 15223      5054525F 
 15223      45515F49 
 15223      4E542000 
 15224              	.LASF402:
 15225 45f4 5F5F4152 		.ascii	"__ARM_SIZEOF_WCHAR_T 4\000"
 15225      4D5F5349 
 15225      5A454F46 
 15225      5F574348 
ARM GAS  /tmp/ccTV2SzP.s 			page 377


 15225      41525F54 
 15226              	.LASF219:
 15227 460b 5F5F464C 		.ascii	"__FLT32X_MAX_EXP__ 1024\000"
 15227      54333258 
 15227      5F4D4158 
 15227      5F455850 
 15227      5F5F2031 
 15228              	.LASF64:
 15229 4623 5F5F6861 		.ascii	"__has_include(STR) __has_include__(STR)\000"
 15229      735F696E 
 15229      636C7564 
 15229      65285354 
 15229      5229205F 
 15230              	.LASF1356:
 15231 464b 784F7665 		.ascii	"xOverflowCount\000"
 15231      72666C6F 
 15231      77436F75 
 15231      6E7400
 15232              	.LASF1035:
 15233 465a 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_SEND(pxQueue) \000"
 15233      65424C4F 
 15233      434B494E 
 15233      475F4F4E 
 15233      5F515545 
 15234              	.LASF1062:
 15235 4680 74726163 		.ascii	"traceTASK_DELAY_UNTIL() \000"
 15235      65544153 
 15235      4B5F4445 
 15235      4C41595F 
 15235      554E5449 
 15236              	.LASF119:
 15237 4699 5F5F5549 		.ascii	"__UINT_LEAST32_MAX__ 0xffffffffUL\000"
 15237      4E545F4C 
 15237      45415354 
 15237      33325F4D 
 15237      41585F5F 
 15238              	.LASF167:
 15239 46bb 5F5F4442 		.ascii	"__DBL_EPSILON__ ((double)2.2204460492503131e-16L)\000"
 15239      4C5F4550 
 15239      53494C4F 
 15239      4E5F5F20 
 15239      2828646F 
 15240              	.LASF1446:
 15241 46ed 70785469 		.ascii	"pxTimeOut\000"
 15241      6D654F75 
 15241      7400
 15242              	.LASF272:
 15243 46f7 5F5F4C46 		.ascii	"__LFRACT_MIN__ (-0.5LR-0.5LR)\000"
 15243      52414354 
 15243      5F4D494E 
 15243      5F5F2028 
 15243      2D302E35 
 15244              	.LASF673:
 15245 4715 5F5F6861 		.ascii	"__has_feature(x) 0\000"
 15245      735F6665 
 15245      61747572 
 15245      65287829 
ARM GAS  /tmp/ccTV2SzP.s 			page 378


 15245      203000
 15246              	.LASF114:
 15247 4728 5F5F494E 		.ascii	"__INT_LEAST64_WIDTH__ 64\000"
 15247      545F4C45 
 15247      41535436 
 15247      345F5749 
 15247      4454485F 
 15248              	.LASF156:
 15249 4741 5F5F464C 		.ascii	"__FLT_HAS_INFINITY__ 1\000"
 15249      545F4841 
 15249      535F494E 
 15249      46494E49 
 15249      54595F5F 
 15250              	.LASF1330:
 15251 4758 42617365 		.ascii	"BaseT_t\000"
 15251      545F7400 
 15252              	.LASF303:
 15253 4760 5F5F4143 		.ascii	"__ACCUM_MAX__ 0X7FFFFFFFP-15K\000"
 15253      43554D5F 
 15253      4D41585F 
 15253      5F203058 
 15253      37464646 
 15254              	.LASF1046:
 15255 477e 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE_FAILED() \000"
 15255      65435245 
 15255      4154455F 
 15255      434F554E 
 15255      54494E47 
 15256              	.LASF95:
 15257 47a7 5F5F494E 		.ascii	"__INT8_MAX__ 0x7f\000"
 15257      54385F4D 
 15257      41585F5F 
 15257      20307837 
 15257      6600
 15258              	.LASF1350:
 15259 47b9 65526561 		.ascii	"eReady\000"
 15259      647900
 15260              	.LASF988:
 15261 47c0 706F7274 		.ascii	"portENABLE_INTERRUPTS() vPortClearInterruptMask(0)\000"
 15261      454E4142 
 15261      4C455F49 
 15261      4E544552 
 15261      52555054 
 15262              	.LASF1058:
 15263 47f3 74726163 		.ascii	"traceQUEUE_DELETE(pxQueue) \000"
 15263      65515545 
 15263      55455F44 
 15263      454C4554 
 15263      45287078 
 15264              	.LASF385:
 15265 480f 5F5F4743 		.ascii	"__GCC_HAVE_DWARF2_CFI_ASM 1\000"
 15265      435F4841 
 15265      56455F44 
 15265      57415246 
 15265      325F4346 
 15266              	.LASF570:
 15267 482b 5F5F5F69 		.ascii	"___int8_t_defined 1\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 379


 15267      6E74385F 
 15267      745F6465 
 15267      66696E65 
 15267      64203100 
 15268              	.LASF1454:
 15269 483f 70784576 		.ascii	"pxEventList\000"
 15269      656E744C 
 15269      69737400 
 15270              	.LASF1212:
 15271 484b 6C6F6E67 		.ascii	"long unsigned int\000"
 15271      20756E73 
 15271      69676E65 
 15271      6420696E 
 15271      7400
 15272              	.LASF353:
 15273 485d 5F5F5341 		.ascii	"__SA_IBIT__ 16\000"
 15273      5F494249 
 15273      545F5F20 
 15273      313600
 15274              	.LASF1475:
 15275 486c 76546173 		.ascii	"vTaskMissedYield\000"
 15275      6B4D6973 
 15275      73656459 
 15275      69656C64 
 15275      00
 15276              	.LASF740:
 15277 487d 5F5F6F66 		.ascii	"__offsetof(type,field) offsetof(type, field)\000"
 15277      66736574 
 15277      6F662874 
 15277      7970652C 
 15277      6669656C 
 15278              	.LASF139:
 15279 48aa 5F5F4743 		.ascii	"__GCC_IEC_559_COMPLEX 0\000"
 15279      435F4945 
 15279      435F3535 
 15279      395F434F 
 15279      4D504C45 
 15280              	.LASF958:
 15281 48c2 70644641 		.ascii	"pdFALSE ( ( BaseT_t ) 0 )\000"
 15281      4C534520 
 15281      28202820 
 15281      42617365 
 15281      545F7420 
 15282              	.LASF564:
 15283 48dc 5F535953 		.ascii	"_SYS__TYPES_H \000"
 15283      5F5F5459 
 15283      5045535F 
 15283      482000
 15284              	.LASF2:
 15285 48eb 5F5F474E 		.ascii	"__GNUC__ 7\000"
 15285      55435F5F 
 15285      203700
 15286              	.LASF415:
 15287 48f6 5F5F4152 		.ascii	"__ARM_FP16_FORMAT_IEEE\000"
 15287      4D5F4650 
 15287      31365F46 
 15287      4F524D41 
ARM GAS  /tmp/ccTV2SzP.s 			page 380


 15287      545F4945 
 15288              	.LASF43:
 15289 490d 5F5F5549 		.ascii	"__UINT16_TYPE__ short unsigned int\000"
 15289      4E543136 
 15289      5F545950 
 15289      455F5F20 
 15289      73686F72 
 15290              	.LASF461:
 15291 4930 5F504F53 		.ascii	"_POSIX_SOURCE\000"
 15291      49585F53 
 15291      4F555243 
 15291      4500
 15292              	.LASF791:
 15293 493e 52414E44 		.ascii	"RAND_MAX __RAND_MAX\000"
 15293      5F4D4158 
 15293      205F5F52 
 15293      414E445F 
 15293      4D415800 
 15294              	.LASF935:
 15295 4952 636F6E66 		.ascii	"configGENERATE_RUN_TIME_STATS 0\000"
 15295      69674745 
 15295      4E455241 
 15295      54455F52 
 15295      554E5F54 
 15296              	.LASF1184:
 15297 4972 53544143 		.ascii	"STACK_MACROS_H \000"
 15297      4B5F4D41 
 15297      43524F53 
 15297      5F482000 
 15298              	.LASF412:
 15299 4982 5F5F534F 		.ascii	"__SOFTFP__ 1\000"
 15299      46544650 
 15299      5F5F2031 
 15299      00
 15300              	.LASF1469:
 15301 498f 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 15301      6B476574 
 15301      5469636B 
 15301      436F756E 
 15301      7446726F 
 15302              	.LASF1252:
 15303 49a8 5F5F7346 		.ascii	"__sFILE\000"
 15303      494C4500 
 15304              	.LASF1278:
 15305 49b0 5F5F7364 		.ascii	"__sdidinit\000"
 15305      6964696E 
 15305      697400
 15306              	.LASF231:
 15307 49bb 5F5F4445 		.ascii	"__DEC32_MAX_EXP__ 97\000"
 15307      4333325F 
 15307      4D41585F 
 15307      4558505F 
 15307      5F203937 
 15308              	.LASF1449:
 15309 49d0 76546173 		.ascii	"vTaskSetTimeOutState\000"
 15309      6B536574 
 15309      54696D65 
ARM GAS  /tmp/ccTV2SzP.s 			page 381


 15309      4F757453 
 15309      74617465 
 15310              	.LASF515:
 15311 49e5 5F545F53 		.ascii	"_T_SIZE_ \000"
 15311      495A455F 
 15311      2000
 15312              	.LASF141:
 15313 49ef 5F5F464C 		.ascii	"__FLT_EVAL_METHOD_TS_18661_3__ 0\000"
 15313      545F4556 
 15313      414C5F4D 
 15313      4554484F 
 15313      445F5453 
 15314              	.LASF665:
 15315 4a10 5F5F6174 		.ascii	"__attribute_malloc__ \000"
 15315      74726962 
 15315      7574655F 
 15315      6D616C6C 
 15315      6F635F5F 
 15316              	.LASF78:
 15317 4a26 5F5F5343 		.ascii	"__SCHAR_WIDTH__ 8\000"
 15317      4841525F 
 15317      57494454 
 15317      485F5F20 
 15317      3800
 15318              	.LASF1327:
 15319 4a38 53797374 		.ascii	"SystemCoreClock\000"
 15319      656D436F 
 15319      7265436C 
 15319      6F636B00 
 15320              	.LASF903:
 15321 4a48 494E5438 		.ascii	"INT8_C(x) __INT8_C(x)\000"
 15321      5F432878 
 15321      29205F5F 
 15321      494E5438 
 15321      5F432878 
 15322              	.LASF482:
 15323 4a5e 5F524541 		.ascii	"_READ_WRITE_BUFSIZE_TYPE int\000"
 15323      445F5752 
 15323      4954455F 
 15323      42554653 
 15323      495A455F 
 15324              	.LASF58:
 15325 4a7b 5F5F5549 		.ascii	"__UINT_FAST8_TYPE__ unsigned int\000"
 15325      4E545F46 
 15325      41535438 
 15325      5F545950 
 15325      455F5F20 
 15326              	.LASF321:
 15327 4a9c 5F5F4C4C 		.ascii	"__LLACCUM_IBIT__ 32\000"
 15327      41434355 
 15327      4D5F4942 
 15327      49545F5F 
 15327      20333200 
 15328              	.LASF210:
 15329 4ab0 5F5F464C 		.ascii	"__FLT64_EPSILON__ 2.2204460492503131e-16F64\000"
 15329      5436345F 
 15329      45505349 
ARM GAS  /tmp/ccTV2SzP.s 			page 382


 15329      4C4F4E5F 
 15329      5F20322E 
 15330              	.LASF1364:
 15331 4adc 78544153 		.ascii	"xTASK_STATUS\000"
 15331      4B5F5354 
 15331      41545553 
 15331      00
 15332              	.LASF780:
 15333 4ae9 5F5F7265 		.ascii	"__requires_unlocked(...) __lock_annotate(locks_excl"
 15333      71756972 
 15333      65735F75 
 15333      6E6C6F63 
 15333      6B656428 
 15334 4b1c 75646564 		.ascii	"uded(__VA_ARGS__))\000"
 15334      285F5F56 
 15334      415F4152 
 15334      47535F5F 
 15334      292900
 15335              	.LASF51:
 15336 4b2f 5F5F5549 		.ascii	"__UINT_LEAST16_TYPE__ short unsigned int\000"
 15336      4E545F4C 
 15336      45415354 
 15336      31365F54 
 15336      5950455F 
 15337              	.LASF97:
 15338 4b58 5F5F494E 		.ascii	"__INT32_MAX__ 0x7fffffffL\000"
 15338      5433325F 
 15338      4D41585F 
 15338      5F203078 
 15338      37666666 
 15339              	.LASF1105:
 15340 4b72 636F6E66 		.ascii	"configUSE_STATS_FORMATTING_FUNCTIONS 0\000"
 15340      69675553 
 15340      455F5354 
 15340      4154535F 
 15340      464F524D 
 15341              	.LASF723:
 15342 4b99 5F5F6D69 		.ascii	"__min_size(x) static (x)\000"
 15342      6E5F7369 
 15342      7A652878 
 15342      29207374 
 15342      61746963 
 15343              	.LASF601:
 15344 4bb2 5F54494D 		.ascii	"_TIMER_T_ unsigned long\000"
 15344      45525F54 
 15344      5F20756E 
 15344      7369676E 
 15344      6564206C 
 15345              	.LASF1215:
 15346 4bca 5F4C4F43 		.ascii	"_LOCK_RECURSIVE_T\000"
 15346      4B5F5245 
 15346      43555253 
 15346      4956455F 
 15346      5400
 15347              	.LASF1082:
 15348 4bdc 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS(xEventGroup,uxBitsToCle"
 15348      65455645 
ARM GAS  /tmp/ccTV2SzP.s 			page 383


 15348      4E545F47 
 15348      524F5550 
 15348      5F434C45 
 15349 4c0f 61722920 		.ascii	"ar) \000"
 15349      00
 15350              	.LASF112:
 15351 4c14 5F5F494E 		.ascii	"__INT_LEAST64_MAX__ 0x7fffffffffffffffLL\000"
 15351      545F4C45 
 15351      41535436 
 15351      345F4D41 
 15351      585F5F20 
 15352              	.LASF637:
 15353 4c3d 5F524545 		.ascii	"_REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctim"
 15353      4E545F41 
 15353      53435449 
 15353      4D455F42 
 15353      55462870 
 15354 4c70 655F6275 		.ascii	"e_buf)\000"
 15354      662900
 15355              	.LASF891:
 15356 4c77 494E544D 		.ascii	"INTMAX_MAX (__INTMAX_MAX__)\000"
 15356      41585F4D 
 15356      41582028 
 15356      5F5F494E 
 15356      544D4158 
 15357              	.LASF827:
 15358 4c93 5F535953 		.ascii	"_SYS__STDINT_H \000"
 15358      5F5F5354 
 15358      44494E54 
 15358      5F482000 
 15359              	.LASF1359:
 15360 4ca3 784D454D 		.ascii	"xMEMORY_REGION\000"
 15360      4F52595F 
 15360      52454749 
 15360      4F4E00
 15361              	.LASF460:
 15362 4cb2 5F444546 		.ascii	"_DEFAULT_SOURCE 1\000"
 15362      41554C54 
 15362      5F534F55 
 15362      52434520 
 15362      3100
 15363              	.LASF957:
 15364 4cc4 70644D53 		.ascii	"pdMS_TO_TICKS(xTimeInMs) ( ( ( TickT_t ) ( xTimeInM"
 15364      5F544F5F 
 15364      5449434B 
 15364      53287854 
 15364      696D6549 
 15365 4cf7 73202920 		.ascii	"s ) * configTICK_RATE_HZ ) / ( TickT_t ) 1000 )\000"
 15365      2A20636F 
 15365      6E666967 
 15365      5449434B 
 15365      5F524154 
 15366              	.LASF187:
 15367 4d27 5F5F464C 		.ascii	"__FLT32_MANT_DIG__ 24\000"
 15367      5433325F 
 15367      4D414E54 
 15367      5F444947 
ARM GAS  /tmp/ccTV2SzP.s 			page 384


 15367      5F5F2032 
 15368              	.LASF1270:
 15369 4d3d 5F657272 		.ascii	"_errno\000"
 15369      6E6F00
 15370              	.LASF942:
 15371 4d44 494E434C 		.ascii	"INCLUDE_vTaskDelay 1\000"
 15371      5544455F 
 15371      76546173 
 15371      6B44656C 
 15371      61792031 
 15372              	.LASF197:
 15373 4d59 5F5F464C 		.ascii	"__FLT32_DENORM_MIN__ 1.4012984643248171e-45F32\000"
 15373      5433325F 
 15373      44454E4F 
 15373      524D5F4D 
 15373      494E5F5F 
 15374              	.LASF714:
 15375 4d88 5F5F7365 		.ascii	"__section(x) __attribute__((__section__(x)))\000"
 15375      6374696F 
 15375      6E287829 
 15375      205F5F61 
 15375      74747269 
 15376              	.LASF563:
 15377 4db5 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 15377      65746F66 
 15377      28545950 
 15377      452C4D45 
 15377      4D424552 
 15378 4de8 42455229 		.ascii	"BER)\000"
 15378      00
 15379              	.LASF122:
 15380 4ded 5F5F5549 		.ascii	"__UINT64_C(c) c ## ULL\000"
 15380      4E543634 
 15380      5F432863 
 15380      29206320 
 15380      23232055 
 15381              	.LASF53:
 15382 4e04 5F5F5549 		.ascii	"__UINT_LEAST64_TYPE__ long long unsigned int\000"
 15382      4E545F4C 
 15382      45415354 
 15382      36345F54 
 15382      5950455F 
 15383              	.LASF940:
 15384 4e31 494E434C 		.ascii	"INCLUDE_vTaskSuspend 1\000"
 15384      5544455F 
 15384      76546173 
 15384      6B537573 
 15384      70656E64 
 15385              	.LASF639:
 15386 4e48 5F524545 		.ascii	"_REENT_EMERGENCY(ptr) ((ptr)->_emergency)\000"
 15386      4E545F45 
 15386      4D455247 
 15386      454E4359 
 15386      28707472 
 15387              	.LASF1445:
 15388 4e72 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 15388      6B436865 
ARM GAS  /tmp/ccTV2SzP.s 			page 385


 15388      636B466F 
 15388      7254696D 
 15388      654F7574 
 15389              	.LASF182:
 15390 4e87 5F5F4C44 		.ascii	"__LDBL_EPSILON__ 2.2204460492503131e-16L\000"
 15390      424C5F45 
 15390      5053494C 
 15390      4F4E5F5F 
 15390      20322E32 
 15391              	.LASF1108:
 15392 4eb0 636F6E66 		.ascii	"configENABLE_BACKWARD_COMPATIBILITY 1\000"
 15392      6967454E 
 15392      41424C45 
 15392      5F424143 
 15392      4B574152 
 15393              	.LASF1094:
 15394 4ed6 7076506F 		.ascii	"pvPortMallocAligned(x,puxStackBuffer) ( ( ( puxStac"
 15394      72744D61 
 15394      6C6C6F63 
 15394      416C6967 
 15394      6E656428 
 15395 4f09 6B427566 		.ascii	"kBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ("
 15395      66657220 
 15395      29203D3D 
 15395      204E554C 
 15395      4C202920 
 15396 4f3c 20707578 		.ascii	" puxStackBuffer ) )\000"
 15396      53746163 
 15396      6B427566 
 15396      66657220 
 15396      29202900 
 15397              	.LASF709:
 15398 4f50 5F5F7075 		.ascii	"__pure2 __attribute__((__const__))\000"
 15398      72653220 
 15398      5F5F6174 
 15398      74726962 
 15398      7574655F 
 15399              	.LASF376:
 15400 4f73 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR16_T_LOCK_FREE 2\000"
 15400      435F4154 
 15400      4F4D4943 
 15400      5F434841 
 15400      5231365F 
 15401              	.LASF765:
 15402 4f95 5F5F4E55 		.ascii	"__NULLABILITY_PRAGMA_PUSH \000"
 15402      4C4C4142 
 15402      494C4954 
 15402      595F5052 
 15402      41474D41 
 15403              	.LASF1310:
 15404 4fb0 5F736967 		.ascii	"_signal_buf\000"
 15404      6E616C5F 
 15404      62756600 
 15405              	.LASF1051:
 15406 4fbc 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR(pxQueue) \000"
 15406      65515545 
 15406      55455F50 
ARM GAS  /tmp/ccTV2SzP.s 			page 386


 15406      45454B5F 
 15406      46524F4D 
 15407              	.LASF162:
 15408 4fdf 5F5F4442 		.ascii	"__DBL_MAX_EXP__ 1024\000"
 15408      4C5F4D41 
 15408      585F4558 
 15408      505F5F20 
 15408      31303234 
 15409              	.LASF822:
 15410 4ff4 5F5F4641 		.ascii	"__FAST64 \"ll\"\000"
 15410      53543634 
 15410      20226C6C 
 15410      2200
 15411              	.LASF9:
 15412 5002 5F5F4154 		.ascii	"__ATOMIC_RELEASE 3\000"
 15412      4F4D4943 
 15412      5F52454C 
 15412      45415345 
 15412      203300
 15413              	.LASF807:
 15414 5015 756E7369 		.ascii	"unsigned +0\000"
 15414      676E6564 
 15414      202B3000 
 15415              	.LASF226:
 15416 5021 5F5F464C 		.ascii	"__FLT32X_HAS_DENORM__ 1\000"
 15416      54333258 
 15416      5F484153 
 15416      5F44454E 
 15416      4F524D5F 
 15417              	.LASF144:
 15418 5039 5F5F464C 		.ascii	"__FLT_MANT_DIG__ 24\000"
 15418      545F4D41 
 15418      4E545F44 
 15418      49475F5F 
 15418      20323400 
 15419              	.LASF1141:
 15420 504d 6C697374 		.ascii	"listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { List_t "
 15420      4745545F 
 15420      4F574E45 
 15420      525F4F46 
 15420      5F4E4558 
 15421 5080 2A20636F 		.ascii	"* const pxConstList = ( pxList ); ( pxConstList )->"
 15421      6E737420 
 15421      7078436F 
 15421      6E73744C 
 15421      69737420 
 15422 50b3 7078496E 		.ascii	"pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( v"
 15422      64657820 
 15422      3D202820 
 15422      7078436F 
 15422      6E73744C 
 15423 50e6 6F696420 		.ascii	"oid * ) ( pxConstList )->pxIndex == ( void * ) &( ("
 15423      2A202920 
 15423      28207078 
 15423      436F6E73 
 15423      744C6973 
 15424 5119 20707843 		.ascii	" pxConstList )->xListEnd ) ) { ( pxConstList )->pxI"
ARM GAS  /tmp/ccTV2SzP.s 			page 387


 15424      6F6E7374 
 15424      4C697374 
 15424      20292D3E 
 15424      784C6973 
 15425 514c 6E646578 		.ascii	"ndex = ( pxConstList )->pxIndex->pxNext; } ( pxTCB "
 15425      203D2028 
 15425      20707843 
 15425      6F6E7374 
 15425      4C697374 
 15426 517f 29203D20 		.ascii	") = ( pxConstList )->pxIndex->pvOwner; }\000"
 15426      28207078 
 15426      436F6E73 
 15426      744C6973 
 15426      7420292D 
 15427              	.LASF609:
 15428 51a8 5F52414E 		.ascii	"_RAND48_SEED_1 (0xabcd)\000"
 15428      4434385F 
 15428      53454544 
 15428      5F312028 
 15428      30786162 
 15429              	.LASF56:
 15430 51c0 5F5F494E 		.ascii	"__INT_FAST32_TYPE__ int\000"
 15430      545F4641 
 15430      53543332 
 15430      5F545950 
 15430      455F5F20 
 15431              	.LASF811:
 15432 51d8 696E7420 		.ascii	"int +2\000"
 15432      2B3200
 15433              	.LASF893:
 15434 51df 55494E54 		.ascii	"UINTMAX_MAX (__UINTMAX_MAX__)\000"
 15434      4D41585F 
 15434      4D415820 
 15434      285F5F55 
 15434      494E544D 
 15435              	.LASF1039:
 15436 51fd 74726163 		.ascii	"traceCREATE_MUTEX(pxNewQueue) \000"
 15436      65435245 
 15436      4154455F 
 15436      4D555445 
 15436      58287078 
 15437              	.LASF559:
 15438 521c 5F5F5F69 		.ascii	"___int_ptrdiff_t_h \000"
 15438      6E745F70 
 15438      74726469 
 15438      66665F74 
 15438      5F682000 
 15439              	.LASF1409:
 15440 5230 70784D75 		.ascii	"pxMutexHolder\000"
 15440      74657848 
 15440      6F6C6465 
 15440      7200
 15441              	.LASF728:
 15442 523e 5F5F6E6F 		.ascii	"__nonnull(x) __attribute__((__nonnull__(x)))\000"
 15442      6E6E756C 
 15442      6C287829 
 15442      205F5F61 
ARM GAS  /tmp/ccTV2SzP.s 			page 388


 15442      74747269 
 15443              	.LASF695:
 15444 526b 5F5F4343 		.ascii	"__CC_SUPPORTS___FUNC__ 1\000"
 15444      5F535550 
 15444      504F5254 
 15444      535F5F5F 
 15444      46554E43 
 15445              	.LASF1164:
 15446 5284 746D7243 		.ascii	"tmrCOMMAND_START_DONT_TRACE ( ( BaseT_t ) 0 )\000"
 15446      4F4D4D41 
 15446      4E445F53 
 15446      54415254 
 15446      5F444F4E 
 15447              	.LASF933:
 15448 52b2 636F6E66 		.ascii	"configUSE_RECURSIVE_MUTEXES 1\000"
 15448      69675553 
 15448      455F5245 
 15448      43555253 
 15448      4956455F 
 15449              	.LASF1230:
 15450 52d0 5F426967 		.ascii	"_Bigint\000"
 15450      696E7400 
 15451              	.LASF776:
 15452 52d8 5F5F6173 		.ascii	"__asserts_exclusive(...) __lock_annotate(assert_exc"
 15452      73657274 
 15452      735F6578 
 15452      636C7573 
 15452      69766528 
 15453 530b 6C757369 		.ascii	"lusive_lock(__VA_ARGS__))\000"
 15453      76655F6C 
 15453      6F636B28 
 15453      5F5F5641 
 15453      5F415247 
 15454              	.LASF821:
 15455 5325 5F5F4641 		.ascii	"__FAST32 \000"
 15455      53543332 
 15455      2000
 15456              	.LASF554:
 15457 532f 5F545F50 		.ascii	"_T_PTRDIFF_ \000"
 15457      54524449 
 15457      46465F20 
 15457      00
 15458              	.LASF183:
 15459 533c 5F5F4C44 		.ascii	"__LDBL_DENORM_MIN__ 4.9406564584124654e-324L\000"
 15459      424C5F44 
 15459      454E4F52 
 15459      4D5F4D49 
 15459      4E5F5F20 
 15460              	.LASF1181:
 15461 5369 7854696D 		.ascii	"xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken)"
 15461      65725374 
 15461      6F704672 
 15461      6F6D4953 
 15461      52287854 
 15462 539c 20785469 		.ascii	" xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_"
 15462      6D657247 
 15462      656E6572 
ARM GAS  /tmp/ccTV2SzP.s 			page 389


 15462      6963436F 
 15462      6D6D616E 
 15463 53cf 46524F4D 		.ascii	"FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )\000"
 15463      5F495352 
 15463      2C20302C 
 15463      20282070 
 15463      78486967 
 15464              	.LASF1227:
 15465 5400 5F6D6178 		.ascii	"_maxwds\000"
 15465      77647300 
 15466              	.LASF392:
 15467 5408 5F5F4152 		.ascii	"__ARM_FEATURE_SAT 1\000"
 15467      4D5F4645 
 15467      41545552 
 15467      455F5341 
 15467      54203100 
 15468              	.LASF1424:
 15469 541c 70784669 		.ascii	"pxFirstTCB\000"
 15469      72737454 
 15469      434200
 15470              	.LASF492:
 15471 5427 5F534947 		.ascii	"_SIGNED signed\000"
 15471      4E454420 
 15471      7369676E 
 15471      656400
 15472              	.LASF833:
 15473 5436 5F5F696E 		.ascii	"__int16_t_defined 1\000"
 15473      7431365F 
 15473      745F6465 
 15473      66696E65 
 15473      64203100 
 15474              	.LASF286:
 15475 544a 5F5F554C 		.ascii	"__ULLFRACT_IBIT__ 0\000"
 15475      4C465241 
 15475      43545F49 
 15475      4249545F 
 15475      5F203000 
 15476              	.LASF552:
 15477 545e 5F414E53 		.ascii	"_ANSI_STDDEF_H \000"
 15477      495F5354 
 15477      44444546 
 15477      5F482000 
 15478              	.LASF627:
 15479 546e 5F524545 		.ascii	"_REENT_CHECK_SIGNAL_BUF(ptr) \000"
 15479      4E545F43 
 15479      4845434B 
 15479      5F534947 
 15479      4E414C5F 
 15480              	.LASF597:
 15481 548c 5F5F6E65 		.ascii	"__need_wint_t\000"
 15481      65645F77 
 15481      696E745F 
 15481      7400
 15482              	.LASF1170:
 15483 549a 746D7246 		.ascii	"tmrFIRST_FROM_ISR_COMMAND ( ( BaseT_t ) 6 )\000"
 15483      49525354 
 15483      5F46524F 
ARM GAS  /tmp/ccTV2SzP.s 			page 390


 15483      4D5F4953 
 15483      525F434F 
 15484              	.LASF1279:
 15485 54c6 5F5F636C 		.ascii	"__cleanup\000"
 15485      65616E75 
 15485      7000
 15486              	.LASF1457:
 15487 54d0 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 15487      6B506C61 
 15487      63654F6E 
 15487      4576656E 
 15487      744C6973 
 15488              	.LASF1287:
 15489 54e6 5F617465 		.ascii	"_atexit0\000"
 15489      78697430 
 15489      00
 15490              	.LASF607:
 15491 54ef 5F524545 		.ascii	"_REENT_SMALL_CHECK_INIT(ptr) \000"
 15491      4E545F53 
 15491      4D414C4C 
 15491      5F434845 
 15491      434B5F49 
 15492              	.LASF928:
 15493 550d 636F6E66 		.ascii	"configUSE_MUTEXES 1\000"
 15493      69675553 
 15493      455F4D55 
 15493      54455845 
 15493      53203100 
 15494              	.LASF586:
 15495 5521 5F5F6C6F 		.ascii	"__lock_acquire(lock) (_CAST_VOID 0)\000"
 15495      636B5F61 
 15495      63717569 
 15495      7265286C 
 15495      6F636B29 
 15496              	.LASF1123:
 15497 5545 706F7274 		.ascii	"portTICK_RATE_MS portTICK_PERIOD_MS\000"
 15497      5449434B 
 15497      5F524154 
 15497      455F4D53 
 15497      20706F72 
 15498              	.LASF1112:
 15499 5569 78517565 		.ascii	"xQueueHandle QueueHandle_t\000"
 15499      75654861 
 15499      6E646C65 
 15499      20517565 
 15499      75654861 
 15500              	.LASF1442:
 15501 5584 76546173 		.ascii	"vTaskSetTaskNumber\000"
 15501      6B536574 
 15501      5461736B 
 15501      4E756D62 
 15501      657200
 15502              	.LASF704:
 15503 5597 5F5F636F 		.ascii	"__const const\000"
 15503      6E737420 
 15503      636F6E73 
 15503      7400
ARM GAS  /tmp/ccTV2SzP.s 			page 391


 15504              	.LASF715:
 15505 55a5 5F5F616C 		.ascii	"__alloc_size(x) __attribute__((__alloc_size__(x)))\000"
 15505      6C6F635F 
 15505      73697A65 
 15505      28782920 
 15505      5F5F6174 
 15506              	.LASF922:
 15507 55d8 636F6E66 		.ascii	"configTOTAL_HEAP_SIZE ( ( size_t ) ( 8 * 1024 ) )\000"
 15507      6967544F 
 15507      54414C5F 
 15507      48454150 
 15507      5F53495A 
 15508              	.LASF81:
 15509 560a 5F5F4C4F 		.ascii	"__LONG_WIDTH__ 32\000"
 15509      4E475F57 
 15509      49445448 
 15509      5F5F2033 
 15509      3200
 15510              	.LASF1360:
 15511 561c 70764261 		.ascii	"pvBaseAddress\000"
 15511      73654164 
 15511      64726573 
 15511      7300
 15512              	.LASF151:
 15513 562a 5F5F464C 		.ascii	"__FLT_MAX__ 3.4028234663852886e+38F\000"
 15513      545F4D41 
 15513      585F5F20 
 15513      332E3430 
 15513      32383233 
 15514              	.LASF305:
 15515 564e 5F5F5541 		.ascii	"__UACCUM_FBIT__ 16\000"
 15515      4343554D 
 15515      5F464249 
 15515      545F5F20 
 15515      313600
 15516              	.LASF751:
 15517 5661 5F5F7761 		.ascii	"__warn_references(sym,msg) __asm__(\".section .gnu."
 15517      726E5F72 
 15517      65666572 
 15517      656E6365 
 15517      73287379 
 15518 5693 7761726E 		.ascii	"warning.\" #sym); __asm__(\".asciz \\\"\" msg \"\\\""
 15518      696E672E 
 15518      22202373 
 15518      796D293B 
 15518      205F5F61 
 15519 56bf 22293B20 		.ascii	"\"); __asm__(\".previous\")\000"
 15519      5F5F6173 
 15519      6D5F5F28 
 15519      222E7072 
 15519      6576696F 
 15520              	.LASF269:
 15521 56d8 5F5F5546 		.ascii	"__UFRACT_EPSILON__ 0x1P-16UR\000"
 15521      52414354 
 15521      5F455053 
 15521      494C4F4E 
 15521      5F5F2030 
ARM GAS  /tmp/ccTV2SzP.s 			page 392


 15522              	.LASF73:
 15523 56f5 5F5F5743 		.ascii	"__WCHAR_MIN__ 0U\000"
 15523      4841525F 
 15523      4D494E5F 
 15523      5F203055 
 15523      00
 15524              	.LASF1339:
 15525 5706 7076436F 		.ascii	"pvContainer\000"
 15525      6E746169 
 15525      6E657200 
 15526              	.LASF1129:
 15527 5712 4C495354 		.ascii	"LIST_H \000"
 15527      5F482000 
 15528              	.LASF438:
 15529 571a 5F4E4557 		.ascii	"_NEWLIB_VERSION_H__ 1\000"
 15529      4C49425F 
 15529      56455253 
 15529      494F4E5F 
 15529      485F5F20 
 15530              	.LASF381:
 15531 5730 5F5F4743 		.ascii	"__GCC_ATOMIC_LONG_LOCK_FREE 2\000"
 15531      435F4154 
 15531      4F4D4943 
 15531      5F4C4F4E 
 15531      475F4C4F 
 15532              	.LASF317:
 15533 574e 5F5F554C 		.ascii	"__ULACCUM_MIN__ 0.0ULK\000"
 15533      41434355 
 15533      4D5F4D49 
 15533      4E5F5F20 
 15533      302E3055 
 15534              	.LASF447:
 15535 5765 5F415445 		.ascii	"_ATEXIT_DYNAMIC_ALLOC 1\000"
 15535      5849545F 
 15535      44594E41 
 15535      4D49435F 
 15535      414C4C4F 
 15536              	.LASF1211:
 15537 577d 5F5F7569 		.ascii	"__uint32_t\000"
 15537      6E743332 
 15537      5F7400
 15538              	.LASF1470:
 15539 5788 75785361 		.ascii	"uxSavedInterruptStatus\000"
 15539      76656449 
 15539      6E746572 
 15539      72757074 
 15539      53746174 
 15540              	.LASF405:
 15541 579f 5F5F4152 		.ascii	"__ARM_ARCH 7\000"
 15541      4D5F4152 
 15541      43482037 
 15541      00
 15542              	.LASF1171:
 15543 57ac 746D7243 		.ascii	"tmrCOMMAND_START_FROM_ISR ( ( BaseT_t ) 6 )\000"
 15543      4F4D4D41 
 15543      4E445F53 
 15543      54415254 
ARM GAS  /tmp/ccTV2SzP.s 			page 393


 15543      5F46524F 
 15544              	.LASF518:
 15545 57d8 5F53495A 		.ascii	"_SIZE_T_ \000"
 15545      455F545F 
 15545      2000
 15546              	.LASF493:
 15547 57e2 5F444F54 		.ascii	"_DOTS , ...\000"
 15547      53202C20 
 15547      2E2E2E00 
 15548              	.LASF143:
 15549 57ee 5F5F464C 		.ascii	"__FLT_RADIX__ 2\000"
 15549      545F5241 
 15549      4449585F 
 15549      5F203200 
 15550              	.LASF199:
 15551 57fe 5F5F464C 		.ascii	"__FLT32_HAS_INFINITY__ 1\000"
 15551      5433325F 
 15551      4841535F 
 15551      494E4649 
 15551      4E495459 
 15552              	.LASF631:
 15553 5817 5F524545 		.ascii	"_REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._m"
 15553      4E545F52 
 15553      414E4434 
 15553      385F4D55 
 15553      4C542870 
 15554 584a 756C7429 		.ascii	"ult)\000"
 15554      00
 15555              	.LASF514:
 15556 584f 5F535953 		.ascii	"_SYS_SIZE_T_H \000"
 15556      5F53495A 
 15556      455F545F 
 15556      482000
 15557              	.LASF874:
 15558 585e 494E5436 		.ascii	"INT64_MAX (__INT64_MAX__)\000"
 15558      345F4D41 
 15558      5820285F 
 15558      5F494E54 
 15558      36345F4D 
 15559              	.LASF934:
 15560 5878 636F6E66 		.ascii	"configQUEUE_REGISTRY_SIZE 10\000"
 15560      69675155 
 15560      4555455F 
 15560      52454749 
 15560      53545259 
 15561              	.LASF1114:
 15562 5895 78517565 		.ascii	"xQueueSetHandle QueueSetHandle_t\000"
 15562      75655365 
 15562      7448616E 
 15562      646C6520 
 15562      51756575 
 15563              	.LASF869:
 15564 58b6 55494E54 		.ascii	"UINT32_MAX (__UINT32_MAX__)\000"
 15564      33325F4D 
 15564      41582028 
 15564      5F5F5549 
 15564      4E543332 
ARM GAS  /tmp/ccTV2SzP.s 			page 394


 15565              	.LASF529:
 15566 58d2 5F5F7763 		.ascii	"__wchar_t__ \000"
 15566      6861725F 
 15566      745F5F20 
 15566      00
 15567              	.LASF973:
 15568 58df 706F7274 		.ascii	"portSHORT short\000"
 15568      53484F52 
 15568      54207368 
 15568      6F727400 
 15569              	.LASF186:
 15570 58ef 5F5F4C44 		.ascii	"__LDBL_HAS_QUIET_NAN__ 1\000"
 15570      424C5F48 
 15570      41535F51 
 15570      55494554 
 15570      5F4E414E 
 15571              	.LASF548:
 15572 5908 5F5F6E65 		.ascii	"__need_NULL\000"
 15572      65645F4E 
 15572      554C4C00 
 15573              	.LASF1481:
 15574 5914 78596965 		.ascii	"xYieldRequired\000"
 15574      6C645265 
 15574      71756972 
 15574      656400
 15575              	.LASF82:
 15576 5923 5F5F4C4F 		.ascii	"__LONG_LONG_WIDTH__ 64\000"
 15576      4E475F4C 
 15576      4F4E475F 
 15576      57494454 
 15576      485F5F20 
 15577              	.LASF1293:
 15578 593a 5F6E696F 		.ascii	"_niobs\000"
 15578      627300
 15579              	.LASF1419:
 15580 5941 7072764C 		.ascii	"prvListTaskWithinSingleList\000"
 15580      69737454 
 15580      61736B57 
 15580      69746869 
 15580      6E53696E 
 15581              	.LASF134:
 15582 595d 5F5F5549 		.ascii	"__UINT_FAST64_MAX__ 0xffffffffffffffffULL\000"
 15582      4E545F46 
 15582      41535436 
 15582      345F4D41 
 15582      585F5F20 
 15583              	.LASF943:
 15584 5987 494E434C 		.ascii	"INCLUDE_uxTaskGetStackHighWaterMark 1\000"
 15584      5544455F 
 15584      75785461 
 15584      736B4765 
 15584      74537461 
 15585              	.LASF414:
 15586 59ad 5F5F4152 		.ascii	"__ARM_FP\000"
 15586      4D5F4650 
 15586      00
 15587              	.LASF351:
ARM GAS  /tmp/ccTV2SzP.s 			page 395


 15588 59b6 5F5F4841 		.ascii	"__HA_IBIT__ 8\000"
 15588      5F494249 
 15588      545F5F20 
 15588      3800
 15589              	.LASF390:
 15590 59c4 5F5F4152 		.ascii	"__ARM_FEATURE_DSP\000"
 15590      4D5F4645 
 15590      41545552 
 15590      455F4453 
 15590      5000
 15591              	.LASF136:
 15592 59d6 5F5F494E 		.ascii	"__INTPTR_WIDTH__ 32\000"
 15592      54505452 
 15592      5F574944 
 15592      54485F5F 
 15592      20333200 
 15593              	.LASF382:
 15594 59ea 5F5F4743 		.ascii	"__GCC_ATOMIC_LLONG_LOCK_FREE 1\000"
 15594      435F4154 
 15594      4F4D4943 
 15594      5F4C4C4F 
 15594      4E475F4C 
 15595              	.LASF978:
 15596 5a09 706F7274 		.ascii	"portTICK_PERIOD_MS ( ( TickType_t ) 1000 / configTI"
 15596      5449434B 
 15596      5F504552 
 15596      494F445F 
 15596      4D532028 
 15597 5a3c 434B5F52 		.ascii	"CK_RATE_HZ )\000"
 15597      4154455F 
 15597      485A2029 
 15597      00
 15598              	.LASF223:
 15599 5a49 5F5F464C 		.ascii	"__FLT32X_MIN__ 2.2250738585072014e-308F32x\000"
 15599      54333258 
 15599      5F4D494E 
 15599      5F5F2032 
 15599      2E323235 
 15600              	.LASF1319:
 15601 5a74 5F6E6D61 		.ascii	"_nmalloc\000"
 15601      6C6C6F63 
 15601      00
 15602              	.LASF205:
 15603 5a7d 5F5F464C 		.ascii	"__FLT64_MAX_EXP__ 1024\000"
 15603      5436345F 
 15603      4D41585F 
 15603      4558505F 
 15603      5F203130 
 15604              	.LASF427:
 15605 5a94 5F5F4152 		.ascii	"__ARM_EABI__ 1\000"
 15605      4D5F4541 
 15605      42495F5F 
 15605      203100
 15606              	.LASF455:
 15607 5aa3 5F5F5359 		.ascii	"__SYS_CONFIG_H__ \000"
 15607      535F434F 
 15607      4E464947 
ARM GAS  /tmp/ccTV2SzP.s 			page 396


 15607      5F485F5F 
 15607      2000
 15608              	.LASF792:
 15609 5ab5 4D425F43 		.ascii	"MB_CUR_MAX __locale_mb_cur_max()\000"
 15609      55525F4D 
 15609      4158205F 
 15609      5F6C6F63 
 15609      616C655F 
 15610              	.LASF209:
 15611 5ad6 5F5F464C 		.ascii	"__FLT64_MIN__ 2.2250738585072014e-308F64\000"
 15611      5436345F 
 15611      4D494E5F 
 15611      5F20322E 
 15611      32323530 
 15612              	.LASF687:
 15613 5aff 5F5F474E 		.ascii	"__GNUC_VA_LIST_COMPATIBILITY 1\000"
 15613      55435F56 
 15613      415F4C49 
 15613      53545F43 
 15613      4F4D5041 
 15614              	.LASF88:
 15615 5b1e 5F5F494E 		.ascii	"__INTMAX_C(c) c ## LL\000"
 15615      544D4158 
 15615      5F432863 
 15615      29206320 
 15615      2323204C 
 15616              	.LASF1303:
 15617 5b34 5F67616D 		.ascii	"_gamma_signgam\000"
 15617      6D615F73 
 15617      69676E67 
 15617      616D00
 15618              	.LASF449:
 15619 5b43 5F484156 		.ascii	"_HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1\000"
 15619      455F4343 
 15619      5F494E48 
 15619      49424954 
 15619      5F4C4F4F 
 15620              	.LASF766:
 15621 5b66 5F5F4E55 		.ascii	"__NULLABILITY_PRAGMA_POP \000"
 15621      4C4C4142 
 15621      494C4954 
 15621      595F5052 
 15621      41474D41 
 15622              	.LASF84:
 15623 5b80 5F5F5749 		.ascii	"__WINT_WIDTH__ 32\000"
 15623      4E545F57 
 15623      49445448 
 15623      5F5F2033 
 15623      3200
 15624              	.LASF41:
 15625 5b92 5F5F494E 		.ascii	"__INT64_TYPE__ long long int\000"
 15625      5436345F 
 15625      54595045 
 15625      5F5F206C 
 15625      6F6E6720 
 15626              	.LASF1502:
 15627 5baf 474E5520 		.ascii	"GNU C89 7.1.0 -mcpu=cortex-m3 -mthumb -g -ggdb3 -O0"
ARM GAS  /tmp/ccTV2SzP.s 			page 397


 15627      43383920 
 15627      372E312E 
 15627      30202D6D 
 15627      6370753D 
 15628 5be2 202D7374 		.ascii	" -std=gnu90 -ffunction-sections -fdata-sections\000"
 15628      643D676E 
 15628      75393020 
 15628      2D666675 
 15628      6E637469 
 15629              	.LASF21:
 15630 5c12 5F5F4348 		.ascii	"__CHAR_BIT__ 8\000"
 15630      41525F42 
 15630      49545F5F 
 15630      203800
 15631              	.LASF980:
 15632 5c21 706F7274 		.ascii	"portNVIC_INT_CTRL_REG ( * ( ( volatile uint32_t * )"
 15632      4E564943 
 15632      5F494E54 
 15632      5F435452 
 15632      4C5F5245 
 15633 5c54 20307865 		.ascii	" 0xe000ed04 ) )\000"
 15633      30303065 
 15633      64303420 
 15633      29202900 
 15634              	.LASF387:
 15635 5c64 5F5F5349 		.ascii	"__SIZEOF_WCHAR_T__ 4\000"
 15635      5A454F46 
 15635      5F574348 
 15635      41525F54 
 15635      5F5F2034 
 15636              	.LASF1334:
 15637 5c79 784C4953 		.ascii	"xLIST_ITEM\000"
 15637      545F4954 
 15637      454D00
 15638              	.LASF608:
 15639 5c84 5F52414E 		.ascii	"_RAND48_SEED_0 (0x330e)\000"
 15639      4434385F 
 15639      53454544 
 15639      5F302028 
 15639      30783333 
 15640              	.LASF468:
 15641 5c9c 5F5F4253 		.ascii	"__BSD_VISIBLE 1\000"
 15641      445F5649 
 15641      5349424C 
 15641      45203100 
 15642              	.LASF864:
 15643 5cac 494E545F 		.ascii	"INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)\000"
 15643      4C454153 
 15643      5431365F 
 15643      4D494E20 
 15643      282D5F5F 
 15644              	.LASF710:
 15645 5cd7 5F5F756E 		.ascii	"__unused __attribute__((__unused__))\000"
 15645      75736564 
 15645      205F5F61 
 15645      74747269 
 15645      62757465 
ARM GAS  /tmp/ccTV2SzP.s 			page 398


 15646              	.LASF1056:
 15647 5cfc 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) \000"
 15647      65515545 
 15647      55455F52 
 15647      45434549 
 15647      56455F46 
 15648              	.LASF729:
 15649 5d29 5F5F6E6F 		.ascii	"__nonnull_all __attribute__((__nonnull__))\000"
 15649      6E6E756C 
 15649      6C5F616C 
 15649      6C205F5F 
 15649      61747472 
 15650              	.LASF215:
 15651 5d54 5F5F464C 		.ascii	"__FLT32X_MANT_DIG__ 53\000"
 15651      54333258 
 15651      5F4D414E 
 15651      545F4449 
 15651      475F5F20 
 15652              	.LASF1283:
 15653 5d6b 5F667265 		.ascii	"_freelist\000"
 15653      656C6973 
 15653      7400
 15654              	.LASF268:
 15655 5d75 5F5F5546 		.ascii	"__UFRACT_MAX__ 0XFFFFP-16UR\000"
 15655      52414354 
 15655      5F4D4158 
 15655      5F5F2030 
 15655      58464646 
 15656              	.LASF644:
 15657 5d91 5F524545 		.ascii	"_REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrle"
 15657      4E545F4D 
 15657      42524C45 
 15657      4E5F5354 
 15657      41544528 
 15658 5dc4 6E5F7374 		.ascii	"n_state)\000"
 15658      61746529 
 15658      00
 15659              	.LASF1294:
 15660 5dcd 5F696F62 		.ascii	"_iobs\000"
 15660      7300
 15661              	.LASF718:
 15662 5dd3 5F416C69 		.ascii	"_Alignof(x) __alignof(x)\000"
 15662      676E6F66 
 15662      28782920 
 15662      5F5F616C 
 15662      69676E6F 
 15663              	.LASF661:
 15664 5dec 5F5F5448 		.ascii	"__THROW \000"
 15664      524F5720 
 15664      00
 15665              	.LASF1292:
 15666 5df5 5F676C75 		.ascii	"_glue\000"
 15666      6500
 15667              	.LASF358:
 15668 5dfb 5F5F5548 		.ascii	"__UHA_FBIT__ 8\000"
 15668      415F4642 
 15668      49545F5F 
ARM GAS  /tmp/ccTV2SzP.s 			page 399


 15668      203800
 15669              	.LASF1228:
 15670 5e0a 5F736967 		.ascii	"_sign\000"
 15670      6E00
 15671              	.LASF109:
 15672 5e10 5F5F494E 		.ascii	"__INT_LEAST32_MAX__ 0x7fffffffL\000"
 15672      545F4C45 
 15672      41535433 
 15672      325F4D41 
 15672      585F5F20 
 15673              	.LASF251:
 15674 5e30 5F5F5346 		.ascii	"__SFRACT_IBIT__ 0\000"
 15674      52414354 
 15674      5F494249 
 15674      545F5F20 
 15674      3000
 15675              	.LASF649:
 15676 5e42 5F524545 		.ascii	"_REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)"
 15676      4E545F4C 
 15676      3634415F 
 15676      42554628 
 15676      70747229 
 15677 5e75 00       		.ascii	"\000"
 15678              	.LASF466:
 15679 5e76 5F415446 		.ascii	"_ATFILE_SOURCE 1\000"
 15679      494C455F 
 15679      534F5552 
 15679      43452031 
 15679      00
 15680              	.LASF800:
 15681 5e87 5F5F5354 		.ascii	"__STDINT_EXP(x) __ ##x ##__\000"
 15681      44494E54 
 15681      5F455850 
 15681      28782920 
 15681      5F5F2023 
 15682              	.LASF567:
 15683 5ea3 5F5F4558 		.ascii	"__EXP(x) __ ##x ##__\000"
 15683      50287829 
 15683      205F5F20 
 15683      23237820 
 15683      23235F5F 
 15684              	.LASF26:
 15685 5eb8 5F5F4259 		.ascii	"__BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 15685      54455F4F 
 15685      52444552 
 15685      5F5F205F 
 15685      5F4F5244 
 15686              	.LASF196:
 15687 5edf 5F5F464C 		.ascii	"__FLT32_EPSILON__ 1.1920928955078125e-7F32\000"
 15687      5433325F 
 15687      45505349 
 15687      4C4F4E5F 
 15687      5F20312E 
 15688              	.LASF1386:
 15689 5f0a 70785265 		.ascii	"pxReadyTasksLists\000"
 15689      61647954 
 15689      61736B73 
ARM GAS  /tmp/ccTV2SzP.s 			page 400


 15689      4C697374 
 15689      7300
 15690              	.LASF486:
 15691 5f1c 5F4E4F54 		.ascii	"_NOTHROW \000"
 15691      48524F57 
 15691      2000
 15692              	.LASF553:
 15693 5f26 5F505452 		.ascii	"_PTRDIFF_T \000"
 15693      44494646 
 15693      5F542000 
 15694              	.LASF436:
 15695 5f32 5F414E53 		.ascii	"_ANSIDECL_H_ \000"
 15695      49444543 
 15695      4C5F485F 
 15695      2000
 15696              	.LASF977:
 15697 5f40 706F7274 		.ascii	"portSTACK_GROWTH ( -1 )\000"
 15697      53544143 
 15697      4B5F4752 
 15697      4F575448 
 15697      2028202D 
 15698              	.LASF990:
 15699 5f58 706F7274 		.ascii	"portEXIT_CRITICAL() vPortExitCritical()\000"
 15699      45584954 
 15699      5F435249 
 15699      54494341 
 15699      4C282920 
 15700              	.LASF1349:
 15701 5f80 6552756E 		.ascii	"eRunning\000"
 15701      6E696E67 
 15701      00
 15702              	.LASF473:
 15703 5f89 5F5F504F 		.ascii	"__POSIX_VISIBLE 200809\000"
 15703      5349585F 
 15703      56495349 
 15703      424C4520 
 15703      32303038 
 15704              	.LASF1113:
 15705 5fa0 7853656D 		.ascii	"xSemaphoreHandle SemaphoreHandle_t\000"
 15705      6170686F 
 15705      72654861 
 15705      6E646C65 
 15705      2053656D 
 15706              	.LASF1195:
 15707 5fc3 7461736B 		.ascii	"taskRECORD_READY_PRIORITY(uxPriority) portRECORD_RE"
 15707      5245434F 
 15707      52445F52 
 15707      45414459 
 15707      5F505249 
 15708 5ff6 4144595F 		.ascii	"ADY_PRIORITY( uxPriority, uxTopReadyPriority )\000"
 15708      5052494F 
 15708      52495459 
 15708      28207578 
 15708      5072696F 
 15709              	.LASF1029:
 15710 6025 74726163 		.ascii	"traceLOW_POWER_IDLE_BEGIN() \000"
 15710      654C4F57 
ARM GAS  /tmp/ccTV2SzP.s 			page 401


 15710      5F504F57 
 15710      45525F49 
 15710      444C455F 
 15711              	.LASF32:
 15712 6042 5F5F5749 		.ascii	"__WINT_TYPE__ unsigned int\000"
 15712      4E545F54 
 15712      5950455F 
 15712      5F20756E 
 15712      7369676E 
 15713              	.LASF1128:
 15714 605d 494E435F 		.ascii	"INC_TASK_H \000"
 15714      5441534B 
 15714      5F482000 
 15715              	.LASF346:
 15716 6069 5F5F5544 		.ascii	"__UDQ_FBIT__ 64\000"
 15716      515F4642 
 15716      49545F5F 
 15716      20363400 
 15717              	.LASF840:
 15718 6079 5F494E54 		.ascii	"_INTMAX_T_DECLARED \000"
 15718      4D41585F 
 15718      545F4445 
 15718      434C4152 
 15718      45442000 
 15719              	.LASF691:
 15720 608d 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_MEMCPY 1\000"
 15720      55434C49 
 15720      4B455F42 
 15720      55494C54 
 15720      494E5F4D 
 15721              	.LASF177:
 15722 60a9 5F5F4C44 		.ascii	"__LDBL_MAX_10_EXP__ 308\000"
 15722      424C5F4D 
 15722      41585F31 
 15722      305F4558 
 15722      505F5F20 
 15723              	.LASF930:
 15724 60c1 636F6E66 		.ascii	"configUSE_COUNTING_SEMAPHORES 1\000"
 15724      69675553 
 15724      455F434F 
 15724      554E5449 
 15724      4E475F53 
 15725              	.LASF1147:
 15726 60e1 74736B4B 		.ascii	"tskKERNEL_VERSION_MAJOR 8\000"
 15726      45524E45 
 15726      4C5F5645 
 15726      5253494F 
 15726      4E5F4D41 
 15727              	.LASF996:
 15728 60fb 706F7274 		.ascii	"portRESET_READY_PRIORITY(uxPriority,uxReadyPrioriti"
 15728      52455345 
 15728      545F5245 
 15728      4144595F 
 15728      5052494F 
 15729 612e 65732920 		.ascii	"es) ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority"
 15729      28207578 
 15729      52656164 
ARM GAS  /tmp/ccTV2SzP.s 			page 402


 15729      79507269 
 15729      6F726974 
 15730 6161 20292029 		.ascii	" ) )\000"
 15730      00
 15731              	.LASF168:
 15732 6166 5F5F4442 		.ascii	"__DBL_DENORM_MIN__ ((double)4.9406564584124654e-324"
 15732      4C5F4445 
 15732      4E4F524D 
 15732      5F4D494E 
 15732      5F5F2028 
 15733 6199 4C2900   		.ascii	"L)\000"
 15734              	.LASF1268:
 15735 619c 5F666C61 		.ascii	"_flags2\000"
 15735      67733200 
 15736              	.LASF1097:
 15737 61a4 636F6E66 		.ascii	"configUSE_TICKLESS_IDLE 0\000"
 15737      69675553 
 15737      455F5449 
 15737      434B4C45 
 15737      53535F49 
 15738              	.LASF856:
 15739 61be 494E5438 		.ascii	"INT8_MAX (__INT8_MAX__)\000"
 15739      5F4D4158 
 15739      20285F5F 
 15739      494E5438 
 15739      5F4D4158 
 15740              	.LASF838:
 15741 61d6 5F55494E 		.ascii	"_UINT64_T_DECLARED \000"
 15741      5436345F 
 15741      545F4445 
 15741      434C4152 
 15741      45442000 
 15742              	.LASF1275:
 15743 61ea 5F656D65 		.ascii	"_emergency\000"
 15743      7267656E 
 15743      637900
 15744              	.LASF1107:
 15745 61f5 706F7274 		.ascii	"portASSERT_IF_IN_ISR() \000"
 15745      41535345 
 15745      52545F49 
 15745      465F494E 
 15745      5F495352 
 15746              	.LASF1202:
 15747 620d 756E7369 		.ascii	"unsigned int\000"
 15747      676E6564 
 15747      20696E74 
 15747      00
 15748              	.LASF520:
 15749 621a 5F53495A 		.ascii	"_SIZE_T_DEFINED_ \000"
 15749      455F545F 
 15749      44454649 
 15749      4E45445F 
 15749      2000
 15750              	.LASF263:
 15751 622c 5F5F4652 		.ascii	"__FRACT_MAX__ 0X7FFFP-15R\000"
 15751      4143545F 
 15751      4D41585F 
ARM GAS  /tmp/ccTV2SzP.s 			page 403


 15751      5F203058 
 15751      37464646 
 15752              	.LASF823:
 15753 6246 5F5F4C45 		.ascii	"__LEAST8 \"hh\"\000"
 15753      41535438 
 15753      20226868 
 15753      2200
 15754              	.LASF146:
 15755 6254 5F5F464C 		.ascii	"__FLT_MIN_EXP__ (-125)\000"
 15755      545F4D49 
 15755      4E5F4558 
 15755      505F5F20 
 15755      282D3132 
 15756              	.LASF214:
 15757 626b 5F5F464C 		.ascii	"__FLT64_HAS_QUIET_NAN__ 1\000"
 15757      5436345F 
 15757      4841535F 
 15757      51554945 
 15757      545F4E41 
 15758              	.LASF908:
 15759 6285 55494E54 		.ascii	"UINT32_C(x) __UINT32_C(x)\000"
 15759      33325F43 
 15759      28782920 
 15759      5F5F5549 
 15759      4E543332 
 15760              	.LASF945:
 15761 629f 636F6E66 		.ascii	"configIP_ADDR1 168\000"
 15761      69674950 
 15761      5F414444 
 15761      52312031 
 15761      363800
 15762              	.LASF1478:
 15763 62b2 76546173 		.ascii	"vTaskStartScheduler\000"
 15763      6B537461 
 15763      72745363 
 15763      68656475 
 15763      6C657200 
 15764              	.LASF296:
 15765 62c6 5F5F5553 		.ascii	"__USACCUM_IBIT__ 8\000"
 15765      41434355 
 15765      4D5F4942 
 15765      49545F5F 
 15765      203800
 15766              	.LASF913:
 15767 62d9 5F474343 		.ascii	"_GCC_WRAP_STDINT_H \000"
 15767      5F575241 
 15767      505F5354 
 15767      44494E54 
 15767      5F482000 
 15768              	.LASF1154:
 15769 62ed 7461736B 		.ascii	"taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()\000"
 15769      44495341 
 15769      424C455F 
 15769      494E5445 
 15769      52525550 
 15770              	.LASF734:
 15771 631f 5F5F7265 		.ascii	"__restrict \000"
ARM GAS  /tmp/ccTV2SzP.s 			page 404


 15771      73747269 
 15771      63742000 
 15772              	.LASF736:
 15773 632b 5F5F7072 		.ascii	"__predict_false(exp) __builtin_expect((exp), 0)\000"
 15773      65646963 
 15773      745F6661 
 15773      6C736528 
 15773      65787029 
 15774              	.LASF212:
 15775 635b 5F5F464C 		.ascii	"__FLT64_HAS_DENORM__ 1\000"
 15775      5436345F 
 15775      4841535F 
 15775      44454E4F 
 15775      524D5F5F 
 15776              	.LASF326:
 15777 6372 5F5F554C 		.ascii	"__ULLACCUM_IBIT__ 32\000"
 15777      4C414343 
 15777      554D5F49 
 15777      4249545F 
 15777      5F203332 
 15778              	.LASF34:
 15779 6387 5F5F5549 		.ascii	"__UINTMAX_TYPE__ long long unsigned int\000"
 15779      4E544D41 
 15779      585F5459 
 15779      50455F5F 
 15779      206C6F6E 
 15780              	.LASF1338:
 15781 63af 70764F77 		.ascii	"pvOwner\000"
 15781      6E657200 
 15782              	.LASF543:
 15783 63b7 5F574348 		.ascii	"_WCHAR_T_DECLARED \000"
 15783      41525F54 
 15783      5F444543 
 15783      4C415245 
 15783      442000
 15784              	.LASF1412:
 15785 63ca 70727644 		.ascii	"prvDeleteTCB\000"
 15785      656C6574 
 15785      65544342 
 15785      00
 15786              	.LASF884:
 15787 63d7 55494E54 		.ascii	"UINT_FAST16_MAX (__UINT_FAST16_MAX__)\000"
 15787      5F464153 
 15787      5431365F 
 15787      4D415820 
 15787      285F5F55 
 15788              	.LASF98:
 15789 63fd 5F5F494E 		.ascii	"__INT64_MAX__ 0x7fffffffffffffffLL\000"
 15789      5436345F 
 15789      4D41585F 
 15789      5F203078 
 15789      37666666 
 15790              	.LASF549:
 15791 6420 5F535953 		.ascii	"_SYS_REENT_H_ \000"
 15791      5F524545 
 15791      4E545F48 
 15791      5F2000
ARM GAS  /tmp/ccTV2SzP.s 			page 405


 15792              	.LASF140:
 15793 642f 5F5F464C 		.ascii	"__FLT_EVAL_METHOD__ 0\000"
 15793      545F4556 
 15793      414C5F4D 
 15793      4554484F 
 15793      445F5F20 
 15794              	.LASF1207:
 15795 6445 73686F72 		.ascii	"short int\000"
 15795      7420696E 
 15795      7400
 15796              	.LASF883:
 15797 644f 494E545F 		.ascii	"INT_FAST16_MAX (__INT_FAST16_MAX__)\000"
 15797      46415354 
 15797      31365F4D 
 15797      41582028 
 15797      5F5F494E 
 15798              	.LASF1092:
 15799 6473 706F7274 		.ascii	"portPRIVILEGE_BIT ( ( UBaseT_t ) 0x00 )\000"
 15799      50524956 
 15799      494C4547 
 15799      455F4249 
 15799      54202820 
 15800              	.LASF1344:
 15801 649b 75784E75 		.ascii	"uxNumberOfItems\000"
 15801      6D626572 
 15801      4F664974 
 15801      656D7300 
 15802              	.LASF67:
 15803 64ab 5F5F5343 		.ascii	"__SCHAR_MAX__ 0x7f\000"
 15803      4841525F 
 15803      4D41585F 
 15803      5F203078 
 15803      376600
 15804              	.LASF733:
 15805 64be 5F5F756E 		.ascii	"__unreachable() __builtin_unreachable()\000"
 15805      72656163 
 15805      6861626C 
 15805      65282920 
 15805      5F5F6275 
 15806              	.LASF124:
 15807 64e6 5F5F494E 		.ascii	"__INT_FAST8_WIDTH__ 32\000"
 15807      545F4641 
 15807      5354385F 
 15807      57494454 
 15807      485F5F20 
 15808              	.LASF816:
 15809 64fd 5F5F494E 		.ascii	"__INT16 \"h\"\000"
 15809      54313620 
 15809      22682200 
 15810              	.LASF613:
 15811 6509 5F52414E 		.ascii	"_RAND48_MULT_2 (0x0005)\000"
 15811      4434385F 
 15811      4D554C54 
 15811      5F322028 
 15811      30783030 
 15812              	.LASF495:
 15813 6521 5F455846 		.ascii	"_EXFUN_NOTHROW(name,proto) name proto _NOTHROW\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 406


 15813      554E5F4E 
 15813      4F544852 
 15813      4F57286E 
 15813      616D652C 
 15814              	.LASF1418:
 15815 6550 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 15815      61736B43 
 15815      6865636B 
 15815      46726565 
 15815      53746163 
 15816              	.LASF1020:
 15817 656b 494E434C 		.ascii	"INCLUDE_xTaskGetCurrentTaskHandle 0\000"
 15817      5544455F 
 15817      78546173 
 15817      6B476574 
 15817      43757272 
 15818              	.LASF555:
 15819 658f 5F545F50 		.ascii	"_T_PTRDIFF \000"
 15819      54524449 
 15819      46462000 
 15820              	.LASF340:
 15821 659b 5F5F5551 		.ascii	"__UQQ_FBIT__ 8\000"
 15821      515F4642 
 15821      49545F5F 
 15821      203800
 15822              	.LASF1315:
 15823 65aa 5F776372 		.ascii	"_wcrtomb_state\000"
 15823      746F6D62 
 15823      5F737461 
 15823      746500
 15824              	.LASF1452:
 15825 65b9 7078556E 		.ascii	"pxUnblockedTCB\000"
 15825      626C6F63 
 15825      6B656454 
 15825      434200
 15826              	.LASF1169:
 15827 65c8 746D7243 		.ascii	"tmrCOMMAND_DELETE ( ( BaseT_t ) 5 )\000"
 15827      4F4D4D41 
 15827      4E445F44 
 15827      454C4554 
 15827      45202820 
 15828              	.LASF417:
 15829 65ec 5F5F4152 		.ascii	"__ARM_FP16_ARGS\000"
 15829      4D5F4650 
 15829      31365F41 
 15829      52475300 
 15830              	.LASF308:
 15831 65fc 5F5F5541 		.ascii	"__UACCUM_MAX__ 0XFFFFFFFFP-16UK\000"
 15831      4343554D 
 15831      5F4D4158 
 15831      5F5F2030 
 15831      58464646 
 15832              	.LASF599:
 15833 661c 5F54494D 		.ascii	"_TIME_T_ long\000"
 15833      455F545F 
 15833      206C6F6E 
 15833      6700
ARM GAS  /tmp/ccTV2SzP.s 			page 407


 15834              	.LASF593:
 15835 662a 756E7369 		.ascii	"unsigned signed\000"
 15835      676E6564 
 15835      20736967 
 15835      6E656400 
 15836              	.LASF1382:
 15837 663a 75784D75 		.ascii	"uxMutexesHeld\000"
 15837      74657865 
 15837      7348656C 
 15837      6400
 15838              	.LASF1413:
 15839 6648 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 15839      736B4765 
 15839      74537461 
 15839      636B4869 
 15839      67685761 
 15840              	.LASF786:
 15841 6664 616C6C6F 		.ascii	"alloca\000"
 15841      636100
 15842              	.LASF273:
 15843 666b 5F5F4C46 		.ascii	"__LFRACT_MAX__ 0X7FFFFFFFP-31LR\000"
 15843      52414354 
 15843      5F4D4158 
 15843      5F5F2030 
 15843      58374646 
 15844              	.LASF389:
 15845 668b 5F5F5349 		.ascii	"__SIZEOF_PTRDIFF_T__ 4\000"
 15845      5A454F46 
 15845      5F505452 
 15845      44494646 
 15845      5F545F5F 
 15846              	.LASF983:
 15847 66a2 706F7274 		.ascii	"portEND_SWITCHING_ISR(xSwitchRequired) if( xSwitchR"
 15847      454E445F 
 15847      53574954 
 15847      4348494E 
 15847      475F4953 
 15848 66d5 65717569 		.ascii	"equired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSE"
 15848      72656420 
 15848      2920706F 
 15848      72744E56 
 15848      49435F49 
 15849 6708 545F4249 		.ascii	"T_BIT\000"
 15849      5400
 15850              	.LASF0:
 15851 670e 5F5F5354 		.ascii	"__STDC__ 1\000"
 15851      44435F5F 
 15851      203100
 15852              	.LASF1286:
 15853 6719 5F6E6577 		.ascii	"_new\000"
 15853      00
 15854              	.LASF574:
 15855 671e 5F5F5F69 		.ascii	"___int_least8_t_defined 1\000"
 15855      6E745F6C 
 15855      65617374 
 15855      385F745F 
 15855      64656669 
ARM GAS  /tmp/ccTV2SzP.s 			page 408


 15856              	.LASF429:
 15857 6738 5F5F4152 		.ascii	"__ARM_FEATURE_IDIV 1\000"
 15857      4D5F4645 
 15857      41545552 
 15857      455F4944 
 15857      49562031 
 15858              	.LASF1348:
 15859 674d 5461736B 		.ascii	"TaskHandle_t\000"
 15859      48616E64 
 15859      6C655F74 
 15859      00
 15860              	.LASF27:
 15861 675a 5F5F464C 		.ascii	"__FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 15861      4F41545F 
 15861      574F5244 
 15861      5F4F5244 
 15861      45525F5F 
 15862              	.LASF921:
 15863 6787 636F6E66 		.ascii	"configMINIMAL_STACK_SIZE ( ( unsigned short ) 256 )"
 15863      69674D49 
 15863      4E494D41 
 15863      4C5F5354 
 15863      41434B5F 
 15864 67ba 00       		.ascii	"\000"
 15865              	.LASF635:
 15866 67bb 5F524545 		.ascii	"_REENT_MP_P5S(ptr) ((ptr)->_p5s)\000"
 15866      4E545F4D 
 15866      505F5035 
 15866      53287074 
 15866      72292028 
 15867              	.LASF42:
 15868 67dc 5F5F5549 		.ascii	"__UINT8_TYPE__ unsigned char\000"
 15868      4E54385F 
 15868      54595045 
 15868      5F5F2075 
 15868      6E736967 
 15869              	.LASF1273:
 15870 67f9 5F737464 		.ascii	"_stderr\000"
 15870      65727200 
 15871              	.LASF619:
 15872 6801 5F524545 		.ascii	"_REENT_INIT(var) { 0, &(var).__sf[0], &(var).__sf[1"
 15872      4E545F49 
 15872      4E495428 
 15872      76617229 
 15872      207B2030 
 15873 6834 5D2C2026 		.ascii	"], &(var).__sf[2], 0, \"\", 0, _NULL, 0, _NULL, _NU"
 15873      28766172 
 15873      292E5F5F 
 15873      73665B32 
 15873      5D2C2030 
 15874 6865 4C4C2C20 		.ascii	"LL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, \"\", "
 15874      302C205F 
 15874      4E554C4C 
 15874      2C205F4E 
 15874      554C4C2C 
 15875 6896 7B302C20 		.ascii	"{0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_"
 15875      302C2030 
ARM GAS  /tmp/ccTV2SzP.s 			page 409


 15875      2C20302C 
 15875      20302C20 
 15875      302C2030 
 15876 68c9 302C205F 		.ascii	"0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0"
 15876      52414E44 
 15876      34385F53 
 15876      4545445F 
 15876      312C205F 
 15877 68fc 2C205F52 		.ascii	", _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {"
 15877      414E4434 
 15877      385F4D55 
 15877      4C545F31 
 15877      2C205F52 
 15878 692f 302C207B 		.ascii	"0, {0}}, {0, {0}}, {0, {0}}, \"\", \"\", 0, {0, {0}"
 15878      307D7D2C 
 15878      207B302C 
 15878      207B307D 
 15878      7D2C207B 
 15879 695e 7D2C207B 		.ascii	"}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REE"
 15879      302C207B 
 15879      307D7D2C 
 15879      207B302C 
 15879      207B307D 
 15880 6991 4E545F49 		.ascii	"NT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }\000"
 15880      4E49545F 
 15880      41544558 
 15880      4954205F 
 15880      4E554C4C 
 15881              	.LASF775:
 15882 69bb 5F5F756E 		.ascii	"__unlocks(...) __lock_annotate(unlock_function(__VA"
 15882      6C6F636B 
 15882      73282E2E 
 15882      2E29205F 
 15882      5F6C6F63 
 15883 69ee 5F415247 		.ascii	"_ARGS__))\000"
 15883      535F5F29 
 15883      2900
 15884              	.LASF479:
 15885 69f8 5F5F4558 		.ascii	"__EXPORT \000"
 15885      504F5254 
 15885      2000
 15886              	.LASF1308:
 15887 6a02 5F776374 		.ascii	"_wctomb_state\000"
 15887      6F6D625F 
 15887      73746174 
 15887      6500
 15888              	.LASF1267:
 15889 6a10 5F6D6273 		.ascii	"_mbstate\000"
 15889      74617465 
 15889      00
 15890              	.LASF720:
 15891 6a19 5F4E6F72 		.ascii	"_Noreturn __dead2\000"
 15891      65747572 
 15891      6E205F5F 
 15891      64656164 
 15891      3200
 15892              	.LASF1042:
ARM GAS  /tmp/ccTV2SzP.s 			page 410


 15893 6a2b 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 15893      65474956 
 15893      455F4D55 
 15893      5445585F 
 15893      52454355 
 15894              	.LASF849:
 15895 6a56 5F5F696E 		.ascii	"__int_fast16_t_defined 1\000"
 15895      745F6661 
 15895      73743136 
 15895      5F745F64 
 15895      6566696E 
 15896              	.LASF952:
 15897 6a6f 636F6E66 		.ascii	"configPRIO_BITS 5\000"
 15897      69675052 
 15897      494F5F42 
 15897      49545320 
 15897      3500
 15898              	.LASF79:
 15899 6a81 5F5F5348 		.ascii	"__SHRT_WIDTH__ 16\000"
 15899      52545F57 
 15899      49445448 
 15899      5F5F2031 
 15899      3600
 15900              	.LASF1347:
 15901 6a93 4C697374 		.ascii	"List_t\000"
 15901      5F7400
 15902              	.LASF1304:
 15903 6a9a 5F72616E 		.ascii	"_rand_next\000"
 15903      645F6E65 
 15903      787400
 15904              	.LASF1061:
 15905 6aa5 74726163 		.ascii	"traceTASK_DELETE(pxTaskToDelete) \000"
 15905      65544153 
 15905      4B5F4445 
 15905      4C455445 
 15905      28707854 
 15906              	.LASF243:
 15907 6ac7 5F5F4445 		.ascii	"__DEC128_MANT_DIG__ 34\000"
 15907      43313238 
 15907      5F4D414E 
 15907      545F4449 
 15907      475F5F20 
 15908              	.LASF1253:
 15909 6ade 5F666C61 		.ascii	"_flags\000"
 15909      677300
 15910              	.LASF480:
 15911 6ae5 5F5F494D 		.ascii	"__IMPORT \000"
 15911      504F5254 
 15911      2000
 15912              	.LASF610:
 15913 6aef 5F52414E 		.ascii	"_RAND48_SEED_2 (0x1234)\000"
 15913      4434385F 
 15913      53454544 
 15913      5F322028 
 15913      30783132 
 15914              	.LASF561:
 15915 6b07 5F505452 		.ascii	"_PTRDIFF_T_DECLARED \000"
ARM GAS  /tmp/ccTV2SzP.s 			page 411


 15915      44494646 
 15915      5F545F44 
 15915      45434C41 
 15915      52454420 
 15916              	.LASF360:
 15917 6b1c 5F5F5553 		.ascii	"__USA_FBIT__ 16\000"
 15917      415F4642 
 15917      49545F5F 
 15917      20313600 
 15918              	.LASF1456:
 15919 6b2c 78546963 		.ascii	"xTicksToWait\000"
 15919      6B73546F 
 15919      57616974 
 15919      00
 15920              	.LASF565:
 15921 6b39 5F4D4143 		.ascii	"_MACHINE__TYPES_H \000"
 15921      48494E45 
 15921      5F5F5459 
 15921      5045535F 
 15921      482000
 15922              	.LASF582:
 15923 6b4c 5F5F6C6F 		.ascii	"__lock_init(lock) (_CAST_VOID 0)\000"
 15923      636B5F69 
 15923      6E697428 
 15923      6C6F636B 
 15923      2920285F 
 15924              	.LASF435:
 15925 6b6d 5F5F4945 		.ascii	"__IEEE_LITTLE_ENDIAN \000"
 15925      45455F4C 
 15925      4954544C 
 15925      455F454E 
 15925      4449414E 
 15926              	.LASF175:
 15927 6b83 5F5F4C44 		.ascii	"__LDBL_MIN_10_EXP__ (-307)\000"
 15927      424C5F4D 
 15927      494E5F31 
 15927      305F4558 
 15927      505F5F20 
 15928              	.LASF1210:
 15929 6b9e 6C6F6E67 		.ascii	"long int\000"
 15929      20696E74 
 15929      00
 15930              	.LASF1473:
 15931 6ba7 78546173 		.ascii	"xTaskResumeAll\000"
 15931      6B526573 
 15931      756D6541 
 15931      6C6C00
 15932              	.LASF985:
 15933 6bb6 706F7274 		.ascii	"portSET_INTERRUPT_MASK_FROM_ISR() ulPortSetInterrup"
 15933      5345545F 
 15933      494E5445 
 15933      52525550 
 15933      545F4D41 
 15934 6be9 744D6173 		.ascii	"tMask()\000"
 15934      6B282900 
 15935              	.LASF375:
 15936 6bf1 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR_LOCK_FREE 2\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 412


 15936      435F4154 
 15936      4F4D4943 
 15936      5F434841 
 15936      525F4C4F 
 15937              	.LASF1246:
 15938 6c0f 5F617465 		.ascii	"_atexit\000"
 15938      78697400 
 15939              	.LASF1106:
 15940 6c17 6D74434F 		.ascii	"mtCOVERAGE_TEST_MARKER() \000"
 15940      56455241 
 15940      47455F54 
 15940      4553545F 
 15940      4D41524B 
 15941              	.LASF274:
 15942 6c31 5F5F4C46 		.ascii	"__LFRACT_EPSILON__ 0x1P-31LR\000"
 15942      52414354 
 15942      5F455053 
 15942      494C4F4E 
 15942      5F5F2030 
 15943              	.LASF484:
 15944 6c4e 5F424547 		.ascii	"_BEGIN_STD_C \000"
 15944      494E5F53 
 15944      54445F43 
 15944      2000
 15945              	.LASF1059:
 15946 6c5c 74726163 		.ascii	"traceTASK_CREATE(pxNewTCB) \000"
 15946      65544153 
 15946      4B5F4352 
 15946      45415445 
 15946      2870784E 
 15947              	.LASF724:
 15948 6c78 5F5F6D61 		.ascii	"__malloc_like __attribute__((__malloc__))\000"
 15948      6C6C6F63 
 15948      5F6C696B 
 15948      65205F5F 
 15948      61747472 
 15949              	.LASF929:
 15950 6ca2 636F6E66 		.ascii	"configMAX_CO_ROUTINE_PRIORITIES ( 2 )\000"
 15950      69674D41 
 15950      585F434F 
 15950      5F524F55 
 15950      54494E45 
 15951              	.LASF401:
 15952 6cc8 5F5F4152 		.ascii	"__ARM_SIZEOF_MINIMAL_ENUM 1\000"
 15952      4D5F5349 
 15952      5A454F46 
 15952      5F4D494E 
 15952      494D414C 
 15953              	.LASF1206:
 15954 6ce4 756E7369 		.ascii	"unsigned char\000"
 15954      676E6564 
 15954      20636861 
 15954      7200
 15955              	.LASF1055:
 15956 6cf2 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR(pxQueue) \000"
 15956      65515545 
 15956      55455F52 
ARM GAS  /tmp/ccTV2SzP.s 			page 413


 15956      45434549 
 15956      56455F46 
 15957              	.LASF404:
 15958 6d18 5F5F6172 		.ascii	"__arm__ 1\000"
 15958      6D5F5F20 
 15958      3100
 15959              	.LASF1149:
 15960 6d22 74736B4B 		.ascii	"tskKERNEL_VERSION_BUILD 2\000"
 15960      45524E45 
 15960      4C5F5645 
 15960      5253494F 
 15960      4E5F4255 
 15961              	.LASF1034:
 15962 6d3c 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) \000"
 15962      65424C4F 
 15962      434B494E 
 15962      475F4F4E 
 15962      5F515545 
 15963              	.LASF1346:
 15964 6d65 784C6973 		.ascii	"xListEnd\000"
 15964      74456E64 
 15964      00
 15965              	.LASF264:
 15966 6d6e 5F5F4652 		.ascii	"__FRACT_EPSILON__ 0x1P-15R\000"
 15966      4143545F 
 15966      45505349 
 15966      4C4F4E5F 
 15966      5F203078 
 15967              	.LASF505:
 15968 6d89 5F454C49 		.ascii	"_ELIDABLE_INLINE extern __inline__ _ATTRIBUTE ((__a"
 15968      4441424C 
 15968      455F494E 
 15968      4C494E45 
 15968      20657874 
 15969 6dbc 6C776179 		.ascii	"lways_inline__))\000"
 15969      735F696E 
 15969      6C696E65 
 15969      5F5F2929 
 15969      00
 15970              	.LASF190:
 15971 6dcd 5F5F464C 		.ascii	"__FLT32_MIN_10_EXP__ (-37)\000"
 15971      5433325F 
 15971      4D494E5F 
 15971      31305F45 
 15971      58505F5F 
 15972              	.LASF1503:
 15973 6de8 46726565 		.ascii	"FreeRTOS/tasks.c\000"
 15973      52544F53 
 15973      2F746173 
 15973      6B732E63 
 15973      00
 15974              	.LASF1221:
 15975 6df9 5F5F636F 		.ascii	"__count\000"
 15975      756E7400 
 15976              	.LASF1448:
 15977 6e01 78436F6E 		.ascii	"xConstTickCount\000"
 15977      73745469 
ARM GAS  /tmp/ccTV2SzP.s 			page 414


 15977      636B436F 
 15977      756E7400 
 15978              	.LASF702:
 15979 6e11 5F5F5354 		.ascii	"__STRING(x) #x\000"
 15979      52494E47 
 15979      28782920 
 15979      237800
 15980              	.LASF531:
 15981 6e20 5F574348 		.ascii	"_WCHAR_T \000"
 15981      41525F54 
 15981      2000
 15982              	.LASF416:
 15983 6e2a 5F5F4152 		.ascii	"__ARM_FP16_FORMAT_ALTERNATIVE\000"
 15983      4D5F4650 
 15983      31365F46 
 15983      4F524D41 
 15983      545F414C 
 15984              	.LASF1322:
 15985 6e48 5F676C6F 		.ascii	"_global_impure_ptr\000"
 15985      62616C5F 
 15985      696D7075 
 15985      72655F70 
 15985      747200
 15986              	.LASF1351:
 15987 6e5b 65426C6F 		.ascii	"eBlocked\000"
 15987      636B6564 
 15987      00
 15988              	.LASF1018:
 15989 6e64 636F6E66 		.ascii	"configASSERT_DEFINED 1\000"
 15989      69674153 
 15989      53455254 
 15989      5F444546 
 15989      494E4544 
 15990              	.LASF888:
 15991 6e7b 494E545F 		.ascii	"INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)\000"
 15991      46415354 
 15991      36345F4D 
 15991      494E2028 
 15991      2D5F5F49 
 15992              	.LASF959:
 15993 6ea4 70645452 		.ascii	"pdTRUE ( ( BaseT_t ) 1 )\000"
 15993      55452028 
 15993      20282042 
 15993      61736554 
 15993      5F742029 
 15994              	.LASF566:
 15995 6ebd 5F4D4143 		.ascii	"_MACHINE__DEFAULT_TYPES_H \000"
 15995      48494E45 
 15995      5F5F4445 
 15995      4641554C 
 15995      545F5459 
 15996              	.LASF22:
 15997 6ed8 5F5F4249 		.ascii	"__BIGGEST_ALIGNMENT__ 8\000"
 15997      47474553 
 15997      545F414C 
 15997      49474E4D 
 15997      454E545F 
ARM GAS  /tmp/ccTV2SzP.s 			page 415


 15998              	.LASF297:
 15999 6ef0 5F5F5553 		.ascii	"__USACCUM_MIN__ 0.0UHK\000"
 15999      41434355 
 15999      4D5F4D49 
 15999      4E5F5F20 
 15999      302E3055 
 16000              	.LASF560:
 16001 6f07 5F474343 		.ascii	"_GCC_PTRDIFF_T \000"
 16001      5F505452 
 16001      44494646 
 16001      5F542000 
 16002              	.LASF689:
 16003 6f17 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_NEXT_ARG 1\000"
 16003      55434C49 
 16003      4B455F42 
 16003      55494C54 
 16003      494E5F4E 
 16004              	.LASF936:
 16005 6f35 494E434C 		.ascii	"INCLUDE_vTaskPrioritySet 1\000"
 16005      5544455F 
 16005      76546173 
 16005      6B507269 
 16005      6F726974 
 16006              	.LASF357:
 16007 6f50 5F5F5441 		.ascii	"__TA_IBIT__ 64\000"
 16007      5F494249 
 16007      545F5F20 
 16007      363400
 16008              	.LASF400:
 16009 6f5f 5F5F4152 		.ascii	"__ARM_FEATURE_SIMD32\000"
 16009      4D5F4645 
 16009      41545552 
 16009      455F5349 
 16009      4D443332 
 16010              	.LASF1490:
 16011 6f74 75785461 		.ascii	"uxTaskPriorityGet\000"
 16011      736B5072 
 16011      696F7269 
 16011      74794765 
 16011      7400
 16012              	.LASF1372:
 16013 6f86 75735374 		.ascii	"usStackHighWaterMark\000"
 16013      61636B48 
 16013      69676857 
 16013      61746572 
 16013      4D61726B 
 16014              	.LASF802:
 16015 6f9b 63686172 		.ascii	"char\000"
 16015      00
 16016              	.LASF580:
 16017 6fa0 5F5F4C4F 		.ascii	"__LOCK_INIT(class,lock) static int lock = 0;\000"
 16017      434B5F49 
 16017      4E495428 
 16017      636C6173 
 16017      732C6C6F 
 16018              	.LASF1238:
 16019 6fcd 5F5F746D 		.ascii	"__tm_wday\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 416


 16019      5F776461 
 16019      7900
 16020              	.LASF539:
 16021 6fd7 5F574348 		.ascii	"_WCHAR_T_H \000"
 16021      41525F54 
 16021      5F482000 
 16022              	.LASF962:
 16023 6fe3 65727251 		.ascii	"errQUEUE_EMPTY ( ( BaseT_t ) 0 )\000"
 16023      55455545 
 16023      5F454D50 
 16023      54592028 
 16023      20282042 
 16024              	.LASF395:
 16025 7004 5F5F4152 		.ascii	"__ARM_FEATURE_QRDMX\000"
 16025      4D5F4645 
 16025      41545552 
 16025      455F5152 
 16025      444D5800 
 16026              	.LASF1008:
 16027 7018 494E434C 		.ascii	"INCLUDE_xQueueGetMutexHolder 0\000"
 16027      5544455F 
 16027      78517565 
 16027      75654765 
 16027      744D7574 
 16028              	.LASF1005:
 16029 7037 706F7274 		.ascii	"portUSING_MPU_WRAPPERS 0\000"
 16029      5553494E 
 16029      475F4D50 
 16029      555F5752 
 16029      41505045 
 16030              	.LASF410:
 16031 7050 5F5F4152 		.ascii	"__ARM_ARCH_ISA_THUMB 2\000"
 16031      4D5F4152 
 16031      43485F49 
 16031      53415F54 
 16031      48554D42 
 16032              	.LASF71:
 16033 7067 5F5F4C4F 		.ascii	"__LONG_LONG_MAX__ 0x7fffffffffffffffLL\000"
 16033      4E475F4C 
 16033      4F4E475F 
 16033      4D41585F 
 16033      5F203078 
 16034              	.LASF452:
 16035 708e 5F465345 		.ascii	"_FSEEK_OPTIMIZATION 1\000"
 16035      454B5F4F 
 16035      5054494D 
 16035      495A4154 
 16035      494F4E20 
 16036              	.LASF863:
 16037 70a4 55494E54 		.ascii	"UINT16_MAX (__UINT16_MAX__)\000"
 16037      31365F4D 
 16037      41582028 
 16037      5F5F5549 
 16037      4E543136 
 16038              	.LASF1188:
 16039 70c0 74736B49 		.ascii	"tskIDLE_STACK_SIZE configMINIMAL_STACK_SIZE\000"
 16039      444C455F 
ARM GAS  /tmp/ccTV2SzP.s 			page 417


 16039      53544143 
 16039      4B5F5349 
 16039      5A452063 
 16040              	.LASF767:
 16041 70ec 5F5F6172 		.ascii	"__arg_type_tag(arg_kind,arg_idx,type_tag_idx) \000"
 16041      675F7479 
 16041      70655F74 
 16041      61672861 
 16041      72675F6B 
 16042              	.LASF1367:
 16043 711b 78546173 		.ascii	"xTaskNumber\000"
 16043      6B4E756D 
 16043      62657200 
 16044              	.LASF1239:
 16045 7127 5F5F746D 		.ascii	"__tm_yday\000"
 16045      5F796461 
 16045      7900
 16046              	.LASF803:
 16047 7131 73686F72 		.ascii	"short\000"
 16047      7400
 16048              	.LASF652:
 16049 7137 5F524545 		.ascii	"_REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(va"
 16049      4E545F49 
 16049      4E49545F 
 16049      50545228 
 16049      76617229 
 16050 716a 72292929 		.ascii	"r))); _REENT_INIT_PTR_ZEROED(var); }\000"
 16050      3B205F52 
 16050      45454E54 
 16050      5F494E49 
 16050      545F5054 
 16051              	.LASF1163:
 16052 718f 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK ( ( BaseT_t ) -1 )\000"
 16052      4F4D4D41 
 16052      4E445F45 
 16052      58454355 
 16052      54455F43 
 16053              	.LASF758:
 16054 71be 5F5F434F 		.ascii	"__COPYRIGHT(s) struct __hack\000"
 16054      50595249 
 16054      47485428 
 16054      73292073 
 16054      74727563 
 16055              	.LASF266:
 16056 71db 5F5F5546 		.ascii	"__UFRACT_IBIT__ 0\000"
 16056      52414354 
 16056      5F494249 
 16056      545F5F20 
 16056      3000
 16057              	.LASF396:
 16058 71ed 5F5F4152 		.ascii	"__ARM_32BIT_STATE 1\000"
 16058      4D5F3332 
 16058      4249545F 
 16058      53544154 
 16058      45203100 
 16059              	.LASF1484:
 16060 7201 76546173 		.ascii	"vTaskSuspend\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 418


 16060      6B537573 
 16060      70656E64 
 16060      00
 16061              	.LASF104:
 16062 720e 5F5F494E 		.ascii	"__INT8_C(c) c\000"
 16062      54385F43 
 16062      28632920 
 16062      6300
 16063              	.LASF271:
 16064 721c 5F5F4C46 		.ascii	"__LFRACT_IBIT__ 0\000"
 16064      52414354 
 16064      5F494249 
 16064      545F5F20 
 16064      3000
 16065              	.LASF927:
 16066 722e 636F6E66 		.ascii	"configUSE_CO_ROUTINES 0\000"
 16066      69675553 
 16066      455F434F 
 16066      5F524F55 
 16066      54494E45 
 16067              	.LASF551:
 16068 7246 5F535444 		.ascii	"_STDDEF_H_ \000"
 16068      4445465F 
 16068      485F2000 
 16069              	.LASF1489:
 16070 7252 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 16070      696F7269 
 16070      74795573 
 16070      65644F6E 
 16070      456E7472 
 16071              	.LASF160:
 16072 7268 5F5F4442 		.ascii	"__DBL_MIN_EXP__ (-1021)\000"
 16072      4C5F4D49 
 16072      4E5F4558 
 16072      505F5F20 
 16072      282D3130 
 16073              	.LASF1441:
 16074 7280 76546173 		.ascii	"vTaskPriorityInherit\000"
 16074      6B507269 
 16074      6F726974 
 16074      79496E68 
 16074      65726974 
 16075              	.LASF1366:
 16076 7295 70635461 		.ascii	"pcTaskName\000"
 16076      736B4E61 
 16076      6D6500
 16077              	.LASF797:
 16078 72a0 494E435F 		.ascii	"INC_FREERTOS_H \000"
 16078      46524545 
 16078      52544F53 
 16078      5F482000 
 16079              	.LASF1296:
 16080 72b0 5F736565 		.ascii	"_seed\000"
 16080      6400
 16081              	.LASF748:
 16082 72b6 5F5F7072 		.ascii	"__printf0like(fmtarg,firstvararg) \000"
 16082      696E7466 
ARM GAS  /tmp/ccTV2SzP.s 			page 419


 16082      306C696B 
 16082      6528666D 
 16082      74617267 
 16083              	.LASF1090:
 16084 72d9 706F7274 		.ascii	"portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() \000"
 16084      434F4E46 
 16084      49475552 
 16084      455F5449 
 16084      4D45525F 
 16085              	.LASF188:
 16086 7303 5F5F464C 		.ascii	"__FLT32_DIG__ 6\000"
 16086      5433325F 
 16086      4449475F 
 16086      5F203600 
 16087              	.LASF1259:
 16088 7313 5F736565 		.ascii	"_seek\000"
 16088      6B00
 16089              	.LASF589:
 16090 7319 5F5F6C6F 		.ascii	"__lock_try_acquire_recursive(lock) (_CAST_VOID 0)\000"
 16090      636B5F74 
 16090      72795F61 
 16090      63717569 
 16090      72655F72 
 16091              	.LASF708:
 16092 734b 5F5F6465 		.ascii	"__dead2 __attribute__((__noreturn__))\000"
 16092      61643220 
 16092      5F5F6174 
 16092      74726962 
 16092      7574655F 
 16093              	.LASF826:
 16094 7371 5F5F4C45 		.ascii	"__LEAST64 \"ll\"\000"
 16094      41535436 
 16094      3420226C 
 16094      6C2200
 16095              	.LASF788:
 16096 7380 5F5F636F 		.ascii	"__compar_fn_t_defined \000"
 16096      6D706172 
 16096      5F666E5F 
 16096      745F6465 
 16096      66696E65 
 16097              	.LASF912:
 16098 7397 55494E54 		.ascii	"UINTMAX_C(x) __UINTMAX_C(x)\000"
 16098      4D41585F 
 16098      43287829 
 16098      205F5F55 
 16098      494E544D 
 16099              	.LASF472:
 16100 73b3 5F5F4D49 		.ascii	"__MISC_VISIBLE 1\000"
 16100      53435F56 
 16100      49534942 
 16100      4C452031 
 16100      00
 16101              	.LASF1134:
 16102 73c4 6C697374 		.ascii	"listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem "
 16102      4745545F 
 16102      4C495354 
 16102      5F495445 
ARM GAS  /tmp/ccTV2SzP.s 			page 420


 16102      4D5F5641 
 16103 73f7 292D3E78 		.ascii	")->xItemValue )\000"
 16103      4974656D 
 16103      56616C75 
 16103      65202900 
 16104              	.LASF578:
 16105 7407 5F5F4558 		.ascii	"__EXP\000"
 16105      5000
 16106              	.LASF1217:
 16107 740d 5F66706F 		.ascii	"_fpos_t\000"
 16107      735F7400 
 16108              	.LASF184:
 16109 7415 5F5F4C44 		.ascii	"__LDBL_HAS_DENORM__ 1\000"
 16109      424C5F48 
 16109      41535F44 
 16109      454E4F52 
 16109      4D5F5F20 
 16110              	.LASF919:
 16111 742b 636F6E66 		.ascii	"configCPU_CLOCK_HZ ( ( unsigned long )120000000ul )"
 16111      69674350 
 16111      555F434C 
 16111      4F434B5F 
 16111      485A2028 
 16112 745e 00       		.ascii	"\000"
 16113              	.LASF1220:
 16114 745f 5F5F7763 		.ascii	"__wchb\000"
 16114      686200
 16115              	.LASF1374:
 16116 7466 74736B54 		.ascii	"tskTaskControlBlock\000"
 16116      61736B43 
 16116      6F6E7472 
 16116      6F6C426C 
 16116      6F636B00 
 16117              	.LASF1495:
 16118 747a 7854696D 		.ascii	"xTimeIncrement\000"
 16118      65496E63 
 16118      72656D65 
 16118      6E7400
 16119              	.LASF675:
 16120 7489 5F5F4245 		.ascii	"__BEGIN_DECLS \000"
 16120      47494E5F 
 16120      4445434C 
 16120      532000
 16121              	.LASF1223:
 16122 7498 5F6D6273 		.ascii	"_mbstate_t\000"
 16122      74617465 
 16122      5F7400
 16123              	.LASF626:
 16124 74a3 5F524545 		.ascii	"_REENT_CHECK_MISC(ptr) \000"
 16124      4E545F43 
 16124      4845434B 
 16124      5F4D4953 
 16124      43287074 
 16125              	.LASF1491:
 16126 74bb 76546173 		.ascii	"vTaskDelay\000"
 16126      6B44656C 
 16126      617900
ARM GAS  /tmp/ccTV2SzP.s 			page 421


 16127              	.LASF488:
 16128 74c6 5F414E44 		.ascii	"_AND ,\000"
 16128      202C00
 16129              	.LASF393:
 16130 74cd 5F5F4152 		.ascii	"__ARM_FEATURE_CRYPTO\000"
 16130      4D5F4645 
 16130      41545552 
 16130      455F4352 
 16130      5950544F 
 16131              	.LASF1127:
 16132 74e2 784C6973 		.ascii	"xList List_t\000"
 16132      74204C69 
 16132      73745F74 
 16132      00
 16133              	.LASF1353:
 16134 74ef 6544656C 		.ascii	"eDeleted\000"
 16134      65746564 
 16134      00
 16135              	.LASF48:
 16136 74f8 5F5F494E 		.ascii	"__INT_LEAST32_TYPE__ long int\000"
 16136      545F4C45 
 16136      41535433 
 16136      325F5459 
 16136      50455F5F 
 16137              	.LASF1115:
 16138 7516 78517565 		.ascii	"xQueueSetMemberHandle QueueSetMemberHandle_t\000"
 16138      75655365 
 16138      744D656D 
 16138      62657248 
 16138      616E646C 
 16139              	.LASF1116:
 16140 7543 7854696D 		.ascii	"xTimeOutType TimeOut_t\000"
 16140      654F7574 
 16140      54797065 
 16140      2054696D 
 16140      654F7574 
 16141              	.LASF1063:
 16142 755a 74726163 		.ascii	"traceTASK_DELAY() \000"
 16142      65544153 
 16142      4B5F4445 
 16142      4C415928 
 16142      292000
 16143              	.LASF1307:
 16144 756d 5F6D6274 		.ascii	"_mbtowc_state\000"
 16144      6F77635F 
 16144      73746174 
 16144      6500
 16145              	.LASF1177:
 16146 757b 7854696D 		.ascii	"xTimerChangePeriod(xTimer,xNewPeriod,xTicksToWait) "
 16146      65724368 
 16146      616E6765 
 16146      50657269 
 16146      6F642878 
 16147 75ae 7854696D 		.ascii	"xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE"
 16147      65724765 
 16147      6E657269 
 16147      63436F6D 
ARM GAS  /tmp/ccTV2SzP.s 			page 422


 16147      6D616E64 
 16148 75e1 5F504552 		.ascii	"_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )\000"
 16148      494F442C 
 16148      20282078 
 16148      4E657750 
 16148      6572696F 
 16149              	.LASF1459:
 16150 7613 7578546F 		.ascii	"uxTopPriority\000"
 16150      70507269 
 16150      6F726974 
 16150      7900
 16151              	.LASF121:
 16152 7621 5F5F5549 		.ascii	"__UINT_LEAST64_MAX__ 0xffffffffffffffffULL\000"
 16152      4E545F4C 
 16152      45415354 
 16152      36345F4D 
 16152      41585F5F 
 16153              	.LASF1420:
 16154 764c 70785461 		.ascii	"pxTaskStatusArray\000"
 16154      736B5374 
 16154      61747573 
 16154      41727261 
 16154      7900
 16155              	.LASF261:
 16156 765e 5F5F4652 		.ascii	"__FRACT_IBIT__ 0\000"
 16156      4143545F 
 16156      49424954 
 16156      5F5F2030 
 16156      00
 16157              	.LASF1085:
 16158 766f 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup,uxBi"
 16158      65455645 
 16158      4E545F47 
 16158      524F5550 
 16158      5F534554 
 16159 76a2 7473546F 		.ascii	"tsToSet) \000"
 16159      53657429 
 16159      2000
 16160              	.LASF1124:
 16161 76ac 746D7254 		.ascii	"tmrTIMER_CALLBACK TimerCallbackFunction_t\000"
 16161      494D4552 
 16161      5F43414C 
 16161      4C424143 
 16161      4B205469 
 16162              	.LASF442:
 16163 76d6 5F5F4E45 		.ascii	"__NEWLIB_PATCHLEVEL__ 0\000"
 16163      574C4942 
 16163      5F504154 
 16163      43484C45 
 16163      56454C5F 
 16164              	.LASF23:
 16165 76ee 5F5F4F52 		.ascii	"__ORDER_LITTLE_ENDIAN__ 1234\000"
 16165      4445525F 
 16165      4C495454 
 16165      4C455F45 
 16165      4E444941 
 16166              	.LASF592:
ARM GAS  /tmp/ccTV2SzP.s 			page 423


 16167 770b 5F5F7369 		.ascii	"__size_t\000"
 16167      7A655F74 
 16167      00
 16168              	.LASF692:
 16169 7714 5F5F4343 		.ascii	"__CC_SUPPORTS_INLINE 1\000"
 16169      5F535550 
 16169      504F5254 
 16169      535F494E 
 16169      4C494E45 
 16170              	.LASF660:
 16171 772b 5F5F444F 		.ascii	"__DOTS , ...\000"
 16171      5453202C 
 16171      202E2E2E 
 16171      00
 16172              	.LASF236:
 16173 7738 5F5F4445 		.ascii	"__DEC64_MANT_DIG__ 16\000"
 16173      4336345F 
 16173      4D414E54 
 16173      5F444947 
 16173      5F5F2031 
 16174              	.LASF1214:
 16175 774e 6C6F6E67 		.ascii	"long long unsigned int\000"
 16175      206C6F6E 
 16175      6720756E 
 16175      7369676E 
 16175      65642069 
 16176              	.LASF878:
 16177 7765 55494E54 		.ascii	"UINT_LEAST64_MAX (__UINT_LEAST64_MAX__)\000"
 16177      5F4C4541 
 16177      53543634 
 16177      5F4D4158 
 16177      20285F5F 
 16178              	.LASF147:
 16179 778d 5F5F464C 		.ascii	"__FLT_MIN_10_EXP__ (-37)\000"
 16179      545F4D49 
 16179      4E5F3130 
 16179      5F455850 
 16179      5F5F2028 
 16180              	.LASF316:
 16181 77a6 5F5F554C 		.ascii	"__ULACCUM_IBIT__ 32\000"
 16181      41434355 
 16181      4D5F4942 
 16181      49545F5F 
 16181      20333200 
 16182              	.LASF1451:
 16183 77ba 70784576 		.ascii	"pxEventListItem\000"
 16183      656E744C 
 16183      69737449 
 16183      74656D00 
 16184              	.LASF68:
 16185 77ca 5F5F5348 		.ascii	"__SHRT_MAX__ 0x7fff\000"
 16185      52545F4D 
 16185      41585F5F 
 16185      20307837 
 16185      66666600 
 16186              	.LASF881:
 16187 77de 55494E54 		.ascii	"UINT_FAST8_MAX (__UINT_FAST8_MAX__)\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 424


 16187      5F464153 
 16187      54385F4D 
 16187      41582028 
 16187      5F5F5549 
 16188              	.LASF329:
 16189 7802 5F5F554C 		.ascii	"__ULLACCUM_EPSILON__ 0x1P-32ULLK\000"
 16189      4C414343 
 16189      554D5F45 
 16189      5053494C 
 16189      4F4E5F5F 
 16190              	.LASF406:
 16191 7823 5F5F4150 		.ascii	"__APCS_32__ 1\000"
 16191      43535F33 
 16191      325F5F20 
 16191      3100
 16192              	.LASF336:
 16193 7831 5F5F4451 		.ascii	"__DQ_FBIT__ 63\000"
 16193      5F464249 
 16193      545F5F20 
 16193      363300
 16194              	.LASF469:
 16195 7840 5F5F474E 		.ascii	"__GNU_VISIBLE 0\000"
 16195      555F5649 
 16195      5349424C 
 16195      45203000 
 16196              	.LASF1325:
 16197 7850 75696E74 		.ascii	"uint16_t\000"
 16197      31365F74 
 16197      00
 16198              	.LASF556:
 16199 7859 5F5F5054 		.ascii	"__PTRDIFF_T \000"
 16199      52444946 
 16199      465F5420 
 16199      00
 16200              	.LASF1487:
 16201 7866 75784E65 		.ascii	"uxNewPriority\000"
 16201      77507269 
 16201      6F726974 
 16201      7900
 16202              	.LASF1047:
 16203 7874 74726163 		.ascii	"traceQUEUE_SEND(pxQueue) \000"
 16203      65515545 
 16203      55455F53 
 16203      454E4428 
 16203      70785175 
 16204              	.LASF643:
 16205 788e 5F524545 		.ascii	"_REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctom"
 16205      4E545F57 
 16205      43544F4D 
 16205      425F5354 
 16205      41544528 
 16206 78c1 625F7374 		.ascii	"b_state)\000"
 16206      61746529 
 16206      00
 16207              	.LASF1243:
 16208 78ca 5F64736F 		.ascii	"_dso_handle\000"
 16208      5F68616E 
ARM GAS  /tmp/ccTV2SzP.s 			page 425


 16208      646C6500 
 16209              	.LASF1078:
 16210 78d6 74726163 		.ascii	"traceEVENT_GROUP_SYNC_BLOCK(xEventGroup,uxBitsToSet"
 16210      65455645 
 16210      4E545F47 
 16210      524F5550 
 16210      5F53594E 
 16211 7909 2C757842 		.ascii	",uxBitsToWaitFor) \000"
 16211      69747354 
 16211      6F576169 
 16211      74466F72 
 16211      292000
 16212              	.LASF373:
 16213 791c 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1\000"
 16213      435F4841 
 16213      56455F53 
 16213      594E435F 
 16213      434F4D50 
 16214              	.LASF55:
 16215 7941 5F5F494E 		.ascii	"__INT_FAST16_TYPE__ int\000"
 16215      545F4641 
 16215      53543136 
 16215      5F545950 
 16215      455F5F20 
 16216              	.LASF1073:
 16217 7959 74726163 		.ascii	"traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMes"
 16217      6554494D 
 16217      45525F43 
 16217      4F4D4D41 
 16217      4E445F52 
 16218 798c 73616765 		.ascii	"sageValue) \000"
 16218      56616C75 
 16218      65292000 
 16219              	.LASF841:
 16220 7998 5F55494E 		.ascii	"_UINTMAX_T_DECLARED \000"
 16220      544D4158 
 16220      5F545F44 
 16220      45434C41 
 16220      52454420 
 16221              	.LASF292:
 16222 79ad 5F5F5341 		.ascii	"__SACCUM_MIN__ (-0X1P7HK-0X1P7HK)\000"
 16222      4343554D 
 16222      5F4D494E 
 16222      5F5F2028 
 16222      2D305831 
 16223              	.LASF1295:
 16224 79cf 5F72616E 		.ascii	"_rand48\000"
 16224      64343800 
 16225              	.LASF951:
 16226 79d7 636F6E66 		.ascii	"configNET_MASK3 0\000"
 16226      69674E45 
 16226      545F4D41 
 16226      534B3320 
 16226      3000
 16227              	.LASF1460:
 16228 79e9 78546173 		.ascii	"xTaskIncrementTick\000"
 16228      6B496E63 
ARM GAS  /tmp/ccTV2SzP.s 			page 426


 16228      72656D65 
 16228      6E745469 
 16228      636B00
 16229              	.LASF976:
 16230 79fc 706F7274 		.ascii	"portMAX_DELAY ( TickType_t ) 0xffffffffUL\000"
 16230      4D41585F 
 16230      44454C41 
 16230      59202820 
 16230      5469636B 
 16231              	.LASF420:
 16232 7a26 5F5F4152 		.ascii	"__ARM_FEATURE_FMA\000"
 16232      4D5F4645 
 16232      41545552 
 16232      455F464D 
 16232      4100
 16233              	.LASF313:
 16234 7a38 5F5F4C41 		.ascii	"__LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK\000"
 16234      4343554D 
 16234      5F4D4158 
 16234      5F5F2030 
 16234      58374646 
 16235              	.LASF1272:
 16236 7a60 5F737464 		.ascii	"_stdout\000"
 16236      6F757400 
 16237              	.LASF216:
 16238 7a68 5F5F464C 		.ascii	"__FLT32X_DIG__ 15\000"
 16238      54333258 
 16238      5F444947 
 16238      5F5F2031 
 16238      3500
 16239              	.LASF705:
 16240 7a7a 5F5F7369 		.ascii	"__signed signed\000"
 16240      676E6564 
 16240      20736967 
 16240      6E656400 
 16241              	.LASF805:
 16242 7a8a 6C6F6E67 		.ascii	"long\000"
 16242      00
 16243              	.LASF348:
 16244 7a8f 5F5F5554 		.ascii	"__UTQ_FBIT__ 128\000"
 16244      515F4642 
 16244      49545F5F 
 16244      20313238 
 16244      00
 16245              	.LASF1431:
 16246 7aa0 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 16246      64644375 
 16246      7272656E 
 16246      74546173 
 16246      6B546F44 
 16247              	.LASF1333:
 16248 7abf 5469636B 		.ascii	"TickT_t\000"
 16248      545F7400 
 16249              	.LASF1175:
 16250 7ac7 7854696D 		.ascii	"xTimerStart(xTimer,xTicksToWait) xTimerGenericComma"
 16250      65725374 
 16250      61727428 
ARM GAS  /tmp/ccTV2SzP.s 			page 427


 16250      7854696D 
 16250      65722C78 
 16251 7afa 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCou"
 16251      28207854 
 16251      696D6572 
 16251      20292C20 
 16251      746D7243 
 16252 7b2d 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 16252      20292C20 
 16252      4E554C4C 
 16252      2C202820 
 16252      78546963 
 16253              	.LASF975:
 16254 7b4e 706F7274 		.ascii	"portBASE_TYPE long\000"
 16254      42415345 
 16254      5F545950 
 16254      45206C6F 
 16254      6E6700
 16255              	.LASF12:
 16256 7b61 5F5F4649 		.ascii	"__FINITE_MATH_ONLY__ 0\000"
 16256      4E495445 
 16256      5F4D4154 
 16256      485F4F4E 
 16256      4C595F5F 
 16257              	.LASF1337:
 16258 7b78 70785072 		.ascii	"pxPrevious\000"
 16258      6576696F 
 16258      757300
 16259              	.LASF125:
 16260 7b83 5F5F494E 		.ascii	"__INT_FAST16_MAX__ 0x7fffffff\000"
 16260      545F4641 
 16260      53543136 
 16260      5F4D4158 
 16260      5F5F2030 
 16261              	.LASF568:
 16262 7ba1 5F5F6861 		.ascii	"__have_longlong64 1\000"
 16262      76655F6C 
 16262      6F6E676C 
 16262      6F6E6736 
 16262      34203100 
 16263              	.LASF1263:
 16264 7bb5 5F626C6B 		.ascii	"_blksize\000"
 16264      73697A65 
 16264      00
 16265              	.LASF829:
 16266 7bbe 5F55494E 		.ascii	"_UINT8_T_DECLARED \000"
 16266      54385F54 
 16266      5F444543 
 16266      4C415245 
 16266      442000
 16267              	.LASF1496:
 16268 7bd1 7853686F 		.ascii	"xShouldDelay\000"
 16268      756C6444 
 16268      656C6179 
 16268      00
 16269              	.LASF1493:
 16270 7bde 76546173 		.ascii	"vTaskDelayUntil\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 428


 16270      6B44656C 
 16270      6179556E 
 16270      74696C00 
 16271              	.LASF843:
 16272 7bee 5F55494E 		.ascii	"_UINTPTR_T_DECLARED \000"
 16272      54505452 
 16272      5F545F44 
 16272      45434C41 
 16272      52454420 
 16273              	.LASF1482:
 16274 7c03 76546173 		.ascii	"vTaskResume\000"
 16274      6B526573 
 16274      756D6500 
 16275              	.LASF538:
 16276 7c0f 5F574348 		.ascii	"_WCHAR_T_DEFINED \000"
 16276      41525F54 
 16276      5F444546 
 16276      494E4544 
 16276      2000
 16277              	.LASF1250:
 16278 7c21 5F626173 		.ascii	"_base\000"
 16278      6500
 16279              	.LASF1477:
 16280 7c27 76546173 		.ascii	"vTaskEndScheduler\000"
 16280      6B456E64 
 16280      53636865 
 16280      64756C65 
 16280      7200
 16281              	.LASF773:
 16282 7c39 5F5F7472 		.ascii	"__trylocks_exclusive(...) __lock_annotate(exclusive"
 16282      796C6F63 
 16282      6B735F65 
 16282      78636C75 
 16282      73697665 
 16283 7c6c 5F747279 		.ascii	"_trylock_function(__VA_ARGS__))\000"
 16283      6C6F636B 
 16283      5F66756E 
 16283      6374696F 
 16283      6E285F5F 
 16284              	.LASF1002:
 16285 7c8c 4D50555F 		.ascii	"MPU_WRAPPERS_H \000"
 16285      57524150 
 16285      50455253 
 16285      5F482000 
 16286              	.LASF1110:
 16287 7c9c 706F7274 		.ascii	"portTickType TickT_t\000"
 16287      5469636B 
 16287      54797065 
 16287      20546963 
 16287      6B545F74 
 16288              	.LASF1332:
 16289 7cb1 5469636B 		.ascii	"TickType_t\000"
 16289      54797065 
 16289      5F7400
 16290              	.LASF277:
 16291 7cbc 5F5F554C 		.ascii	"__ULFRACT_MIN__ 0.0ULR\000"
 16291      46524143 
ARM GAS  /tmp/ccTV2SzP.s 			page 429


 16291      545F4D49 
 16291      4E5F5F20 
 16291      302E3055 
 16292              	.LASF1101:
 16293 7cd3 706F7274 		.ascii	"portTASK_USES_FLOATING_POINT() \000"
 16293      5441534B 
 16293      5F555345 
 16293      535F464C 
 16293      4F415449 
 16294              	.LASF1300:
 16295 7cf3 5F737472 		.ascii	"_strtok_last\000"
 16295      746F6B5F 
 16295      6C617374 
 16295      00
 16296              	.LASF337:
 16297 7d00 5F5F4451 		.ascii	"__DQ_IBIT__ 0\000"
 16297      5F494249 
 16297      545F5F20 
 16297      3000
 16298              	.LASF1201:
 16299 7d0e 7461736B 		.ascii	"taskEVENT_LIST_ITEM_VALUE_IN_USE 0x80000000UL\000"
 16299      4556454E 
 16299      545F4C49 
 16299      53545F49 
 16299      54454D5F 
 16300              	.LASF647:
 16301 7d3c 5F524545 		.ascii	"_REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrt"
 16301      4E545F57 
 16301      4352544F 
 16301      4D425F53 
 16301      54415445 
 16302 7d6f 6F6D625F 		.ascii	"omb_state)\000"
 16302      73746174 
 16302      652900
 16303              	.LASF1433:
 16304 7d7a 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 16304      6865636B 
 16304      5461736B 
 16304      73576169 
 16304      74696E67 
 16305              	.LASF1313:
 16306 7d9a 5F6D6272 		.ascii	"_mbrtowc_state\000"
 16306      746F7763 
 16306      5F737461 
 16306      746500
 16307              	.LASF590:
 16308 7da9 5F5F6C6F 		.ascii	"__lock_release(lock) (_CAST_VOID 0)\000"
 16308      636B5F72 
 16308      656C6561 
 16308      7365286C 
 16308      6F636B29 
 16309              	.LASF835:
 16310 7dcd 5F55494E 		.ascii	"_UINT32_T_DECLARED \000"
 16310      5433325F 
 16310      545F4445 
 16310      434C4152 
 16310      45442000 
ARM GAS  /tmp/ccTV2SzP.s 			page 430


 16311              	.LASF1172:
 16312 7de1 746D7243 		.ascii	"tmrCOMMAND_RESET_FROM_ISR ( ( BaseT_t ) 7 )\000"
 16312      4F4D4D41 
 16312      4E445F52 
 16312      45534554 
 16312      5F46524F 
 16313              	.LASF500:
 16314 7e0d 5F444546 		.ascii	"_DEFUN_VOID(name) name(_NOARGS)\000"
 16314      554E5F56 
 16314      4F494428 
 16314      6E616D65 
 16314      29206E61 
 16315              	.LASF519:
 16316 7e2d 5F425344 		.ascii	"_BSD_SIZE_T_ \000"
 16316      5F53495A 
 16316      455F545F 
 16316      2000
 16317              	.LASF1205:
 16318 7e3b 5F5F7569 		.ascii	"__uint8_t\000"
 16318      6E74385F 
 16318      7400
 16319              	.LASF781:
 16320 7e45 5F5F6E6F 		.ascii	"__no_lock_analysis __lock_annotate(no_thread_safety"
 16320      5F6C6F63 
 16320      6B5F616E 
 16320      616C7973 
 16320      6973205F 
 16321 7e78 5F616E61 		.ascii	"_analysis)\000"
 16321      6C797369 
 16321      732900
 16322              	.LASF535:
 16323 7e83 5F574348 		.ascii	"_WCHAR_T_ \000"
 16323      41525F54 
 16323      5F2000
 16324              	.LASF1224:
 16325 7e8e 5F666C6F 		.ascii	"_flock_t\000"
 16325      636B5F74 
 16325      00
 16326              	.LASF1494:
 16327 7e97 70785072 		.ascii	"pxPreviousWakeTime\000"
 16327      6576696F 
 16327      75735761 
 16327      6B655469 
 16327      6D6500
 16328              	.LASF1461:
 16329 7eaa 78537769 		.ascii	"xSwitchRequired\000"
 16329      74636852 
 16329      65717569 
 16329      72656400 
 16330              	.LASF1291:
 16331 7eba 5F5F4649 		.ascii	"__FILE\000"
 16331      4C4500
 16332              	.LASF1187:
 16333 7ec1 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE\000"
 16333      57524150 
 16333      50455253 
 16333      5F494E43 
ARM GAS  /tmp/ccTV2SzP.s 			page 431


 16333      4C554445 
 16334              	.LASF1102:
 16335 7ee5 636F6E66 		.ascii	"configUSE_TIME_SLICING 1\000"
 16335      69675553 
 16335      455F5449 
 16335      4D455F53 
 16335      4C494349 
 16336              	.LASF423:
 16337 7efe 5F5F4152 		.ascii	"__ARM_NEON_FP\000"
 16337      4D5F4E45 
 16337      4F4E5F46 
 16337      5000
 16338              	.LASF1088:
 16339 7f0c 74726163 		.ascii	"tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend,pvPara"
 16339      6550454E 
 16339      445F4655 
 16339      4E435F43 
 16339      414C4C5F 
 16340 7f3f 6D657465 		.ascii	"meter1,ulParameter2,ret) \000"
 16340      72312C75 
 16340      6C506172 
 16340      616D6574 
 16340      6572322C 
 16341              	.LASF991:
 16342 7f59 706F7274 		.ascii	"portTASK_FUNCTION_PROTO(vFunction,pvParameters) voi"
 16342      5441534B 
 16342      5F46554E 
 16342      4354494F 
 16342      4E5F5052 
 16343 7f8c 64207646 		.ascii	"d vFunction( void *pvParameters )\000"
 16343      756E6374 
 16343      696F6E28 
 16343      20766F69 
 16343      64202A70 
 16344              	.LASF1140:
 16345 7fae 6C697374 		.ascii	"listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNum"
 16345      43555252 
 16345      454E545F 
 16345      4C495354 
 16345      5F4C454E 
 16346 7fe1 6265724F 		.ascii	"berOfItems )\000"
 16346      66497465 
 16346      6D732029 
 16346      00
 16347              	.LASF787:
 16348 7fee 616C6C6F 		.ascii	"alloca(size) __builtin_alloca(size)\000"
 16348      63612873 
 16348      697A6529 
 16348      205F5F62 
 16348      75696C74 
 16349              	.LASF600:
 16350 8012 5F434C4F 		.ascii	"_CLOCKID_T_ unsigned long\000"
 16350      434B4944 
 16350      5F545F20 
 16350      756E7369 
 16350      676E6564 
 16351              	.LASF623:
ARM GAS  /tmp/ccTV2SzP.s 			page 432


 16352 802c 5F524545 		.ascii	"_REENT_CHECK_TM(ptr) \000"
 16352      4E545F43 
 16352      4845434B 
 16352      5F544D28 
 16352      70747229 
 16353              	.LASF906:
 16354 8042 55494E54 		.ascii	"UINT16_C(x) __UINT16_C(x)\000"
 16354      31365F43 
 16354      28782920 
 16354      5F5F5549 
 16354      4E543136 
 16355              	.LASF349:
 16356 805c 5F5F5554 		.ascii	"__UTQ_IBIT__ 0\000"
 16356      515F4942 
 16356      49545F5F 
 16356      203000
 16357              	.LASF352:
 16358 806b 5F5F5341 		.ascii	"__SA_FBIT__ 15\000"
 16358      5F464249 
 16358      545F5F20 
 16358      313500
 16359              	.LASF541:
 16360 807a 5F5F494E 		.ascii	"__INT_WCHAR_T_H \000"
 16360      545F5743 
 16360      4841525F 
 16360      545F4820 
 16360      00
 16361              	.LASF222:
 16362 808b 5F5F464C 		.ascii	"__FLT32X_MAX__ 1.7976931348623157e+308F32x\000"
 16362      54333258 
 16362      5F4D4158 
 16362      5F5F2031 
 16362      2E373937 
 16363              	.LASF501:
 16364 80b6 5F434153 		.ascii	"_CAST_VOID (void)\000"
 16364      545F564F 
 16364      49442028 
 16364      766F6964 
 16364      2900
 16365              	.LASF900:
 16366 80c8 57434841 		.ascii	"WCHAR_MAX (__WCHAR_MAX__)\000"
 16366      525F4D41 
 16366      5820285F 
 16366      5F574348 
 16366      41525F4D 
 16367              	.LASF195:
 16368 80e2 5F5F464C 		.ascii	"__FLT32_MIN__ 1.1754943508222875e-38F32\000"
 16368      5433325F 
 16368      4D494E5F 
 16368      5F20312E 
 16368      31373534 
 16369              	.LASF1305:
 16370 810a 5F723438 		.ascii	"_r48\000"
 16370      00
 16371              	.LASF306:
 16372 810f 5F5F5541 		.ascii	"__UACCUM_IBIT__ 16\000"
 16372      4343554D 
ARM GAS  /tmp/ccTV2SzP.s 			page 433


 16372      5F494249 
 16372      545F5F20 
 16372      313600
 16373              	.LASF490:
 16374 8122 5F434F4E 		.ascii	"_CONST const\000"
 16374      53542063 
 16374      6F6E7374 
 16374      00
 16375              	.LASF432:
 16376 812f 5F5F454C 		.ascii	"__ELF__ 1\000"
 16376      465F5F20 
 16376      3100
 16377              	.LASF867:
 16378 8139 494E5433 		.ascii	"INT32_MIN (-__INT32_MAX__ - 1)\000"
 16378      325F4D49 
 16378      4E20282D 
 16378      5F5F494E 
 16378      5433325F 
 16379              	.LASF409:
 16380 8158 5F5F5448 		.ascii	"__THUMBEL__ 1\000"
 16380      554D4245 
 16380      4C5F5F20 
 16380      3100
 16381              	.LASF542:
 16382 8166 5F474343 		.ascii	"_GCC_WCHAR_T \000"
 16382      5F574348 
 16382      41525F54 
 16382      2000
 16383              	.LASF1218:
 16384 8174 77696E74 		.ascii	"wint_t\000"
 16384      5F7400
 16385              	.LASF1397:
 16386 817b 7578546F 		.ascii	"uxTopReadyPriority\000"
 16386      70526561 
 16386      64795072 
 16386      696F7269 
 16386      747900
 16387              	.LASF331:
 16388 818e 5F5F5151 		.ascii	"__QQ_IBIT__ 0\000"
 16388      5F494249 
 16388      545F5F20 
 16388      3000
 16389              	.LASF1049:
 16390 819c 74726163 		.ascii	"traceQUEUE_RECEIVE(pxQueue) \000"
 16390      65515545 
 16390      55455F52 
 16390      45434549 
 16390      56452870 
 16391              	.LASF1125:
 16392 81b9 70645441 		.ascii	"pdTASK_CODE TaskFunction_t\000"
 16392      534B5F43 
 16392      4F444520 
 16392      5461736B 
 16392      46756E63 
 16393              	.LASF1226:
 16394 81d4 5F6E6578 		.ascii	"_next\000"
 16394      7400
ARM GAS  /tmp/ccTV2SzP.s 			page 434


 16395              	.LASF910:
 16396 81da 55494E54 		.ascii	"UINT64_C(x) __UINT64_C(x)\000"
 16396      36345F43 
 16396      28782920 
 16396      5F5F5549 
 16396      4E543634 
 16397              	.LASF1474:
 16398 81f4 78416C72 		.ascii	"xAlreadyYielded\000"
 16398      65616479 
 16398      5969656C 
 16398      64656400 
 16399              	.LASF1265:
 16400 8204 5F646174 		.ascii	"_data\000"
 16400      6100
 16401              	.LASF489:
 16402 820a 5F4E4F41 		.ascii	"_NOARGS void\000"
 16402      52475320 
 16402      766F6964 
 16402      00
 16403              	.LASF3:
 16404 8217 5F5F474E 		.ascii	"__GNUC_MINOR__ 1\000"
 16404      55435F4D 
 16404      494E4F52 
 16404      5F5F2031 
 16404      00
 16405              	.LASF345:
 16406 8228 5F5F5553 		.ascii	"__USQ_IBIT__ 0\000"
 16406      515F4942 
 16406      49545F5F 
 16406      203000
 16407              	.LASF1153:
 16408 8237 7461736B 		.ascii	"taskEXIT_CRITICAL() portEXIT_CRITICAL()\000"
 16408      45584954 
 16408      5F435249 
 16408      54494341 
 16408      4C282920 
 16409              	.LASF1096:
 16410 825f 636F6E66 		.ascii	"configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2\000"
 16410      69674558 
 16410      50454354 
 16410      45445F49 
 16410      444C455F 
 16411              	.LASF52:
 16412 8287 5F5F5549 		.ascii	"__UINT_LEAST32_TYPE__ long unsigned int\000"
 16412      4E545F4C 
 16412      45415354 
 16412      33325F54 
 16412      5950455F 
 16413              	.LASF1199:
 16414 82af 70727641 		.ascii	"prvAddTaskToReadyList(pxTCB) traceMOVED_TASK_TO_REA"
 16414      64645461 
 16414      736B546F 
 16414      52656164 
 16414      794C6973 
 16415 82e2 44595F53 		.ascii	"DY_STATE( pxTCB ) taskRECORD_READY_PRIORITY( ( pxTC"
 16415      54415445 
 16415      28207078 
ARM GAS  /tmp/ccTV2SzP.s 			page 435


 16415      54434220 
 16415      29207461 
 16416 8315 4220292D 		.ascii	"B )->uxPriority ); vListInsertEnd( &( pxReadyTasksL"
 16416      3E757850 
 16416      72696F72 
 16416      69747920 
 16416      293B2076 
 16417 8348 69737473 		.ascii	"ists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGen"
 16417      5B202820 
 16417      70785443 
 16417      4220292D 
 16417      3E757850 
 16418 837b 65726963 		.ascii	"ericListItem ) )\000"
 16418      4C697374 
 16418      4974656D 
 16418      20292029 
 16418      00
 16419              	.LASF343:
 16420 838c 5F5F5548 		.ascii	"__UHQ_IBIT__ 0\000"
 16420      515F4942 
 16420      49545F5F 
 16420      203000
 16421              	.LASF399:
 16422 839b 5F5F4152 		.ascii	"__ARM_FEATURE_NUMERIC_MAXMIN\000"
 16422      4D5F4645 
 16422      41545552 
 16422      455F4E55 
 16422      4D455249 
 16423              	.LASF612:
 16424 83b8 5F52414E 		.ascii	"_RAND48_MULT_1 (0xdeec)\000"
 16424      4434385F 
 16424      4D554C54 
 16424      5F312028 
 16424      30786465 
 16425              	.LASF33:
 16426 83d0 5F5F494E 		.ascii	"__INTMAX_TYPE__ long long int\000"
 16426      544D4158 
 16426      5F545950 
 16426      455F5F20 
 16426      6C6F6E67 
 16427              	.LASF992:
 16428 83ee 706F7274 		.ascii	"portTASK_FUNCTION(vFunction,pvParameters) void vFun"
 16428      5441534B 
 16428      5F46554E 
 16428      4354494F 
 16428      4E287646 
 16429 8421 6374696F 		.ascii	"ction( void *pvParameters )\000"
 16429      6E282076 
 16429      6F696420 
 16429      2A707650 
 16429      6172616D 
 16430              	.LASF1122:
 16431 843d 70645441 		.ascii	"pdTASK_HOOK_CODE TaskHookFunction_t\000"
 16431      534B5F48 
 16431      4F4F4B5F 
 16431      434F4445 
 16431      20546173 
ARM GAS  /tmp/ccTV2SzP.s 			page 436


 16432              	.LASF380:
 16433 8461 5F5F4743 		.ascii	"__GCC_ATOMIC_INT_LOCK_FREE 2\000"
 16433      435F4154 
 16433      4F4D4943 
 16433      5F494E54 
 16433      5F4C4F43 
 16434              	.LASF1462:
 16435 847e 70785465 		.ascii	"pxTemp\000"
 16435      6D7000
 16436              	.LASF252:
 16437 8485 5F5F5346 		.ascii	"__SFRACT_MIN__ (-0.5HR-0.5HR)\000"
 16437      52414354 
 16437      5F4D494E 
 16437      5F5F2028 
 16437      2D302E35 
 16438              	.LASF995:
 16439 84a3 706F7274 		.ascii	"portRECORD_READY_PRIORITY(uxPriority,uxReadyPriorit"
 16439      5245434F 
 16439      52445F52 
 16439      45414459 
 16439      5F505249 
 16440 84d6 69657329 		.ascii	"ies) ( uxReadyPriorities ) |= ( 1UL << ( uxPriority"
 16440      20282075 
 16440      78526561 
 16440      64795072 
 16440      696F7269 
 16441 8509 20292029 		.ascii	" ) )\000"
 16441      00
 16442              	.LASF682:
 16443 850e 5F5F474E 		.ascii	"__GNUCLIKE_CTOR_SECTION_HANDLING 1\000"
 16443      55434C49 
 16443      4B455F43 
 16443      544F525F 
 16443      53454354 
 16444              	.LASF603:
 16445 8531 5F5F4C6F 		.ascii	"__Long long\000"
 16445      6E67206C 
 16445      6F6E6700 
 16446              	.LASF576:
 16447 853d 5F5F5F69 		.ascii	"___int_least32_t_defined 1\000"
 16447      6E745F6C 
 16447      65617374 
 16447      33325F74 
 16447      5F646566 
 16448              	.LASF418:
 16449 8558 5F5F4152 		.ascii	"__ARM_FEATURE_FP16_SCALAR_ARITHMETIC\000"
 16449      4D5F4645 
 16449      41545552 
 16449      455F4650 
 16449      31365F53 
 16450              	.LASF1368:
 16451 857d 65437572 		.ascii	"eCurrentState\000"
 16451      72656E74 
 16451      53746174 
 16451      6500
 16452              	.LASF299:
 16453 858b 5F5F5553 		.ascii	"__USACCUM_EPSILON__ 0x1P-8UHK\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 437


 16453      41434355 
 16453      4D5F4550 
 16453      53494C4F 
 16453      4E5F5F20 
 16454              	.LASF171:
 16455 85a9 5F5F4442 		.ascii	"__DBL_HAS_QUIET_NAN__ 1\000"
 16455      4C5F4841 
 16455      535F5155 
 16455      4945545F 
 16455      4E414E5F 
 16456              	.LASF970:
 16457 85c1 706F7274 		.ascii	"portFLOAT float\000"
 16457      464C4F41 
 16457      5420666C 
 16457      6F617400 
 16458              	.LASF1146:
 16459 85d1 74736B4B 		.ascii	"tskKERNEL_VERSION_NUMBER \"V8.1.2\"\000"
 16459      45524E45 
 16459      4C5F5645 
 16459      5253494F 
 16459      4E5F4E55 
 16460              	.LASF907:
 16461 85f3 494E5433 		.ascii	"INT32_C(x) __INT32_C(x)\000"
 16461      325F4328 
 16461      7829205F 
 16461      5F494E54 
 16461      33325F43 
 16462              	.LASF1429:
 16463 860b 70757853 		.ascii	"puxStackBuffer\000"
 16463      7461636B 
 16463      42756666 
 16463      657200
 16464              	.LASF1499:
 16465 861a 78546173 		.ascii	"xTaskGenericCreate\000"
 16465      6B47656E 
 16465      65726963 
 16465      43726561 
 16465      746500
 16466              	.LASF1160:
 16467 862d 78546173 		.ascii	"xTaskCreateRestricted(x,pxCreatedTask) xTaskGeneric"
 16467      6B437265 
 16467      61746552 
 16467      65737472 
 16467      69637465 
 16468 8660 43726561 		.ascii	"Create( ((x)->pvTaskCode), ((x)->pcName), ((x)->usS"
 16468      74652820 
 16468      28287829 
 16468      2D3E7076 
 16468      5461736B 
 16469 8693 7461636B 		.ascii	"tackDepth), ((x)->pvParameters), ((x)->uxPriority),"
 16469      44657074 
 16469      68292C20 
 16469      28287829 
 16469      2D3E7076 
 16470 86c6 20287078 		.ascii	" (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xReg"
 16470      43726561 
 16470      74656454 
ARM GAS  /tmp/ccTV2SzP.s 			page 438


 16470      61736B29 
 16470      2C202828 
 16471 86f9 696F6E73 		.ascii	"ions) )\000"
 16471      29202900 
 16472              	.LASF283:
 16473 8701 5F5F4C4C 		.ascii	"__LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR\000"
 16473      46524143 
 16473      545F4D41 
 16473      585F5F20 
 16473      30583746 
 16474              	.LASF1120:
 16475 872b 7854696D 		.ascii	"xTimerHandle TimerHandle_t\000"
 16475      65724861 
 16475      6E646C65 
 16475      2054696D 
 16475      65724861 
 16476              	.LASF872:
 16477 8746 55494E54 		.ascii	"UINT_LEAST32_MAX (__UINT_LEAST32_MAX__)\000"
 16477      5F4C4541 
 16477      53543332 
 16477      5F4D4158 
 16477      20285F5F 
 16478              	.LASF1416:
 16479 876e 70756353 		.ascii	"pucStackByte\000"
 16479      7461636B 
 16479      42797465 
 16479      00
 16480              	.LASF997:
 16481 877b 706F7274 		.ascii	"portGET_HIGHEST_PRIORITY(uxTopPriority,uxReadyPrior"
 16481      4745545F 
 16481      48494748 
 16481      4553545F 
 16481      5052494F 
 16482 87ae 69746965 		.ascii	"ities) uxTopPriority = ( 31 - ucPortCountLeadingZer"
 16482      73292075 
 16482      78546F70 
 16482      5072696F 
 16482      72697479 
 16483 87e1 6F732820 		.ascii	"os( ( uxReadyPriorities ) ) )\000"
 16483      28207578 
 16483      52656164 
 16483      79507269 
 16483      6F726974 
 16484              	.LASF625:
 16485 87ff 5F524545 		.ascii	"_REENT_CHECK_EMERGENCY(ptr) \000"
 16485      4E545F43 
 16485      4845434B 
 16485      5F454D45 
 16485      5247454E 
 16486              	.LASF939:
 16487 881c 494E434C 		.ascii	"INCLUDE_vTaskCleanUpResources 0\000"
 16487      5544455F 
 16487      76546173 
 16487      6B436C65 
 16487      616E5570 
 16488              	.LASF293:
 16489 883c 5F5F5341 		.ascii	"__SACCUM_MAX__ 0X7FFFP-7HK\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 439


 16489      4343554D 
 16489      5F4D4158 
 16489      5F5F2030 
 16489      58374646 
 16490              	.LASF62:
 16491 8857 5F5F494E 		.ascii	"__INTPTR_TYPE__ int\000"
 16491      54505452 
 16491      5F545950 
 16491      455F5F20 
 16491      696E7400 
 16492              	.LASF35:
 16493 886b 5F5F4348 		.ascii	"__CHAR16_TYPE__ short unsigned int\000"
 16493      41523136 
 16493      5F545950 
 16493      455F5F20 
 16493      73686F72 
 16494              	.LASF63:
 16495 888e 5F5F5549 		.ascii	"__UINTPTR_TYPE__ unsigned int\000"
 16495      4E545054 
 16495      525F5459 
 16495      50455F5F 
 16495      20756E73 
 16496              	.LASF1053:
 16497 88ac 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR(pxQueue) \000"
 16497      65515545 
 16497      55455F53 
 16497      454E445F 
 16497      46524F4D 
 16498              	.LASF366:
 16499 88cf 5F5F5245 		.ascii	"__REGISTER_PREFIX__ \000"
 16499      47495354 
 16499      45525F50 
 16499      52454649 
 16499      585F5F20 
 16500              	.LASF194:
 16501 88e4 5F5F464C 		.ascii	"__FLT32_MAX__ 3.4028234663852886e+38F32\000"
 16501      5433325F 
 16501      4D41585F 
 16501      5F20332E 
 16501      34303238 
 16502              	.LASF159:
 16503 890c 5F5F4442 		.ascii	"__DBL_DIG__ 15\000"
 16503      4C5F4449 
 16503      475F5F20 
 16503      313500
 16504              	.LASF279:
 16505 891b 5F5F554C 		.ascii	"__ULFRACT_EPSILON__ 0x1P-32ULR\000"
 16505      46524143 
 16505      545F4550 
 16505      53494C4F 
 16505      4E5F5F20 
 16506              	.LASF755:
 16507 893a 5F5F5243 		.ascii	"__RCSID(s) struct __hack\000"
 16507      53494428 
 16507      73292073 
 16507      74727563 
 16507      74205F5F 
ARM GAS  /tmp/ccTV2SzP.s 			page 440


 16508              	.LASF1026:
 16509 8953 74726163 		.ascii	"traceEND() \000"
 16509      65454E44 
 16509      28292000 
 16510              	.LASF1091:
 16511 895f 636F6E66 		.ascii	"configUSE_MALLOC_FAILED_HOOK 0\000"
 16511      69675553 
 16511      455F4D41 
 16511      4C4C4F43 
 16511      5F464149 
 16512              	.LASF1361:
 16513 897e 756C4C65 		.ascii	"ulLengthInBytes\000"
 16513      6E677468 
 16513      496E4279 
 16513      74657300 
 16514              	.LASF1389:
 16515 898e 70784465 		.ascii	"pxDelayedTaskList\000"
 16515      6C617965 
 16515      64546173 
 16515      6B4C6973 
 16515      7400
 16516              	.LASF1343:
 16517 89a0 784C4953 		.ascii	"xLIST\000"
 16517      5400
 16518              	.LASF680:
 16519 89a6 5F5F474E 		.ascii	"__GNUCLIKE___OFFSETOF 1\000"
 16519      55434C49 
 16519      4B455F5F 
 16519      5F4F4646 
 16519      5345544F 
 16520              	.LASF246:
 16521 89be 5F5F4445 		.ascii	"__DEC128_MIN__ 1E-6143DL\000"
 16521      43313238 
 16521      5F4D494E 
 16521      5F5F2031 
 16521      452D3631 
 16522              	.LASF113:
 16523 89d7 5F5F494E 		.ascii	"__INT64_C(c) c ## LL\000"
 16523      5436345F 
 16523      43286329 
 16523      20632023 
 16523      23204C4C 
 16524              	.LASF446:
 16525 89ec 48415645 		.ascii	"HAVE_INITFINI_ARRAY 1\000"
 16525      5F494E49 
 16525      5446494E 
 16525      495F4152 
 16525      52415920 
 16526              	.LASF770:
 16527 8a02 5F5F6C6F 		.ascii	"__lockable __lock_annotate(lockable)\000"
 16527      636B6162 
 16527      6C65205F 
 16527      5F6C6F63 
 16527      6B5F616E 
 16528              	.LASF483:
 16529 8a27 5F484156 		.ascii	"_HAVE_STDC \000"
 16529      455F5354 
ARM GAS  /tmp/ccTV2SzP.s 			page 441


 16529      44432000 
 16530              	.LASF1138:
 16531 8a33 6C697374 		.ascii	"listGET_END_MARKER(pxList) ( ( ListItem_t const * )"
 16531      4745545F 
 16531      454E445F 
 16531      4D41524B 
 16531      45522870 
 16532 8a66 20282026 		.ascii	" ( &( ( pxList )->xListEnd ) ) )\000"
 16532      28202820 
 16532      70784C69 
 16532      73742029 
 16532      2D3E784C 
 16533              	.LASF676:
 16534 8a87 5F5F454E 		.ascii	"__END_DECLS \000"
 16534      445F4445 
 16534      434C5320 
 16534      00
 16535              	.LASF754:
 16536 8a94 5F5F4642 		.ascii	"__FBSDID(s) struct __hack\000"
 16536      53444944 
 16536      28732920 
 16536      73747275 
 16536      6374205F 
 16537              	.LASF994:
 16538 8aae 636F6E66 		.ascii	"configUSE_PORT_OPTIMISED_TASK_SELECTION 1\000"
 16538      69675553 
 16538      455F504F 
 16538      52545F4F 
 16538      5054494D 
 16539              	.LASF1060:
 16540 8ad8 74726163 		.ascii	"traceTASK_CREATE_FAILED() \000"
 16540      65544153 
 16540      4B5F4352 
 16540      45415445 
 16540      5F464149 
 16541              	.LASF722:
 16542 8af3 5F5F6765 		.ascii	"__generic(expr,t,yes,no) __builtin_choose_expr( __b"
 16542      6E657269 
 16542      63286578 
 16542      70722C74 
 16542      2C796573 
 16543 8b26 75696C74 		.ascii	"uiltin_types_compatible_p(__typeof(expr), t), yes, "
 16543      696E5F74 
 16543      79706573 
 16543      5F636F6D 
 16543      70617469 
 16544 8b59 6E6F2900 		.ascii	"no)\000"
 16545              	.LASF181:
 16546 8b5d 5F5F4C44 		.ascii	"__LDBL_MIN__ 2.2250738585072014e-308L\000"
 16546      424C5F4D 
 16546      494E5F5F 
 16546      20322E32 
 16546      32353037 
 16547              	.LASF1017:
 16548 8b83 494E434C 		.ascii	"INCLUDE_xTimerPendFunctionCall 0\000"
 16548      5544455F 
 16548      7854696D 
ARM GAS  /tmp/ccTV2SzP.s 			page 442


 16548      65725065 
 16548      6E644675 
 16549              	.LASF683:
 16550 8ba4 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_CONSTANT_P 1\000"
 16550      55434C49 
 16550      4B455F42 
 16550      55494C54 
 16550      494E5F43 
 16551              	.LASF301:
 16552 8bc4 5F5F4143 		.ascii	"__ACCUM_IBIT__ 16\000"
 16552      43554D5F 
 16552      49424954 
 16552      5F5F2031 
 16552      3600
 16553              	.LASF1119:
 16554 8bd6 78546173 		.ascii	"xTaskStatusType TaskStatus_t\000"
 16554      6B537461 
 16554      74757354 
 16554      79706520 
 16554      5461736B 
 16555              	.LASF1390:
 16556 8bf3 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 16556      6572666C 
 16556      6F774465 
 16556      6C617965 
 16556      64546173 
 16557              	.LASF1076:
 16558 8c0d 74726163 		.ascii	"traceEVENT_GROUP_CREATE(xEventGroup) \000"
 16558      65455645 
 16558      4E545F47 
 16558      524F5550 
 16558      5F435245 
 16559              	.LASF594:
 16560 8c33 756E7369 		.ascii	"unsigned\000"
 16560      676E6564 
 16560      00
 16561              	.LASF1306:
 16562 8c3c 5F6D626C 		.ascii	"_mblen_state\000"
 16562      656E5F73 
 16562      74617465 
 16562      00
 16563              	.LASF674:
 16564 8c49 5F5F6861 		.ascii	"__has_builtin(x) 0\000"
 16564      735F6275 
 16564      696C7469 
 16564      6E287829 
 16564      203000
 16565              	.LASF1064:
 16566 8c5c 74726163 		.ascii	"traceTASK_PRIORITY_SET(pxTask,uxNewPriority) \000"
 16566      65544153 
 16566      4B5F5052 
 16566      494F5249 
 16566      54595F53 
 16567              	.LASF794:
 16568 8c8a 5F535452 		.ascii	"_STRING_H_ \000"
 16568      494E475F 
 16568      485F2000 
ARM GAS  /tmp/ccTV2SzP.s 			page 443


 16569              	.LASF1486:
 16570 8c96 76546173 		.ascii	"vTaskPrioritySet\000"
 16570      6B507269 
 16570      6F726974 
 16570      79536574 
 16570      00
 16571              	.LASF550:
 16572 8ca7 5F535444 		.ascii	"_STDDEF_H \000"
 16572      4445465F 
 16572      482000
 16573              	.LASF783:
 16574 8cb2 5F5F7074 		.ascii	"__pt_guarded_by(x) __lock_annotate(pt_guarded_by(x)"
 16574      5F677561 
 16574      72646564 
 16574      5F627928 
 16574      7829205F 
 16575 8ce5 2900     		.ascii	")\000"
 16576              	.LASF782:
 16577 8ce7 5F5F6775 		.ascii	"__guarded_by(x) __lock_annotate(guarded_by(x))\000"
 16577      61726465 
 16577      645F6279 
 16577      28782920 
 16577      5F5F6C6F 
 16578              	.LASF1455:
 16579 8d16 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 16579      6B506C61 
 16579      63654F6E 
 16579      556E6F72 
 16579      64657265 
 16580              	.LASF118:
 16581 8d35 5F5F5549 		.ascii	"__UINT16_C(c) c\000"
 16581      4E543136 
 16581      5F432863 
 16581      29206300 
 16582              	.LASF524:
 16583 8d45 5F5F5F69 		.ascii	"___int_size_t_h \000"
 16583      6E745F73 
 16583      697A655F 
 16583      745F6820 
 16583      00
 16584              	.LASF606:
 16585 8d56 5F524545 		.ascii	"_REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,\000"
 16585      4E545F49 
 16585      4E49545F 
 16585      41544558 
 16585      4954205F 
 16586              	.LASF694:
 16587 8d7e 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE__ 1\000"
 16587      5F535550 
 16587      504F5254 
 16587      535F5F5F 
 16587      494E4C49 
 16588              	.LASF363:
 16589 8d99 5F5F5544 		.ascii	"__UDA_IBIT__ 32\000"
 16589      415F4942 
 16589      49545F5F 
 16589      20333200 
ARM GAS  /tmp/ccTV2SzP.s 			page 444


 16590              	.LASF824:
 16591 8da9 5F5F4C45 		.ascii	"__LEAST16 \"h\"\000"
 16591      41535431 
 16591      36202268 
 16591      2200
 16592              	.LASF743:
 16593 8db7 5F5F7072 		.ascii	"__printflike(fmtarg,firstvararg) __attribute__((__f"
 16593      696E7466 
 16593      6C696B65 
 16593      28666D74 
 16593      6172672C 
 16594 8dea 6F726D61 		.ascii	"ormat__ (__printf__, fmtarg, firstvararg)))\000"
 16594      745F5F20 
 16594      285F5F70 
 16594      72696E74 
 16594      665F5F2C 
 16595              	.LASF369:
 16596 8e16 5F5F4E4F 		.ascii	"__NO_INLINE__ 1\000"
 16596      5F494E4C 
 16596      494E455F 
 16596      5F203100 
 16597              	.LASF730:
 16598 8e26 5F5F6661 		.ascii	"__fastcall __attribute__((__fastcall__))\000"
 16598      73746361 
 16598      6C6C205F 
 16598      5F617474 
 16598      72696275 
 16599              	.LASF963:
 16600 8e4f 65727251 		.ascii	"errQUEUE_FULL ( ( BaseT_t ) 0 )\000"
 16600      55455545 
 16600      5F46554C 
 16600      4C202820 
 16600      28204261 
 16601              	.LASF873:
 16602 8e6f 494E5436 		.ascii	"INT64_MIN (-__INT64_MAX__ - 1)\000"
 16602      345F4D49 
 16602      4E20282D 
 16602      5F5F494E 
 16602      5436345F 
 16603              	.LASF769:
 16604 8e8e 5F5F6C6F 		.ascii	"__lock_annotate(x) \000"
 16604      636B5F61 
 16604      6E6E6F74 
 16604      61746528 
 16604      78292000 
 16605              	.LASF6:
 16606 8ea2 5F5F4154 		.ascii	"__ATOMIC_RELAXED 0\000"
 16606      4F4D4943 
 16606      5F52454C 
 16606      41584544 
 16606      203000
 16607              	.LASF504:
 16608 8eb5 5F415454 		.ascii	"_ATTRIBUTE(attrs) __attribute__ (attrs)\000"
 16608      52494255 
 16608      54452861 
 16608      74747273 
 16608      29205F5F 
ARM GAS  /tmp/ccTV2SzP.s 			page 445


 16609              	.LASF742:
 16610 8edd 5F5F636F 		.ascii	"__containerof(x,s,m) ({ const volatile __typeof(((s"
 16610      6E746169 
 16610      6E65726F 
 16610      6628782C 
 16610      732C6D29 
 16611 8f10 202A2930 		.ascii	" *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volat"
 16611      292D3E6D 
 16611      29202A5F 
 16611      5F78203D 
 16611      20287829 
 16612 8f43 696C6520 		.ascii	"ile char *)__x - __offsetof(s, m));})\000"
 16612      63686172 
 16612      202A295F 
 16612      5F78202D 
 16612      205F5F6F 
 16613              	.LASF819:
 16614 8f69 5F5F4641 		.ascii	"__FAST8 \000"
 16614      53543820 
 16614      00
 16615              	.LASF901:
 16616 8f72 57494E54 		.ascii	"WINT_MAX (__WINT_MAX__)\000"
 16616      5F4D4158 
 16616      20285F5F 
 16616      57494E54 
 16616      5F4D4158 
 16617              	.LASF654:
 16618 8f8a 5F5F4154 		.ascii	"__ATTRIBUTE_IMPURE_PTR__ \000"
 16618      54524942 
 16618      5554455F 
 16618      494D5055 
 16618      52455F50 
 16619              	.LASF170:
 16620 8fa4 5F5F4442 		.ascii	"__DBL_HAS_INFINITY__ 1\000"
 16620      4C5F4841 
 16620      535F494E 
 16620      46494E49 
 16620      54595F5F 
 16621              	.LASF993:
 16622 8fbb 706F7274 		.ascii	"portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPo"
 16622      53555050 
 16622      52455353 
 16622      5F544943 
 16622      4B535F41 
 16623 8fee 72745375 		.ascii	"rtSuppressTicksAndSleep( xExpectedIdleTime )\000"
 16623      70707265 
 16623      73735469 
 16623      636B7341 
 16623      6E64536C 
 16624              	.LASF92:
 16625 901b 5F5F5349 		.ascii	"__SIG_ATOMIC_MAX__ 0x7fffffff\000"
 16625      475F4154 
 16625      4F4D4943 
 16625      5F4D4158 
 16625      5F5F2030 
 16626              	.LASF201:
 16627 9039 5F5F464C 		.ascii	"__FLT64_MANT_DIG__ 53\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 446


 16627      5436345F 
 16627      4D414E54 
 16627      5F444947 
 16627      5F5F2035 
 16628              	.LASF860:
 16629 904f 55494E54 		.ascii	"UINT_LEAST8_MAX (__UINT_LEAST8_MAX__)\000"
 16629      5F4C4541 
 16629      5354385F 
 16629      4D415820 
 16629      285F5F55 
 16630              	.LASF796:
 16631 9075 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE \000"
 16631      57524150 
 16631      50455253 
 16631      5F494E43 
 16631      4C554445 
 16632              	.LASF926:
 16633 909a 636F6E66 		.ascii	"configIDLE_SHOULD_YIELD 0\000"
 16633      69674944 
 16633      4C455F53 
 16633      484F554C 
 16633      445F5949 
 16634              	.LASF668:
 16635 90b4 5F5F666C 		.ascii	"__flexarr [0]\000"
 16635      65786172 
 16635      72205B30 
 16635      5D00
 16636              	.LASF1323:
 16637 90c2 7375626F 		.ascii	"suboptarg\000"
 16637      70746172 
 16637      6700
 16638              	.LASF986:
 16639 90cc 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortClearInte"
 16639      434C4541 
 16639      525F494E 
 16639      54455252 
 16639      5550545F 
 16640 90ff 72727570 		.ascii	"rruptMask(x)\000"
 16640      744D6173 
 16640      6B287829 
 16640      00
 16641              	.LASF433:
 16642 910c 5F5F5553 		.ascii	"__USES_INITFINI__ 1\000"
 16642      45535F49 
 16642      4E495446 
 16642      494E495F 
 16642      5F203100 
 16643              	.LASF828:
 16644 9120 5F494E54 		.ascii	"_INT8_T_DECLARED \000"
 16644      385F545F 
 16644      4445434C 
 16644      41524544 
 16644      2000
 16645              	.LASF239:
 16646 9132 5F5F4445 		.ascii	"__DEC64_MIN__ 1E-383DD\000"
 16646      4336345F 
 16646      4D494E5F 
ARM GAS  /tmp/ccTV2SzP.s 			page 447


 16646      5F203145 
 16646      2D333833 
 16647              	.LASF562:
 16648 9149 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 16648      65645F70 
 16648      74726469 
 16648      66665F74 
 16648      00
 16649              	.LASF278:
 16650 915a 5F5F554C 		.ascii	"__ULFRACT_MAX__ 0XFFFFFFFFP-32ULR\000"
 16650      46524143 
 16650      545F4D41 
 16650      585F5F20 
 16650      30584646 
 16651              	.LASF164:
 16652 917c 5F5F4442 		.ascii	"__DBL_DECIMAL_DIG__ 17\000"
 16652      4C5F4445 
 16652      43494D41 
 16652      4C5F4449 
 16652      475F5F20 
 16653              	.LASF557:
 16654 9193 5F505452 		.ascii	"_PTRDIFF_T_ \000"
 16654      44494646 
 16654      5F545F20 
 16654      00
 16655              	.LASF858:
 16656 91a0 494E545F 		.ascii	"INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)\000"
 16656      4C454153 
 16656      54385F4D 
 16656      494E2028 
 16656      2D5F5F49 
 16657              	.LASF656:
 16658 91c9 5F474C4F 		.ascii	"_GLOBAL_REENT _global_impure_ptr\000"
 16658      42414C5F 
 16658      5245454E 
 16658      54205F67 
 16658      6C6F6261 
 16659              	.LASF602:
 16660 91ea 5F4E554C 		.ascii	"_NULL 0\000"
 16660      4C203000 
 16661              	.LASF1466:
 16662 91f2 75785175 		.ascii	"uxQueue\000"
 16662      65756500 
 16663              	.LASF1132:
 16664 91fa 6C697374 		.ascii	"listGET_LIST_ITEM_OWNER(pxListItem) ( ( pxListItem "
 16664      4745545F 
 16664      4C495354 
 16664      5F495445 
 16664      4D5F4F57 
 16665 922d 292D3E70 		.ascii	")->pvOwner )\000"
 16665      764F776E 
 16665      65722029 
 16665      00
 16666              	.LASF1237:
 16667 923a 5F5F746D 		.ascii	"__tm_year\000"
 16667      5F796561 
 16667      7200
ARM GAS  /tmp/ccTV2SzP.s 			page 448


 16668              	.LASF591:
 16669 9244 5F5F6C6F 		.ascii	"__lock_release_recursive(lock) (_CAST_VOID 0)\000"
 16669      636B5F72 
 16669      656C6561 
 16669      73655F72 
 16669      65637572 
 16670              	.LASF839:
 16671 9272 5F5F696E 		.ascii	"__int64_t_defined 1\000"
 16671      7436345F 
 16671      745F6465 
 16671      66696E65 
 16671      64203100 
 16672              	.LASF96:
 16673 9286 5F5F494E 		.ascii	"__INT16_MAX__ 0x7fff\000"
 16673      5431365F 
 16673      4D41585F 
 16673      5F203078 
 16673      37666666 
 16674              	.LASF444:
 16675 929b 5F57414E 		.ascii	"_WANT_REGISTER_FINI 1\000"
 16675      545F5245 
 16675      47495354 
 16675      45525F46 
 16675      494E4920 
 16676              	.LASF760:
 16677 92b1 5F5F4445 		.ascii	"__DEVOLATILE(type,var) ((type)(__uintptr_t)(volatil"
 16677      564F4C41 
 16677      54494C45 
 16677      28747970 
 16677      652C7661 
 16678 92e4 6520766F 		.ascii	"e void *)(var))\000"
 16678      6964202A 
 16678      29287661 
 16678      72292900 
 16679              	.LASF1179:
 16680 92f4 7854696D 		.ascii	"xTimerReset(xTimer,xTicksToWait) xTimerGenericComma"
 16680      65725265 
 16680      73657428 
 16680      7854696D 
 16680      65722C78 
 16681 9327 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCou"
 16681      28207854 
 16681      696D6572 
 16681      20292C20 
 16681      746D7243 
 16682 935a 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 16682      20292C20 
 16682      4E554C4C 
 16682      2C202820 
 16682      78546963 
 16683              	.LASF530:
 16684 937b 5F5F5743 		.ascii	"__WCHAR_T__ \000"
 16684      4841525F 
 16684      545F5F20 
 16684      00
 16685              	.LASF80:
 16686 9388 5F5F494E 		.ascii	"__INT_WIDTH__ 32\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 449


 16686      545F5749 
 16686      4454485F 
 16686      5F203332 
 16686      00
 16687              	.LASF685:
 16688 9399 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_STDARG 1\000"
 16688      55434C49 
 16688      4B455F42 
 16688      55494C54 
 16688      494E5F53 
 16689              	.LASF731:
 16690 93b5 5F5F7265 		.ascii	"__result_use_check __attribute__((__warn_unused_res"
 16690      73756C74 
 16690      5F757365 
 16690      5F636865 
 16690      636B205F 
 16691 93e8 756C745F 		.ascii	"ult__))\000"
 16691      5F292900 
 16692              	.LASF475:
 16693 93f0 5F5F5853 		.ascii	"__XSI_VISIBLE 0\000"
 16693      495F5649 
 16693      5349424C 
 16693      45203000 
 16694              	.LASF1392:
 16695 9400 78546173 		.ascii	"xTasksWaitingTermination\000"
 16695      6B735761 
 16695      6974696E 
 16695      67546572 
 16695      6D696E61 
 16696              	.LASF434:
 16697 9419 5F535444 		.ascii	"_STDLIB_H_ \000"
 16697      4C49425F 
 16697      485F2000 
 16698              	.LASF1024:
 16699 9425 706F7274 		.ascii	"portPOINTER_SIZE_TYPE uint32_t\000"
 16699      504F494E 
 16699      5445525F 
 16699      53495A45 
 16699      5F545950 
 16700              	.LASF330:
 16701 9444 5F5F5151 		.ascii	"__QQ_FBIT__ 7\000"
 16701      5F464249 
 16701      545F5F20 
 16701      3700
 16702              	.LASF837:
 16703 9452 5F494E54 		.ascii	"_INT64_T_DECLARED \000"
 16703      36345F54 
 16703      5F444543 
 16703      4C415245 
 16703      442000
 16704              	.LASF1011:
 16705 9465 636F6E66 		.ascii	"configUSE_APPLICATION_TASK_TAG 0\000"
 16705      69675553 
 16705      455F4150 
 16705      504C4943 
 16705      4154494F 
 16706              	.LASF1340:
ARM GAS  /tmp/ccTV2SzP.s 			page 450


 16707 9486 4C697374 		.ascii	"ListItem_t\000"
 16707      4974656D 
 16707      5F7400
 16708              	.LASF94:
 16709 9491 5F5F5349 		.ascii	"__SIG_ATOMIC_WIDTH__ 32\000"
 16709      475F4154 
 16709      4F4D4943 
 16709      5F574944 
 16709      54485F5F 
 16710              	.LASF458:
 16711 94a9 5F5F474E 		.ascii	"__GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)\000"
 16711      55435F50 
 16711      52455245 
 16711      515F5F28 
 16711      6D612C6D 
 16712              	.LASF365:
 16713 94d6 5F5F5554 		.ascii	"__UTA_IBIT__ 64\000"
 16713      415F4942 
 16713      49545F5F 
 16713      20363400 
 16714              	.LASF987:
 16715 94e6 706F7274 		.ascii	"portDISABLE_INTERRUPTS() ulPortSetInterruptMask()\000"
 16715      44495341 
 16715      424C455F 
 16715      494E5445 
 16715      52525550 
 16716              	.LASF232:
 16717 9518 5F5F4445 		.ascii	"__DEC32_MIN__ 1E-95DF\000"
 16717      4333325F 
 16717      4D494E5F 
 16717      5F203145 
 16717      2D393544 
 16718              	.LASF270:
 16719 952e 5F5F4C46 		.ascii	"__LFRACT_FBIT__ 31\000"
 16719      52414354 
 16719      5F464249 
 16719      545F5F20 
 16719      333100
 16720              	.LASF289:
 16721 9541 5F5F554C 		.ascii	"__ULLFRACT_EPSILON__ 0x1P-64ULLR\000"
 16721      4C465241 
 16721      43545F45 
 16721      5053494C 
 16721      4F4E5F5F 
 16722              	.LASF1255:
 16723 9562 5F6C6266 		.ascii	"_lbfsize\000"
 16723      73697A65 
 16723      00
 16724              	.LASF581:
 16725 956b 5F5F4C4F 		.ascii	"__LOCK_INIT_RECURSIVE(class,lock) static int lock ="
 16725      434B5F49 
 16725      4E49545F 
 16725      52454355 
 16725      52534956 
 16726 959e 20303B00 		.ascii	" 0;\000"
 16727              	.LASF388:
 16728 95a2 5F5F5349 		.ascii	"__SIZEOF_WINT_T__ 4\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 451


 16728      5A454F46 
 16728      5F57494E 
 16728      545F545F 
 16728      5F203400 
 16729              	.LASF1247:
 16730 95b6 5F696E64 		.ascii	"_ind\000"
 16730      00
 16731              	.LASF454:
 16732 95bb 5F554E42 		.ascii	"_UNBUF_STREAM_OPT 1\000"
 16732      55465F53 
 16732      54524541 
 16732      4D5F4F50 
 16732      54203100 
 16733              	.LASF394:
 16734 95cf 5F5F4152 		.ascii	"__ARM_FEATURE_UNALIGNED 1\000"
 16734      4D5F4645 
 16734      41545552 
 16734      455F554E 
 16734      414C4947 
 16735              	.LASF431:
 16736 95e9 5F5F4758 		.ascii	"__GXX_TYPEINFO_EQUALITY_INLINE 0\000"
 16736      585F5459 
 16736      5045494E 
 16736      464F5F45 
 16736      5155414C 
 16737              	.LASF772:
 16738 960a 5F5F6C6F 		.ascii	"__locks_shared(...) __lock_annotate(shared_lock_fun"
 16738      636B735F 
 16738      73686172 
 16738      6564282E 
 16738      2E2E2920 
 16739 963d 6374696F 		.ascii	"ction(__VA_ARGS__))\000"
 16739      6E285F5F 
 16739      56415F41 
 16739      5247535F 
 16739      5F292900 
 16740              	.LASF1380:
 16741 9651 75785443 		.ascii	"uxTCBNumber\000"
 16741      424E756D 
 16741      62657200 
 16742              	.LASF494:
 16743 965d 5F564F49 		.ascii	"_VOID void\000"
 16743      4420766F 
 16743      696400
 16744              	.LASF1384:
 16745 9668 5443425F 		.ascii	"TCB_t\000"
 16745      7400
 16746              	.LASF677:
 16747 966e 5F5F474E 		.ascii	"__GNUCLIKE_ASM 3\000"
 16747      55434C49 
 16747      4B455F41 
 16747      534D2033 
 16747      00
 16748              	.LASF312:
 16749 967f 5F5F4C41 		.ascii	"__LACCUM_MIN__ (-0X1P31LK-0X1P31LK)\000"
 16749      4343554D 
 16749      5F4D494E 
ARM GAS  /tmp/ccTV2SzP.s 			page 452


 16749      5F5F2028 
 16749      2D305831 
 16750              	.LASF1048:
 16751 96a3 74726163 		.ascii	"traceQUEUE_SEND_FAILED(pxQueue) \000"
 16751      65515545 
 16751      55455F53 
 16751      454E445F 
 16751      4641494C 
 16752              	.LASF123:
 16753 96c4 5F5F494E 		.ascii	"__INT_FAST8_MAX__ 0x7fffffff\000"
 16753      545F4641 
 16753      5354385F 
 16753      4D41585F 
 16753      5F203078 
 16754              	.LASF198:
 16755 96e1 5F5F464C 		.ascii	"__FLT32_HAS_DENORM__ 1\000"
 16755      5433325F 
 16755      4841535F 
 16755      44454E4F 
 16755      524D5F5F 
 16756              	.LASF744:
 16757 96f8 5F5F7363 		.ascii	"__scanflike(fmtarg,firstvararg) __attribute__((__fo"
 16757      616E666C 
 16757      696B6528 
 16757      666D7461 
 16757      72672C66 
 16758 972b 726D6174 		.ascii	"rmat__ (__scanf__, fmtarg, firstvararg)))\000"
 16758      5F5F2028 
 16758      5F5F7363 
 16758      616E665F 
 16758      5F2C2066 
 16759              	.LASF230:
 16760 9755 5F5F4445 		.ascii	"__DEC32_MIN_EXP__ (-94)\000"
 16760      4333325F 
 16760      4D494E5F 
 16760      4558505F 
 16760      5F20282D 
 16761              	.LASF1077:
 16762 976d 74726163 		.ascii	"traceEVENT_GROUP_CREATE_FAILED() \000"
 16762      65455645 
 16762      4E545F47 
 16762      524F5550 
 16762      5F435245 
 16763              	.LASF327:
 16764 978f 5F5F554C 		.ascii	"__ULLACCUM_MIN__ 0.0ULLK\000"
 16764      4C414343 
 16764      554D5F4D 
 16764      494E5F5F 
 16764      20302E30 
 16765              	.LASF1492:
 16766 97a8 78546963 		.ascii	"xTicksToDelay\000"
 16766      6B73546F 
 16766      44656C61 
 16766      7900
 16767              	.LASF128:
 16768 97b6 5F5F494E 		.ascii	"__INT_FAST32_WIDTH__ 32\000"
 16768      545F4641 
ARM GAS  /tmp/ccTV2SzP.s 			page 453


 16768      53543332 
 16768      5F574944 
 16768      54485F5F 
 16769              	.LASF1342:
 16770 97ce 4D696E69 		.ascii	"MiniListItem_t\000"
 16770      4C697374 
 16770      4974656D 
 16770      5F7400
 16771              	.LASF611:
 16772 97dd 5F52414E 		.ascii	"_RAND48_MULT_0 (0xe66d)\000"
 16772      4434385F 
 16772      4D554C54 
 16772      5F302028 
 16772      30786536 
 16773              	.LASF1245:
 16774 97f5 5F69735F 		.ascii	"_is_cxa\000"
 16774      63786100 
 16775              	.LASF20:
 16776 97fd 5F5F5349 		.ascii	"__SIZEOF_SIZE_T__ 4\000"
 16776      5A454F46 
 16776      5F53495A 
 16776      455F545F 
 16776      5F203400 
 16777              	.LASF686:
 16778 9811 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VAALIST 1\000"
 16778      55434C49 
 16778      4B455F42 
 16778      55494C54 
 16778      494E5F56 
 16779              	.LASF1189:
 16780 982e 7461736B 		.ascii	"taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_AP"
 16780      5949454C 
 16780      445F4946 
 16780      5F555349 
 16780      4E475F50 
 16781 9861 49282900 		.ascii	"I()\000"
 16782              	.LASF752:
 16783 9865 5F5F7379 		.ascii	"__sym_compat(sym,impl,verid) __asm__(\".symver \" #"
 16783      6D5F636F 
 16783      6D706174 
 16783      2873796D 
 16783      2C696D70 
 16784 9896 696D706C 		.ascii	"impl \", \" #sym \"@\" #verid)\000"
 16784      20222C20 
 16784      22202373 
 16784      796D2022 
 16784      40222023 
 16785              	.LASF1318:
 16786 98b1 5F6E6578 		.ascii	"_nextf\000"
 16786      746600
 16787              	.LASF817:
 16788 98b8 5F5F494E 		.ascii	"__INT32 \"l\"\000"
 16788      54333220 
 16788      226C2200 
 16789              	.LASF430:
 16790 98c4 5F5F4152 		.ascii	"__ARM_ASM_SYNTAX_UNIFIED__ 1\000"
 16790      4D5F4153 
ARM GAS  /tmp/ccTV2SzP.s 			page 454


 16790      4D5F5359 
 16790      4E544158 
 16790      5F554E49 
 16791              	.LASF1504:
 16792 98e1 2F686F6D 		.ascii	"/home/nakano/Projects/UTC/RSC/Embedded/LEDs_activat"
 16792      652F6E61 
 16792      6B616E6F 
 16792      2F50726F 
 16792      6A656374 
 16793 9914 696F6E2F 		.ascii	"ion/\000"
 16793      00
 16794              	.LASF771:
 16795 9919 5F5F6C6F 		.ascii	"__locks_exclusive(...) __lock_annotate(exclusive_lo"
 16795      636B735F 
 16795      6578636C 
 16795      75736976 
 16795      65282E2E 
 16796 994c 636B5F66 		.ascii	"ck_function(__VA_ARGS__))\000"
 16796      756E6374 
 16796      696F6E28 
 16796      5F5F5641 
 16796      5F415247 
 16797              	.LASF793:
 16798 9966 73747274 		.ascii	"strtodf strtof\000"
 16798      6F646620 
 16798      73747274 
 16798      6F6600
 16799              	.LASF882:
 16800 9975 494E545F 		.ascii	"INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)\000"
 16800      46415354 
 16800      31365F4D 
 16800      494E2028 
 16800      2D5F5F49 
 16801              	.LASF44:
 16802 999e 5F5F5549 		.ascii	"__UINT32_TYPE__ long unsigned int\000"
 16802      4E543332 
 16802      5F545950 
 16802      455F5F20 
 16802      6C6F6E67 
 16803              	.LASF678:
 16804 99c0 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_CONSTANTS \000"
 16804      55434C49 
 16804      4B455F4D 
 16804      4154485F 
 16804      4255494C 
 16805              	.LASF408:
 16806 99e3 5F5F7468 		.ascii	"__thumb2__ 1\000"
 16806      756D6232 
 16806      5F5F2031 
 16806      00
 16807              	.LASF1440:
 16808 99f0 70765061 		.ascii	"pvParameters\000"
 16808      72616D65 
 16808      74657273 
 16808      00
 16809              	.LASF1425:
 16810 99fd 75785461 		.ascii	"uxTask\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 455


 16810      736B00
 16811              	.LASF459:
 16812 9a04 5F444546 		.ascii	"_DEFAULT_SOURCE\000"
 16812      41554C54 
 16812      5F534F55 
 16812      52434500 
 16813              	.LASF809:
 16814 9a14 73686F72 		.ascii	"short +1\000"
 16814      74202B31 
 16814      00
 16815              	.LASF525:
 16816 9a1d 5F474343 		.ascii	"_GCC_SIZE_T \000"
 16816      5F53495A 
 16816      455F5420 
 16816      00
 16817              	.LASF999:
 16818 9a2a 706F7274 		.ascii	"portNOP() \000"
 16818      4E4F5028 
 16818      292000
 16819              	.LASF696:
 16820 9a35 5F5F4343 		.ascii	"__CC_SUPPORTS_WARNING 1\000"
 16820      5F535550 
 16820      504F5254 
 16820      535F5741 
 16820      524E494E 
 16821              	.LASF1158:
 16822 9a4d 7461736B 		.ascii	"taskSCHEDULER_RUNNING ( ( BaseT_t ) 2 )\000"
 16822      53434845 
 16822      44554C45 
 16822      525F5255 
 16822      4E4E494E 
 16823              	.LASF287:
 16824 9a75 5F5F554C 		.ascii	"__ULLFRACT_MIN__ 0.0ULLR\000"
 16824      4C465241 
 16824      43545F4D 
 16824      494E5F5F 
 16824      20302E30 
 16825              	.LASF532:
 16826 9a8e 5F545F57 		.ascii	"_T_WCHAR_ \000"
 16826      43484152 
 16826      5F2000
 16827              	.LASF1277:
 16828 9a99 5F6C6F63 		.ascii	"_locale\000"
 16828      616C6500 
 16829              	.LASF1225:
 16830 9aa1 5F5F554C 		.ascii	"__ULong\000"
 16830      6F6E6700 
 16831              	.LASF1463:
 16832 9aa9 75785461 		.ascii	"uxTaskGetSystemState\000"
 16832      736B4765 
 16832      74537973 
 16832      74656D53 
 16832      74617465 
 16833              	.LASF621:
 16834 9abe 5F524545 		.ascii	"_REENT_CHECK_RAND48(ptr) \000"
 16834      4E545F43 
 16834      4845434B 
ARM GAS  /tmp/ccTV2SzP.s 			page 456


 16834      5F52414E 
 16834      44343828 
 16835              	.LASF347:
 16836 9ad8 5F5F5544 		.ascii	"__UDQ_IBIT__ 0\000"
 16836      515F4942 
 16836      49545F5F 
 16836      203000
 16837              	.LASF834:
 16838 9ae7 5F494E54 		.ascii	"_INT32_T_DECLARED \000"
 16838      33325F54 
 16838      5F444543 
 16838      4C415245 
 16838      442000
 16839              	.LASF13:
 16840 9afa 5F5F5349 		.ascii	"__SIZEOF_INT__ 4\000"
 16840      5A454F46 
 16840      5F494E54 
 16840      5F5F2034 
 16840      00
 16841              	.LASF544:
 16842 9b0b 5F425344 		.ascii	"_BSD_WCHAR_T_\000"
 16842      5F574348 
 16842      41525F54 
 16842      5F00
 16843              	.LASF1182:
 16844 9b19 7854696D 		.ascii	"xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHighe"
 16844      65724368 
 16844      616E6765 
 16844      50657269 
 16844      6F644672 
 16845 9b4c 72507269 		.ascii	"rPriorityTaskWoken) xTimerGenericCommand( ( xTimer "
 16845      6F726974 
 16845      79546173 
 16845      6B576F6B 
 16845      656E2920 
 16846 9b7f 292C2074 		.ascii	"), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod "
 16846      6D72434F 
 16846      4D4D414E 
 16846      445F4348 
 16846      414E4745 
 16847 9bb2 292C2028 		.ascii	"), ( pxHigherPriorityTaskWoken ), 0U )\000"
 16847      20707848 
 16847      69676865 
 16847      72507269 
 16847      6F726974 
 16848              	.LASF281:
 16849 9bd9 5F5F4C4C 		.ascii	"__LLFRACT_IBIT__ 0\000"
 16849      46524143 
 16849      545F4942 
 16849      49545F5F 
 16849      203000
 16850              	.LASF697:
 16851 9bec 5F5F4343 		.ascii	"__CC_SUPPORTS_VARADIC_XXX 1\000"
 16851      5F535550 
 16851      504F5254 
 16851      535F5641 
 16851      52414449 
ARM GAS  /tmp/ccTV2SzP.s 			page 457


 16852              	.LASF1326:
 16853 9c08 75696E74 		.ascii	"uint32_t\000"
 16853      33325F74 
 16853      00
 16854              	.LASF979:
 16855 9c11 706F7274 		.ascii	"portBYTE_ALIGNMENT 8\000"
 16855      42595445 
 16855      5F414C49 
 16855      474E4D45 
 16855      4E542038 
 16856              	.LASF1251:
 16857 9c26 5F73697A 		.ascii	"_size\000"
 16857      6500
 16858              	.LASF799:
 16859 9c2c 5F535953 		.ascii	"_SYS__INTSUP_H \000"
 16859      5F5F494E 
 16859      54535550 
 16859      5F482000 
 16860              	.LASF325:
 16861 9c3c 5F5F554C 		.ascii	"__ULLACCUM_FBIT__ 32\000"
 16861      4C414343 
 16861      554D5F46 
 16861      4249545F 
 16861      5F203332 
 16862              	.LASF577:
 16863 9c51 5F5F5F69 		.ascii	"___int_least64_t_defined 1\000"
 16863      6E745F6C 
 16863      65617374 
 16863      36345F74 
 16863      5F646566 
 16864              	.LASF1280:
 16865 9c6c 5F726573 		.ascii	"_result\000"
 16865      756C7400 
 16866              	.LASF889:
 16867 9c74 494E545F 		.ascii	"INT_FAST64_MAX (__INT_FAST64_MAX__)\000"
 16867      46415354 
 16867      36345F4D 
 16867      41582028 
 16867      5F5F494E 
 16868              	.LASF1438:
 16869 9c98 78526567 		.ascii	"xRegions\000"
 16869      696F6E73 
 16869      00
 16870              	.LASF1007:
 16871 9ca1 494E434C 		.ascii	"INCLUDE_xTimerGetTimerDaemonTaskHandle 0\000"
 16871      5544455F 
 16871      7854696D 
 16871      65724765 
 16871      7454696D 
 16872              	.LASF462:
 16873 9cca 5F504F53 		.ascii	"_POSIX_SOURCE 1\000"
 16873      49585F53 
 16873      4F555243 
 16873      45203100 
 16874              	.LASF1131:
 16875 9cda 6C697374 		.ascii	"listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( ( pxL"
 16875      5345545F 
ARM GAS  /tmp/ccTV2SzP.s 			page 458


 16875      4C495354 
 16875      5F495445 
 16875      4D5F4F57 
 16876 9d0d 69737449 		.ascii	"istItem )->pvOwner = ( void * ) ( pxOwner ) )\000"
 16876      74656D20 
 16876      292D3E70 
 16876      764F776E 
 16876      6572203D 
 16877              	.LASF59:
 16878 9d3b 5F5F5549 		.ascii	"__UINT_FAST16_TYPE__ unsigned int\000"
 16878      4E545F46 
 16878      41535431 
 16878      365F5459 
 16878      50455F5F 
 16879              	.LASF359:
 16880 9d5d 5F5F5548 		.ascii	"__UHA_IBIT__ 8\000"
 16880      415F4942 
 16880      49545F5F 
 16880      203800
 16881              	.LASF595:
 16882 9d6c 5F5F6E65 		.ascii	"__need_wint_t \000"
 16882      65645F77 
 16882      696E745F 
 16882      742000
 16883              	.LASF304:
 16884 9d7b 5F5F4143 		.ascii	"__ACCUM_EPSILON__ 0x1P-15K\000"
 16884      43554D5F 
 16884      45505349 
 16884      4C4F4E5F 
 16884      5F203078 
 16885              	.LASF319:
 16886 9d96 5F5F554C 		.ascii	"__ULACCUM_EPSILON__ 0x1P-32ULK\000"
 16886      41434355 
 16886      4D5F4550 
 16886      53494C4F 
 16886      4E5F5F20 
 16887              	.LASF173:
 16888 9db5 5F5F4C44 		.ascii	"__LDBL_DIG__ 15\000"
 16888      424C5F44 
 16888      49475F5F 
 16888      20313500 
 16889              	.LASF790:
 16890 9dc5 45584954 		.ascii	"EXIT_SUCCESS 0\000"
 16890      5F535543 
 16890      43455353 
 16890      203000
 16891              	.LASF166:
 16892 9dd4 5F5F4442 		.ascii	"__DBL_MIN__ ((double)2.2250738585072014e-308L)\000"
 16892      4C5F4D49 
 16892      4E5F5F20 
 16892      2828646F 
 16892      75626C65 
 16893              	.LASF719:
 16894 9e03 5F41746F 		.ascii	"_Atomic(T) struct { T volatile __val; }\000"
 16894      6D696328 
 16894      54292073 
 16894      74727563 
ARM GAS  /tmp/ccTV2SzP.s 			page 459


 16894      74207B20 
 16895              	.LASF86:
 16896 9e2b 5F5F5349 		.ascii	"__SIZE_WIDTH__ 32\000"
 16896      5A455F57 
 16896      49445448 
 16896      5F5F2033 
 16896      3200
 16897              	.LASF1155:
 16898 9e3d 7461736B 		.ascii	"taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()\000"
 16898      454E4142 
 16898      4C455F49 
 16898      4E544552 
 16898      52555054 
 16899              	.LASF487:
 16900 9e6d 5F505452 		.ascii	"_PTR void *\000"
 16900      20766F69 
 16900      64202A00 
 16901              	.LASF75:
 16902 9e79 5F5F5749 		.ascii	"__WINT_MIN__ 0U\000"
 16902      4E545F4D 
 16902      494E5F5F 
 16902      20305500 
 16903              	.LASF1376:
 16904 9e89 7847656E 		.ascii	"xGenericListItem\000"
 16904      65726963 
 16904      4C697374 
 16904      4974656D 
 16904      00
 16905              	.LASF1216:
 16906 9e9a 5F6F6666 		.ascii	"_off_t\000"
 16906      5F7400
 16907              	.LASF202:
 16908 9ea1 5F5F464C 		.ascii	"__FLT64_DIG__ 15\000"
 16908      5436345F 
 16908      4449475F 
 16908      5F203135 
 16908      00
 16909              	.LASF241:
 16910 9eb2 5F5F4445 		.ascii	"__DEC64_EPSILON__ 1E-15DD\000"
 16910      4336345F 
 16910      45505349 
 16910      4C4F4E5F 
 16910      5F203145 
 16911              	.LASF664:
 16912 9ecc 5F5F6C6F 		.ascii	"__long_double_t long double\000"
 16912      6E675F64 
 16912      6F75626C 
 16912      655F7420 
 16912      6C6F6E67 
 16913              	.LASF74:
 16914 9ee8 5F5F5749 		.ascii	"__WINT_MAX__ 0xffffffffU\000"
 16914      4E545F4D 
 16914      41585F5F 
 16914      20307866 
 16914      66666666 
 16915              	.LASF984:
 16916 9f01 706F7274 		.ascii	"portYIELD_FROM_ISR(x) portEND_SWITCHING_ISR( x )\000"
ARM GAS  /tmp/ccTV2SzP.s 			page 460


 16916      5949454C 
 16916      445F4652 
 16916      4F4D5F49 
 16916      53522878 
 16917              	.LASF105:
 16918 9f32 5F5F494E 		.ascii	"__INT_LEAST8_WIDTH__ 8\000"
 16918      545F4C45 
 16918      41535438 
 16918      5F574944 
 16918      54485F5F 
 16919              	.LASF1162:
 16920 9f49 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR ( ( BaseT_t ) "
 16920      4F4D4D41 
 16920      4E445F45 
 16920      58454355 
 16920      54455F43 
 16921 9f7c 2D322029 		.ascii	"-2 )\000"
 16921      00
 16922              	.LASF1507:
 16923 9f81 756C4269 		.ascii	"ulBitmap\000"
 16923      746D6170 
 16923      00
 16924              	.LASF1070:
 16925 9f8a 74726163 		.ascii	"traceTIMER_CREATE_FAILED() \000"
 16925      6554494D 
 16925      45525F43 
 16925      52454154 
 16925      455F4641 
 16926              	.LASF47:
 16927 9fa6 5F5F494E 		.ascii	"__INT_LEAST16_TYPE__ short int\000"
 16927      545F4C45 
 16927      41535431 
 16927      365F5459 
 16927      50455F5F 
 16928              	.LASF1298:
 16929 9fc5 5F616464 		.ascii	"_add\000"
 16929      00
 16930              	.LASF1028:
 16931 9fca 74726163 		.ascii	"traceINCREASE_TICK_COUNT(x) \000"
 16931      65494E43 
 16931      52454153 
 16931      455F5449 
 16931      434B5F43 
 16932              	.LASF1498:
 16933 9fe7 78546173 		.ascii	"xTaskToDelete\000"
 16933      6B546F44 
 16933      656C6574 
 16933      6500
 16934              	.LASF831:
 16935 9ff5 5F494E54 		.ascii	"_INT16_T_DECLARED \000"
 16935      31365F54 
 16935      5F444543 
 16935      4C415245 
 16935      442000
 16936              	.LASF165:
 16937 a008 5F5F4442 		.ascii	"__DBL_MAX__ ((double)1.7976931348623157e+308L)\000"
 16937      4C5F4D41 
ARM GAS  /tmp/ccTV2SzP.s 			page 461


 16937      585F5F20 
 16937      2828646F 
 16937      75626C65 
 16938              	.LASF1209:
 16939 a037 73686F72 		.ascii	"short unsigned int\000"
 16939      7420756E 
 16939      7369676E 
 16939      65642069 
 16939      6E7400
 16940              	.LASF280:
 16941 a04a 5F5F4C4C 		.ascii	"__LLFRACT_FBIT__ 63\000"
 16941      46524143 
 16941      545F4642 
 16941      49545F5F 
 16941      20363300 
 16942              	.LASF1234:
 16943 a05e 5F5F746D 		.ascii	"__tm_hour\000"
 16943      5F686F75 
 16943      7200
 16944              	.LASF407:
 16945 a068 5F5F7468 		.ascii	"__thumb__ 1\000"
 16945      756D625F 
 16945      5F203100 
 16946              	.LASF1157:
 16947 a074 7461736B 		.ascii	"taskSCHEDULER_NOT_STARTED ( ( BaseT_t ) 1 )\000"
 16947      53434845 
 16947      44554C45 
 16947      525F4E4F 
 16947      545F5354 
 16948              	.LASF1178:
 16949 a0a0 7854696D 		.ascii	"xTimerDelete(xTimer,xTicksToWait) xTimerGenericComm"
 16949      65724465 
 16949      6C657465 
 16949      28785469 
 16949      6D65722C 
 16950 a0d3 616E6428 		.ascii	"and( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTi"
 16950      20282078 
 16950      54696D65 
 16950      7220292C 
 16950      20746D72 
 16951 a106 636B7354 		.ascii	"cksToWait ) )\000"
 16951      6F576169 
 16951      74202920 
 16951      2900
 16952              	.LASF1137:
 16953 a114 6C697374 		.ascii	"listGET_NEXT(pxListItem) ( ( pxListItem )->pxNext )"
 16953      4745545F 
 16953      4E455854 
 16953      2870784C 
 16953      69737449 
 16954 a147 00       		.ascii	"\000"
 16955              	.LASF572:
 16956 a148 5F5F5F69 		.ascii	"___int32_t_defined 1\000"
 16956      6E743332 
 16956      5F745F64 
 16956      6566696E 
 16956      65642031 
ARM GAS  /tmp/ccTV2SzP.s 			page 462


 16957              	.LASF411:
 16958 a15d 5F5F4152 		.ascii	"__ARMEL__ 1\000"
 16958      4D454C5F 
 16958      5F203100 
 16959              	.LASF1079:
 16960 a169 74726163 		.ascii	"traceEVENT_GROUP_SYNC_END(xEventGroup,uxBitsToSet,u"
 16960      65455645 
 16960      4E545F47 
 16960      524F5550 
 16960      5F53594E 
 16961 a19c 78426974 		.ascii	"xBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutO"
 16961      73546F57 
 16961      61697446 
 16961      6F722C78 
 16961      54696D65 
 16962 a1cf 63637572 		.ascii	"ccurred\000"
 16962      72656400 
 16963              	.LASF583:
 16964 a1d7 5F5F6C6F 		.ascii	"__lock_init_recursive(lock) (_CAST_VOID 0)\000"
 16964      636B5F69 
 16964      6E69745F 
 16964      72656375 
 16964      72736976 
 16965              	.LASF745:
 16966 a202 5F5F666F 		.ascii	"__format_arg(fmtarg) __attribute__((__format_arg__ "
 16966      726D6174 
 16966      5F617267 
 16966      28666D74 
 16966      61726729 
 16967 a235 28666D74 		.ascii	"(fmtarg)))\000"
 16967      61726729 
 16967      292900
 16968              	.LASF688:
 16969 a240 5F5F636F 		.ascii	"__compiler_membar() __asm __volatile(\" \" : : : \""
 16969      6D70696C 
 16969      65725F6D 
 16969      656D6261 
 16969      72282920 
 16970 a270 6D656D6F 		.ascii	"memory\")\000"
 16970      72792229 
 16970      00
 16971              	.LASF1103:
 16972 a279 636F6E66 		.ascii	"configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTI"
 16972      6967494E 
 16972      434C5544 
 16972      455F4150 
 16972      504C4943 
 16973 a2ac 4F4E5320 		.ascii	"ONS 0\000"
 16973      3000
 16974              	.LASF332:
 16975 a2b2 5F5F4851 		.ascii	"__HQ_FBIT__ 15\000"
 16975      5F464249 
 16975      545F5F20 
 16975      313500
 16976              	.LASF1435:
 16977 a2c1 70727649 		.ascii	"prvInitialiseTaskLists\000"
 16977      6E697469 
ARM GAS  /tmp/ccTV2SzP.s 			page 463


 16977      616C6973 
 16977      65546173 
 16977      6B4C6973 
 16978              	.LASF1139:
 16979 a2d8 6C697374 		.ascii	"listLIST_IS_EMPTY(pxList) ( ( BaseT_t ) ( ( pxList "
 16979      4C495354 
 16979      5F49535F 
 16979      454D5054 
 16979      59287078 
 16980 a30b 292D3E75 		.ascii	")->uxNumberOfItems == ( UBaseT_t ) 0 ) )\000"
 16980      784E756D 
 16980      6265724F 
 16980      66497465 
 16980      6D73203D 
 16981              	.LASF768:
 16982 a334 5F5F6461 		.ascii	"__datatype_type_tag(kind,type) \000"
 16982      74617479 
 16982      70655F74 
 16982      7970655F 
 16982      74616728 
 16983              	.LASF650:
 16984 a354 5F524545 		.ascii	"_REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_"
 16984      4E545F53 
 16984      49474E41 
 16984      4C5F4255 
 16984      46287074 
 16985 a387 62756629 		.ascii	"buf)\000"
 16985      00
 16986              	.LASF77:
 16987 a38c 5F5F5349 		.ascii	"__SIZE_MAX__ 0xffffffffU\000"
 16987      5A455F4D 
 16987      41585F5F 
 16987      20307866 
 16987      66666666 
 16988              	.LASF1387:
 16989 a3a5 7844656C 		.ascii	"xDelayedTaskList1\000"
 16989      61796564 
 16989      5461736B 
 16989      4C697374 
 16989      3100
 16990              	.LASF1388:
 16991 a3b7 7844656C 		.ascii	"xDelayedTaskList2\000"
 16991      61796564 
 16991      5461736B 
 16991      4C697374 
 16991      3200
 16992              	.LASF1314:
 16993 a3c9 5F6D6273 		.ascii	"_mbsrtowcs_state\000"
 16993      72746F77 
 16993      63735F73 
 16993      74617465 
 16993      00
 16994              	.LASF818:
 16995 a3da 5F5F494E 		.ascii	"__INT64 \"ll\"\000"
 16995      54363420 
 16995      226C6C22 
 16995      00
ARM GAS  /tmp/ccTV2SzP.s 			page 464


 16996              	.LASF759:
 16997 a3e7 5F5F4445 		.ascii	"__DECONST(type,var) ((type)(__uintptr_t)(const void"
 16997      434F4E53 
 16997      54287479 
 16997      70652C76 
 16997      61722920 
 16998 a41a 202A2928 		.ascii	" *)(var))\000"
 16998      76617229 
 16998      2900
 16999              	.LASF857:
 17000 a424 55494E54 		.ascii	"UINT8_MAX (__UINT8_MAX__)\000"
 17000      385F4D41 
 17000      5820285F 
 17000      5F55494E 
 17000      54385F4D 
 17001              	.LASF70:
 17002 a43e 5F5F4C4F 		.ascii	"__LONG_MAX__ 0x7fffffffL\000"
 17002      4E475F4D 
 17002      41585F5F 
 17002      20307837 
 17002      66666666 
 17003              	.LASF706:
 17004 a457 5F5F766F 		.ascii	"__volatile volatile\000"
 17004      6C617469 
 17004      6C652076 
 17004      6F6C6174 
 17004      696C6500 
 17005              	.LASF658:
 17006 a46b 5F535953 		.ascii	"_SYS_CDEFS_H_ \000"
 17006      5F434445 
 17006      46535F48 
 17006      5F2000
 17007              	.LASF844:
 17008 a47a 5F5F696E 		.ascii	"__int_least8_t_defined 1\000"
 17008      745F6C65 
 17008      61737438 
 17008      5F745F64 
 17008      6566696E 
 17009              	.LASF812:
 17010 a493 6C6F6E67 		.ascii	"long +4\000"
 17010      202B3400 
 17011              	.LASF1052:
 17012 a49b 74726163 		.ascii	"traceQUEUE_RECEIVE_FAILED(pxQueue) \000"
 17012      65515545 
 17012      55455F52 
 17012      45434549 
 17012      56455F46 
 17013              	.LASF614:
 17014 a4bf 5F52414E 		.ascii	"_RAND48_ADD (0x000b)\000"
 17014      4434385F 
 17014      41444420 
 17014      28307830 
 17014      30306229 
 17015              	.LASF789:
 17016 a4d4 45584954 		.ascii	"EXIT_FAILURE 1\000"
 17016      5F464149 
 17016      4C555245 
ARM GAS  /tmp/ccTV2SzP.s 			page 465


 17016      203100
 17017              	.LASF397:
 17018 a4e3 5F5F4152 		.ascii	"__ARM_FEATURE_LDREX 7\000"
 17018      4D5F4645 
 17018      41545552 
 17018      455F4C44 
 17018      52455820 
 17019              	.LASF798:
 17020 a4f9 5F535444 		.ascii	"_STDINT_H \000"
 17020      494E545F 
 17020      482000
 17021              	.LASF1084:
 17022 a504 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS(xEventGroup,uxBitsToSet) "
 17022      65455645 
 17022      4E545F47 
 17022      524F5550 
 17022      5F534554 
 17023 a537 00       		.ascii	"\000"
 17024              	.LASF814:
 17025 a538 5F494E54 		.ascii	"_INT32_EQ_LONG \000"
 17025      33325F45 
 17025      515F4C4F 
 17025      4E472000 
 17026              	.LASF1362:
 17027 a548 756C5061 		.ascii	"ulParameters\000"
 17027      72616D65 
 17027      74657273 
 17027      00
 17028              	.LASF965:
 17029 a555 65727251 		.ascii	"errQUEUE_BLOCKED ( -4 )\000"
 17029      55455545 
 17029      5F424C4F 
 17029      434B4544 
 17029      2028202D 
 17030              	.LASF284:
 17031 a56d 5F5F4C4C 		.ascii	"__LLFRACT_EPSILON__ 0x1P-63LLR\000"
 17031      46524143 
 17031      545F4550 
 17031      53494C4F 
 17031      4E5F5F20 
 17032              	.LASF961:
 17033 a58c 70644641 		.ascii	"pdFAIL ( pdFALSE )\000"
 17033      494C2028 
 17033      20706446 
 17033      414C5345 
 17033      202900
 17034              	.LASF1126:
 17035 a59f 784C6973 		.ascii	"xListItem ListItem_t\000"
 17035      74497465 
 17035      6D204C69 
 17035      73744974 
 17035      656D5F74 
 17036              	.LASF253:
 17037 a5b4 5F5F5346 		.ascii	"__SFRACT_MAX__ 0X7FP-7HR\000"
 17037      52414354 
 17037      5F4D4158 
 17037      5F5F2030 
ARM GAS  /tmp/ccTV2SzP.s 			page 466


 17037      58374650 
 17038              	.LASF439:
 17039 a5cd 5F4E4557 		.ascii	"_NEWLIB_VERSION \"2.5.0\"\000"
 17039      4C49425F 
 17039      56455253 
 17039      494F4E20 
 17039      22322E35 
 17040              	.LASF83:
 17041 a5e5 5F5F5743 		.ascii	"__WCHAR_WIDTH__ 32\000"
 17041      4841525F 
 17041      57494454 
 17041      485F5F20 
 17041      333200
 17042              	.LASF584:
 17043 a5f8 5F5F6C6F 		.ascii	"__lock_close(lock) (_CAST_VOID 0)\000"
 17043      636B5F63 
 17043      6C6F7365 
 17043      286C6F63 
 17043      6B292028 
 17044              	.LASF1289:
 17045 a61a 5F5F7367 		.ascii	"__sglue\000"
 17045      6C756500 
 17046              	.LASF701:
 17047 a622 5F5F434F 		.ascii	"__CONCAT(x,y) __CONCAT1(x,y)\000"
 17047      4E434154 
 17047      28782C79 
 17047      29205F5F 
 17047      434F4E43 
 17048              	.LASF1450:
 17049 a63f 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 17049      6B52656D 
 17049      6F766546 
 17049      726F6D55 
 17049      6E6F7264 
 17050              	.LASF107:
 17051 a661 5F5F494E 		.ascii	"__INT16_C(c) c\000"
 17051      5431365F 
 17051      43286329 
 17051      206300
 17052              	.LASF846:
 17053 a670 5F5F696E 		.ascii	"__int_least32_t_defined 1\000"
 17053      745F6C65 
 17053      61737433 
 17053      325F745F 
 17053      64656669 
 17054              	.LASF1067:
 17055 a68a 74726163 		.ascii	"traceTASK_RESUME_FROM_ISR(pxTaskToResume) \000"
 17055      65544153 
 17055      4B5F5245 
 17055      53554D45 
 17055      5F46524F 
 17056              	.LASF1118:
 17057 a6b5 78546173 		.ascii	"xTaskParameters TaskParameters_t\000"
 17057      6B506172 
 17057      616D6574 
 17057      65727320 
 17057      5461736B 
ARM GAS  /tmp/ccTV2SzP.s 			page 467


 17058              	.LASF355:
 17059 a6d6 5F5F4441 		.ascii	"__DA_IBIT__ 32\000"
 17059      5F494249 
 17059      545F5F20 
 17059      333200
 17060              	.LASF998:
 17061 a6e5 706F7274 		.ascii	"portASSERT_IF_INTERRUPT_PRIORITY_INVALID() vPortVal"
 17061      41535345 
 17061      52545F49 
 17061      465F494E 
 17061      54455252 
 17062 a718 69646174 		.ascii	"idateInterruptPriority()\000"
 17062      65496E74 
 17062      65727275 
 17062      70745072 
 17062      696F7269 
 17063              	.LASF651:
 17064 a731 5F524545 		.ascii	"_REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._ge"
 17064      4E545F47 
 17064      45544441 
 17064      54455F45 
 17064      52525F50 
 17065 a764 74646174 		.ascii	"tdate_err))\000"
 17065      655F6572 
 17065      72292900 
 17066              	.LASF1240:
 17067 a770 5F5F746D 		.ascii	"__tm_isdst\000"
 17067      5F697364 
 17067      737400
 17068              	.LASF950:
 17069 a77b 636F6E66 		.ascii	"configNET_MASK2 255\000"
 17069      69674E45 
 17069      545F4D41 
 17069      534B3220 
 17069      32353500 
 17070              	.LASF761:
 17071 a78f 5F5F4445 		.ascii	"__DEQUALIFY(type,var) ((type)(__uintptr_t)(const vo"
 17071      5155414C 
 17071      49465928 
 17071      74797065 
 17071      2C766172 
 17072 a7c2 6C617469 		.ascii	"latile void *)(var))\000"
 17072      6C652076 
 17072      6F696420 
 17072      2A292876 
 17072      61722929 
 17073              	.LASF924:
 17074 a7d7 636F6E66 		.ascii	"configUSE_TRACE_FACILITY 1\000"
 17074      69675553 
 17074      455F5452 
 17074      4143455F 
 17074      46414349 
 17075              	.LASF10:
 17076 a7f2 5F5F4154 		.ascii	"__ATOMIC_ACQ_REL 4\000"
 17076      4F4D4943 
 17076      5F414351 
 17076      5F52454C 
ARM GAS  /tmp/ccTV2SzP.s 			page 468


 17076      203400
 17077              	.LASF40:
 17078 a805 5F5F494E 		.ascii	"__INT32_TYPE__ long int\000"
 17078      5433325F 
 17078      54595045 
 17078      5F5F206C 
 17078      6F6E6720 
 17079              	.LASF712:
 17080 a81d 5F5F7061 		.ascii	"__packed __attribute__((__packed__))\000"
 17080      636B6564 
 17080      205F5F61 
 17080      74747269 
 17080      62757465 
 17081              	.LASF161:
 17082 a842 5F5F4442 		.ascii	"__DBL_MIN_10_EXP__ (-307)\000"
 17082      4C5F4D49 
 17082      4E5F3130 
 17082      5F455850 
 17082      5F5F2028 
 17083              	.LASF938:
 17084 a85c 494E434C 		.ascii	"INCLUDE_vTaskDelete 1\000"
 17084      5544455F 
 17084      76546173 
 17084      6B44656C 
 17084      65746520 
 17085              	.LASF1434:
 17086 a872 784C6973 		.ascii	"xListIsEmpty\000"
 17086      74497345 
 17086      6D707479 
 17086      00
 17087              	.LASF443:
 17088 a87f 5F57414E 		.ascii	"_WANT_IO_LONG_LONG 1\000"
 17088      545F494F 
 17088      5F4C4F4E 
 17088      475F4C4F 
 17088      4E472031 
 17089              	.LASF1014:
 17090 a894 706F7274 		.ascii	"portCRITICAL_NESTING_IN_TCB 0\000"
 17090      43524954 
 17090      4943414C 
 17090      5F4E4553 
 17090      54494E47 
 17091              	.LASF879:
 17092 a8b2 494E545F 		.ascii	"INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)\000"
 17092      46415354 
 17092      385F4D49 
 17092      4E20282D 
 17092      5F5F494E 
 17093              	.LASF777:
 17094 a8d9 5F5F6173 		.ascii	"__asserts_shared(...) __lock_annotate(assert_shared"
 17094      73657274 
 17094      735F7368 
 17094      61726564 
 17094      282E2E2E 
 17095 a90c 5F6C6F63 		.ascii	"_lock(__VA_ARGS__))\000"
 17095      6B285F5F 
 17095      56415F41 
ARM GAS  /tmp/ccTV2SzP.s 			page 469


 17095      5247535F 
 17095      5F292900 
 17096              	.LASF579:
 17097 a920 5F5F5359 		.ascii	"__SYS_LOCK_H__ \000"
 17097      535F4C4F 
 17097      434B5F48 
 17097      5F5F2000 
 17098              	.LASF804:
 17099 a930 5F5F696E 		.ascii	"__int20\000"
 17099      74323000 
 17100              	.LASF886:
 17101 a938 494E545F 		.ascii	"INT_FAST32_MAX (__INT_FAST32_MAX__)\000"
 17101      46415354 
 17101      33325F4D 
 17101      41582028 
 17101      5F5F494E 
 17102              	.LASF1233:
 17103 a95c 5F5F746D 		.ascii	"__tm_min\000"
 17103      5F6D696E 
 17103      00
 17104              	.LASF1054:
 17105 a965 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) \000"
 17105      65515545 
 17105      55455F53 
 17105      454E445F 
 17105      46524F4D 
 17106              	.LASF616:
 17107 a98f 5F524545 		.ascii	"_REENT_ASCTIME_SIZE 26\000"
 17107      4E545F41 
 17107      53435449 
 17107      4D455F53 
 17107      495A4520 
 17108              	.LASF294:
 17109 a9a6 5F5F5341 		.ascii	"__SACCUM_EPSILON__ 0x1P-7HK\000"
 17109      4343554D 
 17109      5F455053 
 17109      494C4F4E 
 17109      5F5F2030 
 17110              	.LASF852:
 17111 a9c2 494E5450 		.ascii	"INTPTR_MIN (-__INTPTR_MAX__ - 1)\000"
 17111      54525F4D 
 17111      494E2028 
 17111      2D5F5F49 
 17111      4E545054 
 17112              	.LASF1410:
 17113 a9e3 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 17113      6B476574 
 17113      43757272 
 17113      656E7454 
 17113      61736B48 
 17114              	.LASF450:
 17115 a9fd 5F4C4442 		.ascii	"_LDBL_EQ_DBL 1\000"
 17115      4C5F4551 
 17115      5F44424C 
 17115      203100
 17116              	.LASF646:
 17117 aa0c 5F524545 		.ascii	"_REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mb"
ARM GAS  /tmp/ccTV2SzP.s 			page 470


 17117      4E545F4D 
 17117      42535254 
 17117      4F574353 
 17117      5F535441 
 17118 aa3f 7372746F 		.ascii	"srtowcs_state)\000"
 17118      7763735F 
 17118      73746174 
 17118      652900
 17119              	.LASF898:
 17120 aa4e 50545244 		.ascii	"PTRDIFF_MIN (-PTRDIFF_MAX - 1)\000"
 17120      4946465F 
 17120      4D494E20 
 17120      282D5054 
 17120      52444946 
 17121              	.LASF463:
 17122 aa6d 5F504F53 		.ascii	"_POSIX_C_SOURCE\000"
 17122      49585F43 
 17122      5F534F55 
 17122      52434500 
 17123              	.LASF89:
 17124 aa7d 5F5F5549 		.ascii	"__UINTMAX_MAX__ 0xffffffffffffffffULL\000"
 17124      4E544D41 
 17124      585F4D41 
 17124      585F5F20 
 17124      30786666 
 17125              	.LASF1335:
 17126 aaa3 78497465 		.ascii	"xItemValue\000"
 17126      6D56616C 
 17126      756500
 17127              	.LASF158:
 17128 aaae 5F5F4442 		.ascii	"__DBL_MANT_DIG__ 53\000"
 17128      4C5F4D41 
 17128      4E545F44 
 17128      49475F5F 
 17128      20353300 
 17129              	.LASF1407:
 17130 aac2 70785443 		.ascii	"pxTCB\000"
 17130      4200
 17131              	.LASF276:
 17132 aac8 5F5F554C 		.ascii	"__ULFRACT_IBIT__ 0\000"
 17132      46524143 
 17132      545F4942 
 17132      49545F5F 
 17132      203000
 17133              	.LASF1378:
 17134 aadb 75785072 		.ascii	"uxPriority\000"
 17134      696F7269 
 17134      747900
 17135              	.LASF69:
 17136 aae6 5F5F494E 		.ascii	"__INT_MAX__ 0x7fffffff\000"
 17136      545F4D41 
 17136      585F5F20 
 17136      30783766 
 17136      66666666 
 17137              	.LASF49:
 17138 aafd 5F5F494E 		.ascii	"__INT_LEAST64_TYPE__ long long int\000"
 17138      545F4C45 
ARM GAS  /tmp/ccTV2SzP.s 			page 471


 17138      41535436 
 17138      345F5459 
 17138      50455F5F 
 17139              	.LASF1057:
 17140 ab20 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR_FAILED(pxQueue) \000"
 17140      65515545 
 17140      55455F50 
 17140      45454B5F 
 17140      46524F4D 
 17141              	.LASF801:
 17142 ab4a 7369676E 		.ascii	"signed\000"
 17142      656400
 17143              	.LASF290:
 17144 ab51 5F5F5341 		.ascii	"__SACCUM_FBIT__ 7\000"
 17144      4343554D 
 17144      5F464249 
 17144      545F5F20 
 17144      3700
 17145              	.LASF845:
 17146 ab63 5F5F696E 		.ascii	"__int_least16_t_defined 1\000"
 17146      745F6C65 
 17146      61737431 
 17146      365F745F 
 17146      64656669 
 17147              	.LASF1016:
 17148 ab7d 494E434C 		.ascii	"INCLUDE_xEventGroupSetBitFromISR 0\000"
 17148      5544455F 
 17148      78457665 
 17148      6E744772 
 17148      6F757053 
 17149              	.LASF1186:
 17150 aba0 7461736B 		.ascii	"taskSECOND_CHECK_FOR_STACK_OVERFLOW() \000"
 17150      5345434F 
 17150      4E445F43 
 17150      4845434B 
 17150      5F464F52 
 17151              	.LASF1036:
 17152 abc7 74726163 		.ascii	"traceMOVED_TASK_TO_READY_STATE(pxTCB) \000"
 17152      654D4F56 
 17152      45445F54 
 17152      41534B5F 
 17152      544F5F52 
 17153              		.ident	"GCC: (Arch Repository) 7.1.0"
ARM GAS  /tmp/ccTV2SzP.s 			page 472


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccTV2SzP.s:60     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccTV2SzP.s:57     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccTV2SzP.s:63     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccTV2SzP.s:66     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccTV2SzP.s:69     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccTV2SzP.s:72     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccTV2SzP.s:75     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccTV2SzP.s:78     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccTV2SzP.s:81     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccTV2SzP.s:84     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccTV2SzP.s:87     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccTV2SzP.s:90     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccTV2SzP.s:93     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccTV2SzP.s:96     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccTV2SzP.s:99     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccTV2SzP.s:102    .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccTV2SzP.s:105    .bss.uxTasksDeleted:0000000000000000 $d
     /tmp/ccTV2SzP.s:108    .bss.uxTasksDeleted:0000000000000000 uxTasksDeleted
     /tmp/ccTV2SzP.s:111    .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccTV2SzP.s:114    .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccTV2SzP.s:117    .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccTV2SzP.s:120    .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccTV2SzP.s:123    .bss.xTickCount:0000000000000000 $d
     /tmp/ccTV2SzP.s:126    .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccTV2SzP.s:129    .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccTV2SzP.s:132    .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccTV2SzP.s:135    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccTV2SzP.s:138    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccTV2SzP.s:141    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccTV2SzP.s:144    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccTV2SzP.s:147    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccTV2SzP.s:150    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccTV2SzP.s:153    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccTV2SzP.s:156    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccTV2SzP.s:159    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccTV2SzP.s:162    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccTV2SzP.s:165    .data.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccTV2SzP.s:168    .data.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccTV2SzP.s:171    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccTV2SzP.s:174    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccTV2SzP.s:177    .text.xTaskGenericCreate:0000000000000000 $t
     /tmp/ccTV2SzP.s:184    .text.xTaskGenericCreate:0000000000000000 xTaskGenericCreate
     /tmp/ccTV2SzP.s:4384   .text.prvAllocateTCBAndStack:0000000000000000 prvAllocateTCBAndStack
     /tmp/ccTV2SzP.s:3941   .text.prvInitialiseTCBVariables:0000000000000000 prvInitialiseTCBVariables
     /tmp/ccTV2SzP.s:4079   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccTV2SzP.s:441    .text.xTaskGenericCreate:000000000000014c $d
     /tmp/ccTV2SzP.s:451    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccTV2SzP.s:458    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccTV2SzP.s:4885   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccTV2SzP.s:620    .text.vTaskDelete:00000000000000c8 $d
     /tmp/ccTV2SzP.s:632    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccTV2SzP.s:639    .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccTV2SzP.s:2000   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccTV2SzP.s:4292   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccTV2SzP.s:2044   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
ARM GAS  /tmp/ccTV2SzP.s 			page 473


     /tmp/ccTV2SzP.s:823    .text.vTaskDelayUntil:00000000000000d4 $d
     /tmp/ccTV2SzP.s:831    .text.vTaskDelay:0000000000000000 $t
     /tmp/ccTV2SzP.s:838    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccTV2SzP.s:938    .text.vTaskDelay:0000000000000078 $d
     /tmp/ccTV2SzP.s:946    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccTV2SzP.s:953    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccTV2SzP.s:1012   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccTV2SzP.s:1017   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccTV2SzP.s:1024   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccTV2SzP.s:1269   .text.vTaskPrioritySet:0000000000000130 $d
     /tmp/ccTV2SzP.s:1276   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccTV2SzP.s:1283   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccTV2SzP.s:2859   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccTV2SzP.s:1461   .text.vTaskSuspend:00000000000000d8 $d
     /tmp/ccTV2SzP.s:1472   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccTV2SzP.s:1478   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccTV2SzP.s:1578   .text.prvTaskIsTaskSuspended:000000000000005c $d
     /tmp/ccTV2SzP.s:1584   .text.vTaskResume:0000000000000000 $t
     /tmp/ccTV2SzP.s:1591   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccTV2SzP.s:1702   .text.vTaskResume:0000000000000090 $d
     /tmp/ccTV2SzP.s:1709   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccTV2SzP.s:1716   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccTV2SzP.s:1843   .text.xTaskResumeFromISR:00000000000000a4 $d
     /tmp/ccTV2SzP.s:1852   .rodata:0000000000000000 $d
     /tmp/ccTV2SzP.s:1856   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccTV2SzP.s:1863   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccTV2SzP.s:1943   .text.vTaskStartScheduler:0000000000000058 $d
     /tmp/ccTV2SzP.s:3911   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccTV2SzP.s:1951   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccTV2SzP.s:1958   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccTV2SzP.s:1988   .text.vTaskEndScheduler:0000000000000018 $d
     /tmp/ccTV2SzP.s:1993   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccTV2SzP.s:2032   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccTV2SzP.s:2037   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccTV2SzP.s:2569   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccTV2SzP.s:2232   .text.xTaskResumeAll:00000000000000e8 $d
     /tmp/ccTV2SzP.s:2244   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccTV2SzP.s:2251   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccTV2SzP.s:2291   .text.xTaskGetTickCount:0000000000000020 $d
     /tmp/ccTV2SzP.s:2296   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccTV2SzP.s:2303   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccTV2SzP.s:2348   .text.xTaskGetTickCountFromISR:0000000000000028 $d
     /tmp/ccTV2SzP.s:2353   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccTV2SzP.s:2360   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccTV2SzP.s:2389   .text.uxTaskGetNumberOfTasks:0000000000000010 $d
     /tmp/ccTV2SzP.s:2394   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccTV2SzP.s:2401   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccTV2SzP.s:4481   .text.prvListTaskWithinSingleList:0000000000000000 prvListTaskWithinSingleList
     /tmp/ccTV2SzP.s:2552   .text.uxTaskGetSystemState:00000000000000dc $d
     /tmp/ccTV2SzP.s:2562   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccTV2SzP.s:2837   .text.xTaskIncrementTick:0000000000000150 $d
     /tmp/ccTV2SzP.s:2852   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccTV2SzP.s:2989   .text.vTaskSwitchContext:0000000000000090 $d
     /tmp/ccTV2SzP.s:2998   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccTV2SzP.s:3005   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccTV2SzP.s:3105   .text.vTaskPlaceOnEventList:0000000000000080 $d
     /tmp/ccTV2SzP.s:3113   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
ARM GAS  /tmp/ccTV2SzP.s 			page 474


     /tmp/ccTV2SzP.s:3120   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccTV2SzP.s:3242   .text.vTaskPlaceOnUnorderedEventList:000000000000009c $d
     /tmp/ccTV2SzP.s:3251   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccTV2SzP.s:3258   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccTV2SzP.s:3382   .text.xTaskRemoveFromEventList:000000000000009c $d
     /tmp/ccTV2SzP.s:3392   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccTV2SzP.s:3399   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccTV2SzP.s:3525   .text.xTaskRemoveFromUnorderedEventList:000000000000009c $d
     /tmp/ccTV2SzP.s:3534   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccTV2SzP.s:3541   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccTV2SzP.s:3591   .text.vTaskSetTimeOutState:000000000000002c $d
     /tmp/ccTV2SzP.s:3597   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccTV2SzP.s:3604   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccTV2SzP.s:3741   .text.xTaskCheckForTimeOut:0000000000000098 $d
     /tmp/ccTV2SzP.s:3747   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccTV2SzP.s:3754   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccTV2SzP.s:3784   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccTV2SzP.s:3789   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccTV2SzP.s:3796   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccTV2SzP.s:3851   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccTV2SzP.s:3858   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccTV2SzP.s:3905   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccTV2SzP.s:4181   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccTV2SzP.s:3935   .text.prvInitialiseTCBVariables:0000000000000000 $t
     /tmp/ccTV2SzP.s:4073   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccTV2SzP.s:4163   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccTV2SzP.s:4175   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccTV2SzP.s:4841   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccTV2SzP.s:4279   .text.prvCheckTasksWaitingTermination:000000000000006c $d
     /tmp/ccTV2SzP.s:4286   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccTV2SzP.s:4369   .text.prvAddCurrentTaskToDelayedList:0000000000000058 $d
     /tmp/ccTV2SzP.s:4378   .text.prvAllocateTCBAndStack:0000000000000000 $t
     /tmp/ccTV2SzP.s:4475   .text.prvListTaskWithinSingleList:0000000000000000 $t
     /tmp/ccTV2SzP.s:4699   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccTV2SzP.s:4693   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccTV2SzP.s:4764   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccTV2SzP.s:4771   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccTV2SzP.s:4830   .text.uxTaskGetStackHighWaterMark:0000000000000034 $d
     /tmp/ccTV2SzP.s:4835   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccTV2SzP.s:4879   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccTV2SzP.s:4957   .text.prvResetNextTaskUnblockTime:0000000000000040 $d
     /tmp/ccTV2SzP.s:4963   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccTV2SzP.s:4970   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccTV2SzP.s:5007   .text.xTaskGetCurrentTaskHandle:0000000000000018 $d
     /tmp/ccTV2SzP.s:5012   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccTV2SzP.s:5019   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccTV2SzP.s:5184   .text.vTaskPriorityInherit:00000000000000e0 $d
     /tmp/ccTV2SzP.s:5191   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccTV2SzP.s:5198   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccTV2SzP.s:5351   .text.xTaskPriorityDisinherit:00000000000000d0 $d
     /tmp/ccTV2SzP.s:5357   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccTV2SzP.s:5364   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccTV2SzP.s:5411   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccTV2SzP.s:5416   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccTV2SzP.s:5423   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccTV2SzP.s:5466   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
                     .debug_frame:0000000000000010 $d
ARM GAS  /tmp/ccTV2SzP.s 			page 475


                           .group:0000000000000000 wm4.0.575902ec30e623f99ccb935f1e727f1f
                           .group:0000000000000000 wm4._newlib_version.h.4.3572908597b70d672d181fc7fc501c19
                           .group:0000000000000000 wm4.newlib.h.21.0b9fc973bddc8b940a18de2b6ea6adc7
                           .group:0000000000000000 wm4.features.h.22.692cd1f2e947ca7b8fea300222f5f1f2
                           .group:0000000000000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:0000000000000000 wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:0000000000000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:0000000000000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:0000000000000000 wm4.lock.h.2.408dfd8112071273287811a44077560f
                           .group:0000000000000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:0000000000000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:0000000000000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:0000000000000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:0000000000000000 wm4.cdefs.h.47.14948c9210d429a388eac802a838bb4c
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:0000000000000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:0000000000000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:0000000000000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8
                           .group:0000000000000000 wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066
                           .group:0000000000000000 wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946
                           .group:0000000000000000 wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5
                           .group:0000000000000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:0000000000000000 wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e
                           .group:0000000000000000 wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370
                           .group:0000000000000000 wm4.task.h.84.e110bc08aaffa67ce542955b890201b4
                           .group:0000000000000000 wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d
                           .group:0000000000000000 wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95

UNDEFINED SYMBOLS
ulPortSetInterruptMask
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
vPortValidateInterruptPriority
vPortClearInterruptMask
xPortStartScheduler
vPortEndScheduler
vApplicationTickHook
vListInsert
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
