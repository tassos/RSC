ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"tasks.c"
  14              	@ GNU C89 (GNU Tools for ARM Embedded Processors) version 5.4.1 20160919 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I config -I system -I core -I drivers -I FreeRTOS
  18              	@ -I FreeRTOS/include -I FreeRTOS/portable/GCC/ARM_CM3 -I FreeRTOS/portable
  19              	@ -I tasks/rc_task_leds -I tasks/rc_task_pot -I modules/rc_leds
  20              	@ -I modules/rc_pot -I drivers/rc_system -I drivers/rc_gpio
  21              	@ -I drivers/rc_uart -I drivers/rc_pinsel -I drivers/rc_timer
  22              	@ -I drivers/rc_adc -imultilib armv7-m
  23              	@ -iprefix c:\program files (x86)\gnu tools arm embedded\5.4 2016q3\bin\../lib/gcc/arm-none-eabi/5.
  24              	@ -isysroot c:\program files (x86)\gnu tools arm embedded\5.4 2016q3\bin\../arm-none-eabi
  25              	@ -MD out/tasks.d -MF out/tasks.d -MP -MQ out/tasks.o -D__USES_INITFINI__
  26              	@ FreeRTOS/tasks.c -mcpu=cortex-m3 -mthumb -auxbase-strip out/tasks.o -g
  27              	@ -ggdb3 -O0 -Wall -Wstrict-prototypes -Wextra -std=gnu90
  28              	@ -ffunction-sections -fdata-sections -fverbose-asm
  29              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  30              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  31              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  32              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  33              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  34              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  35              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  36              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  37              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  38              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  39              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  40              	@ -fmerge-debug-strings -fpeephole -fprefetch-loop-arrays
  41              	@ -freg-struct-return -fsched-critical-path-heuristic
  42              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  43              	@ -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  44              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  45              	@ -fsemantic-interposition -fshow-column -fsigned-zeros
  46              	@ -fsplit-ivs-in-unroller -fstdarg-opt -fstrict-volatile-bitfields
  47              	@ -fsync-libcalls -ftrapping-math -ftree-coalesce-vars -ftree-cselim
  48              	@ -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  49              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  50              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  51              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  52              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  53              	@ -munaligned-access -mvectorize-with-neon-quad
  54              	
  55              		.text
  56              	.Ltext0:
  57              		.cfi_sections	.debug_frame
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 2


  58              		.global	pxCurrentTCB
  59              		.section	.bss.pxCurrentTCB,"aw",%nobits
  60              		.align	2
  61              		.type	pxCurrentTCB, %object
  62              		.size	pxCurrentTCB, 4
  63              	pxCurrentTCB:
  64 0000 00000000 		.space	4
  65              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  66              		.align	2
  67              		.type	pxReadyTasksLists, %object
  68              		.size	pxReadyTasksLists, 160
  69              	pxReadyTasksLists:
  70 0000 00000000 		.space	160
  70      00000000 
  70      00000000 
  70      00000000 
  70      00000000 
  71              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  72              		.align	2
  73              		.type	xDelayedTaskList1, %object
  74              		.size	xDelayedTaskList1, 20
  75              	xDelayedTaskList1:
  76 0000 00000000 		.space	20
  76      00000000 
  76      00000000 
  76      00000000 
  76      00000000 
  77              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  78              		.align	2
  79              		.type	xDelayedTaskList2, %object
  80              		.size	xDelayedTaskList2, 20
  81              	xDelayedTaskList2:
  82 0000 00000000 		.space	20
  82      00000000 
  82      00000000 
  82      00000000 
  82      00000000 
  83              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  84              		.align	2
  85              		.type	pxDelayedTaskList, %object
  86              		.size	pxDelayedTaskList, 4
  87              	pxDelayedTaskList:
  88 0000 00000000 		.space	4
  89              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  90              		.align	2
  91              		.type	pxOverflowDelayedTaskList, %object
  92              		.size	pxOverflowDelayedTaskList, 4
  93              	pxOverflowDelayedTaskList:
  94 0000 00000000 		.space	4
  95              		.section	.bss.xPendingReadyList,"aw",%nobits
  96              		.align	2
  97              		.type	xPendingReadyList, %object
  98              		.size	xPendingReadyList, 20
  99              	xPendingReadyList:
 100 0000 00000000 		.space	20
 100      00000000 
 100      00000000 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 3


 100      00000000 
 100      00000000 
 101              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 102              		.align	2
 103              		.type	xTasksWaitingTermination, %object
 104              		.size	xTasksWaitingTermination, 20
 105              	xTasksWaitingTermination:
 106 0000 00000000 		.space	20
 106      00000000 
 106      00000000 
 106      00000000 
 106      00000000 
 107              		.section	.bss.uxTasksDeleted,"aw",%nobits
 108              		.align	2
 109              		.type	uxTasksDeleted, %object
 110              		.size	uxTasksDeleted, 4
 111              	uxTasksDeleted:
 112 0000 00000000 		.space	4
 113              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 114              		.align	2
 115              		.type	xSuspendedTaskList, %object
 116              		.size	xSuspendedTaskList, 20
 117              	xSuspendedTaskList:
 118 0000 00000000 		.space	20
 118      00000000 
 118      00000000 
 118      00000000 
 118      00000000 
 119              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 120              		.align	2
 121              		.type	uxCurrentNumberOfTasks, %object
 122              		.size	uxCurrentNumberOfTasks, 4
 123              	uxCurrentNumberOfTasks:
 124 0000 00000000 		.space	4
 125              		.section	.bss.xTickCount,"aw",%nobits
 126              		.align	2
 127              		.type	xTickCount, %object
 128              		.size	xTickCount, 4
 129              	xTickCount:
 130 0000 00000000 		.space	4
 131              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 132              		.align	2
 133              		.type	uxTopReadyPriority, %object
 134              		.size	uxTopReadyPriority, 4
 135              	uxTopReadyPriority:
 136 0000 00000000 		.space	4
 137              		.section	.bss.xSchedulerRunning,"aw",%nobits
 138              		.align	2
 139              		.type	xSchedulerRunning, %object
 140              		.size	xSchedulerRunning, 4
 141              	xSchedulerRunning:
 142 0000 00000000 		.space	4
 143              		.section	.bss.uxPendedTicks,"aw",%nobits
 144              		.align	2
 145              		.type	uxPendedTicks, %object
 146              		.size	uxPendedTicks, 4
 147              	uxPendedTicks:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 4


 148 0000 00000000 		.space	4
 149              		.section	.bss.xYieldPending,"aw",%nobits
 150              		.align	2
 151              		.type	xYieldPending, %object
 152              		.size	xYieldPending, 4
 153              	xYieldPending:
 154 0000 00000000 		.space	4
 155              		.section	.bss.xNumOfOverflows,"aw",%nobits
 156              		.align	2
 157              		.type	xNumOfOverflows, %object
 158              		.size	xNumOfOverflows, 4
 159              	xNumOfOverflows:
 160 0000 00000000 		.space	4
 161              		.section	.bss.uxTaskNumber,"aw",%nobits
 162              		.align	2
 163              		.type	uxTaskNumber, %object
 164              		.size	uxTaskNumber, 4
 165              	uxTaskNumber:
 166 0000 00000000 		.space	4
 167              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 168              		.align	2
 169              		.type	xNextTaskUnblockTime, %object
 170              		.size	xNextTaskUnblockTime, 4
 171              	xNextTaskUnblockTime:
 172 0000 FFFFFFFF 		.word	-1
 173              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 174              		.align	2
 175              		.type	uxSchedulerSuspended, %object
 176              		.size	uxSchedulerSuspended, 4
 177              	uxSchedulerSuspended:
 178 0000 00000000 		.space	4
 179              		.section	.text.xTaskGenericCreate,"ax",%progbits
 180              		.align	2
 181              		.global	xTaskGenericCreate
 182              		.thumb
 183              		.thumb_func
 184              		.type	xTaskGenericCreate, %function
 185              	xTaskGenericCreate:
 186              	.LFB1:
 187              		.file 1 "FreeRTOS/tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/tasks.c ****     All rights reserved
   4:FreeRTOS/tasks.c **** 
   5:FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/tasks.c **** 
   7:FreeRTOS/tasks.c ****     ***************************************************************************
   8:FreeRTOS/tasks.c ****      *                                                                       *
   9:FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/tasks.c ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/tasks.c ****      *                                                                       *
  13:FreeRTOS/tasks.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/tasks.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/tasks.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/tasks.c ****      *                                                                       *
  17:FreeRTOS/tasks.c ****      *    Thank you!                                                         *
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 5


  18:FreeRTOS/tasks.c ****      *                                                                       *
  19:FreeRTOS/tasks.c ****     ***************************************************************************
  20:FreeRTOS/tasks.c **** 
  21:FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/tasks.c **** 
  23:FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/tasks.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/tasks.c **** 
  27:FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/tasks.c **** 
  32:FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/tasks.c **** 
  37:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  38:FreeRTOS/tasks.c **** 
  39:FreeRTOS/tasks.c ****     ***************************************************************************
  40:FreeRTOS/tasks.c ****      *                                                                       *
  41:FreeRTOS/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/tasks.c ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/tasks.c ****      *                                                                       *
  44:FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/tasks.c ****      *                                                                       *
  46:FreeRTOS/tasks.c ****     ***************************************************************************
  47:FreeRTOS/tasks.c **** 
  48:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/tasks.c ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/tasks.c **** 
  51:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/tasks.c **** 
  55:FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/tasks.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  62:FreeRTOS/tasks.c **** 
  63:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  64:FreeRTOS/tasks.c **** */
  65:FreeRTOS/tasks.c **** 
  66:FreeRTOS/tasks.c **** /* Standard includes. */
  67:FreeRTOS/tasks.c **** #include <stdlib.h>
  68:FreeRTOS/tasks.c **** #include <string.h>
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  71:FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  72:FreeRTOS/tasks.c **** task.h is included from an application file. */
  73:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  74:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 6


  75:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  76:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  77:FreeRTOS/tasks.c **** #include "task.h"
  78:FreeRTOS/tasks.c **** #include "timers.h"
  79:FreeRTOS/tasks.c **** #include "StackMacros.h"
  80:FreeRTOS/tasks.c **** 
  81:FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  82:FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  83:FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  84:FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  85:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  86:FreeRTOS/tasks.c **** 
  87:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  88:FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  89:FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  90:FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  91:FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  92:FreeRTOS/tasks.c **** 	#include <stdio.h>
  93:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  94:FreeRTOS/tasks.c **** 
  95:FreeRTOS/tasks.c **** /* Sanity check the configuration. */
  96:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
  97:FreeRTOS/tasks.c **** 	#if INCLUDE_vTaskSuspend != 1
  98:FreeRTOS/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
  99:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 100:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 101:FreeRTOS/tasks.c **** 
 102:FreeRTOS/tasks.c **** /*
 103:FreeRTOS/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 104:FreeRTOS/tasks.c ****  */
 105:FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 106:FreeRTOS/tasks.c **** 
 107:FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 108:FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 109:FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 110:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 111:FreeRTOS/tasks.c **** #else
 112:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 113:FreeRTOS/tasks.c **** #endif
 114:FreeRTOS/tasks.c **** 
 115:FreeRTOS/tasks.c **** /*
 116:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 117:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 118:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 119:FreeRTOS/tasks.c ****  */
 120:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 121:FreeRTOS/tasks.c **** {
 122:FreeRTOS/tasks.c **** 	volatile StackT_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the tasks s
 123:FreeRTOS/tasks.c **** 
 124:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 125:FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 126:FreeRTOS/tasks.c **** 	#endif
 127:FreeRTOS/tasks.c **** 
 128:FreeRTOS/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 129:FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 130:FreeRTOS/tasks.c **** 	UBaseT_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 131:FreeRTOS/tasks.c **** 	StackT_t			*pxStack;			/*< Points to the start of the stack. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 7


 132:FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 133:FreeRTOS/tasks.c **** 
 134:FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 135:FreeRTOS/tasks.c **** 		StackT_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack gro
 136:FreeRTOS/tasks.c **** 	#endif
 137:FreeRTOS/tasks.c **** 
 138:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 139:FreeRTOS/tasks.c **** 		UBaseT_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do not 
 140:FreeRTOS/tasks.c **** 	#endif
 141:FreeRTOS/tasks.c **** 
 142:FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 143:FreeRTOS/tasks.c **** 		UBaseT_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It allow
 144:FreeRTOS/tasks.c **** 		UBaseT_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. */
 145:FreeRTOS/tasks.c **** 	#endif
 146:FreeRTOS/tasks.c **** 
 147:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 148:FreeRTOS/tasks.c **** 		UBaseT_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority inhe
 149:FreeRTOS/tasks.c **** 		UBaseT_t 	uxMutexesHeld;
 150:FreeRTOS/tasks.c **** 	#endif
 151:FreeRTOS/tasks.c **** 
 152:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 153:FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 154:FreeRTOS/tasks.c **** 	#endif
 155:FreeRTOS/tasks.c **** 
 156:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 157:FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 158:FreeRTOS/tasks.c **** 	#endif
 159:FreeRTOS/tasks.c **** 
 160:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 161:FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 162:FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 163:FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 164:FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 165:FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 166:FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 167:FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 168:FreeRTOS/tasks.c **** 		struct 	_reent xNewLib_reent;
 169:FreeRTOS/tasks.c **** 	#endif
 170:FreeRTOS/tasks.c **** 
 171:FreeRTOS/tasks.c **** } tskTCB;
 172:FreeRTOS/tasks.c **** 
 173:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 174:FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 175:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 176:FreeRTOS/tasks.c **** 
 177:FreeRTOS/tasks.c **** /*
 178:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 179:FreeRTOS/tasks.c ****  * be global, rather than file scope.
 180:FreeRTOS/tasks.c ****  */
 181:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 182:FreeRTOS/tasks.c **** 	#define static
 183:FreeRTOS/tasks.c **** #endif
 184:FreeRTOS/tasks.c **** 
 185:FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 186:FreeRTOS/tasks.c **** static variables must be declared volatile. */
 187:FreeRTOS/tasks.c **** 
 188:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 8


 189:FreeRTOS/tasks.c **** 
 190:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 191:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 192:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 193:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 194:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 195:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 196:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 197:FreeRTOS/tasks.c **** 
 198:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 199:FreeRTOS/tasks.c **** 
 200:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 201:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseT_t uxTasksDeleted = ( UBaseT_t ) 0U;
 202:FreeRTOS/tasks.c **** 
 203:FreeRTOS/tasks.c **** #endif
 204:FreeRTOS/tasks.c **** 
 205:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 206:FreeRTOS/tasks.c **** 
 207:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 208:FreeRTOS/tasks.c **** 
 209:FreeRTOS/tasks.c **** #endif
 210:FreeRTOS/tasks.c **** 
 211:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 212:FreeRTOS/tasks.c **** 
 213:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 214:FreeRTOS/tasks.c **** 
 215:FreeRTOS/tasks.c **** #endif
 216:FreeRTOS/tasks.c **** 
 217:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 218:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxCurrentNumberOfTasks 	= ( UBaseT_t ) 0U;
 219:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xTickCount 				= ( TickT_t ) 0U;
 220:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 221:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xSchedulerRunning 		= pdFALSE;
 222:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxPendedTicks 			= ( UBaseT_t ) 0U;
 223:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xYieldPending 			= pdFALSE;
 224:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xNumOfOverflows 			= ( BaseT_t ) 0;
 225:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseT_t uxTaskNumber 					= ( UBaseT_t ) 0U;
 226:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xNextTaskUnblockTime		= portMAX_DELAY;
 227:FreeRTOS/tasks.c **** 
 228:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 229:FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 230:FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 231:FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 232:FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 233:FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 234:FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 235:FreeRTOS/tasks.c **** accessed from a critical section. */
 236:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxSchedulerSuspended	= ( UBaseT_t ) pdFALSE;
 237:FreeRTOS/tasks.c **** 
 238:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 239:FreeRTOS/tasks.c **** 
 240:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 241:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 242:FreeRTOS/tasks.c **** 
 243:FreeRTOS/tasks.c **** #endif
 244:FreeRTOS/tasks.c **** 
 245:FreeRTOS/tasks.c **** /*lint +e956 */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 9


 246:FreeRTOS/tasks.c **** 
 247:FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 248:FreeRTOS/tasks.c **** 
 249:FreeRTOS/tasks.c **** /*
 250:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 251:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 252:FreeRTOS/tasks.c ****  */
 253:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 254:FreeRTOS/tasks.c **** 
 255:FreeRTOS/tasks.c **** /*
 256:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 257:FreeRTOS/tasks.c ****  */
 258:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 259:FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 260:FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 261:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 262:FreeRTOS/tasks.c **** 
 263:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 264:FreeRTOS/tasks.c **** 
 265:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 266:FreeRTOS/tasks.c **** 
 267:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 268:FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 269:FreeRTOS/tasks.c **** 	microcontroller architecture. */
 270:FreeRTOS/tasks.c **** 
 271:FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 272:FreeRTOS/tasks.c **** 	state task. */
 273:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 274:FreeRTOS/tasks.c **** 	{																									\
 275:FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 276:FreeRTOS/tasks.c **** 		{																								\
 277:FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 278:FreeRTOS/tasks.c **** 		}																								\
 279:FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 280:FreeRTOS/tasks.c **** 
 281:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 282:FreeRTOS/tasks.c **** 
 283:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 284:FreeRTOS/tasks.c **** 	{																									\
 285:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 286:FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 287:FreeRTOS/tasks.c **** 		{																								\
 288:FreeRTOS/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 289:FreeRTOS/tasks.c **** 			--uxTopReadyPriority;																		\
 290:FreeRTOS/tasks.c **** 		}																								\
 291:FreeRTOS/tasks.c **** 																										\
 292:FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 293:FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 294:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 295:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 296:FreeRTOS/tasks.c **** 
 297:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 298:FreeRTOS/tasks.c **** 
 299:FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 300:FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 301:FreeRTOS/tasks.c **** 	being used. */
 302:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 10


 303:FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 304:FreeRTOS/tasks.c **** 
 305:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 306:FreeRTOS/tasks.c **** 
 307:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 308:FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 309:FreeRTOS/tasks.c **** 	architecture being used. */
 310:FreeRTOS/tasks.c **** 
 311:FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 312:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 313:FreeRTOS/tasks.c **** 
 314:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 315:FreeRTOS/tasks.c **** 
 316:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 317:FreeRTOS/tasks.c **** 	{																								\
 318:FreeRTOS/tasks.c **** 	UBaseT_t uxTopPriority;																		\
 319:FreeRTOS/tasks.c **** 																									\
 320:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 321:FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 322:FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 323:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 324:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 325:FreeRTOS/tasks.c **** 
 326:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 327:FreeRTOS/tasks.c **** 
 328:FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 329:FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 330:FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 331:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 332:FreeRTOS/tasks.c **** 	{																									\
 333:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseT_t ) 0 )	\
 334:FreeRTOS/tasks.c **** 		{																								\
 335:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 336:FreeRTOS/tasks.c **** 		}																								\
 337:FreeRTOS/tasks.c **** 	}
 338:FreeRTOS/tasks.c **** 
 339:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 340:FreeRTOS/tasks.c **** 
 341:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 342:FreeRTOS/tasks.c **** 
 343:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 344:FreeRTOS/tasks.c **** count overflows. */
 345:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 346:FreeRTOS/tasks.c **** {																									\
 347:FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 348:FreeRTOS/tasks.c **** 																									\
 349:FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 350:FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 351:FreeRTOS/tasks.c **** 																									\
 352:FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 353:FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 354:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 355:FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 356:FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 357:FreeRTOS/tasks.c **** }
 358:FreeRTOS/tasks.c **** 
 359:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 11


 360:FreeRTOS/tasks.c **** 
 361:FreeRTOS/tasks.c **** /*
 362:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 363:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 364:FreeRTOS/tasks.c ****  */
 365:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 366:FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )															\
 367:FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 368:FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 369:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 370:FreeRTOS/tasks.c **** 
 371:FreeRTOS/tasks.c **** /*
 372:FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 373:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 374:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 375:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 376:FreeRTOS/tasks.c ****  */
 377:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 378:FreeRTOS/tasks.c **** 
 379:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 380:FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 381:FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 382:FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 383:FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 384:FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 385:FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 386:FreeRTOS/tasks.c **** to its original value when it is released. */
 387:FreeRTOS/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 388:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 389:FreeRTOS/tasks.c **** #else
 390:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 391:FreeRTOS/tasks.c **** #endif
 392:FreeRTOS/tasks.c **** 
 393:FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 394:FreeRTOS/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 395:FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 396:FreeRTOS/tasks.c **** #endif
 397:FreeRTOS/tasks.c **** 
 398:FreeRTOS/tasks.c **** #if configUSE_TICK_HOOK > 0
 399:FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 400:FreeRTOS/tasks.c **** #endif
 401:FreeRTOS/tasks.c **** 
 402:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 403:FreeRTOS/tasks.c **** 
 404:FreeRTOS/tasks.c **** /*
 405:FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 406:FreeRTOS/tasks.c ****  * into the TCB structure.
 407:FreeRTOS/tasks.c ****  */
 408:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
 409:FreeRTOS/tasks.c **** 
 410:FreeRTOS/tasks.c **** /**
 411:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 412:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 413:FreeRTOS/tasks.c ****  * is in any other state.
 414:FreeRTOS/tasks.c ****  */
 415:FreeRTOS/tasks.c **** static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 416:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 12


 417:FreeRTOS/tasks.c **** /*
 418:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 419:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 420:FreeRTOS/tasks.c ****  */
 421:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 422:FreeRTOS/tasks.c **** 
 423:FreeRTOS/tasks.c **** /*
 424:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 425:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 426:FreeRTOS/tasks.c ****  * creation of the first user task.
 427:FreeRTOS/tasks.c ****  *
 428:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 429:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 430:FreeRTOS/tasks.c ****  *
 431:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 432:FreeRTOS/tasks.c ****  *
 433:FreeRTOS/tasks.c ****  */
 434:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 435:FreeRTOS/tasks.c **** 
 436:FreeRTOS/tasks.c **** /*
 437:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 438:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 439:FreeRTOS/tasks.c ****  *
 440:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 441:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 442:FreeRTOS/tasks.c ****  */
 443:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 444:FreeRTOS/tasks.c **** 
 445:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 446:FreeRTOS/tasks.c **** 
 447:FreeRTOS/tasks.c **** #endif
 448:FreeRTOS/tasks.c **** 
 449:FreeRTOS/tasks.c **** /*
 450:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 451:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 452:FreeRTOS/tasks.c ****  * and its TCB deleted.
 453:FreeRTOS/tasks.c ****  */
 454:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 455:FreeRTOS/tasks.c **** 
 456:FreeRTOS/tasks.c **** /*
 457:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 458:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 459:FreeRTOS/tasks.c ****  */
 460:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake ) PRIVILEGED_FUNCTION;
 461:FreeRTOS/tasks.c **** 
 462:FreeRTOS/tasks.c **** /*
 463:FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 464:FreeRTOS/tasks.c ****  * allocation was successful.
 465:FreeRTOS/tasks.c ****  */
 466:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
 467:FreeRTOS/tasks.c **** 
 468:FreeRTOS/tasks.c **** /*
 469:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 470:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 471:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 472:FreeRTOS/tasks.c ****  *
 473:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 13


 474:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 475:FreeRTOS/tasks.c ****  */
 476:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 477:FreeRTOS/tasks.c **** 
 478:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
 479:FreeRTOS/tasks.c **** 
 480:FreeRTOS/tasks.c **** #endif
 481:FreeRTOS/tasks.c **** 
 482:FreeRTOS/tasks.c **** /*
 483:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 484:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 485:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 486:FreeRTOS/tasks.c ****  */
 487:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 488:FreeRTOS/tasks.c **** 
 489:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 490:FreeRTOS/tasks.c **** 
 491:FreeRTOS/tasks.c **** #endif
 492:FreeRTOS/tasks.c **** 
 493:FreeRTOS/tasks.c **** /*
 494:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 495:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 496:FreeRTOS/tasks.c ****  *
 497:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 498:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 499:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 500:FreeRTOS/tasks.c ****  * set to a value other than 1.
 501:FreeRTOS/tasks.c ****  */
 502:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 503:FreeRTOS/tasks.c **** 
 504:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 505:FreeRTOS/tasks.c **** 
 506:FreeRTOS/tasks.c **** #endif
 507:FreeRTOS/tasks.c **** 
 508:FreeRTOS/tasks.c **** /*
 509:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 510:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 511:FreeRTOS/tasks.c ****  */
 512:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 513:FreeRTOS/tasks.c **** 
 514:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 515:FreeRTOS/tasks.c **** 
 516:FreeRTOS/tasks.c **** BaseT_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t us
 517:FreeRTOS/tasks.c **** {
 188              		.loc 1 517 0
 189              		.cfi_startproc
 190              		@ args = 16, pretend = 0, frame = 32
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192 0000 80B5     		push	{r7, lr}	@
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 7, -8
 195              		.cfi_offset 14, -4
 196 0002 8AB0     		sub	sp, sp, #40	@,,
 197              		.cfi_def_cfa_offset 48
 198 0004 02AF     		add	r7, sp, #8	@,,
 199              		.cfi_def_cfa 7, 40
 200 0006 F860     		str	r0, [r7, #12]	@ pxTaskCode, pxTaskCode
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 14


 201 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 202 000a 3B60     		str	r3, [r7]	@ pvParameters, pvParameters
 203 000c 1346     		mov	r3, r2	@ movhi	@ tmp142, tmp141
 204 000e FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp142, usStackDepth
 518:FreeRTOS/tasks.c **** BaseT_t xReturn;
 519:FreeRTOS/tasks.c **** TCB_t * pxNewTCB;
 520:FreeRTOS/tasks.c **** 
 521:FreeRTOS/tasks.c **** 	configASSERT( pxTaskCode );
 205              		.loc 1 521 0
 206 0010 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTaskCode
 207 0012 002B     		cmp	r3, #0	@ tmp143,
 208 0014 02D1     		bne	.L2	@,
 209              		.loc 1 521 0 is_stmt 0 discriminator 1
 210 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 211              	.L3:
 212 001a FEE7     		b	.L3	@
 213              	.L2:
 522:FreeRTOS/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 214              		.loc 1 522 0 is_stmt 1
 215 001c BB6A     		ldr	r3, [r7, #40]	@ tmp144, uxPriority
 216 001e 072B     		cmp	r3, #7	@ tmp144,
 217 0020 02D9     		bls	.L4	@,
 218              		.loc 1 522 0 is_stmt 0 discriminator 1
 219 0022 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 220              	.L5:
 221              		.loc 1 522 0 discriminator 2
 222 0026 FEE7     		b	.L5	@
 223              	.L4:
 523:FreeRTOS/tasks.c **** 
 524:FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 525:FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 526:FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 224              		.loc 1 526 0 is_stmt 1
 225 0028 FB88     		ldrh	r3, [r7, #6]	@ tmp145, usStackDepth
 226 002a 396B     		ldr	r1, [r7, #48]	@, puxStackBuffer
 227 002c 1846     		mov	r0, r3	@, tmp145
 228 002e FFF7FEFF 		bl	prvAllocateTCBAndStack	@
 229 0032 B861     		str	r0, [r7, #24]	@, pxNewTCB
 527:FreeRTOS/tasks.c **** 
 528:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 230              		.loc 1 528 0
 231 0034 BB69     		ldr	r3, [r7, #24]	@ tmp146, pxNewTCB
 232 0036 002B     		cmp	r3, #0	@ tmp146,
 233 0038 71D0     		beq	.L6	@,
 234              	.LBB6:
 529:FreeRTOS/tasks.c **** 	{
 530:FreeRTOS/tasks.c **** 		StackT_t *pxTopOfStack;
 531:FreeRTOS/tasks.c **** 
 532:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 533:FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 534:FreeRTOS/tasks.c **** 			BaseT_t xRunPrivileged;
 535:FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 536:FreeRTOS/tasks.c **** 			{
 537:FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 538:FreeRTOS/tasks.c **** 			}
 539:FreeRTOS/tasks.c **** 			else
 540:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 15


 541:FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
 542:FreeRTOS/tasks.c **** 			}
 543:FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 544:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 545:FreeRTOS/tasks.c **** 
 546:FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 547:FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 548:FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 549:FreeRTOS/tasks.c **** 		required by the port. */
 550:FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 551:FreeRTOS/tasks.c **** 		{
 552:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 235              		.loc 1 552 0
 236 003a BB69     		ldr	r3, [r7, #24]	@ tmp147, pxNewTCB
 237 003c 1A6B     		ldr	r2, [r3, #48]	@ D.6558, pxNewTCB_12->pxStack
 238 003e FB88     		ldrh	r3, [r7, #6]	@ D.6559, usStackDepth
 239 0040 03F18043 		add	r3, r3, #1073741824	@ D.6559, D.6559,
 240 0044 013B     		subs	r3, r3, #1	@ D.6559, D.6559,
 241 0046 9B00     		lsls	r3, r3, #2	@ D.6559, D.6559,
 242 0048 1344     		add	r3, r3, r2	@ tmp148, D.6558
 243 004a 7B61     		str	r3, [r7, #20]	@ tmp148, pxTopOfStack
 553:FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackT_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZ
 244              		.loc 1 553 0
 245 004c 7B69     		ldr	r3, [r7, #20]	@ D.6560, pxTopOfStack
 246 004e 23F00703 		bic	r3, r3, #7	@ D.6560, D.6560,
 247 0052 7B61     		str	r3, [r7, #20]	@ D.6560, pxTopOfStack
 554:FreeRTOS/tasks.c **** 
 555:FreeRTOS/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 556:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 248              		.loc 1 556 0
 249 0054 7B69     		ldr	r3, [r7, #20]	@ D.6560, pxTopOfStack
 250 0056 03F00703 		and	r3, r3, #7	@ D.6560, D.6560,
 251 005a 002B     		cmp	r3, #0	@ D.6560,
 252 005c 02D0     		beq	.L7	@,
 253              		.loc 1 556 0 is_stmt 0 discriminator 1
 254 005e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 255              	.L8:
 256              		.loc 1 556 0 discriminator 3
 257 0062 FEE7     		b	.L8	@
 258              	.L7:
 557:FreeRTOS/tasks.c **** 		}
 558:FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 559:FreeRTOS/tasks.c **** 		{
 560:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 561:FreeRTOS/tasks.c **** 
 562:FreeRTOS/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 563:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 564:FreeRTOS/tasks.c **** 
 565:FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 566:FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 567:FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 568:FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 569:FreeRTOS/tasks.c **** 		}
 570:FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 571:FreeRTOS/tasks.c **** 
 572:FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 573:FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 16


 259              		.loc 1 573 0 is_stmt 1
 260 0064 FB88     		ldrh	r3, [r7, #6]	@ tmp149, usStackDepth
 261 0066 0093     		str	r3, [sp]	@ tmp149,
 262 0068 7B6B     		ldr	r3, [r7, #52]	@, xRegions
 263 006a BA6A     		ldr	r2, [r7, #40]	@, uxPriority
 264 006c B968     		ldr	r1, [r7, #8]	@, pcName
 265 006e B869     		ldr	r0, [r7, #24]	@, pxNewTCB
 266 0070 FFF7FEFF 		bl	prvInitialiseTCBVariables	@
 574:FreeRTOS/tasks.c **** 
 575:FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 576:FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 577:FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 578:FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 579:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 580:FreeRTOS/tasks.c **** 		{
 581:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 582:FreeRTOS/tasks.c **** 		}
 583:FreeRTOS/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 584:FreeRTOS/tasks.c **** 		{
 585:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 267              		.loc 1 585 0
 268 0074 3A68     		ldr	r2, [r7]	@, pvParameters
 269 0076 F968     		ldr	r1, [r7, #12]	@, pxTaskCode
 270 0078 7869     		ldr	r0, [r7, #20]	@, pxTopOfStack
 271 007a FFF7FEFF 		bl	pxPortInitialiseStack	@
 272 007e 0246     		mov	r2, r0	@ D.6558,
 273 0080 BB69     		ldr	r3, [r7, #24]	@ tmp150, pxNewTCB
 274 0082 1A60     		str	r2, [r3]	@ D.6558, pxNewTCB_12->pxTopOfStack
 586:FreeRTOS/tasks.c **** 		}
 587:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 588:FreeRTOS/tasks.c **** 
 589:FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 275              		.loc 1 589 0
 276 0084 FB6A     		ldr	r3, [r7, #44]	@ tmp151, pxCreatedTask
 277 0086 002B     		cmp	r3, #0	@ tmp151,
 278 0088 02D0     		beq	.L9	@,
 590:FreeRTOS/tasks.c **** 		{
 591:FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 592:FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 593:FreeRTOS/tasks.c **** 			required.*/
 594:FreeRTOS/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 279              		.loc 1 594 0
 280 008a FB6A     		ldr	r3, [r7, #44]	@ tmp152, pxCreatedTask
 281 008c BA69     		ldr	r2, [r7, #24]	@ tmp153, pxNewTCB
 282 008e 1A60     		str	r2, [r3]	@ tmp153, *pxCreatedTask_30(D)
 283              	.L9:
 595:FreeRTOS/tasks.c **** 		}
 596:FreeRTOS/tasks.c **** 		else
 597:FreeRTOS/tasks.c **** 		{
 598:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 599:FreeRTOS/tasks.c **** 		}
 600:FreeRTOS/tasks.c **** 
 601:FreeRTOS/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 602:FreeRTOS/tasks.c **** 		updated. */
 603:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 284              		.loc 1 603 0
 285 0090 FFF7FEFF 		bl	vPortEnterCritical	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 17


 604:FreeRTOS/tasks.c **** 		{
 605:FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 286              		.loc 1 605 0
 287 0094 2D4B     		ldr	r3, .L15	@ tmp154,
 288 0096 1B68     		ldr	r3, [r3]	@ D.6560, uxCurrentNumberOfTasks
 289 0098 0133     		adds	r3, r3, #1	@ D.6560, D.6560,
 290 009a 2C4A     		ldr	r2, .L15	@ tmp155,
 291 009c 1360     		str	r3, [r2]	@ D.6560, uxCurrentNumberOfTasks
 606:FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 292              		.loc 1 606 0
 293 009e 2C4B     		ldr	r3, .L15+4	@ tmp156,
 294 00a0 1B68     		ldr	r3, [r3]	@ D.6561, pxCurrentTCB
 295 00a2 002B     		cmp	r3, #0	@ D.6561,
 296 00a4 09D1     		bne	.L10	@,
 607:FreeRTOS/tasks.c **** 			{
 608:FreeRTOS/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 609:FreeRTOS/tasks.c **** 				the suspended state - make this the current task. */
 610:FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 297              		.loc 1 610 0
 298 00a6 2A4A     		ldr	r2, .L15+4	@ tmp157,
 299 00a8 BB69     		ldr	r3, [r7, #24]	@ tmp158, pxNewTCB
 300 00aa 1360     		str	r3, [r2]	@ tmp158, pxCurrentTCB
 611:FreeRTOS/tasks.c **** 
 612:FreeRTOS/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseT_t ) 1 )
 301              		.loc 1 612 0
 302 00ac 274B     		ldr	r3, .L15	@ tmp159,
 303 00ae 1B68     		ldr	r3, [r3]	@ D.6560, uxCurrentNumberOfTasks
 304 00b0 012B     		cmp	r3, #1	@ D.6560,
 305 00b2 0FD1     		bne	.L11	@,
 613:FreeRTOS/tasks.c **** 				{
 614:FreeRTOS/tasks.c **** 					/* This is the first task to be created so do the preliminary
 615:FreeRTOS/tasks.c **** 					initialisation required.  We will not recover if this call
 616:FreeRTOS/tasks.c **** 					fails, but we will report the failure. */
 617:FreeRTOS/tasks.c **** 					prvInitialiseTaskLists();
 306              		.loc 1 617 0
 307 00b4 FFF7FEFF 		bl	prvInitialiseTaskLists	@
 308 00b8 0CE0     		b	.L11	@
 309              	.L10:
 618:FreeRTOS/tasks.c **** 				}
 619:FreeRTOS/tasks.c **** 				else
 620:FreeRTOS/tasks.c **** 				{
 621:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 622:FreeRTOS/tasks.c **** 				}
 623:FreeRTOS/tasks.c **** 			}
 624:FreeRTOS/tasks.c **** 			else
 625:FreeRTOS/tasks.c **** 			{
 626:FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 627:FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
 628:FreeRTOS/tasks.c **** 				so far. */
 629:FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 310              		.loc 1 629 0
 311 00ba 264B     		ldr	r3, .L15+8	@ tmp160,
 312 00bc 1B68     		ldr	r3, [r3]	@ D.6562, xSchedulerRunning
 313 00be 002B     		cmp	r3, #0	@ D.6562,
 314 00c0 08D1     		bne	.L11	@,
 630:FreeRTOS/tasks.c **** 				{
 631:FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 18


 315              		.loc 1 631 0
 316 00c2 234B     		ldr	r3, .L15+4	@ tmp161,
 317 00c4 1B68     		ldr	r3, [r3]	@ D.6561, pxCurrentTCB
 318 00c6 DA6A     		ldr	r2, [r3, #44]	@ D.6560, _41->uxPriority
 319 00c8 BB6A     		ldr	r3, [r7, #40]	@ tmp162, uxPriority
 320 00ca 9A42     		cmp	r2, r3	@ D.6560, tmp162
 321 00cc 02D8     		bhi	.L11	@,
 632:FreeRTOS/tasks.c **** 					{
 633:FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 322              		.loc 1 633 0
 323 00ce 204A     		ldr	r2, .L15+4	@ tmp163,
 324 00d0 BB69     		ldr	r3, [r7, #24]	@ tmp164, pxNewTCB
 325 00d2 1360     		str	r3, [r2]	@ tmp164, pxCurrentTCB
 326              	.L11:
 634:FreeRTOS/tasks.c **** 					}
 635:FreeRTOS/tasks.c **** 					else
 636:FreeRTOS/tasks.c **** 					{
 637:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 638:FreeRTOS/tasks.c **** 					}
 639:FreeRTOS/tasks.c **** 				}
 640:FreeRTOS/tasks.c **** 				else
 641:FreeRTOS/tasks.c **** 				{
 642:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 643:FreeRTOS/tasks.c **** 				}
 644:FreeRTOS/tasks.c **** 			}
 645:FreeRTOS/tasks.c **** 
 646:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 327              		.loc 1 646 0
 328 00d4 204B     		ldr	r3, .L15+12	@ tmp165,
 329 00d6 1B68     		ldr	r3, [r3]	@ D.6560, uxTaskNumber
 330 00d8 0133     		adds	r3, r3, #1	@ D.6560, D.6560,
 331 00da 1F4A     		ldr	r2, .L15+12	@ tmp166,
 332 00dc 1360     		str	r3, [r2]	@ D.6560, uxTaskNumber
 647:FreeRTOS/tasks.c **** 
 648:FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 649:FreeRTOS/tasks.c **** 			{
 650:FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 651:FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 333              		.loc 1 651 0
 334 00de 1E4B     		ldr	r3, .L15+12	@ tmp167,
 335 00e0 1A68     		ldr	r2, [r3]	@ D.6560, uxTaskNumber
 336 00e2 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxNewTCB
 337 00e4 1A64     		str	r2, [r3, #64]	@ D.6560, pxNewTCB_12->uxTCBNumber
 652:FreeRTOS/tasks.c **** 			}
 653:FreeRTOS/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 654:FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 655:FreeRTOS/tasks.c **** 
 656:FreeRTOS/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 338              		.loc 1 656 0
 339 00e6 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxNewTCB
 340 00e8 DB6A     		ldr	r3, [r3, #44]	@ D.6560, pxNewTCB_12->uxPriority
 341 00ea 0122     		movs	r2, #1	@ tmp170,
 342 00ec 9A40     		lsls	r2, r2, r3	@ D.6560, tmp170, D.6560
 343 00ee 1B4B     		ldr	r3, .L15+16	@ tmp171,
 344 00f0 1B68     		ldr	r3, [r3]	@ D.6560, uxTopReadyPriority
 345 00f2 1343     		orrs	r3, r3, r2	@, D.6560, D.6560, D.6560
 346 00f4 194A     		ldr	r2, .L15+16	@ tmp172,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 19


 347 00f6 1360     		str	r3, [r2]	@ D.6560, uxTopReadyPriority
 348 00f8 BB69     		ldr	r3, [r7, #24]	@ tmp173, pxNewTCB
 349 00fa DA6A     		ldr	r2, [r3, #44]	@ D.6560, pxNewTCB_12->uxPriority
 350 00fc 1346     		mov	r3, r2	@ tmp174, D.6560
 351 00fe 9B00     		lsls	r3, r3, #2	@ tmp174, tmp174,
 352 0100 1344     		add	r3, r3, r2	@ tmp174, D.6560
 353 0102 9B00     		lsls	r3, r3, #2	@ tmp175, tmp174,
 354 0104 164A     		ldr	r2, .L15+20	@ tmp176,
 355 0106 1A44     		add	r2, r2, r3	@ D.6563, tmp174
 356 0108 BB69     		ldr	r3, [r7, #24]	@ tmp177, pxNewTCB
 357 010a 0433     		adds	r3, r3, #4	@ D.6564, tmp177,
 358 010c 1946     		mov	r1, r3	@, D.6564
 359 010e 1046     		mov	r0, r2	@, D.6563
 360 0110 FFF7FEFF 		bl	vListInsertEnd	@
 657:FreeRTOS/tasks.c **** 
 658:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 361              		.loc 1 658 0
 362 0114 0123     		movs	r3, #1	@ tmp178,
 363 0116 FB61     		str	r3, [r7, #28]	@ tmp178, xReturn
 659:FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 660:FreeRTOS/tasks.c **** 		}
 661:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 364              		.loc 1 661 0
 365 0118 FFF7FEFF 		bl	vPortExitCritical	@
 366              	.LBE6:
 367 011c 02E0     		b	.L12	@
 368              	.L6:
 662:FreeRTOS/tasks.c **** 	}
 663:FreeRTOS/tasks.c **** 	else
 664:FreeRTOS/tasks.c **** 	{
 665:FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 369              		.loc 1 665 0
 370 011e 4FF0FF33 		mov	r3, #-1	@ tmp179,
 371 0122 FB61     		str	r3, [r7, #28]	@ tmp179, xReturn
 372              	.L12:
 666:FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 667:FreeRTOS/tasks.c **** 	}
 668:FreeRTOS/tasks.c **** 
 669:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 373              		.loc 1 669 0
 374 0124 FB69     		ldr	r3, [r7, #28]	@ tmp180, xReturn
 375 0126 012B     		cmp	r3, #1	@ tmp180,
 376 0128 0BD1     		bne	.L13	@,
 670:FreeRTOS/tasks.c **** 	{
 671:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 377              		.loc 1 671 0
 378 012a 0A4B     		ldr	r3, .L15+8	@ tmp181,
 379 012c 1B68     		ldr	r3, [r3]	@ D.6562, xSchedulerRunning
 380 012e 002B     		cmp	r3, #0	@ D.6562,
 381 0130 07D0     		beq	.L13	@,
 672:FreeRTOS/tasks.c **** 		{
 673:FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 674:FreeRTOS/tasks.c **** 			then it should run now. */
 675:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 382              		.loc 1 675 0
 383 0132 074B     		ldr	r3, .L15+4	@ tmp182,
 384 0134 1B68     		ldr	r3, [r3]	@ D.6561, pxCurrentTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 20


 385 0136 DA6A     		ldr	r2, [r3, #44]	@ D.6560, _63->uxPriority
 386 0138 BB6A     		ldr	r3, [r7, #40]	@ tmp183, uxPriority
 387 013a 9A42     		cmp	r2, r3	@ D.6560, tmp183
 388 013c 01D2     		bcs	.L13	@,
 676:FreeRTOS/tasks.c **** 			{
 677:FreeRTOS/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 389              		.loc 1 677 0
 390 013e FFF7FEFF 		bl	vPortYield	@
 391              	.L13:
 678:FreeRTOS/tasks.c **** 			}
 679:FreeRTOS/tasks.c **** 			else
 680:FreeRTOS/tasks.c **** 			{
 681:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 682:FreeRTOS/tasks.c **** 			}
 683:FreeRTOS/tasks.c **** 		}
 684:FreeRTOS/tasks.c **** 		else
 685:FreeRTOS/tasks.c **** 		{
 686:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 687:FreeRTOS/tasks.c **** 		}
 688:FreeRTOS/tasks.c **** 	}
 689:FreeRTOS/tasks.c **** 
 690:FreeRTOS/tasks.c **** 	return xReturn;
 392              		.loc 1 690 0
 393 0142 FB69     		ldr	r3, [r7, #28]	@ D.6565, xReturn
 691:FreeRTOS/tasks.c **** }
 394              		.loc 1 691 0
 395 0144 1846     		mov	r0, r3	@, <retval>
 396 0146 2037     		adds	r7, r7, #32	@,,
 397              		.cfi_def_cfa_offset 8
 398 0148 BD46     		mov	sp, r7	@,
 399              		.cfi_def_cfa_register 13
 400              		@ sp needed	@
 401 014a 80BD     		pop	{r7, pc}	@
 402              	.L16:
 403              		.align	2
 404              	.L15:
 405 014c 00000000 		.word	uxCurrentNumberOfTasks
 406 0150 00000000 		.word	pxCurrentTCB
 407 0154 00000000 		.word	xSchedulerRunning
 408 0158 00000000 		.word	uxTaskNumber
 409 015c 00000000 		.word	uxTopReadyPriority
 410 0160 00000000 		.word	pxReadyTasksLists
 411              		.cfi_endproc
 412              	.LFE1:
 413              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 414              		.section	.text.vTaskDelete,"ax",%progbits
 415              		.align	2
 416              		.global	vTaskDelete
 417              		.thumb
 418              		.thumb_func
 419              		.type	vTaskDelete, %function
 420              	vTaskDelete:
 421              	.LFB2:
 692:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 693:FreeRTOS/tasks.c **** 
 694:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 695:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 21


 696:FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 697:FreeRTOS/tasks.c **** 	{
 422              		.loc 1 697 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 16
 425              		@ frame_needed = 1, uses_anonymous_args = 0
 426 0000 80B5     		push	{r7, lr}	@
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 84B0     		sub	sp, sp, #16	@,,
 431              		.cfi_def_cfa_offset 24
 432 0004 00AF     		add	r7, sp, #0	@,,
 433              		.cfi_def_cfa_register 7
 434 0006 7860     		str	r0, [r7, #4]	@ xTaskToDelete, xTaskToDelete
 698:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 699:FreeRTOS/tasks.c **** 
 700:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 435              		.loc 1 700 0
 436 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 701:FreeRTOS/tasks.c **** 		{
 702:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 703:FreeRTOS/tasks.c **** 			being deleted. */
 704:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 437              		.loc 1 704 0
 438 000c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTaskToDelete
 439 000e 002B     		cmp	r3, #0	@ tmp130,
 440 0010 02D1     		bne	.L18	@,
 441              		.loc 1 704 0 is_stmt 0 discriminator 1
 442 0012 2D4B     		ldr	r3, .L28	@ tmp131,
 443 0014 1B68     		ldr	r3, [r3]	@ D.6566, pxCurrentTCB
 444 0016 00E0     		b	.L19	@
 445              	.L18:
 446              		.loc 1 704 0 discriminator 2
 447 0018 7B68     		ldr	r3, [r7, #4]	@ D.6566, xTaskToDelete
 448              	.L19:
 449              		.loc 1 704 0 discriminator 4
 450 001a FB60     		str	r3, [r7, #12]	@ D.6566, pxTCB
 705:FreeRTOS/tasks.c **** 
 706:FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 707:FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 708:FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 709:FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 710:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 451              		.loc 1 710 0 is_stmt 1 discriminator 4
 452 001c FB68     		ldr	r3, [r7, #12]	@ tmp132, pxTCB
 453 001e 0433     		adds	r3, r3, #4	@ D.6567, tmp132,
 454 0020 1846     		mov	r0, r3	@, D.6567
 455 0022 FFF7FEFF 		bl	uxListRemove	@
 456 0026 0346     		mov	r3, r0	@ D.6568,
 457 0028 002B     		cmp	r3, #0	@ D.6568,
 458 002a 15D1     		bne	.L20	@,
 711:FreeRTOS/tasks.c **** 			{
 712:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 459              		.loc 1 712 0
 460 002c FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 461 002e DA6A     		ldr	r2, [r3, #44]	@ D.6568, pxTCB_11->uxPriority
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 22


 462 0030 2649     		ldr	r1, .L28+4	@ tmp134,
 463 0032 1346     		mov	r3, r2	@ tmp135, D.6568
 464 0034 9B00     		lsls	r3, r3, #2	@ tmp135, tmp135,
 465 0036 1344     		add	r3, r3, r2	@ tmp135, D.6568
 466 0038 9B00     		lsls	r3, r3, #2	@ tmp136, tmp135,
 467 003a 0B44     		add	r3, r3, r1	@ tmp137, tmp134
 468 003c 1B68     		ldr	r3, [r3]	@ D.6568, pxReadyTasksLists[_15].uxNumberOfItems
 469 003e 002B     		cmp	r3, #0	@ D.6568,
 470 0040 0AD1     		bne	.L20	@,
 471              		.loc 1 712 0 is_stmt 0 discriminator 1
 472 0042 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 473 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6568, pxTCB_11->uxPriority
 474 0046 0122     		movs	r2, #1	@ tmp139,
 475 0048 02FA03F3 		lsl	r3, r2, r3	@ D.6568, tmp139, D.6568
 476 004c DA43     		mvns	r2, r3	@ D.6568, D.6568
 477 004e 204B     		ldr	r3, .L28+8	@ tmp140,
 478 0050 1B68     		ldr	r3, [r3]	@ D.6568, uxTopReadyPriority
 479 0052 1340     		ands	r3, r3, r2	@, D.6568, D.6568, D.6568
 480 0054 1E4A     		ldr	r2, .L28+8	@ tmp141,
 481 0056 1360     		str	r3, [r2]	@ D.6568, uxTopReadyPriority
 482              	.L20:
 713:FreeRTOS/tasks.c **** 			}
 714:FreeRTOS/tasks.c **** 			else
 715:FreeRTOS/tasks.c **** 			{
 716:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 717:FreeRTOS/tasks.c **** 			}
 718:FreeRTOS/tasks.c **** 
 719:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 720:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 483              		.loc 1 720 0 is_stmt 1
 484 0058 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 485 005a 9B6A     		ldr	r3, [r3, #40]	@ D.6569, pxTCB_11->xEventListItem.pvContainer
 486 005c 002B     		cmp	r3, #0	@ D.6569,
 487 005e 04D0     		beq	.L22	@,
 721:FreeRTOS/tasks.c **** 			{
 722:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 488              		.loc 1 722 0
 489 0060 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 490 0062 1833     		adds	r3, r3, #24	@ D.6567, tmp143,
 491 0064 1846     		mov	r0, r3	@, D.6567
 492 0066 FFF7FEFF 		bl	uxListRemove	@
 493              	.L22:
 723:FreeRTOS/tasks.c **** 			}
 724:FreeRTOS/tasks.c **** 			else
 725:FreeRTOS/tasks.c **** 			{
 726:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 727:FreeRTOS/tasks.c **** 			}
 728:FreeRTOS/tasks.c **** 
 729:FreeRTOS/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 494              		.loc 1 729 0
 495 006a FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 496 006c 0433     		adds	r3, r3, #4	@ D.6567, tmp144,
 497 006e 1946     		mov	r1, r3	@, D.6567
 498 0070 1848     		ldr	r0, .L28+12	@,
 499 0072 FFF7FEFF 		bl	vListInsertEnd	@
 730:FreeRTOS/tasks.c **** 
 731:FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 23


 732:FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
 733:FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 734:FreeRTOS/tasks.c **** 			++uxTasksDeleted;
 500              		.loc 1 734 0
 501 0076 184B     		ldr	r3, .L28+16	@ tmp145,
 502 0078 1B68     		ldr	r3, [r3]	@ D.6568, uxTasksDeleted
 503 007a 0133     		adds	r3, r3, #1	@ D.6568, D.6568,
 504 007c 164A     		ldr	r2, .L28+16	@ tmp146,
 505 007e 1360     		str	r3, [r2]	@ D.6568, uxTasksDeleted
 735:FreeRTOS/tasks.c **** 
 736:FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 737:FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 738:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 506              		.loc 1 738 0
 507 0080 164B     		ldr	r3, .L28+20	@ tmp147,
 508 0082 1B68     		ldr	r3, [r3]	@ D.6568, uxTaskNumber
 509 0084 0133     		adds	r3, r3, #1	@ D.6568, D.6568,
 510 0086 154A     		ldr	r2, .L28+20	@ tmp148,
 511 0088 1360     		str	r3, [r2]	@ D.6568, uxTaskNumber
 739:FreeRTOS/tasks.c **** 
 740:FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 741:FreeRTOS/tasks.c **** 		}
 742:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 512              		.loc 1 742 0
 513 008a FFF7FEFF 		bl	vPortExitCritical	@
 743:FreeRTOS/tasks.c **** 
 744:FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 745:FreeRTOS/tasks.c **** 		been deleted. */
 746:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 514              		.loc 1 746 0
 515 008e 144B     		ldr	r3, .L28+24	@ tmp149,
 516 0090 1B68     		ldr	r3, [r3]	@ D.6570, xSchedulerRunning
 517 0092 002B     		cmp	r3, #0	@ D.6570,
 518 0094 14D0     		beq	.L27	@,
 747:FreeRTOS/tasks.c **** 		{
 748:FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 519              		.loc 1 748 0
 520 0096 0C4B     		ldr	r3, .L28	@ tmp150,
 521 0098 1B68     		ldr	r3, [r3]	@ D.6566, pxCurrentTCB
 522 009a FA68     		ldr	r2, [r7, #12]	@ tmp151, pxTCB
 523 009c 9A42     		cmp	r2, r3	@ tmp151, D.6566
 524 009e 09D1     		bne	.L24	@,
 749:FreeRTOS/tasks.c **** 			{
 750:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 525              		.loc 1 750 0
 526 00a0 104B     		ldr	r3, .L28+28	@ tmp152,
 527 00a2 1B68     		ldr	r3, [r3]	@ D.6568, uxSchedulerSuspended
 528 00a4 002B     		cmp	r3, #0	@ D.6568,
 529 00a6 02D0     		beq	.L25	@,
 530              		.loc 1 750 0 is_stmt 0 discriminator 1
 531 00a8 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 532              	.L26:
 533 00ac FEE7     		b	.L26	@
 534              	.L25:
 751:FreeRTOS/tasks.c **** 
 752:FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 753:FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 24


 754:FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
 755:FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 756:FreeRTOS/tasks.c **** 				required. */
 757:FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 758:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 535              		.loc 1 758 0 is_stmt 1
 536 00ae FFF7FEFF 		bl	vPortYield	@
 759:FreeRTOS/tasks.c **** 			}
 760:FreeRTOS/tasks.c **** 			else
 761:FreeRTOS/tasks.c **** 			{
 762:FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 763:FreeRTOS/tasks.c **** 				the task that has just been deleted. */
 764:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 765:FreeRTOS/tasks.c **** 				{
 766:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 767:FreeRTOS/tasks.c **** 				}
 768:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 769:FreeRTOS/tasks.c **** 			}
 770:FreeRTOS/tasks.c **** 		}
 771:FreeRTOS/tasks.c **** 	}
 537              		.loc 1 771 0
 538 00b2 05E0     		b	.L27	@
 539              	.L24:
 764:FreeRTOS/tasks.c **** 				{
 540              		.loc 1 764 0
 541 00b4 FFF7FEFF 		bl	vPortEnterCritical	@
 766:FreeRTOS/tasks.c **** 				}
 542              		.loc 1 766 0
 543 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 768:FreeRTOS/tasks.c **** 			}
 544              		.loc 1 768 0
 545 00bc FFF7FEFF 		bl	vPortExitCritical	@
 546              	.L27:
 547              		.loc 1 771 0
 548 00c0 00BF     		nop
 549 00c2 1037     		adds	r7, r7, #16	@,,
 550              		.cfi_def_cfa_offset 8
 551 00c4 BD46     		mov	sp, r7	@,
 552              		.cfi_def_cfa_register 13
 553              		@ sp needed	@
 554 00c6 80BD     		pop	{r7, pc}	@
 555              	.L29:
 556              		.align	2
 557              	.L28:
 558 00c8 00000000 		.word	pxCurrentTCB
 559 00cc 00000000 		.word	pxReadyTasksLists
 560 00d0 00000000 		.word	uxTopReadyPriority
 561 00d4 00000000 		.word	xTasksWaitingTermination
 562 00d8 00000000 		.word	uxTasksDeleted
 563 00dc 00000000 		.word	uxTaskNumber
 564 00e0 00000000 		.word	xSchedulerRunning
 565 00e4 00000000 		.word	uxSchedulerSuspended
 566              		.cfi_endproc
 567              	.LFE2:
 568              		.size	vTaskDelete, .-vTaskDelete
 569              		.section	.text.vTaskDelayUntil,"ax",%progbits
 570              		.align	2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 25


 571              		.global	vTaskDelayUntil
 572              		.thumb
 573              		.thumb_func
 574              		.type	vTaskDelayUntil, %function
 575              	vTaskDelayUntil:
 576              	.LFB3:
 772:FreeRTOS/tasks.c **** 
 773:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 774:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 775:FreeRTOS/tasks.c **** 
 776:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 777:FreeRTOS/tasks.c **** 
 778:FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickT_t * const pxPreviousWakeTime, const TickT_t xTimeIncrement )
 779:FreeRTOS/tasks.c **** 	{
 577              		.loc 1 779 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 24
 580              		@ frame_needed = 1, uses_anonymous_args = 0
 581 0000 80B5     		push	{r7, lr}	@
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 7, -8
 584              		.cfi_offset 14, -4
 585 0002 86B0     		sub	sp, sp, #24	@,,
 586              		.cfi_def_cfa_offset 32
 587 0004 00AF     		add	r7, sp, #0	@,,
 588              		.cfi_def_cfa_register 7
 589 0006 7860     		str	r0, [r7, #4]	@ pxPreviousWakeTime, pxPreviousWakeTime
 590 0008 3960     		str	r1, [r7]	@ xTimeIncrement, xTimeIncrement
 780:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 781:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded, xShouldDelay = pdFALSE;
 591              		.loc 1 781 0
 592 000a 0023     		movs	r3, #0	@ tmp124,
 593 000c 7B61     		str	r3, [r7, #20]	@ tmp124, xShouldDelay
 782:FreeRTOS/tasks.c **** 
 783:FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 594              		.loc 1 783 0
 595 000e 7B68     		ldr	r3, [r7, #4]	@ tmp125, pxPreviousWakeTime
 596 0010 002B     		cmp	r3, #0	@ tmp125,
 597 0012 02D1     		bne	.L31	@,
 598              		.loc 1 783 0 is_stmt 0 discriminator 1
 599 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 600              	.L32:
 601 0018 FEE7     		b	.L32	@
 602              	.L31:
 784:FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 603              		.loc 1 784 0 is_stmt 1
 604 001a 3B68     		ldr	r3, [r7]	@ tmp126, xTimeIncrement
 605 001c 002B     		cmp	r3, #0	@ tmp126,
 606 001e 02D1     		bne	.L33	@,
 607              		.loc 1 784 0 is_stmt 0 discriminator 1
 608 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 609              	.L34:
 610              		.loc 1 784 0 discriminator 2
 611 0024 FEE7     		b	.L34	@
 612              	.L33:
 785:FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 613              		.loc 1 785 0 is_stmt 1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 26


 614 0026 2B4B     		ldr	r3, .L44	@ tmp127,
 615 0028 1B68     		ldr	r3, [r3]	@ D.6571, uxSchedulerSuspended
 616 002a 002B     		cmp	r3, #0	@ D.6571,
 617 002c 02D0     		beq	.L35	@,
 618              		.loc 1 785 0 is_stmt 0 discriminator 1
 619 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 620              	.L36:
 621              		.loc 1 785 0 discriminator 3
 622 0032 FEE7     		b	.L36	@
 623              	.L35:
 786:FreeRTOS/tasks.c **** 
 787:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 624              		.loc 1 787 0 is_stmt 1
 625 0034 FFF7FEFF 		bl	vTaskSuspendAll	@
 626              	.LBB7:
 788:FreeRTOS/tasks.c **** 		{
 789:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 790:FreeRTOS/tasks.c **** 			block. */
 791:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 627              		.loc 1 791 0
 628 0038 274B     		ldr	r3, .L44+4	@ tmp128,
 629 003a 1B68     		ldr	r3, [r3]	@ tmp129, xTickCount
 630 003c 3B61     		str	r3, [r7, #16]	@ tmp129, xConstTickCount
 792:FreeRTOS/tasks.c **** 
 793:FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 794:FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 631              		.loc 1 794 0
 632 003e 7B68     		ldr	r3, [r7, #4]	@ tmp130, pxPreviousWakeTime
 633 0040 1A68     		ldr	r2, [r3]	@ D.6571, *pxPreviousWakeTime_6(D)
 634 0042 3B68     		ldr	r3, [r7]	@ tmp132, xTimeIncrement
 635 0044 1344     		add	r3, r3, r2	@ tmp131, D.6571
 636 0046 FB60     		str	r3, [r7, #12]	@ tmp131, xTimeToWake
 795:FreeRTOS/tasks.c **** 
 796:FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 637              		.loc 1 796 0
 638 0048 7B68     		ldr	r3, [r7, #4]	@ tmp133, pxPreviousWakeTime
 639 004a 1A68     		ldr	r2, [r3]	@ D.6571, *pxPreviousWakeTime_6(D)
 640 004c 3B69     		ldr	r3, [r7, #16]	@ tmp134, xConstTickCount
 641 004e 9A42     		cmp	r2, r3	@ D.6571, tmp134
 642 0050 0BD9     		bls	.L37	@,
 797:FreeRTOS/tasks.c **** 			{
 798:FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 799:FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 800:FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 801:FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 802:FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 803:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 643              		.loc 1 803 0
 644 0052 7B68     		ldr	r3, [r7, #4]	@ tmp135, pxPreviousWakeTime
 645 0054 1A68     		ldr	r2, [r3]	@ D.6571, *pxPreviousWakeTime_6(D)
 646 0056 FB68     		ldr	r3, [r7, #12]	@ tmp136, xTimeToWake
 647 0058 9A42     		cmp	r2, r3	@ D.6571, tmp136
 648 005a 11D9     		bls	.L38	@,
 649              		.loc 1 803 0 is_stmt 0 discriminator 1
 650 005c FA68     		ldr	r2, [r7, #12]	@ tmp137, xTimeToWake
 651 005e 3B69     		ldr	r3, [r7, #16]	@ tmp138, xConstTickCount
 652 0060 9A42     		cmp	r2, r3	@ tmp137, tmp138
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 27


 653 0062 0DD9     		bls	.L38	@,
 804:FreeRTOS/tasks.c **** 				{
 805:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 654              		.loc 1 805 0 is_stmt 1
 655 0064 0123     		movs	r3, #1	@ tmp139,
 656 0066 7B61     		str	r3, [r7, #20]	@ tmp139, xShouldDelay
 657 0068 0AE0     		b	.L38	@
 658              	.L37:
 806:FreeRTOS/tasks.c **** 				}
 807:FreeRTOS/tasks.c **** 				else
 808:FreeRTOS/tasks.c **** 				{
 809:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 810:FreeRTOS/tasks.c **** 				}
 811:FreeRTOS/tasks.c **** 			}
 812:FreeRTOS/tasks.c **** 			else
 813:FreeRTOS/tasks.c **** 			{
 814:FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 815:FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 816:FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 817:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 659              		.loc 1 817 0
 660 006a 7B68     		ldr	r3, [r7, #4]	@ tmp140, pxPreviousWakeTime
 661 006c 1A68     		ldr	r2, [r3]	@ D.6571, *pxPreviousWakeTime_6(D)
 662 006e FB68     		ldr	r3, [r7, #12]	@ tmp141, xTimeToWake
 663 0070 9A42     		cmp	r2, r3	@ D.6571, tmp141
 664 0072 03D8     		bhi	.L39	@,
 665              		.loc 1 817 0 is_stmt 0 discriminator 1
 666 0074 FA68     		ldr	r2, [r7, #12]	@ tmp142, xTimeToWake
 667 0076 3B69     		ldr	r3, [r7, #16]	@ tmp143, xConstTickCount
 668 0078 9A42     		cmp	r2, r3	@ tmp142, tmp143
 669 007a 01D9     		bls	.L38	@,
 670              	.L39:
 818:FreeRTOS/tasks.c **** 				{
 819:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 671              		.loc 1 819 0 is_stmt 1
 672 007c 0123     		movs	r3, #1	@ tmp144,
 673 007e 7B61     		str	r3, [r7, #20]	@ tmp144, xShouldDelay
 674              	.L38:
 820:FreeRTOS/tasks.c **** 				}
 821:FreeRTOS/tasks.c **** 				else
 822:FreeRTOS/tasks.c **** 				{
 823:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 824:FreeRTOS/tasks.c **** 				}
 825:FreeRTOS/tasks.c **** 			}
 826:FreeRTOS/tasks.c **** 
 827:FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 828:FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 675              		.loc 1 828 0
 676 0080 7B68     		ldr	r3, [r7, #4]	@ tmp145, pxPreviousWakeTime
 677 0082 FA68     		ldr	r2, [r7, #12]	@ tmp146, xTimeToWake
 678 0084 1A60     		str	r2, [r3]	@ tmp146, *pxPreviousWakeTime_6(D)
 829:FreeRTOS/tasks.c **** 
 830:FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 679              		.loc 1 830 0
 680 0086 7B69     		ldr	r3, [r7, #20]	@ tmp147, xShouldDelay
 681 0088 002B     		cmp	r3, #0	@ tmp147,
 682 008a 17D0     		beq	.L40	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 28


 831:FreeRTOS/tasks.c **** 			{
 832:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 833:FreeRTOS/tasks.c **** 
 834:FreeRTOS/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 835:FreeRTOS/tasks.c **** 				blocked list as the same list item is used for both lists. */
 836:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 683              		.loc 1 836 0
 684 008c 134B     		ldr	r3, .L44+8	@ tmp148,
 685 008e 1B68     		ldr	r3, [r3]	@ D.6572, pxCurrentTCB
 686 0090 0433     		adds	r3, r3, #4	@ D.6573, D.6572,
 687 0092 1846     		mov	r0, r3	@, D.6573
 688 0094 FFF7FEFF 		bl	uxListRemove	@
 689 0098 0346     		mov	r3, r0	@ D.6571,
 690 009a 002B     		cmp	r3, #0	@ D.6571,
 691 009c 0BD1     		bne	.L41	@,
 837:FreeRTOS/tasks.c **** 				{
 838:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 839:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 840:FreeRTOS/tasks.c **** 					directly. */
 841:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 692              		.loc 1 841 0
 693 009e 0F4B     		ldr	r3, .L44+8	@ tmp149,
 694 00a0 1B68     		ldr	r3, [r3]	@ D.6572, pxCurrentTCB
 695 00a2 DB6A     		ldr	r3, [r3, #44]	@ D.6571, _24->uxPriority
 696 00a4 0122     		movs	r2, #1	@ tmp150,
 697 00a6 02FA03F3 		lsl	r3, r2, r3	@ D.6571, tmp150, D.6571
 698 00aa DA43     		mvns	r2, r3	@ D.6571, D.6571
 699 00ac 0C4B     		ldr	r3, .L44+12	@ tmp151,
 700 00ae 1B68     		ldr	r3, [r3]	@ D.6571, uxTopReadyPriority
 701 00b0 1340     		ands	r3, r3, r2	@, D.6571, D.6571, D.6571
 702 00b2 0B4A     		ldr	r2, .L44+12	@ tmp152,
 703 00b4 1360     		str	r3, [r2]	@ D.6571, uxTopReadyPriority
 704              	.L41:
 842:FreeRTOS/tasks.c **** 				}
 843:FreeRTOS/tasks.c **** 				else
 844:FreeRTOS/tasks.c **** 				{
 845:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 846:FreeRTOS/tasks.c **** 				}
 847:FreeRTOS/tasks.c **** 
 848:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 705              		.loc 1 848 0
 706 00b6 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 707 00b8 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 708              	.L40:
 709              	.LBE7:
 849:FreeRTOS/tasks.c **** 			}
 850:FreeRTOS/tasks.c **** 			else
 851:FreeRTOS/tasks.c **** 			{
 852:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 853:FreeRTOS/tasks.c **** 			}
 854:FreeRTOS/tasks.c **** 		}
 855:FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 710              		.loc 1 855 0
 711 00bc FFF7FEFF 		bl	xTaskResumeAll	@
 712 00c0 B860     		str	r0, [r7, #8]	@, xAlreadyYielded
 856:FreeRTOS/tasks.c **** 
 857:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 29


 858:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 859:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 713              		.loc 1 859 0
 714 00c2 BB68     		ldr	r3, [r7, #8]	@ tmp153, xAlreadyYielded
 715 00c4 002B     		cmp	r3, #0	@ tmp153,
 716 00c6 01D1     		bne	.L43	@,
 860:FreeRTOS/tasks.c **** 		{
 861:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 717              		.loc 1 861 0
 718 00c8 FFF7FEFF 		bl	vPortYield	@
 719              	.L43:
 862:FreeRTOS/tasks.c **** 		}
 863:FreeRTOS/tasks.c **** 		else
 864:FreeRTOS/tasks.c **** 		{
 865:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 866:FreeRTOS/tasks.c **** 		}
 867:FreeRTOS/tasks.c **** 	}
 720              		.loc 1 867 0
 721 00cc 00BF     		nop
 722 00ce 1837     		adds	r7, r7, #24	@,,
 723              		.cfi_def_cfa_offset 8
 724 00d0 BD46     		mov	sp, r7	@,
 725              		.cfi_def_cfa_register 13
 726              		@ sp needed	@
 727 00d2 80BD     		pop	{r7, pc}	@
 728              	.L45:
 729              		.align	2
 730              	.L44:
 731 00d4 00000000 		.word	uxSchedulerSuspended
 732 00d8 00000000 		.word	xTickCount
 733 00dc 00000000 		.word	pxCurrentTCB
 734 00e0 00000000 		.word	uxTopReadyPriority
 735              		.cfi_endproc
 736              	.LFE3:
 737              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 738              		.section	.text.vTaskDelay,"ax",%progbits
 739              		.align	2
 740              		.global	vTaskDelay
 741              		.thumb
 742              		.thumb_func
 743              		.type	vTaskDelay, %function
 744              	vTaskDelay:
 745              	.LFB4:
 868:FreeRTOS/tasks.c **** 
 869:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 870:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 871:FreeRTOS/tasks.c **** 
 872:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 873:FreeRTOS/tasks.c **** 
 874:FreeRTOS/tasks.c **** 	void vTaskDelay( const TickT_t xTicksToDelay )
 875:FreeRTOS/tasks.c **** 	{
 746              		.loc 1 875 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 16
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750 0000 80B5     		push	{r7, lr}	@
 751              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 30


 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 84B0     		sub	sp, sp, #16	@,,
 755              		.cfi_def_cfa_offset 24
 756 0004 00AF     		add	r7, sp, #0	@,,
 757              		.cfi_def_cfa_register 7
 758 0006 7860     		str	r0, [r7, #4]	@ xTicksToDelay, xTicksToDelay
 876:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 877:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded = pdFALSE;
 759              		.loc 1 877 0
 760 0008 0023     		movs	r3, #0	@ tmp121,
 761 000a FB60     		str	r3, [r7, #12]	@ tmp121, xAlreadyYielded
 878:FreeRTOS/tasks.c **** 
 879:FreeRTOS/tasks.c **** 
 880:FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 881:FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickT_t ) 0U )
 762              		.loc 1 881 0
 763 000c 7B68     		ldr	r3, [r7, #4]	@ tmp122, xTicksToDelay
 764 000e 002B     		cmp	r3, #0	@ tmp122,
 765 0010 28D0     		beq	.L47	@,
 882:FreeRTOS/tasks.c **** 		{
 883:FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 766              		.loc 1 883 0
 767 0012 194B     		ldr	r3, .L53	@ tmp123,
 768 0014 1B68     		ldr	r3, [r3]	@ D.6574, uxSchedulerSuspended
 769 0016 002B     		cmp	r3, #0	@ D.6574,
 770 0018 02D0     		beq	.L48	@,
 771              		.loc 1 883 0 is_stmt 0 discriminator 1
 772 001a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 773              	.L49:
 774 001e FEE7     		b	.L49	@
 775              	.L48:
 884:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 776              		.loc 1 884 0 is_stmt 1
 777 0020 FFF7FEFF 		bl	vTaskSuspendAll	@
 885:FreeRTOS/tasks.c **** 			{
 886:FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 887:FreeRTOS/tasks.c **** 
 888:FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 889:FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 890:FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 891:FreeRTOS/tasks.c **** 				is resumed.
 892:FreeRTOS/tasks.c **** 
 893:FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 894:FreeRTOS/tasks.c **** 				executing task. */
 895:FreeRTOS/tasks.c **** 
 896:FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 897:FreeRTOS/tasks.c **** 				not a problem. */
 898:FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 778              		.loc 1 898 0
 779 0024 154B     		ldr	r3, .L53+4	@ tmp124,
 780 0026 1A68     		ldr	r2, [r3]	@ D.6574, xTickCount
 781 0028 7B68     		ldr	r3, [r7, #4]	@ tmp126, xTicksToDelay
 782 002a 1344     		add	r3, r3, r2	@ tmp125, D.6574
 783 002c BB60     		str	r3, [r7, #8]	@ tmp125, xTimeToWake
 899:FreeRTOS/tasks.c **** 
 900:FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 31


 901:FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 902:FreeRTOS/tasks.c **** 				both lists. */
 903:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 784              		.loc 1 903 0
 785 002e 144B     		ldr	r3, .L53+8	@ tmp127,
 786 0030 1B68     		ldr	r3, [r3]	@ D.6575, pxCurrentTCB
 787 0032 0433     		adds	r3, r3, #4	@ D.6576, D.6575,
 788 0034 1846     		mov	r0, r3	@, D.6576
 789 0036 FFF7FEFF 		bl	uxListRemove	@
 790 003a 0346     		mov	r3, r0	@ D.6574,
 791 003c 002B     		cmp	r3, #0	@ D.6574,
 792 003e 0BD1     		bne	.L50	@,
 904:FreeRTOS/tasks.c **** 				{
 905:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 906:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 907:FreeRTOS/tasks.c **** 					directly. */
 908:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 793              		.loc 1 908 0
 794 0040 0F4B     		ldr	r3, .L53+8	@ tmp128,
 795 0042 1B68     		ldr	r3, [r3]	@ D.6575, pxCurrentTCB
 796 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6574, _16->uxPriority
 797 0046 0122     		movs	r2, #1	@ tmp129,
 798 0048 02FA03F3 		lsl	r3, r2, r3	@ D.6574, tmp129, D.6574
 799 004c DA43     		mvns	r2, r3	@ D.6574, D.6574
 800 004e 0D4B     		ldr	r3, .L53+12	@ tmp130,
 801 0050 1B68     		ldr	r3, [r3]	@ D.6574, uxTopReadyPriority
 802 0052 1340     		ands	r3, r3, r2	@, D.6574, D.6574, D.6574
 803 0054 0B4A     		ldr	r2, .L53+12	@ tmp131,
 804 0056 1360     		str	r3, [r2]	@ D.6574, uxTopReadyPriority
 805              	.L50:
 909:FreeRTOS/tasks.c **** 				}
 910:FreeRTOS/tasks.c **** 				else
 911:FreeRTOS/tasks.c **** 				{
 912:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 913:FreeRTOS/tasks.c **** 				}
 914:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 806              		.loc 1 914 0
 807 0058 B868     		ldr	r0, [r7, #8]	@, xTimeToWake
 808 005a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 915:FreeRTOS/tasks.c **** 			}
 916:FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 809              		.loc 1 916 0
 810 005e FFF7FEFF 		bl	xTaskResumeAll	@
 811 0062 F860     		str	r0, [r7, #12]	@, xAlreadyYielded
 812              	.L47:
 917:FreeRTOS/tasks.c **** 		}
 918:FreeRTOS/tasks.c **** 		else
 919:FreeRTOS/tasks.c **** 		{
 920:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 921:FreeRTOS/tasks.c **** 		}
 922:FreeRTOS/tasks.c **** 
 923:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 924:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 925:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 813              		.loc 1 925 0
 814 0064 FB68     		ldr	r3, [r7, #12]	@ tmp132, xAlreadyYielded
 815 0066 002B     		cmp	r3, #0	@ tmp132,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 32


 816 0068 01D1     		bne	.L52	@,
 926:FreeRTOS/tasks.c **** 		{
 927:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 817              		.loc 1 927 0
 818 006a FFF7FEFF 		bl	vPortYield	@
 819              	.L52:
 928:FreeRTOS/tasks.c **** 		}
 929:FreeRTOS/tasks.c **** 		else
 930:FreeRTOS/tasks.c **** 		{
 931:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 932:FreeRTOS/tasks.c **** 		}
 933:FreeRTOS/tasks.c **** 	}
 820              		.loc 1 933 0
 821 006e 00BF     		nop
 822 0070 1037     		adds	r7, r7, #16	@,,
 823              		.cfi_def_cfa_offset 8
 824 0072 BD46     		mov	sp, r7	@,
 825              		.cfi_def_cfa_register 13
 826              		@ sp needed	@
 827 0074 80BD     		pop	{r7, pc}	@
 828              	.L54:
 829 0076 00BF     		.align	2
 830              	.L53:
 831 0078 00000000 		.word	uxSchedulerSuspended
 832 007c 00000000 		.word	xTickCount
 833 0080 00000000 		.word	pxCurrentTCB
 834 0084 00000000 		.word	uxTopReadyPriority
 835              		.cfi_endproc
 836              	.LFE4:
 837              		.size	vTaskDelay, .-vTaskDelay
 838              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 839              		.align	2
 840              		.global	uxTaskPriorityGet
 841              		.thumb
 842              		.thumb_func
 843              		.type	uxTaskPriorityGet, %function
 844              	uxTaskPriorityGet:
 845              	.LFB5:
 934:FreeRTOS/tasks.c **** 
 935:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 936:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 937:FreeRTOS/tasks.c **** 
 938:FreeRTOS/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 939:FreeRTOS/tasks.c **** 
 940:FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 941:FreeRTOS/tasks.c **** 	{
 942:FreeRTOS/tasks.c **** 	eTaskState eReturn;
 943:FreeRTOS/tasks.c **** 	List_t *pxStateList;
 944:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 945:FreeRTOS/tasks.c **** 
 946:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 947:FreeRTOS/tasks.c **** 
 948:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 949:FreeRTOS/tasks.c **** 		{
 950:FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
 951:FreeRTOS/tasks.c **** 			eReturn = eRunning;
 952:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 33


 953:FreeRTOS/tasks.c **** 		else
 954:FreeRTOS/tasks.c **** 		{
 955:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 956:FreeRTOS/tasks.c **** 			{
 957:FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 958:FreeRTOS/tasks.c **** 			}
 959:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 960:FreeRTOS/tasks.c **** 
 961:FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 962:FreeRTOS/tasks.c **** 			{
 963:FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 964:FreeRTOS/tasks.c **** 				lists. */
 965:FreeRTOS/tasks.c **** 				eReturn = eBlocked;
 966:FreeRTOS/tasks.c **** 			}
 967:FreeRTOS/tasks.c **** 
 968:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 969:FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 970:FreeRTOS/tasks.c **** 				{
 971:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
 972:FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
 973:FreeRTOS/tasks.c **** 					indefinitely? */
 974:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 975:FreeRTOS/tasks.c **** 					{
 976:FreeRTOS/tasks.c **** 						eReturn = eSuspended;
 977:FreeRTOS/tasks.c **** 					}
 978:FreeRTOS/tasks.c **** 					else
 979:FreeRTOS/tasks.c **** 					{
 980:FreeRTOS/tasks.c **** 						eReturn = eBlocked;
 981:FreeRTOS/tasks.c **** 					}
 982:FreeRTOS/tasks.c **** 				}
 983:FreeRTOS/tasks.c **** 			#endif
 984:FreeRTOS/tasks.c **** 
 985:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 986:FreeRTOS/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 987:FreeRTOS/tasks.c **** 				{
 988:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
 989:FreeRTOS/tasks.c **** 					tasks list. */
 990:FreeRTOS/tasks.c **** 					eReturn = eDeleted;
 991:FreeRTOS/tasks.c **** 				}
 992:FreeRTOS/tasks.c **** 			#endif
 993:FreeRTOS/tasks.c **** 
 994:FreeRTOS/tasks.c **** 			else
 995:FreeRTOS/tasks.c **** 			{
 996:FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
 997:FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
 998:FreeRTOS/tasks.c **** 				eReturn = eReady;
 999:FreeRTOS/tasks.c **** 			}
1000:FreeRTOS/tasks.c **** 		}
1001:FreeRTOS/tasks.c **** 
1002:FreeRTOS/tasks.c **** 		return eReturn;
1003:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1004:FreeRTOS/tasks.c **** 
1005:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1006:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1007:FreeRTOS/tasks.c **** 
1008:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1009:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 34


1010:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskPriorityGet( TaskHandle_t xTask )
1011:FreeRTOS/tasks.c **** 	{
 846              		.loc 1 1011 0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 16
 849              		@ frame_needed = 1, uses_anonymous_args = 0
 850 0000 80B5     		push	{r7, lr}	@
 851              		.cfi_def_cfa_offset 8
 852              		.cfi_offset 7, -8
 853              		.cfi_offset 14, -4
 854 0002 84B0     		sub	sp, sp, #16	@,,
 855              		.cfi_def_cfa_offset 24
 856 0004 00AF     		add	r7, sp, #0	@,,
 857              		.cfi_def_cfa_register 7
 858 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1012:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1013:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
1014:FreeRTOS/tasks.c **** 
1015:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 859              		.loc 1 1015 0
 860 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1016:FreeRTOS/tasks.c **** 		{
1017:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are changing the
1018:FreeRTOS/tasks.c **** 			priority of the calling function. */
1019:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 861              		.loc 1 1019 0
 862 000c 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 863 000e 002B     		cmp	r3, #0	@ tmp113,
 864 0010 02D1     		bne	.L56	@,
 865              		.loc 1 1019 0 is_stmt 0 discriminator 1
 866 0012 074B     		ldr	r3, .L59	@ tmp114,
 867 0014 1B68     		ldr	r3, [r3]	@ D.6577, pxCurrentTCB
 868 0016 00E0     		b	.L57	@
 869              	.L56:
 870              		.loc 1 1019 0 discriminator 2
 871 0018 7B68     		ldr	r3, [r7, #4]	@ D.6577, xTask
 872              	.L57:
 873              		.loc 1 1019 0 discriminator 4
 874 001a FB60     		str	r3, [r7, #12]	@ D.6577, pxTCB
1020:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 875              		.loc 1 1020 0 is_stmt 1 discriminator 4
 876 001c FB68     		ldr	r3, [r7, #12]	@ tmp115, pxTCB
 877 001e DB6A     		ldr	r3, [r3, #44]	@ tmp116, pxTCB_7->uxPriority
 878 0020 BB60     		str	r3, [r7, #8]	@ tmp116, uxReturn
1021:FreeRTOS/tasks.c **** 		}
1022:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 879              		.loc 1 1022 0 discriminator 4
 880 0022 FFF7FEFF 		bl	vPortExitCritical	@
1023:FreeRTOS/tasks.c **** 
1024:FreeRTOS/tasks.c **** 		return uxReturn;
 881              		.loc 1 1024 0 discriminator 4
 882 0026 BB68     		ldr	r3, [r7, #8]	@ D.6578, uxReturn
1025:FreeRTOS/tasks.c **** 	}
 883              		.loc 1 1025 0 discriminator 4
 884 0028 1846     		mov	r0, r3	@, <retval>
 885 002a 1037     		adds	r7, r7, #16	@,,
 886              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 35


 887 002c BD46     		mov	sp, r7	@,
 888              		.cfi_def_cfa_register 13
 889              		@ sp needed	@
 890 002e 80BD     		pop	{r7, pc}	@
 891              	.L60:
 892              		.align	2
 893              	.L59:
 894 0030 00000000 		.word	pxCurrentTCB
 895              		.cfi_endproc
 896              	.LFE5:
 897              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 898              		.section	.text.vTaskPrioritySet,"ax",%progbits
 899              		.align	2
 900              		.global	vTaskPrioritySet
 901              		.thumb
 902              		.thumb_func
 903              		.type	vTaskPrioritySet, %function
 904              	vTaskPrioritySet:
 905              	.LFB6:
1026:FreeRTOS/tasks.c **** 
1027:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1028:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1029:FreeRTOS/tasks.c **** 
1030:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1031:FreeRTOS/tasks.c **** 
1032:FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseT_t uxNewPriority )
1033:FreeRTOS/tasks.c **** 	{
 906              		.loc 1 1033 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 24
 909              		@ frame_needed = 1, uses_anonymous_args = 0
 910 0000 80B5     		push	{r7, lr}	@
 911              		.cfi_def_cfa_offset 8
 912              		.cfi_offset 7, -8
 913              		.cfi_offset 14, -4
 914 0002 86B0     		sub	sp, sp, #24	@,,
 915              		.cfi_def_cfa_offset 32
 916 0004 00AF     		add	r7, sp, #0	@,,
 917              		.cfi_def_cfa_register 7
 918 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 919 0008 3960     		str	r1, [r7]	@ uxNewPriority, uxNewPriority
1034:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1035:FreeRTOS/tasks.c **** 	UBaseT_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1036:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 920              		.loc 1 1036 0
 921 000a 0023     		movs	r3, #0	@ tmp136,
 922 000c 7B61     		str	r3, [r7, #20]	@ tmp136, xYieldRequired
1037:FreeRTOS/tasks.c **** 
1038:FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 923              		.loc 1 1038 0
 924 000e 3B68     		ldr	r3, [r7]	@ tmp137, uxNewPriority
 925 0010 072B     		cmp	r3, #7	@ tmp137,
 926 0012 02D9     		bls	.L62	@,
 927              		.loc 1 1038 0 is_stmt 0 discriminator 1
 928 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 929              	.L63:
 930 0018 FEE7     		b	.L63	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 36


 931              	.L62:
1039:FreeRTOS/tasks.c **** 
1040:FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1041:FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 932              		.loc 1 1041 0 is_stmt 1
 933 001a 3B68     		ldr	r3, [r7]	@ tmp138, uxNewPriority
 934 001c 072B     		cmp	r3, #7	@ tmp138,
 935 001e 01D9     		bls	.L64	@,
1042:FreeRTOS/tasks.c **** 		{
1043:FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 936              		.loc 1 1043 0
 937 0020 0723     		movs	r3, #7	@ tmp139,
 938 0022 3B60     		str	r3, [r7]	@ tmp139, uxNewPriority
 939              	.L64:
1044:FreeRTOS/tasks.c **** 		}
1045:FreeRTOS/tasks.c **** 		else
1046:FreeRTOS/tasks.c **** 		{
1047:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1048:FreeRTOS/tasks.c **** 		}
1049:FreeRTOS/tasks.c **** 
1050:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 940              		.loc 1 1050 0
 941 0024 FFF7FEFF 		bl	vPortEnterCritical	@
1051:FreeRTOS/tasks.c **** 		{
1052:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1053:FreeRTOS/tasks.c **** 			task that is being changed. */
1054:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 942              		.loc 1 1054 0
 943 0028 7B68     		ldr	r3, [r7, #4]	@ tmp140, xTask
 944 002a 002B     		cmp	r3, #0	@ tmp140,
 945 002c 02D1     		bne	.L65	@,
 946              		.loc 1 1054 0 is_stmt 0 discriminator 1
 947 002e 404B     		ldr	r3, .L76	@ tmp141,
 948 0030 1B68     		ldr	r3, [r3]	@ D.6579, pxCurrentTCB
 949 0032 00E0     		b	.L66	@
 950              	.L65:
 951              		.loc 1 1054 0 discriminator 2
 952 0034 7B68     		ldr	r3, [r7, #4]	@ D.6579, xTask
 953              	.L66:
 954              		.loc 1 1054 0 discriminator 4
 955 0036 3B61     		str	r3, [r7, #16]	@ D.6579, pxTCB
1055:FreeRTOS/tasks.c **** 
1056:FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1057:FreeRTOS/tasks.c **** 
1058:FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1059:FreeRTOS/tasks.c **** 			{
1060:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 956              		.loc 1 1060 0 is_stmt 1 discriminator 4
 957 0038 3B69     		ldr	r3, [r7, #16]	@ tmp142, pxTCB
 958 003a 9B6C     		ldr	r3, [r3, #72]	@ tmp143, pxTCB_18->uxBasePriority
 959 003c FB60     		str	r3, [r7, #12]	@ tmp143, uxCurrentBasePriority
1061:FreeRTOS/tasks.c **** 			}
1062:FreeRTOS/tasks.c **** 			#else
1063:FreeRTOS/tasks.c **** 			{
1064:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1065:FreeRTOS/tasks.c **** 			}
1066:FreeRTOS/tasks.c **** 			#endif
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 37


1067:FreeRTOS/tasks.c **** 
1068:FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 960              		.loc 1 1068 0 discriminator 4
 961 003e FA68     		ldr	r2, [r7, #12]	@ tmp144, uxCurrentBasePriority
 962 0040 3B68     		ldr	r3, [r7]	@ tmp145, uxNewPriority
 963 0042 9A42     		cmp	r2, r3	@ tmp144, tmp145
 964 0044 6ED0     		beq	.L67	@,
1069:FreeRTOS/tasks.c **** 			{
1070:FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1071:FreeRTOS/tasks.c **** 				priority than the calling task. */
1072:FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 965              		.loc 1 1072 0
 966 0046 3A68     		ldr	r2, [r7]	@ tmp146, uxNewPriority
 967 0048 FB68     		ldr	r3, [r7, #12]	@ tmp147, uxCurrentBasePriority
 968 004a 9A42     		cmp	r2, r3	@ tmp146, tmp147
 969 004c 0DD9     		bls	.L68	@,
1073:FreeRTOS/tasks.c **** 				{
1074:FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 970              		.loc 1 1074 0
 971 004e 384B     		ldr	r3, .L76	@ tmp148,
 972 0050 1B68     		ldr	r3, [r3]	@ D.6579, pxCurrentTCB
 973 0052 3A69     		ldr	r2, [r7, #16]	@ tmp149, pxTCB
 974 0054 9A42     		cmp	r2, r3	@ tmp149, D.6579
 975 0056 0FD0     		beq	.L69	@,
1075:FreeRTOS/tasks.c **** 					{
1076:FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1077:FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1078:FreeRTOS/tasks.c **** 						raised above that of the running task? */
1079:FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 976              		.loc 1 1079 0
 977 0058 354B     		ldr	r3, .L76	@ tmp150,
 978 005a 1B68     		ldr	r3, [r3]	@ D.6579, pxCurrentTCB
 979 005c DA6A     		ldr	r2, [r3, #44]	@ D.6581, _21->uxPriority
 980 005e 3B68     		ldr	r3, [r7]	@ tmp151, uxNewPriority
 981 0060 9A42     		cmp	r2, r3	@ D.6581, tmp151
 982 0062 09D8     		bhi	.L69	@,
1080:FreeRTOS/tasks.c **** 						{
1081:FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 983              		.loc 1 1081 0
 984 0064 0123     		movs	r3, #1	@ tmp152,
 985 0066 7B61     		str	r3, [r7, #20]	@ tmp152, xYieldRequired
 986 0068 06E0     		b	.L69	@
 987              	.L68:
1082:FreeRTOS/tasks.c **** 						}
1083:FreeRTOS/tasks.c **** 						else
1084:FreeRTOS/tasks.c **** 						{
1085:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1086:FreeRTOS/tasks.c **** 						}
1087:FreeRTOS/tasks.c **** 					}
1088:FreeRTOS/tasks.c **** 					else
1089:FreeRTOS/tasks.c **** 					{
1090:FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1091:FreeRTOS/tasks.c **** 						but the running task must already be the highest
1092:FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1093:FreeRTOS/tasks.c **** 					}
1094:FreeRTOS/tasks.c **** 				}
1095:FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 38


 988              		.loc 1 1095 0
 989 006a 314B     		ldr	r3, .L76	@ tmp153,
 990 006c 1B68     		ldr	r3, [r3]	@ D.6579, pxCurrentTCB
 991 006e 3A69     		ldr	r2, [r7, #16]	@ tmp154, pxTCB
 992 0070 9A42     		cmp	r2, r3	@ tmp154, D.6579
 993 0072 01D1     		bne	.L69	@,
1096:FreeRTOS/tasks.c **** 				{
1097:FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1098:FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1099:FreeRTOS/tasks.c **** 					is ready to execute. */
1100:FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 994              		.loc 1 1100 0
 995 0074 0123     		movs	r3, #1	@ tmp155,
 996 0076 7B61     		str	r3, [r7, #20]	@ tmp155, xYieldRequired
 997              	.L69:
1101:FreeRTOS/tasks.c **** 				}
1102:FreeRTOS/tasks.c **** 				else
1103:FreeRTOS/tasks.c **** 				{
1104:FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1105:FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1106:FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1107:FreeRTOS/tasks.c **** 				}
1108:FreeRTOS/tasks.c **** 
1109:FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1110:FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1111:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1112:FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 998              		.loc 1 1112 0
 999 0078 3B69     		ldr	r3, [r7, #16]	@ tmp156, pxTCB
 1000 007a DB6A     		ldr	r3, [r3, #44]	@ tmp157, pxTCB_18->uxPriority
 1001 007c BB60     		str	r3, [r7, #8]	@ tmp157, uxPriorityUsedOnEntry
1113:FreeRTOS/tasks.c **** 
1114:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1115:FreeRTOS/tasks.c **** 				{
1116:FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1117:FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1118:FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1002              		.loc 1 1118 0
 1003 007e 3B69     		ldr	r3, [r7, #16]	@ tmp158, pxTCB
 1004 0080 9A6C     		ldr	r2, [r3, #72]	@ D.6581, pxTCB_18->uxBasePriority
 1005 0082 3B69     		ldr	r3, [r7, #16]	@ tmp159, pxTCB
 1006 0084 DB6A     		ldr	r3, [r3, #44]	@ D.6581, pxTCB_18->uxPriority
 1007 0086 9A42     		cmp	r2, r3	@ D.6581, D.6581
 1008 0088 02D1     		bne	.L70	@,
1119:FreeRTOS/tasks.c **** 					{
1120:FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1009              		.loc 1 1120 0
 1010 008a 3B69     		ldr	r3, [r7, #16]	@ tmp160, pxTCB
 1011 008c 3A68     		ldr	r2, [r7]	@ tmp161, uxNewPriority
 1012 008e DA62     		str	r2, [r3, #44]	@ tmp161, pxTCB_18->uxPriority
 1013              	.L70:
1121:FreeRTOS/tasks.c **** 					}
1122:FreeRTOS/tasks.c **** 					else
1123:FreeRTOS/tasks.c **** 					{
1124:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1125:FreeRTOS/tasks.c **** 					}
1126:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 39


1127:FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1128:FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1014              		.loc 1 1128 0
 1015 0090 3B69     		ldr	r3, [r7, #16]	@ tmp162, pxTCB
 1016 0092 3A68     		ldr	r2, [r7]	@ tmp163, uxNewPriority
 1017 0094 9A64     		str	r2, [r3, #72]	@ tmp163, pxTCB_18->uxBasePriority
1129:FreeRTOS/tasks.c **** 				}
1130:FreeRTOS/tasks.c **** 				#else
1131:FreeRTOS/tasks.c **** 				{
1132:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1133:FreeRTOS/tasks.c **** 				}
1134:FreeRTOS/tasks.c **** 				#endif
1135:FreeRTOS/tasks.c **** 
1136:FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1137:FreeRTOS/tasks.c **** 				being used for anything else. */
1138:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1018              		.loc 1 1138 0
 1019 0096 3B69     		ldr	r3, [r7, #16]	@ tmp164, pxTCB
 1020 0098 9B69     		ldr	r3, [r3, #24]	@ D.6581, pxTCB_18->xEventListItem.xItemValue
 1021 009a 002B     		cmp	r3, #0	@ D.6582,
 1022 009c 04DB     		blt	.L71	@,
1139:FreeRTOS/tasks.c **** 				{
1140:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - ( Ti
 1023              		.loc 1 1140 0
 1024 009e 3B68     		ldr	r3, [r7]	@ tmp165, uxNewPriority
 1025 00a0 C3F10802 		rsb	r2, r3, #8	@ D.6581, tmp165,
 1026 00a4 3B69     		ldr	r3, [r7, #16]	@ tmp166, pxTCB
 1027 00a6 9A61     		str	r2, [r3, #24]	@ D.6581, pxTCB_18->xEventListItem.xItemValue
 1028              	.L71:
1141:FreeRTOS/tasks.c **** 				}
1142:FreeRTOS/tasks.c **** 				else
1143:FreeRTOS/tasks.c **** 				{
1144:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1145:FreeRTOS/tasks.c **** 				}
1146:FreeRTOS/tasks.c **** 
1147:FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1148:FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1149:FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1150:FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1151:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 1029              		.loc 1 1151 0
 1030 00a8 3B69     		ldr	r3, [r7, #16]	@ tmp167, pxTCB
 1031 00aa 5969     		ldr	r1, [r3, #20]	@ D.6583, pxTCB_18->xGenericListItem.pvContainer
 1032 00ac BA68     		ldr	r2, [r7, #8]	@ tmp168, uxPriorityUsedOnEntry
 1033 00ae 1346     		mov	r3, r2	@ tmp169, tmp168
 1034 00b0 9B00     		lsls	r3, r3, #2	@ tmp169, tmp169,
 1035 00b2 1344     		add	r3, r3, r2	@ tmp169, tmp168
 1036 00b4 9B00     		lsls	r3, r3, #2	@ tmp170, tmp169,
 1037 00b6 1F4A     		ldr	r2, .L76+4	@ tmp171,
 1038 00b8 1344     		add	r3, r3, r2	@ D.6584, tmp171
 1039 00ba 9942     		cmp	r1, r3	@ D.6583, D.6584
 1040 00bc 01D1     		bne	.L72	@,
 1041              		.loc 1 1151 0 is_stmt 0 discriminator 1
 1042 00be 0123     		movs	r3, #1	@ D.6580,
 1043 00c0 00E0     		b	.L73	@
 1044              	.L72:
 1045              		.loc 1 1151 0 discriminator 2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 40


 1046 00c2 0023     		movs	r3, #0	@ D.6580,
 1047              	.L73:
 1048              		.loc 1 1151 0 discriminator 4
 1049 00c4 002B     		cmp	r3, #0	@ D.6580,
 1050 00c6 28D0     		beq	.L74	@,
1152:FreeRTOS/tasks.c **** 				{
1153:FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1154:FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1155:FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1156:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1051              		.loc 1 1156 0 is_stmt 1
 1052 00c8 3B69     		ldr	r3, [r7, #16]	@ tmp172, pxTCB
 1053 00ca 0433     		adds	r3, r3, #4	@ D.6585, tmp172,
 1054 00cc 1846     		mov	r0, r3	@, D.6585
 1055 00ce FFF7FEFF 		bl	uxListRemove	@
 1056 00d2 0346     		mov	r3, r0	@ D.6581,
 1057 00d4 002B     		cmp	r3, #0	@ D.6581,
 1058 00d6 09D1     		bne	.L75	@,
1157:FreeRTOS/tasks.c **** 					{
1158:FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1159:FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1160:FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1161:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1059              		.loc 1 1161 0
 1060 00d8 0122     		movs	r2, #1	@ tmp173,
 1061 00da BB68     		ldr	r3, [r7, #8]	@ tmp174, uxPriorityUsedOnEntry
 1062 00dc 02FA03F3 		lsl	r3, r2, r3	@ D.6581, tmp173, tmp174
 1063 00e0 DA43     		mvns	r2, r3	@ D.6581, D.6581
 1064 00e2 154B     		ldr	r3, .L76+8	@ tmp175,
 1065 00e4 1B68     		ldr	r3, [r3]	@ D.6581, uxTopReadyPriority
 1066 00e6 1340     		ands	r3, r3, r2	@, D.6581, D.6581, D.6581
 1067 00e8 134A     		ldr	r2, .L76+8	@ tmp176,
 1068 00ea 1360     		str	r3, [r2]	@ D.6581, uxTopReadyPriority
 1069              	.L75:
1162:FreeRTOS/tasks.c **** 					}
1163:FreeRTOS/tasks.c **** 					else
1164:FreeRTOS/tasks.c **** 					{
1165:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1166:FreeRTOS/tasks.c **** 					}
1167:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1070              		.loc 1 1167 0
 1071 00ec 3B69     		ldr	r3, [r7, #16]	@ tmp177, pxTCB
 1072 00ee DB6A     		ldr	r3, [r3, #44]	@ D.6581, pxTCB_18->uxPriority
 1073 00f0 0122     		movs	r2, #1	@ tmp178,
 1074 00f2 9A40     		lsls	r2, r2, r3	@ D.6581, tmp178, D.6581
 1075 00f4 104B     		ldr	r3, .L76+8	@ tmp179,
 1076 00f6 1B68     		ldr	r3, [r3]	@ D.6581, uxTopReadyPriority
 1077 00f8 1343     		orrs	r3, r3, r2	@, D.6581, D.6581, D.6581
 1078 00fa 0F4A     		ldr	r2, .L76+8	@ tmp180,
 1079 00fc 1360     		str	r3, [r2]	@ D.6581, uxTopReadyPriority
 1080 00fe 3B69     		ldr	r3, [r7, #16]	@ tmp181, pxTCB
 1081 0100 DA6A     		ldr	r2, [r3, #44]	@ D.6581, pxTCB_18->uxPriority
 1082 0102 1346     		mov	r3, r2	@ tmp182, D.6581
 1083 0104 9B00     		lsls	r3, r3, #2	@ tmp182, tmp182,
 1084 0106 1344     		add	r3, r3, r2	@ tmp182, D.6581
 1085 0108 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 1086 010a 0A4A     		ldr	r2, .L76+4	@ tmp184,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 41


 1087 010c 1A44     		add	r2, r2, r3	@ D.6584, tmp182
 1088 010e 3B69     		ldr	r3, [r7, #16]	@ tmp185, pxTCB
 1089 0110 0433     		adds	r3, r3, #4	@ D.6585, tmp185,
 1090 0112 1946     		mov	r1, r3	@, D.6585
 1091 0114 1046     		mov	r0, r2	@, D.6584
 1092 0116 FFF7FEFF 		bl	vListInsertEnd	@
 1093              	.L74:
1168:FreeRTOS/tasks.c **** 				}
1169:FreeRTOS/tasks.c **** 				else
1170:FreeRTOS/tasks.c **** 				{
1171:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:FreeRTOS/tasks.c **** 				}
1173:FreeRTOS/tasks.c **** 
1174:FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
 1094              		.loc 1 1174 0
 1095 011a 7B69     		ldr	r3, [r7, #20]	@ tmp186, xYieldRequired
 1096 011c 012B     		cmp	r3, #1	@ tmp186,
 1097 011e 01D1     		bne	.L67	@,
1175:FreeRTOS/tasks.c **** 				{
1176:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1098              		.loc 1 1176 0
 1099 0120 FFF7FEFF 		bl	vPortYield	@
 1100              	.L67:
1177:FreeRTOS/tasks.c **** 				}
1178:FreeRTOS/tasks.c **** 				else
1179:FreeRTOS/tasks.c **** 				{
1180:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1181:FreeRTOS/tasks.c **** 				}
1182:FreeRTOS/tasks.c **** 
1183:FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1184:FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1185:FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1186:FreeRTOS/tasks.c **** 			}
1187:FreeRTOS/tasks.c **** 		}
1188:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1101              		.loc 1 1188 0
 1102 0124 FFF7FEFF 		bl	vPortExitCritical	@
1189:FreeRTOS/tasks.c **** 	}
 1103              		.loc 1 1189 0
 1104 0128 00BF     		nop
 1105 012a 1837     		adds	r7, r7, #24	@,,
 1106              		.cfi_def_cfa_offset 8
 1107 012c BD46     		mov	sp, r7	@,
 1108              		.cfi_def_cfa_register 13
 1109              		@ sp needed	@
 1110 012e 80BD     		pop	{r7, pc}	@
 1111              	.L77:
 1112              		.align	2
 1113              	.L76:
 1114 0130 00000000 		.word	pxCurrentTCB
 1115 0134 00000000 		.word	pxReadyTasksLists
 1116 0138 00000000 		.word	uxTopReadyPriority
 1117              		.cfi_endproc
 1118              	.LFE6:
 1119              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1120              		.section	.text.vTaskSuspend,"ax",%progbits
 1121              		.align	2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 42


 1122              		.global	vTaskSuspend
 1123              		.thumb
 1124              		.thumb_func
 1125              		.type	vTaskSuspend, %function
 1126              	vTaskSuspend:
 1127              	.LFB7:
1190:FreeRTOS/tasks.c **** 
1191:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1192:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1193:FreeRTOS/tasks.c **** 
1194:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1195:FreeRTOS/tasks.c **** 
1196:FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1197:FreeRTOS/tasks.c **** 	{
 1128              		.loc 1 1197 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 16
 1131              		@ frame_needed = 1, uses_anonymous_args = 0
 1132 0000 80B5     		push	{r7, lr}	@
 1133              		.cfi_def_cfa_offset 8
 1134              		.cfi_offset 7, -8
 1135              		.cfi_offset 14, -4
 1136 0002 84B0     		sub	sp, sp, #16	@,,
 1137              		.cfi_def_cfa_offset 24
 1138 0004 00AF     		add	r7, sp, #0	@,,
 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]	@ xTaskToSuspend, xTaskToSuspend
1198:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1199:FreeRTOS/tasks.c **** 
1200:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 1141              		.loc 1 1200 0
 1142 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1201:FreeRTOS/tasks.c **** 		{
1202:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1203:FreeRTOS/tasks.c **** 			being suspended. */
1204:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1143              		.loc 1 1204 0
 1144 000c 7B68     		ldr	r3, [r7, #4]	@ tmp129, xTaskToSuspend
 1145 000e 002B     		cmp	r3, #0	@ tmp129,
 1146 0010 02D1     		bne	.L79	@,
 1147              		.loc 1 1204 0 is_stmt 0 discriminator 1
 1148 0012 314B     		ldr	r3, .L92	@ tmp130,
 1149 0014 1B68     		ldr	r3, [r3]	@ D.6586, pxCurrentTCB
 1150 0016 00E0     		b	.L80	@
 1151              	.L79:
 1152              		.loc 1 1204 0 discriminator 2
 1153 0018 7B68     		ldr	r3, [r7, #4]	@ D.6586, xTaskToSuspend
 1154              	.L80:
 1155              		.loc 1 1204 0 discriminator 4
 1156 001a FB60     		str	r3, [r7, #12]	@ D.6586, pxTCB
1205:FreeRTOS/tasks.c **** 
1206:FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1207:FreeRTOS/tasks.c **** 
1208:FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1209:FreeRTOS/tasks.c **** 			suspended list. */
1210:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1157              		.loc 1 1210 0 is_stmt 1 discriminator 4
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 43


 1158 001c FB68     		ldr	r3, [r7, #12]	@ tmp131, pxTCB
 1159 001e 0433     		adds	r3, r3, #4	@ D.6587, tmp131,
 1160 0020 1846     		mov	r0, r3	@, D.6587
 1161 0022 FFF7FEFF 		bl	uxListRemove	@
 1162 0026 0346     		mov	r3, r0	@ D.6588,
 1163 0028 002B     		cmp	r3, #0	@ D.6588,
 1164 002a 15D1     		bne	.L81	@,
1211:FreeRTOS/tasks.c **** 			{
1212:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1165              		.loc 1 1212 0
 1166 002c FB68     		ldr	r3, [r7, #12]	@ tmp132, pxTCB
 1167 002e DA6A     		ldr	r2, [r3, #44]	@ D.6588, pxTCB_12->uxPriority
 1168 0030 2A49     		ldr	r1, .L92+4	@ tmp133,
 1169 0032 1346     		mov	r3, r2	@ tmp134, D.6588
 1170 0034 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 1171 0036 1344     		add	r3, r3, r2	@ tmp134, D.6588
 1172 0038 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 1173 003a 0B44     		add	r3, r3, r1	@ tmp136, tmp133
 1174 003c 1B68     		ldr	r3, [r3]	@ D.6588, pxReadyTasksLists[_16].uxNumberOfItems
 1175 003e 002B     		cmp	r3, #0	@ D.6588,
 1176 0040 0AD1     		bne	.L81	@,
 1177              		.loc 1 1212 0 is_stmt 0 discriminator 1
 1178 0042 FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 1179 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6588, pxTCB_12->uxPriority
 1180 0046 0122     		movs	r2, #1	@ tmp138,
 1181 0048 02FA03F3 		lsl	r3, r2, r3	@ D.6588, tmp138, D.6588
 1182 004c DA43     		mvns	r2, r3	@ D.6588, D.6588
 1183 004e 244B     		ldr	r3, .L92+8	@ tmp139,
 1184 0050 1B68     		ldr	r3, [r3]	@ D.6588, uxTopReadyPriority
 1185 0052 1340     		ands	r3, r3, r2	@, D.6588, D.6588, D.6588
 1186 0054 224A     		ldr	r2, .L92+8	@ tmp140,
 1187 0056 1360     		str	r3, [r2]	@ D.6588, uxTopReadyPriority
 1188              	.L81:
1213:FreeRTOS/tasks.c **** 			}
1214:FreeRTOS/tasks.c **** 			else
1215:FreeRTOS/tasks.c **** 			{
1216:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1217:FreeRTOS/tasks.c **** 			}
1218:FreeRTOS/tasks.c **** 
1219:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1220:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1189              		.loc 1 1220 0 is_stmt 1
 1190 0058 FB68     		ldr	r3, [r7, #12]	@ tmp141, pxTCB
 1191 005a 9B6A     		ldr	r3, [r3, #40]	@ D.6589, pxTCB_12->xEventListItem.pvContainer
 1192 005c 002B     		cmp	r3, #0	@ D.6589,
 1193 005e 04D0     		beq	.L83	@,
1221:FreeRTOS/tasks.c **** 			{
1222:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1194              		.loc 1 1222 0
 1195 0060 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 1196 0062 1833     		adds	r3, r3, #24	@ D.6587, tmp142,
 1197 0064 1846     		mov	r0, r3	@, D.6587
 1198 0066 FFF7FEFF 		bl	uxListRemove	@
 1199              	.L83:
1223:FreeRTOS/tasks.c **** 			}
1224:FreeRTOS/tasks.c **** 			else
1225:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 44


1226:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1227:FreeRTOS/tasks.c **** 			}
1228:FreeRTOS/tasks.c **** 
1229:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1200              		.loc 1 1229 0
 1201 006a FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 1202 006c 0433     		adds	r3, r3, #4	@ D.6587, tmp143,
 1203 006e 1946     		mov	r1, r3	@, D.6587
 1204 0070 1C48     		ldr	r0, .L92+12	@,
 1205 0072 FFF7FEFF 		bl	vListInsertEnd	@
1230:FreeRTOS/tasks.c **** 		}
1231:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1206              		.loc 1 1231 0
 1207 0076 FFF7FEFF 		bl	vPortExitCritical	@
1232:FreeRTOS/tasks.c **** 
1233:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1208              		.loc 1 1233 0
 1209 007a 174B     		ldr	r3, .L92	@ tmp144,
 1210 007c 1B68     		ldr	r3, [r3]	@ D.6586, pxCurrentTCB
 1211 007e FA68     		ldr	r2, [r7, #12]	@ tmp145, pxTCB
 1212 0080 9A42     		cmp	r2, r3	@ tmp145, D.6586
 1213 0082 1AD1     		bne	.L84	@,
1234:FreeRTOS/tasks.c **** 		{
1235:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1214              		.loc 1 1235 0
 1215 0084 184B     		ldr	r3, .L92+16	@ tmp146,
 1216 0086 1B68     		ldr	r3, [r3]	@ D.6590, xSchedulerRunning
 1217 0088 002B     		cmp	r3, #0	@ D.6590,
 1218 008a 09D0     		beq	.L85	@,
1236:FreeRTOS/tasks.c **** 			{
1237:FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1238:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1219              		.loc 1 1238 0
 1220 008c 174B     		ldr	r3, .L92+20	@ tmp147,
 1221 008e 1B68     		ldr	r3, [r3]	@ D.6588, uxSchedulerSuspended
 1222 0090 002B     		cmp	r3, #0	@ D.6588,
 1223 0092 02D0     		beq	.L86	@,
 1224              		.loc 1 1238 0 is_stmt 0 discriminator 1
 1225 0094 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1226              	.L87:
 1227 0098 FEE7     		b	.L87	@
 1228              	.L86:
1239:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1229              		.loc 1 1239 0 is_stmt 1
 1230 009a FFF7FEFF 		bl	vPortYield	@
1240:FreeRTOS/tasks.c **** 			}
1241:FreeRTOS/tasks.c **** 			else
1242:FreeRTOS/tasks.c **** 			{
1243:FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1244:FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1245:FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1246:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1247:FreeRTOS/tasks.c **** 				{
1248:FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1249:FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1250:FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1251:FreeRTOS/tasks.c **** 					is. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 45


1252:FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1253:FreeRTOS/tasks.c **** 				}
1254:FreeRTOS/tasks.c **** 				else
1255:FreeRTOS/tasks.c **** 				{
1256:FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1257:FreeRTOS/tasks.c **** 				}
1258:FreeRTOS/tasks.c **** 			}
1259:FreeRTOS/tasks.c **** 		}
1260:FreeRTOS/tasks.c **** 		else
1261:FreeRTOS/tasks.c **** 		{
1262:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1263:FreeRTOS/tasks.c **** 			{
1264:FreeRTOS/tasks.c **** 				/* A task other than the currently running task was suspended,
1265:FreeRTOS/tasks.c **** 				reset the next expected unblock time in case it referred to the
1266:FreeRTOS/tasks.c **** 				task that is now in the Suspended state. */
1267:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
1268:FreeRTOS/tasks.c **** 				{
1269:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
1270:FreeRTOS/tasks.c **** 				}
1271:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
1272:FreeRTOS/tasks.c **** 			}
1273:FreeRTOS/tasks.c **** 			else
1274:FreeRTOS/tasks.c **** 			{
1275:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1276:FreeRTOS/tasks.c **** 			}
1277:FreeRTOS/tasks.c **** 		}
1278:FreeRTOS/tasks.c **** 	}
 1231              		.loc 1 1278 0
 1232 009e 16E0     		b	.L91	@
 1233              	.L85:
1246:FreeRTOS/tasks.c **** 				{
 1234              		.loc 1 1246 0
 1235 00a0 104B     		ldr	r3, .L92+12	@ tmp148,
 1236 00a2 1A68     		ldr	r2, [r3]	@ D.6588, xSuspendedTaskList.uxNumberOfItems
 1237 00a4 124B     		ldr	r3, .L92+24	@ tmp149,
 1238 00a6 1B68     		ldr	r3, [r3]	@ D.6588, uxCurrentNumberOfTasks
 1239 00a8 9A42     		cmp	r2, r3	@ D.6588, D.6588
 1240 00aa 03D1     		bne	.L89	@,
1252:FreeRTOS/tasks.c **** 				}
 1241              		.loc 1 1252 0
 1242 00ac 0A4B     		ldr	r3, .L92	@ tmp150,
 1243 00ae 0022     		movs	r2, #0	@ tmp151,
 1244 00b0 1A60     		str	r2, [r3]	@ tmp151, pxCurrentTCB
 1245              		.loc 1 1278 0
 1246 00b2 0CE0     		b	.L91	@
 1247              	.L89:
1256:FreeRTOS/tasks.c **** 				}
 1248              		.loc 1 1256 0
 1249 00b4 FFF7FEFF 		bl	vTaskSwitchContext	@
 1250              		.loc 1 1278 0
 1251 00b8 09E0     		b	.L91	@
 1252              	.L84:
1262:FreeRTOS/tasks.c **** 			{
 1253              		.loc 1 1262 0
 1254 00ba 0B4B     		ldr	r3, .L92+16	@ tmp152,
 1255 00bc 1B68     		ldr	r3, [r3]	@ D.6590, xSchedulerRunning
 1256 00be 002B     		cmp	r3, #0	@ D.6590,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 46


 1257 00c0 05D0     		beq	.L91	@,
1267:FreeRTOS/tasks.c **** 				{
 1258              		.loc 1 1267 0
 1259 00c2 FFF7FEFF 		bl	vPortEnterCritical	@
1269:FreeRTOS/tasks.c **** 				}
 1260              		.loc 1 1269 0
 1261 00c6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
1271:FreeRTOS/tasks.c **** 			}
 1262              		.loc 1 1271 0
 1263 00ca FFF7FEFF 		bl	vPortExitCritical	@
 1264              	.L91:
 1265              		.loc 1 1278 0
 1266 00ce 00BF     		nop
 1267 00d0 1037     		adds	r7, r7, #16	@,,
 1268              		.cfi_def_cfa_offset 8
 1269 00d2 BD46     		mov	sp, r7	@,
 1270              		.cfi_def_cfa_register 13
 1271              		@ sp needed	@
 1272 00d4 80BD     		pop	{r7, pc}	@
 1273              	.L93:
 1274 00d6 00BF     		.align	2
 1275              	.L92:
 1276 00d8 00000000 		.word	pxCurrentTCB
 1277 00dc 00000000 		.word	pxReadyTasksLists
 1278 00e0 00000000 		.word	uxTopReadyPriority
 1279 00e4 00000000 		.word	xSuspendedTaskList
 1280 00e8 00000000 		.word	xSchedulerRunning
 1281 00ec 00000000 		.word	uxSchedulerSuspended
 1282 00f0 00000000 		.word	uxCurrentNumberOfTasks
 1283              		.cfi_endproc
 1284              	.LFE7:
 1285              		.size	vTaskSuspend, .-vTaskSuspend
 1286              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1287              		.align	2
 1288              		.thumb
 1289              		.thumb_func
 1290              		.type	prvTaskIsTaskSuspended, %function
 1291              	prvTaskIsTaskSuspended:
 1292              	.LFB8:
1279:FreeRTOS/tasks.c **** 
1280:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1281:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1282:FreeRTOS/tasks.c **** 
1283:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1284:FreeRTOS/tasks.c **** 
1285:FreeRTOS/tasks.c **** 	static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1286:FreeRTOS/tasks.c **** 	{
 1293              		.loc 1 1286 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 16
 1296              		@ frame_needed = 1, uses_anonymous_args = 0
 1297 0000 80B5     		push	{r7, lr}	@
 1298              		.cfi_def_cfa_offset 8
 1299              		.cfi_offset 7, -8
 1300              		.cfi_offset 14, -4
 1301 0002 84B0     		sub	sp, sp, #16	@,,
 1302              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 47


 1303 0004 00AF     		add	r7, sp, #0	@,,
 1304              		.cfi_def_cfa_register 7
 1305 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1287:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 1306              		.loc 1 1287 0
 1307 0008 0023     		movs	r3, #0	@ tmp117,
 1308 000a FB60     		str	r3, [r7, #12]	@ tmp117, xReturn
1288:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1309              		.loc 1 1288 0
 1310 000c 7B68     		ldr	r3, [r7, #4]	@ tmp118, xTask
 1311 000e BB60     		str	r3, [r7, #8]	@ tmp118, pxTCB
1289:FreeRTOS/tasks.c **** 
1290:FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1291:FreeRTOS/tasks.c **** 		section. */
1292:FreeRTOS/tasks.c **** 
1293:FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1294:FreeRTOS/tasks.c **** 		configASSERT( xTask );
 1312              		.loc 1 1294 0
 1313 0010 7B68     		ldr	r3, [r7, #4]	@ tmp119, xTask
 1314 0012 002B     		cmp	r3, #0	@ tmp119,
 1315 0014 02D1     		bne	.L95	@,
 1316              		.loc 1 1294 0 is_stmt 0 discriminator 1
 1317 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1318              	.L96:
 1319 001a FEE7     		b	.L96	@
 1320              	.L95:
1295:FreeRTOS/tasks.c **** 
1296:FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1297:FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1321              		.loc 1 1297 0 is_stmt 1
 1322 001c BB68     		ldr	r3, [r7, #8]	@ tmp120, pxTCB
 1323 001e 5B69     		ldr	r3, [r3, #20]	@ D.6592, pxTCB_6->xGenericListItem.pvContainer
 1324 0020 0E4A     		ldr	r2, .L103	@ tmp121,
 1325 0022 9342     		cmp	r3, r2	@ D.6592, tmp121
 1326 0024 01D1     		bne	.L97	@,
 1327              		.loc 1 1297 0 is_stmt 0 discriminator 1
 1328 0026 0123     		movs	r3, #1	@ D.6591,
 1329 0028 00E0     		b	.L98	@
 1330              	.L97:
 1331              		.loc 1 1297 0 discriminator 2
 1332 002a 0023     		movs	r3, #0	@ D.6591,
 1333              	.L98:
 1334              		.loc 1 1297 0 discriminator 4
 1335 002c 002B     		cmp	r3, #0	@ D.6591,
 1336 002e 0FD0     		beq	.L99	@,
1298:FreeRTOS/tasks.c **** 		{
1299:FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1300:FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1337              		.loc 1 1300 0 is_stmt 1
 1338 0030 BB68     		ldr	r3, [r7, #8]	@ tmp122, pxTCB
 1339 0032 9B6A     		ldr	r3, [r3, #40]	@ D.6592, pxTCB_6->xEventListItem.pvContainer
 1340 0034 0A4A     		ldr	r2, .L103+4	@ tmp123,
 1341 0036 9342     		cmp	r3, r2	@ D.6592, tmp123
 1342 0038 0AD0     		beq	.L99	@,
1301:FreeRTOS/tasks.c **** 			{
1302:FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1303:FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 48


1304:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1343              		.loc 1 1304 0
 1344 003a BB68     		ldr	r3, [r7, #8]	@ tmp124, pxTCB
 1345 003c 9B6A     		ldr	r3, [r3, #40]	@ D.6592, pxTCB_6->xEventListItem.pvContainer
 1346 003e 002B     		cmp	r3, #0	@ D.6592,
 1347 0040 01D1     		bne	.L100	@,
 1348              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1349 0042 0123     		movs	r3, #1	@ D.6591,
 1350 0044 00E0     		b	.L101	@
 1351              	.L100:
 1352              		.loc 1 1304 0 discriminator 2
 1353 0046 0023     		movs	r3, #0	@ D.6591,
 1354              	.L101:
 1355              		.loc 1 1304 0 discriminator 4
 1356 0048 002B     		cmp	r3, #0	@ D.6591,
 1357 004a 01D0     		beq	.L99	@,
1305:FreeRTOS/tasks.c **** 				{
1306:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 1358              		.loc 1 1306 0 is_stmt 1
 1359 004c 0123     		movs	r3, #1	@ tmp125,
 1360 004e FB60     		str	r3, [r7, #12]	@ tmp125, xReturn
 1361              	.L99:
1307:FreeRTOS/tasks.c **** 				}
1308:FreeRTOS/tasks.c **** 				else
1309:FreeRTOS/tasks.c **** 				{
1310:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1311:FreeRTOS/tasks.c **** 				}
1312:FreeRTOS/tasks.c **** 			}
1313:FreeRTOS/tasks.c **** 			else
1314:FreeRTOS/tasks.c **** 			{
1315:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1316:FreeRTOS/tasks.c **** 			}
1317:FreeRTOS/tasks.c **** 		}
1318:FreeRTOS/tasks.c **** 		else
1319:FreeRTOS/tasks.c **** 		{
1320:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1321:FreeRTOS/tasks.c **** 		}
1322:FreeRTOS/tasks.c **** 
1323:FreeRTOS/tasks.c **** 		return xReturn;
 1362              		.loc 1 1323 0
 1363 0050 FB68     		ldr	r3, [r7, #12]	@ D.6593, xReturn
1324:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1364              		.loc 1 1324 0
 1365 0052 1846     		mov	r0, r3	@, <retval>
 1366 0054 1037     		adds	r7, r7, #16	@,,
 1367              		.cfi_def_cfa_offset 8
 1368 0056 BD46     		mov	sp, r7	@,
 1369              		.cfi_def_cfa_register 13
 1370              		@ sp needed	@
 1371 0058 80BD     		pop	{r7, pc}	@
 1372              	.L104:
 1373 005a 00BF     		.align	2
 1374              	.L103:
 1375 005c 00000000 		.word	xSuspendedTaskList
 1376 0060 00000000 		.word	xPendingReadyList
 1377              		.cfi_endproc
 1378              	.LFE8:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 49


 1379              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1380              		.section	.text.vTaskResume,"ax",%progbits
 1381              		.align	2
 1382              		.global	vTaskResume
 1383              		.thumb
 1384              		.thumb_func
 1385              		.type	vTaskResume, %function
 1386              	vTaskResume:
 1387              	.LFB9:
1325:FreeRTOS/tasks.c **** 
1326:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1327:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1328:FreeRTOS/tasks.c **** 
1329:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1330:FreeRTOS/tasks.c **** 
1331:FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1332:FreeRTOS/tasks.c **** 	{
 1388              		.loc 1 1332 0
 1389              		.cfi_startproc
 1390              		@ args = 0, pretend = 0, frame = 16
 1391              		@ frame_needed = 1, uses_anonymous_args = 0
 1392 0000 80B5     		push	{r7, lr}	@
 1393              		.cfi_def_cfa_offset 8
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396 0002 84B0     		sub	sp, sp, #16	@,,
 1397              		.cfi_def_cfa_offset 24
 1398 0004 00AF     		add	r7, sp, #0	@,,
 1399              		.cfi_def_cfa_register 7
 1400 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
1333:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1401              		.loc 1 1333 0
 1402 0008 7B68     		ldr	r3, [r7, #4]	@ tmp123, xTaskToResume
 1403 000a FB60     		str	r3, [r7, #12]	@ tmp123, pxTCB
1334:FreeRTOS/tasks.c **** 
1335:FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1336:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1404              		.loc 1 1336 0
 1405 000c 7B68     		ldr	r3, [r7, #4]	@ tmp124, xTaskToResume
 1406 000e 002B     		cmp	r3, #0	@ tmp124,
 1407 0010 02D1     		bne	.L106	@,
 1408              		.loc 1 1336 0 is_stmt 0 discriminator 1
 1409 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1410              	.L107:
 1411 0016 FEE7     		b	.L107	@
 1412              	.L106:
1337:FreeRTOS/tasks.c **** 
1338:FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1339:FreeRTOS/tasks.c **** 		currently executing task. */
1340:FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1413              		.loc 1 1340 0 is_stmt 1
 1414 0018 FB68     		ldr	r3, [r7, #12]	@ tmp125, pxTCB
 1415 001a 002B     		cmp	r3, #0	@ tmp125,
 1416 001c 33D0     		beq	.L110	@,
 1417              		.loc 1 1340 0 is_stmt 0 discriminator 1
 1418 001e 1C4B     		ldr	r3, .L111	@ tmp126,
 1419 0020 1B68     		ldr	r3, [r3]	@ D.6594, pxCurrentTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 50


 1420 0022 FA68     		ldr	r2, [r7, #12]	@ tmp127, pxTCB
 1421 0024 9A42     		cmp	r2, r3	@ tmp127, D.6594
 1422 0026 2ED0     		beq	.L110	@,
1341:FreeRTOS/tasks.c **** 		{
1342:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 1423              		.loc 1 1342 0 is_stmt 1
 1424 0028 FFF7FEFF 		bl	vPortEnterCritical	@
1343:FreeRTOS/tasks.c **** 			{
1344:FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1425              		.loc 1 1344 0
 1426 002c F868     		ldr	r0, [r7, #12]	@, pxTCB
 1427 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1428 0032 0346     		mov	r3, r0	@ D.6595,
 1429 0034 012B     		cmp	r3, #1	@ D.6595,
 1430 0036 24D1     		bne	.L109	@,
1345:FreeRTOS/tasks.c **** 				{
1346:FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1347:FreeRTOS/tasks.c **** 
1348:FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1349:FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1350:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1431              		.loc 1 1350 0
 1432 0038 FB68     		ldr	r3, [r7, #12]	@ tmp128, pxTCB
 1433 003a 0433     		adds	r3, r3, #4	@ D.6596, tmp128,
 1434 003c 1846     		mov	r0, r3	@, D.6596
 1435 003e FFF7FEFF 		bl	uxListRemove	@
1351:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1436              		.loc 1 1351 0
 1437 0042 FB68     		ldr	r3, [r7, #12]	@ tmp129, pxTCB
 1438 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6597, pxTCB_4->uxPriority
 1439 0046 0122     		movs	r2, #1	@ tmp130,
 1440 0048 9A40     		lsls	r2, r2, r3	@ D.6597, tmp130, D.6597
 1441 004a 124B     		ldr	r3, .L111+4	@ tmp131,
 1442 004c 1B68     		ldr	r3, [r3]	@ D.6597, uxTopReadyPriority
 1443 004e 1343     		orrs	r3, r3, r2	@, D.6597, D.6597, D.6597
 1444 0050 104A     		ldr	r2, .L111+4	@ tmp132,
 1445 0052 1360     		str	r3, [r2]	@ D.6597, uxTopReadyPriority
 1446 0054 FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 1447 0056 DA6A     		ldr	r2, [r3, #44]	@ D.6597, pxTCB_4->uxPriority
 1448 0058 1346     		mov	r3, r2	@ tmp134, D.6597
 1449 005a 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 1450 005c 1344     		add	r3, r3, r2	@ tmp134, D.6597
 1451 005e 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 1452 0060 0D4A     		ldr	r2, .L111+8	@ tmp136,
 1453 0062 1A44     		add	r2, r2, r3	@ D.6598, tmp134
 1454 0064 FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 1455 0066 0433     		adds	r3, r3, #4	@ D.6596, tmp137,
 1456 0068 1946     		mov	r1, r3	@, D.6596
 1457 006a 1046     		mov	r0, r2	@, D.6598
 1458 006c FFF7FEFF 		bl	vListInsertEnd	@
1352:FreeRTOS/tasks.c **** 
1353:FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1354:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1459              		.loc 1 1354 0
 1460 0070 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 1461 0072 DA6A     		ldr	r2, [r3, #44]	@ D.6597, pxTCB_4->uxPriority
 1462 0074 064B     		ldr	r3, .L111	@ tmp139,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 51


 1463 0076 1B68     		ldr	r3, [r3]	@ D.6594, pxCurrentTCB
 1464 0078 DB6A     		ldr	r3, [r3, #44]	@ D.6597, _22->uxPriority
 1465 007a 9A42     		cmp	r2, r3	@ D.6597, D.6597
 1466 007c 01D3     		bcc	.L109	@,
1355:FreeRTOS/tasks.c **** 					{
1356:FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1357:FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1358:FreeRTOS/tasks.c **** 						next yield. */
1359:FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1467              		.loc 1 1359 0
 1468 007e FFF7FEFF 		bl	vPortYield	@
 1469              	.L109:
1360:FreeRTOS/tasks.c **** 					}
1361:FreeRTOS/tasks.c **** 					else
1362:FreeRTOS/tasks.c **** 					{
1363:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1364:FreeRTOS/tasks.c **** 					}
1365:FreeRTOS/tasks.c **** 				}
1366:FreeRTOS/tasks.c **** 				else
1367:FreeRTOS/tasks.c **** 				{
1368:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1369:FreeRTOS/tasks.c **** 				}
1370:FreeRTOS/tasks.c **** 			}
1371:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1470              		.loc 1 1371 0
 1471 0082 FFF7FEFF 		bl	vPortExitCritical	@
 1472              	.L110:
1372:FreeRTOS/tasks.c **** 		}
1373:FreeRTOS/tasks.c **** 		else
1374:FreeRTOS/tasks.c **** 		{
1375:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1376:FreeRTOS/tasks.c **** 		}
1377:FreeRTOS/tasks.c **** 	}
 1473              		.loc 1 1377 0
 1474 0086 00BF     		nop
 1475 0088 1037     		adds	r7, r7, #16	@,,
 1476              		.cfi_def_cfa_offset 8
 1477 008a BD46     		mov	sp, r7	@,
 1478              		.cfi_def_cfa_register 13
 1479              		@ sp needed	@
 1480 008c 80BD     		pop	{r7, pc}	@
 1481              	.L112:
 1482 008e 00BF     		.align	2
 1483              	.L111:
 1484 0090 00000000 		.word	pxCurrentTCB
 1485 0094 00000000 		.word	uxTopReadyPriority
 1486 0098 00000000 		.word	pxReadyTasksLists
 1487              		.cfi_endproc
 1488              	.LFE9:
 1489              		.size	vTaskResume, .-vTaskResume
 1490              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1491              		.align	2
 1492              		.global	xTaskResumeFromISR
 1493              		.thumb
 1494              		.thumb_func
 1495              		.type	xTaskResumeFromISR, %function
 1496              	xTaskResumeFromISR:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 52


 1497              	.LFB10:
1378:FreeRTOS/tasks.c **** 
1379:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1380:FreeRTOS/tasks.c **** 
1381:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1382:FreeRTOS/tasks.c **** 
1383:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1384:FreeRTOS/tasks.c **** 
1385:FreeRTOS/tasks.c **** 	BaseT_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1386:FreeRTOS/tasks.c **** 	{
 1498              		.loc 1 1386 0
 1499              		.cfi_startproc
 1500              		@ args = 0, pretend = 0, frame = 24
 1501              		@ frame_needed = 1, uses_anonymous_args = 0
 1502 0000 80B5     		push	{r7, lr}	@
 1503              		.cfi_def_cfa_offset 8
 1504              		.cfi_offset 7, -8
 1505              		.cfi_offset 14, -4
 1506 0002 86B0     		sub	sp, sp, #24	@,,
 1507              		.cfi_def_cfa_offset 32
 1508 0004 00AF     		add	r7, sp, #0	@,,
 1509              		.cfi_def_cfa_register 7
 1510 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
1387:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 1511              		.loc 1 1387 0
 1512 0008 0023     		movs	r3, #0	@ tmp126,
 1513 000a 7B61     		str	r3, [r7, #20]	@ tmp126, xYieldRequired
1388:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1514              		.loc 1 1388 0
 1515 000c 7B68     		ldr	r3, [r7, #4]	@ tmp127, xTaskToResume
 1516 000e 3B61     		str	r3, [r7, #16]	@ tmp127, pxTCB
1389:FreeRTOS/tasks.c **** 	UBaseT_t uxSavedInterruptStatus;
1390:FreeRTOS/tasks.c **** 
1391:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1517              		.loc 1 1391 0
 1518 0010 7B68     		ldr	r3, [r7, #4]	@ tmp128, xTaskToResume
 1519 0012 002B     		cmp	r3, #0	@ tmp128,
 1520 0014 02D1     		bne	.L114	@,
 1521              		.loc 1 1391 0 is_stmt 0 discriminator 1
 1522 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1523              	.L115:
 1524 001a FEE7     		b	.L115	@
 1525              	.L114:
1392:FreeRTOS/tasks.c **** 
1393:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1394:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1395:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1396:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1397:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1398:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1399:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1400:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1401:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1402:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1403:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1404:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1405:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 53


1406:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1407:FreeRTOS/tasks.c **** 		provided on the following link:
1408:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1409:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1526              		.loc 1 1409 0 is_stmt 1
 1527 001c FFF7FEFF 		bl	vPortValidateInterruptPriority	@
1410:FreeRTOS/tasks.c **** 
1411:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1528              		.loc 1 1411 0
 1529 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1530 0024 F860     		str	r0, [r7, #12]	@, uxSavedInterruptStatus
1412:FreeRTOS/tasks.c **** 		{
1413:FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1531              		.loc 1 1413 0
 1532 0026 3869     		ldr	r0, [r7, #16]	@, pxTCB
 1533 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1534 002c 0346     		mov	r3, r0	@ D.6599,
 1535 002e 012B     		cmp	r3, #1	@ D.6599,
 1536 0030 2FD1     		bne	.L116	@,
1414:FreeRTOS/tasks.c **** 			{
1415:FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1416:FreeRTOS/tasks.c **** 
1417:FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1418:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1537              		.loc 1 1418 0
 1538 0032 1C4B     		ldr	r3, .L121	@ tmp129,
 1539 0034 1B68     		ldr	r3, [r3]	@ D.6600, uxSchedulerSuspended
 1540 0036 002B     		cmp	r3, #0	@ D.6600,
 1541 0038 25D1     		bne	.L117	@,
1419:FreeRTOS/tasks.c **** 				{
1420:FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1421:FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1422:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1542              		.loc 1 1422 0
 1543 003a 3B69     		ldr	r3, [r7, #16]	@ tmp130, pxTCB
 1544 003c DA6A     		ldr	r2, [r3, #44]	@ D.6600, pxTCB_8->uxPriority
 1545 003e 1A4B     		ldr	r3, .L121+4	@ tmp131,
 1546 0040 1B68     		ldr	r3, [r3]	@ D.6601, pxCurrentTCB
 1547 0042 DB6A     		ldr	r3, [r3, #44]	@ D.6600, _17->uxPriority
 1548 0044 9A42     		cmp	r2, r3	@ D.6600, D.6600
 1549 0046 01D3     		bcc	.L118	@,
1423:FreeRTOS/tasks.c **** 					{
1424:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 1550              		.loc 1 1424 0
 1551 0048 0123     		movs	r3, #1	@ tmp132,
 1552 004a 7B61     		str	r3, [r7, #20]	@ tmp132, xYieldRequired
 1553              	.L118:
1425:FreeRTOS/tasks.c **** 					}
1426:FreeRTOS/tasks.c **** 					else
1427:FreeRTOS/tasks.c **** 					{
1428:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1429:FreeRTOS/tasks.c **** 					}
1430:FreeRTOS/tasks.c **** 
1431:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1554              		.loc 1 1431 0
 1555 004c 3B69     		ldr	r3, [r7, #16]	@ tmp133, pxTCB
 1556 004e 0433     		adds	r3, r3, #4	@ D.6602, tmp133,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 54


 1557 0050 1846     		mov	r0, r3	@, D.6602
 1558 0052 FFF7FEFF 		bl	uxListRemove	@
1432:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1559              		.loc 1 1432 0
 1560 0056 3B69     		ldr	r3, [r7, #16]	@ tmp134, pxTCB
 1561 0058 DB6A     		ldr	r3, [r3, #44]	@ D.6600, pxTCB_8->uxPriority
 1562 005a 0122     		movs	r2, #1	@ tmp135,
 1563 005c 9A40     		lsls	r2, r2, r3	@ D.6600, tmp135, D.6600
 1564 005e 134B     		ldr	r3, .L121+8	@ tmp136,
 1565 0060 1B68     		ldr	r3, [r3]	@ D.6600, uxTopReadyPriority
 1566 0062 1343     		orrs	r3, r3, r2	@, D.6600, D.6600, D.6600
 1567 0064 114A     		ldr	r2, .L121+8	@ tmp137,
 1568 0066 1360     		str	r3, [r2]	@ D.6600, uxTopReadyPriority
 1569 0068 3B69     		ldr	r3, [r7, #16]	@ tmp138, pxTCB
 1570 006a DA6A     		ldr	r2, [r3, #44]	@ D.6600, pxTCB_8->uxPriority
 1571 006c 1346     		mov	r3, r2	@ tmp139, D.6600
 1572 006e 9B00     		lsls	r3, r3, #2	@ tmp139, tmp139,
 1573 0070 1344     		add	r3, r3, r2	@ tmp139, D.6600
 1574 0072 9B00     		lsls	r3, r3, #2	@ tmp140, tmp139,
 1575 0074 0E4A     		ldr	r2, .L121+12	@ tmp141,
 1576 0076 1A44     		add	r2, r2, r3	@ D.6603, tmp139
 1577 0078 3B69     		ldr	r3, [r7, #16]	@ tmp142, pxTCB
 1578 007a 0433     		adds	r3, r3, #4	@ D.6602, tmp142,
 1579 007c 1946     		mov	r1, r3	@, D.6602
 1580 007e 1046     		mov	r0, r2	@, D.6603
 1581 0080 FFF7FEFF 		bl	vListInsertEnd	@
 1582 0084 05E0     		b	.L116	@
 1583              	.L117:
1433:FreeRTOS/tasks.c **** 				}
1434:FreeRTOS/tasks.c **** 				else
1435:FreeRTOS/tasks.c **** 				{
1436:FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1437:FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1438:FreeRTOS/tasks.c **** 					unsuspended. */
1439:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1584              		.loc 1 1439 0
 1585 0086 3B69     		ldr	r3, [r7, #16]	@ tmp143, pxTCB
 1586 0088 1833     		adds	r3, r3, #24	@ D.6602, tmp143,
 1587 008a 1946     		mov	r1, r3	@, D.6602
 1588 008c 0948     		ldr	r0, .L121+16	@,
 1589 008e FFF7FEFF 		bl	vListInsertEnd	@
 1590              	.L116:
1440:FreeRTOS/tasks.c **** 				}
1441:FreeRTOS/tasks.c **** 			}
1442:FreeRTOS/tasks.c **** 			else
1443:FreeRTOS/tasks.c **** 			{
1444:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1445:FreeRTOS/tasks.c **** 			}
1446:FreeRTOS/tasks.c **** 		}
1447:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1591              		.loc 1 1447 0
 1592 0092 F868     		ldr	r0, [r7, #12]	@, uxSavedInterruptStatus
 1593 0094 FFF7FEFF 		bl	vPortClearInterruptMask	@
1448:FreeRTOS/tasks.c **** 
1449:FreeRTOS/tasks.c **** 		return xYieldRequired;
 1594              		.loc 1 1449 0
 1595 0098 7B69     		ldr	r3, [r7, #20]	@ D.6604, xYieldRequired
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 55


1450:FreeRTOS/tasks.c **** 	}
 1596              		.loc 1 1450 0
 1597 009a 1846     		mov	r0, r3	@, <retval>
 1598 009c 1837     		adds	r7, r7, #24	@,,
 1599              		.cfi_def_cfa_offset 8
 1600 009e BD46     		mov	sp, r7	@,
 1601              		.cfi_def_cfa_register 13
 1602              		@ sp needed	@
 1603 00a0 80BD     		pop	{r7, pc}	@
 1604              	.L122:
 1605 00a2 00BF     		.align	2
 1606              	.L121:
 1607 00a4 00000000 		.word	uxSchedulerSuspended
 1608 00a8 00000000 		.word	pxCurrentTCB
 1609 00ac 00000000 		.word	uxTopReadyPriority
 1610 00b0 00000000 		.word	pxReadyTasksLists
 1611 00b4 00000000 		.word	xPendingReadyList
 1612              		.cfi_endproc
 1613              	.LFE10:
 1614              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1615              		.section	.rodata
 1616              		.align	2
 1617              	.LC0:
 1618 0000 49444C45 		.ascii	"IDLE\000"
 1618      00
 1619              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1620              		.align	2
 1621              		.global	vTaskStartScheduler
 1622              		.thumb
 1623              		.thumb_func
 1624              		.type	vTaskStartScheduler, %function
 1625              	vTaskStartScheduler:
 1626              	.LFB11:
1451:FreeRTOS/tasks.c **** 
1452:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1453:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1454:FreeRTOS/tasks.c **** 
1455:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1456:FreeRTOS/tasks.c **** {
 1627              		.loc 1 1456 0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 8
 1630              		@ frame_needed = 1, uses_anonymous_args = 0
 1631 0000 80B5     		push	{r7, lr}	@
 1632              		.cfi_def_cfa_offset 8
 1633              		.cfi_offset 7, -8
 1634              		.cfi_offset 14, -4
 1635 0002 86B0     		sub	sp, sp, #24	@,,
 1636              		.cfi_def_cfa_offset 32
 1637 0004 04AF     		add	r7, sp, #16	@,,
 1638              		.cfi_def_cfa 7, 16
1457:FreeRTOS/tasks.c **** BaseT_t xReturn;
1458:FreeRTOS/tasks.c **** 
1459:FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1460:FreeRTOS/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1461:FreeRTOS/tasks.c **** 	{
1462:FreeRTOS/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 56


1463:FreeRTOS/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1464:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1465:FreeRTOS/tasks.c **** 	}
1466:FreeRTOS/tasks.c **** 	#else
1467:FreeRTOS/tasks.c **** 	{
1468:FreeRTOS/tasks.c **** 		/* Create the idle task without storing its handle. */
1469:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
 1639              		.loc 1 1469 0
 1640 0006 0023     		movs	r3, #0	@ tmp111,
 1641 0008 0393     		str	r3, [sp, #12]	@ tmp111,
 1642 000a 0023     		movs	r3, #0	@ tmp112,
 1643 000c 0293     		str	r3, [sp, #8]	@ tmp112,
 1644 000e 0023     		movs	r3, #0	@ tmp113,
 1645 0010 0193     		str	r3, [sp, #4]	@ tmp113,
 1646 0012 0023     		movs	r3, #0	@ tmp114,
 1647 0014 0093     		str	r3, [sp]	@ tmp114,
 1648 0016 0023     		movs	r3, #0	@,
 1649 0018 4FF48072 		mov	r2, #256	@,
 1650 001c 0E49     		ldr	r1, .L128	@,
 1651 001e 0F48     		ldr	r0, .L128+4	@,
 1652 0020 FFF7FEFF 		bl	xTaskGenericCreate	@
 1653 0024 7860     		str	r0, [r7, #4]	@, xReturn
1470:FreeRTOS/tasks.c **** 	}
1471:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1472:FreeRTOS/tasks.c **** 
1473:FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1474:FreeRTOS/tasks.c **** 	{
1475:FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1476:FreeRTOS/tasks.c **** 		{
1477:FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1478:FreeRTOS/tasks.c **** 		}
1479:FreeRTOS/tasks.c **** 		else
1480:FreeRTOS/tasks.c **** 		{
1481:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:FreeRTOS/tasks.c **** 		}
1483:FreeRTOS/tasks.c **** 	}
1484:FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1485:FreeRTOS/tasks.c **** 
1486:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 1654              		.loc 1 1486 0
 1655 0026 7B68     		ldr	r3, [r7, #4]	@ tmp115, xReturn
 1656 0028 012B     		cmp	r3, #1	@ tmp115,
 1657 002a 0AD1     		bne	.L124	@,
1487:FreeRTOS/tasks.c **** 	{
1488:FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1489:FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1490:FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1491:FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1492:FreeRTOS/tasks.c **** 		starts to run. */
1493:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
 1658              		.loc 1 1493 0
 1659 002c FFF7FEFF 		bl	ulPortSetInterruptMask	@
1494:FreeRTOS/tasks.c **** 
1495:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1496:FreeRTOS/tasks.c **** 		{
1497:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1498:FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 57


1499:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1500:FreeRTOS/tasks.c **** 		}
1501:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1502:FreeRTOS/tasks.c **** 
1503:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1660              		.loc 1 1503 0
 1661 0030 0B4B     		ldr	r3, .L128+8	@ tmp116,
 1662 0032 0122     		movs	r2, #1	@ tmp117,
 1663 0034 1A60     		str	r2, [r3]	@ tmp117, xSchedulerRunning
1504:FreeRTOS/tasks.c **** 		xTickCount = ( TickT_t ) 0U;
 1664              		.loc 1 1504 0
 1665 0036 0B4B     		ldr	r3, .L128+12	@ tmp118,
 1666 0038 0022     		movs	r2, #0	@ tmp119,
 1667 003a 1A60     		str	r2, [r3]	@ tmp119, xTickCount
1505:FreeRTOS/tasks.c **** 
1506:FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1507:FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1508:FreeRTOS/tasks.c **** 		the run time counter time base. */
1509:FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1510:FreeRTOS/tasks.c **** 
1511:FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1512:FreeRTOS/tasks.c **** 		portable interface. */
1513:FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1668              		.loc 1 1513 0
 1669 003c FFF7FEFF 		bl	xPortStartScheduler	@
1514:FreeRTOS/tasks.c **** 		{
1515:FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1516:FreeRTOS/tasks.c **** 			function will not return. */
1517:FreeRTOS/tasks.c **** 		}
1518:FreeRTOS/tasks.c **** 		else
1519:FreeRTOS/tasks.c **** 		{
1520:FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1521:FreeRTOS/tasks.c **** 		}
1522:FreeRTOS/tasks.c **** 	}
1523:FreeRTOS/tasks.c **** 	else
1524:FreeRTOS/tasks.c **** 	{
1525:FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1526:FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1527:FreeRTOS/tasks.c **** 		or the timer task. */
1528:FreeRTOS/tasks.c **** 		configASSERT( xReturn );
1529:FreeRTOS/tasks.c **** 	}
1530:FreeRTOS/tasks.c **** }
 1670              		.loc 1 1530 0
 1671 0040 05E0     		b	.L127	@
 1672              	.L124:
1528:FreeRTOS/tasks.c **** 	}
 1673              		.loc 1 1528 0
 1674 0042 7B68     		ldr	r3, [r7, #4]	@ tmp120, xReturn
 1675 0044 002B     		cmp	r3, #0	@ tmp120,
 1676 0046 02D1     		bne	.L127	@,
1528:FreeRTOS/tasks.c **** 	}
 1677              		.loc 1 1528 0 is_stmt 0 discriminator 1
 1678 0048 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1679              	.L126:
1528:FreeRTOS/tasks.c **** 	}
 1680              		.loc 1 1528 0 discriminator 2
 1681 004c FEE7     		b	.L126	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 58


 1682              	.L127:
 1683              		.loc 1 1530 0 is_stmt 1
 1684 004e 00BF     		nop
 1685 0050 0837     		adds	r7, r7, #8	@,,
 1686              		.cfi_def_cfa_offset 8
 1687 0052 BD46     		mov	sp, r7	@,
 1688              		.cfi_def_cfa_register 13
 1689              		@ sp needed	@
 1690 0054 80BD     		pop	{r7, pc}	@
 1691              	.L129:
 1692 0056 00BF     		.align	2
 1693              	.L128:
 1694 0058 00000000 		.word	.LC0
 1695 005c 00000000 		.word	prvIdleTask
 1696 0060 00000000 		.word	xSchedulerRunning
 1697 0064 00000000 		.word	xTickCount
 1698              		.cfi_endproc
 1699              	.LFE11:
 1700              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1701              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1702              		.align	2
 1703              		.global	vTaskEndScheduler
 1704              		.thumb
 1705              		.thumb_func
 1706              		.type	vTaskEndScheduler, %function
 1707              	vTaskEndScheduler:
 1708              	.LFB12:
1531:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1532:FreeRTOS/tasks.c **** 
1533:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1534:FreeRTOS/tasks.c **** {
 1709              		.loc 1 1534 0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 0
 1712              		@ frame_needed = 1, uses_anonymous_args = 0
 1713 0000 80B5     		push	{r7, lr}	@
 1714              		.cfi_def_cfa_offset 8
 1715              		.cfi_offset 7, -8
 1716              		.cfi_offset 14, -4
 1717 0002 00AF     		add	r7, sp, #0	@,,
 1718              		.cfi_def_cfa_register 7
1535:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1536:FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1537:FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1538:FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
 1719              		.loc 1 1538 0
 1720 0004 FFF7FEFF 		bl	ulPortSetInterruptMask	@
1539:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1721              		.loc 1 1539 0
 1722 0008 034B     		ldr	r3, .L131	@ tmp110,
 1723 000a 0022     		movs	r2, #0	@ tmp111,
 1724 000c 1A60     		str	r2, [r3]	@ tmp111, xSchedulerRunning
1540:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1725              		.loc 1 1540 0
 1726 000e FFF7FEFF 		bl	vPortEndScheduler	@
1541:FreeRTOS/tasks.c **** }
 1727              		.loc 1 1541 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 59


 1728 0012 00BF     		nop
 1729 0014 80BD     		pop	{r7, pc}	@
 1730              	.L132:
 1731 0016 00BF     		.align	2
 1732              	.L131:
 1733 0018 00000000 		.word	xSchedulerRunning
 1734              		.cfi_endproc
 1735              	.LFE12:
 1736              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1737              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1738              		.align	2
 1739              		.global	vTaskSuspendAll
 1740              		.thumb
 1741              		.thumb_func
 1742              		.type	vTaskSuspendAll, %function
 1743              	vTaskSuspendAll:
 1744              	.LFB13:
1542:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1543:FreeRTOS/tasks.c **** 
1544:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1545:FreeRTOS/tasks.c **** {
 1745              		.loc 1 1545 0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 0
 1748              		@ frame_needed = 1, uses_anonymous_args = 0
 1749              		@ link register save eliminated.
 1750 0000 80B4     		push	{r7}	@
 1751              		.cfi_def_cfa_offset 4
 1752              		.cfi_offset 7, -4
 1753 0002 00AF     		add	r7, sp, #0	@,,
 1754              		.cfi_def_cfa_register 7
1546:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1547:FreeRTOS/tasks.c **** 	BaseT_t.  Please read Richard Barry's reply in the following link to a
1548:FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1549:FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1550:FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
 1755              		.loc 1 1550 0
 1756 0004 044B     		ldr	r3, .L134	@ tmp112,
 1757 0006 1B68     		ldr	r3, [r3]	@ D.6607, uxSchedulerSuspended
 1758 0008 0133     		adds	r3, r3, #1	@ D.6607, D.6607,
 1759 000a 034A     		ldr	r2, .L134	@ tmp113,
 1760 000c 1360     		str	r3, [r2]	@ D.6607, uxSchedulerSuspended
1551:FreeRTOS/tasks.c **** }
 1761              		.loc 1 1551 0
 1762 000e 00BF     		nop
 1763 0010 BD46     		mov	sp, r7	@,
 1764              		.cfi_def_cfa_register 13
 1765              		@ sp needed	@
 1766 0012 80BC     		pop	{r7}	@
 1767              		.cfi_restore 7
 1768              		.cfi_def_cfa_offset 0
 1769 0014 7047     		bx	lr	@
 1770              	.L135:
 1771 0016 00BF     		.align	2
 1772              	.L134:
 1773 0018 00000000 		.word	uxSchedulerSuspended
 1774              		.cfi_endproc
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 60


 1775              	.LFE13:
 1776              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1777              		.section	.text.xTaskResumeAll,"ax",%progbits
 1778              		.align	2
 1779              		.global	xTaskResumeAll
 1780              		.thumb
 1781              		.thumb_func
 1782              		.type	xTaskResumeAll, %function
 1783              	xTaskResumeAll:
 1784              	.LFB14:
1552:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1553:FreeRTOS/tasks.c **** 
1554:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1555:FreeRTOS/tasks.c **** 
1556:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void )
1557:FreeRTOS/tasks.c **** 	{
1558:FreeRTOS/tasks.c **** 	TickT_t xReturn;
1559:FreeRTOS/tasks.c **** 
1560:FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1561:FreeRTOS/tasks.c **** 		{
1562:FreeRTOS/tasks.c **** 			xReturn = 0;
1563:FreeRTOS/tasks.c **** 		}
1564:FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1565:FreeRTOS/tasks.c **** 		{
1566:FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1567:FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1568:FreeRTOS/tasks.c **** 			processed. */
1569:FreeRTOS/tasks.c **** 			xReturn = 0;
1570:FreeRTOS/tasks.c **** 		}
1571:FreeRTOS/tasks.c **** 		else
1572:FreeRTOS/tasks.c **** 		{
1573:FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1574:FreeRTOS/tasks.c **** 		}
1575:FreeRTOS/tasks.c **** 
1576:FreeRTOS/tasks.c **** 		return xReturn;
1577:FreeRTOS/tasks.c **** 	}
1578:FreeRTOS/tasks.c **** 
1579:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1580:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1581:FreeRTOS/tasks.c **** 
1582:FreeRTOS/tasks.c **** BaseT_t xTaskResumeAll( void )
1583:FreeRTOS/tasks.c **** {
 1785              		.loc 1 1583 0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 8
 1788              		@ frame_needed = 1, uses_anonymous_args = 0
 1789 0000 80B5     		push	{r7, lr}	@
 1790              		.cfi_def_cfa_offset 8
 1791              		.cfi_offset 7, -8
 1792              		.cfi_offset 14, -4
 1793 0002 82B0     		sub	sp, sp, #8	@,,
 1794              		.cfi_def_cfa_offset 16
 1795 0004 00AF     		add	r7, sp, #0	@,,
 1796              		.cfi_def_cfa_register 7
1584:FreeRTOS/tasks.c **** TCB_t *pxTCB;
1585:FreeRTOS/tasks.c **** BaseT_t xAlreadyYielded = pdFALSE;
 1797              		.loc 1 1585 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 61


 1798 0006 0023     		movs	r3, #0	@ tmp137,
 1799 0008 7B60     		str	r3, [r7, #4]	@ tmp137, xAlreadyYielded
1586:FreeRTOS/tasks.c **** 
1587:FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1588:FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
1589:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1800              		.loc 1 1589 0
 1801 000a 374B     		ldr	r3, .L147	@ tmp138,
 1802 000c 1B68     		ldr	r3, [r3]	@ D.6608, uxSchedulerSuspended
 1803 000e 002B     		cmp	r3, #0	@ D.6608,
 1804 0010 02D1     		bne	.L137	@,
 1805              		.loc 1 1589 0 is_stmt 0 discriminator 1
 1806 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1807              	.L138:
 1808 0016 FEE7     		b	.L138	@
 1809              	.L137:
1590:FreeRTOS/tasks.c **** 
1591:FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1592:FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1593:FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1594:FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1595:FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1596:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1810              		.loc 1 1596 0 is_stmt 1
 1811 0018 FFF7FEFF 		bl	vPortEnterCritical	@
1597:FreeRTOS/tasks.c **** 	{
1598:FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
 1812              		.loc 1 1598 0
 1813 001c 324B     		ldr	r3, .L147	@ tmp139,
 1814 001e 1B68     		ldr	r3, [r3]	@ D.6608, uxSchedulerSuspended
 1815 0020 013B     		subs	r3, r3, #1	@ D.6608, D.6608,
 1816 0022 314A     		ldr	r2, .L147	@ tmp140,
 1817 0024 1360     		str	r3, [r2]	@ D.6608, uxSchedulerSuspended
1599:FreeRTOS/tasks.c **** 
1600:FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1818              		.loc 1 1600 0
 1819 0026 304B     		ldr	r3, .L147	@ tmp141,
 1820 0028 1B68     		ldr	r3, [r3]	@ D.6608, uxSchedulerSuspended
 1821 002a 002B     		cmp	r3, #0	@ D.6608,
 1822 002c 55D1     		bne	.L139	@,
1601:FreeRTOS/tasks.c **** 		{
1602:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseT_t ) 0U )
 1823              		.loc 1 1602 0
 1824 002e 2F4B     		ldr	r3, .L147+4	@ tmp142,
 1825 0030 1B68     		ldr	r3, [r3]	@ D.6608, uxCurrentNumberOfTasks
 1826 0032 002B     		cmp	r3, #0	@ D.6608,
 1827 0034 51D0     		beq	.L139	@,
1603:FreeRTOS/tasks.c **** 			{
1604:FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1605:FreeRTOS/tasks.c **** 				appropriate ready list. */
1606:FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 1828              		.loc 1 1606 0
 1829 0036 2EE0     		b	.L140	@
 1830              	.L141:
1607:FreeRTOS/tasks.c **** 				{
1608:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 1831              		.loc 1 1608 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 62


 1832 0038 2D4B     		ldr	r3, .L147+8	@ tmp143,
 1833 003a DB68     		ldr	r3, [r3, #12]	@ D.6609, xPendingReadyList.xListEnd.pxNext
 1834 003c DB68     		ldr	r3, [r3, #12]	@ tmp144, _17->pvOwner
 1835 003e 3B60     		str	r3, [r7]	@ tmp144, pxTCB
1609:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1836              		.loc 1 1609 0
 1837 0040 3B68     		ldr	r3, [r7]	@ tmp145, pxTCB
 1838 0042 1833     		adds	r3, r3, #24	@ D.6610, tmp145,
 1839 0044 1846     		mov	r0, r3	@, D.6610
 1840 0046 FFF7FEFF 		bl	uxListRemove	@
1610:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1841              		.loc 1 1610 0
 1842 004a 3B68     		ldr	r3, [r7]	@ tmp146, pxTCB
 1843 004c 0433     		adds	r3, r3, #4	@ D.6610, tmp146,
 1844 004e 1846     		mov	r0, r3	@, D.6610
 1845 0050 FFF7FEFF 		bl	uxListRemove	@
1611:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1846              		.loc 1 1611 0
 1847 0054 3B68     		ldr	r3, [r7]	@ tmp147, pxTCB
 1848 0056 DB6A     		ldr	r3, [r3, #44]	@ D.6608, pxTCB_18->uxPriority
 1849 0058 0122     		movs	r2, #1	@ tmp148,
 1850 005a 9A40     		lsls	r2, r2, r3	@ D.6608, tmp148, D.6608
 1851 005c 254B     		ldr	r3, .L147+12	@ tmp149,
 1852 005e 1B68     		ldr	r3, [r3]	@ D.6608, uxTopReadyPriority
 1853 0060 1343     		orrs	r3, r3, r2	@, D.6608, D.6608, D.6608
 1854 0062 244A     		ldr	r2, .L147+12	@ tmp150,
 1855 0064 1360     		str	r3, [r2]	@ D.6608, uxTopReadyPriority
 1856 0066 3B68     		ldr	r3, [r7]	@ tmp151, pxTCB
 1857 0068 DA6A     		ldr	r2, [r3, #44]	@ D.6608, pxTCB_18->uxPriority
 1858 006a 1346     		mov	r3, r2	@ tmp152, D.6608
 1859 006c 9B00     		lsls	r3, r3, #2	@ tmp152, tmp152,
 1860 006e 1344     		add	r3, r3, r2	@ tmp152, D.6608
 1861 0070 9B00     		lsls	r3, r3, #2	@ tmp153, tmp152,
 1862 0072 214A     		ldr	r2, .L147+16	@ tmp154,
 1863 0074 1A44     		add	r2, r2, r3	@ D.6611, tmp152
 1864 0076 3B68     		ldr	r3, [r7]	@ tmp155, pxTCB
 1865 0078 0433     		adds	r3, r3, #4	@ D.6610, tmp155,
 1866 007a 1946     		mov	r1, r3	@, D.6610
 1867 007c 1046     		mov	r0, r2	@, D.6611
 1868 007e FFF7FEFF 		bl	vListInsertEnd	@
1612:FreeRTOS/tasks.c **** 
1613:FreeRTOS/tasks.c **** 					/* If we have moved a task that has a priority higher than
1614:FreeRTOS/tasks.c **** 					the current task then we should yield. */
1615:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1869              		.loc 1 1615 0
 1870 0082 3B68     		ldr	r3, [r7]	@ tmp156, pxTCB
 1871 0084 DA6A     		ldr	r2, [r3, #44]	@ D.6608, pxTCB_18->uxPriority
 1872 0086 1D4B     		ldr	r3, .L147+20	@ tmp157,
 1873 0088 1B68     		ldr	r3, [r3]	@ D.6612, pxCurrentTCB
 1874 008a DB6A     		ldr	r3, [r3, #44]	@ D.6608, _33->uxPriority
 1875 008c 9A42     		cmp	r2, r3	@ D.6608, D.6608
 1876 008e 02D3     		bcc	.L140	@,
1616:FreeRTOS/tasks.c **** 					{
1617:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
 1877              		.loc 1 1617 0
 1878 0090 1B4B     		ldr	r3, .L147+24	@ tmp158,
 1879 0092 0122     		movs	r2, #1	@ tmp159,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 63


 1880 0094 1A60     		str	r2, [r3]	@ tmp159, xYieldPending
 1881              	.L140:
1606:FreeRTOS/tasks.c **** 				{
 1882              		.loc 1 1606 0
 1883 0096 164B     		ldr	r3, .L147+8	@ tmp160,
 1884 0098 1B68     		ldr	r3, [r3]	@ D.6608, xPendingReadyList.uxNumberOfItems
 1885 009a 002B     		cmp	r3, #0	@ D.6608,
 1886 009c CCD1     		bne	.L141	@,
1618:FreeRTOS/tasks.c **** 					}
1619:FreeRTOS/tasks.c **** 					else
1620:FreeRTOS/tasks.c **** 					{
1621:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1622:FreeRTOS/tasks.c **** 					}
1623:FreeRTOS/tasks.c **** 				}
1624:FreeRTOS/tasks.c **** 
1625:FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1626:FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
1627:FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1628:FreeRTOS/tasks.c **** 				time. */
1629:FreeRTOS/tasks.c **** 				if( uxPendedTicks > ( UBaseT_t ) 0U )
 1887              		.loc 1 1629 0
 1888 009e 194B     		ldr	r3, .L147+28	@ tmp161,
 1889 00a0 1B68     		ldr	r3, [r3]	@ D.6608, uxPendedTicks
 1890 00a2 002B     		cmp	r3, #0	@ D.6608,
 1891 00a4 11D0     		beq	.L142	@,
1630:FreeRTOS/tasks.c **** 				{
1631:FreeRTOS/tasks.c **** 					while( uxPendedTicks > ( UBaseT_t ) 0U )
 1892              		.loc 1 1631 0
 1893 00a6 0CE0     		b	.L143	@
 1894              	.L145:
1632:FreeRTOS/tasks.c **** 					{
1633:FreeRTOS/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 1895              		.loc 1 1633 0
 1896 00a8 FFF7FEFF 		bl	xTaskIncrementTick	@
 1897 00ac 0346     		mov	r3, r0	@ D.6613,
 1898 00ae 002B     		cmp	r3, #0	@ D.6613,
 1899 00b0 02D0     		beq	.L144	@,
1634:FreeRTOS/tasks.c **** 						{
1635:FreeRTOS/tasks.c **** 							xYieldPending = pdTRUE;
 1900              		.loc 1 1635 0
 1901 00b2 134B     		ldr	r3, .L147+24	@ tmp162,
 1902 00b4 0122     		movs	r2, #1	@ tmp163,
 1903 00b6 1A60     		str	r2, [r3]	@ tmp163, xYieldPending
 1904              	.L144:
1636:FreeRTOS/tasks.c **** 						}
1637:FreeRTOS/tasks.c **** 						else
1638:FreeRTOS/tasks.c **** 						{
1639:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1640:FreeRTOS/tasks.c **** 						}
1641:FreeRTOS/tasks.c **** 						--uxPendedTicks;
 1905              		.loc 1 1641 0
 1906 00b8 124B     		ldr	r3, .L147+28	@ tmp164,
 1907 00ba 1B68     		ldr	r3, [r3]	@ D.6608, uxPendedTicks
 1908 00bc 013B     		subs	r3, r3, #1	@ D.6608, D.6608,
 1909 00be 114A     		ldr	r2, .L147+28	@ tmp165,
 1910 00c0 1360     		str	r3, [r2]	@ D.6608, uxPendedTicks
 1911              	.L143:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 64


1631:FreeRTOS/tasks.c **** 					{
 1912              		.loc 1 1631 0
 1913 00c2 104B     		ldr	r3, .L147+28	@ tmp166,
 1914 00c4 1B68     		ldr	r3, [r3]	@ D.6608, uxPendedTicks
 1915 00c6 002B     		cmp	r3, #0	@ D.6608,
 1916 00c8 EED1     		bne	.L145	@,
 1917              	.L142:
1642:FreeRTOS/tasks.c **** 					}
1643:FreeRTOS/tasks.c **** 				}
1644:FreeRTOS/tasks.c **** 				else
1645:FreeRTOS/tasks.c **** 				{
1646:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1647:FreeRTOS/tasks.c **** 				}
1648:FreeRTOS/tasks.c **** 
1649:FreeRTOS/tasks.c **** 				if( xYieldPending == pdTRUE )
 1918              		.loc 1 1649 0
 1919 00ca 0D4B     		ldr	r3, .L147+24	@ tmp167,
 1920 00cc 1B68     		ldr	r3, [r3]	@ D.6613, xYieldPending
 1921 00ce 012B     		cmp	r3, #1	@ D.6613,
 1922 00d0 03D1     		bne	.L139	@,
1650:FreeRTOS/tasks.c **** 				{
1651:FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1652:FreeRTOS/tasks.c **** 					{
1653:FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
 1923              		.loc 1 1653 0
 1924 00d2 0123     		movs	r3, #1	@ tmp168,
 1925 00d4 7B60     		str	r3, [r7, #4]	@ tmp168, xAlreadyYielded
1654:FreeRTOS/tasks.c **** 					}
1655:FreeRTOS/tasks.c **** 					#endif
1656:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1926              		.loc 1 1656 0
 1927 00d6 FFF7FEFF 		bl	vPortYield	@
 1928              	.L139:
1657:FreeRTOS/tasks.c **** 				}
1658:FreeRTOS/tasks.c **** 				else
1659:FreeRTOS/tasks.c **** 				{
1660:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1661:FreeRTOS/tasks.c **** 				}
1662:FreeRTOS/tasks.c **** 			}
1663:FreeRTOS/tasks.c **** 		}
1664:FreeRTOS/tasks.c **** 		else
1665:FreeRTOS/tasks.c **** 		{
1666:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1667:FreeRTOS/tasks.c **** 		}
1668:FreeRTOS/tasks.c **** 	}
1669:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1929              		.loc 1 1669 0
 1930 00da FFF7FEFF 		bl	vPortExitCritical	@
1670:FreeRTOS/tasks.c **** 
1671:FreeRTOS/tasks.c **** 	return xAlreadyYielded;
 1931              		.loc 1 1671 0
 1932 00de 7B68     		ldr	r3, [r7, #4]	@ D.6614, xAlreadyYielded
1672:FreeRTOS/tasks.c **** }
 1933              		.loc 1 1672 0
 1934 00e0 1846     		mov	r0, r3	@, <retval>
 1935 00e2 0837     		adds	r7, r7, #8	@,,
 1936              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 65


 1937 00e4 BD46     		mov	sp, r7	@,
 1938              		.cfi_def_cfa_register 13
 1939              		@ sp needed	@
 1940 00e6 80BD     		pop	{r7, pc}	@
 1941              	.L148:
 1942              		.align	2
 1943              	.L147:
 1944 00e8 00000000 		.word	uxSchedulerSuspended
 1945 00ec 00000000 		.word	uxCurrentNumberOfTasks
 1946 00f0 00000000 		.word	xPendingReadyList
 1947 00f4 00000000 		.word	uxTopReadyPriority
 1948 00f8 00000000 		.word	pxReadyTasksLists
 1949 00fc 00000000 		.word	pxCurrentTCB
 1950 0100 00000000 		.word	xYieldPending
 1951 0104 00000000 		.word	uxPendedTicks
 1952              		.cfi_endproc
 1953              	.LFE14:
 1954              		.size	xTaskResumeAll, .-xTaskResumeAll
 1955              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1956              		.align	2
 1957              		.global	xTaskGetTickCount
 1958              		.thumb
 1959              		.thumb_func
 1960              		.type	xTaskGetTickCount, %function
 1961              	xTaskGetTickCount:
 1962              	.LFB15:
1673:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1674:FreeRTOS/tasks.c **** 
1675:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCount( void )
1676:FreeRTOS/tasks.c **** {
 1963              		.loc 1 1676 0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 8
 1966              		@ frame_needed = 1, uses_anonymous_args = 0
 1967 0000 80B5     		push	{r7, lr}	@
 1968              		.cfi_def_cfa_offset 8
 1969              		.cfi_offset 7, -8
 1970              		.cfi_offset 14, -4
 1971 0002 82B0     		sub	sp, sp, #8	@,,
 1972              		.cfi_def_cfa_offset 16
 1973 0004 00AF     		add	r7, sp, #0	@,,
 1974              		.cfi_def_cfa_register 7
1677:FreeRTOS/tasks.c **** TickT_t xTicks;
1678:FreeRTOS/tasks.c **** 
1679:FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1680:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1975              		.loc 1 1680 0
 1976 0006 FFF7FEFF 		bl	vPortEnterCritical	@
1681:FreeRTOS/tasks.c **** 	{
1682:FreeRTOS/tasks.c **** 		xTicks = xTickCount;
 1977              		.loc 1 1682 0
 1978 000a 054B     		ldr	r3, .L151	@ tmp112,
 1979 000c 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 1980 000e 7B60     		str	r3, [r7, #4]	@ tmp113, xTicks
1683:FreeRTOS/tasks.c **** 	}
1684:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1981              		.loc 1 1684 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 66


 1982 0010 FFF7FEFF 		bl	vPortExitCritical	@
1685:FreeRTOS/tasks.c **** 
1686:FreeRTOS/tasks.c **** 	return xTicks;
 1983              		.loc 1 1686 0
 1984 0014 7B68     		ldr	r3, [r7, #4]	@ D.6615, xTicks
1687:FreeRTOS/tasks.c **** }
 1985              		.loc 1 1687 0
 1986 0016 1846     		mov	r0, r3	@, <retval>
 1987 0018 0837     		adds	r7, r7, #8	@,,
 1988              		.cfi_def_cfa_offset 8
 1989 001a BD46     		mov	sp, r7	@,
 1990              		.cfi_def_cfa_register 13
 1991              		@ sp needed	@
 1992 001c 80BD     		pop	{r7, pc}	@
 1993              	.L152:
 1994 001e 00BF     		.align	2
 1995              	.L151:
 1996 0020 00000000 		.word	xTickCount
 1997              		.cfi_endproc
 1998              	.LFE15:
 1999              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2000              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2001              		.align	2
 2002              		.global	xTaskGetTickCountFromISR
 2003              		.thumb
 2004              		.thumb_func
 2005              		.type	xTaskGetTickCountFromISR, %function
 2006              	xTaskGetTickCountFromISR:
 2007              	.LFB16:
1688:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1689:FreeRTOS/tasks.c **** 
1690:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCountFromISR( void )
1691:FreeRTOS/tasks.c **** {
 2008              		.loc 1 1691 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 8
 2011              		@ frame_needed = 1, uses_anonymous_args = 0
 2012 0000 80B5     		push	{r7, lr}	@
 2013              		.cfi_def_cfa_offset 8
 2014              		.cfi_offset 7, -8
 2015              		.cfi_offset 14, -4
 2016 0002 82B0     		sub	sp, sp, #8	@,,
 2017              		.cfi_def_cfa_offset 16
 2018 0004 00AF     		add	r7, sp, #0	@,,
 2019              		.cfi_def_cfa_register 7
1692:FreeRTOS/tasks.c **** TickT_t xReturn;
1693:FreeRTOS/tasks.c **** UBaseT_t uxSavedInterruptStatus;
1694:FreeRTOS/tasks.c **** 
1695:FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1696:FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1697:FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1698:FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1699:FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1700:FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1701:FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1702:FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1703:FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 67


1704:FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1705:FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1706:FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1707:FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1708:FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1709:FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2020              		.loc 1 1709 0
 2021 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority	@
1710:FreeRTOS/tasks.c **** 
1711:FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2022              		.loc 1 1711 0
 2023 000a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2024 000e 7860     		str	r0, [r7, #4]	@, uxSavedInterruptStatus
1712:FreeRTOS/tasks.c **** 	{
1713:FreeRTOS/tasks.c **** 		xReturn = xTickCount;
 2025              		.loc 1 1713 0
 2026 0010 054B     		ldr	r3, .L155	@ tmp112,
 2027 0012 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 2028 0014 3B60     		str	r3, [r7]	@ tmp113, xReturn
1714:FreeRTOS/tasks.c **** 	}
1715:FreeRTOS/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2029              		.loc 1 1715 0
 2030 0016 7868     		ldr	r0, [r7, #4]	@, uxSavedInterruptStatus
 2031 0018 FFF7FEFF 		bl	vPortClearInterruptMask	@
1716:FreeRTOS/tasks.c **** 
1717:FreeRTOS/tasks.c **** 	return xReturn;
 2032              		.loc 1 1717 0
 2033 001c 3B68     		ldr	r3, [r7]	@ D.6616, xReturn
1718:FreeRTOS/tasks.c **** }
 2034              		.loc 1 1718 0
 2035 001e 1846     		mov	r0, r3	@, <retval>
 2036 0020 0837     		adds	r7, r7, #8	@,,
 2037              		.cfi_def_cfa_offset 8
 2038 0022 BD46     		mov	sp, r7	@,
 2039              		.cfi_def_cfa_register 13
 2040              		@ sp needed	@
 2041 0024 80BD     		pop	{r7, pc}	@
 2042              	.L156:
 2043 0026 00BF     		.align	2
 2044              	.L155:
 2045 0028 00000000 		.word	xTickCount
 2046              		.cfi_endproc
 2047              	.LFE16:
 2048              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2049              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2050              		.align	2
 2051              		.global	uxTaskGetNumberOfTasks
 2052              		.thumb
 2053              		.thumb_func
 2054              		.type	uxTaskGetNumberOfTasks, %function
 2055              	uxTaskGetNumberOfTasks:
 2056              	.LFB17:
1719:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1720:FreeRTOS/tasks.c **** 
1721:FreeRTOS/tasks.c **** UBaseT_t uxTaskGetNumberOfTasks( void )
1722:FreeRTOS/tasks.c **** {
 2057              		.loc 1 1722 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 68


 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 0
 2060              		@ frame_needed = 1, uses_anonymous_args = 0
 2061              		@ link register save eliminated.
 2062 0000 80B4     		push	{r7}	@
 2063              		.cfi_def_cfa_offset 4
 2064              		.cfi_offset 7, -4
 2065 0002 00AF     		add	r7, sp, #0	@,,
 2066              		.cfi_def_cfa_register 7
1723:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1724:FreeRTOS/tasks.c **** 	BaseT_t. */
1725:FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 2067              		.loc 1 1725 0
 2068 0004 024B     		ldr	r3, .L159	@ tmp112,
 2069 0006 1B68     		ldr	r3, [r3]	@ D.6617, uxCurrentNumberOfTasks
1726:FreeRTOS/tasks.c **** }
 2070              		.loc 1 1726 0
 2071 0008 1846     		mov	r0, r3	@, <retval>
 2072 000a BD46     		mov	sp, r7	@,
 2073              		.cfi_def_cfa_register 13
 2074              		@ sp needed	@
 2075 000c 80BC     		pop	{r7}	@
 2076              		.cfi_restore 7
 2077              		.cfi_def_cfa_offset 0
 2078 000e 7047     		bx	lr	@
 2079              	.L160:
 2080              		.align	2
 2081              	.L159:
 2082 0010 00000000 		.word	uxCurrentNumberOfTasks
 2083              		.cfi_endproc
 2084              	.LFE17:
 2085              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2086              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2087              		.align	2
 2088              		.global	uxTaskGetSystemState
 2089              		.thumb
 2090              		.thumb_func
 2091              		.type	uxTaskGetSystemState, %function
 2092              	uxTaskGetSystemState:
 2093              	.LFB18:
1727:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:FreeRTOS/tasks.c **** 
1729:FreeRTOS/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1730:FreeRTOS/tasks.c **** 
1731:FreeRTOS/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1732:FreeRTOS/tasks.c **** 	{
1733:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1734:FreeRTOS/tasks.c **** 
1735:FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1736:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1737:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1738:FreeRTOS/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1739:FreeRTOS/tasks.c **** 	}
1740:FreeRTOS/tasks.c **** 
1741:FreeRTOS/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1742:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1743:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 69


1744:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1745:FreeRTOS/tasks.c **** 
1746:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseT_t uxArraySize,
1747:FreeRTOS/tasks.c **** 	{
 2094              		.loc 1 1747 0
 2095              		.cfi_startproc
 2096              		@ args = 0, pretend = 0, frame = 24
 2097              		@ frame_needed = 1, uses_anonymous_args = 0
 2098 0000 80B5     		push	{r7, lr}	@
 2099              		.cfi_def_cfa_offset 8
 2100              		.cfi_offset 7, -8
 2101              		.cfi_offset 14, -4
 2102 0002 86B0     		sub	sp, sp, #24	@,,
 2103              		.cfi_def_cfa_offset 32
 2104 0004 00AF     		add	r7, sp, #0	@,,
 2105              		.cfi_def_cfa_register 7
 2106 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 2107 0008 B960     		str	r1, [r7, #8]	@ uxArraySize, uxArraySize
 2108 000a 7A60     		str	r2, [r7, #4]	@ pulTotalRunTime, pulTotalRunTime
1748:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2109              		.loc 1 1748 0
 2110 000c 0023     		movs	r3, #0	@ tmp131,
 2111 000e 7B61     		str	r3, [r7, #20]	@ tmp131, uxTask
 2112 0010 0823     		movs	r3, #8	@ tmp132,
 2113 0012 3B61     		str	r3, [r7, #16]	@ tmp132, uxQueue
1749:FreeRTOS/tasks.c **** 
1750:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 2114              		.loc 1 1750 0
 2115 0014 FFF7FEFF 		bl	vTaskSuspendAll	@
1751:FreeRTOS/tasks.c **** 		{
1752:FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1753:FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2116              		.loc 1 1753 0
 2117 0018 304B     		ldr	r3, .L166	@ tmp133,
 2118 001a 1B68     		ldr	r3, [r3]	@ D.6618, uxCurrentNumberOfTasks
 2119 001c BA68     		ldr	r2, [r7, #8]	@ tmp134, uxArraySize
 2120 001e 9A42     		cmp	r2, r3	@ tmp134, D.6618
 2121 0020 54D3     		bcc	.L162	@,
 2122              	.L163:
1754:FreeRTOS/tasks.c **** 			{
1755:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1756:FreeRTOS/tasks.c **** 				task in the Ready state. */
1757:FreeRTOS/tasks.c **** 				do
1758:FreeRTOS/tasks.c **** 				{
1759:FreeRTOS/tasks.c **** 					uxQueue--;
 2123              		.loc 1 1759 0 discriminator 1
 2124 0022 3B69     		ldr	r3, [r7, #16]	@ tmp136, uxQueue
 2125 0024 013B     		subs	r3, r3, #1	@ tmp135, tmp136,
 2126 0026 3B61     		str	r3, [r7, #16]	@ tmp135, uxQueue
1760:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
 2127              		.loc 1 1760 0 discriminator 1
 2128 0028 7B69     		ldr	r3, [r7, #20]	@ tmp137, uxTask
 2129 002a 5B01     		lsls	r3, r3, #5	@ D.6618, tmp137,
 2130 002c FA68     		ldr	r2, [r7, #12]	@ tmp138, pxTaskStatusArray
 2131 002e D018     		adds	r0, r2, r3	@ D.6619, tmp138, D.6618
 2132 0030 3A69     		ldr	r2, [r7, #16]	@ tmp139, uxQueue
 2133 0032 1346     		mov	r3, r2	@ tmp140, tmp139
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 70


 2134 0034 9B00     		lsls	r3, r3, #2	@ tmp140, tmp140,
 2135 0036 1344     		add	r3, r3, r2	@ tmp140, tmp139
 2136 0038 9B00     		lsls	r3, r3, #2	@ tmp141, tmp140,
 2137 003a 294A     		ldr	r2, .L166+4	@ tmp142,
 2138 003c 1344     		add	r3, r3, r2	@ D.6620, tmp142
 2139 003e 0122     		movs	r2, #1	@,
 2140 0040 1946     		mov	r1, r3	@, D.6620
 2141 0042 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2142 0046 0246     		mov	r2, r0	@ D.6618,
 2143 0048 7B69     		ldr	r3, [r7, #20]	@ tmp144, uxTask
 2144 004a 1344     		add	r3, r3, r2	@ tmp143, D.6618
 2145 004c 7B61     		str	r3, [r7, #20]	@ tmp143, uxTask
1761:FreeRTOS/tasks.c **** 
1762:FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseT_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts a
 2146              		.loc 1 1762 0 discriminator 1
 2147 004e 3B69     		ldr	r3, [r7, #16]	@ tmp145, uxQueue
 2148 0050 002B     		cmp	r3, #0	@ tmp145,
 2149 0052 E6D1     		bne	.L163	@,
1763:FreeRTOS/tasks.c **** 
1764:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1765:FreeRTOS/tasks.c **** 				task in the Blocked state. */
1766:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
 2150              		.loc 1 1766 0
 2151 0054 7B69     		ldr	r3, [r7, #20]	@ tmp146, uxTask
 2152 0056 5B01     		lsls	r3, r3, #5	@ D.6618, tmp146,
 2153 0058 FA68     		ldr	r2, [r7, #12]	@ tmp147, pxTaskStatusArray
 2154 005a D018     		adds	r0, r2, r3	@ D.6619, tmp147, D.6618
 2155 005c 214B     		ldr	r3, .L166+8	@ tmp148,
 2156 005e 1B68     		ldr	r3, [r3]	@ D.6620, pxDelayedTaskList
 2157 0060 0222     		movs	r2, #2	@,
 2158 0062 1946     		mov	r1, r3	@, D.6620
 2159 0064 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2160 0068 0246     		mov	r2, r0	@ D.6618,
 2161 006a 7B69     		ldr	r3, [r7, #20]	@ tmp150, uxTask
 2162 006c 1344     		add	r3, r3, r2	@ tmp149, D.6618
 2163 006e 7B61     		str	r3, [r7, #20]	@ tmp149, uxTask
1767:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2164              		.loc 1 1767 0
 2165 0070 7B69     		ldr	r3, [r7, #20]	@ tmp151, uxTask
 2166 0072 5B01     		lsls	r3, r3, #5	@ D.6618, tmp151,
 2167 0074 FA68     		ldr	r2, [r7, #12]	@ tmp152, pxTaskStatusArray
 2168 0076 D018     		adds	r0, r2, r3	@ D.6619, tmp152, D.6618
 2169 0078 1B4B     		ldr	r3, .L166+12	@ tmp153,
 2170 007a 1B68     		ldr	r3, [r3]	@ D.6620, pxOverflowDelayedTaskList
 2171 007c 0222     		movs	r2, #2	@,
 2172 007e 1946     		mov	r1, r3	@, D.6620
 2173 0080 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2174 0084 0246     		mov	r2, r0	@ D.6618,
 2175 0086 7B69     		ldr	r3, [r7, #20]	@ tmp155, uxTask
 2176 0088 1344     		add	r3, r3, r2	@ tmp154, D.6618
 2177 008a 7B61     		str	r3, [r7, #20]	@ tmp154, uxTask
1768:FreeRTOS/tasks.c **** 
1769:FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1770:FreeRTOS/tasks.c **** 				{
1771:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1772:FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1773:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 71


 2178              		.loc 1 1773 0
 2179 008c 7B69     		ldr	r3, [r7, #20]	@ tmp156, uxTask
 2180 008e 5B01     		lsls	r3, r3, #5	@ D.6618, tmp156,
 2181 0090 FA68     		ldr	r2, [r7, #12]	@ tmp157, pxTaskStatusArray
 2182 0092 1344     		add	r3, r3, r2	@ D.6619, tmp157
 2183 0094 0422     		movs	r2, #4	@,
 2184 0096 1549     		ldr	r1, .L166+16	@,
 2185 0098 1846     		mov	r0, r3	@, D.6619
 2186 009a FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2187 009e 0246     		mov	r2, r0	@ D.6618,
 2188 00a0 7B69     		ldr	r3, [r7, #20]	@ tmp159, uxTask
 2189 00a2 1344     		add	r3, r3, r2	@ tmp158, D.6618
 2190 00a4 7B61     		str	r3, [r7, #20]	@ tmp158, uxTask
1774:FreeRTOS/tasks.c **** 				}
1775:FreeRTOS/tasks.c **** 				#endif
1776:FreeRTOS/tasks.c **** 
1777:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1778:FreeRTOS/tasks.c **** 				{
1779:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1780:FreeRTOS/tasks.c **** 					each task in the Suspended state. */
1781:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
 2191              		.loc 1 1781 0
 2192 00a6 7B69     		ldr	r3, [r7, #20]	@ tmp160, uxTask
 2193 00a8 5B01     		lsls	r3, r3, #5	@ D.6618, tmp160,
 2194 00aa FA68     		ldr	r2, [r7, #12]	@ tmp161, pxTaskStatusArray
 2195 00ac 1344     		add	r3, r3, r2	@ D.6619, tmp161
 2196 00ae 0322     		movs	r2, #3	@,
 2197 00b0 0F49     		ldr	r1, .L166+20	@,
 2198 00b2 1846     		mov	r0, r3	@, D.6619
 2199 00b4 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2200 00b8 0246     		mov	r2, r0	@ D.6618,
 2201 00ba 7B69     		ldr	r3, [r7, #20]	@ tmp163, uxTask
 2202 00bc 1344     		add	r3, r3, r2	@ tmp162, D.6618
 2203 00be 7B61     		str	r3, [r7, #20]	@ tmp162, uxTask
1782:FreeRTOS/tasks.c **** 				}
1783:FreeRTOS/tasks.c **** 				#endif
1784:FreeRTOS/tasks.c **** 
1785:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1786:FreeRTOS/tasks.c **** 				{
1787:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1788:FreeRTOS/tasks.c **** 					{
1789:FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1790:FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1791:FreeRTOS/tasks.c **** 						#else
1792:FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1793:FreeRTOS/tasks.c **** 						#endif
1794:FreeRTOS/tasks.c **** 					}
1795:FreeRTOS/tasks.c **** 				}
1796:FreeRTOS/tasks.c **** 				#else
1797:FreeRTOS/tasks.c **** 				{
1798:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
 2204              		.loc 1 1798 0
 2205 00c0 7B68     		ldr	r3, [r7, #4]	@ tmp164, pulTotalRunTime
 2206 00c2 002B     		cmp	r3, #0	@ tmp164,
 2207 00c4 02D0     		beq	.L162	@,
1799:FreeRTOS/tasks.c **** 					{
1800:FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 72


 2208              		.loc 1 1800 0
 2209 00c6 7B68     		ldr	r3, [r7, #4]	@ tmp165, pulTotalRunTime
 2210 00c8 0022     		movs	r2, #0	@ tmp166,
 2211 00ca 1A60     		str	r2, [r3]	@ tmp166, *pulTotalRunTime_43(D)
 2212              	.L162:
1801:FreeRTOS/tasks.c **** 					}
1802:FreeRTOS/tasks.c **** 				}
1803:FreeRTOS/tasks.c **** 				#endif
1804:FreeRTOS/tasks.c **** 			}
1805:FreeRTOS/tasks.c **** 			else
1806:FreeRTOS/tasks.c **** 			{
1807:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1808:FreeRTOS/tasks.c **** 			}
1809:FreeRTOS/tasks.c **** 		}
1810:FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
 2213              		.loc 1 1810 0
 2214 00cc FFF7FEFF 		bl	xTaskResumeAll	@
1811:FreeRTOS/tasks.c **** 
1812:FreeRTOS/tasks.c **** 		return uxTask;
 2215              		.loc 1 1812 0
 2216 00d0 7B69     		ldr	r3, [r7, #20]	@ D.6621, uxTask
1813:FreeRTOS/tasks.c **** 	}
 2217              		.loc 1 1813 0
 2218 00d2 1846     		mov	r0, r3	@, <retval>
 2219 00d4 1837     		adds	r7, r7, #24	@,,
 2220              		.cfi_def_cfa_offset 8
 2221 00d6 BD46     		mov	sp, r7	@,
 2222              		.cfi_def_cfa_register 13
 2223              		@ sp needed	@
 2224 00d8 80BD     		pop	{r7, pc}	@
 2225              	.L167:
 2226 00da 00BF     		.align	2
 2227              	.L166:
 2228 00dc 00000000 		.word	uxCurrentNumberOfTasks
 2229 00e0 00000000 		.word	pxReadyTasksLists
 2230 00e4 00000000 		.word	pxDelayedTaskList
 2231 00e8 00000000 		.word	pxOverflowDelayedTaskList
 2232 00ec 00000000 		.word	xTasksWaitingTermination
 2233 00f0 00000000 		.word	xSuspendedTaskList
 2234              		.cfi_endproc
 2235              	.LFE18:
 2236              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 2237              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2238              		.align	2
 2239              		.global	xTaskIncrementTick
 2240              		.thumb
 2241              		.thumb_func
 2242              		.type	xTaskIncrementTick, %function
 2243              	xTaskIncrementTick:
 2244              	.LFB19:
1814:FreeRTOS/tasks.c **** 
1815:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1816:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1817:FreeRTOS/tasks.c **** 
1818:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 73


1821:FreeRTOS/tasks.c **** 	{
1822:FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1823:FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1824:FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1825:FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
1826:FreeRTOS/tasks.c **** 	}
1827:FreeRTOS/tasks.c **** 
1828:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1829:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1830:FreeRTOS/tasks.c **** 
1831:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1832:FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1833:FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1834:FreeRTOS/tasks.c **** 1. */
1835:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1836:FreeRTOS/tasks.c **** 
1837:FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickT_t xTicksToJump )
1838:FreeRTOS/tasks.c **** 	{
1839:FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1840:FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1841:FreeRTOS/tasks.c **** 		each stepped tick. */
1842:FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1843:FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
1844:FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1845:FreeRTOS/tasks.c **** 	}
1846:FreeRTOS/tasks.c **** 
1847:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1848:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1849:FreeRTOS/tasks.c **** 
1850:FreeRTOS/tasks.c **** BaseT_t xTaskIncrementTick( void )
1851:FreeRTOS/tasks.c **** {
 2245              		.loc 1 1851 0
 2246              		.cfi_startproc
 2247              		@ args = 0, pretend = 0, frame = 24
 2248              		@ frame_needed = 1, uses_anonymous_args = 0
 2249 0000 80B5     		push	{r7, lr}	@
 2250              		.cfi_def_cfa_offset 8
 2251              		.cfi_offset 7, -8
 2252              		.cfi_offset 14, -4
 2253 0002 86B0     		sub	sp, sp, #24	@,,
 2254              		.cfi_def_cfa_offset 32
 2255 0004 00AF     		add	r7, sp, #0	@,,
 2256              		.cfi_def_cfa_register 7
1852:FreeRTOS/tasks.c **** TCB_t * pxTCB;
1853:FreeRTOS/tasks.c **** TickT_t xItemValue;
1854:FreeRTOS/tasks.c **** BaseT_t xSwitchRequired = pdFALSE;
 2257              		.loc 1 1854 0
 2258 0006 0023     		movs	r3, #0	@ tmp146,
 2259 0008 7B61     		str	r3, [r7, #20]	@ tmp146, xSwitchRequired
1855:FreeRTOS/tasks.c **** 
1856:FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1857:FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1858:FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1859:FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1860:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2260              		.loc 1 1860 0
 2261 000a 514B     		ldr	r3, .L185	@ tmp147,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 74


 2262 000c 1B68     		ldr	r3, [r3]	@ D.6623, uxSchedulerSuspended
 2263 000e 002B     		cmp	r3, #0	@ D.6623,
 2264 0010 40F08C80 		bne	.L169	@,
1861:FreeRTOS/tasks.c **** 	{
1862:FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1863:FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
1864:FreeRTOS/tasks.c **** 		++xTickCount;
 2265              		.loc 1 1864 0
 2266 0014 4F4B     		ldr	r3, .L185+4	@ tmp148,
 2267 0016 1B68     		ldr	r3, [r3]	@ D.6623, xTickCount
 2268 0018 0133     		adds	r3, r3, #1	@ D.6623, D.6623,
 2269 001a 4E4A     		ldr	r2, .L185+4	@ tmp149,
 2270 001c 1360     		str	r3, [r2]	@ D.6623, xTickCount
 2271              	.LBB8:
1865:FreeRTOS/tasks.c **** 
1866:FreeRTOS/tasks.c **** 		{
1867:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1868:FreeRTOS/tasks.c **** 			block. */
1869:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 2272              		.loc 1 1869 0
 2273 001e 4D4B     		ldr	r3, .L185+4	@ tmp150,
 2274 0020 1B68     		ldr	r3, [r3]	@ tmp151, xTickCount
 2275 0022 3B61     		str	r3, [r7, #16]	@ tmp151, xConstTickCount
1870:FreeRTOS/tasks.c **** 
1871:FreeRTOS/tasks.c **** 			if( xConstTickCount == ( TickT_t ) 0U )
 2276              		.loc 1 1871 0
 2277 0024 3B69     		ldr	r3, [r7, #16]	@ tmp152, xConstTickCount
 2278 0026 002B     		cmp	r3, #0	@ tmp152,
 2279 0028 18D1     		bne	.L170	@,
 2280              	.LBB9:
1872:FreeRTOS/tasks.c **** 			{
1873:FreeRTOS/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 2281              		.loc 1 1873 0
 2282 002a 4B4B     		ldr	r3, .L185+8	@ tmp153,
 2283 002c 1B68     		ldr	r3, [r3]	@ D.6624, pxDelayedTaskList
 2284 002e 1B68     		ldr	r3, [r3]	@ D.6623, _20->uxNumberOfItems
 2285 0030 002B     		cmp	r3, #0	@ D.6623,
 2286 0032 02D0     		beq	.L171	@,
 2287              		.loc 1 1873 0 is_stmt 0 discriminator 1
 2288 0034 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2289              	.L172:
 2290 0038 FEE7     		b	.L172	@
 2291              	.L171:
 2292              		.loc 1 1873 0 discriminator 2
 2293 003a 474B     		ldr	r3, .L185+8	@ tmp154,
 2294 003c 1B68     		ldr	r3, [r3]	@ tmp155, pxDelayedTaskList
 2295 003e FB60     		str	r3, [r7, #12]	@ tmp155, pxTemp
 2296 0040 464B     		ldr	r3, .L185+12	@ tmp156,
 2297 0042 1B68     		ldr	r3, [r3]	@ D.6624, pxOverflowDelayedTaskList
 2298 0044 444A     		ldr	r2, .L185+8	@ tmp157,
 2299 0046 1360     		str	r3, [r2]	@ D.6624, pxDelayedTaskList
 2300 0048 444A     		ldr	r2, .L185+12	@ tmp158,
 2301 004a FB68     		ldr	r3, [r7, #12]	@ tmp159, pxTemp
 2302 004c 1360     		str	r3, [r2]	@ tmp159, pxOverflowDelayedTaskList
 2303 004e 444B     		ldr	r3, .L185+16	@ tmp160,
 2304 0050 1B68     		ldr	r3, [r3]	@ D.6625, xNumOfOverflows
 2305 0052 0133     		adds	r3, r3, #1	@ D.6625, D.6625,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 75


 2306 0054 424A     		ldr	r2, .L185+16	@ tmp161,
 2307 0056 1360     		str	r3, [r2]	@ D.6625, xNumOfOverflows
 2308 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 2309              	.L170:
 2310              	.LBE9:
1874:FreeRTOS/tasks.c **** 			}
1875:FreeRTOS/tasks.c **** 			else
1876:FreeRTOS/tasks.c **** 			{
1877:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1878:FreeRTOS/tasks.c **** 			}
1879:FreeRTOS/tasks.c **** 
1880:FreeRTOS/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1881:FreeRTOS/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1882:FreeRTOS/tasks.c **** 			has been found whose block time has not expired there is no need to
1883:FreeRTOS/tasks.c **** 			look any further	down the list. */
1884:FreeRTOS/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 2311              		.loc 1 1884 0 is_stmt 1
 2312 005c 414B     		ldr	r3, .L185+20	@ tmp162,
 2313 005e 1B68     		ldr	r3, [r3]	@ D.6623, xNextTaskUnblockTime
 2314 0060 3A69     		ldr	r2, [r7, #16]	@ tmp163, xConstTickCount
 2315 0062 9A42     		cmp	r2, r3	@ tmp163, D.6623
 2316 0064 4DD3     		bcc	.L173	@,
 2317              	.L180:
1885:FreeRTOS/tasks.c **** 			{
1886:FreeRTOS/tasks.c **** 				for( ;; )
1887:FreeRTOS/tasks.c **** 				{
1888:FreeRTOS/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2318              		.loc 1 1888 0
 2319 0066 3C4B     		ldr	r3, .L185+8	@ tmp164,
 2320 0068 1B68     		ldr	r3, [r3]	@ D.6624, pxDelayedTaskList
 2321 006a 1B68     		ldr	r3, [r3]	@ D.6623, _32->uxNumberOfItems
 2322 006c 002B     		cmp	r3, #0	@ D.6623,
 2323 006e 01D1     		bne	.L174	@,
 2324              		.loc 1 1888 0 is_stmt 0 discriminator 1
 2325 0070 0123     		movs	r3, #1	@ D.6622,
 2326 0072 00E0     		b	.L175	@
 2327              	.L174:
 2328              		.loc 1 1888 0 discriminator 2
 2329 0074 0023     		movs	r3, #0	@ D.6622,
 2330              	.L175:
 2331              		.loc 1 1888 0 discriminator 4
 2332 0076 002B     		cmp	r3, #0	@ D.6622,
 2333 0078 04D0     		beq	.L176	@,
1889:FreeRTOS/tasks.c **** 					{
1890:FreeRTOS/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1891:FreeRTOS/tasks.c **** 						to the maximum possible value so it is extremely
1892:FreeRTOS/tasks.c **** 						unlikely that the
1893:FreeRTOS/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1894:FreeRTOS/tasks.c **** 						next time through. */
1895:FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 2334              		.loc 1 1895 0 is_stmt 1
 2335 007a 3A4B     		ldr	r3, .L185+20	@ tmp165,
 2336 007c 4FF0FF32 		mov	r2, #-1	@ tmp166,
 2337 0080 1A60     		str	r2, [r3]	@ tmp166, xNextTaskUnblockTime
1896:FreeRTOS/tasks.c **** 						break;
 2338              		.loc 1 1896 0
 2339 0082 3EE0     		b	.L173	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 76


 2340              	.L176:
1897:FreeRTOS/tasks.c **** 					}
1898:FreeRTOS/tasks.c **** 					else
1899:FreeRTOS/tasks.c **** 					{
1900:FreeRTOS/tasks.c **** 						/* The delayed list is not empty, get the value of the
1901:FreeRTOS/tasks.c **** 						item at the head of the delayed list.  This is the time
1902:FreeRTOS/tasks.c **** 						at which the task at the head of the delayed list must
1903:FreeRTOS/tasks.c **** 						be removed from the Blocked state. */
1904:FreeRTOS/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2341              		.loc 1 1904 0
 2342 0084 344B     		ldr	r3, .L185+8	@ tmp167,
 2343 0086 1B68     		ldr	r3, [r3]	@ D.6624, pxDelayedTaskList
 2344 0088 DB68     		ldr	r3, [r3, #12]	@ D.6626, _36->xListEnd.pxNext
 2345 008a DB68     		ldr	r3, [r3, #12]	@ tmp168, _37->pvOwner
 2346 008c BB60     		str	r3, [r7, #8]	@ tmp168, pxTCB
1905:FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2347              		.loc 1 1905 0
 2348 008e BB68     		ldr	r3, [r7, #8]	@ tmp169, pxTCB
 2349 0090 5B68     		ldr	r3, [r3, #4]	@ tmp170, pxTCB_38->xGenericListItem.xItemValue
 2350 0092 7B60     		str	r3, [r7, #4]	@ tmp170, xItemValue
1906:FreeRTOS/tasks.c **** 
1907:FreeRTOS/tasks.c **** 						if( xConstTickCount < xItemValue )
 2351              		.loc 1 1907 0
 2352 0094 3A69     		ldr	r2, [r7, #16]	@ tmp171, xConstTickCount
 2353 0096 7B68     		ldr	r3, [r7, #4]	@ tmp172, xItemValue
 2354 0098 9A42     		cmp	r2, r3	@ tmp171, tmp172
 2355 009a 03D2     		bcs	.L177	@,
1908:FreeRTOS/tasks.c **** 						{
1909:FreeRTOS/tasks.c **** 							/* It is not time to unblock this item yet, but the
1910:FreeRTOS/tasks.c **** 							item value is the time at which the task at the head
1911:FreeRTOS/tasks.c **** 							of the blocked list must be removed from the Blocked
1912:FreeRTOS/tasks.c **** 							state -	so record the item value in
1913:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime. */
1914:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
 2356              		.loc 1 1914 0
 2357 009c 314A     		ldr	r2, .L185+20	@ tmp173,
 2358 009e 7B68     		ldr	r3, [r7, #4]	@ tmp174, xItemValue
 2359 00a0 1360     		str	r3, [r2]	@ tmp174, xNextTaskUnblockTime
1915:FreeRTOS/tasks.c **** 							break;
 2360              		.loc 1 1915 0
 2361 00a2 2EE0     		b	.L173	@
 2362              	.L177:
1916:FreeRTOS/tasks.c **** 						}
1917:FreeRTOS/tasks.c **** 						else
1918:FreeRTOS/tasks.c **** 						{
1919:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1920:FreeRTOS/tasks.c **** 						}
1921:FreeRTOS/tasks.c **** 
1922:FreeRTOS/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
1923:FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2363              		.loc 1 1923 0
 2364 00a4 BB68     		ldr	r3, [r7, #8]	@ tmp175, pxTCB
 2365 00a6 0433     		adds	r3, r3, #4	@ D.6627, tmp175,
 2366 00a8 1846     		mov	r0, r3	@, D.6627
 2367 00aa FFF7FEFF 		bl	uxListRemove	@
1924:FreeRTOS/tasks.c **** 
1925:FreeRTOS/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 77


1926:FreeRTOS/tasks.c **** 						it from the event list. */
1927:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2368              		.loc 1 1927 0
 2369 00ae BB68     		ldr	r3, [r7, #8]	@ tmp176, pxTCB
 2370 00b0 9B6A     		ldr	r3, [r3, #40]	@ D.6628, pxTCB_38->xEventListItem.pvContainer
 2371 00b2 002B     		cmp	r3, #0	@ D.6628,
 2372 00b4 04D0     		beq	.L178	@,
1928:FreeRTOS/tasks.c **** 						{
1929:FreeRTOS/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2373              		.loc 1 1929 0
 2374 00b6 BB68     		ldr	r3, [r7, #8]	@ tmp177, pxTCB
 2375 00b8 1833     		adds	r3, r3, #24	@ D.6627, tmp177,
 2376 00ba 1846     		mov	r0, r3	@, D.6627
 2377 00bc FFF7FEFF 		bl	uxListRemove	@
 2378              	.L178:
1930:FreeRTOS/tasks.c **** 						}
1931:FreeRTOS/tasks.c **** 						else
1932:FreeRTOS/tasks.c **** 						{
1933:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1934:FreeRTOS/tasks.c **** 						}
1935:FreeRTOS/tasks.c **** 
1936:FreeRTOS/tasks.c **** 						/* Place the unblocked task into the appropriate ready
1937:FreeRTOS/tasks.c **** 						list. */
1938:FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 2379              		.loc 1 1938 0
 2380 00c0 BB68     		ldr	r3, [r7, #8]	@ tmp178, pxTCB
 2381 00c2 DB6A     		ldr	r3, [r3, #44]	@ D.6623, pxTCB_38->uxPriority
 2382 00c4 0122     		movs	r2, #1	@ tmp179,
 2383 00c6 9A40     		lsls	r2, r2, r3	@ D.6623, tmp179, D.6623
 2384 00c8 274B     		ldr	r3, .L185+24	@ tmp180,
 2385 00ca 1B68     		ldr	r3, [r3]	@ D.6623, uxTopReadyPriority
 2386 00cc 1343     		orrs	r3, r3, r2	@, D.6623, D.6623, D.6623
 2387 00ce 264A     		ldr	r2, .L185+24	@ tmp181,
 2388 00d0 1360     		str	r3, [r2]	@ D.6623, uxTopReadyPriority
 2389 00d2 BB68     		ldr	r3, [r7, #8]	@ tmp182, pxTCB
 2390 00d4 DA6A     		ldr	r2, [r3, #44]	@ D.6623, pxTCB_38->uxPriority
 2391 00d6 1346     		mov	r3, r2	@ tmp183, D.6623
 2392 00d8 9B00     		lsls	r3, r3, #2	@ tmp183, tmp183,
 2393 00da 1344     		add	r3, r3, r2	@ tmp183, D.6623
 2394 00dc 9B00     		lsls	r3, r3, #2	@ tmp184, tmp183,
 2395 00de 234A     		ldr	r2, .L185+28	@ tmp185,
 2396 00e0 1A44     		add	r2, r2, r3	@ D.6624, tmp183
 2397 00e2 BB68     		ldr	r3, [r7, #8]	@ tmp186, pxTCB
 2398 00e4 0433     		adds	r3, r3, #4	@ D.6627, tmp186,
 2399 00e6 1946     		mov	r1, r3	@, D.6627
 2400 00e8 1046     		mov	r0, r2	@, D.6624
 2401 00ea FFF7FEFF 		bl	vListInsertEnd	@
1939:FreeRTOS/tasks.c **** 
1940:FreeRTOS/tasks.c **** 						/* A task being unblocked cannot cause an immediate
1941:FreeRTOS/tasks.c **** 						context switch if preemption is turned off. */
1942:FreeRTOS/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
1943:FreeRTOS/tasks.c **** 						{
1944:FreeRTOS/tasks.c **** 							/* Preemption is on, but a context switch should
1945:FreeRTOS/tasks.c **** 							only be performed if the unblocked task has a
1946:FreeRTOS/tasks.c **** 							priority that is equal to or higher than the
1947:FreeRTOS/tasks.c **** 							currently executing task. */
1948:FreeRTOS/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 78


 2402              		.loc 1 1948 0
 2403 00ee BB68     		ldr	r3, [r7, #8]	@ tmp187, pxTCB
 2404 00f0 DA6A     		ldr	r2, [r3, #44]	@ D.6623, pxTCB_38->uxPriority
 2405 00f2 1F4B     		ldr	r3, .L185+32	@ tmp188,
 2406 00f4 1B68     		ldr	r3, [r3]	@ D.6629, pxCurrentTCB
 2407 00f6 DB6A     		ldr	r3, [r3, #44]	@ D.6623, _55->uxPriority
 2408 00f8 9A42     		cmp	r2, r3	@ D.6623, D.6623
 2409 00fa B4D3     		bcc	.L180	@,
1949:FreeRTOS/tasks.c **** 							{
1950:FreeRTOS/tasks.c **** 								xSwitchRequired = pdTRUE;
 2410              		.loc 1 1950 0
 2411 00fc 0123     		movs	r3, #1	@ tmp189,
 2412 00fe 7B61     		str	r3, [r7, #20]	@ tmp189, xSwitchRequired
1951:FreeRTOS/tasks.c **** 							}
1952:FreeRTOS/tasks.c **** 							else
1953:FreeRTOS/tasks.c **** 							{
1954:FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
1955:FreeRTOS/tasks.c **** 							}
1956:FreeRTOS/tasks.c **** 						}
1957:FreeRTOS/tasks.c **** 						#endif /* configUSE_PREEMPTION */
1958:FreeRTOS/tasks.c **** 					}
1959:FreeRTOS/tasks.c **** 				}
 2413              		.loc 1 1959 0
 2414 0100 B1E7     		b	.L180	@
 2415              	.L173:
 2416              	.LBE8:
1960:FreeRTOS/tasks.c **** 			}
1961:FreeRTOS/tasks.c **** 		}
1962:FreeRTOS/tasks.c **** 
1963:FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
1964:FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
1965:FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
1966:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
1967:FreeRTOS/tasks.c **** 		{
1968:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseT_t )
 2417              		.loc 1 1968 0
 2418 0102 1B4B     		ldr	r3, .L185+32	@ tmp190,
 2419 0104 1B68     		ldr	r3, [r3]	@ D.6629, pxCurrentTCB
 2420 0106 DA6A     		ldr	r2, [r3, #44]	@ D.6623, _60->uxPriority
 2421 0108 1849     		ldr	r1, .L185+28	@ tmp191,
 2422 010a 1346     		mov	r3, r2	@ tmp192, D.6623
 2423 010c 9B00     		lsls	r3, r3, #2	@ tmp192, tmp192,
 2424 010e 1344     		add	r3, r3, r2	@ tmp192, D.6623
 2425 0110 9B00     		lsls	r3, r3, #2	@ tmp193, tmp192,
 2426 0112 0B44     		add	r3, r3, r1	@ tmp194, tmp191
 2427 0114 1B68     		ldr	r3, [r3]	@ D.6623, pxReadyTasksLists[_61].uxNumberOfItems
 2428 0116 012B     		cmp	r3, #1	@ D.6623,
 2429 0118 01D9     		bls	.L181	@,
1969:FreeRTOS/tasks.c **** 			{
1970:FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 2430              		.loc 1 1970 0
 2431 011a 0123     		movs	r3, #1	@ tmp195,
 2432 011c 7B61     		str	r3, [r7, #20]	@ tmp195, xSwitchRequired
 2433              	.L181:
1971:FreeRTOS/tasks.c **** 			}
1972:FreeRTOS/tasks.c **** 			else
1973:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 79


1974:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1975:FreeRTOS/tasks.c **** 			}
1976:FreeRTOS/tasks.c **** 		}
1977:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
1978:FreeRTOS/tasks.c **** 
1979:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1980:FreeRTOS/tasks.c **** 		{
1981:FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
1982:FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
1983:FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseT_t ) 0U )
 2434              		.loc 1 1983 0
 2435 011e 154B     		ldr	r3, .L185+36	@ tmp196,
 2436 0120 1B68     		ldr	r3, [r3]	@ D.6623, uxPendedTicks
 2437 0122 002B     		cmp	r3, #0	@ D.6623,
 2438 0124 09D1     		bne	.L182	@,
1984:FreeRTOS/tasks.c **** 			{
1985:FreeRTOS/tasks.c **** 				vApplicationTickHook();
 2439              		.loc 1 1985 0
 2440 0126 FFF7FEFF 		bl	vApplicationTickHook	@
 2441 012a 06E0     		b	.L182	@
 2442              	.L169:
1986:FreeRTOS/tasks.c **** 			}
1987:FreeRTOS/tasks.c **** 			else
1988:FreeRTOS/tasks.c **** 			{
1989:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1990:FreeRTOS/tasks.c **** 			}
1991:FreeRTOS/tasks.c **** 		}
1992:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
1993:FreeRTOS/tasks.c **** 	}
1994:FreeRTOS/tasks.c **** 	else
1995:FreeRTOS/tasks.c **** 	{
1996:FreeRTOS/tasks.c **** 		++uxPendedTicks;
 2443              		.loc 1 1996 0
 2444 012c 114B     		ldr	r3, .L185+36	@ tmp197,
 2445 012e 1B68     		ldr	r3, [r3]	@ D.6623, uxPendedTicks
 2446 0130 0133     		adds	r3, r3, #1	@ D.6623, D.6623,
 2447 0132 104A     		ldr	r2, .L185+36	@ tmp198,
 2448 0134 1360     		str	r3, [r2]	@ D.6623, uxPendedTicks
1997:FreeRTOS/tasks.c **** 
1998:FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1999:FreeRTOS/tasks.c **** 		scheduler is locked. */
2000:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2001:FreeRTOS/tasks.c **** 		{
2002:FreeRTOS/tasks.c **** 			vApplicationTickHook();
 2449              		.loc 1 2002 0
 2450 0136 FFF7FEFF 		bl	vApplicationTickHook	@
 2451              	.L182:
2003:FreeRTOS/tasks.c **** 		}
2004:FreeRTOS/tasks.c **** 		#endif
2005:FreeRTOS/tasks.c **** 	}
2006:FreeRTOS/tasks.c **** 
2007:FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2008:FreeRTOS/tasks.c **** 	{
2009:FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 2452              		.loc 1 2009 0
 2453 013a 0F4B     		ldr	r3, .L185+40	@ tmp199,
 2454 013c 1B68     		ldr	r3, [r3]	@ D.6625, xYieldPending
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 80


 2455 013e 002B     		cmp	r3, #0	@ D.6625,
 2456 0140 01D0     		beq	.L183	@,
2010:FreeRTOS/tasks.c **** 		{
2011:FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 2457              		.loc 1 2011 0
 2458 0142 0123     		movs	r3, #1	@ tmp200,
 2459 0144 7B61     		str	r3, [r7, #20]	@ tmp200, xSwitchRequired
 2460              	.L183:
2012:FreeRTOS/tasks.c **** 		}
2013:FreeRTOS/tasks.c **** 		else
2014:FreeRTOS/tasks.c **** 		{
2015:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2016:FreeRTOS/tasks.c **** 		}
2017:FreeRTOS/tasks.c **** 	}
2018:FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2019:FreeRTOS/tasks.c **** 
2020:FreeRTOS/tasks.c **** 	return xSwitchRequired;
 2461              		.loc 1 2020 0
 2462 0146 7B69     		ldr	r3, [r7, #20]	@ D.6630, xSwitchRequired
2021:FreeRTOS/tasks.c **** }
 2463              		.loc 1 2021 0
 2464 0148 1846     		mov	r0, r3	@, <retval>
 2465 014a 1837     		adds	r7, r7, #24	@,,
 2466              		.cfi_def_cfa_offset 8
 2467 014c BD46     		mov	sp, r7	@,
 2468              		.cfi_def_cfa_register 13
 2469              		@ sp needed	@
 2470 014e 80BD     		pop	{r7, pc}	@
 2471              	.L186:
 2472              		.align	2
 2473              	.L185:
 2474 0150 00000000 		.word	uxSchedulerSuspended
 2475 0154 00000000 		.word	xTickCount
 2476 0158 00000000 		.word	pxDelayedTaskList
 2477 015c 00000000 		.word	pxOverflowDelayedTaskList
 2478 0160 00000000 		.word	xNumOfOverflows
 2479 0164 00000000 		.word	xNextTaskUnblockTime
 2480 0168 00000000 		.word	uxTopReadyPriority
 2481 016c 00000000 		.word	pxReadyTasksLists
 2482 0170 00000000 		.word	pxCurrentTCB
 2483 0174 00000000 		.word	uxPendedTicks
 2484 0178 00000000 		.word	xYieldPending
 2485              		.cfi_endproc
 2486              	.LFE19:
 2487              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2488              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2489              		.align	2
 2490              		.global	vTaskSwitchContext
 2491              		.thumb
 2492              		.thumb_func
 2493              		.type	vTaskSwitchContext, %function
 2494              	vTaskSwitchContext:
 2495              	.LFB20:
2022:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2023:FreeRTOS/tasks.c **** 
2024:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2025:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 81


2026:FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2027:FreeRTOS/tasks.c **** 	{
2028:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2029:FreeRTOS/tasks.c **** 
2030:FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2031:FreeRTOS/tasks.c **** 		getting set. */
2032:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2033:FreeRTOS/tasks.c **** 		{
2034:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2035:FreeRTOS/tasks.c **** 		}
2036:FreeRTOS/tasks.c **** 		else
2037:FreeRTOS/tasks.c **** 		{
2038:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2039:FreeRTOS/tasks.c **** 		}
2040:FreeRTOS/tasks.c **** 
2041:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2042:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2043:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2044:FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2045:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2046:FreeRTOS/tasks.c **** 	}
2047:FreeRTOS/tasks.c **** 
2048:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2049:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2050:FreeRTOS/tasks.c **** 
2051:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2052:FreeRTOS/tasks.c **** 
2053:FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2054:FreeRTOS/tasks.c **** 	{
2055:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2056:FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2057:FreeRTOS/tasks.c **** 
2058:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2059:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2060:FreeRTOS/tasks.c **** 		{
2061:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2062:FreeRTOS/tasks.c **** 		}
2063:FreeRTOS/tasks.c **** 		else
2064:FreeRTOS/tasks.c **** 		{
2065:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2066:FreeRTOS/tasks.c **** 		}
2067:FreeRTOS/tasks.c **** 
2068:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2069:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2070:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2071:FreeRTOS/tasks.c **** 		{
2072:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2073:FreeRTOS/tasks.c **** 		}
2074:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2075:FreeRTOS/tasks.c **** 
2076:FreeRTOS/tasks.c **** 		return xReturn;
2077:FreeRTOS/tasks.c **** 	}
2078:FreeRTOS/tasks.c **** 
2079:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2080:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2081:FreeRTOS/tasks.c **** 
2082:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 82


2083:FreeRTOS/tasks.c **** 
2084:FreeRTOS/tasks.c **** 	BaseT_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2085:FreeRTOS/tasks.c **** 	{
2086:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2087:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
2088:FreeRTOS/tasks.c **** 
2089:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2090:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2091:FreeRTOS/tasks.c **** 		{
2092:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2093:FreeRTOS/tasks.c **** 		}
2094:FreeRTOS/tasks.c **** 		else
2095:FreeRTOS/tasks.c **** 		{
2096:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2097:FreeRTOS/tasks.c **** 		}
2098:FreeRTOS/tasks.c **** 
2099:FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2100:FreeRTOS/tasks.c **** 		{
2101:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2102:FreeRTOS/tasks.c **** 		}
2103:FreeRTOS/tasks.c **** 		else
2104:FreeRTOS/tasks.c **** 		{
2105:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2106:FreeRTOS/tasks.c **** 		}
2107:FreeRTOS/tasks.c **** 
2108:FreeRTOS/tasks.c **** 		return xReturn;
2109:FreeRTOS/tasks.c **** 	}
2110:FreeRTOS/tasks.c **** 
2111:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2112:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2113:FreeRTOS/tasks.c **** 
2114:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2115:FreeRTOS/tasks.c **** {
 2496              		.loc 1 2115 0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 16
 2499              		@ frame_needed = 1, uses_anonymous_args = 0
 2500 0000 80B5     		push	{r7, lr}	@
 2501              		.cfi_def_cfa_offset 8
 2502              		.cfi_offset 7, -8
 2503              		.cfi_offset 14, -4
 2504 0002 84B0     		sub	sp, sp, #16	@,,
 2505              		.cfi_def_cfa_offset 24
 2506 0004 00AF     		add	r7, sp, #0	@,,
 2507              		.cfi_def_cfa_register 7
2116:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseT_t ) pdFALSE )
 2508              		.loc 1 2116 0
 2509 0006 224B     		ldr	r3, .L195	@ tmp124,
 2510 0008 1B68     		ldr	r3, [r3]	@ D.6631, uxSchedulerSuspended
 2511 000a 002B     		cmp	r3, #0	@ D.6631,
 2512 000c 03D0     		beq	.L188	@,
2117:FreeRTOS/tasks.c **** 	{
2118:FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2119:FreeRTOS/tasks.c **** 		switch. */
2120:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2513              		.loc 1 2120 0
 2514 000e 214B     		ldr	r3, .L195+4	@ tmp125,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 83


 2515 0010 0122     		movs	r2, #1	@ tmp126,
 2516 0012 1A60     		str	r2, [r3]	@ tmp126, xYieldPending
2121:FreeRTOS/tasks.c **** 	}
2122:FreeRTOS/tasks.c **** 	else
2123:FreeRTOS/tasks.c **** 	{
2124:FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2125:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2126:FreeRTOS/tasks.c **** 
2127:FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2128:FreeRTOS/tasks.c **** 		{
2129:FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2130:FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2131:FreeRTOS/tasks.c **** 				#else
2132:FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2133:FreeRTOS/tasks.c **** 				#endif
2134:FreeRTOS/tasks.c **** 
2135:FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2136:FreeRTOS/tasks.c **** 				accumulated	time so far.  The time the task started running was
2137:FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2138:FreeRTOS/tasks.c **** 				protection here	so count values are only valid until the timer
2139:FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2140:FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2141:FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2142:FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2143:FreeRTOS/tasks.c **** 				{
2144:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2145:FreeRTOS/tasks.c **** 				}
2146:FreeRTOS/tasks.c **** 				else
2147:FreeRTOS/tasks.c **** 				{
2148:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2149:FreeRTOS/tasks.c **** 				}
2150:FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2151:FreeRTOS/tasks.c **** 		}
2152:FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2153:FreeRTOS/tasks.c **** 
2154:FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2155:FreeRTOS/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
2156:FreeRTOS/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
2157:FreeRTOS/tasks.c **** 
2158:FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2159:FreeRTOS/tasks.c **** 		optimised asm code. */
2160:FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2161:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2162:FreeRTOS/tasks.c **** 
2163:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2164:FreeRTOS/tasks.c **** 		{
2165:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2166:FreeRTOS/tasks.c **** 			structure specific to this task. */
2167:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2168:FreeRTOS/tasks.c **** 		}
2169:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2170:FreeRTOS/tasks.c **** 	}
2171:FreeRTOS/tasks.c **** }
 2517              		.loc 1 2171 0
 2518 0014 37E0     		b	.L194	@
 2519              	.L188:
2124:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 84


 2520              		.loc 1 2124 0
 2521 0016 1F4B     		ldr	r3, .L195+4	@ tmp127,
 2522 0018 0022     		movs	r2, #0	@ tmp128,
 2523 001a 1A60     		str	r2, [r3]	@ tmp128, xYieldPending
 2524              	.LBB10:
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2525              		.loc 1 2160 0
 2526 001c 1E4B     		ldr	r3, .L195+8	@ tmp129,
 2527 001e 1B68     		ldr	r3, [r3]	@ D.6631, uxTopReadyPriority
 2528 0020 7B60     		str	r3, [r7, #4]	@ D.6631, ulBitmap
 2529              	.LBB11:
 2530              	.LBB12:
 2531              		.file 2 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   5:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   7:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
   8:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
   9:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  13:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  17:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Thank you!                                                         *
  18:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  19:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  20:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  21:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  23:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  27:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  38:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  40:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  41:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  44:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 85


  45:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  46:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  47:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  48:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  51:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  62:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  63:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  64:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** */
  65:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  68:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  69:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  70:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  71:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  72:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
  73:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  74:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  75:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  76:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  77:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  78:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  79:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  80:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  81:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  82:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  83:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  84:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  85:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  86:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  87:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  88:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  89:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  90:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  91:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  92:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  93:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  94:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackT_t;
  95:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  96:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseT_t;
  97:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  98:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseT_t;
  99:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 100:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 101:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 86


 102:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 103:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #else
 104:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 105:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickT_t;
 106:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 108:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 111:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 112:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 113:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 114:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 115:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 116:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 118:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortYield( void );
 119:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 120:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 121:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD()					vPortYield()
 122:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 123:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 124:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 125:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 126:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 127:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 128:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 129:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 130:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 131:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 132:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 133:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
 134:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
 135:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 137:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 139:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 141:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 143:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 144:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 145:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 147:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 148:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 149:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 150:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 151:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 152:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 154:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 155:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 156:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 157:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 87


 159:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 161:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 162:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	{
 163:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 164:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2532              		.loc 2 165 0
 2533 0022 7B68     		ldr	r3, [r7, #4]	@ tmp131, ulBitmap
 2534              		.syntax unified
 2535              	@ 165 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2536 0024 B3FA83F3 		clz r3, r3	@ ucReturn, tmp131
 2537              	@ 0 "" 2
 2538              		.thumb
 2539              		.syntax unified
 2540 0028 FB70     		strb	r3, [r7, #3]	@ ucReturn, ucReturn
 166:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2541              		.loc 2 166 0
 2542 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2	@ D.6555, ucReturn
 2543              	.LBE12:
 2544              	.LBE11:
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2545              		.loc 1 2160 0
 2546 002c C3F11F03 		rsb	r3, r3, #31	@ D.6632, D.6632,
 2547 0030 FB60     		str	r3, [r7, #12]	@ D.6632, uxTopPriority
 2548 0032 1A49     		ldr	r1, .L195+12	@ tmp132,
 2549 0034 FA68     		ldr	r2, [r7, #12]	@ tmp133, uxTopPriority
 2550 0036 1346     		mov	r3, r2	@ tmp134, tmp133
 2551 0038 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 2552 003a 1344     		add	r3, r3, r2	@ tmp134, tmp133
 2553 003c 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 2554 003e 0B44     		add	r3, r3, r1	@ tmp136, tmp132
 2555 0040 1B68     		ldr	r3, [r3]	@ D.6631, pxReadyTasksLists[uxTopPriority_12].uxNumberOfItems
 2556 0042 002B     		cmp	r3, #0	@ D.6631,
 2557 0044 02D1     		bne	.L191	@,
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2558              		.loc 1 2160 0 is_stmt 0 discriminator 1
 2559 0046 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2560              	.L192:
 2561 004a FEE7     		b	.L192	@
 2562              	.L191:
 2563              	.LBB13:
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2564              		.loc 1 2160 0 discriminator 2
 2565 004c FA68     		ldr	r2, [r7, #12]	@ tmp137, uxTopPriority
 2566 004e 1346     		mov	r3, r2	@ tmp138, tmp137
 2567 0050 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 2568 0052 1344     		add	r3, r3, r2	@ tmp138, tmp137
 2569 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 2570 0056 114A     		ldr	r2, .L195+12	@ tmp141,
 2571 0058 1344     		add	r3, r3, r2	@ tmp140, tmp141
 2572 005a BB60     		str	r3, [r7, #8]	@ tmp140, pxConstList
 2573 005c BB68     		ldr	r3, [r7, #8]	@ tmp142, pxConstList
 2574 005e 5B68     		ldr	r3, [r3, #4]	@ D.6633, pxConstList_14->pxIndex
 2575 0060 5A68     		ldr	r2, [r3, #4]	@ D.6634, _15->pxNext
 2576 0062 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxConstList
 2577 0064 5A60     		str	r2, [r3, #4]	@ D.6634, pxConstList_14->pxIndex
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 88


 2578 0066 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxConstList
 2579 0068 5A68     		ldr	r2, [r3, #4]	@ D.6633, pxConstList_14->pxIndex
 2580 006a BB68     		ldr	r3, [r7, #8]	@ tmp145, pxConstList
 2581 006c 0833     		adds	r3, r3, #8	@ D.6635, tmp145,
 2582 006e 9A42     		cmp	r2, r3	@ D.6633, D.6635
 2583 0070 04D1     		bne	.L193	@,
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2584              		.loc 1 2160 0 discriminator 3
 2585 0072 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxConstList
 2586 0074 5B68     		ldr	r3, [r3, #4]	@ D.6633, pxConstList_14->pxIndex
 2587 0076 5A68     		ldr	r2, [r3, #4]	@ D.6634, _20->pxNext
 2588 0078 BB68     		ldr	r3, [r7, #8]	@ tmp147, pxConstList
 2589 007a 5A60     		str	r2, [r3, #4]	@ D.6634, pxConstList_14->pxIndex
 2590              	.L193:
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2591              		.loc 1 2160 0 discriminator 5
 2592 007c BB68     		ldr	r3, [r7, #8]	@ tmp148, pxConstList
 2593 007e 5B68     		ldr	r3, [r3, #4]	@ D.6633, pxConstList_14->pxIndex
 2594 0080 DB68     		ldr	r3, [r3, #12]	@ D.6636, _23->pvOwner
 2595 0082 074A     		ldr	r2, .L195+16	@ tmp149,
 2596 0084 1360     		str	r3, [r2]	@ D.6636, pxCurrentTCB
 2597              	.L194:
 2598              	.LBE13:
 2599              	.LBE10:
 2600              		.loc 1 2171 0 is_stmt 1
 2601 0086 00BF     		nop
 2602 0088 1037     		adds	r7, r7, #16	@,,
 2603              		.cfi_def_cfa_offset 8
 2604 008a BD46     		mov	sp, r7	@,
 2605              		.cfi_def_cfa_register 13
 2606              		@ sp needed	@
 2607 008c 80BD     		pop	{r7, pc}	@
 2608              	.L196:
 2609 008e 00BF     		.align	2
 2610              	.L195:
 2611 0090 00000000 		.word	uxSchedulerSuspended
 2612 0094 00000000 		.word	xYieldPending
 2613 0098 00000000 		.word	uxTopReadyPriority
 2614 009c 00000000 		.word	pxReadyTasksLists
 2615 00a0 00000000 		.word	pxCurrentTCB
 2616              		.cfi_endproc
 2617              	.LFE20:
 2618              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2619              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2620              		.align	2
 2621              		.global	vTaskPlaceOnEventList
 2622              		.thumb
 2623              		.thumb_func
 2624              		.type	vTaskPlaceOnEventList, %function
 2625              	vTaskPlaceOnEventList:
 2626              	.LFB21:
2172:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2173:FreeRTOS/tasks.c **** 
2174:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickT_t xTicksToWait )
2175:FreeRTOS/tasks.c **** {
 2627              		.loc 1 2175 0
 2628              		.cfi_startproc
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 89


 2629              		@ args = 0, pretend = 0, frame = 16
 2630              		@ frame_needed = 1, uses_anonymous_args = 0
 2631 0000 80B5     		push	{r7, lr}	@
 2632              		.cfi_def_cfa_offset 8
 2633              		.cfi_offset 7, -8
 2634              		.cfi_offset 14, -4
 2635 0002 84B0     		sub	sp, sp, #16	@,,
 2636              		.cfi_def_cfa_offset 24
 2637 0004 00AF     		add	r7, sp, #0	@,,
 2638              		.cfi_def_cfa_register 7
 2639 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
 2640 0008 3960     		str	r1, [r7]	@ xTicksToWait, xTicksToWait
2176:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2177:FreeRTOS/tasks.c **** 
2178:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2641              		.loc 1 2178 0
 2642 000a 7B68     		ldr	r3, [r7, #4]	@ tmp124, pxEventList
 2643 000c 002B     		cmp	r3, #0	@ tmp124,
 2644 000e 02D1     		bne	.L198	@,
 2645              		.loc 1 2178 0 is_stmt 0 discriminator 1
 2646 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2647              	.L199:
 2648 0014 FEE7     		b	.L199	@
 2649              	.L198:
2179:FreeRTOS/tasks.c **** 
2180:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2181:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2182:FreeRTOS/tasks.c **** 
2183:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2184:FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2185:FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2186:FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2187:FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2650              		.loc 1 2187 0 is_stmt 1
 2651 0016 1A4B     		ldr	r3, .L204	@ tmp125,
 2652 0018 1B68     		ldr	r3, [r3]	@ D.6638, pxCurrentTCB
 2653 001a 1833     		adds	r3, r3, #24	@ D.6639, D.6638,
 2654 001c 1946     		mov	r1, r3	@, D.6639
 2655 001e 7868     		ldr	r0, [r7, #4]	@, pxEventList
 2656 0020 FFF7FEFF 		bl	vListInsert	@
2188:FreeRTOS/tasks.c **** 
2189:FreeRTOS/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2190:FreeRTOS/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2191:FreeRTOS/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2192:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 2657              		.loc 1 2192 0
 2658 0024 164B     		ldr	r3, .L204	@ tmp126,
 2659 0026 1B68     		ldr	r3, [r3]	@ D.6638, pxCurrentTCB
 2660 0028 0433     		adds	r3, r3, #4	@ D.6639, D.6638,
 2661 002a 1846     		mov	r0, r3	@, D.6639
 2662 002c FFF7FEFF 		bl	uxListRemove	@
 2663 0030 0346     		mov	r3, r0	@ D.6640,
 2664 0032 002B     		cmp	r3, #0	@ D.6640,
 2665 0034 0BD1     		bne	.L200	@,
2193:FreeRTOS/tasks.c **** 	{
2194:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2195:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 90


2196:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2666              		.loc 1 2196 0
 2667 0036 124B     		ldr	r3, .L204	@ tmp127,
 2668 0038 1B68     		ldr	r3, [r3]	@ D.6638, pxCurrentTCB
 2669 003a DB6A     		ldr	r3, [r3, #44]	@ D.6640, _12->uxPriority
 2670 003c 0122     		movs	r2, #1	@ tmp128,
 2671 003e 02FA03F3 		lsl	r3, r2, r3	@ D.6640, tmp128, D.6640
 2672 0042 DA43     		mvns	r2, r3	@ D.6640, D.6640
 2673 0044 0F4B     		ldr	r3, .L204+4	@ tmp129,
 2674 0046 1B68     		ldr	r3, [r3]	@ D.6640, uxTopReadyPriority
 2675 0048 1340     		ands	r3, r3, r2	@, D.6640, D.6640, D.6640
 2676 004a 0E4A     		ldr	r2, .L204+4	@ tmp130,
 2677 004c 1360     		str	r3, [r2]	@ D.6640, uxTopReadyPriority
 2678              	.L200:
2197:FreeRTOS/tasks.c **** 	}
2198:FreeRTOS/tasks.c **** 	else
2199:FreeRTOS/tasks.c **** 	{
2200:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2201:FreeRTOS/tasks.c **** 	}
2202:FreeRTOS/tasks.c **** 
2203:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2204:FreeRTOS/tasks.c **** 	{
2205:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2679              		.loc 1 2205 0
 2680 004e 3B68     		ldr	r3, [r7]	@ tmp131, xTicksToWait
 2681 0050 B3F1FF3F 		cmp	r3, #-1	@ tmp131,
 2682 0054 07D1     		bne	.L201	@,
2206:FreeRTOS/tasks.c **** 		{
2207:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2208:FreeRTOS/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2209:FreeRTOS/tasks.c **** 			block indefinitely. */
2210:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2683              		.loc 1 2210 0
 2684 0056 0A4B     		ldr	r3, .L204	@ tmp132,
 2685 0058 1B68     		ldr	r3, [r3]	@ D.6638, pxCurrentTCB
 2686 005a 0433     		adds	r3, r3, #4	@ D.6639, D.6638,
 2687 005c 1946     		mov	r1, r3	@, D.6639
 2688 005e 0A48     		ldr	r0, .L204+8	@,
 2689 0060 FFF7FEFF 		bl	vListInsertEnd	@
2211:FreeRTOS/tasks.c **** 		}
2212:FreeRTOS/tasks.c **** 		else
2213:FreeRTOS/tasks.c **** 		{
2214:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2215:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2216:FreeRTOS/tasks.c **** 			scheduler will handle it. */
2217:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2218:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2219:FreeRTOS/tasks.c **** 		}
2220:FreeRTOS/tasks.c **** 	}
2221:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2222:FreeRTOS/tasks.c **** 	{
2223:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2224:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2225:FreeRTOS/tasks.c **** 			will handle it. */
2226:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2227:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2228:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 91


2229:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2230:FreeRTOS/tasks.c **** }
 2690              		.loc 1 2230 0
 2691 0064 07E0     		b	.L203	@
 2692              	.L201:
2217:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2693              		.loc 1 2217 0
 2694 0066 094B     		ldr	r3, .L204+12	@ tmp133,
 2695 0068 1A68     		ldr	r2, [r3]	@ D.6640, xTickCount
 2696 006a 3B68     		ldr	r3, [r7]	@ tmp135, xTicksToWait
 2697 006c 1344     		add	r3, r3, r2	@ tmp134, D.6640
 2698 006e FB60     		str	r3, [r7, #12]	@ tmp134, xTimeToWake
2218:FreeRTOS/tasks.c **** 		}
 2699              		.loc 1 2218 0
 2700 0070 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 2701 0072 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2702              	.L203:
 2703              		.loc 1 2230 0
 2704 0076 00BF     		nop
 2705 0078 1037     		adds	r7, r7, #16	@,,
 2706              		.cfi_def_cfa_offset 8
 2707 007a BD46     		mov	sp, r7	@,
 2708              		.cfi_def_cfa_register 13
 2709              		@ sp needed	@
 2710 007c 80BD     		pop	{r7, pc}	@
 2711              	.L205:
 2712 007e 00BF     		.align	2
 2713              	.L204:
 2714 0080 00000000 		.word	pxCurrentTCB
 2715 0084 00000000 		.word	uxTopReadyPriority
 2716 0088 00000000 		.word	xSuspendedTaskList
 2717 008c 00000000 		.word	xTickCount
 2718              		.cfi_endproc
 2719              	.LFE21:
 2720              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2721              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2722              		.align	2
 2723              		.global	vTaskPlaceOnUnorderedEventList
 2724              		.thumb
 2725              		.thumb_func
 2726              		.type	vTaskPlaceOnUnorderedEventList, %function
 2727              	vTaskPlaceOnUnorderedEventList:
 2728              	.LFB22:
2231:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2232:FreeRTOS/tasks.c **** 
2233:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickT_t xItemValue, const TickT_t 
2234:FreeRTOS/tasks.c **** {
 2729              		.loc 1 2234 0
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 24
 2732              		@ frame_needed = 1, uses_anonymous_args = 0
 2733 0000 80B5     		push	{r7, lr}	@
 2734              		.cfi_def_cfa_offset 8
 2735              		.cfi_offset 7, -8
 2736              		.cfi_offset 14, -4
 2737 0002 86B0     		sub	sp, sp, #24	@,,
 2738              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 92


 2739 0004 00AF     		add	r7, sp, #0	@,,
 2740              		.cfi_def_cfa_register 7
 2741 0006 F860     		str	r0, [r7, #12]	@ pxEventList, pxEventList
 2742 0008 B960     		str	r1, [r7, #8]	@ xItemValue, xItemValue
 2743 000a 7A60     		str	r2, [r7, #4]	@ xTicksToWait, xTicksToWait
2235:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2236:FreeRTOS/tasks.c **** 
2237:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2744              		.loc 1 2237 0
 2745 000c FB68     		ldr	r3, [r7, #12]	@ tmp127, pxEventList
 2746 000e 002B     		cmp	r3, #0	@ tmp127,
 2747 0010 02D1     		bne	.L207	@,
 2748              		.loc 1 2237 0 is_stmt 0 discriminator 1
 2749 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2750              	.L208:
 2751 0016 FEE7     		b	.L208	@
 2752              	.L207:
2238:FreeRTOS/tasks.c **** 
2239:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2240:FreeRTOS/tasks.c **** 	the event groups implementation. */
2241:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 2753              		.loc 1 2241 0 is_stmt 1
 2754 0018 204B     		ldr	r3, .L215	@ tmp128,
 2755 001a 1B68     		ldr	r3, [r3]	@ D.6641, uxSchedulerSuspended
 2756 001c 002B     		cmp	r3, #0	@ D.6641,
 2757 001e 02D1     		bne	.L209	@,
 2758              		.loc 1 2241 0 is_stmt 0 discriminator 1
 2759 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2760              	.L210:
 2761              		.loc 1 2241 0 discriminator 2
 2762 0024 FEE7     		b	.L210	@
 2763              	.L209:
2242:FreeRTOS/tasks.c **** 
2243:FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2244:FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2245:FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2246:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2764              		.loc 1 2246 0 is_stmt 1
 2765 0026 1E4B     		ldr	r3, .L215+4	@ tmp129,
 2766 0028 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2767 002a BA68     		ldr	r2, [r7, #8]	@ tmp130, xItemValue
 2768 002c 42F00042 		orr	r2, r2, #-2147483648	@ D.6641, tmp130,
 2769 0030 9A61     		str	r2, [r3, #24]	@ D.6641, _6->xEventListItem.xItemValue
2247:FreeRTOS/tasks.c **** 
2248:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2249:FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2250:FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2251:FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2252:FreeRTOS/tasks.c **** 	the task level). */
2253:FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2770              		.loc 1 2253 0
 2771 0032 1B4B     		ldr	r3, .L215+4	@ tmp131,
 2772 0034 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2773 0036 1833     		adds	r3, r3, #24	@ D.6643, D.6642,
 2774 0038 1946     		mov	r1, r3	@, D.6643
 2775 003a F868     		ldr	r0, [r7, #12]	@, pxEventList
 2776 003c FFF7FEFF 		bl	vListInsertEnd	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 93


2254:FreeRTOS/tasks.c **** 
2255:FreeRTOS/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2256:FreeRTOS/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2257:FreeRTOS/tasks.c **** 	scheduler is locked. */
2258:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 2777              		.loc 1 2258 0
 2778 0040 174B     		ldr	r3, .L215+4	@ tmp132,
 2779 0042 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2780 0044 0433     		adds	r3, r3, #4	@ D.6643, D.6642,
 2781 0046 1846     		mov	r0, r3	@, D.6643
 2782 0048 FFF7FEFF 		bl	uxListRemove	@
 2783 004c 0346     		mov	r3, r0	@ D.6641,
 2784 004e 002B     		cmp	r3, #0	@ D.6641,
 2785 0050 0BD1     		bne	.L211	@,
2259:FreeRTOS/tasks.c **** 	{
2260:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2261:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2262:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2786              		.loc 1 2262 0
 2787 0052 134B     		ldr	r3, .L215+4	@ tmp133,
 2788 0054 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2789 0056 DB6A     		ldr	r3, [r3, #44]	@ D.6641, _17->uxPriority
 2790 0058 0122     		movs	r2, #1	@ tmp134,
 2791 005a 02FA03F3 		lsl	r3, r2, r3	@ D.6641, tmp134, D.6641
 2792 005e DA43     		mvns	r2, r3	@ D.6641, D.6641
 2793 0060 104B     		ldr	r3, .L215+8	@ tmp135,
 2794 0062 1B68     		ldr	r3, [r3]	@ D.6641, uxTopReadyPriority
 2795 0064 1340     		ands	r3, r3, r2	@, D.6641, D.6641, D.6641
 2796 0066 0F4A     		ldr	r2, .L215+8	@ tmp136,
 2797 0068 1360     		str	r3, [r2]	@ D.6641, uxTopReadyPriority
 2798              	.L211:
2263:FreeRTOS/tasks.c **** 	}
2264:FreeRTOS/tasks.c **** 	else
2265:FreeRTOS/tasks.c **** 	{
2266:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2267:FreeRTOS/tasks.c **** 	}
2268:FreeRTOS/tasks.c **** 
2269:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2270:FreeRTOS/tasks.c **** 	{
2271:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2799              		.loc 1 2271 0
 2800 006a 7B68     		ldr	r3, [r7, #4]	@ tmp137, xTicksToWait
 2801 006c B3F1FF3F 		cmp	r3, #-1	@ tmp137,
 2802 0070 07D1     		bne	.L212	@,
2272:FreeRTOS/tasks.c **** 		{
2273:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2274:FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2275:FreeRTOS/tasks.c **** 			indefinitely. */
2276:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2803              		.loc 1 2276 0
 2804 0072 0B4B     		ldr	r3, .L215+4	@ tmp138,
 2805 0074 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2806 0076 0433     		adds	r3, r3, #4	@ D.6643, D.6642,
 2807 0078 1946     		mov	r1, r3	@, D.6643
 2808 007a 0B48     		ldr	r0, .L215+12	@,
 2809 007c FFF7FEFF 		bl	vListInsertEnd	@
2277:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 94


2278:FreeRTOS/tasks.c **** 		else
2279:FreeRTOS/tasks.c **** 		{
2280:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2281:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2282:FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
2283:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2284:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2285:FreeRTOS/tasks.c **** 		}
2286:FreeRTOS/tasks.c **** 	}
2287:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2288:FreeRTOS/tasks.c **** 	{
2289:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2290:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2291:FreeRTOS/tasks.c **** 			will manage it correctly. */
2292:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2293:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2294:FreeRTOS/tasks.c **** 	}
2295:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2296:FreeRTOS/tasks.c **** }
 2810              		.loc 1 2296 0
 2811 0080 07E0     		b	.L214	@
 2812              	.L212:
2283:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2813              		.loc 1 2283 0
 2814 0082 0A4B     		ldr	r3, .L215+16	@ tmp139,
 2815 0084 1A68     		ldr	r2, [r3]	@ D.6641, xTickCount
 2816 0086 7B68     		ldr	r3, [r7, #4]	@ tmp141, xTicksToWait
 2817 0088 1344     		add	r3, r3, r2	@ tmp140, D.6641
 2818 008a 7B61     		str	r3, [r7, #20]	@ tmp140, xTimeToWake
2284:FreeRTOS/tasks.c **** 		}
 2819              		.loc 1 2284 0
 2820 008c 7869     		ldr	r0, [r7, #20]	@, xTimeToWake
 2821 008e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2822              	.L214:
 2823              		.loc 1 2296 0
 2824 0092 00BF     		nop
 2825 0094 1837     		adds	r7, r7, #24	@,,
 2826              		.cfi_def_cfa_offset 8
 2827 0096 BD46     		mov	sp, r7	@,
 2828              		.cfi_def_cfa_register 13
 2829              		@ sp needed	@
 2830 0098 80BD     		pop	{r7, pc}	@
 2831              	.L216:
 2832 009a 00BF     		.align	2
 2833              	.L215:
 2834 009c 00000000 		.word	uxSchedulerSuspended
 2835 00a0 00000000 		.word	pxCurrentTCB
 2836 00a4 00000000 		.word	uxTopReadyPriority
 2837 00a8 00000000 		.word	xSuspendedTaskList
 2838 00ac 00000000 		.word	xTickCount
 2839              		.cfi_endproc
 2840              	.LFE22:
 2841              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2842              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2843              		.align	2
 2844              		.global	xTaskRemoveFromEventList
 2845              		.thumb
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 95


 2846              		.thumb_func
 2847              		.type	xTaskRemoveFromEventList, %function
 2848              	xTaskRemoveFromEventList:
 2849              	.LFB23:
2297:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2298:FreeRTOS/tasks.c **** 
2299:FreeRTOS/tasks.c **** #if configUSE_TIMERS == 1
2300:FreeRTOS/tasks.c **** 
2301:FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickT_t xTicksToWait )
2302:FreeRTOS/tasks.c **** 	{
2303:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
2304:FreeRTOS/tasks.c **** 
2305:FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2306:FreeRTOS/tasks.c **** 
2307:FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2308:FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2309:FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2310:FreeRTOS/tasks.c **** 		it should be called from a critical section. */
2311:FreeRTOS/tasks.c **** 
2312:FreeRTOS/tasks.c **** 
2313:FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2314:FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2315:FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2316:FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2317:FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2318:FreeRTOS/tasks.c **** 
2319:FreeRTOS/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2320:FreeRTOS/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2321:FreeRTOS/tasks.c **** 		function is called form a critical section. */
2322:FreeRTOS/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
2323:FreeRTOS/tasks.c **** 		{
2324:FreeRTOS/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2325:FreeRTOS/tasks.c **** 			check, and the port reset macro can be called directly. */
2326:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2327:FreeRTOS/tasks.c **** 		}
2328:FreeRTOS/tasks.c **** 		else
2329:FreeRTOS/tasks.c **** 		{
2330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2331:FreeRTOS/tasks.c **** 		}
2332:FreeRTOS/tasks.c **** 
2333:FreeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
2334:FreeRTOS/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
2335:FreeRTOS/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
2336:FreeRTOS/tasks.c **** 
2337:FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL();
2338:FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
2339:FreeRTOS/tasks.c **** 	}
2340:FreeRTOS/tasks.c **** 
2341:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2342:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2343:FreeRTOS/tasks.c **** 
2344:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2345:FreeRTOS/tasks.c **** {
 2850              		.loc 1 2345 0
 2851              		.cfi_startproc
 2852              		@ args = 0, pretend = 0, frame = 16
 2853              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 96


 2854 0000 80B5     		push	{r7, lr}	@
 2855              		.cfi_def_cfa_offset 8
 2856              		.cfi_offset 7, -8
 2857              		.cfi_offset 14, -4
 2858 0002 84B0     		sub	sp, sp, #16	@,,
 2859              		.cfi_def_cfa_offset 24
 2860 0004 00AF     		add	r7, sp, #0	@,,
 2861              		.cfi_def_cfa_register 7
 2862 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
2346:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2347:FreeRTOS/tasks.c **** BaseT_t xReturn;
2348:FreeRTOS/tasks.c **** 
2349:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2350:FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2351:FreeRTOS/tasks.c **** 
2352:FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2353:FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2354:FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2355:FreeRTOS/tasks.c **** 
2356:FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2357:FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2358:FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2359:FreeRTOS/tasks.c **** 
2360:FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2361:FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2362:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2863              		.loc 1 2362 0
 2864 0008 7B68     		ldr	r3, [r7, #4]	@ tmp127, pxEventList
 2865 000a DB68     		ldr	r3, [r3, #12]	@ D.6644, pxEventList_5(D)->xListEnd.pxNext
 2866 000c DB68     		ldr	r3, [r3, #12]	@ tmp128, _6->pvOwner
 2867 000e BB60     		str	r3, [r7, #8]	@ tmp128, pxUnblockedTCB
2363:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2868              		.loc 1 2363 0
 2869 0010 BB68     		ldr	r3, [r7, #8]	@ tmp129, pxUnblockedTCB
 2870 0012 002B     		cmp	r3, #0	@ tmp129,
 2871 0014 02D1     		bne	.L218	@,
 2872              		.loc 1 2363 0 is_stmt 0 discriminator 1
 2873 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2874              	.L219:
 2875 001a FEE7     		b	.L219	@
 2876              	.L218:
2364:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2877              		.loc 1 2364 0 is_stmt 1
 2878 001c BB68     		ldr	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
 2879 001e 1833     		adds	r3, r3, #24	@ D.6645, tmp130,
 2880 0020 1846     		mov	r0, r3	@, D.6645
 2881 0022 FFF7FEFF 		bl	uxListRemove	@
2365:FreeRTOS/tasks.c **** 
2366:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2882              		.loc 1 2366 0
 2883 0026 1D4B     		ldr	r3, .L225	@ tmp131,
 2884 0028 1B68     		ldr	r3, [r3]	@ D.6646, uxSchedulerSuspended
 2885 002a 002B     		cmp	r3, #0	@ D.6646,
 2886 002c 1CD1     		bne	.L220	@,
2367:FreeRTOS/tasks.c **** 	{
2368:FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2887              		.loc 1 2368 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 97


 2888 002e BB68     		ldr	r3, [r7, #8]	@ tmp132, pxUnblockedTCB
 2889 0030 0433     		adds	r3, r3, #4	@ D.6645, tmp132,
 2890 0032 1846     		mov	r0, r3	@, D.6645
 2891 0034 FFF7FEFF 		bl	uxListRemove	@
2369:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2892              		.loc 1 2369 0
 2893 0038 BB68     		ldr	r3, [r7, #8]	@ tmp133, pxUnblockedTCB
 2894 003a DB6A     		ldr	r3, [r3, #44]	@ D.6646, pxUnblockedTCB_7->uxPriority
 2895 003c 0122     		movs	r2, #1	@ tmp134,
 2896 003e 9A40     		lsls	r2, r2, r3	@ D.6646, tmp134, D.6646
 2897 0040 174B     		ldr	r3, .L225+4	@ tmp135,
 2898 0042 1B68     		ldr	r3, [r3]	@ D.6646, uxTopReadyPriority
 2899 0044 1343     		orrs	r3, r3, r2	@, D.6646, D.6646, D.6646
 2900 0046 164A     		ldr	r2, .L225+4	@ tmp136,
 2901 0048 1360     		str	r3, [r2]	@ D.6646, uxTopReadyPriority
 2902 004a BB68     		ldr	r3, [r7, #8]	@ tmp137, pxUnblockedTCB
 2903 004c DA6A     		ldr	r2, [r3, #44]	@ D.6646, pxUnblockedTCB_7->uxPriority
 2904 004e 1346     		mov	r3, r2	@ tmp138, D.6646
 2905 0050 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 2906 0052 1344     		add	r3, r3, r2	@ tmp138, D.6646
 2907 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 2908 0056 134A     		ldr	r2, .L225+8	@ tmp140,
 2909 0058 1A44     		add	r2, r2, r3	@ D.6647, tmp138
 2910 005a BB68     		ldr	r3, [r7, #8]	@ tmp141, pxUnblockedTCB
 2911 005c 0433     		adds	r3, r3, #4	@ D.6645, tmp141,
 2912 005e 1946     		mov	r1, r3	@, D.6645
 2913 0060 1046     		mov	r0, r2	@, D.6647
 2914 0062 FFF7FEFF 		bl	vListInsertEnd	@
 2915 0066 05E0     		b	.L221	@
 2916              	.L220:
2370:FreeRTOS/tasks.c **** 	}
2371:FreeRTOS/tasks.c **** 	else
2372:FreeRTOS/tasks.c **** 	{
2373:FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2374:FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2375:FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2917              		.loc 1 2375 0
 2918 0068 BB68     		ldr	r3, [r7, #8]	@ tmp142, pxUnblockedTCB
 2919 006a 1833     		adds	r3, r3, #24	@ D.6645, tmp142,
 2920 006c 1946     		mov	r1, r3	@, D.6645
 2921 006e 0E48     		ldr	r0, .L225+12	@,
 2922 0070 FFF7FEFF 		bl	vListInsertEnd	@
 2923              	.L221:
2376:FreeRTOS/tasks.c **** 	}
2377:FreeRTOS/tasks.c **** 
2378:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2924              		.loc 1 2378 0
 2925 0074 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxUnblockedTCB
 2926 0076 DA6A     		ldr	r2, [r3, #44]	@ D.6646, pxUnblockedTCB_7->uxPriority
 2927 0078 0C4B     		ldr	r3, .L225+16	@ tmp144,
 2928 007a 1B68     		ldr	r3, [r3]	@ D.6648, pxCurrentTCB
 2929 007c DB6A     		ldr	r3, [r3, #44]	@ D.6646, _25->uxPriority
 2930 007e 9A42     		cmp	r2, r3	@ D.6646, D.6646
 2931 0080 05D9     		bls	.L222	@,
2379:FreeRTOS/tasks.c **** 	{
2380:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2381:FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 98


2382:FreeRTOS/tasks.c **** 		it should force a context switch now. */
2383:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 2932              		.loc 1 2383 0
 2933 0082 0123     		movs	r3, #1	@ tmp145,
 2934 0084 FB60     		str	r3, [r7, #12]	@ tmp145, xReturn
2384:FreeRTOS/tasks.c **** 
2385:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2386:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2387:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2935              		.loc 1 2387 0
 2936 0086 0A4B     		ldr	r3, .L225+20	@ tmp146,
 2937 0088 0122     		movs	r2, #1	@ tmp147,
 2938 008a 1A60     		str	r2, [r3]	@ tmp147, xYieldPending
 2939 008c 01E0     		b	.L223	@
 2940              	.L222:
2388:FreeRTOS/tasks.c **** 	}
2389:FreeRTOS/tasks.c **** 	else
2390:FreeRTOS/tasks.c **** 	{
2391:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 2941              		.loc 1 2391 0
 2942 008e 0023     		movs	r3, #0	@ tmp148,
 2943 0090 FB60     		str	r3, [r7, #12]	@ tmp148, xReturn
 2944              	.L223:
2392:FreeRTOS/tasks.c **** 	}
2393:FreeRTOS/tasks.c **** 
2394:FreeRTOS/tasks.c **** 	return xReturn;
 2945              		.loc 1 2394 0
 2946 0092 FB68     		ldr	r3, [r7, #12]	@ D.6649, xReturn
2395:FreeRTOS/tasks.c **** }
 2947              		.loc 1 2395 0
 2948 0094 1846     		mov	r0, r3	@, <retval>
 2949 0096 1037     		adds	r7, r7, #16	@,,
 2950              		.cfi_def_cfa_offset 8
 2951 0098 BD46     		mov	sp, r7	@,
 2952              		.cfi_def_cfa_register 13
 2953              		@ sp needed	@
 2954 009a 80BD     		pop	{r7, pc}	@
 2955              	.L226:
 2956              		.align	2
 2957              	.L225:
 2958 009c 00000000 		.word	uxSchedulerSuspended
 2959 00a0 00000000 		.word	uxTopReadyPriority
 2960 00a4 00000000 		.word	pxReadyTasksLists
 2961 00a8 00000000 		.word	xPendingReadyList
 2962 00ac 00000000 		.word	pxCurrentTCB
 2963 00b0 00000000 		.word	xYieldPending
 2964              		.cfi_endproc
 2965              	.LFE23:
 2966              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2967              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2968              		.align	2
 2969              		.global	xTaskRemoveFromUnorderedEventList
 2970              		.thumb
 2971              		.thumb_func
 2972              		.type	xTaskRemoveFromUnorderedEventList, %function
 2973              	xTaskRemoveFromUnorderedEventList:
 2974              	.LFB24:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 99


2396:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2397:FreeRTOS/tasks.c **** 
2398:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickT_t xItemValue )
2399:FreeRTOS/tasks.c **** {
 2975              		.loc 1 2399 0
 2976              		.cfi_startproc
 2977              		@ args = 0, pretend = 0, frame = 16
 2978              		@ frame_needed = 1, uses_anonymous_args = 0
 2979 0000 80B5     		push	{r7, lr}	@
 2980              		.cfi_def_cfa_offset 8
 2981              		.cfi_offset 7, -8
 2982              		.cfi_offset 14, -4
 2983 0002 84B0     		sub	sp, sp, #16	@,,
 2984              		.cfi_def_cfa_offset 24
 2985 0004 00AF     		add	r7, sp, #0	@,,
 2986              		.cfi_def_cfa_register 7
 2987 0006 7860     		str	r0, [r7, #4]	@ pxEventListItem, pxEventListItem
 2988 0008 3960     		str	r1, [r7]	@ xItemValue, xItemValue
2400:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2401:FreeRTOS/tasks.c **** BaseT_t xReturn;
2402:FreeRTOS/tasks.c **** 
2403:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2404:FreeRTOS/tasks.c **** 	the event flags implementation. */
2405:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 2989              		.loc 1 2405 0
 2990 000a 244B     		ldr	r3, .L235	@ tmp125,
 2991 000c 1B68     		ldr	r3, [r3]	@ D.6650, uxSchedulerSuspended
 2992 000e 002B     		cmp	r3, #0	@ D.6650,
 2993 0010 02D1     		bne	.L228	@,
 2994              		.loc 1 2405 0 is_stmt 0 discriminator 1
 2995 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2996              	.L229:
 2997 0016 FEE7     		b	.L229	@
 2998              	.L228:
2406:FreeRTOS/tasks.c **** 
2407:FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2408:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 2999              		.loc 1 2408 0 is_stmt 1
 3000 0018 3B68     		ldr	r3, [r7]	@ tmp126, xItemValue
 3001 001a 43F00042 		orr	r2, r3, #-2147483648	@ D.6650, tmp126,
 3002 001e 7B68     		ldr	r3, [r7, #4]	@ tmp127, pxEventListItem
 3003 0020 1A60     		str	r2, [r3]	@ D.6650, pxEventListItem_7(D)->xItemValue
2409:FreeRTOS/tasks.c **** 
2410:FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2411:FreeRTOS/tasks.c **** 	event flags. */
2412:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3004              		.loc 1 2412 0
 3005 0022 7B68     		ldr	r3, [r7, #4]	@ tmp128, pxEventListItem
 3006 0024 DB68     		ldr	r3, [r3, #12]	@ tmp129, pxEventListItem_7(D)->pvOwner
 3007 0026 BB60     		str	r3, [r7, #8]	@ tmp129, pxUnblockedTCB
2413:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3008              		.loc 1 2413 0
 3009 0028 BB68     		ldr	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
 3010 002a 002B     		cmp	r3, #0	@ tmp130,
 3011 002c 02D1     		bne	.L230	@,
 3012              		.loc 1 2413 0 is_stmt 0 discriminator 1
 3013 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 100


 3014              	.L231:
 3015              		.loc 1 2413 0 discriminator 2
 3016 0032 FEE7     		b	.L231	@
 3017              	.L230:
2414:FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3018              		.loc 1 2414 0 is_stmt 1
 3019 0034 7868     		ldr	r0, [r7, #4]	@, pxEventListItem
 3020 0036 FFF7FEFF 		bl	uxListRemove	@
2415:FreeRTOS/tasks.c **** 
2416:FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2417:FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2418:FreeRTOS/tasks.c **** 	lists. */
2419:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3021              		.loc 1 2419 0
 3022 003a BB68     		ldr	r3, [r7, #8]	@ tmp131, pxUnblockedTCB
 3023 003c 0433     		adds	r3, r3, #4	@ D.6651, tmp131,
 3024 003e 1846     		mov	r0, r3	@, D.6651
 3025 0040 FFF7FEFF 		bl	uxListRemove	@
2420:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3026              		.loc 1 2420 0
 3027 0044 BB68     		ldr	r3, [r7, #8]	@ tmp132, pxUnblockedTCB
 3028 0046 DB6A     		ldr	r3, [r3, #44]	@ D.6650, pxUnblockedTCB_9->uxPriority
 3029 0048 0122     		movs	r2, #1	@ tmp133,
 3030 004a 9A40     		lsls	r2, r2, r3	@ D.6650, tmp133, D.6650
 3031 004c 144B     		ldr	r3, .L235+4	@ tmp134,
 3032 004e 1B68     		ldr	r3, [r3]	@ D.6650, uxTopReadyPriority
 3033 0050 1343     		orrs	r3, r3, r2	@, D.6650, D.6650, D.6650
 3034 0052 134A     		ldr	r2, .L235+4	@ tmp135,
 3035 0054 1360     		str	r3, [r2]	@ D.6650, uxTopReadyPriority
 3036 0056 BB68     		ldr	r3, [r7, #8]	@ tmp136, pxUnblockedTCB
 3037 0058 DA6A     		ldr	r2, [r3, #44]	@ D.6650, pxUnblockedTCB_9->uxPriority
 3038 005a 1346     		mov	r3, r2	@ tmp137, D.6650
 3039 005c 9B00     		lsls	r3, r3, #2	@ tmp137, tmp137,
 3040 005e 1344     		add	r3, r3, r2	@ tmp137, D.6650
 3041 0060 9B00     		lsls	r3, r3, #2	@ tmp138, tmp137,
 3042 0062 104A     		ldr	r2, .L235+8	@ tmp139,
 3043 0064 1A44     		add	r2, r2, r3	@ D.6652, tmp137
 3044 0066 BB68     		ldr	r3, [r7, #8]	@ tmp140, pxUnblockedTCB
 3045 0068 0433     		adds	r3, r3, #4	@ D.6651, tmp140,
 3046 006a 1946     		mov	r1, r3	@, D.6651
 3047 006c 1046     		mov	r0, r2	@, D.6652
 3048 006e FFF7FEFF 		bl	vListInsertEnd	@
2421:FreeRTOS/tasks.c **** 
2422:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3049              		.loc 1 2422 0
 3050 0072 BB68     		ldr	r3, [r7, #8]	@ tmp141, pxUnblockedTCB
 3051 0074 DA6A     		ldr	r2, [r3, #44]	@ D.6650, pxUnblockedTCB_9->uxPriority
 3052 0076 0C4B     		ldr	r3, .L235+12	@ tmp142,
 3053 0078 1B68     		ldr	r3, [r3]	@ D.6653, pxCurrentTCB
 3054 007a DB6A     		ldr	r3, [r3, #44]	@ D.6650, _23->uxPriority
 3055 007c 9A42     		cmp	r2, r3	@ D.6650, D.6650
 3056 007e 05D9     		bls	.L232	@,
2423:FreeRTOS/tasks.c **** 	{
2424:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2425:FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2426:FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2427:FreeRTOS/tasks.c **** 		switch now. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 101


2428:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 3057              		.loc 1 2428 0
 3058 0080 0123     		movs	r3, #1	@ tmp143,
 3059 0082 FB60     		str	r3, [r7, #12]	@ tmp143, xReturn
2429:FreeRTOS/tasks.c **** 
2430:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2431:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2432:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3060              		.loc 1 2432 0
 3061 0084 094B     		ldr	r3, .L235+16	@ tmp144,
 3062 0086 0122     		movs	r2, #1	@ tmp145,
 3063 0088 1A60     		str	r2, [r3]	@ tmp145, xYieldPending
 3064 008a 01E0     		b	.L233	@
 3065              	.L232:
2433:FreeRTOS/tasks.c **** 	}
2434:FreeRTOS/tasks.c **** 	else
2435:FreeRTOS/tasks.c **** 	{
2436:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 3066              		.loc 1 2436 0
 3067 008c 0023     		movs	r3, #0	@ tmp146,
 3068 008e FB60     		str	r3, [r7, #12]	@ tmp146, xReturn
 3069              	.L233:
2437:FreeRTOS/tasks.c **** 	}
2438:FreeRTOS/tasks.c **** 
2439:FreeRTOS/tasks.c **** 	return xReturn;
 3070              		.loc 1 2439 0
 3071 0090 FB68     		ldr	r3, [r7, #12]	@ D.6654, xReturn
2440:FreeRTOS/tasks.c **** }
 3072              		.loc 1 2440 0
 3073 0092 1846     		mov	r0, r3	@, <retval>
 3074 0094 1037     		adds	r7, r7, #16	@,,
 3075              		.cfi_def_cfa_offset 8
 3076 0096 BD46     		mov	sp, r7	@,
 3077              		.cfi_def_cfa_register 13
 3078              		@ sp needed	@
 3079 0098 80BD     		pop	{r7, pc}	@
 3080              	.L236:
 3081 009a 00BF     		.align	2
 3082              	.L235:
 3083 009c 00000000 		.word	uxSchedulerSuspended
 3084 00a0 00000000 		.word	uxTopReadyPriority
 3085 00a4 00000000 		.word	pxReadyTasksLists
 3086 00a8 00000000 		.word	pxCurrentTCB
 3087 00ac 00000000 		.word	xYieldPending
 3088              		.cfi_endproc
 3089              	.LFE24:
 3090              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 3091              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3092              		.align	2
 3093              		.global	vTaskSetTimeOutState
 3094              		.thumb
 3095              		.thumb_func
 3096              		.type	vTaskSetTimeOutState, %function
 3097              	vTaskSetTimeOutState:
 3098              	.LFB25:
2441:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2442:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 102


2443:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2444:FreeRTOS/tasks.c **** {
 3099              		.loc 1 2444 0
 3100              		.cfi_startproc
 3101              		@ args = 0, pretend = 0, frame = 8
 3102              		@ frame_needed = 1, uses_anonymous_args = 0
 3103 0000 80B5     		push	{r7, lr}	@
 3104              		.cfi_def_cfa_offset 8
 3105              		.cfi_offset 7, -8
 3106              		.cfi_offset 14, -4
 3107 0002 82B0     		sub	sp, sp, #8	@,,
 3108              		.cfi_def_cfa_offset 16
 3109 0004 00AF     		add	r7, sp, #0	@,,
 3110              		.cfi_def_cfa_register 7
 3111 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
2445:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3112              		.loc 1 2445 0
 3113 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, pxTimeOut
 3114 000a 002B     		cmp	r3, #0	@ tmp112,
 3115 000c 02D1     		bne	.L238	@,
 3116              		.loc 1 2445 0 is_stmt 0 discriminator 1
 3117 000e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3118              	.L239:
 3119 0012 FEE7     		b	.L239	@
 3120              	.L238:
2446:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3121              		.loc 1 2446 0 is_stmt 1
 3122 0014 054B     		ldr	r3, .L240	@ tmp113,
 3123 0016 1A68     		ldr	r2, [r3]	@ D.6655, xNumOfOverflows
 3124 0018 7B68     		ldr	r3, [r7, #4]	@ tmp114, pxTimeOut
 3125 001a 1A60     		str	r2, [r3]	@ D.6655, pxTimeOut_1(D)->xOverflowCount
2447:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3126              		.loc 1 2447 0
 3127 001c 044B     		ldr	r3, .L240+4	@ tmp115,
 3128 001e 1A68     		ldr	r2, [r3]	@ D.6656, xTickCount
 3129 0020 7B68     		ldr	r3, [r7, #4]	@ tmp116, pxTimeOut
 3130 0022 5A60     		str	r2, [r3, #4]	@ D.6656, pxTimeOut_1(D)->xTimeOnEntering
2448:FreeRTOS/tasks.c **** }
 3131              		.loc 1 2448 0
 3132 0024 00BF     		nop
 3133 0026 0837     		adds	r7, r7, #8	@,,
 3134              		.cfi_def_cfa_offset 8
 3135 0028 BD46     		mov	sp, r7	@,
 3136              		.cfi_def_cfa_register 13
 3137              		@ sp needed	@
 3138 002a 80BD     		pop	{r7, pc}	@
 3139              	.L241:
 3140              		.align	2
 3141              	.L240:
 3142 002c 00000000 		.word	xNumOfOverflows
 3143 0030 00000000 		.word	xTickCount
 3144              		.cfi_endproc
 3145              	.LFE25:
 3146              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3147              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3148              		.align	2
 3149              		.global	xTaskCheckForTimeOut
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 103


 3150              		.thumb
 3151              		.thumb_func
 3152              		.type	xTaskCheckForTimeOut, %function
 3153              	xTaskCheckForTimeOut:
 3154              	.LFB26:
2449:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2450:FreeRTOS/tasks.c **** 
2451:FreeRTOS/tasks.c **** BaseT_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickT_t * const pxTicksToWait )
2452:FreeRTOS/tasks.c **** {
 3155              		.loc 1 2452 0
 3156              		.cfi_startproc
 3157              		@ args = 0, pretend = 0, frame = 16
 3158              		@ frame_needed = 1, uses_anonymous_args = 0
 3159 0000 80B5     		push	{r7, lr}	@
 3160              		.cfi_def_cfa_offset 8
 3161              		.cfi_offset 7, -8
 3162              		.cfi_offset 14, -4
 3163 0002 84B0     		sub	sp, sp, #16	@,,
 3164              		.cfi_def_cfa_offset 24
 3165 0004 00AF     		add	r7, sp, #0	@,,
 3166              		.cfi_def_cfa_register 7
 3167 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
 3168 0008 3960     		str	r1, [r7]	@ pxTicksToWait, pxTicksToWait
2453:FreeRTOS/tasks.c **** BaseT_t xReturn;
2454:FreeRTOS/tasks.c **** 
2455:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3169              		.loc 1 2455 0
 3170 000a 7B68     		ldr	r3, [r7, #4]	@ tmp123, pxTimeOut
 3171 000c 002B     		cmp	r3, #0	@ tmp123,
 3172 000e 02D1     		bne	.L243	@,
 3173              		.loc 1 2455 0 is_stmt 0 discriminator 1
 3174 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3175              	.L244:
 3176 0014 FEE7     		b	.L244	@
 3177              	.L243:
2456:FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 3178              		.loc 1 2456 0 is_stmt 1
 3179 0016 3B68     		ldr	r3, [r7]	@ tmp124, pxTicksToWait
 3180 0018 002B     		cmp	r3, #0	@ tmp124,
 3181 001a 02D1     		bne	.L245	@,
 3182              		.loc 1 2456 0 is_stmt 0 discriminator 1
 3183 001c FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3184              	.L246:
 3185              		.loc 1 2456 0 discriminator 2
 3186 0020 FEE7     		b	.L246	@
 3187              	.L245:
2457:FreeRTOS/tasks.c **** 
2458:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 3188              		.loc 1 2458 0 is_stmt 1
 3189 0022 FFF7FEFF 		bl	vPortEnterCritical	@
 3190              	.LBB14:
2459:FreeRTOS/tasks.c **** 	{
2460:FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2461:FreeRTOS/tasks.c **** 		const TickT_t xConstTickCount = xTickCount;
 3191              		.loc 1 2461 0
 3192 0026 1C4B     		ldr	r3, .L252	@ tmp125,
 3193 0028 1B68     		ldr	r3, [r3]	@ tmp126, xTickCount
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 104


 3194 002a BB60     		str	r3, [r7, #8]	@ tmp126, xConstTickCount
2462:FreeRTOS/tasks.c **** 
2463:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2464:FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2465:FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2466:FreeRTOS/tasks.c **** 			therefore never time out. */
2467:FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3195              		.loc 1 2467 0
 3196 002c 3B68     		ldr	r3, [r7]	@ tmp127, pxTicksToWait
 3197 002e 1B68     		ldr	r3, [r3]	@ D.6657, *pxTicksToWait_4(D)
 3198 0030 B3F1FF3F 		cmp	r3, #-1	@ D.6657,
 3199 0034 02D1     		bne	.L247	@,
2468:FreeRTOS/tasks.c **** 			{
2469:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
 3200              		.loc 1 2469 0
 3201 0036 0023     		movs	r3, #0	@ tmp128,
 3202 0038 FB60     		str	r3, [r7, #12]	@ tmp128, xReturn
 3203 003a 26E0     		b	.L248	@
 3204              	.L247:
2470:FreeRTOS/tasks.c **** 			}
2471:FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2472:FreeRTOS/tasks.c **** 		#endif
2473:FreeRTOS/tasks.c **** 
2474:FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3205              		.loc 1 2474 0
 3206 003c 7B68     		ldr	r3, [r7, #4]	@ tmp129, pxTimeOut
 3207 003e 1A68     		ldr	r2, [r3]	@ D.6658, pxTimeOut_3(D)->xOverflowCount
 3208 0040 164B     		ldr	r3, .L252+4	@ tmp130,
 3209 0042 1B68     		ldr	r3, [r3]	@ D.6658, xNumOfOverflows
 3210 0044 9A42     		cmp	r2, r3	@ D.6658, D.6658
 3211 0046 07D0     		beq	.L249	@,
 3212              		.loc 1 2474 0 is_stmt 0 discriminator 1
 3213 0048 7B68     		ldr	r3, [r7, #4]	@ tmp131, pxTimeOut
 3214 004a 5A68     		ldr	r2, [r3, #4]	@ D.6657, pxTimeOut_3(D)->xTimeOnEntering
 3215 004c BB68     		ldr	r3, [r7, #8]	@ tmp132, xConstTickCount
 3216 004e 9A42     		cmp	r2, r3	@ D.6657, tmp132
 3217 0050 02D8     		bhi	.L249	@,
2475:FreeRTOS/tasks.c **** 		{
2476:FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2477:FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2478:FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2479:FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2480:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3218              		.loc 1 2480 0 is_stmt 1
 3219 0052 0123     		movs	r3, #1	@ tmp133,
 3220 0054 FB60     		str	r3, [r7, #12]	@ tmp133, xReturn
 3221 0056 18E0     		b	.L248	@
 3222              	.L249:
2481:FreeRTOS/tasks.c **** 		}
2482:FreeRTOS/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 3223              		.loc 1 2482 0
 3224 0058 7B68     		ldr	r3, [r7, #4]	@ tmp134, pxTimeOut
 3225 005a 5B68     		ldr	r3, [r3, #4]	@ D.6657, pxTimeOut_3(D)->xTimeOnEntering
 3226 005c BA68     		ldr	r2, [r7, #8]	@ tmp135, xConstTickCount
 3227 005e D21A     		subs	r2, r2, r3	@ D.6657, tmp135, D.6657
 3228 0060 3B68     		ldr	r3, [r7]	@ tmp136, pxTicksToWait
 3229 0062 1B68     		ldr	r3, [r3]	@ D.6657, *pxTicksToWait_4(D)
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 105


 3230 0064 9A42     		cmp	r2, r3	@ D.6657, D.6657
 3231 0066 0ED2     		bcs	.L250	@,
2483:FreeRTOS/tasks.c **** 		{
2484:FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2485:FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 3232              		.loc 1 2485 0
 3233 0068 3B68     		ldr	r3, [r7]	@ tmp137, pxTicksToWait
 3234 006a 1A68     		ldr	r2, [r3]	@ D.6657, *pxTicksToWait_4(D)
 3235 006c 7B68     		ldr	r3, [r7, #4]	@ tmp138, pxTimeOut
 3236 006e 5968     		ldr	r1, [r3, #4]	@ D.6657, pxTimeOut_3(D)->xTimeOnEntering
 3237 0070 BB68     		ldr	r3, [r7, #8]	@ tmp139, xConstTickCount
 3238 0072 CB1A     		subs	r3, r1, r3	@ D.6657, D.6657, tmp139
 3239 0074 1A44     		add	r2, r2, r3	@ D.6657, D.6657
 3240 0076 3B68     		ldr	r3, [r7]	@ tmp140, pxTicksToWait
 3241 0078 1A60     		str	r2, [r3]	@ D.6657, *pxTicksToWait_4(D)
2486:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3242              		.loc 1 2486 0
 3243 007a 7868     		ldr	r0, [r7, #4]	@, pxTimeOut
 3244 007c FFF7FEFF 		bl	vTaskSetTimeOutState	@
2487:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 3245              		.loc 1 2487 0
 3246 0080 0023     		movs	r3, #0	@ tmp141,
 3247 0082 FB60     		str	r3, [r7, #12]	@ tmp141, xReturn
 3248 0084 01E0     		b	.L248	@
 3249              	.L250:
2488:FreeRTOS/tasks.c **** 		}
2489:FreeRTOS/tasks.c **** 		else
2490:FreeRTOS/tasks.c **** 		{
2491:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3250              		.loc 1 2491 0
 3251 0086 0123     		movs	r3, #1	@ tmp142,
 3252 0088 FB60     		str	r3, [r7, #12]	@ tmp142, xReturn
 3253              	.L248:
 3254              	.LBE14:
2492:FreeRTOS/tasks.c **** 		}
2493:FreeRTOS/tasks.c **** 	}
2494:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 3255              		.loc 1 2494 0
 3256 008a FFF7FEFF 		bl	vPortExitCritical	@
2495:FreeRTOS/tasks.c **** 
2496:FreeRTOS/tasks.c **** 	return xReturn;
 3257              		.loc 1 2496 0
 3258 008e FB68     		ldr	r3, [r7, #12]	@ D.6659, xReturn
2497:FreeRTOS/tasks.c **** }
 3259              		.loc 1 2497 0
 3260 0090 1846     		mov	r0, r3	@, <retval>
 3261 0092 1037     		adds	r7, r7, #16	@,,
 3262              		.cfi_def_cfa_offset 8
 3263 0094 BD46     		mov	sp, r7	@,
 3264              		.cfi_def_cfa_register 13
 3265              		@ sp needed	@
 3266 0096 80BD     		pop	{r7, pc}	@
 3267              	.L253:
 3268              		.align	2
 3269              	.L252:
 3270 0098 00000000 		.word	xTickCount
 3271 009c 00000000 		.word	xNumOfOverflows
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 106


 3272              		.cfi_endproc
 3273              	.LFE26:
 3274              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3275              		.section	.text.vTaskMissedYield,"ax",%progbits
 3276              		.align	2
 3277              		.global	vTaskMissedYield
 3278              		.thumb
 3279              		.thumb_func
 3280              		.type	vTaskMissedYield, %function
 3281              	vTaskMissedYield:
 3282              	.LFB27:
2498:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2499:FreeRTOS/tasks.c **** 
2500:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
2501:FreeRTOS/tasks.c **** {
 3283              		.loc 1 2501 0
 3284              		.cfi_startproc
 3285              		@ args = 0, pretend = 0, frame = 0
 3286              		@ frame_needed = 1, uses_anonymous_args = 0
 3287              		@ link register save eliminated.
 3288 0000 80B4     		push	{r7}	@
 3289              		.cfi_def_cfa_offset 4
 3290              		.cfi_offset 7, -4
 3291 0002 00AF     		add	r7, sp, #0	@,,
 3292              		.cfi_def_cfa_register 7
2502:FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3293              		.loc 1 2502 0
 3294 0004 034B     		ldr	r3, .L255	@ tmp110,
 3295 0006 0122     		movs	r2, #1	@ tmp111,
 3296 0008 1A60     		str	r2, [r3]	@ tmp111, xYieldPending
2503:FreeRTOS/tasks.c **** }
 3297              		.loc 1 2503 0
 3298 000a 00BF     		nop
 3299 000c BD46     		mov	sp, r7	@,
 3300              		.cfi_def_cfa_register 13
 3301              		@ sp needed	@
 3302 000e 80BC     		pop	{r7}	@
 3303              		.cfi_restore 7
 3304              		.cfi_def_cfa_offset 0
 3305 0010 7047     		bx	lr	@
 3306              	.L256:
 3307 0012 00BF     		.align	2
 3308              	.L255:
 3309 0014 00000000 		.word	xYieldPending
 3310              		.cfi_endproc
 3311              	.LFE27:
 3312              		.size	vTaskMissedYield, .-vTaskMissedYield
 3313              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3314              		.align	2
 3315              		.global	uxTaskGetTaskNumber
 3316              		.thumb
 3317              		.thumb_func
 3318              		.type	uxTaskGetTaskNumber, %function
 3319              	uxTaskGetTaskNumber:
 3320              	.LFB28:
2504:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2505:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 107


2506:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2507:FreeRTOS/tasks.c **** 
2508:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2509:FreeRTOS/tasks.c **** 	{
 3321              		.loc 1 2509 0
 3322              		.cfi_startproc
 3323              		@ args = 0, pretend = 0, frame = 16
 3324              		@ frame_needed = 1, uses_anonymous_args = 0
 3325              		@ link register save eliminated.
 3326 0000 80B4     		push	{r7}	@
 3327              		.cfi_def_cfa_offset 4
 3328              		.cfi_offset 7, -4
 3329 0002 85B0     		sub	sp, sp, #20	@,,
 3330              		.cfi_def_cfa_offset 24
 3331 0004 00AF     		add	r7, sp, #0	@,,
 3332              		.cfi_def_cfa_register 7
 3333 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
2510:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
2511:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2512:FreeRTOS/tasks.c **** 
2513:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3334              		.loc 1 2513 0
 3335 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, xTask
 3336 000a 002B     		cmp	r3, #0	@ tmp112,
 3337 000c 05D0     		beq	.L258	@,
2514:FreeRTOS/tasks.c **** 		{
2515:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3338              		.loc 1 2515 0
 3339 000e 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 3340 0010 BB60     		str	r3, [r7, #8]	@ tmp113, pxTCB
2516:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 3341              		.loc 1 2516 0
 3342 0012 BB68     		ldr	r3, [r7, #8]	@ tmp114, pxTCB
 3343 0014 5B6C     		ldr	r3, [r3, #68]	@ tmp115, pxTCB_3->uxTaskNumber
 3344 0016 FB60     		str	r3, [r7, #12]	@ tmp115, uxReturn
 3345 0018 01E0     		b	.L259	@
 3346              	.L258:
2517:FreeRTOS/tasks.c **** 		}
2518:FreeRTOS/tasks.c **** 		else
2519:FreeRTOS/tasks.c **** 		{
2520:FreeRTOS/tasks.c **** 			uxReturn = 0U;
 3347              		.loc 1 2520 0
 3348 001a 0023     		movs	r3, #0	@ tmp116,
 3349 001c FB60     		str	r3, [r7, #12]	@ tmp116, uxReturn
 3350              	.L259:
2521:FreeRTOS/tasks.c **** 		}
2522:FreeRTOS/tasks.c **** 
2523:FreeRTOS/tasks.c **** 		return uxReturn;
 3351              		.loc 1 2523 0
 3352 001e FB68     		ldr	r3, [r7, #12]	@ D.6660, uxReturn
2524:FreeRTOS/tasks.c **** 	}
 3353              		.loc 1 2524 0
 3354 0020 1846     		mov	r0, r3	@, <retval>
 3355 0022 1437     		adds	r7, r7, #20	@,,
 3356              		.cfi_def_cfa_offset 4
 3357 0024 BD46     		mov	sp, r7	@,
 3358              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 108


 3359              		@ sp needed	@
 3360 0026 80BC     		pop	{r7}	@
 3361              		.cfi_restore 7
 3362              		.cfi_def_cfa_offset 0
 3363 0028 7047     		bx	lr	@
 3364              		.cfi_endproc
 3365              	.LFE28:
 3366              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 3367 002a 00BF     		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3368              		.align	2
 3369              		.global	vTaskSetTaskNumber
 3370              		.thumb
 3371              		.thumb_func
 3372              		.type	vTaskSetTaskNumber, %function
 3373              	vTaskSetTaskNumber:
 3374              	.LFB29:
2525:FreeRTOS/tasks.c **** 
2526:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2527:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2528:FreeRTOS/tasks.c **** 
2529:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2530:FreeRTOS/tasks.c **** 
2531:FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseT_t uxHandle )
2532:FreeRTOS/tasks.c **** 	{
 3375              		.loc 1 2532 0
 3376              		.cfi_startproc
 3377              		@ args = 0, pretend = 0, frame = 16
 3378              		@ frame_needed = 1, uses_anonymous_args = 0
 3379              		@ link register save eliminated.
 3380 0000 80B4     		push	{r7}	@
 3381              		.cfi_def_cfa_offset 4
 3382              		.cfi_offset 7, -4
 3383 0002 85B0     		sub	sp, sp, #20	@,,
 3384              		.cfi_def_cfa_offset 24
 3385 0004 00AF     		add	r7, sp, #0	@,,
 3386              		.cfi_def_cfa_register 7
 3387 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 3388 0008 3960     		str	r1, [r7]	@ uxHandle, uxHandle
2533:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2534:FreeRTOS/tasks.c **** 
2535:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3389              		.loc 1 2535 0
 3390 000a 7B68     		ldr	r3, [r7, #4]	@ tmp110, xTask
 3391 000c 002B     		cmp	r3, #0	@ tmp110,
 3392 000e 04D0     		beq	.L263	@,
2536:FreeRTOS/tasks.c **** 		{
2537:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3393              		.loc 1 2537 0
 3394 0010 7B68     		ldr	r3, [r7, #4]	@ tmp111, xTask
 3395 0012 FB60     		str	r3, [r7, #12]	@ tmp111, pxTCB
2538:FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 3396              		.loc 1 2538 0
 3397 0014 FB68     		ldr	r3, [r7, #12]	@ tmp112, pxTCB
 3398 0016 3A68     		ldr	r2, [r7]	@ tmp113, uxHandle
 3399 0018 5A64     		str	r2, [r3, #68]	@ tmp113, pxTCB_4->uxTaskNumber
 3400              	.L263:
2539:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 109


2540:FreeRTOS/tasks.c **** 	}
 3401              		.loc 1 2540 0
 3402 001a 00BF     		nop
 3403 001c 1437     		adds	r7, r7, #20	@,,
 3404              		.cfi_def_cfa_offset 4
 3405 001e BD46     		mov	sp, r7	@,
 3406              		.cfi_def_cfa_register 13
 3407              		@ sp needed	@
 3408 0020 80BC     		pop	{r7}	@
 3409              		.cfi_restore 7
 3410              		.cfi_def_cfa_offset 0
 3411 0022 7047     		bx	lr	@
 3412              		.cfi_endproc
 3413              	.LFE29:
 3414              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 3415              		.section	.text.prvIdleTask,"ax",%progbits
 3416              		.align	2
 3417              		.thumb
 3418              		.thumb_func
 3419              		.type	prvIdleTask, %function
 3420              	prvIdleTask:
 3421              	.LFB30:
2541:FreeRTOS/tasks.c **** 
2542:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2543:FreeRTOS/tasks.c **** 
2544:FreeRTOS/tasks.c **** /*
2545:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
2546:FreeRTOS/tasks.c ****  * The Idle task.
2547:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
2548:FreeRTOS/tasks.c ****  *
2549:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2550:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2551:FreeRTOS/tasks.c ****  *
2552:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
2553:FreeRTOS/tasks.c ****  *
2554:FreeRTOS/tasks.c ****  */
2555:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2556:FreeRTOS/tasks.c **** {
 3422              		.loc 1 2556 0
 3423              		.cfi_startproc
 3424              		@ args = 0, pretend = 0, frame = 8
 3425              		@ frame_needed = 1, uses_anonymous_args = 0
 3426 0000 80B5     		push	{r7, lr}	@
 3427              		.cfi_def_cfa_offset 8
 3428              		.cfi_offset 7, -8
 3429              		.cfi_offset 14, -4
 3430 0002 82B0     		sub	sp, sp, #8	@,,
 3431              		.cfi_def_cfa_offset 16
 3432 0004 00AF     		add	r7, sp, #0	@,,
 3433              		.cfi_def_cfa_register 7
 3434 0006 7860     		str	r0, [r7, #4]	@ pvParameters, pvParameters
 3435              	.L265:
2557:FreeRTOS/tasks.c **** 	/* Stop warnings. */
2558:FreeRTOS/tasks.c **** 	( void ) pvParameters;
2559:FreeRTOS/tasks.c **** 
2560:FreeRTOS/tasks.c **** 	for( ;; )
2561:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 110


2562:FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
2563:FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 3436              		.loc 1 2563 0 discriminator 1
 3437 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination	@
2564:FreeRTOS/tasks.c **** 
2565:FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2566:FreeRTOS/tasks.c **** 		{
2567:FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2568:FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
2569:FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
2570:FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
2571:FreeRTOS/tasks.c **** 			taskYIELD();
2572:FreeRTOS/tasks.c **** 		}
2573:FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2574:FreeRTOS/tasks.c **** 
2575:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2576:FreeRTOS/tasks.c **** 		{
2577:FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
2578:FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2579:FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
2580:FreeRTOS/tasks.c **** 			timeslice.
2581:FreeRTOS/tasks.c **** 
2582:FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
2583:FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2584:FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
2585:FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
2586:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseT_t ) 1 )
2587:FreeRTOS/tasks.c **** 			{
2588:FreeRTOS/tasks.c **** 				taskYIELD();
2589:FreeRTOS/tasks.c **** 			}
2590:FreeRTOS/tasks.c **** 			else
2591:FreeRTOS/tasks.c **** 			{
2592:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2593:FreeRTOS/tasks.c **** 			}
2594:FreeRTOS/tasks.c **** 		}
2595:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2596:FreeRTOS/tasks.c **** 
2597:FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2598:FreeRTOS/tasks.c **** 		{
2599:FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
2600:FreeRTOS/tasks.c **** 
2601:FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2602:FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
2603:FreeRTOS/tasks.c **** 			without the overhead of a separate task.
2604:FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2605:FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2606:FreeRTOS/tasks.c **** 			vApplicationIdleHook();
2607:FreeRTOS/tasks.c **** 		}
2608:FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2609:FreeRTOS/tasks.c **** 
2610:FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2611:FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2612:FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
2613:FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2614:FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2615:FreeRTOS/tasks.c **** 		{
2616:FreeRTOS/tasks.c **** 		TickT_t xExpectedIdleTime;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 111


2617:FreeRTOS/tasks.c **** 
2618:FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2619:FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2620:FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
2621:FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2622:FreeRTOS/tasks.c **** 			valid. */
2623:FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2624:FreeRTOS/tasks.c **** 
2625:FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2626:FreeRTOS/tasks.c **** 			{
2627:FreeRTOS/tasks.c **** 				vTaskSuspendAll();
2628:FreeRTOS/tasks.c **** 				{
2629:FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2630:FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
2631:FreeRTOS/tasks.c **** 					be used. */
2632:FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2633:FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2634:FreeRTOS/tasks.c **** 
2635:FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2636:FreeRTOS/tasks.c **** 					{
2637:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2638:FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2639:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
2640:FreeRTOS/tasks.c **** 					}
2641:FreeRTOS/tasks.c **** 					else
2642:FreeRTOS/tasks.c **** 					{
2643:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2644:FreeRTOS/tasks.c **** 					}
2645:FreeRTOS/tasks.c **** 				}
2646:FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
2647:FreeRTOS/tasks.c **** 			}
2648:FreeRTOS/tasks.c **** 			else
2649:FreeRTOS/tasks.c **** 			{
2650:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2651:FreeRTOS/tasks.c **** 			}
2652:FreeRTOS/tasks.c **** 		}
2653:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2654:FreeRTOS/tasks.c **** 	}
 3438              		.loc 1 2654 0 discriminator 1
 3439 000c FCE7     		b	.L265	@
 3440              		.cfi_endproc
 3441              	.LFE30:
 3442              		.size	prvIdleTask, .-prvIdleTask
 3443 000e 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 3444              		.align	2
 3445              		.thumb
 3446              		.thumb_func
 3447              		.type	prvInitialiseTCBVariables, %function
 3448              	prvInitialiseTCBVariables:
 3449              	.LFB31:
2655:FreeRTOS/tasks.c **** }
2656:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2657:FreeRTOS/tasks.c **** 
2658:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
2659:FreeRTOS/tasks.c **** 
2660:FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2661:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 112


2662:FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2663:FreeRTOS/tasks.c **** 
2664:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2665:FreeRTOS/tasks.c **** 		{
2666:FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2667:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2668:FreeRTOS/tasks.c **** 		}
2669:FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
2670:FreeRTOS/tasks.c **** 		{
2671:FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2672:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2673:FreeRTOS/tasks.c **** 		}
2674:FreeRTOS/tasks.c **** 		else
2675:FreeRTOS/tasks.c **** 		{
2676:FreeRTOS/tasks.c **** 			#if configUSE_TIMERS == 0
2677:FreeRTOS/tasks.c **** 			{
2678:FreeRTOS/tasks.c **** 				/* The idle task exists in addition to the application tasks. */
2679:FreeRTOS/tasks.c **** 				const UBaseT_t uxNonApplicationTasks = 1;
2680:FreeRTOS/tasks.c **** 
2681:FreeRTOS/tasks.c **** 				/* If timers are not being used and all the tasks are in the
2682:FreeRTOS/tasks.c **** 				suspended list (which might mean they have an infinite block
2683:FreeRTOS/tasks.c **** 				time rather than actually being suspended) then it is safe to
2684:FreeRTOS/tasks.c **** 				turn all clocks off and just wait for external interrupts. */
2685:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicati
2686:FreeRTOS/tasks.c **** 				{
2687:FreeRTOS/tasks.c **** 					eReturn = eNoTasksWaitingTimeout;
2688:FreeRTOS/tasks.c **** 				}
2689:FreeRTOS/tasks.c **** 				else
2690:FreeRTOS/tasks.c **** 				{
2691:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2692:FreeRTOS/tasks.c **** 				}
2693:FreeRTOS/tasks.c **** 			}
2694:FreeRTOS/tasks.c **** 			#endif /* configUSE_TIMERS */
2695:FreeRTOS/tasks.c **** 		}
2696:FreeRTOS/tasks.c **** 
2697:FreeRTOS/tasks.c **** 		return eReturn;
2698:FreeRTOS/tasks.c **** 	}
2699:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2700:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2701:FreeRTOS/tasks.c **** 
2702:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
2703:FreeRTOS/tasks.c **** {
 3450              		.loc 1 2703 0
 3451              		.cfi_startproc
 3452              		@ args = 4, pretend = 0, frame = 24
 3453              		@ frame_needed = 1, uses_anonymous_args = 0
 3454 0000 80B5     		push	{r7, lr}	@
 3455              		.cfi_def_cfa_offset 8
 3456              		.cfi_offset 7, -8
 3457              		.cfi_offset 14, -4
 3458 0002 86B0     		sub	sp, sp, #24	@,,
 3459              		.cfi_def_cfa_offset 32
 3460 0004 00AF     		add	r7, sp, #0	@,,
 3461              		.cfi_def_cfa_register 7
 3462 0006 F860     		str	r0, [r7, #12]	@ pxTCB, pxTCB
 3463 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 3464 000a 7A60     		str	r2, [r7, #4]	@ uxPriority, uxPriority
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 113


 3465 000c 3B60     		str	r3, [r7]	@ xRegions, xRegions
2704:FreeRTOS/tasks.c **** UBaseT_t x;
2705:FreeRTOS/tasks.c **** 
2706:FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
2707:FreeRTOS/tasks.c **** 	for( x = ( UBaseT_t ) 0; x < ( UBaseT_t ) configMAX_TASK_NAME_LEN; x++ )
 3466              		.loc 1 2707 0
 3467 000e 0023     		movs	r3, #0	@ tmp117,
 3468 0010 7B61     		str	r3, [r7, #20]	@ tmp117, x
 3469 0012 12E0     		b	.L267	@
 3470              	.L270:
2708:FreeRTOS/tasks.c **** 	{
2709:FreeRTOS/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 3471              		.loc 1 2709 0
 3472 0014 BA68     		ldr	r2, [r7, #8]	@ tmp118, pcName
 3473 0016 7B69     		ldr	r3, [r7, #20]	@ tmp119, x
 3474 0018 1344     		add	r3, r3, r2	@ D.6661, tmp118
 3475 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2	@ D.6662, *_8
 3476 001c FA68     		ldr	r2, [r7, #12]	@ tmp120, pxTCB
 3477 001e 7B69     		ldr	r3, [r7, #20]	@ tmp122, x
 3478 0020 1344     		add	r3, r3, r2	@ tmp121, tmp120
 3479 0022 3433     		adds	r3, r3, #52	@ tmp123, tmp121,
 3480 0024 0A46     		mov	r2, r1	@ tmp124, D.6662
 3481 0026 1A70     		strb	r2, [r3]	@ tmp124, pxTCB_10(D)->pcTaskName
2710:FreeRTOS/tasks.c **** 
2711:FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2712:FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2713:FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
2714:FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 3482              		.loc 1 2714 0
 3483 0028 BA68     		ldr	r2, [r7, #8]	@ tmp125, pcName
 3484 002a 7B69     		ldr	r3, [r7, #20]	@ tmp126, x
 3485 002c 1344     		add	r3, r3, r2	@ D.6661, tmp125
 3486 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ D.6662, *_12
 3487 0030 002B     		cmp	r3, #0	@ D.6662,
 3488 0032 06D0     		beq	.L272	@,
2707:FreeRTOS/tasks.c **** 	{
 3489              		.loc 1 2707 0 discriminator 2
 3490 0034 7B69     		ldr	r3, [r7, #20]	@ tmp128, x
 3491 0036 0133     		adds	r3, r3, #1	@ tmp127, tmp128,
 3492 0038 7B61     		str	r3, [r7, #20]	@ tmp127, x
 3493              	.L267:
2707:FreeRTOS/tasks.c **** 	{
 3494              		.loc 1 2707 0 is_stmt 0 discriminator 1
 3495 003a 7B69     		ldr	r3, [r7, #20]	@ tmp129, x
 3496 003c 0B2B     		cmp	r3, #11	@ tmp129,
 3497 003e E9D9     		bls	.L270	@,
 3498 0040 00E0     		b	.L269	@
 3499              	.L272:
2715:FreeRTOS/tasks.c **** 		{
2716:FreeRTOS/tasks.c **** 			break;
 3500              		.loc 1 2716 0 is_stmt 1
 3501 0042 00BF     		nop
 3502              	.L269:
2717:FreeRTOS/tasks.c **** 		}
2718:FreeRTOS/tasks.c **** 		else
2719:FreeRTOS/tasks.c **** 		{
2720:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 114


2721:FreeRTOS/tasks.c **** 		}
2722:FreeRTOS/tasks.c **** 	}
2723:FreeRTOS/tasks.c **** 
2724:FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2725:FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2726:FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 3503              		.loc 1 2726 0
 3504 0044 FB68     		ldr	r3, [r7, #12]	@ tmp130, pxTCB
 3505 0046 0022     		movs	r2, #0	@ tmp131,
 3506 0048 83F83F20 		strb	r2, [r3, #63]	@ tmp132, pxTCB_10(D)->pcTaskName
2727:FreeRTOS/tasks.c **** 
2728:FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2729:FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
2730:FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 3507              		.loc 1 2730 0
 3508 004c 7B68     		ldr	r3, [r7, #4]	@ tmp133, uxPriority
 3509 004e 072B     		cmp	r3, #7	@ tmp133,
 3510 0050 01D9     		bls	.L271	@,
2731:FreeRTOS/tasks.c **** 	{
2732:FreeRTOS/tasks.c **** 		uxPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 3511              		.loc 1 2732 0
 3512 0052 0723     		movs	r3, #7	@ tmp134,
 3513 0054 7B60     		str	r3, [r7, #4]	@ tmp134, uxPriority
 3514              	.L271:
2733:FreeRTOS/tasks.c **** 	}
2734:FreeRTOS/tasks.c **** 	else
2735:FreeRTOS/tasks.c **** 	{
2736:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2737:FreeRTOS/tasks.c **** 	}
2738:FreeRTOS/tasks.c **** 
2739:FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 3515              		.loc 1 2739 0
 3516 0056 FB68     		ldr	r3, [r7, #12]	@ tmp135, pxTCB
 3517 0058 7A68     		ldr	r2, [r7, #4]	@ tmp136, uxPriority
 3518 005a DA62     		str	r2, [r3, #44]	@ tmp136, pxTCB_10(D)->uxPriority
2740:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2741:FreeRTOS/tasks.c **** 	{
2742:FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 3519              		.loc 1 2742 0
 3520 005c FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 3521 005e 7A68     		ldr	r2, [r7, #4]	@ tmp138, uxPriority
 3522 0060 9A64     		str	r2, [r3, #72]	@ tmp138, pxTCB_10(D)->uxBasePriority
2743:FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 3523              		.loc 1 2743 0
 3524 0062 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 3525 0064 0022     		movs	r2, #0	@ tmp140,
 3526 0066 DA64     		str	r2, [r3, #76]	@ tmp140, pxTCB_10(D)->uxMutexesHeld
2744:FreeRTOS/tasks.c **** 	}
2745:FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
2746:FreeRTOS/tasks.c **** 
2747:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 3527              		.loc 1 2747 0
 3528 0068 FB68     		ldr	r3, [r7, #12]	@ tmp141, pxTCB
 3529 006a 0433     		adds	r3, r3, #4	@ D.6663, tmp141,
 3530 006c 1846     		mov	r0, r3	@, D.6663
 3531 006e FFF7FEFF 		bl	vListInitialiseItem	@
2748:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 115


 3532              		.loc 1 2748 0
 3533 0072 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 3534 0074 1833     		adds	r3, r3, #24	@ D.6663, tmp142,
 3535 0076 1846     		mov	r0, r3	@, D.6663
 3536 0078 FFF7FEFF 		bl	vListInitialiseItem	@
2749:FreeRTOS/tasks.c **** 
2750:FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2751:FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2752:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 3537              		.loc 1 2752 0
 3538 007c FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 3539 007e FA68     		ldr	r2, [r7, #12]	@ tmp144, pxTCB
 3540 0080 1A61     		str	r2, [r3, #16]	@ tmp144, pxTCB_10(D)->xGenericListItem.pvOwner
2753:FreeRTOS/tasks.c **** 
2754:FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
2755:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( TickT_t 
 3541              		.loc 1 2755 0
 3542 0082 7B68     		ldr	r3, [r7, #4]	@ tmp145, uxPriority
 3543 0084 C3F10802 		rsb	r2, r3, #8	@ D.6664, tmp145,
 3544 0088 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 3545 008a 9A61     		str	r2, [r3, #24]	@ D.6664, pxTCB_10(D)->xEventListItem.xItemValue
2756:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3546              		.loc 1 2756 0
 3547 008c FB68     		ldr	r3, [r7, #12]	@ tmp147, pxTCB
 3548 008e FA68     		ldr	r2, [r7, #12]	@ tmp148, pxTCB
 3549 0090 5A62     		str	r2, [r3, #36]	@ tmp148, pxTCB_10(D)->xEventListItem.pvOwner
2757:FreeRTOS/tasks.c **** 
2758:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2759:FreeRTOS/tasks.c **** 	{
2760:FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseT_t ) 0U;
2761:FreeRTOS/tasks.c **** 	}
2762:FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2763:FreeRTOS/tasks.c **** 
2764:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2765:FreeRTOS/tasks.c **** 	{
2766:FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2767:FreeRTOS/tasks.c **** 	}
2768:FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2769:FreeRTOS/tasks.c **** 
2770:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2771:FreeRTOS/tasks.c **** 	{
2772:FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2773:FreeRTOS/tasks.c **** 	}
2774:FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2775:FreeRTOS/tasks.c **** 
2776:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2777:FreeRTOS/tasks.c **** 	{
2778:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2779:FreeRTOS/tasks.c **** 	}
2780:FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2781:FreeRTOS/tasks.c **** 	{
2782:FreeRTOS/tasks.c **** 		( void ) xRegions;
2783:FreeRTOS/tasks.c **** 		( void ) usStackDepth;
2784:FreeRTOS/tasks.c **** 	}
2785:FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2786:FreeRTOS/tasks.c **** 
2787:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 116


2788:FreeRTOS/tasks.c **** 	{
2789:FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2790:FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2791:FreeRTOS/tasks.c **** 	}
2792:FreeRTOS/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2793:FreeRTOS/tasks.c **** }
 3550              		.loc 1 2793 0
 3551 0092 00BF     		nop
 3552 0094 1837     		adds	r7, r7, #24	@,,
 3553              		.cfi_def_cfa_offset 8
 3554 0096 BD46     		mov	sp, r7	@,
 3555              		.cfi_def_cfa_register 13
 3556              		@ sp needed	@
 3557 0098 80BD     		pop	{r7, pc}	@
 3558              		.cfi_endproc
 3559              	.LFE31:
 3560              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 3561 009a 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3562              		.align	2
 3563              		.thumb
 3564              		.thumb_func
 3565              		.type	prvInitialiseTaskLists, %function
 3566              	prvInitialiseTaskLists:
 3567              	.LFB32:
2794:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2795:FreeRTOS/tasks.c **** 
2796:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2797:FreeRTOS/tasks.c **** 
2798:FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2799:FreeRTOS/tasks.c **** 	{
2800:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2801:FreeRTOS/tasks.c **** 
2802:FreeRTOS/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2803:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2804:FreeRTOS/tasks.c **** 
2805:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2806:FreeRTOS/tasks.c **** 	}
2807:FreeRTOS/tasks.c **** 
2808:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2809:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2810:FreeRTOS/tasks.c **** 
2811:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
2812:FreeRTOS/tasks.c **** {
 3568              		.loc 1 2812 0
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 8
 3571              		@ frame_needed = 1, uses_anonymous_args = 0
 3572 0000 80B5     		push	{r7, lr}	@
 3573              		.cfi_def_cfa_offset 8
 3574              		.cfi_offset 7, -8
 3575              		.cfi_offset 14, -4
 3576 0002 82B0     		sub	sp, sp, #8	@,,
 3577              		.cfi_def_cfa_offset 16
 3578 0004 00AF     		add	r7, sp, #0	@,,
 3579              		.cfi_def_cfa_register 7
2813:FreeRTOS/tasks.c **** UBaseT_t uxPriority;
2814:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 117


2815:FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseT_t ) 0U; uxPriority < ( UBaseT_t ) configMAX_PRIORITIES; uxPriority++ )
 3580              		.loc 1 2815 0
 3581 0006 0023     		movs	r3, #0	@ tmp111,
 3582 0008 7B60     		str	r3, [r7, #4]	@ tmp111, uxPriority
 3583 000a 0CE0     		b	.L274	@
 3584              	.L275:
2816:FreeRTOS/tasks.c **** 	{
2817:FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3585              		.loc 1 2817 0 discriminator 3
 3586 000c 7A68     		ldr	r2, [r7, #4]	@ tmp112, uxPriority
 3587 000e 1346     		mov	r3, r2	@ tmp113, tmp112
 3588 0010 9B00     		lsls	r3, r3, #2	@ tmp113, tmp113,
 3589 0012 1344     		add	r3, r3, r2	@ tmp113, tmp112
 3590 0014 9B00     		lsls	r3, r3, #2	@ tmp114, tmp113,
 3591 0016 124A     		ldr	r2, .L276	@ tmp115,
 3592 0018 1344     		add	r3, r3, r2	@ D.6665, tmp115
 3593 001a 1846     		mov	r0, r3	@, D.6665
 3594 001c FFF7FEFF 		bl	vListInitialise	@
2815:FreeRTOS/tasks.c **** 	{
 3595              		.loc 1 2815 0 discriminator 3
 3596 0020 7B68     		ldr	r3, [r7, #4]	@ tmp117, uxPriority
 3597 0022 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 3598 0024 7B60     		str	r3, [r7, #4]	@ tmp116, uxPriority
 3599              	.L274:
2815:FreeRTOS/tasks.c **** 	{
 3600              		.loc 1 2815 0 is_stmt 0 discriminator 1
 3601 0026 7B68     		ldr	r3, [r7, #4]	@ tmp118, uxPriority
 3602 0028 072B     		cmp	r3, #7	@ tmp118,
 3603 002a EFD9     		bls	.L275	@,
2818:FreeRTOS/tasks.c **** 	}
2819:FreeRTOS/tasks.c **** 
2820:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3604              		.loc 1 2820 0 is_stmt 1
 3605 002c 0D48     		ldr	r0, .L276+4	@,
 3606 002e FFF7FEFF 		bl	vListInitialise	@
2821:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3607              		.loc 1 2821 0
 3608 0032 0D48     		ldr	r0, .L276+8	@,
 3609 0034 FFF7FEFF 		bl	vListInitialise	@
2822:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3610              		.loc 1 2822 0
 3611 0038 0C48     		ldr	r0, .L276+12	@,
 3612 003a FFF7FEFF 		bl	vListInitialise	@
2823:FreeRTOS/tasks.c **** 
2824:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2825:FreeRTOS/tasks.c **** 	{
2826:FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3613              		.loc 1 2826 0
 3614 003e 0C48     		ldr	r0, .L276+16	@,
 3615 0040 FFF7FEFF 		bl	vListInitialise	@
2827:FreeRTOS/tasks.c **** 	}
2828:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
2829:FreeRTOS/tasks.c **** 
2830:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2831:FreeRTOS/tasks.c **** 	{
2832:FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3616              		.loc 1 2832 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 118


 3617 0044 0B48     		ldr	r0, .L276+20	@,
 3618 0046 FFF7FEFF 		bl	vListInitialise	@
2833:FreeRTOS/tasks.c **** 	}
2834:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2835:FreeRTOS/tasks.c **** 
2836:FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2837:FreeRTOS/tasks.c **** 	using list2. */
2838:FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3619              		.loc 1 2838 0
 3620 004a 0B4B     		ldr	r3, .L276+24	@ tmp119,
 3621 004c 054A     		ldr	r2, .L276+4	@ tmp120,
 3622 004e 1A60     		str	r2, [r3]	@ tmp120, pxDelayedTaskList
2839:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3623              		.loc 1 2839 0
 3624 0050 0A4B     		ldr	r3, .L276+28	@ tmp121,
 3625 0052 054A     		ldr	r2, .L276+8	@ tmp122,
 3626 0054 1A60     		str	r2, [r3]	@ tmp122, pxOverflowDelayedTaskList
2840:FreeRTOS/tasks.c **** }
 3627              		.loc 1 2840 0
 3628 0056 00BF     		nop
 3629 0058 0837     		adds	r7, r7, #8	@,,
 3630              		.cfi_def_cfa_offset 8
 3631 005a BD46     		mov	sp, r7	@,
 3632              		.cfi_def_cfa_register 13
 3633              		@ sp needed	@
 3634 005c 80BD     		pop	{r7, pc}	@
 3635              	.L277:
 3636 005e 00BF     		.align	2
 3637              	.L276:
 3638 0060 00000000 		.word	pxReadyTasksLists
 3639 0064 00000000 		.word	xDelayedTaskList1
 3640 0068 00000000 		.word	xDelayedTaskList2
 3641 006c 00000000 		.word	xPendingReadyList
 3642 0070 00000000 		.word	xTasksWaitingTermination
 3643 0074 00000000 		.word	xSuspendedTaskList
 3644 0078 00000000 		.word	pxDelayedTaskList
 3645 007c 00000000 		.word	pxOverflowDelayedTaskList
 3646              		.cfi_endproc
 3647              	.LFE32:
 3648              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3649              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3650              		.align	2
 3651              		.thumb
 3652              		.thumb_func
 3653              		.type	prvCheckTasksWaitingTermination, %function
 3654              	prvCheckTasksWaitingTermination:
 3655              	.LFB33:
2841:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2842:FreeRTOS/tasks.c **** 
2843:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2844:FreeRTOS/tasks.c **** {
 3656              		.loc 1 2844 0
 3657              		.cfi_startproc
 3658              		@ args = 0, pretend = 0, frame = 8
 3659              		@ frame_needed = 1, uses_anonymous_args = 0
 3660 0000 80B5     		push	{r7, lr}	@
 3661              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 119


 3662              		.cfi_offset 7, -8
 3663              		.cfi_offset 14, -4
 3664 0002 82B0     		sub	sp, sp, #8	@,,
 3665              		.cfi_def_cfa_offset 16
 3666 0004 00AF     		add	r7, sp, #0	@,,
 3667              		.cfi_def_cfa_register 7
 3668              	.LBB15:
2845:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2846:FreeRTOS/tasks.c **** 	{
2847:FreeRTOS/tasks.c **** 		BaseT_t xListIsEmpty;
2848:FreeRTOS/tasks.c **** 
2849:FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2850:FreeRTOS/tasks.c **** 		too often in the idle task. */
2851:FreeRTOS/tasks.c **** 		while( uxTasksDeleted > ( UBaseT_t ) 0U )
 3669              		.loc 1 2851 0
 3670 0006 28E0     		b	.L279	@
 3671              	.L280:
2852:FreeRTOS/tasks.c **** 		{
2853:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3672              		.loc 1 2853 0
 3673 0008 FFF7FEFF 		bl	vTaskSuspendAll	@
2854:FreeRTOS/tasks.c **** 			{
2855:FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3674              		.loc 1 2855 0
 3675 000c 174B     		ldr	r3, .L281	@ tmp119,
 3676 000e 1B68     		ldr	r3, [r3]	@ D.6666, xTasksWaitingTermination.uxNumberOfItems
 3677 0010 002B     		cmp	r3, #0	@ D.6666,
 3678 0012 0CBF     		ite	eq
 3679 0014 0123     		moveq	r3, #1	@ tmp121,
 3680 0016 0023     		movne	r3, #0	@ tmp121,
 3681 0018 DBB2     		uxtb	r3, r3	@ D.6667, tmp120
 3682 001a 7B60     		str	r3, [r7, #4]	@ D.6667, xListIsEmpty
2856:FreeRTOS/tasks.c **** 			}
2857:FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
 3683              		.loc 1 2857 0
 3684 001c FFF7FEFF 		bl	xTaskResumeAll	@
2858:FreeRTOS/tasks.c **** 
2859:FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3685              		.loc 1 2859 0
 3686 0020 7B68     		ldr	r3, [r7, #4]	@ tmp122, xListIsEmpty
 3687 0022 002B     		cmp	r3, #0	@ tmp122,
 3688 0024 19D1     		bne	.L279	@,
 3689              	.LBB16:
2860:FreeRTOS/tasks.c **** 			{
2861:FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
2862:FreeRTOS/tasks.c **** 
2863:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 3690              		.loc 1 2863 0
 3691 0026 FFF7FEFF 		bl	vPortEnterCritical	@
2864:FreeRTOS/tasks.c **** 				{
2865:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 3692              		.loc 1 2865 0
 3693 002a 104B     		ldr	r3, .L281	@ tmp123,
 3694 002c DB68     		ldr	r3, [r3, #12]	@ D.6668, xTasksWaitingTermination.xListEnd.pxNext
 3695 002e DB68     		ldr	r3, [r3, #12]	@ tmp124, _10->pvOwner
 3696 0030 3B60     		str	r3, [r7]	@ tmp124, pxTCB
2866:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 120


 3697              		.loc 1 2866 0
 3698 0032 3B68     		ldr	r3, [r7]	@ tmp125, pxTCB
 3699 0034 0433     		adds	r3, r3, #4	@ D.6669, tmp125,
 3700 0036 1846     		mov	r0, r3	@, D.6669
 3701 0038 FFF7FEFF 		bl	uxListRemove	@
2867:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 3702              		.loc 1 2867 0
 3703 003c 0C4B     		ldr	r3, .L281+4	@ tmp126,
 3704 003e 1B68     		ldr	r3, [r3]	@ D.6666, uxCurrentNumberOfTasks
 3705 0040 013B     		subs	r3, r3, #1	@ D.6666, D.6666,
 3706 0042 0B4A     		ldr	r2, .L281+4	@ tmp127,
 3707 0044 1360     		str	r3, [r2]	@ D.6666, uxCurrentNumberOfTasks
2868:FreeRTOS/tasks.c **** 					--uxTasksDeleted;
 3708              		.loc 1 2868 0
 3709 0046 0B4B     		ldr	r3, .L281+8	@ tmp128,
 3710 0048 1B68     		ldr	r3, [r3]	@ D.6666, uxTasksDeleted
 3711 004a 013B     		subs	r3, r3, #1	@ D.6666, D.6666,
 3712 004c 094A     		ldr	r2, .L281+8	@ tmp129,
 3713 004e 1360     		str	r3, [r2]	@ D.6666, uxTasksDeleted
2869:FreeRTOS/tasks.c **** 				}
2870:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 3714              		.loc 1 2870 0
 3715 0050 FFF7FEFF 		bl	vPortExitCritical	@
2871:FreeRTOS/tasks.c **** 
2872:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 3716              		.loc 1 2872 0
 3717 0054 3868     		ldr	r0, [r7]	@, pxTCB
 3718 0056 FFF7FEFF 		bl	prvDeleteTCB	@
 3719              	.L279:
 3720              	.LBE16:
2851:FreeRTOS/tasks.c **** 		{
 3721              		.loc 1 2851 0
 3722 005a 064B     		ldr	r3, .L281+8	@ tmp130,
 3723 005c 1B68     		ldr	r3, [r3]	@ D.6666, uxTasksDeleted
 3724 005e 002B     		cmp	r3, #0	@ D.6666,
 3725 0060 D2D1     		bne	.L280	@,
 3726              	.LBE15:
2873:FreeRTOS/tasks.c **** 			}
2874:FreeRTOS/tasks.c **** 			else
2875:FreeRTOS/tasks.c **** 			{
2876:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2877:FreeRTOS/tasks.c **** 			}
2878:FreeRTOS/tasks.c **** 		}
2879:FreeRTOS/tasks.c **** 	}
2880:FreeRTOS/tasks.c **** 	#endif /* vTaskDelete */
2881:FreeRTOS/tasks.c **** }
 3727              		.loc 1 2881 0
 3728 0062 00BF     		nop
 3729 0064 0837     		adds	r7, r7, #8	@,,
 3730              		.cfi_def_cfa_offset 8
 3731 0066 BD46     		mov	sp, r7	@,
 3732              		.cfi_def_cfa_register 13
 3733              		@ sp needed	@
 3734 0068 80BD     		pop	{r7, pc}	@
 3735              	.L282:
 3736 006a 00BF     		.align	2
 3737              	.L281:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 121


 3738 006c 00000000 		.word	xTasksWaitingTermination
 3739 0070 00000000 		.word	uxCurrentNumberOfTasks
 3740 0074 00000000 		.word	uxTasksDeleted
 3741              		.cfi_endproc
 3742              	.LFE33:
 3743              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3744              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 3745              		.align	2
 3746              		.thumb
 3747              		.thumb_func
 3748              		.type	prvAddCurrentTaskToDelayedList, %function
 3749              	prvAddCurrentTaskToDelayedList:
 3750              	.LFB34:
2882:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2883:FreeRTOS/tasks.c **** 
2884:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake )
2885:FreeRTOS/tasks.c **** {
 3751              		.loc 1 2885 0
 3752              		.cfi_startproc
 3753              		@ args = 0, pretend = 0, frame = 8
 3754              		@ frame_needed = 1, uses_anonymous_args = 0
 3755 0000 80B5     		push	{r7, lr}	@
 3756              		.cfi_def_cfa_offset 8
 3757              		.cfi_offset 7, -8
 3758              		.cfi_offset 14, -4
 3759 0002 82B0     		sub	sp, sp, #8	@,,
 3760              		.cfi_def_cfa_offset 16
 3761 0004 00AF     		add	r7, sp, #0	@,,
 3762              		.cfi_def_cfa_register 7
 3763 0006 7860     		str	r0, [r7, #4]	@ xTimeToWake, xTimeToWake
2886:FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
2887:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3764              		.loc 1 2887 0
 3765 0008 134B     		ldr	r3, .L287	@ tmp119,
 3766 000a 1B68     		ldr	r3, [r3]	@ D.6670, pxCurrentTCB
 3767 000c 7A68     		ldr	r2, [r7, #4]	@ tmp120, xTimeToWake
 3768 000e 5A60     		str	r2, [r3, #4]	@ tmp120, _3->xGenericListItem.xItemValue
2888:FreeRTOS/tasks.c **** 
2889:FreeRTOS/tasks.c **** 	if( xTimeToWake < xTickCount )
 3769              		.loc 1 2889 0
 3770 0010 124B     		ldr	r3, .L287+4	@ tmp121,
 3771 0012 1B68     		ldr	r3, [r3]	@ D.6671, xTickCount
 3772 0014 7A68     		ldr	r2, [r7, #4]	@ tmp122, xTimeToWake
 3773 0016 9A42     		cmp	r2, r3	@ tmp122, D.6671
 3774 0018 09D2     		bcs	.L284	@,
2890:FreeRTOS/tasks.c **** 	{
2891:FreeRTOS/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2892:FreeRTOS/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3775              		.loc 1 2892 0
 3776 001a 114B     		ldr	r3, .L287+8	@ tmp123,
 3777 001c 1A68     		ldr	r2, [r3]	@ D.6672, pxOverflowDelayedTaskList
 3778 001e 0E4B     		ldr	r3, .L287	@ tmp124,
 3779 0020 1B68     		ldr	r3, [r3]	@ D.6670, pxCurrentTCB
 3780 0022 0433     		adds	r3, r3, #4	@ D.6673, D.6670,
 3781 0024 1946     		mov	r1, r3	@, D.6673
 3782 0026 1046     		mov	r0, r2	@, D.6672
 3783 0028 FFF7FEFF 		bl	vListInsert	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 122


2893:FreeRTOS/tasks.c **** 	}
2894:FreeRTOS/tasks.c **** 	else
2895:FreeRTOS/tasks.c **** 	{
2896:FreeRTOS/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
2897:FreeRTOS/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2898:FreeRTOS/tasks.c **** 
2899:FreeRTOS/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2900:FreeRTOS/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2901:FreeRTOS/tasks.c **** 		too. */
2902:FreeRTOS/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
2903:FreeRTOS/tasks.c **** 		{
2904:FreeRTOS/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
2905:FreeRTOS/tasks.c **** 		}
2906:FreeRTOS/tasks.c **** 		else
2907:FreeRTOS/tasks.c **** 		{
2908:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2909:FreeRTOS/tasks.c **** 		}
2910:FreeRTOS/tasks.c **** 	}
2911:FreeRTOS/tasks.c **** }
 3784              		.loc 1 2911 0
 3785 002c 10E0     		b	.L286	@
 3786              	.L284:
2897:FreeRTOS/tasks.c **** 
 3787              		.loc 1 2897 0
 3788 002e 0D4B     		ldr	r3, .L287+12	@ tmp125,
 3789 0030 1A68     		ldr	r2, [r3]	@ D.6672, pxDelayedTaskList
 3790 0032 094B     		ldr	r3, .L287	@ tmp126,
 3791 0034 1B68     		ldr	r3, [r3]	@ D.6670, pxCurrentTCB
 3792 0036 0433     		adds	r3, r3, #4	@ D.6673, D.6670,
 3793 0038 1946     		mov	r1, r3	@, D.6673
 3794 003a 1046     		mov	r0, r2	@, D.6672
 3795 003c FFF7FEFF 		bl	vListInsert	@
2902:FreeRTOS/tasks.c **** 		{
 3796              		.loc 1 2902 0
 3797 0040 094B     		ldr	r3, .L287+16	@ tmp127,
 3798 0042 1B68     		ldr	r3, [r3]	@ D.6671, xNextTaskUnblockTime
 3799 0044 7A68     		ldr	r2, [r7, #4]	@ tmp128, xTimeToWake
 3800 0046 9A42     		cmp	r2, r3	@ tmp128, D.6671
 3801 0048 02D2     		bcs	.L286	@,
2904:FreeRTOS/tasks.c **** 		}
 3802              		.loc 1 2904 0
 3803 004a 074A     		ldr	r2, .L287+16	@ tmp129,
 3804 004c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTimeToWake
 3805 004e 1360     		str	r3, [r2]	@ tmp130, xNextTaskUnblockTime
 3806              	.L286:
 3807              		.loc 1 2911 0
 3808 0050 00BF     		nop
 3809 0052 0837     		adds	r7, r7, #8	@,,
 3810              		.cfi_def_cfa_offset 8
 3811 0054 BD46     		mov	sp, r7	@,
 3812              		.cfi_def_cfa_register 13
 3813              		@ sp needed	@
 3814 0056 80BD     		pop	{r7, pc}	@
 3815              	.L288:
 3816              		.align	2
 3817              	.L287:
 3818 0058 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 123


 3819 005c 00000000 		.word	xTickCount
 3820 0060 00000000 		.word	pxOverflowDelayedTaskList
 3821 0064 00000000 		.word	pxDelayedTaskList
 3822 0068 00000000 		.word	xNextTaskUnblockTime
 3823              		.cfi_endproc
 3824              	.LFE34:
 3825              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 3826              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 3827              		.align	2
 3828              		.thumb
 3829              		.thumb_func
 3830              		.type	prvAllocateTCBAndStack, %function
 3831              	prvAllocateTCBAndStack:
 3832              	.LFB35:
2912:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2913:FreeRTOS/tasks.c **** 
2914:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
2915:FreeRTOS/tasks.c **** {
 3833              		.loc 1 2915 0
 3834              		.cfi_startproc
 3835              		@ args = 0, pretend = 0, frame = 16
 3836              		@ frame_needed = 1, uses_anonymous_args = 0
 3837 0000 80B5     		push	{r7, lr}	@
 3838              		.cfi_def_cfa_offset 8
 3839              		.cfi_offset 7, -8
 3840              		.cfi_offset 14, -4
 3841 0002 84B0     		sub	sp, sp, #16	@,,
 3842              		.cfi_def_cfa_offset 24
 3843 0004 00AF     		add	r7, sp, #0	@,,
 3844              		.cfi_def_cfa_register 7
 3845 0006 0346     		mov	r3, r0	@ tmp119, usStackDepth
 3846 0008 3960     		str	r1, [r7]	@ puxStackBuffer, puxStackBuffer
 3847 000a FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp120, usStackDepth
2916:FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
2917:FreeRTOS/tasks.c **** 
2918:FreeRTOS/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2919:FreeRTOS/tasks.c **** 	the implementation of the port malloc function. */
2920:FreeRTOS/tasks.c **** 	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 3848              		.loc 1 2920 0
 3849 000c 5020     		movs	r0, #80	@,
 3850 000e FFF7FEFF 		bl	pvPortMalloc	@
 3851 0012 F860     		str	r0, [r7, #12]	@, pxNewTCB
2921:FreeRTOS/tasks.c **** 
2922:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 3852              		.loc 1 2922 0
 3853 0014 FB68     		ldr	r3, [r7, #12]	@ tmp121, pxNewTCB
 3854 0016 002B     		cmp	r3, #0	@ tmp121,
 3855 0018 1ED0     		beq	.L290	@,
2923:FreeRTOS/tasks.c **** 	{
2924:FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2925:FreeRTOS/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2926:FreeRTOS/tasks.c **** 		be deleted later if required. */
2927:FreeRTOS/tasks.c **** 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( S
 3856              		.loc 1 2927 0
 3857 001a 3B68     		ldr	r3, [r7]	@ tmp122, puxStackBuffer
 3858 001c 002B     		cmp	r3, #0	@ tmp122,
 3859 001e 06D1     		bne	.L291	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 124


 3860              		.loc 1 2927 0 is_stmt 0 discriminator 1
 3861 0020 FB88     		ldrh	r3, [r7, #6]	@ D.6675, usStackDepth
 3862 0022 9B00     		lsls	r3, r3, #2	@ D.6675, D.6675,
 3863 0024 1846     		mov	r0, r3	@, D.6675
 3864 0026 FFF7FEFF 		bl	pvPortMalloc	@
 3865 002a 0346     		mov	r3, r0	@ D.6674,
 3866 002c 00E0     		b	.L292	@
 3867              	.L291:
 3868              		.loc 1 2927 0 discriminator 2
 3869 002e 3B68     		ldr	r3, [r7]	@ D.6674, puxStackBuffer
 3870              	.L292:
 3871              		.loc 1 2927 0 discriminator 4
 3872 0030 FA68     		ldr	r2, [r7, #12]	@ tmp123, pxNewTCB
 3873 0032 1363     		str	r3, [r2, #48]	@ D.6674, pxNewTCB_7->pxStack
2928:FreeRTOS/tasks.c **** 
2929:FreeRTOS/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3874              		.loc 1 2929 0 is_stmt 1 discriminator 4
 3875 0034 FB68     		ldr	r3, [r7, #12]	@ tmp124, pxNewTCB
 3876 0036 1B6B     		ldr	r3, [r3, #48]	@ D.6674, pxNewTCB_7->pxStack
 3877 0038 002B     		cmp	r3, #0	@ D.6674,
 3878 003a 05D1     		bne	.L293	@,
2930:FreeRTOS/tasks.c **** 		{
2931:FreeRTOS/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2932:FreeRTOS/tasks.c **** 			vPortFree( pxNewTCB );
 3879              		.loc 1 2932 0
 3880 003c F868     		ldr	r0, [r7, #12]	@, pxNewTCB
 3881 003e FFF7FEFF 		bl	vPortFree	@
2933:FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
 3882              		.loc 1 2933 0
 3883 0042 0023     		movs	r3, #0	@ tmp125,
 3884 0044 FB60     		str	r3, [r7, #12]	@ tmp125, pxNewTCB
 3885 0046 07E0     		b	.L290	@
 3886              	.L293:
2934:FreeRTOS/tasks.c **** 		}
2935:FreeRTOS/tasks.c **** 		else
2936:FreeRTOS/tasks.c **** 		{
2937:FreeRTOS/tasks.c **** 			/* Avoid dependency on memset() if it is not required. */
2938:FreeRTOS/tasks.c **** 			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_ux
2939:FreeRTOS/tasks.c **** 			{
2940:FreeRTOS/tasks.c **** 				/* Just to help debugging. */
2941:FreeRTOS/tasks.c **** 				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeo
 3887              		.loc 1 2941 0
 3888 0048 FB68     		ldr	r3, [r7, #12]	@ tmp126, pxNewTCB
 3889 004a 186B     		ldr	r0, [r3, #48]	@ D.6674, pxNewTCB_7->pxStack
 3890 004c FB88     		ldrh	r3, [r7, #6]	@ D.6675, usStackDepth
 3891 004e 9B00     		lsls	r3, r3, #2	@ D.6675, D.6675,
 3892 0050 1A46     		mov	r2, r3	@, D.6675
 3893 0052 A521     		movs	r1, #165	@,
 3894 0054 FFF7FEFF 		bl	memset	@
 3895              	.L290:
2942:FreeRTOS/tasks.c **** 			}
2943:FreeRTOS/tasks.c **** 			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( I
2944:FreeRTOS/tasks.c **** 		}
2945:FreeRTOS/tasks.c **** 	}
2946:FreeRTOS/tasks.c **** 
2947:FreeRTOS/tasks.c **** 	return pxNewTCB;
 3896              		.loc 1 2947 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 125


 3897 0058 FB68     		ldr	r3, [r7, #12]	@ D.6676, pxNewTCB
2948:FreeRTOS/tasks.c **** }
 3898              		.loc 1 2948 0
 3899 005a 1846     		mov	r0, r3	@, <retval>
 3900 005c 1037     		adds	r7, r7, #16	@,,
 3901              		.cfi_def_cfa_offset 8
 3902 005e BD46     		mov	sp, r7	@,
 3903              		.cfi_def_cfa_register 13
 3904              		@ sp needed	@
 3905 0060 80BD     		pop	{r7, pc}	@
 3906              		.cfi_endproc
 3907              	.LFE35:
 3908              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 3909 0062 00BF     		.section	.text.prvListTaskWithinSingleList,"ax",%progbits
 3910              		.align	2
 3911              		.thumb
 3912              		.thumb_func
 3913              		.type	prvListTaskWithinSingleList, %function
 3914              	prvListTaskWithinSingleList:
 3915              	.LFB36:
2949:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:FreeRTOS/tasks.c **** 
2951:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2952:FreeRTOS/tasks.c **** 
2953:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
2954:FreeRTOS/tasks.c **** 	{
 3916              		.loc 1 2954 0
 3917              		.cfi_startproc
 3918              		@ args = 0, pretend = 0, frame = 40
 3919              		@ frame_needed = 1, uses_anonymous_args = 0
 3920 0000 90B5     		push	{r4, r7, lr}	@
 3921              		.cfi_def_cfa_offset 12
 3922              		.cfi_offset 4, -12
 3923              		.cfi_offset 7, -8
 3924              		.cfi_offset 14, -4
 3925 0002 8BB0     		sub	sp, sp, #44	@,,
 3926              		.cfi_def_cfa_offset 56
 3927 0004 00AF     		add	r7, sp, #0	@,,
 3928              		.cfi_def_cfa_register 7
 3929 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 3930 0008 B960     		str	r1, [r7, #8]	@ pxList, pxList
 3931 000a 1346     		mov	r3, r2	@ tmp152, eState
 3932 000c FB71     		strb	r3, [r7, #7]	@ tmp153, eState
2955:FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
2956:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0;
 3933              		.loc 1 2956 0
 3934 000e 0023     		movs	r3, #0	@ tmp154,
 3935 0010 7B62     		str	r3, [r7, #36]	@ tmp154, uxTask
2957:FreeRTOS/tasks.c **** 
2958:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseT_t ) 0 )
 3936              		.loc 1 2958 0
 3937 0012 BB68     		ldr	r3, [r7, #8]	@ tmp155, pxList
 3938 0014 1B68     		ldr	r3, [r3]	@ D.6677, pxList_10(D)->uxNumberOfItems
 3939 0016 002B     		cmp	r3, #0	@ D.6677,
 3940 0018 78D0     		beq	.L296	@,
 3941              	.LBB17:
2959:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 126


2960:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3942              		.loc 1 2960 0
 3943 001a BB68     		ldr	r3, [r7, #8]	@ tmp156, pxList
 3944 001c 3B62     		str	r3, [r7, #32]	@ tmp156, pxConstList
 3945 001e 3B6A     		ldr	r3, [r7, #32]	@ tmp157, pxConstList
 3946 0020 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_12->pxIndex
 3947 0022 5A68     		ldr	r2, [r3, #4]	@ D.6679, _13->pxNext
 3948 0024 3B6A     		ldr	r3, [r7, #32]	@ tmp158, pxConstList
 3949 0026 5A60     		str	r2, [r3, #4]	@ D.6679, pxConstList_12->pxIndex
 3950 0028 3B6A     		ldr	r3, [r7, #32]	@ tmp159, pxConstList
 3951 002a 5A68     		ldr	r2, [r3, #4]	@ D.6678, pxConstList_12->pxIndex
 3952 002c 3B6A     		ldr	r3, [r7, #32]	@ tmp160, pxConstList
 3953 002e 0833     		adds	r3, r3, #8	@ D.6680, tmp160,
 3954 0030 9A42     		cmp	r2, r3	@ D.6678, D.6680
 3955 0032 04D1     		bne	.L297	@,
 3956              		.loc 1 2960 0 is_stmt 0 discriminator 1
 3957 0034 3B6A     		ldr	r3, [r7, #32]	@ tmp161, pxConstList
 3958 0036 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_12->pxIndex
 3959 0038 5A68     		ldr	r2, [r3, #4]	@ D.6679, _18->pxNext
 3960 003a 3B6A     		ldr	r3, [r7, #32]	@ tmp162, pxConstList
 3961 003c 5A60     		str	r2, [r3, #4]	@ D.6679, pxConstList_12->pxIndex
 3962              	.L297:
 3963              		.loc 1 2960 0 discriminator 3
 3964 003e 3B6A     		ldr	r3, [r7, #32]	@ tmp163, pxConstList
 3965 0040 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_12->pxIndex
 3966 0042 DB68     		ldr	r3, [r3, #12]	@ tmp164, _21->pvOwner
 3967 0044 FB61     		str	r3, [r7, #28]	@ tmp164, pxFirstTCB
 3968              	.L300:
 3969              	.LBE17:
 3970              	.LBB18:
2961:FreeRTOS/tasks.c **** 
2962:FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
2963:FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
2964:FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
2965:FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
2966:FreeRTOS/tasks.c **** 			do
2967:FreeRTOS/tasks.c **** 			{
2968:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3971              		.loc 1 2968 0 is_stmt 1
 3972 0046 BB68     		ldr	r3, [r7, #8]	@ tmp165, pxList
 3973 0048 BB61     		str	r3, [r7, #24]	@ tmp165, pxConstList
 3974 004a BB69     		ldr	r3, [r7, #24]	@ tmp166, pxConstList
 3975 004c 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_23->pxIndex
 3976 004e 5A68     		ldr	r2, [r3, #4]	@ D.6679, _24->pxNext
 3977 0050 BB69     		ldr	r3, [r7, #24]	@ tmp167, pxConstList
 3978 0052 5A60     		str	r2, [r3, #4]	@ D.6679, pxConstList_23->pxIndex
 3979 0054 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxConstList
 3980 0056 5A68     		ldr	r2, [r3, #4]	@ D.6678, pxConstList_23->pxIndex
 3981 0058 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxConstList
 3982 005a 0833     		adds	r3, r3, #8	@ D.6680, tmp169,
 3983 005c 9A42     		cmp	r2, r3	@ D.6678, D.6680
 3984 005e 04D1     		bne	.L298	@,
 3985              		.loc 1 2968 0 is_stmt 0 discriminator 1
 3986 0060 BB69     		ldr	r3, [r7, #24]	@ tmp170, pxConstList
 3987 0062 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_23->pxIndex
 3988 0064 5A68     		ldr	r2, [r3, #4]	@ D.6679, _29->pxNext
 3989 0066 BB69     		ldr	r3, [r7, #24]	@ tmp171, pxConstList
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 127


 3990 0068 5A60     		str	r2, [r3, #4]	@ D.6679, pxConstList_23->pxIndex
 3991              	.L298:
 3992              		.loc 1 2968 0 discriminator 3
 3993 006a BB69     		ldr	r3, [r7, #24]	@ tmp172, pxConstList
 3994 006c 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_23->pxIndex
 3995 006e DB68     		ldr	r3, [r3, #12]	@ tmp173, _32->pvOwner
 3996 0070 7B61     		str	r3, [r7, #20]	@ tmp173, pxNextTCB
 3997              	.LBE18:
2969:FreeRTOS/tasks.c **** 
2970:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 3998              		.loc 1 2970 0 is_stmt 1 discriminator 3
 3999 0072 7B6A     		ldr	r3, [r7, #36]	@ tmp174, uxTask
 4000 0074 5B01     		lsls	r3, r3, #5	@ D.6677, tmp174,
 4001 0076 FA68     		ldr	r2, [r7, #12]	@ tmp175, pxTaskStatusArray
 4002 0078 1344     		add	r3, r3, r2	@ D.6681, tmp175
 4003 007a 7A69     		ldr	r2, [r7, #20]	@ tmp176, pxNextTCB
 4004 007c 1A60     		str	r2, [r3]	@ tmp176, _36->xHandle
2971:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 4005              		.loc 1 2971 0 discriminator 3
 4006 007e 7B6A     		ldr	r3, [r7, #36]	@ tmp177, uxTask
 4007 0080 5B01     		lsls	r3, r3, #5	@ D.6677, tmp177,
 4008 0082 FA68     		ldr	r2, [r7, #12]	@ tmp178, pxTaskStatusArray
 4009 0084 1344     		add	r3, r3, r2	@ D.6681, tmp178
 4010 0086 7A69     		ldr	r2, [r7, #20]	@ tmp179, pxNextTCB
 4011 0088 3432     		adds	r2, r2, #52	@ D.6682, tmp179,
 4012 008a 5A60     		str	r2, [r3, #4]	@ D.6682, _39->pcTaskName
2972:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 4013              		.loc 1 2972 0 discriminator 3
 4014 008c 7B6A     		ldr	r3, [r7, #36]	@ tmp180, uxTask
 4015 008e 5B01     		lsls	r3, r3, #5	@ D.6677, tmp180,
 4016 0090 FA68     		ldr	r2, [r7, #12]	@ tmp181, pxTaskStatusArray
 4017 0092 1344     		add	r3, r3, r2	@ D.6681, tmp181
 4018 0094 7A69     		ldr	r2, [r7, #20]	@ tmp182, pxNextTCB
 4019 0096 126C     		ldr	r2, [r2, #64]	@ D.6677, pxNextTCB_33->uxTCBNumber
 4020 0098 9A60     		str	r2, [r3, #8]	@ D.6677, _43->xTaskNumber
2973:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 4021              		.loc 1 2973 0 discriminator 3
 4022 009a 7B6A     		ldr	r3, [r7, #36]	@ tmp183, uxTask
 4023 009c 5B01     		lsls	r3, r3, #5	@ D.6677, tmp183,
 4024 009e FA68     		ldr	r2, [r7, #12]	@ tmp184, pxTaskStatusArray
 4025 00a0 1344     		add	r3, r3, r2	@ D.6681, tmp184
 4026 00a2 FA79     		ldrb	r2, [r7, #7]	@ tmp185, eState
 4027 00a4 1A73     		strb	r2, [r3, #12]	@ tmp185, _47->eCurrentState
2974:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 4028              		.loc 1 2974 0 discriminator 3
 4029 00a6 7B6A     		ldr	r3, [r7, #36]	@ tmp186, uxTask
 4030 00a8 5B01     		lsls	r3, r3, #5	@ D.6677, tmp186,
 4031 00aa FA68     		ldr	r2, [r7, #12]	@ tmp187, pxTaskStatusArray
 4032 00ac 1344     		add	r3, r3, r2	@ D.6681, tmp187
 4033 00ae 7A69     		ldr	r2, [r7, #20]	@ tmp188, pxNextTCB
 4034 00b0 D26A     		ldr	r2, [r2, #44]	@ D.6677, pxNextTCB_33->uxPriority
 4035 00b2 1A61     		str	r2, [r3, #16]	@ D.6677, _51->uxCurrentPriority
2975:FreeRTOS/tasks.c **** 
2976:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2977:FreeRTOS/tasks.c **** 				{
2978:FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a chance
2979:FreeRTOS/tasks.c **** 					it is actually just blocked indefinitely - so really it should
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 128


2980:FreeRTOS/tasks.c **** 					be reported as being in the Blocked state. */
2981:FreeRTOS/tasks.c **** 					if( eState == eSuspended )
 4036              		.loc 1 2981 0 discriminator 3
 4037 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2	@ tmp189, eState
 4038 00b6 032B     		cmp	r3, #3	@ tmp189,
 4039 00b8 09D1     		bne	.L299	@,
2982:FreeRTOS/tasks.c **** 					{
2983:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 4040              		.loc 1 2983 0
 4041 00ba 7B69     		ldr	r3, [r7, #20]	@ tmp190, pxNextTCB
 4042 00bc 9B6A     		ldr	r3, [r3, #40]	@ D.6683, pxNextTCB_33->xEventListItem.pvContainer
 4043 00be 002B     		cmp	r3, #0	@ D.6683,
 4044 00c0 05D0     		beq	.L299	@,
2984:FreeRTOS/tasks.c **** 						{
2985:FreeRTOS/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 4045              		.loc 1 2985 0
 4046 00c2 7B6A     		ldr	r3, [r7, #36]	@ tmp191, uxTask
 4047 00c4 5B01     		lsls	r3, r3, #5	@ D.6677, tmp191,
 4048 00c6 FA68     		ldr	r2, [r7, #12]	@ tmp192, pxTaskStatusArray
 4049 00c8 1344     		add	r3, r3, r2	@ D.6681, tmp192
 4050 00ca 0222     		movs	r2, #2	@ tmp193,
 4051 00cc 1A73     		strb	r2, [r3, #12]	@ tmp194, _56->eCurrentState
 4052              	.L299:
2986:FreeRTOS/tasks.c **** 						}
2987:FreeRTOS/tasks.c **** 					}
2988:FreeRTOS/tasks.c **** 				}
2989:FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
2990:FreeRTOS/tasks.c **** 
2991:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
2992:FreeRTOS/tasks.c **** 				{
2993:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 4053              		.loc 1 2993 0
 4054 00ce 7B6A     		ldr	r3, [r7, #36]	@ tmp195, uxTask
 4055 00d0 5B01     		lsls	r3, r3, #5	@ D.6677, tmp195,
 4056 00d2 FA68     		ldr	r2, [r7, #12]	@ tmp196, pxTaskStatusArray
 4057 00d4 1344     		add	r3, r3, r2	@ D.6681, tmp196
 4058 00d6 7A69     		ldr	r2, [r7, #20]	@ tmp197, pxNextTCB
 4059 00d8 926C     		ldr	r2, [r2, #72]	@ D.6677, pxNextTCB_33->uxBasePriority
 4060 00da 5A61     		str	r2, [r3, #20]	@ D.6677, _59->uxBasePriority
2994:FreeRTOS/tasks.c **** 				}
2995:FreeRTOS/tasks.c **** 				#else
2996:FreeRTOS/tasks.c **** 				{
2997:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
2998:FreeRTOS/tasks.c **** 				}
2999:FreeRTOS/tasks.c **** 				#endif
3000:FreeRTOS/tasks.c **** 
3001:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3002:FreeRTOS/tasks.c **** 				{
3003:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3004:FreeRTOS/tasks.c **** 				}
3005:FreeRTOS/tasks.c **** 				#else
3006:FreeRTOS/tasks.c **** 				{
3007:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 4061              		.loc 1 3007 0
 4062 00dc 7B6A     		ldr	r3, [r7, #36]	@ tmp198, uxTask
 4063 00de 5B01     		lsls	r3, r3, #5	@ D.6677, tmp198,
 4064 00e0 FA68     		ldr	r2, [r7, #12]	@ tmp199, pxTaskStatusArray
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 129


 4065 00e2 1344     		add	r3, r3, r2	@ D.6681, tmp199
 4066 00e4 0022     		movs	r2, #0	@ tmp200,
 4067 00e6 9A61     		str	r2, [r3, #24]	@ tmp200, _63->ulRunTimeCounter
3008:FreeRTOS/tasks.c **** 				}
3009:FreeRTOS/tasks.c **** 				#endif
3010:FreeRTOS/tasks.c **** 
3011:FreeRTOS/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3012:FreeRTOS/tasks.c **** 				{
3013:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3014:FreeRTOS/tasks.c **** 				}
3015:FreeRTOS/tasks.c **** 				#else
3016:FreeRTOS/tasks.c **** 				{
3017:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
 4068              		.loc 1 3017 0
 4069 00e8 7B6A     		ldr	r3, [r7, #36]	@ tmp201, uxTask
 4070 00ea 5B01     		lsls	r3, r3, #5	@ D.6677, tmp201,
 4071 00ec FA68     		ldr	r2, [r7, #12]	@ tmp202, pxTaskStatusArray
 4072 00ee D418     		adds	r4, r2, r3	@ D.6681, tmp202, D.6677
 4073 00f0 7B69     		ldr	r3, [r7, #20]	@ tmp203, pxNextTCB
 4074 00f2 1B6B     		ldr	r3, [r3, #48]	@ D.6684, pxNextTCB_33->pxStack
 4075 00f4 1846     		mov	r0, r3	@, D.6684
 4076 00f6 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4077 00fa 0346     		mov	r3, r0	@ tmp204,
 4078 00fc A383     		strh	r3, [r4, #28]	@ movhi	@ tmp205, _66->usStackHighWaterMark
3018:FreeRTOS/tasks.c **** 				}
3019:FreeRTOS/tasks.c **** 				#endif
3020:FreeRTOS/tasks.c **** 
3021:FreeRTOS/tasks.c **** 				uxTask++;
 4079              		.loc 1 3021 0
 4080 00fe 7B6A     		ldr	r3, [r7, #36]	@ tmp207, uxTask
 4081 0100 0133     		adds	r3, r3, #1	@ tmp206, tmp207,
 4082 0102 7B62     		str	r3, [r7, #36]	@ tmp206, uxTask
3022:FreeRTOS/tasks.c **** 
3023:FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4083              		.loc 1 3023 0
 4084 0104 7A69     		ldr	r2, [r7, #20]	@ tmp208, pxNextTCB
 4085 0106 FB69     		ldr	r3, [r7, #28]	@ tmp209, pxFirstTCB
 4086 0108 9A42     		cmp	r2, r3	@ tmp208, tmp209
 4087 010a 9CD1     		bne	.L300	@,
 4088              	.L296:
3024:FreeRTOS/tasks.c **** 		}
3025:FreeRTOS/tasks.c **** 		else
3026:FreeRTOS/tasks.c **** 		{
3027:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3028:FreeRTOS/tasks.c **** 		}
3029:FreeRTOS/tasks.c **** 
3030:FreeRTOS/tasks.c **** 		return uxTask;
 4089              		.loc 1 3030 0
 4090 010c 7B6A     		ldr	r3, [r7, #36]	@ D.6686, uxTask
3031:FreeRTOS/tasks.c **** 	}
 4091              		.loc 1 3031 0
 4092 010e 1846     		mov	r0, r3	@, <retval>
 4093 0110 2C37     		adds	r7, r7, #44	@,,
 4094              		.cfi_def_cfa_offset 12
 4095 0112 BD46     		mov	sp, r7	@,
 4096              		.cfi_def_cfa_register 13
 4097              		@ sp needed	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 130


 4098 0114 90BD     		pop	{r4, r7, pc}	@
 4099              		.cfi_endproc
 4100              	.LFE36:
 4101              		.size	prvListTaskWithinSingleList, .-prvListTaskWithinSingleList
 4102 0116 00BF     		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4103              		.align	2
 4104              		.thumb
 4105              		.thumb_func
 4106              		.type	prvTaskCheckFreeStackSpace, %function
 4107              	prvTaskCheckFreeStackSpace:
 4108              	.LFB37:
3032:FreeRTOS/tasks.c **** 
3033:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3034:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3035:FreeRTOS/tasks.c **** 
3036:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3037:FreeRTOS/tasks.c **** 
3038:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3039:FreeRTOS/tasks.c **** 	{
 4109              		.loc 1 3039 0
 4110              		.cfi_startproc
 4111              		@ args = 0, pretend = 0, frame = 16
 4112              		@ frame_needed = 1, uses_anonymous_args = 0
 4113              		@ link register save eliminated.
 4114 0000 80B4     		push	{r7}	@
 4115              		.cfi_def_cfa_offset 4
 4116              		.cfi_offset 7, -4
 4117 0002 85B0     		sub	sp, sp, #20	@,,
 4118              		.cfi_def_cfa_offset 24
 4119 0004 00AF     		add	r7, sp, #0	@,,
 4120              		.cfi_def_cfa_register 7
 4121 0006 7860     		str	r0, [r7, #4]	@ pucStackByte, pucStackByte
3040:FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 4122              		.loc 1 3040 0
 4123 0008 0023     		movs	r3, #0	@ tmp113,
 4124 000a FB60     		str	r3, [r7, #12]	@ tmp113, ulCount
3041:FreeRTOS/tasks.c **** 
3042:FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4125              		.loc 1 3042 0
 4126 000c 05E0     		b	.L303	@
 4127              	.L304:
3043:FreeRTOS/tasks.c **** 		{
3044:FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4128              		.loc 1 3044 0
 4129 000e 7B68     		ldr	r3, [r7, #4]	@ tmp115, pucStackByte
 4130 0010 0133     		adds	r3, r3, #1	@ tmp114, tmp115,
 4131 0012 7B60     		str	r3, [r7, #4]	@ tmp114, pucStackByte
3045:FreeRTOS/tasks.c **** 			ulCount++;
 4132              		.loc 1 3045 0
 4133 0014 FB68     		ldr	r3, [r7, #12]	@ tmp117, ulCount
 4134 0016 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 4135 0018 FB60     		str	r3, [r7, #12]	@ tmp116, ulCount
 4136              	.L303:
3042:FreeRTOS/tasks.c **** 		{
 4137              		.loc 1 3042 0
 4138 001a 7B68     		ldr	r3, [r7, #4]	@ tmp118, pucStackByte
 4139 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ D.6687, *pucStackByte_1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 131


 4140 001e A52B     		cmp	r3, #165	@ D.6687,
 4141 0020 F5D0     		beq	.L304	@,
3046:FreeRTOS/tasks.c **** 		}
3047:FreeRTOS/tasks.c **** 
3048:FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackT_t ); /*lint !e961 Casting is not redundant on smaller arch
 4142              		.loc 1 3048 0
 4143 0022 FB68     		ldr	r3, [r7, #12]	@ tmp120, ulCount
 4144 0024 9B08     		lsrs	r3, r3, #2	@ tmp119, tmp120,
 4145 0026 FB60     		str	r3, [r7, #12]	@ tmp119, ulCount
3049:FreeRTOS/tasks.c **** 
3050:FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 4146              		.loc 1 3050 0
 4147 0028 FB68     		ldr	r3, [r7, #12]	@ tmp121, ulCount
 4148 002a 9BB2     		uxth	r3, r3	@ D.6688, tmp121
3051:FreeRTOS/tasks.c **** 	}
 4149              		.loc 1 3051 0
 4150 002c 1846     		mov	r0, r3	@, <retval>
 4151 002e 1437     		adds	r7, r7, #20	@,,
 4152              		.cfi_def_cfa_offset 4
 4153 0030 BD46     		mov	sp, r7	@,
 4154              		.cfi_def_cfa_register 13
 4155              		@ sp needed	@
 4156 0032 80BC     		pop	{r7}	@
 4157              		.cfi_restore 7
 4158              		.cfi_def_cfa_offset 0
 4159 0034 7047     		bx	lr	@
 4160              		.cfi_endproc
 4161              	.LFE37:
 4162              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 4163 0036 00BF     		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4164              		.align	2
 4165              		.global	uxTaskGetStackHighWaterMark
 4166              		.thumb
 4167              		.thumb_func
 4168              		.type	uxTaskGetStackHighWaterMark, %function
 4169              	uxTaskGetStackHighWaterMark:
 4170              	.LFB38:
3052:FreeRTOS/tasks.c **** 
3053:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3054:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3055:FreeRTOS/tasks.c **** 
3056:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3057:FreeRTOS/tasks.c **** 
3058:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3059:FreeRTOS/tasks.c **** 	{
 4171              		.loc 1 3059 0
 4172              		.cfi_startproc
 4173              		@ args = 0, pretend = 0, frame = 24
 4174              		@ frame_needed = 1, uses_anonymous_args = 0
 4175 0000 80B5     		push	{r7, lr}	@
 4176              		.cfi_def_cfa_offset 8
 4177              		.cfi_offset 7, -8
 4178              		.cfi_offset 14, -4
 4179 0002 86B0     		sub	sp, sp, #24	@,,
 4180              		.cfi_def_cfa_offset 32
 4181 0004 00AF     		add	r7, sp, #0	@,,
 4182              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 132


 4183 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
3060:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3061:FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3062:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
3063:FreeRTOS/tasks.c **** 
3064:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4184              		.loc 1 3064 0
 4185 0008 7B68     		ldr	r3, [r7, #4]	@ tmp114, xTask
 4186 000a 002B     		cmp	r3, #0	@ tmp114,
 4187 000c 02D1     		bne	.L307	@,
 4188              		.loc 1 3064 0 is_stmt 0 discriminator 1
 4189 000e 094B     		ldr	r3, .L310	@ tmp115,
 4190 0010 1B68     		ldr	r3, [r3]	@ D.6689, pxCurrentTCB
 4191 0012 00E0     		b	.L308	@
 4192              	.L307:
 4193              		.loc 1 3064 0 discriminator 2
 4194 0014 7B68     		ldr	r3, [r7, #4]	@ D.6689, xTask
 4195              	.L308:
 4196              		.loc 1 3064 0 discriminator 4
 4197 0016 7B61     		str	r3, [r7, #20]	@ D.6689, pxTCB
3065:FreeRTOS/tasks.c **** 
3066:FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3067:FreeRTOS/tasks.c **** 		{
3068:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 4198              		.loc 1 3068 0 is_stmt 1 discriminator 4
 4199 0018 7B69     		ldr	r3, [r7, #20]	@ tmp116, pxTCB
 4200 001a 1B6B     		ldr	r3, [r3, #48]	@ tmp117, pxTCB_6->pxStack
 4201 001c 3B61     		str	r3, [r7, #16]	@ tmp117, pucEndOfStack
3069:FreeRTOS/tasks.c **** 		}
3070:FreeRTOS/tasks.c **** 		#else
3071:FreeRTOS/tasks.c **** 		{
3072:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3073:FreeRTOS/tasks.c **** 		}
3074:FreeRTOS/tasks.c **** 		#endif
3075:FreeRTOS/tasks.c **** 
3076:FreeRTOS/tasks.c **** 		uxReturn = ( UBaseT_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 4202              		.loc 1 3076 0 discriminator 4
 4203 001e 3869     		ldr	r0, [r7, #16]	@, pucEndOfStack
 4204 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4205 0024 0346     		mov	r3, r0	@ tmp118,
 4206 0026 FB60     		str	r3, [r7, #12]	@ D.6690, uxReturn
3077:FreeRTOS/tasks.c **** 
3078:FreeRTOS/tasks.c **** 		return uxReturn;
 4207              		.loc 1 3078 0 discriminator 4
 4208 0028 FB68     		ldr	r3, [r7, #12]	@ D.6691, uxReturn
3079:FreeRTOS/tasks.c **** 	}
 4209              		.loc 1 3079 0 discriminator 4
 4210 002a 1846     		mov	r0, r3	@, <retval>
 4211 002c 1837     		adds	r7, r7, #24	@,,
 4212              		.cfi_def_cfa_offset 8
 4213 002e BD46     		mov	sp, r7	@,
 4214              		.cfi_def_cfa_register 13
 4215              		@ sp needed	@
 4216 0030 80BD     		pop	{r7, pc}	@
 4217              	.L311:
 4218 0032 00BF     		.align	2
 4219              	.L310:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 133


 4220 0034 00000000 		.word	pxCurrentTCB
 4221              		.cfi_endproc
 4222              	.LFE38:
 4223              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 4224              		.section	.text.prvDeleteTCB,"ax",%progbits
 4225              		.align	2
 4226              		.thumb
 4227              		.thumb_func
 4228              		.type	prvDeleteTCB, %function
 4229              	prvDeleteTCB:
 4230              	.LFB39:
3080:FreeRTOS/tasks.c **** 
3081:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3082:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3083:FreeRTOS/tasks.c **** 
3084:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3085:FreeRTOS/tasks.c **** 
3086:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3087:FreeRTOS/tasks.c **** 	{
 4231              		.loc 1 3087 0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 8
 4234              		@ frame_needed = 1, uses_anonymous_args = 0
 4235 0000 80B5     		push	{r7, lr}	@
 4236              		.cfi_def_cfa_offset 8
 4237              		.cfi_offset 7, -8
 4238              		.cfi_offset 14, -4
 4239 0002 82B0     		sub	sp, sp, #8	@,,
 4240              		.cfi_def_cfa_offset 16
 4241 0004 00AF     		add	r7, sp, #0	@,,
 4242              		.cfi_def_cfa_register 7
 4243 0006 7860     		str	r0, [r7, #4]	@ pxTCB, pxTCB
3088:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3089:FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3090:FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3091:FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3092:FreeRTOS/tasks.c **** 
3093:FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3094:FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3095:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3096:FreeRTOS/tasks.c **** 		{
3097:FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3098:FreeRTOS/tasks.c **** 		}
3099:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3100:FreeRTOS/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 4244              		.loc 1 3100 0
 4245 0008 7B68     		ldr	r3, [r7, #4]	@ tmp111, pxTCB
 4246 000a 1B6B     		ldr	r3, [r3, #48]	@ D.6692, pxTCB_2(D)->pxStack
 4247 000c 1846     		mov	r0, r3	@, D.6692
 4248 000e FFF7FEFF 		bl	vPortFree	@
3101:FreeRTOS/tasks.c **** 		vPortFree( pxTCB );
 4249              		.loc 1 3101 0
 4250 0012 7868     		ldr	r0, [r7, #4]	@, pxTCB
 4251 0014 FFF7FEFF 		bl	vPortFree	@
3102:FreeRTOS/tasks.c **** 	}
 4252              		.loc 1 3102 0
 4253 0018 00BF     		nop
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 134


 4254 001a 0837     		adds	r7, r7, #8	@,,
 4255              		.cfi_def_cfa_offset 8
 4256 001c BD46     		mov	sp, r7	@,
 4257              		.cfi_def_cfa_register 13
 4258              		@ sp needed	@
 4259 001e 80BD     		pop	{r7, pc}	@
 4260              		.cfi_endproc
 4261              	.LFE39:
 4262              		.size	prvDeleteTCB, .-prvDeleteTCB
 4263              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4264              		.align	2
 4265              		.thumb
 4266              		.thumb_func
 4267              		.type	prvResetNextTaskUnblockTime, %function
 4268              	prvResetNextTaskUnblockTime:
 4269              	.LFB40:
3103:FreeRTOS/tasks.c **** 
3104:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3105:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3106:FreeRTOS/tasks.c **** 
3107:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3108:FreeRTOS/tasks.c **** {
 4270              		.loc 1 3108 0
 4271              		.cfi_startproc
 4272              		@ args = 0, pretend = 0, frame = 8
 4273              		@ frame_needed = 1, uses_anonymous_args = 0
 4274              		@ link register save eliminated.
 4275 0000 80B4     		push	{r7}	@
 4276              		.cfi_def_cfa_offset 4
 4277              		.cfi_offset 7, -4
 4278 0002 83B0     		sub	sp, sp, #12	@,,
 4279              		.cfi_def_cfa_offset 16
 4280 0004 00AF     		add	r7, sp, #0	@,,
 4281              		.cfi_def_cfa_register 7
3109:FreeRTOS/tasks.c **** TCB_t *pxTCB;
3110:FreeRTOS/tasks.c **** 
3111:FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4282              		.loc 1 3111 0
 4283 0006 0E4B     		ldr	r3, .L319	@ tmp116,
 4284 0008 1B68     		ldr	r3, [r3]	@ D.6694, pxDelayedTaskList
 4285 000a 1B68     		ldr	r3, [r3]	@ D.6695, _4->uxNumberOfItems
 4286 000c 002B     		cmp	r3, #0	@ D.6695,
 4287 000e 01D1     		bne	.L314	@,
 4288              		.loc 1 3111 0 is_stmt 0 discriminator 1
 4289 0010 0123     		movs	r3, #1	@ D.6693,
 4290 0012 00E0     		b	.L315	@
 4291              	.L314:
 4292              		.loc 1 3111 0 discriminator 2
 4293 0014 0023     		movs	r3, #0	@ D.6693,
 4294              	.L315:
 4295              		.loc 1 3111 0 discriminator 4
 4296 0016 002B     		cmp	r3, #0	@ D.6693,
 4297 0018 04D0     		beq	.L316	@,
3112:FreeRTOS/tasks.c **** 	{
3113:FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set
3114:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime to the maximum possible value so it is
3115:FreeRTOS/tasks.c **** 		extremely unlikely that the
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 135


3116:FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3117:FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3118:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4298              		.loc 1 3118 0 is_stmt 1
 4299 001a 0A4B     		ldr	r3, .L319+4	@ tmp117,
 4300 001c 4FF0FF32 		mov	r2, #-1	@ tmp118,
 4301 0020 1A60     		str	r2, [r3]	@ tmp118, xNextTaskUnblockTime
3119:FreeRTOS/tasks.c **** 	}
3120:FreeRTOS/tasks.c **** 	else
3121:FreeRTOS/tasks.c **** 	{
3122:FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3123:FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3124:FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3125:FreeRTOS/tasks.c **** 		from the Blocked state. */
3126:FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3127:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
3128:FreeRTOS/tasks.c **** 	}
3129:FreeRTOS/tasks.c **** }
 4302              		.loc 1 3129 0
 4303 0022 08E0     		b	.L318	@
 4304              	.L316:
3126:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 4305              		.loc 1 3126 0
 4306 0024 064B     		ldr	r3, .L319	@ tmp119,
 4307 0026 1B68     		ldr	r3, [r3]	@ D.6694, pxDelayedTaskList
 4308 0028 DB68     		ldr	r3, [r3, #12]	@ D.6696, _9->xListEnd.pxNext
 4309 002a DB68     		ldr	r3, [r3, #12]	@ tmp120, _10->pvOwner
 4310 002c 7B60     		str	r3, [r7, #4]	@ tmp120, pxTCB
3127:FreeRTOS/tasks.c **** 	}
 4311              		.loc 1 3127 0
 4312 002e 7B68     		ldr	r3, [r7, #4]	@ tmp121, pxTCB
 4313 0030 5B68     		ldr	r3, [r3, #4]	@ D.6695, pxTCB_11->xGenericListItem.xItemValue
 4314 0032 044A     		ldr	r2, .L319+4	@ tmp122,
 4315 0034 1360     		str	r3, [r2]	@ D.6695, xNextTaskUnblockTime
 4316              	.L318:
 4317              		.loc 1 3129 0
 4318 0036 00BF     		nop
 4319 0038 0C37     		adds	r7, r7, #12	@,,
 4320              		.cfi_def_cfa_offset 4
 4321 003a BD46     		mov	sp, r7	@,
 4322              		.cfi_def_cfa_register 13
 4323              		@ sp needed	@
 4324 003c 80BC     		pop	{r7}	@
 4325              		.cfi_restore 7
 4326              		.cfi_def_cfa_offset 0
 4327 003e 7047     		bx	lr	@
 4328              	.L320:
 4329              		.align	2
 4330              	.L319:
 4331 0040 00000000 		.word	pxDelayedTaskList
 4332 0044 00000000 		.word	xNextTaskUnblockTime
 4333              		.cfi_endproc
 4334              	.LFE40:
 4335              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4336              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4337              		.align	2
 4338              		.global	xTaskGetCurrentTaskHandle
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 136


 4339              		.thumb
 4340              		.thumb_func
 4341              		.type	xTaskGetCurrentTaskHandle, %function
 4342              	xTaskGetCurrentTaskHandle:
 4343              	.LFB41:
3130:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3131:FreeRTOS/tasks.c **** 
3132:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3133:FreeRTOS/tasks.c **** 
3134:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3135:FreeRTOS/tasks.c **** 	{
 4344              		.loc 1 3135 0
 4345              		.cfi_startproc
 4346              		@ args = 0, pretend = 0, frame = 8
 4347              		@ frame_needed = 1, uses_anonymous_args = 0
 4348              		@ link register save eliminated.
 4349 0000 80B4     		push	{r7}	@
 4350              		.cfi_def_cfa_offset 4
 4351              		.cfi_offset 7, -4
 4352 0002 83B0     		sub	sp, sp, #12	@,,
 4353              		.cfi_def_cfa_offset 16
 4354 0004 00AF     		add	r7, sp, #0	@,,
 4355              		.cfi_def_cfa_register 7
3136:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3137:FreeRTOS/tasks.c **** 
3138:FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3139:FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3140:FreeRTOS/tasks.c **** 		individual execution thread. */
3141:FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 4356              		.loc 1 3141 0
 4357 0006 044B     		ldr	r3, .L323	@ tmp112,
 4358 0008 1B68     		ldr	r3, [r3]	@ tmp113, pxCurrentTCB
 4359 000a 7B60     		str	r3, [r7, #4]	@ tmp113, xReturn
3142:FreeRTOS/tasks.c **** 
3143:FreeRTOS/tasks.c **** 		return xReturn;
 4360              		.loc 1 3143 0
 4361 000c 7B68     		ldr	r3, [r7, #4]	@ D.6697, xReturn
3144:FreeRTOS/tasks.c **** 	}
 4362              		.loc 1 3144 0
 4363 000e 1846     		mov	r0, r3	@, <retval>
 4364 0010 0C37     		adds	r7, r7, #12	@,,
 4365              		.cfi_def_cfa_offset 4
 4366 0012 BD46     		mov	sp, r7	@,
 4367              		.cfi_def_cfa_register 13
 4368              		@ sp needed	@
 4369 0014 80BC     		pop	{r7}	@
 4370              		.cfi_restore 7
 4371              		.cfi_def_cfa_offset 0
 4372 0016 7047     		bx	lr	@
 4373              	.L324:
 4374              		.align	2
 4375              	.L323:
 4376 0018 00000000 		.word	pxCurrentTCB
 4377              		.cfi_endproc
 4378              	.LFE41:
 4379              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4380              		.section	.text.vTaskPriorityInherit,"ax",%progbits
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 137


 4381              		.align	2
 4382              		.global	vTaskPriorityInherit
 4383              		.thumb
 4384              		.thumb_func
 4385              		.type	vTaskPriorityInherit, %function
 4386              	vTaskPriorityInherit:
 4387              	.LFB42:
3145:FreeRTOS/tasks.c **** 
3146:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3147:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3148:FreeRTOS/tasks.c **** 
3149:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3150:FreeRTOS/tasks.c **** 
3151:FreeRTOS/tasks.c **** 	BaseT_t xTaskGetSchedulerState( void )
3152:FreeRTOS/tasks.c **** 	{
3153:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
3154:FreeRTOS/tasks.c **** 
3155:FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3156:FreeRTOS/tasks.c **** 		{
3157:FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3158:FreeRTOS/tasks.c **** 		}
3159:FreeRTOS/tasks.c **** 		else
3160:FreeRTOS/tasks.c **** 		{
3161:FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
3162:FreeRTOS/tasks.c **** 			{
3163:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3164:FreeRTOS/tasks.c **** 			}
3165:FreeRTOS/tasks.c **** 			else
3166:FreeRTOS/tasks.c **** 			{
3167:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3168:FreeRTOS/tasks.c **** 			}
3169:FreeRTOS/tasks.c **** 		}
3170:FreeRTOS/tasks.c **** 
3171:FreeRTOS/tasks.c **** 		return xReturn;
3172:FreeRTOS/tasks.c **** 	}
3173:FreeRTOS/tasks.c **** 
3174:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3175:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3176:FreeRTOS/tasks.c **** 
3177:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3178:FreeRTOS/tasks.c **** 
3179:FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3180:FreeRTOS/tasks.c **** 	{
 4388              		.loc 1 3180 0
 4389              		.cfi_startproc
 4390              		@ args = 0, pretend = 0, frame = 16
 4391              		@ frame_needed = 1, uses_anonymous_args = 0
 4392 0000 80B5     		push	{r7, lr}	@
 4393              		.cfi_def_cfa_offset 8
 4394              		.cfi_offset 7, -8
 4395              		.cfi_offset 14, -4
 4396 0002 84B0     		sub	sp, sp, #16	@,,
 4397              		.cfi_def_cfa_offset 24
 4398 0004 00AF     		add	r7, sp, #0	@,,
 4399              		.cfi_def_cfa_register 7
 4400 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
3181:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 138


 4401              		.loc 1 3181 0
 4402 0008 7B68     		ldr	r3, [r7, #4]	@ tmp142, pxMutexHolder
 4403 000a FB60     		str	r3, [r7, #12]	@ tmp142, pxTCB
3182:FreeRTOS/tasks.c **** 
3183:FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3184:FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3185:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 4404              		.loc 1 3185 0
 4405 000c 7B68     		ldr	r3, [r7, #4]	@ tmp143, pxMutexHolder
 4406 000e 002B     		cmp	r3, #0	@ tmp143,
 4407 0010 62D0     		beq	.L334	@,
3186:FreeRTOS/tasks.c **** 		{
3187:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4408              		.loc 1 3187 0
 4409 0012 FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 4410 0014 DA6A     		ldr	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4411 0016 324B     		ldr	r3, .L335	@ tmp145,
 4412 0018 1B68     		ldr	r3, [r3]	@ D.6700, pxCurrentTCB
 4413 001a DB6A     		ldr	r3, [r3, #44]	@ D.6699, _11->uxPriority
 4414 001c 9A42     		cmp	r2, r3	@ D.6699, D.6699
 4415 001e 5BD2     		bcs	.L334	@,
3188:FreeRTOS/tasks.c **** 			{
3189:FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3190:FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3191:FreeRTOS/tasks.c **** 				not	being used for anything else. */
3192:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4416              		.loc 1 3192 0
 4417 0020 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 4418 0022 9B69     		ldr	r3, [r3, #24]	@ D.6699, pxTCB_8->xEventListItem.xItemValue
 4419 0024 002B     		cmp	r3, #0	@ D.6701,
 4420 0026 06DB     		blt	.L327	@,
3193:FreeRTOS/tasks.c **** 				{
3194:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 4421              		.loc 1 3194 0
 4422 0028 2D4B     		ldr	r3, .L335	@ tmp147,
 4423 002a 1B68     		ldr	r3, [r3]	@ D.6700, pxCurrentTCB
 4424 002c DB6A     		ldr	r3, [r3, #44]	@ D.6699, _15->uxPriority
 4425 002e C3F10802 		rsb	r2, r3, #8	@ D.6699, D.6699,
 4426 0032 FB68     		ldr	r3, [r7, #12]	@ tmp148, pxTCB
 4427 0034 9A61     		str	r2, [r3, #24]	@ D.6699, pxTCB_8->xEventListItem.xItemValue
 4428              	.L327:
3195:FreeRTOS/tasks.c **** 				}
3196:FreeRTOS/tasks.c **** 				else
3197:FreeRTOS/tasks.c **** 				{
3198:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3199:FreeRTOS/tasks.c **** 				}
3200:FreeRTOS/tasks.c **** 
3201:FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need to
3202:FreeRTOS/tasks.c **** 				be moved into a new list. */
3203:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 4429              		.loc 1 3203 0
 4430 0036 FB68     		ldr	r3, [r7, #12]	@ tmp149, pxTCB
 4431 0038 5969     		ldr	r1, [r3, #20]	@ D.6702, pxTCB_8->xGenericListItem.pvContainer
 4432 003a FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 4433 003c DA6A     		ldr	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4434 003e 1346     		mov	r3, r2	@ tmp151, D.6699
 4435 0040 9B00     		lsls	r3, r3, #2	@ tmp151, tmp151,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 139


 4436 0042 1344     		add	r3, r3, r2	@ tmp151, D.6699
 4437 0044 9B00     		lsls	r3, r3, #2	@ tmp152, tmp151,
 4438 0046 274A     		ldr	r2, .L335+4	@ tmp153,
 4439 0048 1344     		add	r3, r3, r2	@ D.6703, tmp153
 4440 004a 9942     		cmp	r1, r3	@ D.6702, D.6703
 4441 004c 01D1     		bne	.L328	@,
 4442              		.loc 1 3203 0 is_stmt 0 discriminator 1
 4443 004e 0123     		movs	r3, #1	@ D.6698,
 4444 0050 00E0     		b	.L329	@
 4445              	.L328:
 4446              		.loc 1 3203 0 discriminator 2
 4447 0052 0023     		movs	r3, #0	@ D.6698,
 4448              	.L329:
 4449              		.loc 1 3203 0 discriminator 4
 4450 0054 002B     		cmp	r3, #0	@ D.6698,
 4451 0056 3AD0     		beq	.L330	@,
3204:FreeRTOS/tasks.c **** 				{
3205:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 4452              		.loc 1 3205 0 is_stmt 1
 4453 0058 FB68     		ldr	r3, [r7, #12]	@ tmp154, pxTCB
 4454 005a 0433     		adds	r3, r3, #4	@ D.6704, tmp154,
 4455 005c 1846     		mov	r0, r3	@, D.6704
 4456 005e FFF7FEFF 		bl	uxListRemove	@
 4457 0062 0346     		mov	r3, r0	@ D.6699,
 4458 0064 002B     		cmp	r3, #0	@ D.6699,
 4459 0066 15D1     		bne	.L331	@,
3206:FreeRTOS/tasks.c **** 					{
3207:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4460              		.loc 1 3207 0
 4461 0068 FB68     		ldr	r3, [r7, #12]	@ tmp155, pxTCB
 4462 006a DA6A     		ldr	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4463 006c 1D49     		ldr	r1, .L335+4	@ tmp156,
 4464 006e 1346     		mov	r3, r2	@ tmp157, D.6699
 4465 0070 9B00     		lsls	r3, r3, #2	@ tmp157, tmp157,
 4466 0072 1344     		add	r3, r3, r2	@ tmp157, D.6699
 4467 0074 9B00     		lsls	r3, r3, #2	@ tmp158, tmp157,
 4468 0076 0B44     		add	r3, r3, r1	@ tmp159, tmp156
 4469 0078 1B68     		ldr	r3, [r3]	@ D.6699, pxReadyTasksLists[_27].uxNumberOfItems
 4470 007a 002B     		cmp	r3, #0	@ D.6699,
 4471 007c 0AD1     		bne	.L331	@,
 4472              		.loc 1 3207 0 is_stmt 0 discriminator 1
 4473 007e FB68     		ldr	r3, [r7, #12]	@ tmp160, pxTCB
 4474 0080 DB6A     		ldr	r3, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4475 0082 0122     		movs	r2, #1	@ tmp161,
 4476 0084 02FA03F3 		lsl	r3, r2, r3	@ D.6699, tmp161, D.6699
 4477 0088 DA43     		mvns	r2, r3	@ D.6699, D.6699
 4478 008a 174B     		ldr	r3, .L335+8	@ tmp162,
 4479 008c 1B68     		ldr	r3, [r3]	@ D.6699, uxTopReadyPriority
 4480 008e 1340     		ands	r3, r3, r2	@, D.6699, D.6699, D.6699
 4481 0090 154A     		ldr	r2, .L335+8	@ tmp163,
 4482 0092 1360     		str	r3, [r2]	@ D.6699, uxTopReadyPriority
 4483              	.L331:
3208:FreeRTOS/tasks.c **** 					}
3209:FreeRTOS/tasks.c **** 					else
3210:FreeRTOS/tasks.c **** 					{
3211:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3212:FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 140


3213:FreeRTOS/tasks.c **** 
3214:FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3215:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4484              		.loc 1 3215 0 is_stmt 1
 4485 0094 124B     		ldr	r3, .L335	@ tmp164,
 4486 0096 1B68     		ldr	r3, [r3]	@ D.6700, pxCurrentTCB
 4487 0098 DA6A     		ldr	r2, [r3, #44]	@ D.6699, _35->uxPriority
 4488 009a FB68     		ldr	r3, [r7, #12]	@ tmp165, pxTCB
 4489 009c DA62     		str	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
3216:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4490              		.loc 1 3216 0
 4491 009e FB68     		ldr	r3, [r7, #12]	@ tmp166, pxTCB
 4492 00a0 DB6A     		ldr	r3, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4493 00a2 0122     		movs	r2, #1	@ tmp167,
 4494 00a4 9A40     		lsls	r2, r2, r3	@ D.6699, tmp167, D.6699
 4495 00a6 104B     		ldr	r3, .L335+8	@ tmp168,
 4496 00a8 1B68     		ldr	r3, [r3]	@ D.6699, uxTopReadyPriority
 4497 00aa 1343     		orrs	r3, r3, r2	@, D.6699, D.6699, D.6699
 4498 00ac 0E4A     		ldr	r2, .L335+8	@ tmp169,
 4499 00ae 1360     		str	r3, [r2]	@ D.6699, uxTopReadyPriority
 4500 00b0 FB68     		ldr	r3, [r7, #12]	@ tmp170, pxTCB
 4501 00b2 DA6A     		ldr	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4502 00b4 1346     		mov	r3, r2	@ tmp171, D.6699
 4503 00b6 9B00     		lsls	r3, r3, #2	@ tmp171, tmp171,
 4504 00b8 1344     		add	r3, r3, r2	@ tmp171, D.6699
 4505 00ba 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 4506 00bc 094A     		ldr	r2, .L335+4	@ tmp173,
 4507 00be 1A44     		add	r2, r2, r3	@ D.6703, tmp171
 4508 00c0 FB68     		ldr	r3, [r7, #12]	@ tmp174, pxTCB
 4509 00c2 0433     		adds	r3, r3, #4	@ D.6704, tmp174,
 4510 00c4 1946     		mov	r1, r3	@, D.6704
 4511 00c6 1046     		mov	r0, r2	@, D.6703
 4512 00c8 FFF7FEFF 		bl	vListInsertEnd	@
3217:FreeRTOS/tasks.c **** 				}
3218:FreeRTOS/tasks.c **** 				else
3219:FreeRTOS/tasks.c **** 				{
3220:FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3221:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3222:FreeRTOS/tasks.c **** 				}
3223:FreeRTOS/tasks.c **** 
3224:FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3225:FreeRTOS/tasks.c **** 			}
3226:FreeRTOS/tasks.c **** 			else
3227:FreeRTOS/tasks.c **** 			{
3228:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3229:FreeRTOS/tasks.c **** 			}
3230:FreeRTOS/tasks.c **** 		}
3231:FreeRTOS/tasks.c **** 		else
3232:FreeRTOS/tasks.c **** 		{
3233:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3234:FreeRTOS/tasks.c **** 		}
3235:FreeRTOS/tasks.c **** 	}
 4513              		.loc 1 3235 0
 4514 00cc 04E0     		b	.L334	@
 4515              	.L330:
3221:FreeRTOS/tasks.c **** 				}
 4516              		.loc 1 3221 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 141


 4517 00ce 044B     		ldr	r3, .L335	@ tmp175,
 4518 00d0 1B68     		ldr	r3, [r3]	@ D.6700, pxCurrentTCB
 4519 00d2 DA6A     		ldr	r2, [r3, #44]	@ D.6699, _47->uxPriority
 4520 00d4 FB68     		ldr	r3, [r7, #12]	@ tmp176, pxTCB
 4521 00d6 DA62     		str	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4522              	.L334:
 4523              		.loc 1 3235 0
 4524 00d8 00BF     		nop
 4525 00da 1037     		adds	r7, r7, #16	@,,
 4526              		.cfi_def_cfa_offset 8
 4527 00dc BD46     		mov	sp, r7	@,
 4528              		.cfi_def_cfa_register 13
 4529              		@ sp needed	@
 4530 00de 80BD     		pop	{r7, pc}	@
 4531              	.L336:
 4532              		.align	2
 4533              	.L335:
 4534 00e0 00000000 		.word	pxCurrentTCB
 4535 00e4 00000000 		.word	pxReadyTasksLists
 4536 00e8 00000000 		.word	uxTopReadyPriority
 4537              		.cfi_endproc
 4538              	.LFE42:
 4539              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 4540              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4541              		.align	2
 4542              		.global	xTaskPriorityDisinherit
 4543              		.thumb
 4544              		.thumb_func
 4545              		.type	xTaskPriorityDisinherit, %function
 4546              	xTaskPriorityDisinherit:
 4547              	.LFB43:
3236:FreeRTOS/tasks.c **** 
3237:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3238:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3239:FreeRTOS/tasks.c **** 
3240:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3241:FreeRTOS/tasks.c **** 
3242:FreeRTOS/tasks.c **** 	BaseT_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3243:FreeRTOS/tasks.c **** 	{
 4548              		.loc 1 3243 0
 4549              		.cfi_startproc
 4550              		@ args = 0, pretend = 0, frame = 16
 4551              		@ frame_needed = 1, uses_anonymous_args = 0
 4552 0000 80B5     		push	{r7, lr}	@
 4553              		.cfi_def_cfa_offset 8
 4554              		.cfi_offset 7, -8
 4555              		.cfi_offset 14, -4
 4556 0002 84B0     		sub	sp, sp, #16	@,,
 4557              		.cfi_def_cfa_offset 24
 4558 0004 00AF     		add	r7, sp, #0	@,,
 4559              		.cfi_def_cfa_register 7
 4560 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
3244:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4561              		.loc 1 3244 0
 4562 0008 7B68     		ldr	r3, [r7, #4]	@ tmp137, pxMutexHolder
 4563 000a BB60     		str	r3, [r7, #8]	@ tmp137, pxTCB
3245:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 142


 4564              		.loc 1 3245 0
 4565 000c 0023     		movs	r3, #0	@ tmp138,
 4566 000e FB60     		str	r3, [r7, #12]	@ tmp138, xReturn
3246:FreeRTOS/tasks.c **** 
3247:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 4567              		.loc 1 3247 0
 4568 0010 7B68     		ldr	r3, [r7, #4]	@ tmp139, pxMutexHolder
 4569 0012 002B     		cmp	r3, #0	@ tmp139,
 4570 0014 56D0     		beq	.L338	@,
3248:FreeRTOS/tasks.c **** 		{
3249:FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4571              		.loc 1 3249 0
 4572 0016 BB68     		ldr	r3, [r7, #8]	@ tmp140, pxTCB
 4573 0018 DB6C     		ldr	r3, [r3, #76]	@ D.6705, pxTCB_6->uxMutexesHeld
 4574 001a 002B     		cmp	r3, #0	@ D.6705,
 4575 001c 02D1     		bne	.L339	@,
 4576              		.loc 1 3249 0 is_stmt 0 discriminator 1
 4577 001e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 4578              	.L340:
 4579 0022 FEE7     		b	.L340	@
 4580              	.L339:
3250:FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4581              		.loc 1 3250 0 is_stmt 1
 4582 0024 BB68     		ldr	r3, [r7, #8]	@ tmp141, pxTCB
 4583 0026 DB6C     		ldr	r3, [r3, #76]	@ D.6705, pxTCB_6->uxMutexesHeld
 4584 0028 5A1E     		subs	r2, r3, #1	@ D.6705, D.6705,
 4585 002a BB68     		ldr	r3, [r7, #8]	@ tmp142, pxTCB
 4586 002c DA64     		str	r2, [r3, #76]	@ D.6705, pxTCB_6->uxMutexesHeld
3251:FreeRTOS/tasks.c **** 
3252:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4587              		.loc 1 3252 0
 4588 002e BB68     		ldr	r3, [r7, #8]	@ tmp143, pxTCB
 4589 0030 DA6A     		ldr	r2, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4590 0032 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxTCB
 4591 0034 9B6C     		ldr	r3, [r3, #72]	@ D.6705, pxTCB_6->uxBasePriority
 4592 0036 9A42     		cmp	r2, r3	@ D.6705, D.6705
 4593 0038 44D0     		beq	.L338	@,
3253:FreeRTOS/tasks.c **** 			{
3254:FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3255:FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseT_t ) 0 )
 4594              		.loc 1 3255 0
 4595 003a BB68     		ldr	r3, [r7, #8]	@ tmp145, pxTCB
 4596 003c DB6C     		ldr	r3, [r3, #76]	@ D.6705, pxTCB_6->uxMutexesHeld
 4597 003e 002B     		cmp	r3, #0	@ D.6705,
 4598 0040 40D1     		bne	.L338	@,
3256:FreeRTOS/tasks.c **** 				{
3257:FreeRTOS/tasks.c **** 					/* The holding task must be the running task to be able to give
3258:FreeRTOS/tasks.c **** 					the mutex back.  Remove the holding task from the ready list. */
3259:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 4599              		.loc 1 3259 0
 4600 0042 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxTCB
 4601 0044 0433     		adds	r3, r3, #4	@ D.6706, tmp146,
 4602 0046 1846     		mov	r0, r3	@, D.6706
 4603 0048 FFF7FEFF 		bl	uxListRemove	@
 4604 004c 0346     		mov	r3, r0	@ D.6705,
 4605 004e 002B     		cmp	r3, #0	@ D.6705,
 4606 0050 15D1     		bne	.L341	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 143


3260:FreeRTOS/tasks.c **** 					{
3261:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4607              		.loc 1 3261 0
 4608 0052 BB68     		ldr	r3, [r7, #8]	@ tmp147, pxTCB
 4609 0054 DA6A     		ldr	r2, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4610 0056 1E49     		ldr	r1, .L344	@ tmp148,
 4611 0058 1346     		mov	r3, r2	@ tmp149, D.6705
 4612 005a 9B00     		lsls	r3, r3, #2	@ tmp149, tmp149,
 4613 005c 1344     		add	r3, r3, r2	@ tmp149, D.6705
 4614 005e 9B00     		lsls	r3, r3, #2	@ tmp150, tmp149,
 4615 0060 0B44     		add	r3, r3, r1	@ tmp151, tmp148
 4616 0062 1B68     		ldr	r3, [r3]	@ D.6705, pxReadyTasksLists[_19].uxNumberOfItems
 4617 0064 002B     		cmp	r3, #0	@ D.6705,
 4618 0066 0AD1     		bne	.L341	@,
 4619              		.loc 1 3261 0 is_stmt 0 discriminator 1
 4620 0068 BB68     		ldr	r3, [r7, #8]	@ tmp152, pxTCB
 4621 006a DB6A     		ldr	r3, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4622 006c 0122     		movs	r2, #1	@ tmp153,
 4623 006e 02FA03F3 		lsl	r3, r2, r3	@ D.6705, tmp153, D.6705
 4624 0072 DA43     		mvns	r2, r3	@ D.6705, D.6705
 4625 0074 174B     		ldr	r3, .L344+4	@ tmp154,
 4626 0076 1B68     		ldr	r3, [r3]	@ D.6705, uxTopReadyPriority
 4627 0078 1340     		ands	r3, r3, r2	@, D.6705, D.6705, D.6705
 4628 007a 164A     		ldr	r2, .L344+4	@ tmp155,
 4629 007c 1360     		str	r3, [r2]	@ D.6705, uxTopReadyPriority
 4630              	.L341:
3262:FreeRTOS/tasks.c **** 					}
3263:FreeRTOS/tasks.c **** 					else
3264:FreeRTOS/tasks.c **** 					{
3265:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3266:FreeRTOS/tasks.c **** 					}
3267:FreeRTOS/tasks.c **** 
3268:FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the new
3269:FreeRTOS/tasks.c **** 					ready list. */
3270:FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3271:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4631              		.loc 1 3271 0 is_stmt 1
 4632 007e BB68     		ldr	r3, [r7, #8]	@ tmp156, pxTCB
 4633 0080 9A6C     		ldr	r2, [r3, #72]	@ D.6705, pxTCB_6->uxBasePriority
 4634 0082 BB68     		ldr	r3, [r7, #8]	@ tmp157, pxTCB
 4635 0084 DA62     		str	r2, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
3272:FreeRTOS/tasks.c **** 
3273:FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3274:FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3275:FreeRTOS/tasks.c **** 					running to give back the mutex. */
3276:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 4636              		.loc 1 3276 0
 4637 0086 BB68     		ldr	r3, [r7, #8]	@ tmp158, pxTCB
 4638 0088 DB6A     		ldr	r3, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4639 008a C3F10802 		rsb	r2, r3, #8	@ D.6705, D.6705,
 4640 008e BB68     		ldr	r3, [r7, #8]	@ tmp159, pxTCB
 4641 0090 9A61     		str	r2, [r3, #24]	@ D.6705, pxTCB_6->xEventListItem.xItemValue
3277:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4642              		.loc 1 3277 0
 4643 0092 BB68     		ldr	r3, [r7, #8]	@ tmp160, pxTCB
 4644 0094 DB6A     		ldr	r3, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4645 0096 0122     		movs	r2, #1	@ tmp161,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 144


 4646 0098 9A40     		lsls	r2, r2, r3	@ D.6705, tmp161, D.6705
 4647 009a 0E4B     		ldr	r3, .L344+4	@ tmp162,
 4648 009c 1B68     		ldr	r3, [r3]	@ D.6705, uxTopReadyPriority
 4649 009e 1343     		orrs	r3, r3, r2	@, D.6705, D.6705, D.6705
 4650 00a0 0C4A     		ldr	r2, .L344+4	@ tmp163,
 4651 00a2 1360     		str	r3, [r2]	@ D.6705, uxTopReadyPriority
 4652 00a4 BB68     		ldr	r3, [r7, #8]	@ tmp164, pxTCB
 4653 00a6 DA6A     		ldr	r2, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4654 00a8 1346     		mov	r3, r2	@ tmp165, D.6705
 4655 00aa 9B00     		lsls	r3, r3, #2	@ tmp165, tmp165,
 4656 00ac 1344     		add	r3, r3, r2	@ tmp165, D.6705
 4657 00ae 9B00     		lsls	r3, r3, #2	@ tmp166, tmp165,
 4658 00b0 074A     		ldr	r2, .L344	@ tmp167,
 4659 00b2 1A44     		add	r2, r2, r3	@ D.6707, tmp165
 4660 00b4 BB68     		ldr	r3, [r7, #8]	@ tmp168, pxTCB
 4661 00b6 0433     		adds	r3, r3, #4	@ D.6706, tmp168,
 4662 00b8 1946     		mov	r1, r3	@, D.6706
 4663 00ba 1046     		mov	r0, r2	@, D.6707
 4664 00bc FFF7FEFF 		bl	vListInsertEnd	@
3278:FreeRTOS/tasks.c **** 
3279:FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3280:FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3281:FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3282:FreeRTOS/tasks.c **** 					in an order different to that in which they were taken. */
3283:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 4665              		.loc 1 3283 0
 4666 00c0 0123     		movs	r3, #1	@ tmp169,
 4667 00c2 FB60     		str	r3, [r7, #12]	@ tmp169, xReturn
 4668              	.L338:
3284:FreeRTOS/tasks.c **** 				}
3285:FreeRTOS/tasks.c **** 				else
3286:FreeRTOS/tasks.c **** 				{
3287:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3288:FreeRTOS/tasks.c **** 				}
3289:FreeRTOS/tasks.c **** 			}
3290:FreeRTOS/tasks.c **** 			else
3291:FreeRTOS/tasks.c **** 			{
3292:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3293:FreeRTOS/tasks.c **** 			}
3294:FreeRTOS/tasks.c **** 		}
3295:FreeRTOS/tasks.c **** 		else
3296:FreeRTOS/tasks.c **** 		{
3297:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3298:FreeRTOS/tasks.c **** 		}
3299:FreeRTOS/tasks.c **** 
3300:FreeRTOS/tasks.c **** 		return xReturn;
 4669              		.loc 1 3300 0
 4670 00c4 FB68     		ldr	r3, [r7, #12]	@ D.6708, xReturn
3301:FreeRTOS/tasks.c **** 	}
 4671              		.loc 1 3301 0
 4672 00c6 1846     		mov	r0, r3	@, <retval>
 4673 00c8 1037     		adds	r7, r7, #16	@,,
 4674              		.cfi_def_cfa_offset 8
 4675 00ca BD46     		mov	sp, r7	@,
 4676              		.cfi_def_cfa_register 13
 4677              		@ sp needed	@
 4678 00cc 80BD     		pop	{r7, pc}	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 145


 4679              	.L345:
 4680 00ce 00BF     		.align	2
 4681              	.L344:
 4682 00d0 00000000 		.word	pxReadyTasksLists
 4683 00d4 00000000 		.word	uxTopReadyPriority
 4684              		.cfi_endproc
 4685              	.LFE43:
 4686              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 4687              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4688              		.align	2
 4689              		.global	uxTaskResetEventItemValue
 4690              		.thumb
 4691              		.thumb_func
 4692              		.type	uxTaskResetEventItemValue, %function
 4693              	uxTaskResetEventItemValue:
 4694              	.LFB44:
3302:FreeRTOS/tasks.c **** 
3303:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3304:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3305:FreeRTOS/tasks.c **** 
3306:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3307:FreeRTOS/tasks.c **** 
3308:FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3309:FreeRTOS/tasks.c **** 	{
3310:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3311:FreeRTOS/tasks.c **** 
3312:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3313:FreeRTOS/tasks.c **** 		{
3314:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3315:FreeRTOS/tasks.c **** 
3316:FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3317:FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3318:FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3319:FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3320:FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3321:FreeRTOS/tasks.c **** 			critical section. */
3322:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3323:FreeRTOS/tasks.c **** 			{
3324:FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3325:FreeRTOS/tasks.c **** 			}
3326:FreeRTOS/tasks.c **** 
3327:FreeRTOS/tasks.c **** 		}
3328:FreeRTOS/tasks.c **** 		else
3329:FreeRTOS/tasks.c **** 		{
3330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3331:FreeRTOS/tasks.c **** 		}
3332:FreeRTOS/tasks.c **** 	}
3333:FreeRTOS/tasks.c **** 
3334:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3335:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3336:FreeRTOS/tasks.c **** 
3337:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3338:FreeRTOS/tasks.c **** 
3339:FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3340:FreeRTOS/tasks.c **** 	{
3341:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3342:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 146


3343:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3344:FreeRTOS/tasks.c **** 			{
3345:FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3346:FreeRTOS/tasks.c **** 
3347:FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3348:FreeRTOS/tasks.c **** 				{
3349:FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3350:FreeRTOS/tasks.c **** 				}
3351:FreeRTOS/tasks.c **** 				else
3352:FreeRTOS/tasks.c **** 				{
3353:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3354:FreeRTOS/tasks.c **** 				}
3355:FreeRTOS/tasks.c **** 			}
3356:FreeRTOS/tasks.c **** 			else
3357:FreeRTOS/tasks.c **** 			{
3358:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3359:FreeRTOS/tasks.c **** 			}
3360:FreeRTOS/tasks.c **** 		}
3361:FreeRTOS/tasks.c **** 		else
3362:FreeRTOS/tasks.c **** 		{
3363:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3364:FreeRTOS/tasks.c **** 		}
3365:FreeRTOS/tasks.c **** 	}
3366:FreeRTOS/tasks.c **** 
3367:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3368:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3369:FreeRTOS/tasks.c **** 
3370:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3371:FreeRTOS/tasks.c **** 
3372:FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3373:FreeRTOS/tasks.c **** 	{
3374:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3375:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3376:FreeRTOS/tasks.c **** 	char cStatus;
3377:FreeRTOS/tasks.c **** 
3378:FreeRTOS/tasks.c **** 		/*
3379:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3380:FreeRTOS/tasks.c **** 		 *
3381:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3382:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3383:FreeRTOS/tasks.c **** 		 * scheduler.
3384:FreeRTOS/tasks.c **** 		 *
3385:FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3386:FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3387:FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3388:FreeRTOS/tasks.c **** 		 *
3389:FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3390:FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3391:FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3392:FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3393:FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3394:FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3395:FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3396:FreeRTOS/tasks.c **** 		 *
3397:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3398:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3399:FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 147


3400:FreeRTOS/tasks.c **** 		 */
3401:FreeRTOS/tasks.c **** 
3402:FreeRTOS/tasks.c **** 
3403:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3404:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3405:FreeRTOS/tasks.c **** 
3406:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3407:FreeRTOS/tasks.c **** 		function is executing. */
3408:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3409:FreeRTOS/tasks.c **** 
3410:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3411:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3412:FreeRTOS/tasks.c **** 
3413:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3414:FreeRTOS/tasks.c **** 		{
3415:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3416:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3417:FreeRTOS/tasks.c **** 
3418:FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3419:FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3420:FreeRTOS/tasks.c **** 			{
3421:FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3422:FreeRTOS/tasks.c **** 				{
3423:FreeRTOS/tasks.c **** 				case eReady:		cStatus = tskREADY_CHAR;
3424:FreeRTOS/tasks.c **** 									break;
3425:FreeRTOS/tasks.c **** 
3426:FreeRTOS/tasks.c **** 				case eBlocked:		cStatus = tskBLOCKED_CHAR;
3427:FreeRTOS/tasks.c **** 									break;
3428:FreeRTOS/tasks.c **** 
3429:FreeRTOS/tasks.c **** 				case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3430:FreeRTOS/tasks.c **** 									break;
3431:FreeRTOS/tasks.c **** 
3432:FreeRTOS/tasks.c **** 				case eDeleted:		cStatus = tskDELETED_CHAR;
3433:FreeRTOS/tasks.c **** 									break;
3434:FreeRTOS/tasks.c **** 
3435:FreeRTOS/tasks.c **** 				default:			/* Should not get here, but it is included
3436:FreeRTOS/tasks.c **** 									to prevent static checking errors. */
3437:FreeRTOS/tasks.c **** 									cStatus = 0x00;
3438:FreeRTOS/tasks.c **** 									break;
3439:FreeRTOS/tasks.c **** 				}
3440:FreeRTOS/tasks.c **** 
3441:FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus,
3442:FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3443:FreeRTOS/tasks.c **** 			}
3444:FreeRTOS/tasks.c **** 
3445:FreeRTOS/tasks.c **** 			/* Free the array again. */
3446:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3447:FreeRTOS/tasks.c **** 		}
3448:FreeRTOS/tasks.c **** 		else
3449:FreeRTOS/tasks.c **** 		{
3450:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3451:FreeRTOS/tasks.c **** 		}
3452:FreeRTOS/tasks.c **** 	}
3453:FreeRTOS/tasks.c **** 
3454:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) ) */
3455:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
3456:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 148


3457:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3458:FreeRTOS/tasks.c **** 
3459:FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3460:FreeRTOS/tasks.c **** 	{
3461:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3462:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3463:FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3464:FreeRTOS/tasks.c **** 
3465:FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3466:FreeRTOS/tasks.c **** 		{
3467:FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3468:FreeRTOS/tasks.c **** 		}
3469:FreeRTOS/tasks.c **** 		#endif
3470:FreeRTOS/tasks.c **** 
3471:FreeRTOS/tasks.c **** 		/*
3472:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3473:FreeRTOS/tasks.c **** 		 *
3474:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3475:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3476:FreeRTOS/tasks.c **** 		 * scheduler.
3477:FreeRTOS/tasks.c **** 		 *
3478:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3479:FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3480:FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3481:FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
3482:FreeRTOS/tasks.c **** 		 *
3483:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3484:FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3485:FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3486:FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3487:FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3488:FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3489:FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
3490:FreeRTOS/tasks.c **** 		 *
3491:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3492:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3493:FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3494:FreeRTOS/tasks.c **** 		 */
3495:FreeRTOS/tasks.c **** 
3496:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3497:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3498:FreeRTOS/tasks.c **** 
3499:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3500:FreeRTOS/tasks.c **** 		function is executing. */
3501:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3502:FreeRTOS/tasks.c **** 
3503:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3504:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3505:FreeRTOS/tasks.c **** 
3506:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3507:FreeRTOS/tasks.c **** 		{
3508:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3509:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3510:FreeRTOS/tasks.c **** 
3511:FreeRTOS/tasks.c **** 			/* For percentage calculations. */
3512:FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
3513:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 149


3514:FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
3515:FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
3516:FreeRTOS/tasks.c **** 			{
3517:FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
3518:FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3519:FreeRTOS/tasks.c **** 				{
3520:FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
3521:FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
3522:FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3523:FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3524:FreeRTOS/tasks.c **** 
3525:FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3526:FreeRTOS/tasks.c **** 					{
3527:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3528:FreeRTOS/tasks.c **** 						{
3529:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskS
3530:FreeRTOS/tasks.c **** 						}
3531:FreeRTOS/tasks.c **** 						#else
3532:FreeRTOS/tasks.c **** 						{
3533:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3534:FreeRTOS/tasks.c **** 							printf() library can be used. */
3535:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t%u%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3536:FreeRTOS/tasks.c **** 						}
3537:FreeRTOS/tasks.c **** 						#endif
3538:FreeRTOS/tasks.c **** 					}
3539:FreeRTOS/tasks.c **** 					else
3540:FreeRTOS/tasks.c **** 					{
3541:FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
3542:FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
3543:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3544:FreeRTOS/tasks.c **** 						{
3545:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskSt
3546:FreeRTOS/tasks.c **** 						}
3547:FreeRTOS/tasks.c **** 						#else
3548:FreeRTOS/tasks.c **** 						{
3549:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3550:FreeRTOS/tasks.c **** 							printf() library can be used. */
3551:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3552:FreeRTOS/tasks.c **** 						}
3553:FreeRTOS/tasks.c **** 						#endif
3554:FreeRTOS/tasks.c **** 					}
3555:FreeRTOS/tasks.c **** 
3556:FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3557:FreeRTOS/tasks.c **** 				}
3558:FreeRTOS/tasks.c **** 			}
3559:FreeRTOS/tasks.c **** 			else
3560:FreeRTOS/tasks.c **** 			{
3561:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3562:FreeRTOS/tasks.c **** 			}
3563:FreeRTOS/tasks.c **** 
3564:FreeRTOS/tasks.c **** 			/* Free the array again. */
3565:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3566:FreeRTOS/tasks.c **** 		}
3567:FreeRTOS/tasks.c **** 		else
3568:FreeRTOS/tasks.c **** 		{
3569:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3570:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 150


3571:FreeRTOS/tasks.c **** 	}
3572:FreeRTOS/tasks.c **** 
3573:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
3574:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3575:FreeRTOS/tasks.c **** 
3576:FreeRTOS/tasks.c **** TickT_t uxTaskResetEventItemValue( void )
3577:FreeRTOS/tasks.c **** {
 4695              		.loc 1 3577 0
 4696              		.cfi_startproc
 4697              		@ args = 0, pretend = 0, frame = 8
 4698              		@ frame_needed = 1, uses_anonymous_args = 0
 4699              		@ link register save eliminated.
 4700 0000 80B4     		push	{r7}	@
 4701              		.cfi_def_cfa_offset 4
 4702              		.cfi_offset 7, -4
 4703 0002 83B0     		sub	sp, sp, #12	@,,
 4704              		.cfi_def_cfa_offset 16
 4705 0004 00AF     		add	r7, sp, #0	@,,
 4706              		.cfi_def_cfa_register 7
3578:FreeRTOS/tasks.c **** TickT_t uxReturn;
3579:FreeRTOS/tasks.c **** 
3580:FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4707              		.loc 1 3580 0
 4708 0006 094B     		ldr	r3, .L348	@ tmp117,
 4709 0008 1B68     		ldr	r3, [r3]	@ D.6709, pxCurrentTCB
 4710 000a 9B69     		ldr	r3, [r3, #24]	@ tmp118, _2->xEventListItem.xItemValue
 4711 000c 7B60     		str	r3, [r7, #4]	@ tmp118, uxReturn
3581:FreeRTOS/tasks.c **** 
3582:FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3583:FreeRTOS/tasks.c **** 	queues and semaphores. */
3584:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - (
 4712              		.loc 1 3584 0
 4713 000e 074B     		ldr	r3, .L348	@ tmp119,
 4714 0010 1B68     		ldr	r3, [r3]	@ D.6709, pxCurrentTCB
 4715 0012 064A     		ldr	r2, .L348	@ tmp120,
 4716 0014 1268     		ldr	r2, [r2]	@ D.6709, pxCurrentTCB
 4717 0016 D26A     		ldr	r2, [r2, #44]	@ D.6710, _5->uxPriority
 4718 0018 C2F10802 		rsb	r2, r2, #8	@ D.6710, D.6710,
 4719 001c 9A61     		str	r2, [r3, #24]	@ D.6710, _4->xEventListItem.xItemValue
3585:FreeRTOS/tasks.c **** 
3586:FreeRTOS/tasks.c **** 	return uxReturn;
 4720              		.loc 1 3586 0
 4721 001e 7B68     		ldr	r3, [r7, #4]	@ D.6711, uxReturn
3587:FreeRTOS/tasks.c **** }
 4722              		.loc 1 3587 0
 4723 0020 1846     		mov	r0, r3	@, <retval>
 4724 0022 0C37     		adds	r7, r7, #12	@,,
 4725              		.cfi_def_cfa_offset 4
 4726 0024 BD46     		mov	sp, r7	@,
 4727              		.cfi_def_cfa_register 13
 4728              		@ sp needed	@
 4729 0026 80BC     		pop	{r7}	@
 4730              		.cfi_restore 7
 4731              		.cfi_def_cfa_offset 0
 4732 0028 7047     		bx	lr	@
 4733              	.L349:
 4734 002a 00BF     		.align	2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 151


 4735              	.L348:
 4736 002c 00000000 		.word	pxCurrentTCB
 4737              		.cfi_endproc
 4738              	.LFE44:
 4739              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4740              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4741              		.align	2
 4742              		.global	pvTaskIncrementMutexHeldCount
 4743              		.thumb
 4744              		.thumb_func
 4745              		.type	pvTaskIncrementMutexHeldCount, %function
 4746              	pvTaskIncrementMutexHeldCount:
 4747              	.LFB45:
3588:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3589:FreeRTOS/tasks.c **** 
3590:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3591:FreeRTOS/tasks.c **** 
3592:FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3593:FreeRTOS/tasks.c **** 	{
 4748              		.loc 1 3593 0
 4749              		.cfi_startproc
 4750              		@ args = 0, pretend = 0, frame = 0
 4751              		@ frame_needed = 1, uses_anonymous_args = 0
 4752              		@ link register save eliminated.
 4753 0000 80B4     		push	{r7}	@
 4754              		.cfi_def_cfa_offset 4
 4755              		.cfi_offset 7, -4
 4756 0002 00AF     		add	r7, sp, #0	@,,
 4757              		.cfi_def_cfa_register 7
3594:FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3595:FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
3596:FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 4758              		.loc 1 3596 0
 4759 0004 074B     		ldr	r3, .L353	@ tmp116,
 4760 0006 1B68     		ldr	r3, [r3]	@ D.6712, pxCurrentTCB
 4761 0008 002B     		cmp	r3, #0	@ D.6712,
 4762 000a 04D0     		beq	.L351	@,
3597:FreeRTOS/tasks.c **** 		{
3598:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4763              		.loc 1 3598 0
 4764 000c 054B     		ldr	r3, .L353	@ tmp117,
 4765 000e 1B68     		ldr	r3, [r3]	@ D.6712, pxCurrentTCB
 4766 0010 DA6C     		ldr	r2, [r3, #76]	@ D.6713, _4->uxMutexesHeld
 4767 0012 0132     		adds	r2, r2, #1	@ D.6713, D.6713,
 4768 0014 DA64     		str	r2, [r3, #76]	@ D.6713, _4->uxMutexesHeld
 4769              	.L351:
3599:FreeRTOS/tasks.c **** 		}
3600:FreeRTOS/tasks.c **** 
3601:FreeRTOS/tasks.c **** 		return pxCurrentTCB;
 4770              		.loc 1 3601 0
 4771 0016 034B     		ldr	r3, .L353	@ tmp118,
 4772 0018 1B68     		ldr	r3, [r3]	@ D.6714, pxCurrentTCB
3602:FreeRTOS/tasks.c **** 	}
 4773              		.loc 1 3602 0
 4774 001a 1846     		mov	r0, r3	@, <retval>
 4775 001c BD46     		mov	sp, r7	@,
 4776              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 152


 4777              		@ sp needed	@
 4778 001e 80BC     		pop	{r7}	@
 4779              		.cfi_restore 7
 4780              		.cfi_def_cfa_offset 0
 4781 0020 7047     		bx	lr	@
 4782              	.L354:
 4783 0022 00BF     		.align	2
 4784              	.L353:
 4785 0024 00000000 		.word	pxCurrentTCB
 4786              		.cfi_endproc
 4787              	.LFE45:
 4788              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4789              		.text
 4790              	.Letext0:
 4791              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\lib\\gcc\\arm-none-eabi\\5.4
 4792              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mach
 4793              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys\
 4794              		.file 6 "FreeRTOS/include/projdefs.h"
 4795              		.file 7 "FreeRTOS/include/list.h"
 4796              		.file 8 "FreeRTOS/include/task.h"
 4797              		.section	.debug_info,"",%progbits
 4798              	.Ldebug_info0:
 4799 0000 4F120000 		.4byte	0x124f
 4800 0004 0400     		.2byte	0x4
 4801 0006 00000000 		.4byte	.Ldebug_abbrev0
 4802 000a 04       		.byte	0x4
 4803 000b 01       		.uleb128 0x1
 4804 000c 3D960000 		.4byte	.LASF1306
 4805 0010 01       		.byte	0x1
 4806 0011 25710000 		.4byte	.LASF1307
 4807 0015 32010000 		.4byte	.LASF1308
 4808 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4809 001d 00000000 		.4byte	0
 4810 0021 00000000 		.4byte	.Ldebug_line0
 4811 0025 00000000 		.4byte	.Ldebug_macro0
 4812 0029 02       		.uleb128 0x2
 4813 002a 03010000 		.4byte	.LASF1118
 4814 002e 03       		.byte	0x3
 4815 002f D8       		.byte	0xd8
 4816 0030 34000000 		.4byte	0x34
 4817 0034 03       		.uleb128 0x3
 4818 0035 04       		.byte	0x4
 4819 0036 07       		.byte	0x7
 4820 0037 70550000 		.4byte	.LASF1116
 4821 003b 04       		.uleb128 0x4
 4822 003c 04       		.byte	0x4
 4823 003d 05       		.byte	0x5
 4824 003e 696E7400 		.ascii	"int\000"
 4825 0042 03       		.uleb128 0x3
 4826 0043 01       		.byte	0x1
 4827 0044 06       		.byte	0x6
 4828 0045 AF040000 		.4byte	.LASF1117
 4829 0049 02       		.uleb128 0x2
 4830 004a 69110000 		.4byte	.LASF1119
 4831 004e 04       		.byte	0x4
 4832 004f 1D       		.byte	0x1d
 4833 0050 54000000 		.4byte	0x54
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 153


 4834 0054 03       		.uleb128 0x3
 4835 0055 01       		.byte	0x1
 4836 0056 08       		.byte	0x8
 4837 0057 C0000000 		.4byte	.LASF1120
 4838 005b 03       		.uleb128 0x3
 4839 005c 02       		.byte	0x2
 4840 005d 05       		.byte	0x5
 4841 005e 53570000 		.4byte	.LASF1121
 4842 0062 02       		.uleb128 0x2
 4843 0063 502B0000 		.4byte	.LASF1122
 4844 0067 04       		.byte	0x4
 4845 0068 2B       		.byte	0x2b
 4846 0069 6D000000 		.4byte	0x6d
 4847 006d 03       		.uleb128 0x3
 4848 006e 02       		.byte	0x2
 4849 006f 07       		.byte	0x7
 4850 0070 21180000 		.4byte	.LASF1123
 4851 0074 03       		.uleb128 0x3
 4852 0075 04       		.byte	0x4
 4853 0076 05       		.byte	0x5
 4854 0077 2F5E0000 		.4byte	.LASF1124
 4855 007b 02       		.uleb128 0x2
 4856 007c D4400000 		.4byte	.LASF1125
 4857 0080 04       		.byte	0x4
 4858 0081 41       		.byte	0x41
 4859 0082 86000000 		.4byte	0x86
 4860 0086 03       		.uleb128 0x3
 4861 0087 04       		.byte	0x4
 4862 0088 07       		.byte	0x7
 4863 0089 DC6C0000 		.4byte	.LASF1126
 4864 008d 03       		.uleb128 0x3
 4865 008e 08       		.byte	0x8
 4866 008f 05       		.byte	0x5
 4867 0090 4E4D0000 		.4byte	.LASF1127
 4868 0094 03       		.uleb128 0x3
 4869 0095 08       		.byte	0x8
 4870 0096 07       		.byte	0x7
 4871 0097 806A0000 		.4byte	.LASF1128
 4872 009b 03       		.uleb128 0x3
 4873 009c 04       		.byte	0x4
 4874 009d 07       		.byte	0x7
 4875 009e CF010000 		.4byte	.LASF1129
 4876 00a2 05       		.uleb128 0x5
 4877 00a3 04       		.byte	0x4
 4878 00a4 03       		.uleb128 0x3
 4879 00a5 01       		.byte	0x1
 4880 00a6 08       		.byte	0x8
 4881 00a7 79620000 		.4byte	.LASF718
 4882 00ab 06       		.uleb128 0x6
 4883 00ac 04       		.byte	0x4
 4884 00ad B1000000 		.4byte	0xb1
 4885 00b1 07       		.uleb128 0x7
 4886 00b2 A4000000 		.4byte	0xa4
 4887 00b6 02       		.uleb128 0x2
 4888 00b7 A81C0000 		.4byte	.LASF1130
 4889 00bb 05       		.byte	0x5
 4890 00bc 18       		.byte	0x18
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 154


 4891 00bd 49000000 		.4byte	0x49
 4892 00c1 02       		.uleb128 0x2
 4893 00c2 876B0000 		.4byte	.LASF1131
 4894 00c6 05       		.byte	0x5
 4895 00c7 24       		.byte	0x24
 4896 00c8 62000000 		.4byte	0x62
 4897 00cc 02       		.uleb128 0x2
 4898 00cd 95900000 		.4byte	.LASF1132
 4899 00d1 05       		.byte	0x5
 4900 00d2 30       		.byte	0x30
 4901 00d3 7B000000 		.4byte	0x7b
 4902 00d7 02       		.uleb128 0x2
 4903 00d8 2D150000 		.4byte	.LASF1133
 4904 00dc 06       		.byte	0x6
 4905 00dd 49       		.byte	0x49
 4906 00de E2000000 		.4byte	0xe2
 4907 00e2 06       		.uleb128 0x6
 4908 00e3 04       		.byte	0x4
 4909 00e4 E8000000 		.4byte	0xe8
 4910 00e8 08       		.uleb128 0x8
 4911 00e9 F3000000 		.4byte	0xf3
 4912 00ed 09       		.uleb128 0x9
 4913 00ee A2000000 		.4byte	0xa2
 4914 00f2 00       		.byte	0
 4915 00f3 02       		.uleb128 0x2
 4916 00f4 51950000 		.4byte	.LASF1134
 4917 00f8 02       		.byte	0x2
 4918 00f9 5E       		.byte	0x5e
 4919 00fa CC000000 		.4byte	0xcc
 4920 00fe 02       		.uleb128 0x2
 4921 00ff D83E0000 		.4byte	.LASF1135
 4922 0103 02       		.byte	0x2
 4923 0104 60       		.byte	0x60
 4924 0105 74000000 		.4byte	0x74
 4925 0109 02       		.uleb128 0x2
 4926 010a EC330000 		.4byte	.LASF1136
 4927 010e 02       		.byte	0x2
 4928 010f 62       		.byte	0x62
 4929 0110 86000000 		.4byte	0x86
 4930 0114 02       		.uleb128 0x2
 4931 0115 36710000 		.4byte	.LASF1137
 4932 0119 02       		.byte	0x2
 4933 011a 68       		.byte	0x68
 4934 011b CC000000 		.4byte	0xcc
 4935 011f 02       		.uleb128 0x2
 4936 0120 FE880000 		.4byte	.LASF1138
 4937 0124 02       		.byte	0x2
 4938 0125 69       		.byte	0x69
 4939 0126 CC000000 		.4byte	0xcc
 4940 012a 06       		.uleb128 0x6
 4941 012b 04       		.byte	0x4
 4942 012c B6000000 		.4byte	0xb6
 4943 0130 0A       		.uleb128 0xa
 4944 0131 25510000 		.4byte	.LASF1145
 4945 0135 14       		.byte	0x14
 4946 0136 07       		.byte	0x7
 4947 0137 88       		.byte	0x88
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 155


 4948 0138 79010000 		.4byte	0x179
 4949 013c 0B       		.uleb128 0xb
 4950 013d BF9E0000 		.4byte	.LASF1139
 4951 0141 07       		.byte	0x7
 4952 0142 8A       		.byte	0x8a
 4953 0143 1F010000 		.4byte	0x11f
 4954 0147 00       		.byte	0
 4955 0148 0B       		.uleb128 0xb
 4956 0149 560F0000 		.4byte	.LASF1140
 4957 014d 07       		.byte	0x7
 4958 014e 8B       		.byte	0x8b
 4959 014f 79010000 		.4byte	0x179
 4960 0153 04       		.byte	0x4
 4961 0154 0B       		.uleb128 0xb
 4962 0155 AF6F0000 		.4byte	.LASF1141
 4963 0159 07       		.byte	0x7
 4964 015a 8C       		.byte	0x8c
 4965 015b 79010000 		.4byte	0x179
 4966 015f 08       		.byte	0x8
 4967 0160 0B       		.uleb128 0xb
 4968 0161 304C0000 		.4byte	.LASF1142
 4969 0165 07       		.byte	0x7
 4970 0166 8D       		.byte	0x8d
 4971 0167 A2000000 		.4byte	0xa2
 4972 016b 0C       		.byte	0xc
 4973 016c 0B       		.uleb128 0xb
 4974 016d 862E0000 		.4byte	.LASF1143
 4975 0171 07       		.byte	0x7
 4976 0172 8E       		.byte	0x8e
 4977 0173 A2000000 		.4byte	0xa2
 4978 0177 10       		.byte	0x10
 4979 0178 00       		.byte	0
 4980 0179 06       		.uleb128 0x6
 4981 017a 04       		.byte	0x4
 4982 017b 30010000 		.4byte	0x130
 4983 017f 02       		.uleb128 0x2
 4984 0180 F3880000 		.4byte	.LASF1144
 4985 0184 07       		.byte	0x7
 4986 0185 90       		.byte	0x90
 4987 0186 30010000 		.4byte	0x130
 4988 018a 0A       		.uleb128 0xa
 4989 018b 2D290000 		.4byte	.LASF1146
 4990 018f 0C       		.byte	0xc
 4991 0190 07       		.byte	0x7
 4992 0191 92       		.byte	0x92
 4993 0192 BB010000 		.4byte	0x1bb
 4994 0196 0B       		.uleb128 0xb
 4995 0197 BF9E0000 		.4byte	.LASF1139
 4996 019b 07       		.byte	0x7
 4997 019c 94       		.byte	0x94
 4998 019d 1F010000 		.4byte	0x11f
 4999 01a1 00       		.byte	0
 5000 01a2 0B       		.uleb128 0xb
 5001 01a3 560F0000 		.4byte	.LASF1140
 5002 01a7 07       		.byte	0x7
 5003 01a8 95       		.byte	0x95
 5004 01a9 79010000 		.4byte	0x179
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 156


 5005 01ad 04       		.byte	0x4
 5006 01ae 0B       		.uleb128 0xb
 5007 01af AF6F0000 		.4byte	.LASF1141
 5008 01b3 07       		.byte	0x7
 5009 01b4 96       		.byte	0x96
 5010 01b5 79010000 		.4byte	0x179
 5011 01b9 08       		.byte	0x8
 5012 01ba 00       		.byte	0
 5013 01bb 02       		.uleb128 0x2
 5014 01bc 75420000 		.4byte	.LASF1147
 5015 01c0 07       		.byte	0x7
 5016 01c1 98       		.byte	0x98
 5017 01c2 8A010000 		.4byte	0x18a
 5018 01c6 0A       		.uleb128 0xa
 5019 01c7 C97C0000 		.4byte	.LASF1148
 5020 01cb 14       		.byte	0x14
 5021 01cc 07       		.byte	0x7
 5022 01cd 9D       		.byte	0x9d
 5023 01ce F7010000 		.4byte	0x1f7
 5024 01d2 0B       		.uleb128 0xb
 5025 01d3 A9570000 		.4byte	.LASF1149
 5026 01d7 07       		.byte	0x7
 5027 01d8 9F       		.byte	0x9f
 5028 01d9 09010000 		.4byte	0x109
 5029 01dd 00       		.byte	0
 5030 01de 0B       		.uleb128 0xb
 5031 01df A9250000 		.4byte	.LASF1150
 5032 01e3 07       		.byte	0x7
 5033 01e4 A0       		.byte	0xa0
 5034 01e5 F7010000 		.4byte	0x1f7
 5035 01e9 04       		.byte	0x4
 5036 01ea 0B       		.uleb128 0xb
 5037 01eb 5B600000 		.4byte	.LASF1151
 5038 01ef 07       		.byte	0x7
 5039 01f0 A1       		.byte	0xa1
 5040 01f1 BB010000 		.4byte	0x1bb
 5041 01f5 08       		.byte	0x8
 5042 01f6 00       		.byte	0
 5043 01f7 06       		.uleb128 0x6
 5044 01f8 04       		.byte	0x4
 5045 01f9 7F010000 		.4byte	0x17f
 5046 01fd 02       		.uleb128 0x2
 5047 01fe 525D0000 		.4byte	.LASF1152
 5048 0202 07       		.byte	0x7
 5049 0203 A2       		.byte	0xa2
 5050 0204 C6010000 		.4byte	0x1c6
 5051 0208 02       		.uleb128 0x2
 5052 0209 285A0000 		.4byte	.LASF1153
 5053 020d 08       		.byte	0x8
 5054 020e 63       		.byte	0x63
 5055 020f A2000000 		.4byte	0xa2
 5056 0213 0C       		.uleb128 0xc
 5057 0214 01       		.byte	0x1
 5058 0215 54000000 		.4byte	0x54
 5059 0219 08       		.byte	0x8
 5060 021a 6D       		.byte	0x6d
 5061 021b 3E020000 		.4byte	0x23e
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 157


 5062 021f 0D       		.uleb128 0xd
 5063 0220 BC530000 		.4byte	.LASF1154
 5064 0224 00       		.byte	0
 5065 0225 0D       		.uleb128 0xd
 5066 0226 393F0000 		.4byte	.LASF1155
 5067 022a 01       		.byte	0x1
 5068 022b 0D       		.uleb128 0xd
 5069 022c 39610000 		.4byte	.LASF1156
 5070 0230 02       		.byte	0x2
 5071 0231 0D       		.uleb128 0xd
 5072 0232 9D1C0000 		.4byte	.LASF1157
 5073 0236 03       		.byte	0x3
 5074 0237 0D       		.uleb128 0xd
 5075 0238 B2080000 		.4byte	.LASF1158
 5076 023c 04       		.byte	0x4
 5077 023d 00       		.byte	0
 5078 023e 02       		.uleb128 0x2
 5079 023f FA040000 		.4byte	.LASF1159
 5080 0243 08       		.byte	0x8
 5081 0244 73       		.byte	0x73
 5082 0245 13020000 		.4byte	0x213
 5083 0249 0A       		.uleb128 0xa
 5084 024a E2060000 		.4byte	.LASF1160
 5085 024e 08       		.byte	0x8
 5086 024f 08       		.byte	0x8
 5087 0250 78       		.byte	0x78
 5088 0251 6E020000 		.4byte	0x26e
 5089 0255 0B       		.uleb128 0xb
 5090 0256 C53D0000 		.4byte	.LASF1161
 5091 025a 08       		.byte	0x8
 5092 025b 7A       		.byte	0x7a
 5093 025c FE000000 		.4byte	0xfe
 5094 0260 00       		.byte	0
 5095 0261 0B       		.uleb128 0xb
 5096 0262 62240000 		.4byte	.LASF1162
 5097 0266 08       		.byte	0x8
 5098 0267 7B       		.byte	0x7b
 5099 0268 1F010000 		.4byte	0x11f
 5100 026c 04       		.byte	0x4
 5101 026d 00       		.byte	0
 5102 026e 02       		.uleb128 0x2
 5103 026f 5B2C0000 		.4byte	.LASF1163
 5104 0273 08       		.byte	0x8
 5105 0274 7C       		.byte	0x7c
 5106 0275 49020000 		.4byte	0x249
 5107 0279 0A       		.uleb128 0xa
 5108 027a 79850000 		.4byte	.LASF1164
 5109 027e 0C       		.byte	0xc
 5110 027f 08       		.byte	0x8
 5111 0280 81       		.byte	0x81
 5112 0281 AA020000 		.4byte	0x2aa
 5113 0285 0B       		.uleb128 0xb
 5114 0286 5F4B0000 		.4byte	.LASF1165
 5115 028a 08       		.byte	0x8
 5116 028b 83       		.byte	0x83
 5117 028c A2000000 		.4byte	0xa2
 5118 0290 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 158


 5119 0291 0B       		.uleb128 0xb
 5120 0292 67520000 		.4byte	.LASF1166
 5121 0296 08       		.byte	0x8
 5122 0297 84       		.byte	0x84
 5123 0298 CC000000 		.4byte	0xcc
 5124 029c 04       		.byte	0x4
 5125 029d 0B       		.uleb128 0xb
 5126 029e 30990000 		.4byte	.LASF1167
 5127 02a2 08       		.byte	0x8
 5128 02a3 85       		.byte	0x85
 5129 02a4 CC000000 		.4byte	0xcc
 5130 02a8 08       		.byte	0x8
 5131 02a9 00       		.byte	0
 5132 02aa 02       		.uleb128 0x2
 5133 02ab 3A040000 		.4byte	.LASF1168
 5134 02af 08       		.byte	0x8
 5135 02b0 86       		.byte	0x86
 5136 02b1 79020000 		.4byte	0x279
 5137 02b5 07       		.uleb128 0x7
 5138 02b6 AB000000 		.4byte	0xab
 5139 02ba 06       		.uleb128 0x6
 5140 02bb 04       		.byte	0x4
 5141 02bc F3000000 		.4byte	0xf3
 5142 02c0 0A       		.uleb128 0xa
 5143 02c1 DF410000 		.4byte	.LASF1169
 5144 02c5 20       		.byte	0x20
 5145 02c6 08       		.byte	0x8
 5146 02c7 98       		.byte	0x98
 5147 02c8 2D030000 		.4byte	0x32d
 5148 02cc 0B       		.uleb128 0xb
 5149 02cd FC090000 		.4byte	.LASF1170
 5150 02d1 08       		.byte	0x8
 5151 02d2 9A       		.byte	0x9a
 5152 02d3 08020000 		.4byte	0x208
 5153 02d7 00       		.byte	0
 5154 02d8 0B       		.uleb128 0xb
 5155 02d9 BE650000 		.4byte	.LASF1171
 5156 02dd 08       		.byte	0x8
 5157 02de 9B       		.byte	0x9b
 5158 02df AB000000 		.4byte	0xab
 5159 02e3 04       		.byte	0x4
 5160 02e4 0B       		.uleb128 0xb
 5161 02e5 33640000 		.4byte	.LASF1172
 5162 02e9 08       		.byte	0x8
 5163 02ea 9C       		.byte	0x9c
 5164 02eb 09010000 		.4byte	0x109
 5165 02ef 08       		.byte	0x8
 5166 02f0 0B       		.uleb128 0xb
 5167 02f1 A0780000 		.4byte	.LASF1173
 5168 02f5 08       		.byte	0x8
 5169 02f6 9D       		.byte	0x9d
 5170 02f7 3E020000 		.4byte	0x23e
 5171 02fb 0C       		.byte	0xc
 5172 02fc 0B       		.uleb128 0xb
 5173 02fd DE120000 		.4byte	.LASF1174
 5174 0301 08       		.byte	0x8
 5175 0302 9E       		.byte	0x9e
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 159


 5176 0303 09010000 		.4byte	0x109
 5177 0307 10       		.byte	0x10
 5178 0308 0B       		.uleb128 0xb
 5179 0309 90110000 		.4byte	.LASF1175
 5180 030d 08       		.byte	0x8
 5181 030e 9F       		.byte	0x9f
 5182 030f 09010000 		.4byte	0x109
 5183 0313 14       		.byte	0x14
 5184 0314 0B       		.uleb128 0xb
 5185 0315 C6160000 		.4byte	.LASF1176
 5186 0319 08       		.byte	0x8
 5187 031a A0       		.byte	0xa0
 5188 031b CC000000 		.4byte	0xcc
 5189 031f 18       		.byte	0x18
 5190 0320 0B       		.uleb128 0xb
 5191 0321 64620000 		.4byte	.LASF1177
 5192 0325 08       		.byte	0x8
 5193 0326 A1       		.byte	0xa1
 5194 0327 C1000000 		.4byte	0xc1
 5195 032b 1C       		.byte	0x1c
 5196 032c 00       		.byte	0
 5197 032d 02       		.uleb128 0x2
 5198 032e 2B0E0000 		.4byte	.LASF1178
 5199 0332 08       		.byte	0x8
 5200 0333 A2       		.byte	0xa2
 5201 0334 C0020000 		.4byte	0x2c0
 5202 0338 0A       		.uleb128 0xa
 5203 0339 84670000 		.4byte	.LASF1179
 5204 033d 50       		.byte	0x50
 5205 033e 01       		.byte	0x1
 5206 033f 78       		.byte	0x78
 5207 0340 BD030000 		.4byte	0x3bd
 5208 0344 0B       		.uleb128 0xb
 5209 0345 B1250000 		.4byte	.LASF1180
 5210 0349 01       		.byte	0x1
 5211 034a 7A       		.byte	0x7a
 5212 034b BD030000 		.4byte	0x3bd
 5213 034f 00       		.byte	0
 5214 0350 0B       		.uleb128 0xb
 5215 0351 61930000 		.4byte	.LASF1181
 5216 0355 01       		.byte	0x1
 5217 0356 80       		.byte	0x80
 5218 0357 7F010000 		.4byte	0x17f
 5219 035b 04       		.byte	0x4
 5220 035c 0B       		.uleb128 0xb
 5221 035d A0040000 		.4byte	.LASF1182
 5222 0361 01       		.byte	0x1
 5223 0362 81       		.byte	0x81
 5224 0363 7F010000 		.4byte	0x17f
 5225 0367 18       		.byte	0x18
 5226 0368 0B       		.uleb128 0xb
 5227 0369 F79E0000 		.4byte	.LASF1183
 5228 036d 01       		.byte	0x1
 5229 036e 82       		.byte	0x82
 5230 036f 09010000 		.4byte	0x109
 5231 0373 2C       		.byte	0x2c
 5232 0374 0B       		.uleb128 0xb
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 160


 5233 0375 17090000 		.4byte	.LASF1184
 5234 0379 01       		.byte	0x1
 5235 037a 83       		.byte	0x83
 5236 037b BA020000 		.4byte	0x2ba
 5237 037f 30       		.byte	0x30
 5238 0380 0B       		.uleb128 0xb
 5239 0381 BE650000 		.4byte	.LASF1171
 5240 0385 01       		.byte	0x1
 5241 0386 84       		.byte	0x84
 5242 0387 C8030000 		.4byte	0x3c8
 5243 038b 34       		.byte	0x34
 5244 038c 0B       		.uleb128 0xb
 5245 038d 908B0000 		.4byte	.LASF1185
 5246 0391 01       		.byte	0x1
 5247 0392 8F       		.byte	0x8f
 5248 0393 09010000 		.4byte	0x109
 5249 0397 40       		.byte	0x40
 5250 0398 0B       		.uleb128 0xb
 5251 0399 8C070000 		.4byte	.LASF1186
 5252 039d 01       		.byte	0x1
 5253 039e 90       		.byte	0x90
 5254 039f 09010000 		.4byte	0x109
 5255 03a3 44       		.byte	0x44
 5256 03a4 0B       		.uleb128 0xb
 5257 03a5 90110000 		.4byte	.LASF1175
 5258 03a9 01       		.byte	0x1
 5259 03aa 94       		.byte	0x94
 5260 03ab 09010000 		.4byte	0x109
 5261 03af 48       		.byte	0x48
 5262 03b0 0B       		.uleb128 0xb
 5263 03b1 10590000 		.4byte	.LASF1187
 5264 03b5 01       		.byte	0x1
 5265 03b6 95       		.byte	0x95
 5266 03b7 09010000 		.4byte	0x109
 5267 03bb 4C       		.byte	0x4c
 5268 03bc 00       		.byte	0
 5269 03bd 06       		.uleb128 0x6
 5270 03be 04       		.byte	0x4
 5271 03bf C3030000 		.4byte	0x3c3
 5272 03c3 0E       		.uleb128 0xe
 5273 03c4 F3000000 		.4byte	0xf3
 5274 03c8 0F       		.uleb128 0xf
 5275 03c9 A4000000 		.4byte	0xa4
 5276 03cd D8030000 		.4byte	0x3d8
 5277 03d1 10       		.uleb128 0x10
 5278 03d2 9B000000 		.4byte	0x9b
 5279 03d6 0B       		.byte	0xb
 5280 03d7 00       		.byte	0
 5281 03d8 02       		.uleb128 0x2
 5282 03d9 DB110000 		.4byte	.LASF1188
 5283 03dd 01       		.byte	0x1
 5284 03de AB       		.byte	0xab
 5285 03df 38030000 		.4byte	0x338
 5286 03e3 02       		.uleb128 0x2
 5287 03e4 A78B0000 		.4byte	.LASF1189
 5288 03e8 01       		.byte	0x1
 5289 03e9 AF       		.byte	0xaf
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 161


 5290 03ea D8030000 		.4byte	0x3d8
 5291 03ee 11       		.uleb128 0x11
 5292 03ef 66340000 		.4byte	.LASF1309
 5293 03f3 02       		.byte	0x2
 5294 03f4 A1       		.byte	0xa1
 5295 03f5 B6000000 		.4byte	0xb6
 5296 03f9 03       		.byte	0x3
 5297 03fa 15040000 		.4byte	0x415
 5298 03fe 12       		.uleb128 0x12
 5299 03ff 57940000 		.4byte	.LASF1310
 5300 0403 02       		.byte	0x2
 5301 0404 A1       		.byte	0xa1
 5302 0405 CC000000 		.4byte	0xcc
 5303 0409 13       		.uleb128 0x13
 5304 040a CB3F0000 		.4byte	.LASF1311
 5305 040e 02       		.byte	0x2
 5306 040f A3       		.byte	0xa3
 5307 0410 B6000000 		.4byte	0xb6
 5308 0414 00       		.byte	0
 5309 0415 14       		.uleb128 0x14
 5310 0416 2D790000 		.4byte	.LASF1211
 5311 041a 01       		.byte	0x1
 5312 041b 0402     		.2byte	0x204
 5313 041d FE000000 		.4byte	0xfe
 5314 0421 00000000 		.4byte	.LFB1
 5315 0425 64010000 		.4byte	.LFE1-.LFB1
 5316 0429 01       		.uleb128 0x1
 5317 042a 9C       		.byte	0x9c
 5318 042b DF040000 		.4byte	0x4df
 5319 042f 15       		.uleb128 0x15
 5320 0430 F6280000 		.4byte	.LASF1190
 5321 0434 01       		.byte	0x1
 5322 0435 0402     		.2byte	0x204
 5323 0437 D7000000 		.4byte	0xd7
 5324 043b 02       		.uleb128 0x2
 5325 043c 91       		.byte	0x91
 5326 043d 64       		.sleb128 -28
 5327 043e 15       		.uleb128 0x15
 5328 043f C61A0000 		.4byte	.LASF1191
 5329 0443 01       		.byte	0x1
 5330 0444 0402     		.2byte	0x204
 5331 0446 B5020000 		.4byte	0x2b5
 5332 044a 02       		.uleb128 0x2
 5333 044b 91       		.byte	0x91
 5334 044c 60       		.sleb128 -32
 5335 044d 15       		.uleb128 0x15
 5336 044e BC020000 		.4byte	.LASF1192
 5337 0452 01       		.byte	0x1
 5338 0453 0402     		.2byte	0x204
 5339 0455 DF040000 		.4byte	0x4df
 5340 0459 02       		.uleb128 0x2
 5341 045a 91       		.byte	0x91
 5342 045b 5E       		.sleb128 -34
 5343 045c 15       		.uleb128 0x15
 5344 045d 2F8E0000 		.4byte	.LASF1193
 5345 0461 01       		.byte	0x1
 5346 0462 0402     		.2byte	0x204
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 162


 5347 0464 E4040000 		.4byte	0x4e4
 5348 0468 02       		.uleb128 0x2
 5349 0469 91       		.byte	0x91
 5350 046a 58       		.sleb128 -40
 5351 046b 15       		.uleb128 0x15
 5352 046c F79E0000 		.4byte	.LASF1183
 5353 0470 01       		.byte	0x1
 5354 0471 0402     		.2byte	0x204
 5355 0473 09010000 		.4byte	0x109
 5356 0477 02       		.uleb128 0x2
 5357 0478 91       		.byte	0x91
 5358 0479 00       		.sleb128 0
 5359 047a 15       		.uleb128 0x15
 5360 047b 39390000 		.4byte	.LASF1194
 5361 047f 01       		.byte	0x1
 5362 0480 0402     		.2byte	0x204
 5363 0482 EF040000 		.4byte	0x4ef
 5364 0486 02       		.uleb128 0x2
 5365 0487 91       		.byte	0x91
 5366 0488 04       		.sleb128 4
 5367 0489 15       		.uleb128 0x15
 5368 048a 1E790000 		.4byte	.LASF1195
 5369 048e 01       		.byte	0x1
 5370 048f 0402     		.2byte	0x204
 5371 0491 F4040000 		.4byte	0x4f4
 5372 0495 02       		.uleb128 0x2
 5373 0496 91       		.byte	0x91
 5374 0497 08       		.sleb128 8
 5375 0498 15       		.uleb128 0x15
 5376 0499 10910000 		.4byte	.LASF1196
 5377 049d 01       		.byte	0x1
 5378 049e 0402     		.2byte	0x204
 5379 04a0 04050000 		.4byte	0x504
 5380 04a4 02       		.uleb128 0x2
 5381 04a5 91       		.byte	0x91
 5382 04a6 0C       		.sleb128 12
 5383 04a7 16       		.uleb128 0x16
 5384 04a8 24210000 		.4byte	.LASF1197
 5385 04ac 01       		.byte	0x1
 5386 04ad 0602     		.2byte	0x206
 5387 04af FE000000 		.4byte	0xfe
 5388 04b3 02       		.uleb128 0x2
 5389 04b4 91       		.byte	0x91
 5390 04b5 74       		.sleb128 -12
 5391 04b6 16       		.uleb128 0x16
 5392 04b7 11100000 		.4byte	.LASF1198
 5393 04bb 01       		.byte	0x1
 5394 04bc 0702     		.2byte	0x207
 5395 04be 09050000 		.4byte	0x509
 5396 04c2 02       		.uleb128 0x2
 5397 04c3 91       		.byte	0x91
 5398 04c4 70       		.sleb128 -16
 5399 04c5 17       		.uleb128 0x17
 5400 04c6 3A000000 		.4byte	.LBB6
 5401 04ca E2000000 		.4byte	.LBE6-.LBB6
 5402 04ce 16       		.uleb128 0x16
 5403 04cf B1250000 		.4byte	.LASF1180
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 163


 5404 04d3 01       		.byte	0x1
 5405 04d4 1202     		.2byte	0x212
 5406 04d6 BA020000 		.4byte	0x2ba
 5407 04da 02       		.uleb128 0x2
 5408 04db 91       		.byte	0x91
 5409 04dc 6C       		.sleb128 -20
 5410 04dd 00       		.byte	0
 5411 04de 00       		.byte	0
 5412 04df 07       		.uleb128 0x7
 5413 04e0 C1000000 		.4byte	0xc1
 5414 04e4 07       		.uleb128 0x7
 5415 04e5 A2000000 		.4byte	0xa2
 5416 04e9 06       		.uleb128 0x6
 5417 04ea 04       		.byte	0x4
 5418 04eb 08020000 		.4byte	0x208
 5419 04ef 07       		.uleb128 0x7
 5420 04f0 E9040000 		.4byte	0x4e9
 5421 04f4 07       		.uleb128 0x7
 5422 04f5 BA020000 		.4byte	0x2ba
 5423 04f9 06       		.uleb128 0x6
 5424 04fa 04       		.byte	0x4
 5425 04fb FF040000 		.4byte	0x4ff
 5426 04ff 07       		.uleb128 0x7
 5427 0500 AA020000 		.4byte	0x2aa
 5428 0504 07       		.uleb128 0x7
 5429 0505 F9040000 		.4byte	0x4f9
 5430 0509 06       		.uleb128 0x6
 5431 050a 04       		.byte	0x4
 5432 050b E3030000 		.4byte	0x3e3
 5433 050f 18       		.uleb128 0x18
 5434 0510 492E0000 		.4byte	.LASF1201
 5435 0514 01       		.byte	0x1
 5436 0515 B802     		.2byte	0x2b8
 5437 0517 00000000 		.4byte	.LFB2
 5438 051b E8000000 		.4byte	.LFE2-.LFB2
 5439 051f 01       		.uleb128 0x1
 5440 0520 9C       		.byte	0x9c
 5441 0521 44050000 		.4byte	0x544
 5442 0525 15       		.uleb128 0x15
 5443 0526 9C940000 		.4byte	.LASF1199
 5444 052a 01       		.byte	0x1
 5445 052b B802     		.2byte	0x2b8
 5446 052d 08020000 		.4byte	0x208
 5447 0531 02       		.uleb128 0x2
 5448 0532 91       		.byte	0x91
 5449 0533 6C       		.sleb128 -20
 5450 0534 16       		.uleb128 0x16
 5451 0535 DE9E0000 		.4byte	.LASF1200
 5452 0539 01       		.byte	0x1
 5453 053a BA02     		.2byte	0x2ba
 5454 053c 09050000 		.4byte	0x509
 5455 0540 02       		.uleb128 0x2
 5456 0541 91       		.byte	0x91
 5457 0542 74       		.sleb128 -12
 5458 0543 00       		.byte	0
 5459 0544 18       		.uleb128 0x18
 5460 0545 20700000 		.4byte	.LASF1202
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 164


 5461 0549 01       		.byte	0x1
 5462 054a 0A03     		.2byte	0x30a
 5463 054c 00000000 		.4byte	.LFB3
 5464 0550 E4000000 		.4byte	.LFE3-.LFB3
 5465 0554 01       		.uleb128 0x1
 5466 0555 9C       		.byte	0x9c
 5467 0556 BF050000 		.4byte	0x5bf
 5468 055a 15       		.uleb128 0x15
 5469 055b 39730000 		.4byte	.LASF1203
 5470 055f 01       		.byte	0x1
 5471 0560 0A03     		.2byte	0x30a
 5472 0562 C5050000 		.4byte	0x5c5
 5473 0566 02       		.uleb128 0x2
 5474 0567 91       		.byte	0x91
 5475 0568 64       		.sleb128 -28
 5476 0569 15       		.uleb128 0x15
 5477 056a 98670000 		.4byte	.LASF1204
 5478 056e 01       		.byte	0x1
 5479 056f 0A03     		.2byte	0x30a
 5480 0571 CA050000 		.4byte	0x5ca
 5481 0575 02       		.uleb128 0x2
 5482 0576 91       		.byte	0x91
 5483 0577 60       		.sleb128 -32
 5484 0578 16       		.uleb128 0x16
 5485 0579 23550000 		.4byte	.LASF1205
 5486 057d 01       		.byte	0x1
 5487 057e 0C03     		.2byte	0x30c
 5488 0580 1F010000 		.4byte	0x11f
 5489 0584 02       		.uleb128 0x2
 5490 0585 91       		.byte	0x91
 5491 0586 6C       		.sleb128 -20
 5492 0587 16       		.uleb128 0x16
 5493 0588 FF750000 		.4byte	.LASF1206
 5494 058c 01       		.byte	0x1
 5495 058d 0D03     		.2byte	0x30d
 5496 058f FE000000 		.4byte	0xfe
 5497 0593 02       		.uleb128 0x2
 5498 0594 91       		.byte	0x91
 5499 0595 68       		.sleb128 -24
 5500 0596 16       		.uleb128 0x16
 5501 0597 AB620000 		.4byte	.LASF1207
 5502 059b 01       		.byte	0x1
 5503 059c 0D03     		.2byte	0x30d
 5504 059e FE000000 		.4byte	0xfe
 5505 05a2 02       		.uleb128 0x2
 5506 05a3 91       		.byte	0x91
 5507 05a4 74       		.sleb128 -12
 5508 05a5 17       		.uleb128 0x17
 5509 05a6 38000000 		.4byte	.LBB7
 5510 05aa 84000000 		.4byte	.LBE7-.LBB7
 5511 05ae 16       		.uleb128 0x16
 5512 05af D2600000 		.4byte	.LASF1208
 5513 05b3 01       		.byte	0x1
 5514 05b4 1703     		.2byte	0x317
 5515 05b6 CA050000 		.4byte	0x5ca
 5516 05ba 02       		.uleb128 0x2
 5517 05bb 91       		.byte	0x91
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 165


 5518 05bc 70       		.sleb128 -16
 5519 05bd 00       		.byte	0
 5520 05be 00       		.byte	0
 5521 05bf 06       		.uleb128 0x6
 5522 05c0 04       		.byte	0x4
 5523 05c1 1F010000 		.4byte	0x11f
 5524 05c5 07       		.uleb128 0x7
 5525 05c6 BF050000 		.4byte	0x5bf
 5526 05ca 07       		.uleb128 0x7
 5527 05cb 1F010000 		.4byte	0x11f
 5528 05cf 18       		.uleb128 0x18
 5529 05d0 E5670000 		.4byte	.LASF1209
 5530 05d4 01       		.byte	0x1
 5531 05d5 6A03     		.2byte	0x36a
 5532 05d7 00000000 		.4byte	.LFB4
 5533 05db 88000000 		.4byte	.LFE4-.LFB4
 5534 05df 01       		.uleb128 0x1
 5535 05e0 9C       		.byte	0x9c
 5536 05e1 13060000 		.4byte	0x613
 5537 05e5 15       		.uleb128 0x15
 5538 05e6 B68C0000 		.4byte	.LASF1210
 5539 05ea 01       		.byte	0x1
 5540 05eb 6A03     		.2byte	0x36a
 5541 05ed CA050000 		.4byte	0x5ca
 5542 05f1 02       		.uleb128 0x2
 5543 05f2 91       		.byte	0x91
 5544 05f3 6C       		.sleb128 -20
 5545 05f4 16       		.uleb128 0x16
 5546 05f5 23550000 		.4byte	.LASF1205
 5547 05f9 01       		.byte	0x1
 5548 05fa 6C03     		.2byte	0x36c
 5549 05fc 1F010000 		.4byte	0x11f
 5550 0600 02       		.uleb128 0x2
 5551 0601 91       		.byte	0x91
 5552 0602 70       		.sleb128 -16
 5553 0603 16       		.uleb128 0x16
 5554 0604 FF750000 		.4byte	.LASF1206
 5555 0608 01       		.byte	0x1
 5556 0609 6D03     		.2byte	0x36d
 5557 060b FE000000 		.4byte	0xfe
 5558 060f 02       		.uleb128 0x2
 5559 0610 91       		.byte	0x91
 5560 0611 74       		.sleb128 -12
 5561 0612 00       		.byte	0
 5562 0613 14       		.uleb128 0x14
 5563 0614 52620000 		.4byte	.LASF1212
 5564 0618 01       		.byte	0x1
 5565 0619 F203     		.2byte	0x3f2
 5566 061b 09010000 		.4byte	0x109
 5567 061f 00000000 		.4byte	.LFB5
 5568 0623 34000000 		.4byte	.LFE5-.LFB5
 5569 0627 01       		.uleb128 0x1
 5570 0628 9C       		.byte	0x9c
 5571 0629 5B060000 		.4byte	0x65b
 5572 062d 15       		.uleb128 0x15
 5573 062e DC8E0000 		.4byte	.LASF1213
 5574 0632 01       		.byte	0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 166


 5575 0633 F203     		.2byte	0x3f2
 5576 0635 08020000 		.4byte	0x208
 5577 0639 02       		.uleb128 0x2
 5578 063a 91       		.byte	0x91
 5579 063b 6C       		.sleb128 -20
 5580 063c 16       		.uleb128 0x16
 5581 063d DE9E0000 		.4byte	.LASF1200
 5582 0641 01       		.byte	0x1
 5583 0642 F403     		.2byte	0x3f4
 5584 0644 09050000 		.4byte	0x509
 5585 0648 02       		.uleb128 0x2
 5586 0649 91       		.byte	0x91
 5587 064a 74       		.sleb128 -12
 5588 064b 16       		.uleb128 0x16
 5589 064c 200F0000 		.4byte	.LASF1214
 5590 0650 01       		.byte	0x1
 5591 0651 F503     		.2byte	0x3f5
 5592 0653 09010000 		.4byte	0x109
 5593 0657 02       		.uleb128 0x2
 5594 0658 91       		.byte	0x91
 5595 0659 70       		.sleb128 -16
 5596 065a 00       		.byte	0
 5597 065b 18       		.uleb128 0x18
 5598 065c 1E7F0000 		.4byte	.LASF1215
 5599 0660 01       		.byte	0x1
 5600 0661 0804     		.2byte	0x408
 5601 0663 00000000 		.4byte	.LFB6
 5602 0667 3C010000 		.4byte	.LFE6-.LFB6
 5603 066b 01       		.uleb128 0x1
 5604 066c 9C       		.byte	0x9c
 5605 066d CC060000 		.4byte	0x6cc
 5606 0671 15       		.uleb128 0x15
 5607 0672 DC8E0000 		.4byte	.LASF1213
 5608 0676 01       		.byte	0x1
 5609 0677 0804     		.2byte	0x408
 5610 0679 08020000 		.4byte	0x208
 5611 067d 02       		.uleb128 0x2
 5612 067e 91       		.byte	0x91
 5613 067f 64       		.sleb128 -28
 5614 0680 15       		.uleb128 0x15
 5615 0681 9D6B0000 		.4byte	.LASF1216
 5616 0685 01       		.byte	0x1
 5617 0686 0804     		.2byte	0x408
 5618 0688 09010000 		.4byte	0x109
 5619 068c 02       		.uleb128 0x2
 5620 068d 91       		.byte	0x91
 5621 068e 60       		.sleb128 -32
 5622 068f 16       		.uleb128 0x16
 5623 0690 DE9E0000 		.4byte	.LASF1200
 5624 0694 01       		.byte	0x1
 5625 0695 0A04     		.2byte	0x40a
 5626 0697 09050000 		.4byte	0x509
 5627 069b 02       		.uleb128 0x2
 5628 069c 91       		.byte	0x91
 5629 069d 70       		.sleb128 -16
 5630 069e 16       		.uleb128 0x16
 5631 069f 128C0000 		.4byte	.LASF1217
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 167


 5632 06a3 01       		.byte	0x1
 5633 06a4 0B04     		.2byte	0x40b
 5634 06a6 09010000 		.4byte	0x109
 5635 06aa 02       		.uleb128 0x2
 5636 06ab 91       		.byte	0x91
 5637 06ac 6C       		.sleb128 -20
 5638 06ad 16       		.uleb128 0x16
 5639 06ae 5A650000 		.4byte	.LASF1218
 5640 06b2 01       		.byte	0x1
 5641 06b3 0B04     		.2byte	0x40b
 5642 06b5 09010000 		.4byte	0x109
 5643 06b9 02       		.uleb128 0x2
 5644 06ba 91       		.byte	0x91
 5645 06bb 68       		.sleb128 -24
 5646 06bc 16       		.uleb128 0x16
 5647 06bd 214E0000 		.4byte	.LASF1219
 5648 06c1 01       		.byte	0x1
 5649 06c2 0C04     		.2byte	0x40c
 5650 06c4 FE000000 		.4byte	0xfe
 5651 06c8 02       		.uleb128 0x2
 5652 06c9 91       		.byte	0x91
 5653 06ca 74       		.sleb128 -12
 5654 06cb 00       		.byte	0
 5655 06cc 18       		.uleb128 0x18
 5656 06cd E0640000 		.4byte	.LASF1220
 5657 06d1 01       		.byte	0x1
 5658 06d2 AC04     		.2byte	0x4ac
 5659 06d4 00000000 		.4byte	.LFB7
 5660 06d8 F4000000 		.4byte	.LFE7-.LFB7
 5661 06dc 01       		.uleb128 0x1
 5662 06dd 9C       		.byte	0x9c
 5663 06de 01070000 		.4byte	0x701
 5664 06e2 15       		.uleb128 0x15
 5665 06e3 380E0000 		.4byte	.LASF1221
 5666 06e7 01       		.byte	0x1
 5667 06e8 AC04     		.2byte	0x4ac
 5668 06ea 08020000 		.4byte	0x208
 5669 06ee 02       		.uleb128 0x2
 5670 06ef 91       		.byte	0x91
 5671 06f0 6C       		.sleb128 -20
 5672 06f1 16       		.uleb128 0x16
 5673 06f2 DE9E0000 		.4byte	.LASF1200
 5674 06f6 01       		.byte	0x1
 5675 06f7 AE04     		.2byte	0x4ae
 5676 06f9 09050000 		.4byte	0x509
 5677 06fd 02       		.uleb128 0x2
 5678 06fe 91       		.byte	0x91
 5679 06ff 74       		.sleb128 -12
 5680 0700 00       		.byte	0
 5681 0701 19       		.uleb128 0x19
 5682 0702 88580000 		.4byte	.LASF1267
 5683 0706 01       		.byte	0x1
 5684 0707 0505     		.2byte	0x505
 5685 0709 FE000000 		.4byte	0xfe
 5686 070d 00000000 		.4byte	.LFB8
 5687 0711 64000000 		.4byte	.LFE8-.LFB8
 5688 0715 01       		.uleb128 0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 168


 5689 0716 9C       		.byte	0x9c
 5690 0717 49070000 		.4byte	0x749
 5691 071b 15       		.uleb128 0x15
 5692 071c DC8E0000 		.4byte	.LASF1213
 5693 0720 01       		.byte	0x1
 5694 0721 0505     		.2byte	0x505
 5695 0723 49070000 		.4byte	0x749
 5696 0727 02       		.uleb128 0x2
 5697 0728 91       		.byte	0x91
 5698 0729 6C       		.sleb128 -20
 5699 072a 16       		.uleb128 0x16
 5700 072b 24210000 		.4byte	.LASF1197
 5701 072f 01       		.byte	0x1
 5702 0730 0705     		.2byte	0x507
 5703 0732 FE000000 		.4byte	0xfe
 5704 0736 02       		.uleb128 0x2
 5705 0737 91       		.byte	0x91
 5706 0738 74       		.sleb128 -12
 5707 0739 16       		.uleb128 0x16
 5708 073a DE9E0000 		.4byte	.LASF1200
 5709 073e 01       		.byte	0x1
 5710 073f 0805     		.2byte	0x508
 5711 0741 59070000 		.4byte	0x759
 5712 0745 02       		.uleb128 0x2
 5713 0746 91       		.byte	0x91
 5714 0747 70       		.sleb128 -16
 5715 0748 00       		.byte	0
 5716 0749 07       		.uleb128 0x7
 5717 074a 08020000 		.4byte	0x208
 5718 074e 06       		.uleb128 0x6
 5719 074f 04       		.byte	0x4
 5720 0750 54070000 		.4byte	0x754
 5721 0754 07       		.uleb128 0x7
 5722 0755 E3030000 		.4byte	0x3e3
 5723 0759 07       		.uleb128 0x7
 5724 075a 4E070000 		.4byte	0x74e
 5725 075e 18       		.uleb128 0x18
 5726 075f 45700000 		.4byte	.LASF1222
 5727 0763 01       		.byte	0x1
 5728 0764 3305     		.2byte	0x533
 5729 0766 00000000 		.4byte	.LFB9
 5730 076a 9C000000 		.4byte	.LFE9-.LFB9
 5731 076e 01       		.uleb128 0x1
 5732 076f 9C       		.byte	0x9c
 5733 0770 93070000 		.4byte	0x793
 5734 0774 15       		.uleb128 0x15
 5735 0775 83390000 		.4byte	.LASF1223
 5736 0779 01       		.byte	0x1
 5737 077a 3305     		.2byte	0x533
 5738 077c 08020000 		.4byte	0x208
 5739 0780 02       		.uleb128 0x2
 5740 0781 91       		.byte	0x91
 5741 0782 6C       		.sleb128 -20
 5742 0783 16       		.uleb128 0x16
 5743 0784 DE9E0000 		.4byte	.LASF1200
 5744 0788 01       		.byte	0x1
 5745 0789 3505     		.2byte	0x535
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 169


 5746 078b 93070000 		.4byte	0x793
 5747 078f 02       		.uleb128 0x2
 5748 0790 91       		.byte	0x91
 5749 0791 74       		.sleb128 -12
 5750 0792 00       		.byte	0
 5751 0793 07       		.uleb128 0x7
 5752 0794 09050000 		.4byte	0x509
 5753 0798 14       		.uleb128 0x14
 5754 0799 8D300000 		.4byte	.LASF1224
 5755 079d 01       		.byte	0x1
 5756 079e 6905     		.2byte	0x569
 5757 07a0 FE000000 		.4byte	0xfe
 5758 07a4 00000000 		.4byte	.LFB10
 5759 07a8 B8000000 		.4byte	.LFE10-.LFB10
 5760 07ac 01       		.uleb128 0x1
 5761 07ad 9C       		.byte	0x9c
 5762 07ae EF070000 		.4byte	0x7ef
 5763 07b2 15       		.uleb128 0x15
 5764 07b3 83390000 		.4byte	.LASF1223
 5765 07b7 01       		.byte	0x1
 5766 07b8 6905     		.2byte	0x569
 5767 07ba 08020000 		.4byte	0x208
 5768 07be 02       		.uleb128 0x2
 5769 07bf 91       		.byte	0x91
 5770 07c0 64       		.sleb128 -28
 5771 07c1 16       		.uleb128 0x16
 5772 07c2 214E0000 		.4byte	.LASF1219
 5773 07c6 01       		.byte	0x1
 5774 07c7 6B05     		.2byte	0x56b
 5775 07c9 FE000000 		.4byte	0xfe
 5776 07cd 02       		.uleb128 0x2
 5777 07ce 91       		.byte	0x91
 5778 07cf 74       		.sleb128 -12
 5779 07d0 16       		.uleb128 0x16
 5780 07d1 DE9E0000 		.4byte	.LASF1200
 5781 07d5 01       		.byte	0x1
 5782 07d6 6C05     		.2byte	0x56c
 5783 07d8 93070000 		.4byte	0x793
 5784 07dc 02       		.uleb128 0x2
 5785 07dd 91       		.byte	0x91
 5786 07de 70       		.sleb128 -16
 5787 07df 16       		.uleb128 0x16
 5788 07e0 D84C0000 		.4byte	.LASF1225
 5789 07e4 01       		.byte	0x1
 5790 07e5 6D05     		.2byte	0x56d
 5791 07e7 09010000 		.4byte	0x109
 5792 07eb 02       		.uleb128 0x2
 5793 07ec 91       		.byte	0x91
 5794 07ed 6C       		.sleb128 -20
 5795 07ee 00       		.byte	0
 5796 07ef 18       		.uleb128 0x18
 5797 07f0 91170000 		.4byte	.LASF1226
 5798 07f4 01       		.byte	0x1
 5799 07f5 AF05     		.2byte	0x5af
 5800 07f7 00000000 		.4byte	.LFB11
 5801 07fb 68000000 		.4byte	.LFE11-.LFB11
 5802 07ff 01       		.uleb128 0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 170


 5803 0800 9C       		.byte	0x9c
 5804 0801 15080000 		.4byte	0x815
 5805 0805 16       		.uleb128 0x16
 5806 0806 24210000 		.4byte	.LASF1197
 5807 080a 01       		.byte	0x1
 5808 080b B105     		.2byte	0x5b1
 5809 080d FE000000 		.4byte	0xfe
 5810 0811 02       		.uleb128 0x2
 5811 0812 91       		.byte	0x91
 5812 0813 74       		.sleb128 -12
 5813 0814 00       		.byte	0
 5814 0815 1A       		.uleb128 0x1a
 5815 0816 B0700000 		.4byte	.LASF1227
 5816 081a 01       		.byte	0x1
 5817 081b FD05     		.2byte	0x5fd
 5818 081d 00000000 		.4byte	.LFB12
 5819 0821 1C000000 		.4byte	.LFE12-.LFB12
 5820 0825 01       		.uleb128 0x1
 5821 0826 9C       		.byte	0x9c
 5822 0827 1B       		.uleb128 0x1b
 5823 0828 2E3D0000 		.4byte	.LASF1228
 5824 082c 01       		.byte	0x1
 5825 082d 0806     		.2byte	0x608
 5826 082f 00000000 		.4byte	.LFB13
 5827 0833 1C000000 		.4byte	.LFE13-.LFB13
 5828 0837 01       		.uleb128 0x1
 5829 0838 9C       		.byte	0x9c
 5830 0839 14       		.uleb128 0x14
 5831 083a 385E0000 		.4byte	.LASF1229
 5832 083e 01       		.byte	0x1
 5833 083f 2E06     		.2byte	0x62e
 5834 0841 FE000000 		.4byte	0xfe
 5835 0845 00000000 		.4byte	.LFB14
 5836 0849 08010000 		.4byte	.LFE14-.LFB14
 5837 084d 01       		.uleb128 0x1
 5838 084e 9C       		.byte	0x9c
 5839 084f 72080000 		.4byte	0x872
 5840 0853 16       		.uleb128 0x16
 5841 0854 DE9E0000 		.4byte	.LASF1200
 5842 0858 01       		.byte	0x1
 5843 0859 3006     		.2byte	0x630
 5844 085b 09050000 		.4byte	0x509
 5845 085f 02       		.uleb128 0x2
 5846 0860 91       		.byte	0x91
 5847 0861 70       		.sleb128 -16
 5848 0862 16       		.uleb128 0x16
 5849 0863 FF750000 		.4byte	.LASF1206
 5850 0867 01       		.byte	0x1
 5851 0868 3106     		.2byte	0x631
 5852 086a FE000000 		.4byte	0xfe
 5853 086e 02       		.uleb128 0x2
 5854 086f 91       		.byte	0x91
 5855 0870 74       		.sleb128 -12
 5856 0871 00       		.byte	0
 5857 0872 14       		.uleb128 0x14
 5858 0873 61170000 		.4byte	.LASF1230
 5859 0877 01       		.byte	0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 171


 5860 0878 8B06     		.2byte	0x68b
 5861 087a 1F010000 		.4byte	0x11f
 5862 087e 00000000 		.4byte	.LFB15
 5863 0882 24000000 		.4byte	.LFE15-.LFB15
 5864 0886 01       		.uleb128 0x1
 5865 0887 9C       		.byte	0x9c
 5866 0888 9C080000 		.4byte	0x89c
 5867 088c 16       		.uleb128 0x16
 5868 088d 0F760000 		.4byte	.LASF1231
 5869 0891 01       		.byte	0x1
 5870 0892 8D06     		.2byte	0x68d
 5871 0894 1F010000 		.4byte	0x11f
 5872 0898 02       		.uleb128 0x2
 5873 0899 91       		.byte	0x91
 5874 089a 74       		.sleb128 -12
 5875 089b 00       		.byte	0
 5876 089c 14       		.uleb128 0x14
 5877 089d E5030000 		.4byte	.LASF1232
 5878 08a1 01       		.byte	0x1
 5879 08a2 9A06     		.2byte	0x69a
 5880 08a4 1F010000 		.4byte	0x11f
 5881 08a8 00000000 		.4byte	.LFB16
 5882 08ac 2C000000 		.4byte	.LFE16-.LFB16
 5883 08b0 01       		.uleb128 0x1
 5884 08b1 9C       		.byte	0x9c
 5885 08b2 D5080000 		.4byte	0x8d5
 5886 08b6 16       		.uleb128 0x16
 5887 08b7 24210000 		.4byte	.LASF1197
 5888 08bb 01       		.byte	0x1
 5889 08bc 9C06     		.2byte	0x69c
 5890 08be 1F010000 		.4byte	0x11f
 5891 08c2 02       		.uleb128 0x2
 5892 08c3 91       		.byte	0x91
 5893 08c4 70       		.sleb128 -16
 5894 08c5 16       		.uleb128 0x16
 5895 08c6 D84C0000 		.4byte	.LASF1225
 5896 08ca 01       		.byte	0x1
 5897 08cb 9D06     		.2byte	0x69d
 5898 08cd 09010000 		.4byte	0x109
 5899 08d1 02       		.uleb128 0x2
 5900 08d2 91       		.byte	0x91
 5901 08d3 74       		.sleb128 -12
 5902 08d4 00       		.byte	0
 5903 08d5 1C       		.uleb128 0x1c
 5904 08d6 C50A0000 		.4byte	.LASF1286
 5905 08da 01       		.byte	0x1
 5906 08db B906     		.2byte	0x6b9
 5907 08dd 09010000 		.4byte	0x109
 5908 08e1 00000000 		.4byte	.LFB17
 5909 08e5 14000000 		.4byte	.LFE17-.LFB17
 5910 08e9 01       		.uleb128 0x1
 5911 08ea 9C       		.byte	0x9c
 5912 08eb 14       		.uleb128 0x14
 5913 08ec 498F0000 		.4byte	.LASF1233
 5914 08f0 01       		.byte	0x1
 5915 08f1 D206     		.2byte	0x6d2
 5916 08f3 09010000 		.4byte	0x109
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 172


 5917 08f7 00000000 		.4byte	.LFB18
 5918 08fb F4000000 		.4byte	.LFE18-.LFB18
 5919 08ff 01       		.uleb128 0x1
 5920 0900 9C       		.byte	0x9c
 5921 0901 51090000 		.4byte	0x951
 5922 0905 15       		.uleb128 0x15
 5923 0906 7E690000 		.4byte	.LASF1234
 5924 090a 01       		.byte	0x1
 5925 090b D206     		.2byte	0x6d2
 5926 090d 57090000 		.4byte	0x957
 5927 0911 02       		.uleb128 0x2
 5928 0912 91       		.byte	0x91
 5929 0913 6C       		.sleb128 -20
 5930 0914 15       		.uleb128 0x15
 5931 0915 46530000 		.4byte	.LASF1235
 5932 0919 01       		.byte	0x1
 5933 091a D206     		.2byte	0x6d2
 5934 091c 5C090000 		.4byte	0x95c
 5935 0920 02       		.uleb128 0x2
 5936 0921 91       		.byte	0x91
 5937 0922 68       		.sleb128 -24
 5938 0923 15       		.uleb128 0x15
 5939 0924 04060000 		.4byte	.LASF1236
 5940 0928 01       		.byte	0x1
 5941 0929 D206     		.2byte	0x6d2
 5942 092b 67090000 		.4byte	0x967
 5943 092f 02       		.uleb128 0x2
 5944 0930 91       		.byte	0x91
 5945 0931 64       		.sleb128 -28
 5946 0932 16       		.uleb128 0x16
 5947 0933 3C8E0000 		.4byte	.LASF1237
 5948 0937 01       		.byte	0x1
 5949 0938 D406     		.2byte	0x6d4
 5950 093a 09010000 		.4byte	0x109
 5951 093e 02       		.uleb128 0x2
 5952 093f 91       		.byte	0x91
 5953 0940 74       		.sleb128 -12
 5954 0941 16       		.uleb128 0x16
 5955 0942 EB860000 		.4byte	.LASF1238
 5956 0946 01       		.byte	0x1
 5957 0947 D406     		.2byte	0x6d4
 5958 0949 09010000 		.4byte	0x109
 5959 094d 02       		.uleb128 0x2
 5960 094e 91       		.byte	0x91
 5961 094f 70       		.sleb128 -16
 5962 0950 00       		.byte	0
 5963 0951 06       		.uleb128 0x6
 5964 0952 04       		.byte	0x4
 5965 0953 2D030000 		.4byte	0x32d
 5966 0957 07       		.uleb128 0x7
 5967 0958 51090000 		.4byte	0x951
 5968 095c 07       		.uleb128 0x7
 5969 095d 09010000 		.4byte	0x109
 5970 0961 06       		.uleb128 0x6
 5971 0962 04       		.byte	0x4
 5972 0963 CC000000 		.4byte	0xcc
 5973 0967 07       		.uleb128 0x7
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 173


 5974 0968 61090000 		.4byte	0x961
 5975 096c 14       		.uleb128 0x14
 5976 096d BB6D0000 		.4byte	.LASF1239
 5977 0971 01       		.byte	0x1
 5978 0972 3A07     		.2byte	0x73a
 5979 0974 FE000000 		.4byte	0xfe
 5980 0978 00000000 		.4byte	.LFB19
 5981 097c 7C010000 		.4byte	.LFE19-.LFB19
 5982 0980 01       		.uleb128 0x1
 5983 0981 9C       		.byte	0x9c
 5984 0982 E6090000 		.4byte	0x9e6
 5985 0986 16       		.uleb128 0x16
 5986 0987 DE9E0000 		.4byte	.LASF1200
 5987 098b 01       		.byte	0x1
 5988 098c 3C07     		.2byte	0x73c
 5989 098e 09050000 		.4byte	0x509
 5990 0992 02       		.uleb128 0x2
 5991 0993 91       		.byte	0x91
 5992 0994 68       		.sleb128 -24
 5993 0995 16       		.uleb128 0x16
 5994 0996 BF9E0000 		.4byte	.LASF1139
 5995 099a 01       		.byte	0x1
 5996 099b 3D07     		.2byte	0x73d
 5997 099d 1F010000 		.4byte	0x11f
 5998 09a1 02       		.uleb128 0x2
 5999 09a2 91       		.byte	0x91
 6000 09a3 64       		.sleb128 -28
 6001 09a4 16       		.uleb128 0x16
 6002 09a5 63730000 		.4byte	.LASF1240
 6003 09a9 01       		.byte	0x1
 6004 09aa 3E07     		.2byte	0x73e
 6005 09ac FE000000 		.4byte	0xfe
 6006 09b0 02       		.uleb128 0x2
 6007 09b1 91       		.byte	0x91
 6008 09b2 74       		.sleb128 -12
 6009 09b3 17       		.uleb128 0x17
 6010 09b4 1E000000 		.4byte	.LBB8
 6011 09b8 E4000000 		.4byte	.LBE8-.LBB8
 6012 09bc 16       		.uleb128 0x16
 6013 09bd D2600000 		.4byte	.LASF1208
 6014 09c1 01       		.byte	0x1
 6015 09c2 4D07     		.2byte	0x74d
 6016 09c4 CA050000 		.4byte	0x5ca
 6017 09c8 02       		.uleb128 0x2
 6018 09c9 91       		.byte	0x91
 6019 09ca 70       		.sleb128 -16
 6020 09cb 17       		.uleb128 0x17
 6021 09cc 2A000000 		.4byte	.LBB9
 6022 09d0 32000000 		.4byte	.LBE9-.LBB9
 6023 09d4 16       		.uleb128 0x16
 6024 09d5 E2290000 		.4byte	.LASF1241
 6025 09d9 01       		.byte	0x1
 6026 09da 5107     		.2byte	0x751
 6027 09dc E6090000 		.4byte	0x9e6
 6028 09e0 02       		.uleb128 0x2
 6029 09e1 91       		.byte	0x91
 6030 09e2 6C       		.sleb128 -20
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 174


 6031 09e3 00       		.byte	0
 6032 09e4 00       		.byte	0
 6033 09e5 00       		.byte	0
 6034 09e6 06       		.uleb128 0x6
 6035 09e7 04       		.byte	0x4
 6036 09e8 FD010000 		.4byte	0x1fd
 6037 09ec 18       		.uleb128 0x18
 6038 09ed 48370000 		.4byte	.LASF1242
 6039 09f1 01       		.byte	0x1
 6040 09f2 4208     		.2byte	0x842
 6041 09f4 00000000 		.4byte	.LFB20
 6042 09f8 A4000000 		.4byte	.LFE20-.LFB20
 6043 09fc 01       		.uleb128 0x1
 6044 09fd 9C       		.byte	0x9c
 6045 09fe 640A0000 		.4byte	0xa64
 6046 0a02 17       		.uleb128 0x17
 6047 0a03 1C000000 		.4byte	.LBB10
 6048 0a07 6A000000 		.4byte	.LBE10-.LBB10
 6049 0a0b 16       		.uleb128 0x16
 6050 0a0c 45690000 		.4byte	.LASF1243
 6051 0a10 01       		.byte	0x1
 6052 0a11 7008     		.2byte	0x870
 6053 0a13 09010000 		.4byte	0x109
 6054 0a17 02       		.uleb128 0x2
 6055 0a18 91       		.byte	0x91
 6056 0a19 74       		.sleb128 -12
 6057 0a1a 1D       		.uleb128 0x1d
 6058 0a1b EE030000 		.4byte	0x3ee
 6059 0a1f 22000000 		.4byte	.LBB11
 6060 0a23 0A000000 		.4byte	.LBE11-.LBB11
 6061 0a27 01       		.byte	0x1
 6062 0a28 7008     		.2byte	0x870
 6063 0a2a 490A0000 		.4byte	0xa49
 6064 0a2e 1E       		.uleb128 0x1e
 6065 0a2f FE030000 		.4byte	0x3fe
 6066 0a33 02       		.uleb128 0x2
 6067 0a34 91       		.byte	0x91
 6068 0a35 6C       		.sleb128 -20
 6069 0a36 17       		.uleb128 0x17
 6070 0a37 22000000 		.4byte	.LBB12
 6071 0a3b 0A000000 		.4byte	.LBE12-.LBB12
 6072 0a3f 1F       		.uleb128 0x1f
 6073 0a40 09040000 		.4byte	0x409
 6074 0a44 02       		.uleb128 0x2
 6075 0a45 91       		.byte	0x91
 6076 0a46 6B       		.sleb128 -21
 6077 0a47 00       		.byte	0
 6078 0a48 00       		.byte	0
 6079 0a49 17       		.uleb128 0x17
 6080 0a4a 4C000000 		.4byte	.LBB13
 6081 0a4e 3A000000 		.4byte	.LBE13-.LBB13
 6082 0a52 16       		.uleb128 0x16
 6083 0a53 91380000 		.4byte	.LASF1244
 6084 0a57 01       		.byte	0x1
 6085 0a58 7008     		.2byte	0x870
 6086 0a5a 640A0000 		.4byte	0xa64
 6087 0a5e 02       		.uleb128 0x2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 175


 6088 0a5f 91       		.byte	0x91
 6089 0a60 70       		.sleb128 -16
 6090 0a61 00       		.byte	0
 6091 0a62 00       		.byte	0
 6092 0a63 00       		.byte	0
 6093 0a64 07       		.uleb128 0x7
 6094 0a65 E6090000 		.4byte	0x9e6
 6095 0a69 18       		.uleb128 0x18
 6096 0a6a 384A0000 		.4byte	.LASF1245
 6097 0a6e 01       		.byte	0x1
 6098 0a6f 7E08     		.2byte	0x87e
 6099 0a71 00000000 		.4byte	.LFB21
 6100 0a75 90000000 		.4byte	.LFE21-.LFB21
 6101 0a79 01       		.uleb128 0x1
 6102 0a7a 9C       		.byte	0x9c
 6103 0a7b AD0A0000 		.4byte	0xaad
 6104 0a7f 15       		.uleb128 0x15
 6105 0a80 BF3F0000 		.4byte	.LASF1246
 6106 0a84 01       		.byte	0x1
 6107 0a85 7E08     		.2byte	0x87e
 6108 0a87 640A0000 		.4byte	0xa64
 6109 0a8b 02       		.uleb128 0x2
 6110 0a8c 91       		.byte	0x91
 6111 0a8d 6C       		.sleb128 -20
 6112 0a8e 15       		.uleb128 0x15
 6113 0a8f D05D0000 		.4byte	.LASF1247
 6114 0a93 01       		.byte	0x1
 6115 0a94 7E08     		.2byte	0x87e
 6116 0a96 CA050000 		.4byte	0x5ca
 6117 0a9a 02       		.uleb128 0x2
 6118 0a9b 91       		.byte	0x91
 6119 0a9c 68       		.sleb128 -24
 6120 0a9d 16       		.uleb128 0x16
 6121 0a9e 23550000 		.4byte	.LASF1205
 6122 0aa2 01       		.byte	0x1
 6123 0aa3 8008     		.2byte	0x880
 6124 0aa5 1F010000 		.4byte	0x11f
 6125 0aa9 02       		.uleb128 0x2
 6126 0aaa 91       		.byte	0x91
 6127 0aab 74       		.sleb128 -12
 6128 0aac 00       		.byte	0
 6129 0aad 18       		.uleb128 0x18
 6130 0aae 4D050000 		.4byte	.LASF1248
 6131 0ab2 01       		.byte	0x1
 6132 0ab3 B908     		.2byte	0x8b9
 6133 0ab5 00000000 		.4byte	.LFB22
 6134 0ab9 B0000000 		.4byte	.LFE22-.LFB22
 6135 0abd 01       		.uleb128 0x1
 6136 0abe 9C       		.byte	0x9c
 6137 0abf 000B0000 		.4byte	0xb00
 6138 0ac3 15       		.uleb128 0x15
 6139 0ac4 BF3F0000 		.4byte	.LASF1246
 6140 0ac8 01       		.byte	0x1
 6141 0ac9 B908     		.2byte	0x8b9
 6142 0acb E6090000 		.4byte	0x9e6
 6143 0acf 02       		.uleb128 0x2
 6144 0ad0 91       		.byte	0x91
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 176


 6145 0ad1 6C       		.sleb128 -20
 6146 0ad2 15       		.uleb128 0x15
 6147 0ad3 BF9E0000 		.4byte	.LASF1139
 6148 0ad7 01       		.byte	0x1
 6149 0ad8 B908     		.2byte	0x8b9
 6150 0ada CA050000 		.4byte	0x5ca
 6151 0ade 02       		.uleb128 0x2
 6152 0adf 91       		.byte	0x91
 6153 0ae0 68       		.sleb128 -24
 6154 0ae1 15       		.uleb128 0x15
 6155 0ae2 D05D0000 		.4byte	.LASF1247
 6156 0ae6 01       		.byte	0x1
 6157 0ae7 B908     		.2byte	0x8b9
 6158 0ae9 CA050000 		.4byte	0x5ca
 6159 0aed 02       		.uleb128 0x2
 6160 0aee 91       		.byte	0x91
 6161 0aef 64       		.sleb128 -28
 6162 0af0 16       		.uleb128 0x16
 6163 0af1 23550000 		.4byte	.LASF1205
 6164 0af5 01       		.byte	0x1
 6165 0af6 BB08     		.2byte	0x8bb
 6166 0af8 1F010000 		.4byte	0x11f
 6167 0afc 02       		.uleb128 0x2
 6168 0afd 91       		.byte	0x91
 6169 0afe 74       		.sleb128 -12
 6170 0aff 00       		.byte	0
 6171 0b00 14       		.uleb128 0x14
 6172 0b01 99270000 		.4byte	.LASF1249
 6173 0b05 01       		.byte	0x1
 6174 0b06 2809     		.2byte	0x928
 6175 0b08 FE000000 		.4byte	0xfe
 6176 0b0c 00000000 		.4byte	.LFB23
 6177 0b10 B4000000 		.4byte	.LFE23-.LFB23
 6178 0b14 01       		.uleb128 0x1
 6179 0b15 9C       		.byte	0x9c
 6180 0b16 480B0000 		.4byte	0xb48
 6181 0b1a 15       		.uleb128 0x15
 6182 0b1b BF3F0000 		.4byte	.LASF1246
 6183 0b1f 01       		.byte	0x1
 6184 0b20 2809     		.2byte	0x928
 6185 0b22 530B0000 		.4byte	0xb53
 6186 0b26 02       		.uleb128 0x2
 6187 0b27 91       		.byte	0x91
 6188 0b28 6C       		.sleb128 -20
 6189 0b29 16       		.uleb128 0x16
 6190 0b2a 55580000 		.4byte	.LASF1250
 6191 0b2e 01       		.byte	0x1
 6192 0b2f 2A09     		.2byte	0x92a
 6193 0b31 09050000 		.4byte	0x509
 6194 0b35 02       		.uleb128 0x2
 6195 0b36 91       		.byte	0x91
 6196 0b37 70       		.sleb128 -16
 6197 0b38 16       		.uleb128 0x16
 6198 0b39 24210000 		.4byte	.LASF1197
 6199 0b3d 01       		.byte	0x1
 6200 0b3e 2B09     		.2byte	0x92b
 6201 0b40 FE000000 		.4byte	0xfe
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 177


 6202 0b44 02       		.uleb128 0x2
 6203 0b45 91       		.byte	0x91
 6204 0b46 74       		.sleb128 -12
 6205 0b47 00       		.byte	0
 6206 0b48 06       		.uleb128 0x6
 6207 0b49 04       		.byte	0x4
 6208 0b4a 4E0B0000 		.4byte	0xb4e
 6209 0b4e 07       		.uleb128 0x7
 6210 0b4f FD010000 		.4byte	0x1fd
 6211 0b53 07       		.uleb128 0x7
 6212 0b54 480B0000 		.4byte	0xb48
 6213 0b58 14       		.uleb128 0x14
 6214 0b59 0A070000 		.4byte	.LASF1251
 6215 0b5d 01       		.byte	0x1
 6216 0b5e 5E09     		.2byte	0x95e
 6217 0b60 FE000000 		.4byte	0xfe
 6218 0b64 00000000 		.4byte	.LFB24
 6219 0b68 B0000000 		.4byte	.LFE24-.LFB24
 6220 0b6c 01       		.uleb128 0x1
 6221 0b6d 9C       		.byte	0x9c
 6222 0b6e AF0B0000 		.4byte	0xbaf
 6223 0b72 15       		.uleb128 0x15
 6224 0b73 EC6A0000 		.4byte	.LASF1252
 6225 0b77 01       		.byte	0x1
 6226 0b78 5E09     		.2byte	0x95e
 6227 0b7a F7010000 		.4byte	0x1f7
 6228 0b7e 02       		.uleb128 0x2
 6229 0b7f 91       		.byte	0x91
 6230 0b80 6C       		.sleb128 -20
 6231 0b81 15       		.uleb128 0x15
 6232 0b82 BF9E0000 		.4byte	.LASF1139
 6233 0b86 01       		.byte	0x1
 6234 0b87 5E09     		.2byte	0x95e
 6235 0b89 CA050000 		.4byte	0x5ca
 6236 0b8d 02       		.uleb128 0x2
 6237 0b8e 91       		.byte	0x91
 6238 0b8f 68       		.sleb128 -24
 6239 0b90 16       		.uleb128 0x16
 6240 0b91 55580000 		.4byte	.LASF1250
 6241 0b95 01       		.byte	0x1
 6242 0b96 6009     		.2byte	0x960
 6243 0b98 09050000 		.4byte	0x509
 6244 0b9c 02       		.uleb128 0x2
 6245 0b9d 91       		.byte	0x91
 6246 0b9e 70       		.sleb128 -16
 6247 0b9f 16       		.uleb128 0x16
 6248 0ba0 24210000 		.4byte	.LASF1197
 6249 0ba4 01       		.byte	0x1
 6250 0ba5 6109     		.2byte	0x961
 6251 0ba7 FE000000 		.4byte	0xfe
 6252 0bab 02       		.uleb128 0x2
 6253 0bac 91       		.byte	0x91
 6254 0bad 74       		.sleb128 -12
 6255 0bae 00       		.byte	0
 6256 0baf 18       		.uleb128 0x18
 6257 0bb0 2A410000 		.4byte	.LASF1253
 6258 0bb4 01       		.byte	0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 178


 6259 0bb5 8B09     		.2byte	0x98b
 6260 0bb7 00000000 		.4byte	.LFB25
 6261 0bbb 34000000 		.4byte	.LFE25-.LFB25
 6262 0bbf 01       		.uleb128 0x1
 6263 0bc0 9C       		.byte	0x9c
 6264 0bc1 D50B0000 		.4byte	0xbd5
 6265 0bc5 15       		.uleb128 0x15
 6266 0bc6 673E0000 		.4byte	.LASF1254
 6267 0bca 01       		.byte	0x1
 6268 0bcb 8B09     		.2byte	0x98b
 6269 0bcd DB0B0000 		.4byte	0xbdb
 6270 0bd1 02       		.uleb128 0x2
 6271 0bd2 91       		.byte	0x91
 6272 0bd3 74       		.sleb128 -12
 6273 0bd4 00       		.byte	0
 6274 0bd5 06       		.uleb128 0x6
 6275 0bd6 04       		.byte	0x4
 6276 0bd7 6E020000 		.4byte	0x26e
 6277 0bdb 07       		.uleb128 0x7
 6278 0bdc D50B0000 		.4byte	0xbd5
 6279 0be0 14       		.uleb128 0x14
 6280 0be1 2A450000 		.4byte	.LASF1255
 6281 0be5 01       		.byte	0x1
 6282 0be6 9309     		.2byte	0x993
 6283 0be8 FE000000 		.4byte	0xfe
 6284 0bec 00000000 		.4byte	.LFB26
 6285 0bf0 A0000000 		.4byte	.LFE26-.LFB26
 6286 0bf4 01       		.uleb128 0x1
 6287 0bf5 9C       		.byte	0x9c
 6288 0bf6 410C0000 		.4byte	0xc41
 6289 0bfa 15       		.uleb128 0x15
 6290 0bfb 673E0000 		.4byte	.LASF1254
 6291 0bff 01       		.byte	0x1
 6292 0c00 9309     		.2byte	0x993
 6293 0c02 DB0B0000 		.4byte	0xbdb
 6294 0c06 02       		.uleb128 0x2
 6295 0c07 91       		.byte	0x91
 6296 0c08 6C       		.sleb128 -20
 6297 0c09 15       		.uleb128 0x15
 6298 0c0a 561A0000 		.4byte	.LASF1256
 6299 0c0e 01       		.byte	0x1
 6300 0c0f 9309     		.2byte	0x993
 6301 0c11 C5050000 		.4byte	0x5c5
 6302 0c15 02       		.uleb128 0x2
 6303 0c16 91       		.byte	0x91
 6304 0c17 68       		.sleb128 -24
 6305 0c18 16       		.uleb128 0x16
 6306 0c19 24210000 		.4byte	.LASF1197
 6307 0c1d 01       		.byte	0x1
 6308 0c1e 9509     		.2byte	0x995
 6309 0c20 FE000000 		.4byte	0xfe
 6310 0c24 02       		.uleb128 0x2
 6311 0c25 91       		.byte	0x91
 6312 0c26 74       		.sleb128 -12
 6313 0c27 17       		.uleb128 0x17
 6314 0c28 26000000 		.4byte	.LBB14
 6315 0c2c 64000000 		.4byte	.LBE14-.LBB14
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 179


 6316 0c30 16       		.uleb128 0x16
 6317 0c31 D2600000 		.4byte	.LASF1208
 6318 0c35 01       		.byte	0x1
 6319 0c36 9D09     		.2byte	0x99d
 6320 0c38 CA050000 		.4byte	0x5ca
 6321 0c3c 02       		.uleb128 0x2
 6322 0c3d 91       		.byte	0x91
 6323 0c3e 70       		.sleb128 -16
 6324 0c3f 00       		.byte	0
 6325 0c40 00       		.byte	0
 6326 0c41 1B       		.uleb128 0x1b
 6327 0c42 E33F0000 		.4byte	.LASF1257
 6328 0c46 01       		.byte	0x1
 6329 0c47 C409     		.2byte	0x9c4
 6330 0c49 00000000 		.4byte	.LFB27
 6331 0c4d 18000000 		.4byte	.LFE27-.LFB27
 6332 0c51 01       		.uleb128 0x1
 6333 0c52 9C       		.byte	0x9c
 6334 0c53 20       		.uleb128 0x20
 6335 0c54 261D0000 		.4byte	.LASF1258
 6336 0c58 01       		.byte	0x1
 6337 0c59 CC09     		.2byte	0x9cc
 6338 0c5b 09010000 		.4byte	0x109
 6339 0c5f 00000000 		.4byte	.LFB28
 6340 0c63 2A000000 		.4byte	.LFE28-.LFB28
 6341 0c67 01       		.uleb128 0x1
 6342 0c68 9C       		.byte	0x9c
 6343 0c69 9B0C0000 		.4byte	0xc9b
 6344 0c6d 15       		.uleb128 0x15
 6345 0c6e DC8E0000 		.4byte	.LASF1213
 6346 0c72 01       		.byte	0x1
 6347 0c73 CC09     		.2byte	0x9cc
 6348 0c75 08020000 		.4byte	0x208
 6349 0c79 02       		.uleb128 0x2
 6350 0c7a 91       		.byte	0x91
 6351 0c7b 6C       		.sleb128 -20
 6352 0c7c 16       		.uleb128 0x16
 6353 0c7d 200F0000 		.4byte	.LASF1214
 6354 0c81 01       		.byte	0x1
 6355 0c82 CE09     		.2byte	0x9ce
 6356 0c84 09010000 		.4byte	0x109
 6357 0c88 02       		.uleb128 0x2
 6358 0c89 91       		.byte	0x91
 6359 0c8a 74       		.sleb128 -12
 6360 0c8b 16       		.uleb128 0x16
 6361 0c8c DE9E0000 		.4byte	.LASF1200
 6362 0c90 01       		.byte	0x1
 6363 0c91 CF09     		.2byte	0x9cf
 6364 0c93 09050000 		.4byte	0x509
 6365 0c97 02       		.uleb128 0x2
 6366 0c98 91       		.byte	0x91
 6367 0c99 70       		.sleb128 -16
 6368 0c9a 00       		.byte	0
 6369 0c9b 21       		.uleb128 0x21
 6370 0c9c D94A0000 		.4byte	.LASF1259
 6371 0ca0 01       		.byte	0x1
 6372 0ca1 E309     		.2byte	0x9e3
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 180


 6373 0ca3 00000000 		.4byte	.LFB29
 6374 0ca7 24000000 		.4byte	.LFE29-.LFB29
 6375 0cab 01       		.uleb128 0x1
 6376 0cac 9C       		.byte	0x9c
 6377 0cad DF0C0000 		.4byte	0xcdf
 6378 0cb1 15       		.uleb128 0x15
 6379 0cb2 DC8E0000 		.4byte	.LASF1213
 6380 0cb6 01       		.byte	0x1
 6381 0cb7 E309     		.2byte	0x9e3
 6382 0cb9 08020000 		.4byte	0x208
 6383 0cbd 02       		.uleb128 0x2
 6384 0cbe 91       		.byte	0x91
 6385 0cbf 6C       		.sleb128 -20
 6386 0cc0 15       		.uleb128 0x15
 6387 0cc1 640E0000 		.4byte	.LASF1260
 6388 0cc5 01       		.byte	0x1
 6389 0cc6 E309     		.2byte	0x9e3
 6390 0cc8 5C090000 		.4byte	0x95c
 6391 0ccc 02       		.uleb128 0x2
 6392 0ccd 91       		.byte	0x91
 6393 0cce 68       		.sleb128 -24
 6394 0ccf 16       		.uleb128 0x16
 6395 0cd0 DE9E0000 		.4byte	.LASF1200
 6396 0cd4 01       		.byte	0x1
 6397 0cd5 E509     		.2byte	0x9e5
 6398 0cd7 09050000 		.4byte	0x509
 6399 0cdb 02       		.uleb128 0x2
 6400 0cdc 91       		.byte	0x91
 6401 0cdd 74       		.sleb128 -12
 6402 0cde 00       		.byte	0
 6403 0cdf 22       		.uleb128 0x22
 6404 0ce0 AD200000 		.4byte	.LASF1261
 6405 0ce4 01       		.byte	0x1
 6406 0ce5 FB09     		.2byte	0x9fb
 6407 0ce7 00000000 		.4byte	.LFB30
 6408 0ceb 0E000000 		.4byte	.LFE30-.LFB30
 6409 0cef 01       		.uleb128 0x1
 6410 0cf0 9C       		.byte	0x9c
 6411 0cf1 050D0000 		.4byte	0xd05
 6412 0cf5 15       		.uleb128 0x15
 6413 0cf6 2F8E0000 		.4byte	.LASF1193
 6414 0cfa 01       		.byte	0x1
 6415 0cfb FB09     		.2byte	0x9fb
 6416 0cfd A2000000 		.4byte	0xa2
 6417 0d01 02       		.uleb128 0x2
 6418 0d02 91       		.byte	0x91
 6419 0d03 74       		.sleb128 -12
 6420 0d04 00       		.byte	0
 6421 0d05 22       		.uleb128 0x22
 6422 0d06 EB380000 		.4byte	.LASF1262
 6423 0d0a 01       		.byte	0x1
 6424 0d0b 8E0A     		.2byte	0xa8e
 6425 0d0d 00000000 		.4byte	.LFB31
 6426 0d11 9A000000 		.4byte	.LFE31-.LFB31
 6427 0d15 01       		.uleb128 0x1
 6428 0d16 9C       		.byte	0x9c
 6429 0d17 740D0000 		.4byte	0xd74
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 181


 6430 0d1b 15       		.uleb128 0x15
 6431 0d1c DE9E0000 		.4byte	.LASF1200
 6432 0d20 01       		.byte	0x1
 6433 0d21 8E0A     		.2byte	0xa8e
 6434 0d23 93070000 		.4byte	0x793
 6435 0d27 02       		.uleb128 0x2
 6436 0d28 91       		.byte	0x91
 6437 0d29 6C       		.sleb128 -20
 6438 0d2a 15       		.uleb128 0x15
 6439 0d2b C61A0000 		.4byte	.LASF1191
 6440 0d2f 01       		.byte	0x1
 6441 0d30 8E0A     		.2byte	0xa8e
 6442 0d32 B5020000 		.4byte	0x2b5
 6443 0d36 02       		.uleb128 0x2
 6444 0d37 91       		.byte	0x91
 6445 0d38 68       		.sleb128 -24
 6446 0d39 15       		.uleb128 0x15
 6447 0d3a F79E0000 		.4byte	.LASF1183
 6448 0d3e 01       		.byte	0x1
 6449 0d3f 8E0A     		.2byte	0xa8e
 6450 0d41 09010000 		.4byte	0x109
 6451 0d45 02       		.uleb128 0x2
 6452 0d46 91       		.byte	0x91
 6453 0d47 64       		.sleb128 -28
 6454 0d48 15       		.uleb128 0x15
 6455 0d49 10910000 		.4byte	.LASF1196
 6456 0d4d 01       		.byte	0x1
 6457 0d4e 8E0A     		.2byte	0xa8e
 6458 0d50 04050000 		.4byte	0x504
 6459 0d54 02       		.uleb128 0x2
 6460 0d55 91       		.byte	0x91
 6461 0d56 60       		.sleb128 -32
 6462 0d57 15       		.uleb128 0x15
 6463 0d58 BC020000 		.4byte	.LASF1192
 6464 0d5c 01       		.byte	0x1
 6465 0d5d 8E0A     		.2byte	0xa8e
 6466 0d5f DF040000 		.4byte	0x4df
 6467 0d63 02       		.uleb128 0x2
 6468 0d64 91       		.byte	0x91
 6469 0d65 00       		.sleb128 0
 6470 0d66 23       		.uleb128 0x23
 6471 0d67 7800     		.ascii	"x\000"
 6472 0d69 01       		.byte	0x1
 6473 0d6a 900A     		.2byte	0xa90
 6474 0d6c 09010000 		.4byte	0x109
 6475 0d70 02       		.uleb128 0x2
 6476 0d71 91       		.byte	0x91
 6477 0d72 74       		.sleb128 -12
 6478 0d73 00       		.byte	0
 6479 0d74 22       		.uleb128 0x22
 6480 0d75 23970000 		.4byte	.LASF1263
 6481 0d79 01       		.byte	0x1
 6482 0d7a FB0A     		.2byte	0xafb
 6483 0d7c 00000000 		.4byte	.LFB32
 6484 0d80 80000000 		.4byte	.LFE32-.LFB32
 6485 0d84 01       		.uleb128 0x1
 6486 0d85 9C       		.byte	0x9c
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 182


 6487 0d86 9A0D0000 		.4byte	0xd9a
 6488 0d8a 16       		.uleb128 0x16
 6489 0d8b F79E0000 		.4byte	.LASF1183
 6490 0d8f 01       		.byte	0x1
 6491 0d90 FD0A     		.2byte	0xafd
 6492 0d92 09010000 		.4byte	0x109
 6493 0d96 02       		.uleb128 0x2
 6494 0d97 91       		.byte	0x91
 6495 0d98 74       		.sleb128 -12
 6496 0d99 00       		.byte	0
 6497 0d9a 22       		.uleb128 0x22
 6498 0d9b BC710000 		.4byte	.LASF1264
 6499 0d9f 01       		.byte	0x1
 6500 0da0 1B0B     		.2byte	0xb1b
 6501 0da2 00000000 		.4byte	.LFB33
 6502 0da6 78000000 		.4byte	.LFE33-.LFB33
 6503 0daa 01       		.uleb128 0x1
 6504 0dab 9C       		.byte	0x9c
 6505 0dac E30D0000 		.4byte	0xde3
 6506 0db0 17       		.uleb128 0x17
 6507 0db1 06000000 		.4byte	.LBB15
 6508 0db5 5C000000 		.4byte	.LBE15-.LBB15
 6509 0db9 16       		.uleb128 0x16
 6510 0dba B39C0000 		.4byte	.LASF1265
 6511 0dbe 01       		.byte	0x1
 6512 0dbf 1F0B     		.2byte	0xb1f
 6513 0dc1 FE000000 		.4byte	0xfe
 6514 0dc5 02       		.uleb128 0x2
 6515 0dc6 91       		.byte	0x91
 6516 0dc7 74       		.sleb128 -12
 6517 0dc8 17       		.uleb128 0x17
 6518 0dc9 26000000 		.4byte	.LBB16
 6519 0dcd 34000000 		.4byte	.LBE16-.LBB16
 6520 0dd1 16       		.uleb128 0x16
 6521 0dd2 DE9E0000 		.4byte	.LASF1200
 6522 0dd6 01       		.byte	0x1
 6523 0dd7 2D0B     		.2byte	0xb2d
 6524 0dd9 09050000 		.4byte	0x509
 6525 0ddd 02       		.uleb128 0x2
 6526 0dde 91       		.byte	0x91
 6527 0ddf 70       		.sleb128 -16
 6528 0de0 00       		.byte	0
 6529 0de1 00       		.byte	0
 6530 0de2 00       		.byte	0
 6531 0de3 22       		.uleb128 0x22
 6532 0de4 A56E0000 		.4byte	.LASF1266
 6533 0de8 01       		.byte	0x1
 6534 0de9 440B     		.2byte	0xb44
 6535 0deb 00000000 		.4byte	.LFB34
 6536 0def 6C000000 		.4byte	.LFE34-.LFB34
 6537 0df3 01       		.uleb128 0x1
 6538 0df4 9C       		.byte	0x9c
 6539 0df5 090E0000 		.4byte	0xe09
 6540 0df9 15       		.uleb128 0x15
 6541 0dfa 23550000 		.4byte	.LASF1205
 6542 0dfe 01       		.byte	0x1
 6543 0dff 440B     		.2byte	0xb44
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 183


 6544 0e01 CA050000 		.4byte	0x5ca
 6545 0e05 02       		.uleb128 0x2
 6546 0e06 91       		.byte	0x91
 6547 0e07 74       		.sleb128 -12
 6548 0e08 00       		.byte	0
 6549 0e09 19       		.uleb128 0x19
 6550 0e0a F6260000 		.4byte	.LASF1268
 6551 0e0e 01       		.byte	0x1
 6552 0e0f 620B     		.2byte	0xb62
 6553 0e11 09050000 		.4byte	0x509
 6554 0e15 00000000 		.4byte	.LFB35
 6555 0e19 62000000 		.4byte	.LFE35-.LFB35
 6556 0e1d 01       		.uleb128 0x1
 6557 0e1e 9C       		.byte	0x9c
 6558 0e1f 510E0000 		.4byte	0xe51
 6559 0e23 15       		.uleb128 0x15
 6560 0e24 BC020000 		.4byte	.LASF1192
 6561 0e28 01       		.byte	0x1
 6562 0e29 620B     		.2byte	0xb62
 6563 0e2b DF040000 		.4byte	0x4df
 6564 0e2f 02       		.uleb128 0x2
 6565 0e30 91       		.byte	0x91
 6566 0e31 6E       		.sleb128 -18
 6567 0e32 15       		.uleb128 0x15
 6568 0e33 1E790000 		.4byte	.LASF1195
 6569 0e37 01       		.byte	0x1
 6570 0e38 620B     		.2byte	0xb62
 6571 0e3a F4040000 		.4byte	0x4f4
 6572 0e3e 02       		.uleb128 0x2
 6573 0e3f 91       		.byte	0x91
 6574 0e40 68       		.sleb128 -24
 6575 0e41 16       		.uleb128 0x16
 6576 0e42 11100000 		.4byte	.LASF1198
 6577 0e46 01       		.byte	0x1
 6578 0e47 640B     		.2byte	0xb64
 6579 0e49 09050000 		.4byte	0x509
 6580 0e4d 02       		.uleb128 0x2
 6581 0e4e 91       		.byte	0x91
 6582 0e4f 74       		.sleb128 -12
 6583 0e50 00       		.byte	0
 6584 0e51 19       		.uleb128 0x19
 6585 0e52 554E0000 		.4byte	.LASF1269
 6586 0e56 01       		.byte	0x1
 6587 0e57 890B     		.2byte	0xb89
 6588 0e59 09010000 		.4byte	0x109
 6589 0e5d 00000000 		.4byte	.LFB36
 6590 0e61 16010000 		.4byte	.LFE36-.LFB36
 6591 0e65 01       		.uleb128 0x1
 6592 0e66 9C       		.byte	0x9c
 6593 0e67 FC0E0000 		.4byte	0xefc
 6594 0e6b 15       		.uleb128 0x15
 6595 0e6c 7E690000 		.4byte	.LASF1234
 6596 0e70 01       		.byte	0x1
 6597 0e71 890B     		.2byte	0xb89
 6598 0e73 51090000 		.4byte	0x951
 6599 0e77 02       		.uleb128 0x2
 6600 0e78 91       		.byte	0x91
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 184


 6601 0e79 54       		.sleb128 -44
 6602 0e7a 15       		.uleb128 0x15
 6603 0e7b F0070000 		.4byte	.LASF1270
 6604 0e7f 01       		.byte	0x1
 6605 0e80 890B     		.2byte	0xb89
 6606 0e82 E6090000 		.4byte	0x9e6
 6607 0e86 02       		.uleb128 0x2
 6608 0e87 91       		.byte	0x91
 6609 0e88 50       		.sleb128 -48
 6610 0e89 15       		.uleb128 0x15
 6611 0e8a 5F360000 		.4byte	.LASF1271
 6612 0e8e 01       		.byte	0x1
 6613 0e8f 890B     		.2byte	0xb89
 6614 0e91 3E020000 		.4byte	0x23e
 6615 0e95 02       		.uleb128 0x2
 6616 0e96 91       		.byte	0x91
 6617 0e97 4F       		.sleb128 -49
 6618 0e98 16       		.uleb128 0x16
 6619 0e99 5D1D0000 		.4byte	.LASF1272
 6620 0e9d 01       		.byte	0x1
 6621 0e9e 8B0B     		.2byte	0xb8b
 6622 0ea0 FC0E0000 		.4byte	0xefc
 6623 0ea4 02       		.uleb128 0x2
 6624 0ea5 91       		.byte	0x91
 6625 0ea6 5C       		.sleb128 -36
 6626 0ea7 16       		.uleb128 0x16
 6627 0ea8 4E490000 		.4byte	.LASF1273
 6628 0eac 01       		.byte	0x1
 6629 0ead 8B0B     		.2byte	0xb8b
 6630 0eaf FC0E0000 		.4byte	0xefc
 6631 0eb3 02       		.uleb128 0x2
 6632 0eb4 91       		.byte	0x91
 6633 0eb5 64       		.sleb128 -28
 6634 0eb6 16       		.uleb128 0x16
 6635 0eb7 3C8E0000 		.4byte	.LASF1237
 6636 0ebb 01       		.byte	0x1
 6637 0ebc 8C0B     		.2byte	0xb8c
 6638 0ebe 09010000 		.4byte	0x109
 6639 0ec2 02       		.uleb128 0x2
 6640 0ec3 91       		.byte	0x91
 6641 0ec4 6C       		.sleb128 -20
 6642 0ec5 24       		.uleb128 0x24
 6643 0ec6 1A000000 		.4byte	.LBB17
 6644 0eca 2C000000 		.4byte	.LBE17-.LBB17
 6645 0ece E20E0000 		.4byte	0xee2
 6646 0ed2 16       		.uleb128 0x16
 6647 0ed3 91380000 		.4byte	.LASF1244
 6648 0ed7 01       		.byte	0x1
 6649 0ed8 900B     		.2byte	0xb90
 6650 0eda 640A0000 		.4byte	0xa64
 6651 0ede 02       		.uleb128 0x2
 6652 0edf 91       		.byte	0x91
 6653 0ee0 68       		.sleb128 -24
 6654 0ee1 00       		.byte	0
 6655 0ee2 17       		.uleb128 0x17
 6656 0ee3 46000000 		.4byte	.LBB18
 6657 0ee7 2C000000 		.4byte	.LBE18-.LBB18
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 185


 6658 0eeb 16       		.uleb128 0x16
 6659 0eec 91380000 		.4byte	.LASF1244
 6660 0ef0 01       		.byte	0x1
 6661 0ef1 980B     		.2byte	0xb98
 6662 0ef3 640A0000 		.4byte	0xa64
 6663 0ef7 02       		.uleb128 0x2
 6664 0ef8 91       		.byte	0x91
 6665 0ef9 60       		.sleb128 -32
 6666 0efa 00       		.byte	0
 6667 0efb 00       		.byte	0
 6668 0efc 06       		.uleb128 0x6
 6669 0efd 04       		.byte	0x4
 6670 0efe 020F0000 		.4byte	0xf02
 6671 0f02 0E       		.uleb128 0xe
 6672 0f03 E3030000 		.4byte	0x3e3
 6673 0f07 25       		.uleb128 0x25
 6674 0f08 1F580000 		.4byte	.LASF1274
 6675 0f0c 01       		.byte	0x1
 6676 0f0d DE0B     		.2byte	0xbde
 6677 0f0f C1000000 		.4byte	0xc1
 6678 0f13 00000000 		.4byte	.LFB37
 6679 0f17 36000000 		.4byte	.LFE37-.LFB37
 6680 0f1b 01       		.uleb128 0x1
 6681 0f1c 9C       		.byte	0x9c
 6682 0f1d 400F0000 		.4byte	0xf40
 6683 0f21 15       		.uleb128 0x15
 6684 0f22 997A0000 		.4byte	.LASF1275
 6685 0f26 01       		.byte	0x1
 6686 0f27 DE0B     		.2byte	0xbde
 6687 0f29 400F0000 		.4byte	0xf40
 6688 0f2d 02       		.uleb128 0x2
 6689 0f2e 91       		.byte	0x91
 6690 0f2f 6C       		.sleb128 -20
 6691 0f30 16       		.uleb128 0x16
 6692 0f31 552E0000 		.4byte	.LASF1276
 6693 0f35 01       		.byte	0x1
 6694 0f36 E00B     		.2byte	0xbe0
 6695 0f38 CC000000 		.4byte	0xcc
 6696 0f3c 02       		.uleb128 0x2
 6697 0f3d 91       		.byte	0x91
 6698 0f3e 74       		.sleb128 -12
 6699 0f3f 00       		.byte	0
 6700 0f40 06       		.uleb128 0x6
 6701 0f41 04       		.byte	0x4
 6702 0f42 460F0000 		.4byte	0xf46
 6703 0f46 07       		.uleb128 0x7
 6704 0f47 B6000000 		.4byte	0xb6
 6705 0f4b 14       		.uleb128 0x14
 6706 0f4c 1E590000 		.4byte	.LASF1277
 6707 0f50 01       		.byte	0x1
 6708 0f51 F20B     		.2byte	0xbf2
 6709 0f53 09010000 		.4byte	0x109
 6710 0f57 00000000 		.4byte	.LFB38
 6711 0f5b 38000000 		.4byte	.LFE38-.LFB38
 6712 0f5f 01       		.uleb128 0x1
 6713 0f60 9C       		.byte	0x9c
 6714 0f61 A20F0000 		.4byte	0xfa2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 186


 6715 0f65 15       		.uleb128 0x15
 6716 0f66 DC8E0000 		.4byte	.LASF1213
 6717 0f6a 01       		.byte	0x1
 6718 0f6b F20B     		.2byte	0xbf2
 6719 0f6d 08020000 		.4byte	0x208
 6720 0f71 02       		.uleb128 0x2
 6721 0f72 91       		.byte	0x91
 6722 0f73 64       		.sleb128 -28
 6723 0f74 16       		.uleb128 0x16
 6724 0f75 DE9E0000 		.4byte	.LASF1200
 6725 0f79 01       		.byte	0x1
 6726 0f7a F40B     		.2byte	0xbf4
 6727 0f7c 09050000 		.4byte	0x509
 6728 0f80 02       		.uleb128 0x2
 6729 0f81 91       		.byte	0x91
 6730 0f82 74       		.sleb128 -12
 6731 0f83 16       		.uleb128 0x16
 6732 0f84 5D380000 		.4byte	.LASF1278
 6733 0f88 01       		.byte	0x1
 6734 0f89 F50B     		.2byte	0xbf5
 6735 0f8b 2A010000 		.4byte	0x12a
 6736 0f8f 02       		.uleb128 0x2
 6737 0f90 91       		.byte	0x91
 6738 0f91 70       		.sleb128 -16
 6739 0f92 16       		.uleb128 0x16
 6740 0f93 200F0000 		.4byte	.LASF1214
 6741 0f97 01       		.byte	0x1
 6742 0f98 F60B     		.2byte	0xbf6
 6743 0f9a 09010000 		.4byte	0x109
 6744 0f9e 02       		.uleb128 0x2
 6745 0f9f 91       		.byte	0x91
 6746 0fa0 6C       		.sleb128 -20
 6747 0fa1 00       		.byte	0
 6748 0fa2 22       		.uleb128 0x22
 6749 0fa3 FE560000 		.4byte	.LASF1279
 6750 0fa7 01       		.byte	0x1
 6751 0fa8 0E0C     		.2byte	0xc0e
 6752 0faa 00000000 		.4byte	.LFB39
 6753 0fae 20000000 		.4byte	.LFE39-.LFB39
 6754 0fb2 01       		.uleb128 0x1
 6755 0fb3 9C       		.byte	0x9c
 6756 0fb4 C80F0000 		.4byte	0xfc8
 6757 0fb8 15       		.uleb128 0x15
 6758 0fb9 DE9E0000 		.4byte	.LASF1200
 6759 0fbd 01       		.byte	0x1
 6760 0fbe 0E0C     		.2byte	0xc0e
 6761 0fc0 09050000 		.4byte	0x509
 6762 0fc4 02       		.uleb128 0x2
 6763 0fc5 91       		.byte	0x91
 6764 0fc6 74       		.sleb128 -12
 6765 0fc7 00       		.byte	0
 6766 0fc8 26       		.uleb128 0x26
 6767 0fc9 B5230000 		.4byte	.LASF1280
 6768 0fcd 01       		.byte	0x1
 6769 0fce 230C     		.2byte	0xc23
 6770 0fd0 00000000 		.4byte	.LFB40
 6771 0fd4 48000000 		.4byte	.LFE40-.LFB40
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 187


 6772 0fd8 01       		.uleb128 0x1
 6773 0fd9 9C       		.byte	0x9c
 6774 0fda EE0F0000 		.4byte	0xfee
 6775 0fde 16       		.uleb128 0x16
 6776 0fdf DE9E0000 		.4byte	.LASF1200
 6777 0fe3 01       		.byte	0x1
 6778 0fe4 250C     		.2byte	0xc25
 6779 0fe6 09050000 		.4byte	0x509
 6780 0fea 02       		.uleb128 0x2
 6781 0feb 91       		.byte	0x91
 6782 0fec 74       		.sleb128 -12
 6783 0fed 00       		.byte	0
 6784 0fee 20       		.uleb128 0x20
 6785 0fef 509E0000 		.4byte	.LASF1281
 6786 0ff3 01       		.byte	0x1
 6787 0ff4 3E0C     		.2byte	0xc3e
 6788 0ff6 08020000 		.4byte	0x208
 6789 0ffa 00000000 		.4byte	.LFB41
 6790 0ffe 1C000000 		.4byte	.LFE41-.LFB41
 6791 1002 01       		.uleb128 0x1
 6792 1003 9C       		.byte	0x9c
 6793 1004 18100000 		.4byte	0x1018
 6794 1008 16       		.uleb128 0x16
 6795 1009 24210000 		.4byte	.LASF1197
 6796 100d 01       		.byte	0x1
 6797 100e 400C     		.2byte	0xc40
 6798 1010 08020000 		.4byte	0x208
 6799 1014 02       		.uleb128 0x2
 6800 1015 91       		.byte	0x91
 6801 1016 74       		.sleb128 -12
 6802 1017 00       		.byte	0
 6803 1018 18       		.uleb128 0x18
 6804 1019 88650000 		.4byte	.LASF1282
 6805 101d 01       		.byte	0x1
 6806 101e 6B0C     		.2byte	0xc6b
 6807 1020 00000000 		.4byte	.LFB42
 6808 1024 EC000000 		.4byte	.LFE42-.LFB42
 6809 1028 01       		.uleb128 0x1
 6810 1029 9C       		.byte	0x9c
 6811 102a 4D100000 		.4byte	0x104d
 6812 102e 15       		.uleb128 0x15
 6813 102f 45470000 		.4byte	.LASF1283
 6814 1033 01       		.byte	0x1
 6815 1034 6B0C     		.2byte	0xc6b
 6816 1036 49070000 		.4byte	0x749
 6817 103a 02       		.uleb128 0x2
 6818 103b 91       		.byte	0x91
 6819 103c 6C       		.sleb128 -20
 6820 103d 16       		.uleb128 0x16
 6821 103e DE9E0000 		.4byte	.LASF1200
 6822 1042 01       		.byte	0x1
 6823 1043 6D0C     		.2byte	0xc6d
 6824 1045 93070000 		.4byte	0x793
 6825 1049 02       		.uleb128 0x2
 6826 104a 91       		.byte	0x91
 6827 104b 74       		.sleb128 -12
 6828 104c 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 188


 6829 104d 14       		.uleb128 0x14
 6830 104e 8A0B0000 		.4byte	.LASF1284
 6831 1052 01       		.byte	0x1
 6832 1053 AA0C     		.2byte	0xcaa
 6833 1055 FE000000 		.4byte	0xfe
 6834 1059 00000000 		.4byte	.LFB43
 6835 105d D8000000 		.4byte	.LFE43-.LFB43
 6836 1061 01       		.uleb128 0x1
 6837 1062 9C       		.byte	0x9c
 6838 1063 95100000 		.4byte	0x1095
 6839 1067 15       		.uleb128 0x15
 6840 1068 45470000 		.4byte	.LASF1283
 6841 106c 01       		.byte	0x1
 6842 106d AA0C     		.2byte	0xcaa
 6843 106f 49070000 		.4byte	0x749
 6844 1073 02       		.uleb128 0x2
 6845 1074 91       		.byte	0x91
 6846 1075 6C       		.sleb128 -20
 6847 1076 16       		.uleb128 0x16
 6848 1077 DE9E0000 		.4byte	.LASF1200
 6849 107b 01       		.byte	0x1
 6850 107c AC0C     		.2byte	0xcac
 6851 107e 93070000 		.4byte	0x793
 6852 1082 02       		.uleb128 0x2
 6853 1083 91       		.byte	0x91
 6854 1084 70       		.sleb128 -16
 6855 1085 16       		.uleb128 0x16
 6856 1086 24210000 		.4byte	.LASF1197
 6857 108a 01       		.byte	0x1
 6858 108b AD0C     		.2byte	0xcad
 6859 108d FE000000 		.4byte	0xfe
 6860 1091 02       		.uleb128 0x2
 6861 1092 91       		.byte	0x91
 6862 1093 74       		.sleb128 -12
 6863 1094 00       		.byte	0
 6864 1095 20       		.uleb128 0x20
 6865 1096 73300000 		.4byte	.LASF1285
 6866 109a 01       		.byte	0x1
 6867 109b F80D     		.2byte	0xdf8
 6868 109d 1F010000 		.4byte	0x11f
 6869 10a1 00000000 		.4byte	.LFB44
 6870 10a5 30000000 		.4byte	.LFE44-.LFB44
 6871 10a9 01       		.uleb128 0x1
 6872 10aa 9C       		.byte	0x9c
 6873 10ab BF100000 		.4byte	0x10bf
 6874 10af 16       		.uleb128 0x16
 6875 10b0 200F0000 		.4byte	.LASF1214
 6876 10b4 01       		.byte	0x1
 6877 10b5 FA0D     		.2byte	0xdfa
 6878 10b7 1F010000 		.4byte	0x11f
 6879 10bb 02       		.uleb128 0x2
 6880 10bc 91       		.byte	0x91
 6881 10bd 74       		.sleb128 -12
 6882 10be 00       		.byte	0
 6883 10bf 1C       		.uleb128 0x1c
 6884 10c0 53390000 		.4byte	.LASF1287
 6885 10c4 01       		.byte	0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 189


 6886 10c5 080E     		.2byte	0xe08
 6887 10c7 A2000000 		.4byte	0xa2
 6888 10cb 00000000 		.4byte	.LFB45
 6889 10cf 28000000 		.4byte	.LFE45-.LFB45
 6890 10d3 01       		.uleb128 0x1
 6891 10d4 9C       		.byte	0x9c
 6892 10d5 0F       		.uleb128 0xf
 6893 10d6 FD010000 		.4byte	0x1fd
 6894 10da E5100000 		.4byte	0x10e5
 6895 10de 10       		.uleb128 0x10
 6896 10df 9B000000 		.4byte	0x9b
 6897 10e3 07       		.byte	0x7
 6898 10e4 00       		.byte	0
 6899 10e5 27       		.uleb128 0x27
 6900 10e6 52530000 		.4byte	.LASF1288
 6901 10ea 01       		.byte	0x1
 6902 10eb BF       		.byte	0xbf
 6903 10ec D5100000 		.4byte	0x10d5
 6904 10f0 05       		.uleb128 0x5
 6905 10f1 03       		.byte	0x3
 6906 10f2 00000000 		.4byte	pxReadyTasksLists
 6907 10f6 27       		.uleb128 0x27
 6908 10f7 07980000 		.4byte	.LASF1289
 6909 10fb 01       		.byte	0x1
 6910 10fc C0       		.byte	0xc0
 6911 10fd FD010000 		.4byte	0x1fd
 6912 1101 05       		.uleb128 0x5
 6913 1102 03       		.byte	0x3
 6914 1103 00000000 		.4byte	xDelayedTaskList1
 6915 1107 27       		.uleb128 0x27
 6916 1108 19980000 		.4byte	.LASF1290
 6917 110c 01       		.byte	0x1
 6918 110d C1       		.byte	0xc1
 6919 110e FD010000 		.4byte	0x1fd
 6920 1112 05       		.uleb128 0x5
 6921 1113 03       		.byte	0x3
 6922 1114 00000000 		.4byte	xDelayedTaskList2
 6923 1118 27       		.uleb128 0x27
 6924 1119 B77C0000 		.4byte	.LASF1291
 6925 111d 01       		.byte	0x1
 6926 111e C2       		.byte	0xc2
 6927 111f 29110000 		.4byte	0x1129
 6928 1123 05       		.uleb128 0x5
 6929 1124 03       		.byte	0x3
 6930 1125 00000000 		.4byte	pxDelayedTaskList
 6931 1129 0E       		.uleb128 0xe
 6932 112a E6090000 		.4byte	0x9e6
 6933 112e 27       		.uleb128 0x27
 6934 112f 9E7E0000 		.4byte	.LASF1292
 6935 1133 01       		.byte	0x1
 6936 1134 C3       		.byte	0xc3
 6937 1135 29110000 		.4byte	0x1129
 6938 1139 05       		.uleb128 0x5
 6939 113a 03       		.byte	0x3
 6940 113b 00000000 		.4byte	pxOverflowDelayedTaskList
 6941 113f 27       		.uleb128 0x27
 6942 1140 DA330000 		.4byte	.LASF1293
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 190


 6943 1144 01       		.byte	0x1
 6944 1145 C4       		.byte	0xc4
 6945 1146 FD010000 		.4byte	0x1fd
 6946 114a 05       		.uleb128 0x5
 6947 114b 03       		.byte	0x3
 6948 114c 00000000 		.4byte	xPendingReadyList
 6949 1150 27       		.uleb128 0x27
 6950 1151 80880000 		.4byte	.LASF1294
 6951 1155 01       		.byte	0x1
 6952 1156 C8       		.byte	0xc8
 6953 1157 FD010000 		.4byte	0x1fd
 6954 115b 05       		.uleb128 0x5
 6955 115c 03       		.byte	0x3
 6956 115d 00000000 		.4byte	xTasksWaitingTermination
 6957 1161 27       		.uleb128 0x27
 6958 1162 8C3A0000 		.4byte	.LASF1295
 6959 1166 01       		.byte	0x1
 6960 1167 C9       		.byte	0xc9
 6961 1168 72110000 		.4byte	0x1172
 6962 116c 05       		.uleb128 0x5
 6963 116d 03       		.byte	0x3
 6964 116e 00000000 		.4byte	uxTasksDeleted
 6965 1172 0E       		.uleb128 0xe
 6966 1173 09010000 		.4byte	0x109
 6967 1177 27       		.uleb128 0x27
 6968 1178 3F1C0000 		.4byte	.LASF1296
 6969 117c 01       		.byte	0x1
 6970 117d CF       		.byte	0xcf
 6971 117e FD010000 		.4byte	0x1fd
 6972 1182 05       		.uleb128 0x5
 6973 1183 03       		.byte	0x3
 6974 1184 00000000 		.4byte	xSuspendedTaskList
 6975 1188 27       		.uleb128 0x27
 6976 1189 173D0000 		.4byte	.LASF1297
 6977 118d 01       		.byte	0x1
 6978 118e DA       		.byte	0xda
 6979 118f 72110000 		.4byte	0x1172
 6980 1193 05       		.uleb128 0x5
 6981 1194 03       		.byte	0x3
 6982 1195 00000000 		.4byte	uxCurrentNumberOfTasks
 6983 1199 27       		.uleb128 0x27
 6984 119a 81070000 		.4byte	.LASF1298
 6985 119e 01       		.byte	0x1
 6986 119f DB       		.byte	0xdb
 6987 11a0 AA110000 		.4byte	0x11aa
 6988 11a4 05       		.uleb128 0x5
 6989 11a5 03       		.byte	0x3
 6990 11a6 00000000 		.4byte	xTickCount
 6991 11aa 0E       		.uleb128 0xe
 6992 11ab 1F010000 		.4byte	0x11f
 6993 11af 27       		.uleb128 0x27
 6994 11b0 8C750000 		.4byte	.LASF1299
 6995 11b4 01       		.byte	0x1
 6996 11b5 DC       		.byte	0xdc
 6997 11b6 72110000 		.4byte	0x1172
 6998 11ba 05       		.uleb128 0x5
 6999 11bb 03       		.byte	0x3
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 191


 7000 11bc 00000000 		.4byte	uxTopReadyPriority
 7001 11c0 27       		.uleb128 0x27
 7002 11c1 26270000 		.4byte	.LASF1300
 7003 11c5 01       		.byte	0x1
 7004 11c6 DD       		.byte	0xdd
 7005 11c7 D1110000 		.4byte	0x11d1
 7006 11cb 05       		.uleb128 0x5
 7007 11cc 03       		.byte	0x3
 7008 11cd 00000000 		.4byte	xSchedulerRunning
 7009 11d1 0E       		.uleb128 0xe
 7010 11d2 FE000000 		.4byte	0xfe
 7011 11d6 27       		.uleb128 0x27
 7012 11d7 72240000 		.4byte	.LASF1301
 7013 11db 01       		.byte	0x1
 7014 11dc DE       		.byte	0xde
 7015 11dd 72110000 		.4byte	0x1172
 7016 11e1 05       		.uleb128 0x5
 7017 11e2 03       		.byte	0x3
 7018 11e3 00000000 		.4byte	uxPendedTicks
 7019 11e7 27       		.uleb128 0x27
 7020 11e8 97000000 		.4byte	.LASF1302
 7021 11ec 01       		.byte	0x1
 7022 11ed DF       		.byte	0xdf
 7023 11ee D1110000 		.4byte	0x11d1
 7024 11f2 05       		.uleb128 0x5
 7025 11f3 03       		.byte	0x3
 7026 11f4 00000000 		.4byte	xYieldPending
 7027 11f8 27       		.uleb128 0x27
 7028 11f9 B9200000 		.4byte	.LASF1303
 7029 11fd 01       		.byte	0x1
 7030 11fe E0       		.byte	0xe0
 7031 11ff D1110000 		.4byte	0x11d1
 7032 1203 05       		.uleb128 0x5
 7033 1204 03       		.byte	0x3
 7034 1205 00000000 		.4byte	xNumOfOverflows
 7035 1209 27       		.uleb128 0x27
 7036 120a 8C070000 		.4byte	.LASF1186
 7037 120e 01       		.byte	0x1
 7038 120f E1       		.byte	0xe1
 7039 1210 09010000 		.4byte	0x109
 7040 1214 05       		.uleb128 0x5
 7041 1215 03       		.byte	0x3
 7042 1216 00000000 		.4byte	uxTaskNumber
 7043 121a 27       		.uleb128 0x27
 7044 121b 45320000 		.4byte	.LASF1304
 7045 121f 01       		.byte	0x1
 7046 1220 E2       		.byte	0xe2
 7047 1221 AA110000 		.4byte	0x11aa
 7048 1225 05       		.uleb128 0x5
 7049 1226 03       		.byte	0x3
 7050 1227 00000000 		.4byte	xNextTaskUnblockTime
 7051 122b 27       		.uleb128 0x27
 7052 122c BF100000 		.4byte	.LASF1305
 7053 1230 01       		.byte	0x1
 7054 1231 EC       		.byte	0xec
 7055 1232 72110000 		.4byte	0x1172
 7056 1236 05       		.uleb128 0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 192


 7057 1237 03       		.byte	0x3
 7058 1238 00000000 		.4byte	uxSchedulerSuspended
 7059 123c 28       		.uleb128 0x28
 7060 123d 61150000 		.4byte	.LASF1312
 7061 1241 01       		.byte	0x1
 7062 1242 BC       		.byte	0xbc
 7063 1243 4D120000 		.4byte	0x124d
 7064 1247 05       		.uleb128 0x5
 7065 1248 03       		.byte	0x3
 7066 1249 00000000 		.4byte	pxCurrentTCB
 7067 124d 0E       		.uleb128 0xe
 7068 124e 09050000 		.4byte	0x509
 7069 1252 00       		.byte	0
 7070              		.section	.debug_abbrev,"",%progbits
 7071              	.Ldebug_abbrev0:
 7072 0000 01       		.uleb128 0x1
 7073 0001 11       		.uleb128 0x11
 7074 0002 01       		.byte	0x1
 7075 0003 25       		.uleb128 0x25
 7076 0004 0E       		.uleb128 0xe
 7077 0005 13       		.uleb128 0x13
 7078 0006 0B       		.uleb128 0xb
 7079 0007 03       		.uleb128 0x3
 7080 0008 0E       		.uleb128 0xe
 7081 0009 1B       		.uleb128 0x1b
 7082 000a 0E       		.uleb128 0xe
 7083 000b 55       		.uleb128 0x55
 7084 000c 17       		.uleb128 0x17
 7085 000d 11       		.uleb128 0x11
 7086 000e 01       		.uleb128 0x1
 7087 000f 10       		.uleb128 0x10
 7088 0010 17       		.uleb128 0x17
 7089 0011 9942     		.uleb128 0x2119
 7090 0013 17       		.uleb128 0x17
 7091 0014 00       		.byte	0
 7092 0015 00       		.byte	0
 7093 0016 02       		.uleb128 0x2
 7094 0017 16       		.uleb128 0x16
 7095 0018 00       		.byte	0
 7096 0019 03       		.uleb128 0x3
 7097 001a 0E       		.uleb128 0xe
 7098 001b 3A       		.uleb128 0x3a
 7099 001c 0B       		.uleb128 0xb
 7100 001d 3B       		.uleb128 0x3b
 7101 001e 0B       		.uleb128 0xb
 7102 001f 49       		.uleb128 0x49
 7103 0020 13       		.uleb128 0x13
 7104 0021 00       		.byte	0
 7105 0022 00       		.byte	0
 7106 0023 03       		.uleb128 0x3
 7107 0024 24       		.uleb128 0x24
 7108 0025 00       		.byte	0
 7109 0026 0B       		.uleb128 0xb
 7110 0027 0B       		.uleb128 0xb
 7111 0028 3E       		.uleb128 0x3e
 7112 0029 0B       		.uleb128 0xb
 7113 002a 03       		.uleb128 0x3
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 193


 7114 002b 0E       		.uleb128 0xe
 7115 002c 00       		.byte	0
 7116 002d 00       		.byte	0
 7117 002e 04       		.uleb128 0x4
 7118 002f 24       		.uleb128 0x24
 7119 0030 00       		.byte	0
 7120 0031 0B       		.uleb128 0xb
 7121 0032 0B       		.uleb128 0xb
 7122 0033 3E       		.uleb128 0x3e
 7123 0034 0B       		.uleb128 0xb
 7124 0035 03       		.uleb128 0x3
 7125 0036 08       		.uleb128 0x8
 7126 0037 00       		.byte	0
 7127 0038 00       		.byte	0
 7128 0039 05       		.uleb128 0x5
 7129 003a 0F       		.uleb128 0xf
 7130 003b 00       		.byte	0
 7131 003c 0B       		.uleb128 0xb
 7132 003d 0B       		.uleb128 0xb
 7133 003e 00       		.byte	0
 7134 003f 00       		.byte	0
 7135 0040 06       		.uleb128 0x6
 7136 0041 0F       		.uleb128 0xf
 7137 0042 00       		.byte	0
 7138 0043 0B       		.uleb128 0xb
 7139 0044 0B       		.uleb128 0xb
 7140 0045 49       		.uleb128 0x49
 7141 0046 13       		.uleb128 0x13
 7142 0047 00       		.byte	0
 7143 0048 00       		.byte	0
 7144 0049 07       		.uleb128 0x7
 7145 004a 26       		.uleb128 0x26
 7146 004b 00       		.byte	0
 7147 004c 49       		.uleb128 0x49
 7148 004d 13       		.uleb128 0x13
 7149 004e 00       		.byte	0
 7150 004f 00       		.byte	0
 7151 0050 08       		.uleb128 0x8
 7152 0051 15       		.uleb128 0x15
 7153 0052 01       		.byte	0x1
 7154 0053 27       		.uleb128 0x27
 7155 0054 19       		.uleb128 0x19
 7156 0055 01       		.uleb128 0x1
 7157 0056 13       		.uleb128 0x13
 7158 0057 00       		.byte	0
 7159 0058 00       		.byte	0
 7160 0059 09       		.uleb128 0x9
 7161 005a 05       		.uleb128 0x5
 7162 005b 00       		.byte	0
 7163 005c 49       		.uleb128 0x49
 7164 005d 13       		.uleb128 0x13
 7165 005e 00       		.byte	0
 7166 005f 00       		.byte	0
 7167 0060 0A       		.uleb128 0xa
 7168 0061 13       		.uleb128 0x13
 7169 0062 01       		.byte	0x1
 7170 0063 03       		.uleb128 0x3
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 194


 7171 0064 0E       		.uleb128 0xe
 7172 0065 0B       		.uleb128 0xb
 7173 0066 0B       		.uleb128 0xb
 7174 0067 3A       		.uleb128 0x3a
 7175 0068 0B       		.uleb128 0xb
 7176 0069 3B       		.uleb128 0x3b
 7177 006a 0B       		.uleb128 0xb
 7178 006b 01       		.uleb128 0x1
 7179 006c 13       		.uleb128 0x13
 7180 006d 00       		.byte	0
 7181 006e 00       		.byte	0
 7182 006f 0B       		.uleb128 0xb
 7183 0070 0D       		.uleb128 0xd
 7184 0071 00       		.byte	0
 7185 0072 03       		.uleb128 0x3
 7186 0073 0E       		.uleb128 0xe
 7187 0074 3A       		.uleb128 0x3a
 7188 0075 0B       		.uleb128 0xb
 7189 0076 3B       		.uleb128 0x3b
 7190 0077 0B       		.uleb128 0xb
 7191 0078 49       		.uleb128 0x49
 7192 0079 13       		.uleb128 0x13
 7193 007a 38       		.uleb128 0x38
 7194 007b 0B       		.uleb128 0xb
 7195 007c 00       		.byte	0
 7196 007d 00       		.byte	0
 7197 007e 0C       		.uleb128 0xc
 7198 007f 04       		.uleb128 0x4
 7199 0080 01       		.byte	0x1
 7200 0081 0B       		.uleb128 0xb
 7201 0082 0B       		.uleb128 0xb
 7202 0083 49       		.uleb128 0x49
 7203 0084 13       		.uleb128 0x13
 7204 0085 3A       		.uleb128 0x3a
 7205 0086 0B       		.uleb128 0xb
 7206 0087 3B       		.uleb128 0x3b
 7207 0088 0B       		.uleb128 0xb
 7208 0089 01       		.uleb128 0x1
 7209 008a 13       		.uleb128 0x13
 7210 008b 00       		.byte	0
 7211 008c 00       		.byte	0
 7212 008d 0D       		.uleb128 0xd
 7213 008e 28       		.uleb128 0x28
 7214 008f 00       		.byte	0
 7215 0090 03       		.uleb128 0x3
 7216 0091 0E       		.uleb128 0xe
 7217 0092 1C       		.uleb128 0x1c
 7218 0093 0B       		.uleb128 0xb
 7219 0094 00       		.byte	0
 7220 0095 00       		.byte	0
 7221 0096 0E       		.uleb128 0xe
 7222 0097 35       		.uleb128 0x35
 7223 0098 00       		.byte	0
 7224 0099 49       		.uleb128 0x49
 7225 009a 13       		.uleb128 0x13
 7226 009b 00       		.byte	0
 7227 009c 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 195


 7228 009d 0F       		.uleb128 0xf
 7229 009e 01       		.uleb128 0x1
 7230 009f 01       		.byte	0x1
 7231 00a0 49       		.uleb128 0x49
 7232 00a1 13       		.uleb128 0x13
 7233 00a2 01       		.uleb128 0x1
 7234 00a3 13       		.uleb128 0x13
 7235 00a4 00       		.byte	0
 7236 00a5 00       		.byte	0
 7237 00a6 10       		.uleb128 0x10
 7238 00a7 21       		.uleb128 0x21
 7239 00a8 00       		.byte	0
 7240 00a9 49       		.uleb128 0x49
 7241 00aa 13       		.uleb128 0x13
 7242 00ab 2F       		.uleb128 0x2f
 7243 00ac 0B       		.uleb128 0xb
 7244 00ad 00       		.byte	0
 7245 00ae 00       		.byte	0
 7246 00af 11       		.uleb128 0x11
 7247 00b0 2E       		.uleb128 0x2e
 7248 00b1 01       		.byte	0x1
 7249 00b2 03       		.uleb128 0x3
 7250 00b3 0E       		.uleb128 0xe
 7251 00b4 3A       		.uleb128 0x3a
 7252 00b5 0B       		.uleb128 0xb
 7253 00b6 3B       		.uleb128 0x3b
 7254 00b7 0B       		.uleb128 0xb
 7255 00b8 27       		.uleb128 0x27
 7256 00b9 19       		.uleb128 0x19
 7257 00ba 49       		.uleb128 0x49
 7258 00bb 13       		.uleb128 0x13
 7259 00bc 20       		.uleb128 0x20
 7260 00bd 0B       		.uleb128 0xb
 7261 00be 01       		.uleb128 0x1
 7262 00bf 13       		.uleb128 0x13
 7263 00c0 00       		.byte	0
 7264 00c1 00       		.byte	0
 7265 00c2 12       		.uleb128 0x12
 7266 00c3 05       		.uleb128 0x5
 7267 00c4 00       		.byte	0
 7268 00c5 03       		.uleb128 0x3
 7269 00c6 0E       		.uleb128 0xe
 7270 00c7 3A       		.uleb128 0x3a
 7271 00c8 0B       		.uleb128 0xb
 7272 00c9 3B       		.uleb128 0x3b
 7273 00ca 0B       		.uleb128 0xb
 7274 00cb 49       		.uleb128 0x49
 7275 00cc 13       		.uleb128 0x13
 7276 00cd 00       		.byte	0
 7277 00ce 00       		.byte	0
 7278 00cf 13       		.uleb128 0x13
 7279 00d0 34       		.uleb128 0x34
 7280 00d1 00       		.byte	0
 7281 00d2 03       		.uleb128 0x3
 7282 00d3 0E       		.uleb128 0xe
 7283 00d4 3A       		.uleb128 0x3a
 7284 00d5 0B       		.uleb128 0xb
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 196


 7285 00d6 3B       		.uleb128 0x3b
 7286 00d7 0B       		.uleb128 0xb
 7287 00d8 49       		.uleb128 0x49
 7288 00d9 13       		.uleb128 0x13
 7289 00da 00       		.byte	0
 7290 00db 00       		.byte	0
 7291 00dc 14       		.uleb128 0x14
 7292 00dd 2E       		.uleb128 0x2e
 7293 00de 01       		.byte	0x1
 7294 00df 3F       		.uleb128 0x3f
 7295 00e0 19       		.uleb128 0x19
 7296 00e1 03       		.uleb128 0x3
 7297 00e2 0E       		.uleb128 0xe
 7298 00e3 3A       		.uleb128 0x3a
 7299 00e4 0B       		.uleb128 0xb
 7300 00e5 3B       		.uleb128 0x3b
 7301 00e6 05       		.uleb128 0x5
 7302 00e7 27       		.uleb128 0x27
 7303 00e8 19       		.uleb128 0x19
 7304 00e9 49       		.uleb128 0x49
 7305 00ea 13       		.uleb128 0x13
 7306 00eb 11       		.uleb128 0x11
 7307 00ec 01       		.uleb128 0x1
 7308 00ed 12       		.uleb128 0x12
 7309 00ee 06       		.uleb128 0x6
 7310 00ef 40       		.uleb128 0x40
 7311 00f0 18       		.uleb128 0x18
 7312 00f1 9642     		.uleb128 0x2116
 7313 00f3 19       		.uleb128 0x19
 7314 00f4 01       		.uleb128 0x1
 7315 00f5 13       		.uleb128 0x13
 7316 00f6 00       		.byte	0
 7317 00f7 00       		.byte	0
 7318 00f8 15       		.uleb128 0x15
 7319 00f9 05       		.uleb128 0x5
 7320 00fa 00       		.byte	0
 7321 00fb 03       		.uleb128 0x3
 7322 00fc 0E       		.uleb128 0xe
 7323 00fd 3A       		.uleb128 0x3a
 7324 00fe 0B       		.uleb128 0xb
 7325 00ff 3B       		.uleb128 0x3b
 7326 0100 05       		.uleb128 0x5
 7327 0101 49       		.uleb128 0x49
 7328 0102 13       		.uleb128 0x13
 7329 0103 02       		.uleb128 0x2
 7330 0104 18       		.uleb128 0x18
 7331 0105 00       		.byte	0
 7332 0106 00       		.byte	0
 7333 0107 16       		.uleb128 0x16
 7334 0108 34       		.uleb128 0x34
 7335 0109 00       		.byte	0
 7336 010a 03       		.uleb128 0x3
 7337 010b 0E       		.uleb128 0xe
 7338 010c 3A       		.uleb128 0x3a
 7339 010d 0B       		.uleb128 0xb
 7340 010e 3B       		.uleb128 0x3b
 7341 010f 05       		.uleb128 0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 197


 7342 0110 49       		.uleb128 0x49
 7343 0111 13       		.uleb128 0x13
 7344 0112 02       		.uleb128 0x2
 7345 0113 18       		.uleb128 0x18
 7346 0114 00       		.byte	0
 7347 0115 00       		.byte	0
 7348 0116 17       		.uleb128 0x17
 7349 0117 0B       		.uleb128 0xb
 7350 0118 01       		.byte	0x1
 7351 0119 11       		.uleb128 0x11
 7352 011a 01       		.uleb128 0x1
 7353 011b 12       		.uleb128 0x12
 7354 011c 06       		.uleb128 0x6
 7355 011d 00       		.byte	0
 7356 011e 00       		.byte	0
 7357 011f 18       		.uleb128 0x18
 7358 0120 2E       		.uleb128 0x2e
 7359 0121 01       		.byte	0x1
 7360 0122 3F       		.uleb128 0x3f
 7361 0123 19       		.uleb128 0x19
 7362 0124 03       		.uleb128 0x3
 7363 0125 0E       		.uleb128 0xe
 7364 0126 3A       		.uleb128 0x3a
 7365 0127 0B       		.uleb128 0xb
 7366 0128 3B       		.uleb128 0x3b
 7367 0129 05       		.uleb128 0x5
 7368 012a 27       		.uleb128 0x27
 7369 012b 19       		.uleb128 0x19
 7370 012c 11       		.uleb128 0x11
 7371 012d 01       		.uleb128 0x1
 7372 012e 12       		.uleb128 0x12
 7373 012f 06       		.uleb128 0x6
 7374 0130 40       		.uleb128 0x40
 7375 0131 18       		.uleb128 0x18
 7376 0132 9642     		.uleb128 0x2116
 7377 0134 19       		.uleb128 0x19
 7378 0135 01       		.uleb128 0x1
 7379 0136 13       		.uleb128 0x13
 7380 0137 00       		.byte	0
 7381 0138 00       		.byte	0
 7382 0139 19       		.uleb128 0x19
 7383 013a 2E       		.uleb128 0x2e
 7384 013b 01       		.byte	0x1
 7385 013c 03       		.uleb128 0x3
 7386 013d 0E       		.uleb128 0xe
 7387 013e 3A       		.uleb128 0x3a
 7388 013f 0B       		.uleb128 0xb
 7389 0140 3B       		.uleb128 0x3b
 7390 0141 05       		.uleb128 0x5
 7391 0142 27       		.uleb128 0x27
 7392 0143 19       		.uleb128 0x19
 7393 0144 49       		.uleb128 0x49
 7394 0145 13       		.uleb128 0x13
 7395 0146 11       		.uleb128 0x11
 7396 0147 01       		.uleb128 0x1
 7397 0148 12       		.uleb128 0x12
 7398 0149 06       		.uleb128 0x6
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 198


 7399 014a 40       		.uleb128 0x40
 7400 014b 18       		.uleb128 0x18
 7401 014c 9642     		.uleb128 0x2116
 7402 014e 19       		.uleb128 0x19
 7403 014f 01       		.uleb128 0x1
 7404 0150 13       		.uleb128 0x13
 7405 0151 00       		.byte	0
 7406 0152 00       		.byte	0
 7407 0153 1A       		.uleb128 0x1a
 7408 0154 2E       		.uleb128 0x2e
 7409 0155 00       		.byte	0
 7410 0156 3F       		.uleb128 0x3f
 7411 0157 19       		.uleb128 0x19
 7412 0158 03       		.uleb128 0x3
 7413 0159 0E       		.uleb128 0xe
 7414 015a 3A       		.uleb128 0x3a
 7415 015b 0B       		.uleb128 0xb
 7416 015c 3B       		.uleb128 0x3b
 7417 015d 05       		.uleb128 0x5
 7418 015e 27       		.uleb128 0x27
 7419 015f 19       		.uleb128 0x19
 7420 0160 11       		.uleb128 0x11
 7421 0161 01       		.uleb128 0x1
 7422 0162 12       		.uleb128 0x12
 7423 0163 06       		.uleb128 0x6
 7424 0164 40       		.uleb128 0x40
 7425 0165 18       		.uleb128 0x18
 7426 0166 9642     		.uleb128 0x2116
 7427 0168 19       		.uleb128 0x19
 7428 0169 00       		.byte	0
 7429 016a 00       		.byte	0
 7430 016b 1B       		.uleb128 0x1b
 7431 016c 2E       		.uleb128 0x2e
 7432 016d 00       		.byte	0
 7433 016e 3F       		.uleb128 0x3f
 7434 016f 19       		.uleb128 0x19
 7435 0170 03       		.uleb128 0x3
 7436 0171 0E       		.uleb128 0xe
 7437 0172 3A       		.uleb128 0x3a
 7438 0173 0B       		.uleb128 0xb
 7439 0174 3B       		.uleb128 0x3b
 7440 0175 05       		.uleb128 0x5
 7441 0176 27       		.uleb128 0x27
 7442 0177 19       		.uleb128 0x19
 7443 0178 11       		.uleb128 0x11
 7444 0179 01       		.uleb128 0x1
 7445 017a 12       		.uleb128 0x12
 7446 017b 06       		.uleb128 0x6
 7447 017c 40       		.uleb128 0x40
 7448 017d 18       		.uleb128 0x18
 7449 017e 9742     		.uleb128 0x2117
 7450 0180 19       		.uleb128 0x19
 7451 0181 00       		.byte	0
 7452 0182 00       		.byte	0
 7453 0183 1C       		.uleb128 0x1c
 7454 0184 2E       		.uleb128 0x2e
 7455 0185 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 199


 7456 0186 3F       		.uleb128 0x3f
 7457 0187 19       		.uleb128 0x19
 7458 0188 03       		.uleb128 0x3
 7459 0189 0E       		.uleb128 0xe
 7460 018a 3A       		.uleb128 0x3a
 7461 018b 0B       		.uleb128 0xb
 7462 018c 3B       		.uleb128 0x3b
 7463 018d 05       		.uleb128 0x5
 7464 018e 27       		.uleb128 0x27
 7465 018f 19       		.uleb128 0x19
 7466 0190 49       		.uleb128 0x49
 7467 0191 13       		.uleb128 0x13
 7468 0192 11       		.uleb128 0x11
 7469 0193 01       		.uleb128 0x1
 7470 0194 12       		.uleb128 0x12
 7471 0195 06       		.uleb128 0x6
 7472 0196 40       		.uleb128 0x40
 7473 0197 18       		.uleb128 0x18
 7474 0198 9742     		.uleb128 0x2117
 7475 019a 19       		.uleb128 0x19
 7476 019b 00       		.byte	0
 7477 019c 00       		.byte	0
 7478 019d 1D       		.uleb128 0x1d
 7479 019e 1D       		.uleb128 0x1d
 7480 019f 01       		.byte	0x1
 7481 01a0 31       		.uleb128 0x31
 7482 01a1 13       		.uleb128 0x13
 7483 01a2 11       		.uleb128 0x11
 7484 01a3 01       		.uleb128 0x1
 7485 01a4 12       		.uleb128 0x12
 7486 01a5 06       		.uleb128 0x6
 7487 01a6 58       		.uleb128 0x58
 7488 01a7 0B       		.uleb128 0xb
 7489 01a8 59       		.uleb128 0x59
 7490 01a9 05       		.uleb128 0x5
 7491 01aa 01       		.uleb128 0x1
 7492 01ab 13       		.uleb128 0x13
 7493 01ac 00       		.byte	0
 7494 01ad 00       		.byte	0
 7495 01ae 1E       		.uleb128 0x1e
 7496 01af 05       		.uleb128 0x5
 7497 01b0 00       		.byte	0
 7498 01b1 31       		.uleb128 0x31
 7499 01b2 13       		.uleb128 0x13
 7500 01b3 02       		.uleb128 0x2
 7501 01b4 18       		.uleb128 0x18
 7502 01b5 00       		.byte	0
 7503 01b6 00       		.byte	0
 7504 01b7 1F       		.uleb128 0x1f
 7505 01b8 34       		.uleb128 0x34
 7506 01b9 00       		.byte	0
 7507 01ba 31       		.uleb128 0x31
 7508 01bb 13       		.uleb128 0x13
 7509 01bc 02       		.uleb128 0x2
 7510 01bd 18       		.uleb128 0x18
 7511 01be 00       		.byte	0
 7512 01bf 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 200


 7513 01c0 20       		.uleb128 0x20
 7514 01c1 2E       		.uleb128 0x2e
 7515 01c2 01       		.byte	0x1
 7516 01c3 3F       		.uleb128 0x3f
 7517 01c4 19       		.uleb128 0x19
 7518 01c5 03       		.uleb128 0x3
 7519 01c6 0E       		.uleb128 0xe
 7520 01c7 3A       		.uleb128 0x3a
 7521 01c8 0B       		.uleb128 0xb
 7522 01c9 3B       		.uleb128 0x3b
 7523 01ca 05       		.uleb128 0x5
 7524 01cb 27       		.uleb128 0x27
 7525 01cc 19       		.uleb128 0x19
 7526 01cd 49       		.uleb128 0x49
 7527 01ce 13       		.uleb128 0x13
 7528 01cf 11       		.uleb128 0x11
 7529 01d0 01       		.uleb128 0x1
 7530 01d1 12       		.uleb128 0x12
 7531 01d2 06       		.uleb128 0x6
 7532 01d3 40       		.uleb128 0x40
 7533 01d4 18       		.uleb128 0x18
 7534 01d5 9742     		.uleb128 0x2117
 7535 01d7 19       		.uleb128 0x19
 7536 01d8 01       		.uleb128 0x1
 7537 01d9 13       		.uleb128 0x13
 7538 01da 00       		.byte	0
 7539 01db 00       		.byte	0
 7540 01dc 21       		.uleb128 0x21
 7541 01dd 2E       		.uleb128 0x2e
 7542 01de 01       		.byte	0x1
 7543 01df 3F       		.uleb128 0x3f
 7544 01e0 19       		.uleb128 0x19
 7545 01e1 03       		.uleb128 0x3
 7546 01e2 0E       		.uleb128 0xe
 7547 01e3 3A       		.uleb128 0x3a
 7548 01e4 0B       		.uleb128 0xb
 7549 01e5 3B       		.uleb128 0x3b
 7550 01e6 05       		.uleb128 0x5
 7551 01e7 27       		.uleb128 0x27
 7552 01e8 19       		.uleb128 0x19
 7553 01e9 11       		.uleb128 0x11
 7554 01ea 01       		.uleb128 0x1
 7555 01eb 12       		.uleb128 0x12
 7556 01ec 06       		.uleb128 0x6
 7557 01ed 40       		.uleb128 0x40
 7558 01ee 18       		.uleb128 0x18
 7559 01ef 9742     		.uleb128 0x2117
 7560 01f1 19       		.uleb128 0x19
 7561 01f2 01       		.uleb128 0x1
 7562 01f3 13       		.uleb128 0x13
 7563 01f4 00       		.byte	0
 7564 01f5 00       		.byte	0
 7565 01f6 22       		.uleb128 0x22
 7566 01f7 2E       		.uleb128 0x2e
 7567 01f8 01       		.byte	0x1
 7568 01f9 03       		.uleb128 0x3
 7569 01fa 0E       		.uleb128 0xe
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 201


 7570 01fb 3A       		.uleb128 0x3a
 7571 01fc 0B       		.uleb128 0xb
 7572 01fd 3B       		.uleb128 0x3b
 7573 01fe 05       		.uleb128 0x5
 7574 01ff 27       		.uleb128 0x27
 7575 0200 19       		.uleb128 0x19
 7576 0201 11       		.uleb128 0x11
 7577 0202 01       		.uleb128 0x1
 7578 0203 12       		.uleb128 0x12
 7579 0204 06       		.uleb128 0x6
 7580 0205 40       		.uleb128 0x40
 7581 0206 18       		.uleb128 0x18
 7582 0207 9642     		.uleb128 0x2116
 7583 0209 19       		.uleb128 0x19
 7584 020a 01       		.uleb128 0x1
 7585 020b 13       		.uleb128 0x13
 7586 020c 00       		.byte	0
 7587 020d 00       		.byte	0
 7588 020e 23       		.uleb128 0x23
 7589 020f 34       		.uleb128 0x34
 7590 0210 00       		.byte	0
 7591 0211 03       		.uleb128 0x3
 7592 0212 08       		.uleb128 0x8
 7593 0213 3A       		.uleb128 0x3a
 7594 0214 0B       		.uleb128 0xb
 7595 0215 3B       		.uleb128 0x3b
 7596 0216 05       		.uleb128 0x5
 7597 0217 49       		.uleb128 0x49
 7598 0218 13       		.uleb128 0x13
 7599 0219 02       		.uleb128 0x2
 7600 021a 18       		.uleb128 0x18
 7601 021b 00       		.byte	0
 7602 021c 00       		.byte	0
 7603 021d 24       		.uleb128 0x24
 7604 021e 0B       		.uleb128 0xb
 7605 021f 01       		.byte	0x1
 7606 0220 11       		.uleb128 0x11
 7607 0221 01       		.uleb128 0x1
 7608 0222 12       		.uleb128 0x12
 7609 0223 06       		.uleb128 0x6
 7610 0224 01       		.uleb128 0x1
 7611 0225 13       		.uleb128 0x13
 7612 0226 00       		.byte	0
 7613 0227 00       		.byte	0
 7614 0228 25       		.uleb128 0x25
 7615 0229 2E       		.uleb128 0x2e
 7616 022a 01       		.byte	0x1
 7617 022b 03       		.uleb128 0x3
 7618 022c 0E       		.uleb128 0xe
 7619 022d 3A       		.uleb128 0x3a
 7620 022e 0B       		.uleb128 0xb
 7621 022f 3B       		.uleb128 0x3b
 7622 0230 05       		.uleb128 0x5
 7623 0231 27       		.uleb128 0x27
 7624 0232 19       		.uleb128 0x19
 7625 0233 49       		.uleb128 0x49
 7626 0234 13       		.uleb128 0x13
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 202


 7627 0235 11       		.uleb128 0x11
 7628 0236 01       		.uleb128 0x1
 7629 0237 12       		.uleb128 0x12
 7630 0238 06       		.uleb128 0x6
 7631 0239 40       		.uleb128 0x40
 7632 023a 18       		.uleb128 0x18
 7633 023b 9742     		.uleb128 0x2117
 7634 023d 19       		.uleb128 0x19
 7635 023e 01       		.uleb128 0x1
 7636 023f 13       		.uleb128 0x13
 7637 0240 00       		.byte	0
 7638 0241 00       		.byte	0
 7639 0242 26       		.uleb128 0x26
 7640 0243 2E       		.uleb128 0x2e
 7641 0244 01       		.byte	0x1
 7642 0245 03       		.uleb128 0x3
 7643 0246 0E       		.uleb128 0xe
 7644 0247 3A       		.uleb128 0x3a
 7645 0248 0B       		.uleb128 0xb
 7646 0249 3B       		.uleb128 0x3b
 7647 024a 05       		.uleb128 0x5
 7648 024b 27       		.uleb128 0x27
 7649 024c 19       		.uleb128 0x19
 7650 024d 11       		.uleb128 0x11
 7651 024e 01       		.uleb128 0x1
 7652 024f 12       		.uleb128 0x12
 7653 0250 06       		.uleb128 0x6
 7654 0251 40       		.uleb128 0x40
 7655 0252 18       		.uleb128 0x18
 7656 0253 9742     		.uleb128 0x2117
 7657 0255 19       		.uleb128 0x19
 7658 0256 01       		.uleb128 0x1
 7659 0257 13       		.uleb128 0x13
 7660 0258 00       		.byte	0
 7661 0259 00       		.byte	0
 7662 025a 27       		.uleb128 0x27
 7663 025b 34       		.uleb128 0x34
 7664 025c 00       		.byte	0
 7665 025d 03       		.uleb128 0x3
 7666 025e 0E       		.uleb128 0xe
 7667 025f 3A       		.uleb128 0x3a
 7668 0260 0B       		.uleb128 0xb
 7669 0261 3B       		.uleb128 0x3b
 7670 0262 0B       		.uleb128 0xb
 7671 0263 49       		.uleb128 0x49
 7672 0264 13       		.uleb128 0x13
 7673 0265 02       		.uleb128 0x2
 7674 0266 18       		.uleb128 0x18
 7675 0267 00       		.byte	0
 7676 0268 00       		.byte	0
 7677 0269 28       		.uleb128 0x28
 7678 026a 34       		.uleb128 0x34
 7679 026b 00       		.byte	0
 7680 026c 03       		.uleb128 0x3
 7681 026d 0E       		.uleb128 0xe
 7682 026e 3A       		.uleb128 0x3a
 7683 026f 0B       		.uleb128 0xb
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 203


 7684 0270 3B       		.uleb128 0x3b
 7685 0271 0B       		.uleb128 0xb
 7686 0272 49       		.uleb128 0x49
 7687 0273 13       		.uleb128 0x13
 7688 0274 3F       		.uleb128 0x3f
 7689 0275 19       		.uleb128 0x19
 7690 0276 02       		.uleb128 0x2
 7691 0277 18       		.uleb128 0x18
 7692 0278 00       		.byte	0
 7693 0279 00       		.byte	0
 7694 027a 00       		.byte	0
 7695              		.section	.debug_aranges,"",%progbits
 7696 0000 7C010000 		.4byte	0x17c
 7697 0004 0200     		.2byte	0x2
 7698 0006 00000000 		.4byte	.Ldebug_info0
 7699 000a 04       		.byte	0x4
 7700 000b 00       		.byte	0
 7701 000c 0000     		.2byte	0
 7702 000e 0000     		.2byte	0
 7703 0010 00000000 		.4byte	.LFB1
 7704 0014 64010000 		.4byte	.LFE1-.LFB1
 7705 0018 00000000 		.4byte	.LFB2
 7706 001c E8000000 		.4byte	.LFE2-.LFB2
 7707 0020 00000000 		.4byte	.LFB3
 7708 0024 E4000000 		.4byte	.LFE3-.LFB3
 7709 0028 00000000 		.4byte	.LFB4
 7710 002c 88000000 		.4byte	.LFE4-.LFB4
 7711 0030 00000000 		.4byte	.LFB5
 7712 0034 34000000 		.4byte	.LFE5-.LFB5
 7713 0038 00000000 		.4byte	.LFB6
 7714 003c 3C010000 		.4byte	.LFE6-.LFB6
 7715 0040 00000000 		.4byte	.LFB7
 7716 0044 F4000000 		.4byte	.LFE7-.LFB7
 7717 0048 00000000 		.4byte	.LFB8
 7718 004c 64000000 		.4byte	.LFE8-.LFB8
 7719 0050 00000000 		.4byte	.LFB9
 7720 0054 9C000000 		.4byte	.LFE9-.LFB9
 7721 0058 00000000 		.4byte	.LFB10
 7722 005c B8000000 		.4byte	.LFE10-.LFB10
 7723 0060 00000000 		.4byte	.LFB11
 7724 0064 68000000 		.4byte	.LFE11-.LFB11
 7725 0068 00000000 		.4byte	.LFB12
 7726 006c 1C000000 		.4byte	.LFE12-.LFB12
 7727 0070 00000000 		.4byte	.LFB13
 7728 0074 1C000000 		.4byte	.LFE13-.LFB13
 7729 0078 00000000 		.4byte	.LFB14
 7730 007c 08010000 		.4byte	.LFE14-.LFB14
 7731 0080 00000000 		.4byte	.LFB15
 7732 0084 24000000 		.4byte	.LFE15-.LFB15
 7733 0088 00000000 		.4byte	.LFB16
 7734 008c 2C000000 		.4byte	.LFE16-.LFB16
 7735 0090 00000000 		.4byte	.LFB17
 7736 0094 14000000 		.4byte	.LFE17-.LFB17
 7737 0098 00000000 		.4byte	.LFB18
 7738 009c F4000000 		.4byte	.LFE18-.LFB18
 7739 00a0 00000000 		.4byte	.LFB19
 7740 00a4 7C010000 		.4byte	.LFE19-.LFB19
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 204


 7741 00a8 00000000 		.4byte	.LFB20
 7742 00ac A4000000 		.4byte	.LFE20-.LFB20
 7743 00b0 00000000 		.4byte	.LFB21
 7744 00b4 90000000 		.4byte	.LFE21-.LFB21
 7745 00b8 00000000 		.4byte	.LFB22
 7746 00bc B0000000 		.4byte	.LFE22-.LFB22
 7747 00c0 00000000 		.4byte	.LFB23
 7748 00c4 B4000000 		.4byte	.LFE23-.LFB23
 7749 00c8 00000000 		.4byte	.LFB24
 7750 00cc B0000000 		.4byte	.LFE24-.LFB24
 7751 00d0 00000000 		.4byte	.LFB25
 7752 00d4 34000000 		.4byte	.LFE25-.LFB25
 7753 00d8 00000000 		.4byte	.LFB26
 7754 00dc A0000000 		.4byte	.LFE26-.LFB26
 7755 00e0 00000000 		.4byte	.LFB27
 7756 00e4 18000000 		.4byte	.LFE27-.LFB27
 7757 00e8 00000000 		.4byte	.LFB28
 7758 00ec 2A000000 		.4byte	.LFE28-.LFB28
 7759 00f0 00000000 		.4byte	.LFB29
 7760 00f4 24000000 		.4byte	.LFE29-.LFB29
 7761 00f8 00000000 		.4byte	.LFB30
 7762 00fc 0E000000 		.4byte	.LFE30-.LFB30
 7763 0100 00000000 		.4byte	.LFB31
 7764 0104 9A000000 		.4byte	.LFE31-.LFB31
 7765 0108 00000000 		.4byte	.LFB32
 7766 010c 80000000 		.4byte	.LFE32-.LFB32
 7767 0110 00000000 		.4byte	.LFB33
 7768 0114 78000000 		.4byte	.LFE33-.LFB33
 7769 0118 00000000 		.4byte	.LFB34
 7770 011c 6C000000 		.4byte	.LFE34-.LFB34
 7771 0120 00000000 		.4byte	.LFB35
 7772 0124 62000000 		.4byte	.LFE35-.LFB35
 7773 0128 00000000 		.4byte	.LFB36
 7774 012c 16010000 		.4byte	.LFE36-.LFB36
 7775 0130 00000000 		.4byte	.LFB37
 7776 0134 36000000 		.4byte	.LFE37-.LFB37
 7777 0138 00000000 		.4byte	.LFB38
 7778 013c 38000000 		.4byte	.LFE38-.LFB38
 7779 0140 00000000 		.4byte	.LFB39
 7780 0144 20000000 		.4byte	.LFE39-.LFB39
 7781 0148 00000000 		.4byte	.LFB40
 7782 014c 48000000 		.4byte	.LFE40-.LFB40
 7783 0150 00000000 		.4byte	.LFB41
 7784 0154 1C000000 		.4byte	.LFE41-.LFB41
 7785 0158 00000000 		.4byte	.LFB42
 7786 015c EC000000 		.4byte	.LFE42-.LFB42
 7787 0160 00000000 		.4byte	.LFB43
 7788 0164 D8000000 		.4byte	.LFE43-.LFB43
 7789 0168 00000000 		.4byte	.LFB44
 7790 016c 30000000 		.4byte	.LFE44-.LFB44
 7791 0170 00000000 		.4byte	.LFB45
 7792 0174 28000000 		.4byte	.LFE45-.LFB45
 7793 0178 00000000 		.4byte	0
 7794 017c 00000000 		.4byte	0
 7795              		.section	.debug_ranges,"",%progbits
 7796              	.Ldebug_ranges0:
 7797 0000 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 205


 7798 0004 64010000 		.4byte	.LFE1
 7799 0008 00000000 		.4byte	.LFB2
 7800 000c E8000000 		.4byte	.LFE2
 7801 0010 00000000 		.4byte	.LFB3
 7802 0014 E4000000 		.4byte	.LFE3
 7803 0018 00000000 		.4byte	.LFB4
 7804 001c 88000000 		.4byte	.LFE4
 7805 0020 00000000 		.4byte	.LFB5
 7806 0024 34000000 		.4byte	.LFE5
 7807 0028 00000000 		.4byte	.LFB6
 7808 002c 3C010000 		.4byte	.LFE6
 7809 0030 00000000 		.4byte	.LFB7
 7810 0034 F4000000 		.4byte	.LFE7
 7811 0038 00000000 		.4byte	.LFB8
 7812 003c 64000000 		.4byte	.LFE8
 7813 0040 00000000 		.4byte	.LFB9
 7814 0044 9C000000 		.4byte	.LFE9
 7815 0048 00000000 		.4byte	.LFB10
 7816 004c B8000000 		.4byte	.LFE10
 7817 0050 00000000 		.4byte	.LFB11
 7818 0054 68000000 		.4byte	.LFE11
 7819 0058 00000000 		.4byte	.LFB12
 7820 005c 1C000000 		.4byte	.LFE12
 7821 0060 00000000 		.4byte	.LFB13
 7822 0064 1C000000 		.4byte	.LFE13
 7823 0068 00000000 		.4byte	.LFB14
 7824 006c 08010000 		.4byte	.LFE14
 7825 0070 00000000 		.4byte	.LFB15
 7826 0074 24000000 		.4byte	.LFE15
 7827 0078 00000000 		.4byte	.LFB16
 7828 007c 2C000000 		.4byte	.LFE16
 7829 0080 00000000 		.4byte	.LFB17
 7830 0084 14000000 		.4byte	.LFE17
 7831 0088 00000000 		.4byte	.LFB18
 7832 008c F4000000 		.4byte	.LFE18
 7833 0090 00000000 		.4byte	.LFB19
 7834 0094 7C010000 		.4byte	.LFE19
 7835 0098 00000000 		.4byte	.LFB20
 7836 009c A4000000 		.4byte	.LFE20
 7837 00a0 00000000 		.4byte	.LFB21
 7838 00a4 90000000 		.4byte	.LFE21
 7839 00a8 00000000 		.4byte	.LFB22
 7840 00ac B0000000 		.4byte	.LFE22
 7841 00b0 00000000 		.4byte	.LFB23
 7842 00b4 B4000000 		.4byte	.LFE23
 7843 00b8 00000000 		.4byte	.LFB24
 7844 00bc B0000000 		.4byte	.LFE24
 7845 00c0 00000000 		.4byte	.LFB25
 7846 00c4 34000000 		.4byte	.LFE25
 7847 00c8 00000000 		.4byte	.LFB26
 7848 00cc A0000000 		.4byte	.LFE26
 7849 00d0 00000000 		.4byte	.LFB27
 7850 00d4 18000000 		.4byte	.LFE27
 7851 00d8 00000000 		.4byte	.LFB28
 7852 00dc 2A000000 		.4byte	.LFE28
 7853 00e0 00000000 		.4byte	.LFB29
 7854 00e4 24000000 		.4byte	.LFE29
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 206


 7855 00e8 00000000 		.4byte	.LFB30
 7856 00ec 0E000000 		.4byte	.LFE30
 7857 00f0 00000000 		.4byte	.LFB31
 7858 00f4 9A000000 		.4byte	.LFE31
 7859 00f8 00000000 		.4byte	.LFB32
 7860 00fc 80000000 		.4byte	.LFE32
 7861 0100 00000000 		.4byte	.LFB33
 7862 0104 78000000 		.4byte	.LFE33
 7863 0108 00000000 		.4byte	.LFB34
 7864 010c 6C000000 		.4byte	.LFE34
 7865 0110 00000000 		.4byte	.LFB35
 7866 0114 62000000 		.4byte	.LFE35
 7867 0118 00000000 		.4byte	.LFB36
 7868 011c 16010000 		.4byte	.LFE36
 7869 0120 00000000 		.4byte	.LFB37
 7870 0124 36000000 		.4byte	.LFE37
 7871 0128 00000000 		.4byte	.LFB38
 7872 012c 38000000 		.4byte	.LFE38
 7873 0130 00000000 		.4byte	.LFB39
 7874 0134 20000000 		.4byte	.LFE39
 7875 0138 00000000 		.4byte	.LFB40
 7876 013c 48000000 		.4byte	.LFE40
 7877 0140 00000000 		.4byte	.LFB41
 7878 0144 1C000000 		.4byte	.LFE41
 7879 0148 00000000 		.4byte	.LFB42
 7880 014c EC000000 		.4byte	.LFE42
 7881 0150 00000000 		.4byte	.LFB43
 7882 0154 D8000000 		.4byte	.LFE43
 7883 0158 00000000 		.4byte	.LFB44
 7884 015c 30000000 		.4byte	.LFE44
 7885 0160 00000000 		.4byte	.LFB45
 7886 0164 28000000 		.4byte	.LFE45
 7887 0168 00000000 		.4byte	0
 7888 016c 00000000 		.4byte	0
 7889              		.section	.debug_macro,"",%progbits
 7890              	.Ldebug_macro0:
 7891 0000 0400     		.2byte	0x4
 7892 0002 02       		.byte	0x2
 7893 0003 00000000 		.4byte	.Ldebug_line0
 7894 0007 07       		.byte	0x7
 7895 0008 00000000 		.4byte	.Ldebug_macro1
 7896 000c 03       		.byte	0x3
 7897 000d 00       		.uleb128 0
 7898 000e 01       		.uleb128 0x1
 7899              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\stdl
 7900 000f 03       		.byte	0x3
 7901 0010 43       		.uleb128 0x43
 7902 0011 09       		.uleb128 0x9
 7903 0012 05       		.byte	0x5
 7904 0013 08       		.uleb128 0x8
 7905 0014 99880000 		.4byte	.LASF355
 7906              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mac
 7907 0018 03       		.byte	0x3
 7908 0019 0A       		.uleb128 0xa
 7909 001a 0A       		.uleb128 0xa
 7910 001b 05       		.byte	0x5
 7911 001c 3C       		.uleb128 0x3c
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 207


 7912 001d FE5D0000 		.4byte	.LASF356
 7913 0021 04       		.byte	0x4
 7914              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\_an
 7915 0022 03       		.byte	0x3
 7916 0023 0B       		.uleb128 0xb
 7917 0024 0B       		.uleb128 0xb
 7918 0025 05       		.byte	0x5
 7919 0026 0D       		.uleb128 0xd
 7920 0027 6E530000 		.4byte	.LASF357
 7921              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\new
 7922 002b 03       		.byte	0x3
 7923 002c 0F       		.uleb128 0xf
 7924 002d 0C       		.uleb128 0xc
 7925 002e 05       		.byte	0x5
 7926 002f 08       		.uleb128 0x8
 7927 0030 81110000 		.4byte	.LASF358
 7928              		.file 13 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\_ne
 7929 0034 03       		.byte	0x3
 7930 0035 0E       		.uleb128 0xe
 7931 0036 0D       		.uleb128 0xd
 7932 0037 07       		.byte	0x7
 7933 0038 00000000 		.4byte	.Ldebug_macro2
 7934 003c 04       		.byte	0x4
 7935 003d 07       		.byte	0x7
 7936 003e 00000000 		.4byte	.Ldebug_macro3
 7937 0042 04       		.byte	0x4
 7938              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 7939 0043 03       		.byte	0x3
 7940 0044 10       		.uleb128 0x10
 7941 0045 0E       		.uleb128 0xe
 7942 0046 05       		.byte	0x5
 7943 0047 02       		.uleb128 0x2
 7944 0048 0B500000 		.4byte	.LASF376
 7945 004c 03       		.byte	0x3
 7946 004d 04       		.uleb128 0x4
 7947 004e 0A       		.uleb128 0xa
 7948 004f 04       		.byte	0x4
 7949              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 7950 0050 03       		.byte	0x3
 7951 0051 05       		.uleb128 0x5
 7952 0052 0F       		.uleb128 0xf
 7953 0053 07       		.byte	0x7
 7954 0054 00000000 		.4byte	.Ldebug_macro4
 7955 0058 04       		.byte	0x4
 7956 0059 07       		.byte	0x7
 7957 005a 00000000 		.4byte	.Ldebug_macro5
 7958 005e 04       		.byte	0x4
 7959 005f 07       		.byte	0x7
 7960 0060 00000000 		.4byte	.Ldebug_macro6
 7961 0064 04       		.byte	0x4
 7962 0065 07       		.byte	0x7
 7963 0066 00000000 		.4byte	.Ldebug_macro7
 7964 006a 03       		.byte	0x3
 7965 006b 10       		.uleb128 0x10
 7966 006c 03       		.uleb128 0x3
 7967 006d 07       		.byte	0x7
 7968 006e 00000000 		.4byte	.Ldebug_macro8
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 208


 7969 0072 04       		.byte	0x4
 7970              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 7971 0073 03       		.byte	0x3
 7972 0074 12       		.uleb128 0x12
 7973 0075 10       		.uleb128 0x10
 7974 0076 05       		.byte	0x5
 7975 0077 0B       		.uleb128 0xb
 7976 0078 2E570000 		.4byte	.LASF470
 7977 007c 03       		.byte	0x3
 7978 007d 0D       		.uleb128 0xd
 7979 007e 0B       		.uleb128 0xb
 7980 007f 04       		.byte	0x4
 7981 0080 03       		.byte	0x3
 7982 0081 0E       		.uleb128 0xe
 7983 0082 03       		.uleb128 0x3
 7984 0083 07       		.byte	0x7
 7985 0084 00000000 		.4byte	.Ldebug_macro9
 7986 0088 04       		.byte	0x4
 7987              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 7988 0089 03       		.byte	0x3
 7989 008a 0F       		.uleb128 0xf
 7990 008b 11       		.uleb128 0x11
 7991 008c 05       		.byte	0x5
 7992 008d 14       		.uleb128 0x14
 7993 008e CD340000 		.4byte	.LASF485
 7994              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mac
 7995 0092 03       		.byte	0x3
 7996 0093 18       		.uleb128 0x18
 7997 0094 12       		.uleb128 0x12
 7998 0095 05       		.byte	0x5
 7999 0096 06       		.uleb128 0x6
 8000 0097 556B0000 		.4byte	.LASF486
 8001 009b 03       		.byte	0x3
 8002 009c 07       		.uleb128 0x7
 8003 009d 04       		.uleb128 0x4
 8004 009e 07       		.byte	0x7
 8005 009f 00000000 		.4byte	.Ldebug_macro10
 8006 00a3 04       		.byte	0x4
 8007 00a4 04       		.byte	0x4
 8008              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8009 00a5 03       		.byte	0x3
 8010 00a6 19       		.uleb128 0x19
 8011 00a7 13       		.uleb128 0x13
 8012 00a8 07       		.byte	0x7
 8013 00a9 00000000 		.4byte	.Ldebug_macro11
 8014 00ad 04       		.byte	0x4
 8015 00ae 07       		.byte	0x7
 8016 00af 00000000 		.4byte	.Ldebug_macro12
 8017 00b3 03       		.byte	0x3
 8018 00b4 9F01     		.uleb128 0x9f
 8019 00b6 03       		.uleb128 0x3
 8020 00b7 07       		.byte	0x7
 8021 00b8 00000000 		.4byte	.Ldebug_macro13
 8022 00bc 04       		.byte	0x4
 8023 00bd 07       		.byte	0x7
 8024 00be 00000000 		.4byte	.Ldebug_macro14
 8025 00c2 04       		.byte	0x4
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 209


 8026 00c3 07       		.byte	0x7
 8027 00c4 00000000 		.4byte	.Ldebug_macro15
 8028 00c8 04       		.byte	0x4
 8029              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8030 00c9 03       		.byte	0x3
 8031 00ca 13       		.uleb128 0x13
 8032 00cb 14       		.uleb128 0x14
 8033 00cc 05       		.byte	0x5
 8034 00cd 29       		.uleb128 0x29
 8035 00ce 630D0000 		.4byte	.LASF577
 8036 00d2 03       		.byte	0x3
 8037 00d3 2D       		.uleb128 0x2d
 8038 00d4 03       		.uleb128 0x3
 8039 00d5 04       		.byte	0x4
 8040 00d6 07       		.byte	0x7
 8041 00d7 00000000 		.4byte	.Ldebug_macro16
 8042 00db 04       		.byte	0x4
 8043              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mac
 8044 00dc 03       		.byte	0x3
 8045 00dd 14       		.uleb128 0x14
 8046 00de 15       		.uleb128 0x15
 8047 00df 05       		.byte	0x5
 8048 00e0 02       		.uleb128 0x2
 8049 00e1 E8250000 		.4byte	.LASF698
 8050 00e5 04       		.byte	0x4
 8051              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\all
 8052 00e6 03       		.byte	0x3
 8053 00e7 16       		.uleb128 0x16
 8054 00e8 16       		.uleb128 0x16
 8055 00e9 07       		.byte	0x7
 8056 00ea 00000000 		.4byte	.Ldebug_macro17
 8057 00ee 04       		.byte	0x4
 8058 00ef 07       		.byte	0x7
 8059 00f0 00000000 		.4byte	.Ldebug_macro18
 8060 00f4 04       		.byte	0x4
 8061              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\str
 8062 00f5 03       		.byte	0x3
 8063 00f6 44       		.uleb128 0x44
 8064 00f7 17       		.uleb128 0x17
 8065 00f8 07       		.byte	0x7
 8066 00f9 00000000 		.4byte	.Ldebug_macro19
 8067 00fd 03       		.byte	0x3
 8068 00fe 11       		.uleb128 0x11
 8069 00ff 03       		.uleb128 0x3
 8070 0100 07       		.byte	0x7
 8071 0101 00000000 		.4byte	.Ldebug_macro20
 8072 0105 04       		.byte	0x4
 8073              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8074 0106 03       		.byte	0x3
 8075 0107 14       		.uleb128 0x14
 8076 0108 18       		.uleb128 0x18
 8077 0109 05       		.byte	0x5
 8078 010a 04       		.uleb128 0x4
 8079 010b A5170000 		.4byte	.LASF709
 8080 010f 04       		.byte	0x4
 8081              		.file 25 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8082 0110 03       		.byte	0x3
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 210


 8083 0111 C001     		.uleb128 0xc0
 8084 0113 19       		.uleb128 0x19
 8085 0114 04       		.byte	0x4
 8086 0115 04       		.byte	0x4
 8087 0116 05       		.byte	0x5
 8088 0117 49       		.uleb128 0x49
 8089 0118 88850000 		.4byte	.LASF710
 8090              		.file 26 "FreeRTOS/include/FreeRTOS.h"
 8091 011c 03       		.byte	0x3
 8092 011d 4C       		.uleb128 0x4c
 8093 011e 1A       		.uleb128 0x1a
 8094 011f 05       		.byte	0x5
 8095 0120 43       		.uleb128 0x43
 8096 0121 C9650000 		.4byte	.LASF711
 8097 0125 03       		.byte	0x3
 8098 0126 48       		.uleb128 0x48
 8099 0127 03       		.uleb128 0x3
 8100 0128 04       		.byte	0x4
 8101              		.file 27 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\lib\\gcc\\arm-none-eabi\\5.
 8102 0129 03       		.byte	0x3
 8103 012a 57       		.uleb128 0x57
 8104 012b 1B       		.uleb128 0x1b
 8105              		.file 28 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\std
 8106 012c 03       		.byte	0x3
 8107 012d 09       		.uleb128 0x9
 8108 012e 1C       		.uleb128 0x1c
 8109 012f 05       		.byte	0x5
 8110 0130 0A       		.uleb128 0xa
 8111 0131 15990000 		.4byte	.LASF712
 8112              		.file 29 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8113 0135 03       		.byte	0x3
 8114 0136 0D       		.uleb128 0xd
 8115 0137 1D       		.uleb128 0x1d
 8116 0138 07       		.byte	0x7
 8117 0139 00000000 		.4byte	.Ldebug_macro21
 8118 013d 04       		.byte	0x4
 8119 013e 03       		.byte	0x3
 8120 013f 0E       		.uleb128 0xe
 8121 0140 05       		.uleb128 0x5
 8122 0141 07       		.byte	0x7
 8123 0142 00000000 		.4byte	.Ldebug_macro22
 8124 0146 04       		.byte	0x4
 8125 0147 07       		.byte	0x7
 8126 0148 00000000 		.4byte	.Ldebug_macro23
 8127 014c 04       		.byte	0x4
 8128 014d 05       		.byte	0x5
 8129 014e 0D       		.uleb128 0xd
 8130 014f 89060000 		.4byte	.LASF827
 8131 0153 04       		.byte	0x4
 8132              		.file 30 "config/FreeRTOSConfig.h"
 8133 0154 03       		.byte	0x3
 8134 0155 5E       		.uleb128 0x5e
 8135 0156 1E       		.uleb128 0x1e
 8136 0157 07       		.byte	0x7
 8137 0158 00000000 		.4byte	.Ldebug_macro24
 8138 015c 04       		.byte	0x4
 8139 015d 03       		.byte	0x3
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 211


 8140 015e 61       		.uleb128 0x61
 8141 015f 06       		.uleb128 0x6
 8142 0160 07       		.byte	0x7
 8143 0161 00000000 		.4byte	.Ldebug_macro25
 8144 0165 04       		.byte	0x4
 8145              		.file 31 "FreeRTOS/include/portable.h"
 8146 0166 03       		.byte	0x3
 8147 0167 64       		.uleb128 0x64
 8148 0168 1F       		.uleb128 0x1f
 8149 0169 05       		.byte	0x5
 8150 016a 47       		.uleb128 0x47
 8151 016b 8D270000 		.4byte	.LASF881
 8152 016f 03       		.byte	0x3
 8153 0170 C401     		.uleb128 0xc4
 8154 0172 02       		.uleb128 0x2
 8155 0173 07       		.byte	0x7
 8156 0174 00000000 		.4byte	.Ldebug_macro26
 8157 0178 04       		.byte	0x4
 8158 0179 07       		.byte	0x7
 8159 017a 00000000 		.4byte	.Ldebug_macro27
 8160              		.file 32 "FreeRTOS/include/mpu_wrappers.h"
 8161 017e 03       		.byte	0x3
 8162 017f E002     		.uleb128 0x160
 8163 0181 20       		.uleb128 0x20
 8164 0182 07       		.byte	0x7
 8165 0183 00000000 		.4byte	.Ldebug_macro28
 8166 0187 04       		.byte	0x4
 8167 0188 04       		.byte	0x4
 8168 0189 07       		.byte	0x7
 8169 018a 00000000 		.4byte	.Ldebug_macro29
 8170 018e 04       		.byte	0x4
 8171 018f 03       		.byte	0x3
 8172 0190 4D       		.uleb128 0x4d
 8173 0191 08       		.uleb128 0x8
 8174 0192 05       		.byte	0x5
 8175 0193 44       		.uleb128 0x44
 8176 0194 12540000 		.4byte	.LASF1042
 8177 0198 03       		.byte	0x3
 8178 0199 4A       		.uleb128 0x4a
 8179 019a 07       		.uleb128 0x7
 8180 019b 07       		.byte	0x7
 8181 019c 00000000 		.4byte	.Ldebug_macro30
 8182 01a0 04       		.byte	0x4
 8183 01a1 07       		.byte	0x7
 8184 01a2 00000000 		.4byte	.Ldebug_macro31
 8185 01a6 04       		.byte	0x4
 8186              		.file 33 "FreeRTOS/include/timers.h"
 8187 01a7 03       		.byte	0x3
 8188 01a8 4E       		.uleb128 0x4e
 8189 01a9 21       		.uleb128 0x21
 8190 01aa 05       		.byte	0x5
 8191 01ab 44       		.uleb128 0x44
 8192 01ac 600C0000 		.4byte	.LASF1075
 8193 01b0 03       		.byte	0x3
 8194 01b1 4C       		.uleb128 0x4c
 8195 01b2 08       		.uleb128 0x8
 8196 01b3 04       		.byte	0x4
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 212


 8197 01b4 07       		.byte	0x7
 8198 01b5 00000000 		.4byte	.Ldebug_macro32
 8199 01b9 04       		.byte	0x4
 8200              		.file 34 "FreeRTOS/include/StackMacros.h"
 8201 01ba 03       		.byte	0x3
 8202 01bb 4F       		.uleb128 0x4f
 8203 01bc 22       		.uleb128 0x22
 8204 01bd 07       		.byte	0x7
 8205 01be 00000000 		.4byte	.Ldebug_macro33
 8206 01c2 04       		.byte	0x4
 8207 01c3 06       		.byte	0x6
 8208 01c4 55       		.uleb128 0x55
 8209 01c5 96730000 		.4byte	.LASF1101
 8210 01c9 05       		.byte	0x5
 8211 01ca 69       		.uleb128 0x69
 8212 01cb B0630000 		.4byte	.LASF1102
 8213 01cf 05       		.byte	0x5
 8214 01d0 70       		.uleb128 0x70
 8215 01d1 058D0000 		.4byte	.LASF1103
 8216 01d5 05       		.byte	0x5
 8217 01d6 FD01     		.uleb128 0xfd
 8218 01d8 C00D0000 		.4byte	.LASF1104
 8219 01dc 05       		.byte	0x5
 8220 01dd 8202     		.uleb128 0x102
 8221 01df 50180000 		.4byte	.LASF1105
 8222 01e3 05       		.byte	0x5
 8223 01e4 8302     		.uleb128 0x103
 8224 01e6 49360000 		.4byte	.LASF1106
 8225 01ea 05       		.byte	0x5
 8226 01eb 8402     		.uleb128 0x104
 8227 01ed CD1A0000 		.4byte	.LASF1107
 8228 01f1 05       		.byte	0x5
 8229 01f2 8502     		.uleb128 0x105
 8230 01f4 1C050000 		.4byte	.LASF1108
 8231 01f8 05       		.byte	0x5
 8232 01f9 B802     		.uleb128 0x138
 8233 01fb 81490000 		.4byte	.LASF1109
 8234 01ff 05       		.byte	0x5
 8235 0200 BC02     		.uleb128 0x13c
 8236 0202 E4890000 		.4byte	.LASF1110
 8237 0206 05       		.byte	0x5
 8238 0207 CB02     		.uleb128 0x14b
 8239 0209 9C420000 		.4byte	.LASF1111
 8240 020d 05       		.byte	0x5
 8241 020e D902     		.uleb128 0x159
 8242 0210 E02C0000 		.4byte	.LASF1112
 8243 0214 05       		.byte	0x5
 8244 0215 ED02     		.uleb128 0x16d
 8245 0217 74920000 		.4byte	.LASF1113
 8246 021b 05       		.byte	0x5
 8247 021c F902     		.uleb128 0x179
 8248 021e 710F0000 		.4byte	.LASF1114
 8249 0222 05       		.byte	0x5
 8250 0223 8603     		.uleb128 0x186
 8251 0225 E0460000 		.4byte	.LASF1115
 8252 0229 04       		.byte	0x4
 8253 022a 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 213


 8254              		.section	.debug_macro,"G",%progbits,wm4.0.c0d9c46791312c607b68c96c4ad07fb1,comdat
 8255              	.Ldebug_macro1:
 8256 0000 0400     		.2byte	0x4
 8257 0002 00       		.byte	0
 8258 0003 05       		.byte	0x5
 8259 0004 00       		.uleb128 0
 8260 0005 3E8B0000 		.4byte	.LASF0
 8261 0009 05       		.byte	0x5
 8262 000a 00       		.uleb128 0
 8263 000b C6090000 		.4byte	.LASF1
 8264 000f 05       		.byte	0x5
 8265 0010 00       		.uleb128 0
 8266 0011 39400000 		.4byte	.LASF2
 8267 0015 05       		.byte	0x5
 8268 0016 00       		.uleb128 0
 8269 0017 A8760000 		.4byte	.LASF3
 8270 001b 05       		.byte	0x5
 8271 001c 00       		.uleb128 0
 8272 001d F81D0000 		.4byte	.LASF4
 8273 0021 05       		.byte	0x5
 8274 0022 00       		.uleb128 0
 8275 0023 CB350000 		.4byte	.LASF5
 8276 0027 05       		.byte	0x5
 8277 0028 00       		.uleb128 0
 8278 0029 10830000 		.4byte	.LASF6
 8279 002d 05       		.byte	0x5
 8280 002e 00       		.uleb128 0
 8281 002f A2220000 		.4byte	.LASF7
 8282 0033 05       		.byte	0x5
 8283 0034 00       		.uleb128 0
 8284 0035 DA3C0000 		.4byte	.LASF8
 8285 0039 05       		.byte	0x5
 8286 003a 00       		.uleb128 0
 8287 003b 64460000 		.4byte	.LASF9
 8288 003f 05       		.byte	0x5
 8289 0040 00       		.uleb128 0
 8290 0041 3A9C0000 		.4byte	.LASF10
 8291 0045 05       		.byte	0x5
 8292 0046 00       		.uleb128 0
 8293 0047 BE030000 		.4byte	.LASF11
 8294 004b 05       		.byte	0x5
 8295 004c 00       		.uleb128 0
 8296 004d 986F0000 		.4byte	.LASF12
 8297 0051 05       		.byte	0x5
 8298 0052 00       		.uleb128 0
 8299 0053 878F0000 		.4byte	.LASF13
 8300 0057 05       		.byte	0x5
 8301 0058 00       		.uleb128 0
 8302 0059 8D190000 		.4byte	.LASF14
 8303 005d 05       		.byte	0x5
 8304 005e 00       		.uleb128 0
 8305 005f 05050000 		.4byte	.LASF15
 8306 0063 05       		.byte	0x5
 8307 0064 00       		.uleb128 0
 8308 0065 A5240000 		.4byte	.LASF16
 8309 0069 05       		.byte	0x5
 8310 006a 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 214


 8311 006b C9200000 		.4byte	.LASF17
 8312 006f 05       		.byte	0x5
 8313 0070 00       		.uleb128 0
 8314 0071 831A0000 		.4byte	.LASF18
 8315 0075 05       		.byte	0x5
 8316 0076 00       		.uleb128 0
 8317 0077 0D270000 		.4byte	.LASF19
 8318 007b 05       		.byte	0x5
 8319 007c 00       		.uleb128 0
 8320 007d A37C0000 		.4byte	.LASF20
 8321 0081 05       		.byte	0x5
 8322 0082 00       		.uleb128 0
 8323 0083 BE500000 		.4byte	.LASF21
 8324 0087 05       		.byte	0x5
 8325 0088 00       		.uleb128 0
 8326 0089 B6610000 		.4byte	.LASF22
 8327 008d 05       		.byte	0x5
 8328 008e 00       		.uleb128 0
 8329 008f 206A0000 		.4byte	.LASF23
 8330 0093 05       		.byte	0x5
 8331 0094 00       		.uleb128 0
 8332 0095 E40E0000 		.4byte	.LASF24
 8333 0099 05       		.byte	0x5
 8334 009a 00       		.uleb128 0
 8335 009b 3E060000 		.4byte	.LASF25
 8336 009f 05       		.byte	0x5
 8337 00a0 00       		.uleb128 0
 8338 00a1 1F530000 		.4byte	.LASF26
 8339 00a5 05       		.byte	0x5
 8340 00a6 00       		.uleb128 0
 8341 00a7 355A0000 		.4byte	.LASF27
 8342 00ab 05       		.byte	0x5
 8343 00ac 00       		.uleb128 0
 8344 00ad 0E170000 		.4byte	.LASF28
 8345 00b1 05       		.byte	0x5
 8346 00b2 00       		.uleb128 0
 8347 00b3 58060000 		.4byte	.LASF29
 8348 00b7 05       		.byte	0x5
 8349 00b8 00       		.uleb128 0
 8350 00b9 7D320000 		.4byte	.LASF30
 8351 00bd 05       		.byte	0x5
 8352 00be 00       		.uleb128 0
 8353 00bf 54270000 		.4byte	.LASF31
 8354 00c3 05       		.byte	0x5
 8355 00c4 00       		.uleb128 0
 8356 00c5 700A0000 		.4byte	.LASF32
 8357 00c9 05       		.byte	0x5
 8358 00ca 00       		.uleb128 0
 8359 00cb 59770000 		.4byte	.LASF33
 8360 00cf 05       		.byte	0x5
 8361 00d0 00       		.uleb128 0
 8362 00d1 16760000 		.4byte	.LASF34
 8363 00d5 05       		.byte	0x5
 8364 00d6 00       		.uleb128 0
 8365 00d7 206E0000 		.4byte	.LASF35
 8366 00db 05       		.byte	0x5
 8367 00dc 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 215


 8368 00dd 9B180000 		.4byte	.LASF36
 8369 00e1 05       		.byte	0x5
 8370 00e2 00       		.uleb128 0
 8371 00e3 BD5C0000 		.4byte	.LASF37
 8372 00e7 05       		.byte	0x5
 8373 00e8 00       		.uleb128 0
 8374 00e9 B2060000 		.4byte	.LASF38
 8375 00ed 05       		.byte	0x5
 8376 00ee 00       		.uleb128 0
 8377 00ef 1F080000 		.4byte	.LASF39
 8378 00f3 05       		.byte	0x5
 8379 00f4 00       		.uleb128 0
 8380 00f5 4D9C0000 		.4byte	.LASF40
 8381 00f9 05       		.byte	0x5
 8382 00fa 00       		.uleb128 0
 8383 00fb 8E500000 		.4byte	.LASF41
 8384 00ff 05       		.byte	0x5
 8385 0100 00       		.uleb128 0
 8386 0101 3C330000 		.4byte	.LASF42
 8387 0105 05       		.byte	0x5
 8388 0106 00       		.uleb128 0
 8389 0107 6F400000 		.4byte	.LASF43
 8390 010b 05       		.byte	0x5
 8391 010c 00       		.uleb128 0
 8392 010d C08D0000 		.4byte	.LASF44
 8393 0111 05       		.byte	0x5
 8394 0112 00       		.uleb128 0
 8395 0113 761C0000 		.4byte	.LASF45
 8396 0117 05       		.byte	0x5
 8397 0118 00       		.uleb128 0
 8398 0119 23170000 		.4byte	.LASF46
 8399 011d 05       		.byte	0x5
 8400 011e 00       		.uleb128 0
 8401 011f 60940000 		.4byte	.LASF47
 8402 0123 05       		.byte	0x5
 8403 0124 00       		.uleb128 0
 8404 0125 1C680000 		.4byte	.LASF48
 8405 0129 05       		.byte	0x5
 8406 012a 00       		.uleb128 0
 8407 012b 199F0000 		.4byte	.LASF49
 8408 012f 05       		.byte	0x5
 8409 0130 00       		.uleb128 0
 8410 0131 C4140000 		.4byte	.LASF50
 8411 0135 05       		.byte	0x5
 8412 0136 00       		.uleb128 0
 8413 0137 32420000 		.4byte	.LASF51
 8414 013b 05       		.byte	0x5
 8415 013c 00       		.uleb128 0
 8416 013d B9760000 		.4byte	.LASF52
 8417 0141 05       		.byte	0x5
 8418 0142 00       		.uleb128 0
 8419 0143 BE440000 		.4byte	.LASF53
 8420 0147 05       		.byte	0x5
 8421 0148 00       		.uleb128 0
 8422 0149 6A160000 		.4byte	.LASF54
 8423 014d 05       		.byte	0x5
 8424 014e 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 216


 8425 014f EE6C0000 		.4byte	.LASF55
 8426 0153 05       		.byte	0x5
 8427 0154 00       		.uleb128 0
 8428 0155 714E0000 		.4byte	.LASF56
 8429 0159 05       		.byte	0x5
 8430 015a 00       		.uleb128 0
 8431 015b 4E0A0000 		.4byte	.LASF57
 8432 015f 05       		.byte	0x5
 8433 0160 00       		.uleb128 0
 8434 0161 8F410000 		.4byte	.LASF58
 8435 0165 05       		.byte	0x5
 8436 0166 00       		.uleb128 0
 8437 0167 B3910000 		.4byte	.LASF59
 8438 016b 05       		.byte	0x5
 8439 016c 00       		.uleb128 0
 8440 016d 8B200000 		.4byte	.LASF60
 8441 0171 05       		.byte	0x5
 8442 0172 00       		.uleb128 0
 8443 0173 01290000 		.4byte	.LASF61
 8444 0177 05       		.byte	0x5
 8445 0178 00       		.uleb128 0
 8446 0179 827B0000 		.4byte	.LASF62
 8447 017d 05       		.byte	0x5
 8448 017e 00       		.uleb128 0
 8449 017f 967B0000 		.4byte	.LASF63
 8450 0183 05       		.byte	0x5
 8451 0184 00       		.uleb128 0
 8452 0185 9D3D0000 		.4byte	.LASF64
 8453 0189 05       		.byte	0x5
 8454 018a 00       		.uleb128 0
 8455 018b A0300000 		.4byte	.LASF65
 8456 018f 05       		.byte	0x5
 8457 0190 00       		.uleb128 0
 8458 0191 4C730000 		.4byte	.LASF66
 8459 0195 05       		.byte	0x5
 8460 0196 00       		.uleb128 0
 8461 0197 B9570000 		.4byte	.LASF67
 8462 019b 05       		.byte	0x5
 8463 019c 00       		.uleb128 0
 8464 019d FC6A0000 		.4byte	.LASF68
 8465 01a1 05       		.byte	0x5
 8466 01a2 00       		.uleb128 0
 8467 01a3 029F0000 		.4byte	.LASF69
 8468 01a7 05       		.byte	0x5
 8469 01a8 00       		.uleb128 0
 8470 01a9 52980000 		.4byte	.LASF70
 8471 01ad 05       		.byte	0x5
 8472 01ae 00       		.uleb128 0
 8473 01af 57630000 		.4byte	.LASF71
 8474 01b3 05       		.byte	0x5
 8475 01b4 00       		.uleb128 0
 8476 01b5 F9990000 		.4byte	.LASF72
 8477 01b9 05       		.byte	0x5
 8478 01ba 00       		.uleb128 0
 8479 01bb 1F4C0000 		.4byte	.LASF73
 8480 01bf 05       		.byte	0x5
 8481 01c0 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 217


 8482 01c1 A8930000 		.4byte	.LASF74
 8483 01c5 05       		.byte	0x5
 8484 01c6 00       		.uleb128 0
 8485 01c7 51930000 		.4byte	.LASF75
 8486 01cb 05       		.byte	0x5
 8487 01cc 00       		.uleb128 0
 8488 01cd 88020000 		.4byte	.LASF76
 8489 01d1 05       		.byte	0x5
 8490 01d2 00       		.uleb128 0
 8491 01d3 EE970000 		.4byte	.LASF77
 8492 01d7 05       		.byte	0x5
 8493 01d8 00       		.uleb128 0
 8494 01d9 DD020000 		.4byte	.LASF78
 8495 01dd 05       		.byte	0x5
 8496 01de 00       		.uleb128 0
 8497 01df D8010000 		.4byte	.LASF79
 8498 01e3 05       		.byte	0x5
 8499 01e4 00       		.uleb128 0
 8500 01e5 999E0000 		.4byte	.LASF80
 8501 01e9 05       		.byte	0x5
 8502 01ea 00       		.uleb128 0
 8503 01eb F6160000 		.4byte	.LASF81
 8504 01ef 05       		.byte	0x5
 8505 01f0 00       		.uleb128 0
 8506 01f1 43850000 		.4byte	.LASF82
 8507 01f5 05       		.byte	0x5
 8508 01f6 00       		.uleb128 0
 8509 01f7 F3360000 		.4byte	.LASF83
 8510 01fb 05       		.byte	0x5
 8511 01fc 00       		.uleb128 0
 8512 01fd 273F0000 		.4byte	.LASF84
 8513 0201 05       		.byte	0x5
 8514 0202 00       		.uleb128 0
 8515 0203 49870000 		.4byte	.LASF85
 8516 0207 05       		.byte	0x5
 8517 0208 00       		.uleb128 0
 8518 0209 5B420000 		.4byte	.LASF86
 8519 020d 05       		.byte	0x5
 8520 020e 00       		.uleb128 0
 8521 020f 0B570000 		.4byte	.LASF87
 8522 0213 05       		.byte	0x5
 8523 0214 00       		.uleb128 0
 8524 0215 202C0000 		.4byte	.LASF88
 8525 0219 05       		.byte	0x5
 8526 021a 00       		.uleb128 0
 8527 021b 9F230000 		.4byte	.LASF89
 8528 021f 05       		.byte	0x5
 8529 0220 00       		.uleb128 0
 8530 0221 283B0000 		.4byte	.LASF90
 8531 0225 05       		.byte	0x5
 8532 0226 00       		.uleb128 0
 8533 0227 CC3A0000 		.4byte	.LASF91
 8534 022b 05       		.byte	0x5
 8535 022c 00       		.uleb128 0
 8536 022d 783C0000 		.4byte	.LASF92
 8537 0231 05       		.byte	0x5
 8538 0232 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 218


 8539 0233 16650000 		.4byte	.LASF93
 8540 0237 05       		.byte	0x5
 8541 0238 00       		.uleb128 0
 8542 0239 482F0000 		.4byte	.LASF94
 8543 023d 05       		.byte	0x5
 8544 023e 00       		.uleb128 0
 8545 023f 929A0000 		.4byte	.LASF95
 8546 0243 05       		.byte	0x5
 8547 0244 00       		.uleb128 0
 8548 0245 77520000 		.4byte	.LASF96
 8549 0249 05       		.byte	0x5
 8550 024a 00       		.uleb128 0
 8551 024b C00E0000 		.4byte	.LASF97
 8552 024f 05       		.byte	0x5
 8553 0250 00       		.uleb128 0
 8554 0251 A1430000 		.4byte	.LASF98
 8555 0255 05       		.byte	0x5
 8556 0256 00       		.uleb128 0
 8557 0257 007D0000 		.4byte	.LASF99
 8558 025b 05       		.byte	0x5
 8559 025c 00       		.uleb128 0
 8560 025d 20370000 		.4byte	.LASF100
 8561 0261 05       		.byte	0x5
 8562 0262 00       		.uleb128 0
 8563 0263 10080000 		.4byte	.LASF101
 8564 0267 05       		.byte	0x5
 8565 0268 00       		.uleb128 0
 8566 0269 AA090000 		.4byte	.LASF102
 8567 026d 05       		.byte	0x5
 8568 026e 00       		.uleb128 0
 8569 026f CD810000 		.4byte	.LASF103
 8570 0273 05       		.byte	0x5
 8571 0274 00       		.uleb128 0
 8572 0275 133E0000 		.4byte	.LASF104
 8573 0279 05       		.byte	0x5
 8574 027a 00       		.uleb128 0
 8575 027b 3E310000 		.4byte	.LASF105
 8576 027f 05       		.byte	0x5
 8577 0280 00       		.uleb128 0
 8578 0281 53690000 		.4byte	.LASF106
 8579 0285 05       		.byte	0x5
 8580 0286 00       		.uleb128 0
 8581 0287 B6670000 		.4byte	.LASF107
 8582 028b 05       		.byte	0x5
 8583 028c 00       		.uleb128 0
 8584 028d 2B1B0000 		.4byte	.LASF108
 8585 0291 05       		.byte	0x5
 8586 0292 00       		.uleb128 0
 8587 0293 BA6F0000 		.4byte	.LASF109
 8588 0297 05       		.byte	0x5
 8589 0298 00       		.uleb128 0
 8590 0299 84220000 		.4byte	.LASF110
 8591 029d 05       		.byte	0x5
 8592 029e 00       		.uleb128 0
 8593 029f 6E150000 		.4byte	.LASF111
 8594 02a3 05       		.byte	0x5
 8595 02a4 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 219


 8596 02a5 D4100000 		.4byte	.LASF112
 8597 02a9 05       		.byte	0x5
 8598 02aa 00       		.uleb128 0
 8599 02ab 07120000 		.4byte	.LASF113
 8600 02af 05       		.byte	0x5
 8601 02b0 00       		.uleb128 0
 8602 02b1 59190000 		.4byte	.LASF114
 8603 02b5 05       		.byte	0x5
 8604 02b6 00       		.uleb128 0
 8605 02b7 91330000 		.4byte	.LASF115
 8606 02bb 05       		.byte	0x5
 8607 02bc 00       		.uleb128 0
 8608 02bd 74120000 		.4byte	.LASF116
 8609 02c1 05       		.byte	0x5
 8610 02c2 00       		.uleb128 0
 8611 02c3 6A440000 		.4byte	.LASF117
 8612 02c7 05       		.byte	0x5
 8613 02c8 00       		.uleb128 0
 8614 02c9 80210000 		.4byte	.LASF118
 8615 02cd 05       		.byte	0x5
 8616 02ce 00       		.uleb128 0
 8617 02cf 21400000 		.4byte	.LASF119
 8618 02d3 05       		.byte	0x5
 8619 02d4 00       		.uleb128 0
 8620 02d5 3D570000 		.4byte	.LASF120
 8621 02d9 05       		.byte	0x5
 8622 02da 00       		.uleb128 0
 8623 02db B0550000 		.4byte	.LASF121
 8624 02df 05       		.byte	0x5
 8625 02e0 00       		.uleb128 0
 8626 02e1 3E4D0000 		.4byte	.LASF122
 8627 02e5 05       		.byte	0x5
 8628 02e6 00       		.uleb128 0
 8629 02e7 83460000 		.4byte	.LASF123
 8630 02eb 05       		.byte	0x5
 8631 02ec 00       		.uleb128 0
 8632 02ed EE1F0000 		.4byte	.LASF124
 8633 02f1 05       		.byte	0x5
 8634 02f2 00       		.uleb128 0
 8635 02f3 77500000 		.4byte	.LASF125
 8636 02f7 05       		.byte	0x5
 8637 02f8 00       		.uleb128 0
 8638 02f9 BF6A0000 		.4byte	.LASF126
 8639 02fd 05       		.byte	0x5
 8640 02fe 00       		.uleb128 0
 8641 02ff 79190000 		.4byte	.LASF127
 8642 0303 05       		.byte	0x5
 8643 0304 00       		.uleb128 0
 8644 0305 0E210000 		.4byte	.LASF128
 8645 0309 05       		.byte	0x5
 8646 030a 00       		.uleb128 0
 8647 030b 021C0000 		.4byte	.LASF129
 8648 030f 05       		.byte	0x5
 8649 0310 00       		.uleb128 0
 8650 0311 062A0000 		.4byte	.LASF130
 8651 0315 05       		.byte	0x5
 8652 0316 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 220


 8653 0317 74250000 		.4byte	.LASF131
 8654 031b 05       		.byte	0x5
 8655 031c 00       		.uleb128 0
 8656 031d E2310000 		.4byte	.LASF132
 8657 0321 05       		.byte	0x5
 8658 0322 00       		.uleb128 0
 8659 0323 722F0000 		.4byte	.LASF133
 8660 0327 05       		.byte	0x5
 8661 0328 00       		.uleb128 0
 8662 0329 9D060000 		.4byte	.LASF134
 8663 032d 05       		.byte	0x5
 8664 032e 00       		.uleb128 0
 8665 032f 9D820000 		.4byte	.LASF135
 8666 0333 05       		.byte	0x5
 8667 0334 00       		.uleb128 0
 8668 0335 7F000000 		.4byte	.LASF136
 8669 0339 05       		.byte	0x5
 8670 033a 00       		.uleb128 0
 8671 033b CA9E0000 		.4byte	.LASF137
 8672 033f 05       		.byte	0x5
 8673 0340 00       		.uleb128 0
 8674 0341 317C0000 		.4byte	.LASF138
 8675 0345 05       		.byte	0x5
 8676 0346 00       		.uleb128 0
 8677 0347 70650000 		.4byte	.LASF139
 8678 034b 05       		.byte	0x5
 8679 034c 00       		.uleb128 0
 8680 034d 90210000 		.4byte	.LASF140
 8681 0351 05       		.byte	0x5
 8682 0352 00       		.uleb128 0
 8683 0353 41460000 		.4byte	.LASF141
 8684 0357 05       		.byte	0x5
 8685 0358 00       		.uleb128 0
 8686 0359 36050000 		.4byte	.LASF142
 8687 035d 05       		.byte	0x5
 8688 035e 00       		.uleb128 0
 8689 035f 75860000 		.4byte	.LASF143
 8690 0363 05       		.byte	0x5
 8691 0364 00       		.uleb128 0
 8692 0365 BD940000 		.4byte	.LASF144
 8693 0369 05       		.byte	0x5
 8694 036a 00       		.uleb128 0
 8695 036b 96150000 		.4byte	.LASF145
 8696 036f 05       		.byte	0x5
 8697 0370 00       		.uleb128 0
 8698 0371 353E0000 		.4byte	.LASF146
 8699 0375 05       		.byte	0x5
 8700 0376 00       		.uleb128 0
 8701 0377 8D8E0000 		.4byte	.LASF147
 8702 037b 05       		.byte	0x5
 8703 037c 00       		.uleb128 0
 8704 037d CB2C0000 		.4byte	.LASF148
 8705 0381 05       		.byte	0x5
 8706 0382 00       		.uleb128 0
 8707 0383 7F980000 		.4byte	.LASF149
 8708 0387 05       		.byte	0x5
 8709 0388 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 221


 8710 0389 CC780000 		.4byte	.LASF150
 8711 038d 05       		.byte	0x5
 8712 038e 00       		.uleb128 0
 8713 038f 99070000 		.4byte	.LASF151
 8714 0393 05       		.byte	0x5
 8715 0394 00       		.uleb128 0
 8716 0395 2D920000 		.4byte	.LASF152
 8717 0399 05       		.byte	0x5
 8718 039a 00       		.uleb128 0
 8719 039b 68180000 		.4byte	.LASF153
 8720 039f 05       		.byte	0x5
 8721 03a0 00       		.uleb128 0
 8722 03a1 145E0000 		.4byte	.LASF154
 8723 03a5 05       		.byte	0x5
 8724 03a6 00       		.uleb128 0
 8725 03a7 1A240000 		.4byte	.LASF155
 8726 03ab 05       		.byte	0x5
 8727 03ac 00       		.uleb128 0
 8728 03ad 4A540000 		.4byte	.LASF156
 8729 03b1 05       		.byte	0x5
 8730 03b2 00       		.uleb128 0
 8731 03b3 50000000 		.4byte	.LASF157
 8732 03b7 05       		.byte	0x5
 8733 03b8 00       		.uleb128 0
 8734 03b9 9D2F0000 		.4byte	.LASF158
 8735 03bd 05       		.byte	0x5
 8736 03be 00       		.uleb128 0
 8737 03bf 287E0000 		.4byte	.LASF159
 8738 03c3 05       		.byte	0x5
 8739 03c4 00       		.uleb128 0
 8740 03c5 3F450000 		.4byte	.LASF160
 8741 03c9 05       		.byte	0x5
 8742 03ca 00       		.uleb128 0
 8743 03cb 6C480000 		.4byte	.LASF161
 8744 03cf 05       		.byte	0x5
 8745 03d0 00       		.uleb128 0
 8746 03d1 3A670000 		.4byte	.LASF162
 8747 03d5 05       		.byte	0x5
 8748 03d6 00       		.uleb128 0
 8749 03d7 6B350000 		.4byte	.LASF163
 8750 03db 05       		.byte	0x5
 8751 03dc 00       		.uleb128 0
 8752 03dd 084E0000 		.4byte	.LASF164
 8753 03e1 05       		.byte	0x5
 8754 03e2 00       		.uleb128 0
 8755 03e3 BD180000 		.4byte	.LASF165
 8756 03e7 05       		.byte	0x5
 8757 03e8 00       		.uleb128 0
 8758 03e9 858C0000 		.4byte	.LASF166
 8759 03ed 05       		.byte	0x5
 8760 03ee 00       		.uleb128 0
 8761 03ef 15410000 		.4byte	.LASF167
 8762 03f3 05       		.byte	0x5
 8763 03f4 00       		.uleb128 0
 8764 03f5 75890000 		.4byte	.LASF168
 8765 03f9 05       		.byte	0x5
 8766 03fa 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 222


 8767 03fb 07550000 		.4byte	.LASF169
 8768 03ff 05       		.byte	0x5
 8769 0400 00       		.uleb128 0
 8770 0401 F3100000 		.4byte	.LASF170
 8771 0405 05       		.byte	0x5
 8772 0406 00       		.uleb128 0
 8773 0407 01030000 		.4byte	.LASF171
 8774 040b 05       		.byte	0x5
 8775 040c 00       		.uleb128 0
 8776 040d 6A6A0000 		.4byte	.LASF172
 8777 0411 05       		.byte	0x5
 8778 0412 00       		.uleb128 0
 8779 0413 9F580000 		.4byte	.LASF173
 8780 0417 05       		.byte	0x5
 8781 0418 00       		.uleb128 0
 8782 0419 73060000 		.4byte	.LASF174
 8783 041d 05       		.byte	0x5
 8784 041e 00       		.uleb128 0
 8785 041f 4D860000 		.4byte	.LASF175
 8786 0423 05       		.byte	0x5
 8787 0424 00       		.uleb128 0
 8788 0425 7A1B0000 		.4byte	.LASF176
 8789 0429 05       		.byte	0x5
 8790 042a 00       		.uleb128 0
 8791 042b 72930000 		.4byte	.LASF177
 8792 042f 05       		.byte	0x5
 8793 0430 00       		.uleb128 0
 8794 0431 91390000 		.4byte	.LASF178
 8795 0435 05       		.byte	0x5
 8796 0436 00       		.uleb128 0
 8797 0437 7B5D0000 		.4byte	.LASF179
 8798 043b 05       		.byte	0x5
 8799 043c 00       		.uleb128 0
 8800 043d 24160000 		.4byte	.LASF180
 8801 0441 05       		.byte	0x5
 8802 0442 00       		.uleb128 0
 8803 0443 3E7A0000 		.4byte	.LASF181
 8804 0447 05       		.byte	0x5
 8805 0448 00       		.uleb128 0
 8806 0449 E77C0000 		.4byte	.LASF182
 8807 044d 05       		.byte	0x5
 8808 044e 00       		.uleb128 0
 8809 044f 2C210000 		.4byte	.LASF183
 8810 0453 05       		.byte	0x5
 8811 0454 00       		.uleb128 0
 8812 0455 A5000000 		.4byte	.LASF184
 8813 0459 05       		.byte	0x5
 8814 045a 00       		.uleb128 0
 8815 045b EC7B0000 		.4byte	.LASF185
 8816 045f 05       		.byte	0x5
 8817 0460 00       		.uleb128 0
 8818 0461 BD010000 		.4byte	.LASF186
 8819 0465 05       		.byte	0x5
 8820 0466 00       		.uleb128 0
 8821 0467 97520000 		.4byte	.LASF187
 8822 046b 05       		.byte	0x5
 8823 046c 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 223


 8824 046d E7770000 		.4byte	.LASF188
 8825 0471 05       		.byte	0x5
 8826 0472 00       		.uleb128 0
 8827 0473 9C990000 		.4byte	.LASF189
 8828 0477 05       		.byte	0x5
 8829 0478 00       		.uleb128 0
 8830 0479 850E0000 		.4byte	.LASF190
 8831 047d 05       		.byte	0x5
 8832 047e 00       		.uleb128 0
 8833 047f 2F3A0000 		.4byte	.LASF191
 8834 0483 05       		.byte	0x5
 8835 0484 00       		.uleb128 0
 8836 0485 E92A0000 		.4byte	.LASF192
 8837 0489 05       		.byte	0x5
 8838 048a 00       		.uleb128 0
 8839 048b 9B2B0000 		.4byte	.LASF193
 8840 048f 05       		.byte	0x5
 8841 0490 00       		.uleb128 0
 8842 0491 97770000 		.4byte	.LASF194
 8843 0495 05       		.byte	0x5
 8844 0496 00       		.uleb128 0
 8845 0497 C2390000 		.4byte	.LASF195
 8846 049b 05       		.byte	0x5
 8847 049c 00       		.uleb128 0
 8848 049d 9A1D0000 		.4byte	.LASF196
 8849 04a1 05       		.byte	0x5
 8850 04a2 00       		.uleb128 0
 8851 04a3 90690000 		.4byte	.LASF197
 8852 04a7 05       		.byte	0x5
 8853 04a8 00       		.uleb128 0
 8854 04a9 8C050000 		.4byte	.LASF198
 8855 04ad 05       		.byte	0x5
 8856 04ae 00       		.uleb128 0
 8857 04af 66210000 		.4byte	.LASF199
 8858 04b3 05       		.byte	0x5
 8859 04b4 00       		.uleb128 0
 8860 04b5 C4410000 		.4byte	.LASF200
 8861 04b9 05       		.byte	0x5
 8862 04ba 00       		.uleb128 0
 8863 04bb FF530000 		.4byte	.LASF201
 8864 04bf 05       		.byte	0x5
 8865 04c0 00       		.uleb128 0
 8866 04c1 BA640000 		.4byte	.LASF202
 8867 04c5 05       		.byte	0x5
 8868 04c6 00       		.uleb128 0
 8869 04c7 44130000 		.4byte	.LASF203
 8870 04cb 05       		.byte	0x5
 8871 04cc 00       		.uleb128 0
 8872 04cd FF510000 		.4byte	.LASF204
 8873 04d1 05       		.byte	0x5
 8874 04d2 00       		.uleb128 0
 8875 04d3 024C0000 		.4byte	.LASF205
 8876 04d7 05       		.byte	0x5
 8877 04d8 00       		.uleb128 0
 8878 04d9 AB500000 		.4byte	.LASF206
 8879 04dd 05       		.byte	0x5
 8880 04de 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 224


 8881 04df 24650000 		.4byte	.LASF207
 8882 04e3 05       		.byte	0x5
 8883 04e4 00       		.uleb128 0
 8884 04e5 713E0000 		.4byte	.LASF208
 8885 04e9 05       		.byte	0x5
 8886 04ea 00       		.uleb128 0
 8887 04eb 41590000 		.4byte	.LASF209
 8888 04ef 05       		.byte	0x5
 8889 04f0 00       		.uleb128 0
 8890 04f1 C35E0000 		.4byte	.LASF210
 8891 04f5 05       		.byte	0x5
 8892 04f6 00       		.uleb128 0
 8893 04f7 AC0D0000 		.4byte	.LASF211
 8894 04fb 05       		.byte	0x5
 8895 04fc 00       		.uleb128 0
 8896 04fd E49E0000 		.4byte	.LASF212
 8897 0501 05       		.byte	0x5
 8898 0502 00       		.uleb128 0
 8899 0503 41710000 		.4byte	.LASF213
 8900 0507 05       		.byte	0x5
 8901 0508 00       		.uleb128 0
 8902 0509 876D0000 		.4byte	.LASF214
 8903 050d 05       		.byte	0x5
 8904 050e 00       		.uleb128 0
 8905 050f 407C0000 		.4byte	.LASF215
 8906 0513 05       		.byte	0x5
 8907 0514 00       		.uleb128 0
 8908 0515 F8940000 		.4byte	.LASF216
 8909 0519 05       		.byte	0x5
 8910 051a 00       		.uleb128 0
 8911 051b 66900000 		.4byte	.LASF217
 8912 051f 05       		.byte	0x5
 8913 0520 00       		.uleb128 0
 8914 0521 BA110000 		.4byte	.LASF218
 8915 0525 05       		.byte	0x5
 8916 0526 00       		.uleb128 0
 8917 0527 147A0000 		.4byte	.LASF219
 8918 052b 05       		.byte	0x5
 8919 052c 00       		.uleb128 0
 8920 052d 55990000 		.4byte	.LASF220
 8921 0531 05       		.byte	0x5
 8922 0532 00       		.uleb128 0
 8923 0533 D8090000 		.4byte	.LASF221
 8924 0537 05       		.byte	0x5
 8925 0538 00       		.uleb128 0
 8926 0539 6D490000 		.4byte	.LASF222
 8927 053d 05       		.byte	0x5
 8928 053e 00       		.uleb128 0
 8929 053f C38E0000 		.4byte	.LASF223
 8930 0543 05       		.byte	0x5
 8931 0544 00       		.uleb128 0
 8932 0545 CB170000 		.4byte	.LASF224
 8933 0549 05       		.byte	0x5
 8934 054a 00       		.uleb128 0
 8935 054b 8B890000 		.4byte	.LASF225
 8936 054f 05       		.byte	0x5
 8937 0550 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 225


 8938 0551 6D9F0000 		.4byte	.LASF226
 8939 0555 05       		.byte	0x5
 8940 0556 00       		.uleb128 0
 8941 0557 DC200000 		.4byte	.LASF227
 8942 055b 05       		.byte	0x5
 8943 055c 00       		.uleb128 0
 8944 055d 656D0000 		.4byte	.LASF228
 8945 0561 05       		.byte	0x5
 8946 0562 00       		.uleb128 0
 8947 0563 677B0000 		.4byte	.LASF229
 8948 0567 05       		.byte	0x5
 8949 0568 00       		.uleb128 0
 8950 0569 C3900000 		.4byte	.LASF230
 8951 056d 05       		.byte	0x5
 8952 056e 00       		.uleb128 0
 8953 056f 7E340000 		.4byte	.LASF231
 8954 0573 05       		.byte	0x5
 8955 0574 00       		.uleb128 0
 8956 0575 E0550000 		.4byte	.LASF232
 8957 0579 05       		.byte	0x5
 8958 057a 00       		.uleb128 0
 8959 057b CE610000 		.4byte	.LASF233
 8960 057f 05       		.byte	0x5
 8961 0580 00       		.uleb128 0
 8962 0581 E7050000 		.4byte	.LASF234
 8963 0585 05       		.byte	0x5
 8964 0586 00       		.uleb128 0
 8965 0587 AE780000 		.4byte	.LASF235
 8966 058b 05       		.byte	0x5
 8967 058c 00       		.uleb128 0
 8968 058d FA140000 		.4byte	.LASF236
 8969 0591 05       		.byte	0x5
 8970 0592 00       		.uleb128 0
 8971 0593 6F7E0000 		.4byte	.LASF237
 8972 0597 05       		.byte	0x5
 8973 0598 00       		.uleb128 0
 8974 0599 FE030000 		.4byte	.LASF238
 8975 059d 05       		.byte	0x5
 8976 059e 00       		.uleb128 0
 8977 059f E03E0000 		.4byte	.LASF239
 8978 05a3 05       		.byte	0x5
 8979 05a4 00       		.uleb128 0
 8980 05a5 F3910000 		.4byte	.LASF240
 8981 05a9 05       		.byte	0x5
 8982 05aa 00       		.uleb128 0
 8983 05ab 784B0000 		.4byte	.LASF241
 8984 05af 05       		.byte	0x5
 8985 05b0 00       		.uleb128 0
 8986 05b1 1A150000 		.4byte	.LASF242
 8987 05b5 05       		.byte	0x5
 8988 05b6 00       		.uleb128 0
 8989 05b7 6E310000 		.4byte	.LASF243
 8990 05bb 05       		.byte	0x5
 8991 05bc 00       		.uleb128 0
 8992 05bd B8580000 		.4byte	.LASF244
 8993 05c1 05       		.byte	0x5
 8994 05c2 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 226


 8995 05c3 B7560000 		.4byte	.LASF245
 8996 05c7 05       		.byte	0x5
 8997 05c8 00       		.uleb128 0
 8998 05c9 AF460000 		.4byte	.LASF246
 8999 05cd 05       		.byte	0x5
 9000 05ce 00       		.uleb128 0
 9001 05cf 45110000 		.4byte	.LASF247
 9002 05d3 05       		.byte	0x5
 9003 05d4 00       		.uleb128 0
 9004 05d5 BE8B0000 		.4byte	.LASF248
 9005 05d9 05       		.byte	0x5
 9006 05da 00       		.uleb128 0
 9007 05db F86D0000 		.4byte	.LASF249
 9008 05df 05       		.byte	0x5
 9009 05e0 00       		.uleb128 0
 9010 05e1 6B020000 		.4byte	.LASF250
 9011 05e5 05       		.byte	0x5
 9012 05e6 00       		.uleb128 0
 9013 05e7 D1030000 		.4byte	.LASF251
 9014 05eb 05       		.byte	0x5
 9015 05ec 00       		.uleb128 0
 9016 05ed D86A0000 		.4byte	.LASF252
 9017 05f1 05       		.byte	0x5
 9018 05f2 00       		.uleb128 0
 9019 05f3 9B4C0000 		.4byte	.LASF253
 9020 05f7 05       		.byte	0x5
 9021 05f8 00       		.uleb128 0
 9022 05f9 ED080000 		.4byte	.LASF254
 9023 05fd 05       		.byte	0x5
 9024 05fe 00       		.uleb128 0
 9025 05ff 0E920000 		.4byte	.LASF255
 9026 0603 05       		.byte	0x5
 9027 0604 00       		.uleb128 0
 9028 0605 981F0000 		.4byte	.LASF256
 9029 0609 05       		.byte	0x5
 9030 060a 00       		.uleb128 0
 9031 060b B0410000 		.4byte	.LASF257
 9032 060f 05       		.byte	0x5
 9033 0610 00       		.uleb128 0
 9034 0611 44020000 		.4byte	.LASF258
 9035 0615 05       		.byte	0x5
 9036 0616 00       		.uleb128 0
 9037 0617 423A0000 		.4byte	.LASF259
 9038 061b 05       		.byte	0x5
 9039 061c 00       		.uleb128 0
 9040 061d D91D0000 		.4byte	.LASF260
 9041 0621 05       		.byte	0x5
 9042 0622 00       		.uleb128 0
 9043 0623 B8240000 		.4byte	.LASF261
 9044 0627 05       		.byte	0x5
 9045 0628 00       		.uleb128 0
 9046 0629 A2560000 		.4byte	.LASF262
 9047 062d 05       		.byte	0x5
 9048 062e 00       		.uleb128 0
 9049 062f 9D8C0000 		.4byte	.LASF263
 9050 0633 05       		.byte	0x5
 9051 0634 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 227


 9052 0635 A7050000 		.4byte	.LASF264
 9053 0639 05       		.byte	0x5
 9054 063a 00       		.uleb128 0
 9055 063b 346B0000 		.4byte	.LASF265
 9056 063f 05       		.byte	0x5
 9057 0640 00       		.uleb128 0
 9058 0641 C4880000 		.4byte	.LASF266
 9059 0645 05       		.byte	0x5
 9060 0646 00       		.uleb128 0
 9061 0647 9F750000 		.4byte	.LASF267
 9062 064b 05       		.byte	0x5
 9063 064c 00       		.uleb128 0
 9064 064d 14970000 		.4byte	.LASF268
 9065 0651 05       		.byte	0x5
 9066 0652 00       		.uleb128 0
 9067 0653 58340000 		.4byte	.LASF269
 9068 0657 05       		.byte	0x5
 9069 0658 00       		.uleb128 0
 9070 0659 110F0000 		.4byte	.LASF270
 9071 065d 05       		.byte	0x5
 9072 065e 00       		.uleb128 0
 9073 065f 30060000 		.4byte	.LASF271
 9074 0663 05       		.byte	0x5
 9075 0664 00       		.uleb128 0
 9076 0665 686B0000 		.4byte	.LASF272
 9077 0669 05       		.byte	0x5
 9078 066a 00       		.uleb128 0
 9079 066b 70710000 		.4byte	.LASF273
 9080 066f 05       		.byte	0x5
 9081 0670 00       		.uleb128 0
 9082 0671 D1230000 		.4byte	.LASF274
 9083 0675 05       		.byte	0x5
 9084 0676 00       		.uleb128 0
 9085 0677 28030000 		.4byte	.LASF275
 9086 067b 05       		.byte	0x5
 9087 067c 00       		.uleb128 0
 9088 067d 46580000 		.4byte	.LASF276
 9089 0681 05       		.byte	0x5
 9090 0682 00       		.uleb128 0
 9091 0683 384C0000 		.4byte	.LASF277
 9092 0687 05       		.byte	0x5
 9093 0688 00       		.uleb128 0
 9094 0689 01100000 		.4byte	.LASF278
 9095 068d 05       		.byte	0x5
 9096 068e 00       		.uleb128 0
 9097 068f E1760000 		.4byte	.LASF279
 9098 0693 05       		.byte	0x5
 9099 0694 00       		.uleb128 0
 9100 0695 D40E0000 		.4byte	.LASF280
 9101 0699 05       		.byte	0x5
 9102 069a 00       		.uleb128 0
 9103 069b 71760000 		.4byte	.LASF281
 9104 069f 05       		.byte	0x5
 9105 06a0 00       		.uleb128 0
 9106 06a1 1E540000 		.4byte	.LASF282
 9107 06a5 05       		.byte	0x5
 9108 06a6 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 228


 9109 06a7 788F0000 		.4byte	.LASF283
 9110 06ab 05       		.byte	0x5
 9111 06ac 00       		.uleb128 0
 9112 06ad 946E0000 		.4byte	.LASF284
 9113 06b1 05       		.byte	0x5
 9114 06b2 00       		.uleb128 0
 9115 06b3 B7740000 		.4byte	.LASF285
 9116 06b7 05       		.byte	0x5
 9117 06b8 00       		.uleb128 0
 9118 06b9 F8290000 		.4byte	.LASF286
 9119 06bd 05       		.byte	0x5
 9120 06be 00       		.uleb128 0
 9121 06bf 73110000 		.4byte	.LASF287
 9122 06c3 05       		.byte	0x5
 9123 06c4 00       		.uleb128 0
 9124 06c5 C6740000 		.4byte	.LASF288
 9125 06c9 05       		.byte	0x5
 9126 06ca 00       		.uleb128 0
 9127 06cb D43F0000 		.4byte	.LASF289
 9128 06cf 05       		.byte	0x5
 9129 06d0 00       		.uleb128 0
 9130 06d1 772E0000 		.4byte	.LASF290
 9131 06d5 05       		.byte	0x5
 9132 06d6 00       		.uleb128 0
 9133 06d7 9D0D0000 		.4byte	.LASF291
 9134 06db 05       		.byte	0x5
 9135 06dc 00       		.uleb128 0
 9136 06dd BC350000 		.4byte	.LASF292
 9137 06e1 05       		.byte	0x5
 9138 06e2 00       		.uleb128 0
 9139 06e3 2E620000 		.4byte	.LASF293
 9140 06e7 05       		.byte	0x5
 9141 06e8 00       		.uleb128 0
 9142 06e9 58520000 		.4byte	.LASF294
 9143 06ed 05       		.byte	0x5
 9144 06ee 00       		.uleb128 0
 9145 06ef D5910000 		.4byte	.LASF295
 9146 06f3 05       		.byte	0x5
 9147 06f4 00       		.uleb128 0
 9148 06f5 C05D0000 		.4byte	.LASF296
 9149 06f9 05       		.byte	0x5
 9150 06fa 00       		.uleb128 0
 9151 06fb B2270000 		.4byte	.LASF297
 9152 06ff 05       		.byte	0x5
 9153 0700 00       		.uleb128 0
 9154 0701 AA160000 		.4byte	.LASF298
 9155 0705 05       		.byte	0x5
 9156 0706 00       		.uleb128 0
 9157 0707 20820000 		.4byte	.LASF299
 9158 070b 05       		.byte	0x5
 9159 070c 00       		.uleb128 0
 9160 070d DD1B0000 		.4byte	.LASF300
 9161 0711 05       		.byte	0x5
 9162 0712 00       		.uleb128 0
 9163 0713 33890000 		.4byte	.LASF301
 9164 0717 05       		.byte	0x5
 9165 0718 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 229


 9166 0719 D77B0000 		.4byte	.LASF302
 9167 071d 05       		.byte	0x5
 9168 071e 00       		.uleb128 0
 9169 071f B53A0000 		.4byte	.LASF303
 9170 0723 05       		.byte	0x5
 9171 0724 00       		.uleb128 0
 9172 0725 C60B0000 		.4byte	.LASF304
 9173 0729 05       		.byte	0x5
 9174 072a 00       		.uleb128 0
 9175 072b 290F0000 		.4byte	.LASF305
 9176 072f 05       		.byte	0x5
 9177 0730 00       		.uleb128 0
 9178 0731 EF000000 		.4byte	.LASF306
 9179 0735 05       		.byte	0x5
 9180 0736 00       		.uleb128 0
 9181 0737 4E090000 		.4byte	.LASF307
 9182 073b 05       		.byte	0x5
 9183 073c 00       		.uleb128 0
 9184 073d C2270000 		.4byte	.LASF308
 9185 0741 05       		.byte	0x5
 9186 0742 00       		.uleb128 0
 9187 0743 DC710000 		.4byte	.LASF309
 9188 0747 05       		.byte	0x5
 9189 0748 00       		.uleb128 0
 9190 0749 43170000 		.4byte	.LASF310
 9191 074d 05       		.byte	0x5
 9192 074e 00       		.uleb128 0
 9193 074f 825E0000 		.4byte	.LASF311
 9194 0753 05       		.byte	0x5
 9195 0754 00       		.uleb128 0
 9196 0755 05460000 		.4byte	.LASF312
 9197 0759 05       		.byte	0x5
 9198 075a 00       		.uleb128 0
 9199 075b 0E1E0000 		.4byte	.LASF313
 9200 075f 05       		.byte	0x5
 9201 0760 00       		.uleb128 0
 9202 0761 CE000000 		.4byte	.LASF314
 9203 0765 05       		.byte	0x5
 9204 0766 00       		.uleb128 0
 9205 0767 BB330000 		.4byte	.LASF315
 9206 076b 05       		.byte	0x5
 9207 076c 00       		.uleb128 0
 9208 076d B2770000 		.4byte	.LASF316
 9209 0771 05       		.byte	0x5
 9210 0772 00       		.uleb128 0
 9211 0773 7D4C0000 		.4byte	.LASF317
 9212 0777 05       		.byte	0x5
 9213 0778 00       		.uleb128 0
 9214 0779 2A2A0000 		.4byte	.LASF318
 9215 077d 05       		.byte	0x5
 9216 077e 00       		.uleb128 0
 9217 077f A9340000 		.4byte	.LASF319
 9218 0783 05       		.byte	0x5
 9219 0784 00       		.uleb128 0
 9220 0785 903C0000 		.4byte	.LASF320
 9221 0789 05       		.byte	0x5
 9222 078a 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 230


 9223 078b 8F3F0000 		.4byte	.LASF321
 9224 078f 05       		.byte	0x5
 9225 0790 00       		.uleb128 0
 9226 0791 38270000 		.4byte	.LASF322
 9227 0795 05       		.byte	0x5
 9228 0796 00       		.uleb128 0
 9229 0797 10510000 		.4byte	.LASF323
 9230 079b 05       		.byte	0x5
 9231 079c 00       		.uleb128 0
 9232 079d 108B0000 		.4byte	.LASF324
 9233 07a1 05       		.byte	0x5
 9234 07a2 00       		.uleb128 0
 9235 07a3 61590000 		.4byte	.LASF325
 9236 07a7 05       		.byte	0x5
 9237 07a8 00       		.uleb128 0
 9238 07a9 B13C0000 		.4byte	.LASF326
 9239 07ad 05       		.byte	0x5
 9240 07ae 00       		.uleb128 0
 9241 07af 3A490000 		.4byte	.LASF327
 9242 07b3 05       		.byte	0x5
 9243 07b4 00       		.uleb128 0
 9244 07b5 248B0000 		.4byte	.LASF328
 9245 07b9 05       		.byte	0x5
 9246 07ba 00       		.uleb128 0
 9247 07bb CC640000 		.4byte	.LASF329
 9248 07bf 05       		.byte	0x5
 9249 07c0 00       		.uleb128 0
 9250 07c1 FF980000 		.4byte	.LASF330
 9251 07c5 05       		.byte	0x5
 9252 07c6 00       		.uleb128 0
 9253 07c7 C63C0000 		.4byte	.LASF331
 9254 07cb 05       		.byte	0x5
 9255 07cc 00       		.uleb128 0
 9256 07cd BA5F0000 		.4byte	.LASF332
 9257 07d1 05       		.byte	0x5
 9258 07d2 00       		.uleb128 0
 9259 07d3 763D0000 		.4byte	.LASF333
 9260 07d7 05       		.byte	0x5
 9261 07d8 00       		.uleb128 0
 9262 07d9 CC060000 		.4byte	.LASF334
 9263 07dd 05       		.byte	0x5
 9264 07de 00       		.uleb128 0
 9265 07df 0E600000 		.4byte	.LASF335
 9266 07e3 05       		.byte	0x5
 9267 07e4 00       		.uleb128 0
 9268 07e5 EF4C0000 		.4byte	.LASF336
 9269 07e9 05       		.byte	0x5
 9270 07ea 00       		.uleb128 0
 9271 07eb CA430000 		.4byte	.LASF337
 9272 07ef 05       		.byte	0x5
 9273 07f0 00       		.uleb128 0
 9274 07f1 19950000 		.4byte	.LASF338
 9275 07f5 05       		.byte	0x5
 9276 07f6 00       		.uleb128 0
 9277 07f7 228E0000 		.4byte	.LASF339
 9278 07fb 05       		.byte	0x5
 9279 07fc 00       		.uleb128 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 231


 9280 07fd 40630000 		.4byte	.LASF340
 9281 0801 05       		.byte	0x5
 9282 0802 00       		.uleb128 0
 9283 0803 5A950000 		.4byte	.LASF341
 9284 0807 05       		.byte	0x5
 9285 0808 00       		.uleb128 0
 9286 0809 7E750000 		.4byte	.LASF342
 9287 080d 05       		.byte	0x5
 9288 080e 00       		.uleb128 0
 9289 080f DF400000 		.4byte	.LASF343
 9290 0813 05       		.byte	0x5
 9291 0814 00       		.uleb128 0
 9292 0815 9F110000 		.4byte	.LASF344
 9293 0819 05       		.byte	0x5
 9294 081a 00       		.uleb128 0
 9295 081b B5170000 		.4byte	.LASF345
 9296 081f 05       		.byte	0x5
 9297 0820 00       		.uleb128 0
 9298 0821 12160000 		.4byte	.LASF346
 9299 0825 05       		.byte	0x5
 9300 0826 00       		.uleb128 0
 9301 0827 7E360000 		.4byte	.LASF347
 9302 082b 05       		.byte	0x5
 9303 082c 00       		.uleb128 0
 9304 082d 038C0000 		.4byte	.LASF348
 9305 0831 05       		.byte	0x5
 9306 0832 00       		.uleb128 0
 9307 0833 66360000 		.4byte	.LASF349
 9308 0837 05       		.byte	0x5
 9309 0838 00       		.uleb128 0
 9310 0839 135A0000 		.4byte	.LASF350
 9311 083d 05       		.byte	0x5
 9312 083e 00       		.uleb128 0
 9313 083f 948D0000 		.4byte	.LASF351
 9314 0843 05       		.byte	0x5
 9315 0844 00       		.uleb128 0
 9316 0845 17000000 		.4byte	.LASF352
 9317 0849 05       		.byte	0x5
 9318 084a 00       		.uleb128 0
 9319 084b 55750000 		.4byte	.LASF353
 9320 084f 05       		.byte	0x5
 9321 0850 00       		.uleb128 0
 9322 0851 21860000 		.4byte	.LASF354
 9323 0855 00       		.byte	0
 9324              		.section	.debug_macro,"G",%progbits,wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b,comda
 9325              	.Ldebug_macro2:
 9326 0000 0400     		.2byte	0x4
 9327 0002 00       		.byte	0
 9328 0003 05       		.byte	0x5
 9329 0004 04       		.uleb128 0x4
 9330 0005 674C0000 		.4byte	.LASF359
 9331 0009 05       		.byte	0x5
 9332 000a 06       		.uleb128 0x6
 9333 000b 4F4C0000 		.4byte	.LASF360
 9334 000f 05       		.byte	0x5
 9335 0010 07       		.uleb128 0x7
 9336 0011 A01B0000 		.4byte	.LASF361
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 232


 9337 0015 05       		.byte	0x5
 9338 0016 08       		.uleb128 0x8
 9339 0017 9D550000 		.4byte	.LASF362
 9340 001b 05       		.byte	0x5
 9341 001c 09       		.uleb128 0x9
 9342 001d 086A0000 		.4byte	.LASF363
 9343 0021 00       		.byte	0
 9344              		.section	.debug_macro,"G",%progbits,wm4.newlib.h.21.0b9fc973bddc8b940a18de2b6ea6adc7,comdat
 9345              	.Ldebug_macro3:
 9346 0000 0400     		.2byte	0x4
 9347 0002 00       		.byte	0
 9348 0003 05       		.byte	0x5
 9349 0004 15       		.uleb128 0x15
 9350 0005 C09C0000 		.4byte	.LASF364
 9351 0009 05       		.byte	0x5
 9352 000a 18       		.uleb128 0x18
 9353 000b 5E870000 		.4byte	.LASF365
 9354 000f 05       		.byte	0x5
 9355 0010 28       		.uleb128 0x28
 9356 0011 052E0000 		.4byte	.LASF366
 9357 0015 05       		.byte	0x5
 9358 0016 32       		.uleb128 0x32
 9359 0017 157D0000 		.4byte	.LASF367
 9360 001b 05       		.byte	0x5
 9361 001c 36       		.uleb128 0x36
 9362 001d B24C0000 		.4byte	.LASF368
 9363 0021 05       		.byte	0x5
 9364 0022 39       		.uleb128 0x39
 9365 0023 491D0000 		.4byte	.LASF369
 9366 0027 05       		.byte	0x5
 9367 0028 3C       		.uleb128 0x3c
 9368 0029 54500000 		.4byte	.LASF370
 9369 002d 05       		.byte	0x5
 9370 002e 3F       		.uleb128 0x3f
 9371 002f ED090000 		.4byte	.LASF371
 9372 0033 05       		.byte	0x5
 9373 0034 42       		.uleb128 0x42
 9374 0035 D4560000 		.4byte	.LASF372
 9375 0039 05       		.byte	0x5
 9376 003a 45       		.uleb128 0x45
 9377 003b 7E630000 		.4byte	.LASF373
 9378 003f 05       		.byte	0x5
 9379 0040 48       		.uleb128 0x48
 9380 0041 36320000 		.4byte	.LASF374
 9381 0045 05       		.byte	0x5
 9382 0046 4B       		.uleb128 0x4b
 9383 0047 925D0000 		.4byte	.LASF375
 9384 004b 00       		.byte	0
 9385              		.section	.debug_macro,"G",%progbits,wm4.features.h.22.692cd1f2e947ca7b8fea300222f5f1f2,comdat
 9386              	.Ldebug_macro4:
 9387 0000 0400     		.2byte	0x4
 9388 0002 00       		.byte	0
 9389 0003 05       		.byte	0x5
 9390 0004 16       		.uleb128 0x16
 9391 0005 98250000 		.4byte	.LASF377
 9392 0009 05       		.byte	0x5
 9393 000a 21       		.uleb128 0x21
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 233


 9394 000b F0120000 		.4byte	.LASF378
 9395 000f 05       		.byte	0x5
 9396 0010 28       		.uleb128 0x28
 9397 0011 06890000 		.4byte	.LASF379
 9398 0015 06       		.byte	0x6
 9399 0016 8001     		.uleb128 0x80
 9400 0018 4D8E0000 		.4byte	.LASF380
 9401 001c 05       		.byte	0x5
 9402 001d 8101     		.uleb128 0x81
 9403 001f F5430000 		.4byte	.LASF381
 9404 0023 06       		.byte	0x6
 9405 0024 8501     		.uleb128 0x85
 9406 0026 92400000 		.4byte	.LASF382
 9407 002a 05       		.byte	0x5
 9408 002b 8601     		.uleb128 0x86
 9409 002d 42910000 		.4byte	.LASF383
 9410 0031 06       		.byte	0x6
 9411 0032 8701     		.uleb128 0x87
 9412 0034 899E0000 		.4byte	.LASF384
 9413 0038 05       		.byte	0x5
 9414 0039 8801     		.uleb128 0x88
 9415 003b 1E190000 		.4byte	.LASF385
 9416 003f 06       		.byte	0x6
 9417 0040 9B01     		.uleb128 0x9b
 9418 0042 5C3B0000 		.4byte	.LASF386
 9419 0046 05       		.byte	0x5
 9420 0047 9C01     		.uleb128 0x9c
 9421 0049 DD520000 		.4byte	.LASF387
 9422 004d 05       		.byte	0x5
 9423 004e F201     		.uleb128 0xf2
 9424 0050 E7140000 		.4byte	.LASF388
 9425 0054 05       		.byte	0x5
 9426 0055 F801     		.uleb128 0xf8
 9427 0057 30510000 		.4byte	.LASF389
 9428 005b 05       		.byte	0x5
 9429 005c 8002     		.uleb128 0x100
 9430 005e 776B0000 		.4byte	.LASF390
 9431 0062 05       		.byte	0x5
 9432 0063 8802     		.uleb128 0x108
 9433 0065 ED1B0000 		.4byte	.LASF391
 9434 0069 05       		.byte	0x5
 9435 006a 9002     		.uleb128 0x110
 9436 006c 641B0000 		.4byte	.LASF392
 9437 0070 05       		.byte	0x5
 9438 0071 9402     		.uleb128 0x114
 9439 0073 CB660000 		.4byte	.LASF393
 9440 0077 05       		.byte	0x5
 9441 0078 9A02     		.uleb128 0x11a
 9442 007a C5530000 		.4byte	.LASF394
 9443 007e 05       		.byte	0x5
 9444 007f AA02     		.uleb128 0x12a
 9445 0081 63000000 		.4byte	.LASF395
 9446 0085 05       		.byte	0x5
 9447 0086 BA02     		.uleb128 0x13a
 9448 0088 70880000 		.4byte	.LASF396
 9449 008c 00       		.byte	0
 9450              		.section	.debug_macro,"G",%progbits,wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e,comdat
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 234


 9451              	.Ldebug_macro5:
 9452 0000 0400     		.2byte	0x4
 9453 0002 00       		.byte	0
 9454 0003 05       		.byte	0x5
 9455 0004 DB01     		.uleb128 0xdb
 9456 0006 D65F0000 		.4byte	.LASF397
 9457 000a 06       		.byte	0x6
 9458 000b E101     		.uleb128 0xe1
 9459 000d E2110000 		.4byte	.LASF398
 9460 0011 05       		.byte	0x5
 9461 0012 E501     		.uleb128 0xe5
 9462 0014 BC600000 		.4byte	.LASF399
 9463 0018 05       		.byte	0x5
 9464 0019 F401     		.uleb128 0xf4
 9465 001b 30490000 		.4byte	.LASF400
 9466 001f 05       		.byte	0x5
 9467 0020 F801     		.uleb128 0xf8
 9468 0022 A65D0000 		.4byte	.LASF401
 9469 0026 05       		.byte	0x5
 9470 0027 FF01     		.uleb128 0xff
 9471 0029 B5220000 		.4byte	.LASF402
 9472 002d 05       		.byte	0x5
 9473 002e 8502     		.uleb128 0x105
 9474 0030 EE010000 		.4byte	.LASF403
 9475 0034 00       		.byte	0
 9476              		.section	.debug_macro,"G",%progbits,wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51,comdat
 9477              	.Ldebug_macro6:
 9478 0000 0400     		.2byte	0x4
 9479 0002 00       		.byte	0
 9480 0003 05       		.byte	0x5
 9481 0004 17       		.uleb128 0x17
 9482 0005 507D0000 		.4byte	.LASF404
 9483 0009 05       		.byte	0x5
 9484 000a 2C       		.uleb128 0x2c
 9485 000b E05E0000 		.4byte	.LASF405
 9486 000f 05       		.byte	0x5
 9487 0010 2D       		.uleb128 0x2d
 9488 0011 67300000 		.4byte	.LASF406
 9489 0015 05       		.byte	0x5
 9490 0016 2E       		.uleb128 0x2e
 9491 0017 64530000 		.4byte	.LASF407
 9492 001b 05       		.byte	0x5
 9493 001c 32       		.uleb128 0x32
 9494 001d EC940000 		.4byte	.LASF408
 9495 0021 05       		.byte	0x5
 9496 0022 33       		.uleb128 0x33
 9497 0023 F69A0000 		.4byte	.LASF409
 9498 0027 05       		.byte	0x5
 9499 0028 34       		.uleb128 0x34
 9500 0029 3E760000 		.4byte	.LASF410
 9501 002d 05       		.byte	0x5
 9502 002e 35       		.uleb128 0x35
 9503 002f 07140000 		.4byte	.LASF411
 9504 0033 05       		.byte	0x5
 9505 0034 36       		.uleb128 0x36
 9506 0035 92240000 		.4byte	.LASF412
 9507 0039 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 235


 9508 003a 37       		.uleb128 0x37
 9509 003b 632F0000 		.4byte	.LASF413
 9510 003f 05       		.byte	0x5
 9511 0040 38       		.uleb128 0x38
 9512 0041 324D0000 		.4byte	.LASF414
 9513 0045 05       		.byte	0x5
 9514 0046 39       		.uleb128 0x39
 9515 0047 9C8B0000 		.4byte	.LASF415
 9516 004b 05       		.byte	0x5
 9517 004c 40       		.uleb128 0x40
 9518 004d F0570000 		.4byte	.LASF416
 9519 0051 05       		.byte	0x5
 9520 0052 41       		.uleb128 0x41
 9521 0053 EC060000 		.4byte	.LASF417
 9522 0057 05       		.byte	0x5
 9523 0058 42       		.uleb128 0x42
 9524 0059 A05E0000 		.4byte	.LASF418
 9525 005d 05       		.byte	0x5
 9526 005e 43       		.uleb128 0x43
 9527 005f CD240000 		.4byte	.LASF419
 9528 0063 05       		.byte	0x5
 9529 0064 45       		.uleb128 0x45
 9530 0065 1D1F0000 		.4byte	.LASF420
 9531 0069 05       		.byte	0x5
 9532 006a 46       		.uleb128 0x46
 9533 006b DD0D0000 		.4byte	.LASF421
 9534 006f 05       		.byte	0x5
 9535 0070 47       		.uleb128 0x47
 9536 0071 0C750000 		.4byte	.LASF422
 9537 0075 05       		.byte	0x5
 9538 0076 49       		.uleb128 0x49
 9539 0077 A3020000 		.4byte	.LASF423
 9540 007b 05       		.byte	0x5
 9541 007c 4C       		.uleb128 0x4c
 9542 007d D8190000 		.4byte	.LASF424
 9543 0081 05       		.byte	0x5
 9544 0082 65       		.uleb128 0x65
 9545 0083 23830000 		.4byte	.LASF425
 9546 0087 05       		.byte	0x5
 9547 0088 7B       		.uleb128 0x7b
 9548 0089 769D0000 		.4byte	.LASF426
 9549 008d 05       		.byte	0x5
 9550 008e 8301     		.uleb128 0x83
 9551 0090 81160000 		.4byte	.LASF427
 9552 0094 05       		.byte	0x5
 9553 0095 8401     		.uleb128 0x84
 9554 0097 52120000 		.4byte	.LASF428
 9555 009b 00       		.byte	0
 9556              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2,comdat
 9557              	.Ldebug_macro7:
 9558 0000 0400     		.2byte	0x4
 9559 0002 00       		.byte	0
 9560 0003 05       		.byte	0x5
 9561 0004 0D       		.uleb128 0xd
 9562 0005 E9290000 		.4byte	.LASF429
 9563 0009 05       		.byte	0x5
 9564 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 236


 9565 000b 01280000 		.4byte	.LASF430
 9566 000f 05       		.byte	0x5
 9567 0010 0F       		.uleb128 0xf
 9568 0011 E8430000 		.4byte	.LASF431
 9569 0015 00       		.byte	0
 9570              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1,comdat
 9571              	.Ldebug_macro8:
 9572 0000 0400     		.2byte	0x4
 9573 0002 00       		.byte	0
 9574 0003 05       		.byte	0x5
 9575 0004 BB01     		.uleb128 0xbb
 9576 0006 BA160000 		.4byte	.LASF432
 9577 000a 05       		.byte	0x5
 9578 000b BC01     		.uleb128 0xbc
 9579 000d F60A0000 		.4byte	.LASF433
 9580 0011 05       		.byte	0x5
 9581 0012 BD01     		.uleb128 0xbd
 9582 0014 C22C0000 		.4byte	.LASF434
 9583 0018 05       		.byte	0x5
 9584 0019 BE01     		.uleb128 0xbe
 9585 001b 7D140000 		.4byte	.LASF435
 9586 001f 05       		.byte	0x5
 9587 0020 BF01     		.uleb128 0xbf
 9588 0022 3F410000 		.4byte	.LASF436
 9589 0026 05       		.byte	0x5
 9590 0027 C001     		.uleb128 0xc0
 9591 0029 B70E0000 		.4byte	.LASF437
 9592 002d 05       		.byte	0x5
 9593 002e C101     		.uleb128 0xc1
 9594 0030 4A500000 		.4byte	.LASF438
 9595 0034 05       		.byte	0x5
 9596 0035 C201     		.uleb128 0xc2
 9597 0037 284D0000 		.4byte	.LASF439
 9598 003b 05       		.byte	0x5
 9599 003c C301     		.uleb128 0xc3
 9600 003e CF720000 		.4byte	.LASF440
 9601 0042 05       		.byte	0x5
 9602 0043 C401     		.uleb128 0xc4
 9603 0045 7D550000 		.4byte	.LASF441
 9604 0049 05       		.byte	0x5
 9605 004a C501     		.uleb128 0xc5
 9606 004c 58110000 		.4byte	.LASF442
 9607 0050 05       		.byte	0x5
 9608 0051 C601     		.uleb128 0xc6
 9609 0053 60200000 		.4byte	.LASF443
 9610 0057 05       		.byte	0x5
 9611 0058 C701     		.uleb128 0xc7
 9612 005a 81180000 		.4byte	.LASF444
 9613 005e 05       		.byte	0x5
 9614 005f C801     		.uleb128 0xc8
 9615 0061 AB600000 		.4byte	.LASF445
 9616 0065 05       		.byte	0x5
 9617 0066 C901     		.uleb128 0xc9
 9618 0068 5D8E0000 		.4byte	.LASF446
 9619 006c 05       		.byte	0x5
 9620 006d CA01     		.uleb128 0xca
 9621 006f 97780000 		.4byte	.LASF447
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 237


 9622 0073 05       		.byte	0x5
 9623 0074 D201     		.uleb128 0xd2
 9624 0076 FD0D0000 		.4byte	.LASF448
 9625 007a 06       		.byte	0x6
 9626 007b EE01     		.uleb128 0xee
 9627 007d CA4C0000 		.4byte	.LASF449
 9628 0081 05       		.byte	0x5
 9629 0082 8B02     		.uleb128 0x10b
 9630 0084 0C950000 		.4byte	.LASF450
 9631 0088 05       		.byte	0x5
 9632 0089 8C02     		.uleb128 0x10c
 9633 008b 3E880000 		.4byte	.LASF451
 9634 008f 05       		.byte	0x5
 9635 0090 8D02     		.uleb128 0x10d
 9636 0092 F1600000 		.4byte	.LASF452
 9637 0096 05       		.byte	0x5
 9638 0097 8E02     		.uleb128 0x10e
 9639 0099 6D4B0000 		.4byte	.LASF453
 9640 009d 05       		.byte	0x5
 9641 009e 8F02     		.uleb128 0x10f
 9642 00a0 73730000 		.4byte	.LASF454
 9643 00a4 05       		.byte	0x5
 9644 00a5 9002     		.uleb128 0x110
 9645 00a7 00500000 		.4byte	.LASF455
 9646 00ab 05       		.byte	0x5
 9647 00ac 9102     		.uleb128 0x111
 9648 00ae 1B730000 		.4byte	.LASF456
 9649 00b2 05       		.byte	0x5
 9650 00b3 9202     		.uleb128 0x112
 9651 00b5 39370000 		.4byte	.LASF457
 9652 00b9 05       		.byte	0x5
 9653 00ba 9302     		.uleb128 0x113
 9654 00bc 8A9C0000 		.4byte	.LASF458
 9655 00c0 05       		.byte	0x5
 9656 00c1 9402     		.uleb128 0x114
 9657 00c3 51700000 		.4byte	.LASF459
 9658 00c7 05       		.byte	0x5
 9659 00c8 9502     		.uleb128 0x115
 9660 00ca B8620000 		.4byte	.LASF460
 9661 00ce 05       		.byte	0x5
 9662 00cf 9602     		.uleb128 0x116
 9663 00d1 D68C0000 		.4byte	.LASF461
 9664 00d5 05       		.byte	0x5
 9665 00d6 9702     		.uleb128 0x117
 9666 00d8 D5740000 		.4byte	.LASF462
 9667 00dc 05       		.byte	0x5
 9668 00dd 9802     		.uleb128 0x118
 9669 00df 965A0000 		.4byte	.LASF463
 9670 00e3 05       		.byte	0x5
 9671 00e4 9902     		.uleb128 0x119
 9672 00e6 EB560000 		.4byte	.LASF464
 9673 00ea 06       		.byte	0x6
 9674 00eb A602     		.uleb128 0x126
 9675 00ed 988F0000 		.4byte	.LASF465
 9676 00f1 06       		.byte	0x6
 9677 00f2 DB02     		.uleb128 0x15b
 9678 00f4 A30C0000 		.4byte	.LASF466
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 238


 9679 00f8 06       		.byte	0x6
 9680 00f9 9103     		.uleb128 0x191
 9681 00fb 2A110000 		.4byte	.LASF467
 9682 00ff 05       		.byte	0x5
 9683 0100 9603     		.uleb128 0x196
 9684 0102 E0390000 		.4byte	.LASF468
 9685 0106 06       		.byte	0x6
 9686 0107 9C03     		.uleb128 0x19c
 9687 0109 803A0000 		.4byte	.LASF469
 9688 010d 00       		.byte	0
 9689              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef,comdat
 9690              	.Ldebug_macro9:
 9691 0000 0400     		.2byte	0x4
 9692 0002 00       		.byte	0
 9693 0003 05       		.byte	0x5
 9694 0004 27       		.uleb128 0x27
 9695 0005 014A0000 		.4byte	.LASF471
 9696 0009 05       		.byte	0x5
 9697 000a 28       		.uleb128 0x28
 9698 000b 4E650000 		.4byte	.LASF472
 9699 000f 05       		.byte	0x5
 9700 0010 2A       		.uleb128 0x2a
 9701 0011 8D3D0000 		.4byte	.LASF473
 9702 0015 05       		.byte	0x5
 9703 0016 8901     		.uleb128 0x89
 9704 0018 494E0000 		.4byte	.LASF474
 9705 001c 05       		.byte	0x5
 9706 001d 8A01     		.uleb128 0x8a
 9707 001f 5F480000 		.4byte	.LASF475
 9708 0023 05       		.byte	0x5
 9709 0024 8B01     		.uleb128 0x8b
 9710 0026 3A580000 		.4byte	.LASF476
 9711 002a 05       		.byte	0x5
 9712 002b 8C01     		.uleb128 0x8c
 9713 002d 906B0000 		.4byte	.LASF477
 9714 0031 05       		.byte	0x5
 9715 0032 8D01     		.uleb128 0x8d
 9716 0034 8C860000 		.4byte	.LASF478
 9717 0038 05       		.byte	0x5
 9718 0039 8E01     		.uleb128 0x8e
 9719 003b 720D0000 		.4byte	.LASF479
 9720 003f 05       		.byte	0x5
 9721 0040 8F01     		.uleb128 0x8f
 9722 0042 BA730000 		.4byte	.LASF480
 9723 0046 05       		.byte	0x5
 9724 0047 9001     		.uleb128 0x90
 9725 0049 E5610000 		.4byte	.LASF481
 9726 004d 05       		.byte	0x5
 9727 004e 9101     		.uleb128 0x91
 9728 0050 E4590000 		.4byte	.LASF482
 9729 0054 06       		.byte	0x6
 9730 0055 A101     		.uleb128 0xa1
 9731 0057 64860000 		.4byte	.LASF483
 9732 005b 06       		.byte	0x6
 9733 005c EE01     		.uleb128 0xee
 9734 005e CA4C0000 		.4byte	.LASF449
 9735 0062 06       		.byte	0x6
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 239


 9736 0063 DB02     		.uleb128 0x15b
 9737 0065 A30C0000 		.4byte	.LASF466
 9738 0069 06       		.byte	0x6
 9739 006a 9103     		.uleb128 0x191
 9740 006c 2A110000 		.4byte	.LASF467
 9741 0070 05       		.byte	0x5
 9742 0071 9603     		.uleb128 0x196
 9743 0073 E0390000 		.4byte	.LASF468
 9744 0077 06       		.byte	0x6
 9745 0078 9C03     		.uleb128 0x19c
 9746 007a 803A0000 		.4byte	.LASF469
 9747 007e 05       		.byte	0x5
 9748 007f A103     		.uleb128 0x1a1
 9749 0081 86440000 		.4byte	.LASF484
 9750 0085 00       		.byte	0
 9751              		.section	.debug_macro,"G",%progbits,wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382,comdat
 9752              	.Ldebug_macro10:
 9753 0000 0400     		.2byte	0x4
 9754 0002 00       		.byte	0
 9755 0003 05       		.byte	0x5
 9756 0004 06       		.uleb128 0x6
 9757 0005 9B610000 		.4byte	.LASF487
 9758 0009 05       		.byte	0x5
 9759 000a 0F       		.uleb128 0xf
 9760 000b 0A530000 		.4byte	.LASF488
 9761 000f 05       		.byte	0x5
 9762 0010 21       		.uleb128 0x21
 9763 0011 AB3F0000 		.4byte	.LASF489
 9764 0015 05       		.byte	0x5
 9765 0016 2F       		.uleb128 0x2f
 9766 0017 332C0000 		.4byte	.LASF490
 9767 001b 05       		.byte	0x5
 9768 001c 45       		.uleb128 0x45
 9769 001d 76200000 		.4byte	.LASF491
 9770 0021 05       		.byte	0x5
 9771 0022 5F       		.uleb128 0x5f
 9772 0023 25670000 		.4byte	.LASF492
 9773 0027 05       		.byte	0x5
 9774 0028 7E       		.uleb128 0x7e
 9775 0029 F9590000 		.4byte	.LASF493
 9776 002d 05       		.byte	0x5
 9777 002e 9801     		.uleb128 0x98
 9778 0030 F7150000 		.4byte	.LASF494
 9779 0034 05       		.byte	0x5
 9780 0035 AE01     		.uleb128 0xae
 9781 0037 7C780000 		.4byte	.LASF495
 9782 003b 05       		.byte	0x5
 9783 003c C001     		.uleb128 0xc0
 9784 003e 1B520000 		.4byte	.LASF496
 9785 0042 06       		.byte	0x6
 9786 0043 D601     		.uleb128 0xd6
 9787 0045 1F670000 		.4byte	.LASF497
 9788 0049 00       		.byte	0
 9789              		.section	.debug_macro,"G",%progbits,wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea,comdat
 9790              	.Ldebug_macro11:
 9791 0000 0400     		.2byte	0x4
 9792 0002 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 240


 9793 0003 05       		.byte	0x5
 9794 0004 02       		.uleb128 0x2
 9795 0005 3A9D0000 		.4byte	.LASF498
 9796 0009 05       		.byte	0x5
 9797 000a 0B       		.uleb128 0xb
 9798 000b 7E620000 		.4byte	.LASF499
 9799 000f 05       		.byte	0x5
 9800 0010 0C       		.uleb128 0xc
 9801 0011 0E470000 		.4byte	.LASF500
 9802 0015 05       		.byte	0x5
 9803 0016 0D       		.uleb128 0xd
 9804 0017 DD5D0000 		.4byte	.LASF501
 9805 001b 05       		.byte	0x5
 9806 001c 0E       		.uleb128 0xe
 9807 001d D4950000 		.4byte	.LASF502
 9808 0021 05       		.byte	0x5
 9809 0022 0F       		.uleb128 0xf
 9810 0023 139A0000 		.4byte	.LASF503
 9811 0027 05       		.byte	0x5
 9812 0028 10       		.uleb128 0x10
 9813 0029 110D0000 		.4byte	.LASF504
 9814 002d 05       		.byte	0x5
 9815 002e 11       		.uleb128 0x11
 9816 002f 804A0000 		.4byte	.LASF505
 9817 0033 05       		.byte	0x5
 9818 0034 12       		.uleb128 0x12
 9819 0035 E9370000 		.4byte	.LASF506
 9820 0039 05       		.byte	0x5
 9821 003a 13       		.uleb128 0x13
 9822 003b A42A0000 		.4byte	.LASF507
 9823 003f 05       		.byte	0x5
 9824 0040 14       		.uleb128 0x14
 9825 0041 2F660000 		.4byte	.LASF508
 9826 0045 05       		.byte	0x5
 9827 0046 15       		.uleb128 0x15
 9828 0047 794F0000 		.4byte	.LASF509
 9829 004b 05       		.byte	0x5
 9830 004c 16       		.uleb128 0x16
 9831 004d D8840000 		.4byte	.LASF510
 9832 0051 00       		.byte	0
 9833              		.section	.debug_macro,"G",%progbits,wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068,comdat
 9834              	.Ldebug_macro12:
 9835 0000 0400     		.2byte	0x4
 9836 0002 00       		.byte	0
 9837 0003 06       		.byte	0x6
 9838 0004 7D       		.uleb128 0x7d
 9839 0005 3D6A0000 		.4byte	.LASF511
 9840 0009 05       		.byte	0x5
 9841 000a 9001     		.uleb128 0x90
 9842 000c 3E3D0000 		.4byte	.LASF512
 9843 0010 06       		.byte	0x6
 9844 0011 9201     		.uleb128 0x92
 9845 0013 B87E0000 		.4byte	.LASF513
 9846 0017 05       		.byte	0x5
 9847 0018 9E01     		.uleb128 0x9e
 9848 001a E4910000 		.4byte	.LASF514
 9849 001e 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 241


 9850              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34,comdat
 9851              	.Ldebug_macro13:
 9852 0000 0400     		.2byte	0x4
 9853 0002 00       		.byte	0
 9854 0003 06       		.byte	0x6
 9855 0004 A101     		.uleb128 0xa1
 9856 0006 64860000 		.4byte	.LASF483
 9857 000a 06       		.byte	0x6
 9858 000b EE01     		.uleb128 0xee
 9859 000d CA4C0000 		.4byte	.LASF449
 9860 0011 06       		.byte	0x6
 9861 0012 DB02     		.uleb128 0x15b
 9862 0014 A30C0000 		.4byte	.LASF466
 9863 0018 05       		.byte	0x5
 9864 0019 E002     		.uleb128 0x160
 9865 001b 9A290000 		.4byte	.LASF515
 9866 001f 06       		.byte	0x6
 9867 0020 E702     		.uleb128 0x167
 9868 0022 21230000 		.4byte	.LASF516
 9869 0026 06       		.byte	0x6
 9870 0027 9103     		.uleb128 0x191
 9871 0029 2A110000 		.4byte	.LASF467
 9872 002d 05       		.byte	0x5
 9873 002e 9603     		.uleb128 0x196
 9874 0030 E0390000 		.4byte	.LASF468
 9875 0034 06       		.byte	0x6
 9876 0035 9C03     		.uleb128 0x19c
 9877 0037 803A0000 		.4byte	.LASF469
 9878 003b 05       		.byte	0x5
 9879 003c A103     		.uleb128 0x1a1
 9880 003e 86440000 		.4byte	.LASF484
 9881 0042 00       		.byte	0
 9882              		.section	.debug_macro,"G",%progbits,wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098,comdat
 9883              	.Ldebug_macro14:
 9884 0000 0400     		.2byte	0x4
 9885 0002 00       		.byte	0
 9886 0003 05       		.byte	0x5
 9887 0004 B701     		.uleb128 0xb7
 9888 0006 971A0000 		.4byte	.LASF517
 9889 000a 05       		.byte	0x5
 9890 000b BA01     		.uleb128 0xba
 9891 000d D8580000 		.4byte	.LASF518
 9892 0011 05       		.byte	0x5
 9893 0012 BD01     		.uleb128 0xbd
 9894 0014 87740000 		.4byte	.LASF519
 9895 0018 05       		.byte	0x5
 9896 0019 C001     		.uleb128 0xc0
 9897 001b 84420000 		.4byte	.LASF520
 9898 001f 00       		.byte	0
 9899              		.section	.debug_macro,"G",%progbits,wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f,comdat
 9900              	.Ldebug_macro15:
 9901 0000 0400     		.2byte	0x4
 9902 0002 00       		.byte	0
 9903 0003 05       		.byte	0x5
 9904 0004 11       		.uleb128 0x11
 9905 0005 E3860000 		.4byte	.LASF521
 9906 0009 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 242


 9907 000a 15       		.uleb128 0x15
 9908 000b 70780000 		.4byte	.LASF522
 9909 000f 05       		.byte	0x5
 9910 0010 48       		.uleb128 0x48
 9911 0011 B05D0000 		.4byte	.LASF523
 9912 0015 05       		.byte	0x5
 9913 0016 64       		.uleb128 0x64
 9914 0017 889B0000 		.4byte	.LASF524
 9915 001b 05       		.byte	0x5
 9916 001c 6A       		.uleb128 0x6a
 9917 001d DD810000 		.4byte	.LASF525
 9918 0021 05       		.byte	0x5
 9919 0022 B201     		.uleb128 0xb2
 9920 0024 4E4A0000 		.4byte	.LASF526
 9921 0028 05       		.byte	0x5
 9922 0029 B802     		.uleb128 0x138
 9923 002b CF770000 		.4byte	.LASF527
 9924 002f 05       		.byte	0x5
 9925 0030 B902     		.uleb128 0x139
 9926 0032 97460000 		.4byte	.LASF528
 9927 0036 05       		.byte	0x5
 9928 0037 BA02     		.uleb128 0x13a
 9929 0039 651E0000 		.4byte	.LASF529
 9930 003d 05       		.byte	0x5
 9931 003e BB02     		.uleb128 0x13b
 9932 0040 61850000 		.4byte	.LASF530
 9933 0044 05       		.byte	0x5
 9934 0045 BC02     		.uleb128 0x13c
 9935 0047 41770000 		.4byte	.LASF531
 9936 004b 05       		.byte	0x5
 9937 004c BD02     		.uleb128 0x13d
 9938 004e D8570000 		.4byte	.LASF532
 9939 0052 05       		.byte	0x5
 9940 0053 BE02     		.uleb128 0x13e
 9941 0055 DB980000 		.4byte	.LASF533
 9942 0059 05       		.byte	0x5
 9943 005a CA02     		.uleb128 0x14a
 9944 005c 1A100000 		.4byte	.LASF534
 9945 0060 05       		.byte	0x5
 9946 0061 CB02     		.uleb128 0x14b
 9947 0063 E49D0000 		.4byte	.LASF535
 9948 0067 05       		.byte	0x5
 9949 0068 CC02     		.uleb128 0x14c
 9950 006a 6F030000 		.4byte	.LASF536
 9951 006e 05       		.byte	0x5
 9952 006f F404     		.uleb128 0x274
 9953 0071 E7130000 		.4byte	.LASF537
 9954 0075 05       		.byte	0x5
 9955 0076 8A05     		.uleb128 0x28a
 9956 0078 A45A0000 		.4byte	.LASF538
 9957 007c 05       		.byte	0x5
 9958 007d BA05     		.uleb128 0x2ba
 9959 007f C77F0000 		.4byte	.LASF539
 9960 0083 05       		.byte	0x5
 9961 0084 C805     		.uleb128 0x2c8
 9962 0086 5E8F0000 		.4byte	.LASF540
 9963 008a 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 243


 9964 008b C905     		.uleb128 0x2c9
 9965 008d 2F110000 		.4byte	.LASF541
 9966 0091 05       		.byte	0x5
 9967 0092 CA05     		.uleb128 0x2ca
 9968 0094 A1740000 		.4byte	.LASF542
 9969 0098 05       		.byte	0x5
 9970 0099 CB05     		.uleb128 0x2cb
 9971 009b C14E0000 		.4byte	.LASF543
 9972 009f 05       		.byte	0x5
 9973 00a0 CC05     		.uleb128 0x2cc
 9974 00a2 2A7B0000 		.4byte	.LASF544
 9975 00a6 05       		.byte	0x5
 9976 00a7 CD05     		.uleb128 0x2cd
 9977 00a9 CD670000 		.4byte	.LASF545
 9978 00ad 05       		.byte	0x5
 9979 00ae CE05     		.uleb128 0x2ce
 9980 00b0 E3490000 		.4byte	.LASF546
 9981 00b4 05       		.byte	0x5
 9982 00b5 D005     		.uleb128 0x2d0
 9983 00b7 59330000 		.4byte	.LASF547
 9984 00bb 05       		.byte	0x5
 9985 00bc D105     		.uleb128 0x2d1
 9986 00be A23E0000 		.4byte	.LASF548
 9987 00c2 05       		.byte	0x5
 9988 00c3 D205     		.uleb128 0x2d2
 9989 00c5 8C140000 		.4byte	.LASF549
 9990 00c9 05       		.byte	0x5
 9991 00ca D305     		.uleb128 0x2d3
 9992 00cc 5C4D0000 		.4byte	.LASF550
 9993 00d0 05       		.byte	0x5
 9994 00d1 D405     		.uleb128 0x2d4
 9995 00d3 DC340000 		.4byte	.LASF551
 9996 00d7 05       		.byte	0x5
 9997 00d8 D505     		.uleb128 0x2d5
 9998 00da 270A0000 		.4byte	.LASF552
 9999 00de 05       		.byte	0x5
 10000 00df D605     		.uleb128 0x2d6
 10001 00e1 CE1E0000 		.4byte	.LASF553
 10002 00e5 05       		.byte	0x5
 10003 00e6 D705     		.uleb128 0x2d7
 10004 00e8 FF6F0000 		.4byte	.LASF554
 10005 00ec 05       		.byte	0x5
 10006 00ed D805     		.uleb128 0x2d8
 10007 00ef 350C0000 		.4byte	.LASF555
 10008 00f3 05       		.byte	0x5
 10009 00f4 D905     		.uleb128 0x2d9
 10010 00f6 C46E0000 		.4byte	.LASF556
 10011 00fa 05       		.byte	0x5
 10012 00fb DA05     		.uleb128 0x2da
 10013 00fd 2F7F0000 		.4byte	.LASF557
 10014 0101 05       		.byte	0x5
 10015 0102 DB05     		.uleb128 0x2db
 10016 0104 D32B0000 		.4byte	.LASF558
 10017 0108 05       		.byte	0x5
 10018 0109 DC05     		.uleb128 0x2dc
 10019 010b 8B0A0000 		.4byte	.LASF559
 10020 010f 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 244


 10021 0110 DD05     		.uleb128 0x2dd
 10022 0112 F13B0000 		.4byte	.LASF560
 10023 0116 05       		.byte	0x5
 10024 0117 DE05     		.uleb128 0x2de
 10025 0119 6B3B0000 		.4byte	.LASF561
 10026 011d 05       		.byte	0x5
 10027 011e DF05     		.uleb128 0x2df
 10028 0120 1F6C0000 		.4byte	.LASF562
 10029 0124 05       		.byte	0x5
 10030 0125 E005     		.uleb128 0x2e0
 10031 0127 436E0000 		.4byte	.LASF563
 10032 012b 05       		.byte	0x5
 10033 012c E105     		.uleb128 0x2e1
 10034 012e 5C290000 		.4byte	.LASF564
 10035 0132 05       		.byte	0x5
 10036 0133 E205     		.uleb128 0x2e2
 10037 0135 BD510000 		.4byte	.LASF565
 10038 0139 05       		.byte	0x5
 10039 013a E305     		.uleb128 0x2e3
 10040 013c 7E710000 		.4byte	.LASF566
 10041 0140 05       		.byte	0x5
 10042 0141 E405     		.uleb128 0x2e4
 10043 0143 AC1F0000 		.4byte	.LASF567
 10044 0147 05       		.byte	0x5
 10045 0148 E505     		.uleb128 0x2e5
 10046 014a A9520000 		.4byte	.LASF568
 10047 014e 05       		.byte	0x5
 10048 014f E605     		.uleb128 0x2e6
 10049 0151 B6970000 		.4byte	.LASF569
 10050 0155 05       		.byte	0x5
 10051 0156 E705     		.uleb128 0x2e7
 10052 0158 499B0000 		.4byte	.LASF570
 10053 015c 05       		.byte	0x5
 10054 015d EB05     		.uleb128 0x2eb
 10055 015f 45640000 		.4byte	.LASF571
 10056 0163 05       		.byte	0x5
 10057 0164 F305     		.uleb128 0x2f3
 10058 0166 A1030000 		.4byte	.LASF572
 10059 016a 05       		.byte	0x5
 10060 016b FB05     		.uleb128 0x2fb
 10061 016d BE840000 		.4byte	.LASF573
 10062 0171 05       		.byte	0x5
 10063 0172 8B06     		.uleb128 0x30b
 10064 0174 482C0000 		.4byte	.LASF574
 10065 0178 05       		.byte	0x5
 10066 0179 8E06     		.uleb128 0x30e
 10067 017b C2860000 		.4byte	.LASF575
 10068 017f 05       		.byte	0x5
 10069 0180 9406     		.uleb128 0x314
 10070 0182 0A010000 		.4byte	.LASF576
 10071 0186 00       		.byte	0
 10072              		.section	.debug_macro,"G",%progbits,wm4.cdefs.h.47.d0af77d4010113800282e6476aca9724,comdat
 10073              	.Ldebug_macro16:
 10074 0000 0400     		.2byte	0x4
 10075 0002 00       		.byte	0
 10076 0003 05       		.byte	0x5
 10077 0004 2F       		.uleb128 0x2f
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 245


 10078 0005 34380000 		.4byte	.LASF578
 10079 0009 05       		.byte	0x5
 10080 000a 30       		.uleb128 0x30
 10081 000b 5D6A0000 		.4byte	.LASF579
 10082 000f 05       		.byte	0x5
 10083 0010 31       		.uleb128 0x31
 10084 0011 4F520000 		.4byte	.LASF580
 10085 0015 05       		.byte	0x5
 10086 0016 34       		.uleb128 0x34
 10087 0017 6A0C0000 		.4byte	.LASF581
 10088 001b 05       		.byte	0x5
 10089 001c 37       		.uleb128 0x37
 10090 001d 3A1D0000 		.4byte	.LASF582
 10091 0021 05       		.byte	0x5
 10092 0022 38       		.uleb128 0x38
 10093 0023 8C930000 		.4byte	.LASF583
 10094 0027 05       		.byte	0x5
 10095 0028 3A       		.uleb128 0x3a
 10096 0029 5C410000 		.4byte	.LASF584
 10097 002d 05       		.byte	0x5
 10098 002e 3B       		.uleb128 0x3b
 10099 002f 22320000 		.4byte	.LASF585
 10100 0033 05       		.byte	0x5
 10101 0034 3C       		.uleb128 0x3c
 10102 0035 3D200000 		.4byte	.LASF586
 10103 0039 05       		.byte	0x5
 10104 003a 3D       		.uleb128 0x3d
 10105 003b D3850000 		.4byte	.LASF587
 10106 003f 05       		.byte	0x5
 10107 0040 40       		.uleb128 0x40
 10108 0041 070E0000 		.4byte	.LASF588
 10109 0045 05       		.byte	0x5
 10110 0046 41       		.uleb128 0x41
 10111 0047 1F090000 		.4byte	.LASF589
 10112 004b 05       		.byte	0x5
 10113 004c 42       		.uleb128 0x42
 10114 004d 3E500000 		.4byte	.LASF590
 10115 0051 05       		.byte	0x5
 10116 0052 4C       		.uleb128 0x4c
 10117 0053 0C110000 		.4byte	.LASF591
 10118 0057 05       		.byte	0x5
 10119 0058 4F       		.uleb128 0x4f
 10120 0059 8F3E0000 		.4byte	.LASF592
 10121 005d 05       		.byte	0x5
 10122 005e 55       		.uleb128 0x55
 10123 005f D17E0000 		.4byte	.LASF593
 10124 0063 05       		.byte	0x5
 10125 0064 5C       		.uleb128 0x5c
 10126 0065 A7670000 		.4byte	.LASF594
 10127 0069 05       		.byte	0x5
 10128 006a 5D       		.uleb128 0x5d
 10129 006b 877D0000 		.4byte	.LASF595
 10130 006f 05       		.byte	0x5
 10131 0070 69       		.uleb128 0x69
 10132 0071 AD8B0000 		.4byte	.LASF596
 10133 0075 05       		.byte	0x5
 10134 0076 6A       		.uleb128 0x6a
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 246


 10135 0077 E5470000 		.4byte	.LASF597
 10136 007b 05       		.byte	0x5
 10137 007c 6E       		.uleb128 0x6e
 10138 007d 49040000 		.4byte	.LASF598
 10139 0081 05       		.byte	0x5
 10140 0082 6F       		.uleb128 0x6f
 10141 0083 CF7C0000 		.4byte	.LASF599
 10142 0087 05       		.byte	0x5
 10143 0088 70       		.uleb128 0x70
 10144 0089 00000000 		.4byte	.LASF600
 10145 008d 05       		.byte	0x5
 10146 008e 73       		.uleb128 0x73
 10147 008f FD2B0000 		.4byte	.LASF601
 10148 0093 05       		.byte	0x5
 10149 0094 76       		.uleb128 0x76
 10150 0095 BE120000 		.4byte	.LASF602
 10151 0099 05       		.byte	0x5
 10152 009a 7D       		.uleb128 0x7d
 10153 009b 1F330000 		.4byte	.LASF603
 10154 009f 05       		.byte	0x5
 10155 00a0 7E       		.uleb128 0x7e
 10156 00a1 8F600000 		.4byte	.LASF604
 10157 00a5 05       		.byte	0x5
 10158 00a6 7F       		.uleb128 0x7f
 10159 00a7 E88C0000 		.4byte	.LASF605
 10160 00ab 05       		.byte	0x5
 10161 00ac 8301     		.uleb128 0x83
 10162 00ae F0670000 		.4byte	.LASF606
 10163 00b2 05       		.byte	0x5
 10164 00b3 8A01     		.uleb128 0x8a
 10165 00b5 D55C0000 		.4byte	.LASF607
 10166 00b9 05       		.byte	0x5
 10167 00ba 8E01     		.uleb128 0x8e
 10168 00bc F5610000 		.4byte	.LASF608
 10169 00c0 05       		.byte	0x5
 10170 00c1 8F01     		.uleb128 0x8f
 10171 00c3 EE200000 		.4byte	.LASF609
 10172 00c7 05       		.byte	0x5
 10173 00c8 9201     		.uleb128 0x92
 10174 00ca 2E540000 		.4byte	.LASF610
 10175 00ce 05       		.byte	0x5
 10176 00cf 9501     		.uleb128 0x95
 10177 00d1 466A0000 		.4byte	.LASF611
 10178 00d5 05       		.byte	0x5
 10179 00d6 9601     		.uleb128 0x96
 10180 00d8 EC2D0000 		.4byte	.LASF612
 10181 00dc 05       		.byte	0x5
 10182 00dd 9701     		.uleb128 0x97
 10183 00df 05820000 		.4byte	.LASF613
 10184 00e3 05       		.byte	0x5
 10185 00e4 9901     		.uleb128 0x99
 10186 00e6 80470000 		.4byte	.LASF614
 10187 00ea 05       		.byte	0x5
 10188 00eb 9A01     		.uleb128 0x9a
 10189 00ed 758E0000 		.4byte	.LASF615
 10190 00f1 05       		.byte	0x5
 10191 00f2 9C01     		.uleb128 0x9c
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 247


 10192 00f4 79900000 		.4byte	.LASF616
 10193 00f8 05       		.byte	0x5
 10194 00f9 9E01     		.uleb128 0x9e
 10195 00fb 36190000 		.4byte	.LASF617
 10196 00ff 05       		.byte	0x5
 10197 0100 AF01     		.uleb128 0xaf
 10198 0102 9F190000 		.4byte	.LASF618
 10199 0106 05       		.byte	0x5
 10200 0107 B001     		.uleb128 0xb0
 10201 0109 A10E0000 		.4byte	.LASF619
 10202 010d 05       		.byte	0x5
 10203 010e B101     		.uleb128 0xb1
 10204 0110 359A0000 		.4byte	.LASF620
 10205 0114 05       		.byte	0x5
 10206 0115 B201     		.uleb128 0xb2
 10207 0117 E2600000 		.4byte	.LASF621
 10208 011b 05       		.byte	0x5
 10209 011c B301     		.uleb128 0xb3
 10210 011e 09320000 		.4byte	.LASF622
 10211 0122 05       		.byte	0x5
 10212 0123 B501     		.uleb128 0xb5
 10213 0125 EC4A0000 		.4byte	.LASF623
 10214 0129 05       		.byte	0x5
 10215 012a B601     		.uleb128 0xb6
 10216 012c 7F6E0000 		.4byte	.LASF624
 10217 0130 05       		.byte	0x5
 10218 0131 B701     		.uleb128 0xb7
 10219 0133 6B980000 		.4byte	.LASF625
 10220 0137 05       		.byte	0x5
 10221 0138 EF01     		.uleb128 0xef
 10222 013a 5B2B0000 		.4byte	.LASF626
 10223 013e 05       		.byte	0x5
 10224 013f FC01     		.uleb128 0xfc
 10225 0141 61660000 		.4byte	.LASF627
 10226 0145 05       		.byte	0x5
 10227 0146 FD01     		.uleb128 0xfd
 10228 0148 E2450000 		.4byte	.LASF628
 10229 014c 05       		.byte	0x5
 10230 014d FE01     		.uleb128 0xfe
 10231 014f 6B510000 		.4byte	.LASF629
 10232 0153 05       		.byte	0x5
 10233 0154 FF01     		.uleb128 0xff
 10234 0156 B22B0000 		.4byte	.LASF630
 10235 015a 05       		.byte	0x5
 10236 015b 8002     		.uleb128 0x100
 10237 015d 659C0000 		.4byte	.LASF631
 10238 0161 05       		.byte	0x5
 10239 0162 8102     		.uleb128 0x101
 10240 0164 38080000 		.4byte	.LASF632
 10241 0168 05       		.byte	0x5
 10242 0169 8202     		.uleb128 0x102
 10243 016b F2930000 		.4byte	.LASF633
 10244 016f 05       		.byte	0x5
 10245 0170 8502     		.uleb128 0x105
 10246 0172 FA4A0000 		.4byte	.LASF634
 10247 0176 05       		.byte	0x5
 10248 0177 8A02     		.uleb128 0x10a
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 248


 10249 0179 301E0000 		.4byte	.LASF635
 10250 017d 05       		.byte	0x5
 10251 017e A002     		.uleb128 0x120
 10252 0180 49240000 		.4byte	.LASF636
 10253 0184 05       		.byte	0x5
 10254 0185 A702     		.uleb128 0x127
 10255 0187 36520000 		.4byte	.LASF637
 10256 018b 05       		.byte	0x5
 10257 018c AF02     		.uleb128 0x12f
 10258 018e 4C920000 		.4byte	.LASF638
 10259 0192 05       		.byte	0x5
 10260 0193 B502     		.uleb128 0x135
 10261 0195 71390000 		.4byte	.LASF639
 10262 0199 05       		.byte	0x5
 10263 019a D202     		.uleb128 0x152
 10264 019c F1390000 		.4byte	.LASF640
 10265 01a0 05       		.byte	0x5
 10266 01a1 E602     		.uleb128 0x166
 10267 01a3 BE7D0000 		.4byte	.LASF641
 10268 01a7 05       		.byte	0x5
 10269 01a8 EC02     		.uleb128 0x16c
 10270 01aa 0A5F0000 		.4byte	.LASF642
 10271 01ae 05       		.byte	0x5
 10272 01af ED02     		.uleb128 0x16d
 10273 01b1 B7360000 		.4byte	.LASF643
 10274 01b5 05       		.byte	0x5
 10275 01b6 F402     		.uleb128 0x174
 10276 01b8 671D0000 		.4byte	.LASF644
 10277 01bc 05       		.byte	0x5
 10278 01bd FA02     		.uleb128 0x17a
 10279 01bf BE250000 		.4byte	.LASF645
 10280 01c3 05       		.byte	0x5
 10281 01c4 8003     		.uleb128 0x180
 10282 01c6 53470000 		.4byte	.LASF646
 10283 01ca 05       		.byte	0x5
 10284 01cb 8103     		.uleb128 0x181
 10285 01cd 44400000 		.4byte	.LASF647
 10286 01d1 05       		.byte	0x5
 10287 01d2 8803     		.uleb128 0x188
 10288 01d4 B4820000 		.4byte	.LASF648
 10289 01d8 05       		.byte	0x5
 10290 01d9 8903     		.uleb128 0x189
 10291 01db B20C0000 		.4byte	.LASF649
 10292 01df 05       		.byte	0x5
 10293 01e0 9003     		.uleb128 0x190
 10294 01e2 E92F0000 		.4byte	.LASF650
 10295 01e6 05       		.byte	0x5
 10296 01e7 9603     		.uleb128 0x196
 10297 01e9 AC890000 		.4byte	.LASF651
 10298 01ed 05       		.byte	0x5
 10299 01ee A803     		.uleb128 0x1a8
 10300 01f0 66560000 		.4byte	.LASF652
 10301 01f4 05       		.byte	0x5
 10302 01f5 CB03     		.uleb128 0x1cb
 10303 01f7 421F0000 		.4byte	.LASF653
 10304 01fb 05       		.byte	0x5
 10305 01fc CC03     		.uleb128 0x1cc
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 249


 10306 01fe 72560000 		.4byte	.LASF654
 10307 0202 05       		.byte	0x5
 10308 0203 D303     		.uleb128 0x1d3
 10309 0205 ED640000 		.4byte	.LASF655
 10310 0209 05       		.byte	0x5
 10311 020a D403     		.uleb128 0x1d4
 10312 020c 8C2C0000 		.4byte	.LASF656
 10313 0210 05       		.byte	0x5
 10314 0211 D503     		.uleb128 0x1d5
 10315 0213 11280000 		.4byte	.LASF657
 10316 0217 05       		.byte	0x5
 10317 0218 DC03     		.uleb128 0x1dc
 10318 021a F43F0000 		.4byte	.LASF658
 10319 021e 05       		.byte	0x5
 10320 021f DD03     		.uleb128 0x1dd
 10321 0221 D2180000 		.4byte	.LASF659
 10322 0225 05       		.byte	0x5
 10323 0226 E703     		.uleb128 0x1e7
 10324 0228 14720000 		.4byte	.LASF660
 10325 022c 05       		.byte	0x5
 10326 022d FD03     		.uleb128 0x1fd
 10327 022f 3E820000 		.4byte	.LASF661
 10328 0233 05       		.byte	0x5
 10329 0234 FF03     		.uleb128 0x1ff
 10330 0236 288C0000 		.4byte	.LASF662
 10331 023a 05       		.byte	0x5
 10332 023b 8104     		.uleb128 0x201
 10333 023d FF950000 		.4byte	.LASF663
 10334 0241 05       		.byte	0x5
 10335 0242 8204     		.uleb128 0x202
 10336 0244 F5190000 		.4byte	.LASF664
 10337 0248 05       		.byte	0x5
 10338 0249 8404     		.uleb128 0x204
 10339 024b 9D4F0000 		.4byte	.LASF665
 10340 024f 05       		.byte	0x5
 10341 0250 9004     		.uleb128 0x210
 10342 0252 06850000 		.4byte	.LASF666
 10343 0256 05       		.byte	0x5
 10344 0257 9E04     		.uleb128 0x21e
 10345 0259 D9650000 		.4byte	.LASF667
 10346 025d 05       		.byte	0x5
 10347 025e A304     		.uleb128 0x223
 10348 0260 F5330000 		.4byte	.LASF668
 10349 0264 05       		.byte	0x5
 10350 0265 A804     		.uleb128 0x228
 10351 0267 67100000 		.4byte	.LASF669
 10352 026b 05       		.byte	0x5
 10353 026c AB04     		.uleb128 0x22b
 10354 026e 8B4B0000 		.4byte	.LASF670
 10355 0272 05       		.byte	0x5
 10356 0273 AF04     		.uleb128 0x22f
 10357 0275 3C8D0000 		.4byte	.LASF671
 10358 0279 05       		.byte	0x5
 10359 027a B104     		.uleb128 0x231
 10360 027c 2F230000 		.4byte	.LASF672
 10361 0280 05       		.byte	0x5
 10362 0281 D404     		.uleb128 0x254
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 250


 10363 0283 1F610000 		.4byte	.LASF673
 10364 0287 05       		.byte	0x5
 10365 0288 D804     		.uleb128 0x258
 10366 028a 5F7C0000 		.4byte	.LASF674
 10367 028e 05       		.byte	0x5
 10368 028f DC04     		.uleb128 0x25c
 10369 0291 6C050000 		.4byte	.LASF675
 10370 0295 05       		.byte	0x5
 10371 0296 E004     		.uleb128 0x260
 10372 0298 C31B0000 		.4byte	.LASF676
 10373 029c 05       		.byte	0x5
 10374 029d E404     		.uleb128 0x264
 10375 029f 9D640000 		.4byte	.LASF677
 10376 02a3 05       		.byte	0x5
 10377 02a4 E804     		.uleb128 0x268
 10378 02a6 37250000 		.4byte	.LASF678
 10379 02aa 05       		.byte	0x5
 10380 02ab EC04     		.uleb128 0x26c
 10381 02ad 74870000 		.4byte	.LASF679
 10382 02b1 05       		.byte	0x5
 10383 02b2 F004     		.uleb128 0x270
 10384 02b4 D79B0000 		.4byte	.LASF680
 10385 02b8 05       		.byte	0x5
 10386 02b9 8105     		.uleb128 0x281
 10387 02bb DC630000 		.4byte	.LASF681
 10388 02bf 05       		.byte	0x5
 10389 02c0 8205     		.uleb128 0x282
 10390 02c2 96970000 		.4byte	.LASF682
 10391 02c6 05       		.byte	0x5
 10392 02c7 9405     		.uleb128 0x294
 10393 02c9 FC820000 		.4byte	.LASF683
 10394 02cd 05       		.byte	0x5
 10395 02ce 9805     		.uleb128 0x298
 10396 02d0 2B7D0000 		.4byte	.LASF684
 10397 02d4 05       		.byte	0x5
 10398 02d5 9B05     		.uleb128 0x29b
 10399 02d7 65080000 		.4byte	.LASF685
 10400 02db 05       		.byte	0x5
 10401 02dc 9D05     		.uleb128 0x29d
 10402 02de 498B0000 		.4byte	.LASF686
 10403 02e2 05       		.byte	0x5
 10404 02e3 A105     		.uleb128 0x2a1
 10405 02e5 C2700000 		.4byte	.LASF687
 10406 02e9 05       		.byte	0x5
 10407 02ea A305     		.uleb128 0x2a3
 10408 02ec 2B3C0000 		.4byte	.LASF688
 10409 02f0 05       		.byte	0x5
 10410 02f1 A705     		.uleb128 0x2a7
 10411 02f3 5E5C0000 		.4byte	.LASF689
 10412 02f7 05       		.byte	0x5
 10413 02f8 AA05     		.uleb128 0x2aa
 10414 02fa 08480000 		.4byte	.LASF690
 10415 02fe 05       		.byte	0x5
 10416 02ff AC05     		.uleb128 0x2ac
 10417 0301 F39C0000 		.4byte	.LASF691
 10418 0305 05       		.byte	0x5
 10419 0306 B005     		.uleb128 0x2b0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 251


 10420 0308 F0760000 		.4byte	.LASF692
 10421 030c 05       		.byte	0x5
 10422 030d B205     		.uleb128 0x2b2
 10423 030f 1C300000 		.4byte	.LASF693
 10424 0313 05       		.byte	0x5
 10425 0314 B405     		.uleb128 0x2b4
 10426 0316 EC410000 		.4byte	.LASF694
 10427 031a 05       		.byte	0x5
 10428 031b B805     		.uleb128 0x2b8
 10429 031d DD720000 		.4byte	.LASF695
 10430 0321 05       		.byte	0x5
 10431 0322 BB05     		.uleb128 0x2bb
 10432 0324 987F0000 		.4byte	.LASF696
 10433 0328 05       		.byte	0x5
 10434 0329 BC05     		.uleb128 0x2bc
 10435 032b 637F0000 		.4byte	.LASF697
 10436 032f 00       		.byte	0
 10437              		.section	.debug_macro,"G",%progbits,wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d,comdat
 10438              	.Ldebug_macro17:
 10439 0000 0400     		.2byte	0x4
 10440 0002 00       		.byte	0
 10441 0003 05       		.byte	0x5
 10442 0004 08       		.uleb128 0x8
 10443 0005 59350000 		.4byte	.LASF699
 10444 0009 06       		.byte	0x6
 10445 000a 0D       		.uleb128 0xd
 10446 000b 3A590000 		.4byte	.LASF700
 10447 000f 05       		.byte	0x5
 10448 0010 10       		.uleb128 0x10
 10449 0011 63740000 		.4byte	.LASF701
 10450 0015 00       		.byte	0
 10451              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.56.f7bb76d8eb43fb7e79a949819dbf4bda,comdat
 10452              	.Ldebug_macro18:
 10453 0000 0400     		.2byte	0x4
 10454 0002 00       		.byte	0
 10455 0003 05       		.byte	0x5
 10456 0004 38       		.uleb128 0x38
 10457 0005 32360000 		.4byte	.LASF702
 10458 0009 05       		.byte	0x5
 10459 000a 3C       		.uleb128 0x3c
 10460 000b F0980000 		.4byte	.LASF703
 10461 000f 05       		.byte	0x5
 10462 0010 3D       		.uleb128 0x3d
 10463 0011 3D920000 		.4byte	.LASF704
 10464 0015 05       		.byte	0x5
 10465 0016 3F       		.uleb128 0x3f
 10466 0017 A0400000 		.4byte	.LASF705
 10467 001b 05       		.byte	0x5
 10468 001c 43       		.uleb128 0x43
 10469 001d 1D500000 		.4byte	.LASF706
 10470 0021 05       		.byte	0x5
 10471 0022 A301     		.uleb128 0xa3
 10472 0024 B18D0000 		.4byte	.LASF707
 10473 0028 00       		.byte	0
 10474              		.section	.debug_macro,"G",%progbits,wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd,comdat
 10475              	.Ldebug_macro19:
 10476 0000 0400     		.2byte	0x4
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 252


 10477 0002 00       		.byte	0
 10478 0003 05       		.byte	0x5
 10479 0004 08       		.uleb128 0x8
 10480 0005 127F0000 		.4byte	.LASF708
 10481 0009 05       		.byte	0x5
 10482 000a 0F       		.uleb128 0xf
 10483 000b E9290000 		.4byte	.LASF429
 10484 000f 05       		.byte	0x5
 10485 0010 10       		.uleb128 0x10
 10486 0011 E8430000 		.4byte	.LASF431
 10487 0015 00       		.byte	0
 10488              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.161.19e15733342b50ead2919490b095303e,comdat
 10489              	.Ldebug_macro20:
 10490 0000 0400     		.2byte	0x4
 10491 0002 00       		.byte	0
 10492 0003 06       		.byte	0x6
 10493 0004 A101     		.uleb128 0xa1
 10494 0006 64860000 		.4byte	.LASF483
 10495 000a 06       		.byte	0x6
 10496 000b EE01     		.uleb128 0xee
 10497 000d CA4C0000 		.4byte	.LASF449
 10498 0011 06       		.byte	0x6
 10499 0012 DB02     		.uleb128 0x15b
 10500 0014 A30C0000 		.4byte	.LASF466
 10501 0018 06       		.byte	0x6
 10502 0019 9103     		.uleb128 0x191
 10503 001b 2A110000 		.4byte	.LASF467
 10504 001f 05       		.byte	0x5
 10505 0020 9603     		.uleb128 0x196
 10506 0022 E0390000 		.4byte	.LASF468
 10507 0026 06       		.byte	0x6
 10508 0027 9C03     		.uleb128 0x19c
 10509 0029 803A0000 		.4byte	.LASF469
 10510 002d 05       		.byte	0x5
 10511 002e A103     		.uleb128 0x1a1
 10512 0030 86440000 		.4byte	.LASF484
 10513 0034 00       		.byte	0
 10514              		.section	.debug_macro,"G",%progbits,wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b,comdat
 10515              	.Ldebug_macro21:
 10516 0000 0400     		.2byte	0x4
 10517 0002 00       		.byte	0
 10518 0003 05       		.byte	0x5
 10519 0004 0A       		.uleb128 0xa
 10520 0005 B3900000 		.4byte	.LASF713
 10521 0009 05       		.byte	0x5
 10522 000a 10       		.uleb128 0x10
 10523 000b EE520000 		.4byte	.LASF714
 10524 000f 05       		.byte	0x5
 10525 0010 1A       		.uleb128 0x1a
 10526 0011 D86F0000 		.4byte	.LASF715
 10527 0015 05       		.byte	0x5
 10528 0016 21       		.uleb128 0x21
 10529 0017 D2310000 		.4byte	.LASF716
 10530 001b 06       		.byte	0x6
 10531 001c 38       		.uleb128 0x38
 10532 001d 669F0000 		.4byte	.LASF717
 10533 0021 06       		.byte	0x6
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 253


 10534 0022 39       		.uleb128 0x39
 10535 0023 B87E0000 		.4byte	.LASF513
 10536 0027 06       		.byte	0x6
 10537 0028 3A       		.uleb128 0x3a
 10538 0029 79620000 		.4byte	.LASF718
 10539 002d 06       		.byte	0x6
 10540 002e 3B       		.uleb128 0x3b
 10541 002f 3F640000 		.4byte	.LASF719
 10542 0033 02       		.byte	0x2
 10543 0034 3C       		.uleb128 0x3c
 10544 0035 696E7400 		.ascii	"int\000"
 10545 0039 06       		.byte	0x6
 10546 003a 3D       		.uleb128 0x3d
 10547 003b 4A9D0000 		.4byte	.LASF720
 10548 003f 06       		.byte	0x6
 10549 0040 3E       		.uleb128 0x3e
 10550 0041 8F6E0000 		.4byte	.LASF721
 10551 0045 05       		.byte	0x5
 10552 0046 3F       		.uleb128 0x3f
 10553 0047 438E0000 		.4byte	.LASF722
 10554 004b 05       		.byte	0x5
 10555 004c 40       		.uleb128 0x40
 10556 004d 77460000 		.4byte	.LASF723
 10557 0051 05       		.byte	0x5
 10558 0052 41       		.uleb128 0x41
 10559 0053 93180000 		.4byte	.LASF724
 10560 0057 05       		.byte	0x5
 10561 0058 42       		.uleb128 0x42
 10562 0059 26660000 		.4byte	.LASF725
 10563 005d 05       		.byte	0x5
 10564 005e 43       		.uleb128 0x43
 10565 005f 74000000 		.4byte	.LASF726
 10566 0063 05       		.byte	0x5
 10567 0064 44       		.uleb128 0x44
 10568 0065 72410000 		.4byte	.LASF727
 10569 0069 05       		.byte	0x5
 10570 006a 45       		.uleb128 0x45
 10571 006b AF980000 		.4byte	.LASF728
 10572 006f 05       		.byte	0x5
 10573 0070 4E       		.uleb128 0x4e
 10574 0071 663D0000 		.4byte	.LASF729
 10575 0075 05       		.byte	0x5
 10576 0076 55       		.uleb128 0x55
 10577 0077 20990000 		.4byte	.LASF730
 10578 007b 05       		.byte	0x5
 10579 007c 5D       		.uleb128 0x5d
 10580 007d 42090000 		.4byte	.LASF731
 10581 0081 05       		.byte	0x5
 10582 0082 68       		.uleb128 0x68
 10583 0083 CC570000 		.4byte	.LASF732
 10584 0087 05       		.byte	0x5
 10585 0088 73       		.uleb128 0x73
 10586 0089 888D0000 		.4byte	.LASF733
 10587 008d 05       		.byte	0x5
 10588 008e 7C       		.uleb128 0x7c
 10589 008f 2B980000 		.4byte	.LASF734
 10590 0093 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 254


 10591 0094 8301     		.uleb128 0x83
 10592 0096 67880000 		.4byte	.LASF735
 10593 009a 05       		.byte	0x5
 10594 009b 8C01     		.uleb128 0x8c
 10595 009d 211B0000 		.4byte	.LASF736
 10596 00a1 05       		.byte	0x5
 10597 00a2 9301     		.uleb128 0x93
 10598 00a4 55480000 		.4byte	.LASF737
 10599 00a8 05       		.byte	0x5
 10600 00a9 9E01     		.uleb128 0x9e
 10601 00ab 56460000 		.4byte	.LASF738
 10602 00af 05       		.byte	0x5
 10603 00b0 A201     		.uleb128 0xa2
 10604 00b2 8F550000 		.4byte	.LASF739
 10605 00b6 05       		.byte	0x5
 10606 00b7 AD01     		.uleb128 0xad
 10607 00b9 30820000 		.4byte	.LASF740
 10608 00bd 05       		.byte	0x5
 10609 00be B801     		.uleb128 0xb8
 10610 00c0 AC110000 		.4byte	.LASF741
 10611 00c4 05       		.byte	0x5
 10612 00c5 C101     		.uleb128 0xc1
 10613 00c7 87660000 		.4byte	.LASF742
 10614 00cb 06       		.byte	0x6
 10615 00cc C301     		.uleb128 0xc3
 10616 00ce 669F0000 		.4byte	.LASF717
 10617 00d2 06       		.byte	0x6
 10618 00d3 C401     		.uleb128 0xc4
 10619 00d5 B87E0000 		.4byte	.LASF513
 10620 00d9 06       		.byte	0x6
 10621 00da C501     		.uleb128 0xc5
 10622 00dc 79620000 		.4byte	.LASF718
 10623 00e0 06       		.byte	0x6
 10624 00e1 C601     		.uleb128 0xc6
 10625 00e3 3F640000 		.4byte	.LASF719
 10626 00e7 02       		.byte	0x2
 10627 00e8 C701     		.uleb128 0xc7
 10628 00ea 696E7400 		.ascii	"int\000"
 10629 00ee 06       		.byte	0x6
 10630 00ef C801     		.uleb128 0xc8
 10631 00f1 8F6E0000 		.4byte	.LASF721
 10632 00f5 06       		.byte	0x6
 10633 00f6 CD01     		.uleb128 0xcd
 10634 00f8 4A9D0000 		.4byte	.LASF720
 10635 00fc 00       		.byte	0
 10636              		.section	.debug_macro,"G",%progbits,wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9,comdat
 10637              	.Ldebug_macro22:
 10638 0000 0400     		.2byte	0x4
 10639 0002 00       		.byte	0
 10640 0003 05       		.byte	0x5
 10641 0004 0A       		.uleb128 0xa
 10642 0005 D8430000 		.4byte	.LASF743
 10643 0009 05       		.byte	0x5
 10644 000a 15       		.uleb128 0x15
 10645 000b C48C0000 		.4byte	.LASF744
 10646 000f 05       		.byte	0x5
 10647 0010 19       		.uleb128 0x19
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 255


 10648 0011 EC6F0000 		.4byte	.LASF745
 10649 0015 05       		.byte	0x5
 10650 0016 1B       		.uleb128 0x1b
 10651 0017 01720000 		.4byte	.LASF746
 10652 001b 05       		.byte	0x5
 10653 001c 21       		.uleb128 0x21
 10654 001d AA940000 		.4byte	.LASF747
 10655 0021 05       		.byte	0x5
 10656 0022 25       		.uleb128 0x25
 10657 0023 5D0F0000 		.4byte	.LASF748
 10658 0027 05       		.byte	0x5
 10659 0028 27       		.uleb128 0x27
 10660 0029 59490000 		.4byte	.LASF749
 10661 002d 05       		.byte	0x5
 10662 002e 2D       		.uleb128 0x2d
 10663 002f 36030000 		.4byte	.LASF750
 10664 0033 05       		.byte	0x5
 10665 0034 31       		.uleb128 0x31
 10666 0035 C9020000 		.4byte	.LASF751
 10667 0039 05       		.byte	0x5
 10668 003a 33       		.uleb128 0x33
 10669 003b EC400000 		.4byte	.LASF752
 10670 003f 05       		.byte	0x5
 10671 0040 39       		.uleb128 0x39
 10672 0041 26730000 		.4byte	.LASF753
 10673 0045 05       		.byte	0x5
 10674 0046 3D       		.uleb128 0x3d
 10675 0047 5C550000 		.4byte	.LASF754
 10676 004b 05       		.byte	0x5
 10677 004c 3F       		.uleb128 0x3f
 10678 004d 35870000 		.4byte	.LASF755
 10679 0051 05       		.byte	0x5
 10680 0052 44       		.uleb128 0x44
 10681 0053 F3130000 		.4byte	.LASF756
 10682 0057 05       		.byte	0x5
 10683 0058 49       		.uleb128 0x49
 10684 0059 30700000 		.4byte	.LASF757
 10685 005d 00       		.byte	0
 10686              		.section	.debug_macro,"G",%progbits,wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281,comdat
 10687              	.Ldebug_macro23:
 10688 0000 0400     		.2byte	0x4
 10689 0002 00       		.byte	0
 10690 0003 05       		.byte	0x5
 10691 0004 17       		.uleb128 0x17
 10692 0005 96980000 		.4byte	.LASF758
 10693 0009 05       		.byte	0x5
 10694 000a 1D       		.uleb128 0x1d
 10695 000b 7F9F0000 		.4byte	.LASF759
 10696 000f 05       		.byte	0x5
 10697 0010 23       		.uleb128 0x23
 10698 0011 9B3A0000 		.4byte	.LASF760
 10699 0015 05       		.byte	0x5
 10700 0016 29       		.uleb128 0x29
 10701 0017 A44A0000 		.4byte	.LASF761
 10702 001b 05       		.byte	0x5
 10703 001c 35       		.uleb128 0x35
 10704 001d 4E3D0000 		.4byte	.LASF762
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 256


 10705 0021 05       		.byte	0x5
 10706 0022 3F       		.uleb128 0x3f
 10707 0023 395D0000 		.4byte	.LASF763
 10708 0027 05       		.byte	0x5
 10709 0028 49       		.uleb128 0x49
 10710 0029 120E0000 		.4byte	.LASF764
 10711 002d 05       		.byte	0x5
 10712 002e 53       		.uleb128 0x53
 10713 002f 30240000 		.4byte	.LASF765
 10714 0033 05       		.byte	0x5
 10715 0034 9301     		.uleb128 0x93
 10716 0036 2F9E0000 		.4byte	.LASF766
 10717 003a 05       		.byte	0x5
 10718 003b 9401     		.uleb128 0x94
 10719 003d 14060000 		.4byte	.LASF767
 10720 0041 05       		.byte	0x5
 10721 0042 9501     		.uleb128 0x95
 10722 0044 73170000 		.4byte	.LASF768
 10723 0048 05       		.byte	0x5
 10724 0049 AB01     		.uleb128 0xab
 10725 004b 390F0000 		.4byte	.LASF769
 10726 004f 05       		.byte	0x5
 10727 0050 AC01     		.uleb128 0xac
 10728 0052 44550000 		.4byte	.LASF770
 10729 0056 05       		.byte	0x5
 10730 0057 AD01     		.uleb128 0xad
 10731 0059 38980000 		.4byte	.LASF771
 10732 005d 05       		.byte	0x5
 10733 005e B501     		.uleb128 0xb5
 10734 0060 99860000 		.4byte	.LASF772
 10735 0064 05       		.byte	0x5
 10736 0065 B601     		.uleb128 0xb6
 10737 0067 BE290000 		.4byte	.LASF773
 10738 006b 05       		.byte	0x5
 10739 006c B701     		.uleb128 0xb7
 10740 006e 4B760000 		.4byte	.LASF774
 10741 0072 05       		.byte	0x5
 10742 0073 C101     		.uleb128 0xc1
 10743 0075 25020000 		.4byte	.LASF775
 10744 0079 05       		.byte	0x5
 10745 007a C201     		.uleb128 0xc2
 10746 007c 830D0000 		.4byte	.LASF776
 10747 0080 05       		.byte	0x5
 10748 0081 C301     		.uleb128 0xc3
 10749 0083 94630000 		.4byte	.LASF777
 10750 0087 05       		.byte	0x5
 10751 0088 CB01     		.uleb128 0xcb
 10752 008a 40510000 		.4byte	.LASF778
 10753 008e 05       		.byte	0x5
 10754 008f CC01     		.uleb128 0xcc
 10755 0091 73090000 		.4byte	.LASF779
 10756 0095 05       		.byte	0x5
 10757 0096 CD01     		.uleb128 0xcd
 10758 0098 16310000 		.4byte	.LASF780
 10759 009c 05       		.byte	0x5
 10760 009d D701     		.uleb128 0xd7
 10761 009f 5F750000 		.4byte	.LASF781
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 257


 10762 00a3 05       		.byte	0x5
 10763 00a4 D801     		.uleb128 0xd8
 10764 00a6 2F2E0000 		.4byte	.LASF782
 10765 00aa 05       		.byte	0x5
 10766 00ab D901     		.uleb128 0xd9
 10767 00ad EC4D0000 		.4byte	.LASF783
 10768 00b1 05       		.byte	0x5
 10769 00b2 E701     		.uleb128 0xe7
 10770 00b4 5C7D0000 		.4byte	.LASF784
 10771 00b8 05       		.byte	0x5
 10772 00b9 E801     		.uleb128 0xe8
 10773 00bb 44280000 		.4byte	.LASF785
 10774 00bf 05       		.byte	0x5
 10775 00c0 E901     		.uleb128 0xe9
 10776 00c2 717A0000 		.4byte	.LASF786
 10777 00c6 05       		.byte	0x5
 10778 00c7 F901     		.uleb128 0xf9
 10779 00c9 DD820000 		.4byte	.LASF787
 10780 00cd 05       		.byte	0x5
 10781 00ce FA01     		.uleb128 0xfa
 10782 00d0 944D0000 		.4byte	.LASF788
 10783 00d4 05       		.byte	0x5
 10784 00d5 FB01     		.uleb128 0xfb
 10785 00d7 481B0000 		.4byte	.LASF789
 10786 00db 05       		.byte	0x5
 10787 00dc 8902     		.uleb128 0x109
 10788 00de 27120000 		.4byte	.LASF790
 10789 00e2 05       		.byte	0x5
 10790 00e3 8A02     		.uleb128 0x10a
 10791 00e5 B2190000 		.4byte	.LASF791
 10792 00e9 05       		.byte	0x5
 10793 00ea 8B02     		.uleb128 0x10b
 10794 00ec 976A0000 		.4byte	.LASF792
 10795 00f0 05       		.byte	0x5
 10796 00f1 9902     		.uleb128 0x119
 10797 00f3 3F560000 		.4byte	.LASF793
 10798 00f7 05       		.byte	0x5
 10799 00f8 9A02     		.uleb128 0x11a
 10800 00fa 7D230000 		.4byte	.LASF794
 10801 00fe 05       		.byte	0x5
 10802 00ff 9B02     		.uleb128 0x11b
 10803 0101 106B0000 		.4byte	.LASF795
 10804 0105 05       		.byte	0x5
 10805 0106 A902     		.uleb128 0x129
 10806 0108 AE070000 		.4byte	.LASF796
 10807 010c 05       		.byte	0x5
 10808 010d AA02     		.uleb128 0x12a
 10809 010f 5D570000 		.4byte	.LASF797
 10810 0113 05       		.byte	0x5
 10811 0114 AB02     		.uleb128 0x12b
 10812 0116 C32F0000 		.4byte	.LASF798
 10813 011a 05       		.byte	0x5
 10814 011b B902     		.uleb128 0x139
 10815 011d 54140000 		.4byte	.LASF799
 10816 0121 05       		.byte	0x5
 10817 0122 BA02     		.uleb128 0x13a
 10818 0124 529D0000 		.4byte	.LASF800
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 258


 10819 0128 05       		.byte	0x5
 10820 0129 BB02     		.uleb128 0x13b
 10821 012b 7E2A0000 		.4byte	.LASF801
 10822 012f 05       		.byte	0x5
 10823 0130 C902     		.uleb128 0x149
 10824 0132 59610000 		.4byte	.LASF802
 10825 0136 05       		.byte	0x5
 10826 0137 CA02     		.uleb128 0x14a
 10827 0139 EC900000 		.4byte	.LASF803
 10828 013d 05       		.byte	0x5
 10829 013e CB02     		.uleb128 0x14b
 10830 0140 96350000 		.4byte	.LASF804
 10831 0144 05       		.byte	0x5
 10832 0145 D902     		.uleb128 0x159
 10833 0147 132E0000 		.4byte	.LASF805
 10834 014b 05       		.byte	0x5
 10835 014c DA02     		.uleb128 0x15a
 10836 014e B01C0000 		.4byte	.LASF806
 10837 0152 05       		.byte	0x5
 10838 0153 E202     		.uleb128 0x162
 10839 0155 C2460000 		.4byte	.LASF807
 10840 0159 05       		.byte	0x5
 10841 015a EA02     		.uleb128 0x16a
 10842 015c 58710000 		.4byte	.LASF808
 10843 0160 05       		.byte	0x5
 10844 0161 F002     		.uleb128 0x170
 10845 0163 91370000 		.4byte	.LASF809
 10846 0167 05       		.byte	0x5
 10847 0168 F102     		.uleb128 0x171
 10848 016a 492A0000 		.4byte	.LASF810
 10849 016e 05       		.byte	0x5
 10850 016f F502     		.uleb128 0x175
 10851 0171 2D0B0000 		.4byte	.LASF811
 10852 0175 05       		.byte	0x5
 10853 0176 F902     		.uleb128 0x179
 10854 0178 6A9E0000 		.4byte	.LASF812
 10855 017c 05       		.byte	0x5
 10856 017d FE02     		.uleb128 0x17e
 10857 017f 27460000 		.4byte	.LASF813
 10858 0183 05       		.byte	0x5
 10859 0184 8903     		.uleb128 0x189
 10860 0186 1E750000 		.4byte	.LASF814
 10861 018a 05       		.byte	0x5
 10862 018b 9303     		.uleb128 0x193
 10863 018d A6840000 		.4byte	.LASF815
 10864 0191 05       		.byte	0x5
 10865 0192 9803     		.uleb128 0x198
 10866 0194 38000000 		.4byte	.LASF816
 10867 0198 05       		.byte	0x5
 10868 0199 9F03     		.uleb128 0x19f
 10869 019b 79410000 		.4byte	.LASF817
 10870 019f 05       		.byte	0x5
 10871 01a0 A003     		.uleb128 0x1a0
 10872 01a2 35860000 		.4byte	.LASF818
 10873 01a6 05       		.byte	0x5
 10874 01a7 AB03     		.uleb128 0x1ab
 10875 01a9 6D0E0000 		.4byte	.LASF819
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 259


 10876 01ad 05       		.byte	0x5
 10877 01ae AC03     		.uleb128 0x1ac
 10878 01b0 BD370000 		.4byte	.LASF820
 10879 01b4 05       		.byte	0x5
 10880 01b5 B703     		.uleb128 0x1b7
 10881 01b7 06790000 		.4byte	.LASF821
 10882 01bb 05       		.byte	0x5
 10883 01bc B803     		.uleb128 0x1b8
 10884 01be C6550000 		.4byte	.LASF822
 10885 01c2 05       		.byte	0x5
 10886 01c3 C403     		.uleb128 0x1c4
 10887 01c5 443B0000 		.4byte	.LASF823
 10888 01c9 05       		.byte	0x5
 10889 01ca C503     		.uleb128 0x1c5
 10890 01cc E5750000 		.4byte	.LASF824
 10891 01d0 05       		.byte	0x5
 10892 01d1 D403     		.uleb128 0x1d4
 10893 01d3 E7270000 		.4byte	.LASF825
 10894 01d7 05       		.byte	0x5
 10895 01d8 D503     		.uleb128 0x1d5
 10896 01da AF660000 		.4byte	.LASF826
 10897 01de 00       		.byte	0
 10898              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8,comda
 10899              	.Ldebug_macro24:
 10900 0000 0400     		.2byte	0x4
 10901 0002 00       		.byte	0
 10902 0003 05       		.byte	0x5
 10903 0004 44       		.uleb128 0x44
 10904 0005 83350000 		.4byte	.LASF828
 10905 0009 05       		.byte	0x5
 10906 000a 5C       		.uleb128 0x5c
 10907 000b D4380000 		.4byte	.LASF829
 10908 000f 05       		.byte	0x5
 10909 0010 5D       		.uleb128 0x5d
 10910 0011 2C090000 		.4byte	.LASF830
 10911 0015 05       		.byte	0x5
 10912 0016 5E       		.uleb128 0x5e
 10913 0017 A3290000 		.4byte	.LASF831
 10914 001b 05       		.byte	0x5
 10915 001c 5F       		.uleb128 0x5f
 10916 001d F13A0000 		.4byte	.LASF832
 10917 0021 05       		.byte	0x5
 10918 0022 60       		.uleb128 0x60
 10919 0023 50670000 		.4byte	.LASF833
 10920 0027 05       		.byte	0x5
 10921 0028 61       		.uleb128 0x61
 10922 0029 AC1D0000 		.4byte	.LASF834
 10923 002d 05       		.byte	0x5
 10924 002e 62       		.uleb128 0x62
 10925 002f 625A0000 		.4byte	.LASF835
 10926 0033 05       		.byte	0x5
 10927 0034 63       		.uleb128 0x63
 10928 0035 2D4B0000 		.4byte	.LASF836
 10929 0039 05       		.byte	0x5
 10930 003a 64       		.uleb128 0x64
 10931 003b FC1F0000 		.4byte	.LASF837
 10932 003f 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 260


 10933 0040 65       		.uleb128 0x65
 10934 0041 1F9C0000 		.4byte	.LASF838
 10935 0045 05       		.byte	0x5
 10936 0046 66       		.uleb128 0x66
 10937 0047 304E0000 		.4byte	.LASF839
 10938 004b 05       		.byte	0x5
 10939 004c 67       		.uleb128 0x67
 10940 004d 0B020000 		.4byte	.LASF840
 10941 0051 05       		.byte	0x5
 10942 0052 68       		.uleb128 0x68
 10943 0053 36650000 		.4byte	.LASF841
 10944 0057 05       		.byte	0x5
 10945 0058 69       		.uleb128 0x69
 10946 0059 6C4A0000 		.4byte	.LASF842
 10947 005d 05       		.byte	0x5
 10948 005e 6B       		.uleb128 0x6b
 10949 005f 345F0000 		.4byte	.LASF843
 10950 0063 05       		.byte	0x5
 10951 0064 6D       		.uleb128 0x6d
 10952 0065 62540000 		.4byte	.LASF844
 10953 0069 05       		.byte	0x5
 10954 006a 6E       		.uleb128 0x6e
 10955 006b 85030000 		.4byte	.LASF845
 10956 006f 05       		.byte	0x5
 10957 0070 6F       		.uleb128 0x6f
 10958 0071 073B0000 		.4byte	.LASF846
 10959 0075 05       		.byte	0x5
 10960 0076 70       		.uleb128 0x70
 10961 0077 C7470000 		.4byte	.LASF847
 10962 007b 05       		.byte	0x5
 10963 007c 71       		.uleb128 0x71
 10964 007d AE4D0000 		.4byte	.LASF848
 10965 0081 05       		.byte	0x5
 10966 0082 72       		.uleb128 0x72
 10967 0083 B4400000 		.4byte	.LASF849
 10968 0087 05       		.byte	0x5
 10969 0088 77       		.uleb128 0x77
 10970 0089 13620000 		.4byte	.LASF850
 10971 008d 05       		.byte	0x5
 10972 008e 78       		.uleb128 0x78
 10973 008f 75370000 		.4byte	.LASF851
 10974 0093 05       		.byte	0x5
 10975 0094 79       		.uleb128 0x79
 10976 0095 9D9C0000 		.4byte	.LASF852
 10977 0099 05       		.byte	0x5
 10978 009a 7A       		.uleb128 0x7a
 10979 009b 477B0000 		.4byte	.LASF853
 10980 009f 05       		.byte	0x5
 10981 00a0 7B       		.uleb128 0x7b
 10982 00a1 EB440000 		.4byte	.LASF854
 10983 00a5 05       		.byte	0x5
 10984 00a6 7C       		.uleb128 0x7c
 10985 00a7 54310000 		.4byte	.LASF855
 10986 00ab 05       		.byte	0x5
 10987 00ac 7D       		.uleb128 0x7d
 10988 00ad 3D620000 		.4byte	.LASF856
 10989 00b1 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 261


 10990 00b2 7E       		.uleb128 0x7e
 10991 00b3 894E0000 		.4byte	.LASF857
 10992 00b7 05       		.byte	0x5
 10993 00b8 8101     		.uleb128 0x81
 10994 00ba FE0E0000 		.4byte	.LASF858
 10995 00be 05       		.byte	0x5
 10996 00bf 8201     		.uleb128 0x82
 10997 00c1 49410000 		.4byte	.LASF859
 10998 00c5 05       		.byte	0x5
 10999 00c6 8301     		.uleb128 0x83
 11000 00c8 99090000 		.4byte	.LASF860
 11001 00cc 05       		.byte	0x5
 11002 00cd 8401     		.uleb128 0x84
 11003 00cf 54100000 		.4byte	.LASF861
 11004 00d3 05       		.byte	0x5
 11005 00d4 8701     		.uleb128 0x87
 11006 00d6 6C3A0000 		.4byte	.LASF862
 11007 00da 05       		.byte	0x5
 11008 00db 8801     		.uleb128 0x88
 11009 00dd D3050000 		.4byte	.LASF863
 11010 00e1 05       		.byte	0x5
 11011 00e2 8901     		.uleb128 0x89
 11012 00e4 C39B0000 		.4byte	.LASF864
 11013 00e8 05       		.byte	0x5
 11014 00e9 8A01     		.uleb128 0x8a
 11015 00eb A96D0000 		.4byte	.LASF865
 11016 00ef 05       		.byte	0x5
 11017 00f0 9001     		.uleb128 0x90
 11018 00f2 AF4E0000 		.4byte	.LASF866
 11019 00f6 05       		.byte	0x5
 11020 00f7 9401     		.uleb128 0x94
 11021 00f9 529A0000 		.4byte	.LASF867
 11022 00fd 05       		.byte	0x5
 11023 00fe 9601     		.uleb128 0x96
 11024 0100 354F0000 		.4byte	.LASF868
 11025 0104 05       		.byte	0x5
 11026 0105 9C01     		.uleb128 0x9c
 11027 0107 A73B0000 		.4byte	.LASF869
 11028 010b 00       		.byte	0
 11029              		.section	.debug_macro,"G",%progbits,wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066,comdat
 11030              	.Ldebug_macro25:
 11031 0000 0400     		.2byte	0x4
 11032 0002 00       		.byte	0
 11033 0003 05       		.byte	0x5
 11034 0004 43       		.uleb128 0x43
 11035 0005 47390000 		.4byte	.LASF870
 11036 0009 05       		.byte	0x5
 11037 000a 4C       		.uleb128 0x4c
 11038 000b 07440000 		.4byte	.LASF871
 11039 000f 05       		.byte	0x5
 11040 0010 4E       		.uleb128 0x4e
 11041 0011 5B370000 		.4byte	.LASF872
 11042 0015 05       		.byte	0x5
 11043 0016 4F       		.uleb128 0x4f
 11044 0017 82610000 		.4byte	.LASF873
 11045 001b 05       		.byte	0x5
 11046 001c 51       		.uleb128 0x51
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 262


 11047 001d D7370000 		.4byte	.LASF874
 11048 0021 05       		.byte	0x5
 11049 0022 52       		.uleb128 0x52
 11050 0023 74990000 		.4byte	.LASF875
 11051 0027 05       		.byte	0x5
 11052 0028 53       		.uleb128 0x53
 11053 0029 C4620000 		.4byte	.LASF876
 11054 002d 05       		.byte	0x5
 11055 002e 54       		.uleb128 0x54
 11056 002f 456D0000 		.4byte	.LASF877
 11057 0033 05       		.byte	0x5
 11058 0034 57       		.uleb128 0x57
 11059 0035 8A360000 		.4byte	.LASF878
 11060 0039 05       		.byte	0x5
 11061 003a 58       		.uleb128 0x58
 11062 003b 3D990000 		.4byte	.LASF879
 11063 003f 05       		.byte	0x5
 11064 0040 59       		.uleb128 0x59
 11065 0041 AD1B0000 		.4byte	.LASF880
 11066 0045 00       		.byte	0
 11067              		.section	.debug_macro,"G",%progbits,wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946,comdat
 11068              	.Ldebug_macro26:
 11069 0000 0400     		.2byte	0x4
 11070 0002 00       		.byte	0
 11071 0003 05       		.byte	0x5
 11072 0004 44       		.uleb128 0x44
 11073 0005 DF900000 		.4byte	.LASF882
 11074 0009 05       		.byte	0x5
 11075 000a 55       		.uleb128 0x55
 11076 000b 0C150000 		.4byte	.LASF883
 11077 000f 05       		.byte	0x5
 11078 0010 56       		.uleb128 0x56
 11079 0011 C17E0000 		.4byte	.LASF884
 11080 0015 05       		.byte	0x5
 11081 0016 57       		.uleb128 0x57
 11082 0017 80240000 		.4byte	.LASF885
 11083 001b 05       		.byte	0x5
 11084 001c 58       		.uleb128 0x58
 11085 001d 702A0000 		.4byte	.LASF886
 11086 0021 05       		.byte	0x5
 11087 0022 59       		.uleb128 0x59
 11088 0023 BE1E0000 		.4byte	.LASF887
 11089 0027 05       		.byte	0x5
 11090 0028 5A       		.uleb128 0x5a
 11091 0029 45380000 		.4byte	.LASF888
 11092 002d 05       		.byte	0x5
 11093 002e 5B       		.uleb128 0x5b
 11094 002f 856F0000 		.4byte	.LASF889
 11095 0033 05       		.byte	0x5
 11096 0034 6A       		.uleb128 0x6a
 11097 0035 CE6D0000 		.4byte	.LASF890
 11098 0039 05       		.byte	0x5
 11099 003a 6F       		.uleb128 0x6f
 11100 003b 7C530000 		.4byte	.LASF891
 11101 003f 05       		.byte	0x5
 11102 0040 70       		.uleb128 0x70
 11103 0041 E28D0000 		.4byte	.LASF892
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 263


 11104 0045 05       		.byte	0x5
 11105 0046 71       		.uleb128 0x71
 11106 0047 9E900000 		.4byte	.LASF893
 11107 004b 05       		.byte	0x5
 11108 004c 77       		.uleb128 0x77
 11109 004d CD500000 		.4byte	.LASF894
 11110 0051 05       		.byte	0x5
 11111 0052 78       		.uleb128 0x78
 11112 0053 083A0000 		.4byte	.LASF895
 11113 0057 05       		.byte	0x5
 11114 0058 79       		.uleb128 0x79
 11115 0059 96660000 		.4byte	.LASF896
 11116 005d 05       		.byte	0x5
 11117 005e 7A       		.uleb128 0x7a
 11118 005f 78590000 		.4byte	.LASF897
 11119 0063 05       		.byte	0x5
 11120 0064 7B       		.uleb128 0x7b
 11121 0065 C1930000 		.4byte	.LASF898
 11122 0069 05       		.byte	0x5
 11123 006a 8301     		.uleb128 0x83
 11124 006c 475E0000 		.4byte	.LASF899
 11125 0070 05       		.byte	0x5
 11126 0071 8401     		.uleb128 0x84
 11127 0073 E1850000 		.4byte	.LASF900
 11128 0077 05       		.byte	0x5
 11129 0078 8501     		.uleb128 0x85
 11130 007a 43890000 		.4byte	.LASF901
 11131 007e 05       		.byte	0x5
 11132 007f 8601     		.uleb128 0x86
 11133 0081 403F0000 		.4byte	.LASF902
 11134 0085 05       		.byte	0x5
 11135 0086 8701     		.uleb128 0x87
 11136 0088 ED3C0000 		.4byte	.LASF903
 11137 008c 05       		.byte	0x5
 11138 008d 8801     		.uleb128 0x88
 11139 008f 94530000 		.4byte	.LASF904
 11140 0093 05       		.byte	0x5
 11141 0094 8E01     		.uleb128 0x8e
 11142 0096 CE730000 		.4byte	.LASF905
 11143 009a 05       		.byte	0x5
 11144 009b 8F01     		.uleb128 0x8f
 11145 009d 83310000 		.4byte	.LASF906
 11146 00a1 05       		.byte	0x5
 11147 00a2 9501     		.uleb128 0x95
 11148 00a4 5A5F0000 		.4byte	.LASF907
 11149 00a8 05       		.byte	0x5
 11150 00a9 9B01     		.uleb128 0x9b
 11151 00ab 947D0000 		.4byte	.LASF908
 11152 00af 05       		.byte	0x5
 11153 00b0 AF01     		.uleb128 0xaf
 11154 00b2 05780000 		.4byte	.LASF909
 11155 00b6 05       		.byte	0x5
 11156 00b7 B001     		.uleb128 0xb0
 11157 00b9 9C540000 		.4byte	.LASF910
 11158 00bd 05       		.byte	0x5
 11159 00be B401     		.uleb128 0xb4
 11160 00c0 A67A0000 		.4byte	.LASF911
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 264


 11161 00c4 05       		.byte	0x5
 11162 00c5 BC01     		.uleb128 0xbc
 11163 00c7 FD9A0000 		.4byte	.LASF912
 11164 00cb 05       		.byte	0x5
 11165 00cc C001     		.uleb128 0xc0
 11166 00ce 6A8E0000 		.4byte	.LASF913
 11167 00d2 00       		.byte	0
 11168              		.section	.debug_macro,"G",%progbits,wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5,comdat
 11169              	.Ldebug_macro27:
 11170 0000 0400     		.2byte	0x4
 11171 0002 00       		.byte	0
 11172 0003 05       		.byte	0x5
 11173 0004 C502     		.uleb128 0x145
 11174 0006 BB080000 		.4byte	.LASF914
 11175 000a 05       		.byte	0x5
 11176 000b D902     		.uleb128 0x159
 11177 000d 3D290000 		.4byte	.LASF915
 11178 0011 00       		.byte	0
 11179              		.section	.debug_macro,"G",%progbits,wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168,comdat
 11180              	.Ldebug_macro28:
 11181 0000 0400     		.2byte	0x4
 11182 0002 00       		.byte	0
 11183 0003 05       		.byte	0x5
 11184 0004 43       		.uleb128 0x43
 11185 0005 15710000 		.4byte	.LASF916
 11186 0009 05       		.byte	0x5
 11187 000a 9101     		.uleb128 0x91
 11188 000c DC0B0000 		.4byte	.LASF917
 11189 0010 05       		.byte	0x5
 11190 0011 9201     		.uleb128 0x92
 11191 0013 E51A0000 		.4byte	.LASF918
 11192 0017 05       		.byte	0x5
 11193 0018 9301     		.uleb128 0x93
 11194 001a F7070000 		.4byte	.LASF919
 11195 001e 00       		.byte	0
 11196              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e,comdat
 11197              	.Ldebug_macro29:
 11198 0000 0400     		.2byte	0x4
 11199 0002 00       		.byte	0
 11200 0003 05       		.byte	0x5
 11201 0004 AB01     		.uleb128 0xab
 11202 0006 9D650000 		.4byte	.LASF920
 11203 000a 05       		.byte	0x5
 11204 000b AF01     		.uleb128 0xaf
 11205 000d 19910000 		.4byte	.LASF921
 11206 0011 05       		.byte	0x5
 11207 0012 B301     		.uleb128 0xb3
 11208 0014 21630000 		.4byte	.LASF922
 11209 0018 05       		.byte	0x5
 11210 0019 B701     		.uleb128 0xb7
 11211 001b 92320000 		.4byte	.LASF923
 11212 001f 05       		.byte	0x5
 11213 0020 BB01     		.uleb128 0xbb
 11214 0022 DA280000 		.4byte	.LASF924
 11215 0026 05       		.byte	0x5
 11216 0027 BF01     		.uleb128 0xbf
 11217 0029 D2880000 		.4byte	.LASF925
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 265


 11218 002d 05       		.byte	0x5
 11219 002e C701     		.uleb128 0xc7
 11220 0030 832B0000 		.4byte	.LASF926
 11221 0034 05       		.byte	0x5
 11222 0035 D301     		.uleb128 0xd3
 11223 0037 C5150000 		.4byte	.LASF927
 11224 003b 05       		.byte	0x5
 11225 003c DF01     		.uleb128 0xdf
 11226 003e D59C0000 		.4byte	.LASF928
 11227 0042 05       		.byte	0x5
 11228 0043 EF01     		.uleb128 0xef
 11229 0045 38750000 		.4byte	.LASF929
 11230 0049 05       		.byte	0x5
 11231 004a F301     		.uleb128 0xf3
 11232 004c 999F0000 		.4byte	.LASF930
 11233 0050 05       		.byte	0x5
 11234 0051 F701     		.uleb128 0xf7
 11235 0053 4E7E0000 		.4byte	.LASF931
 11236 0057 05       		.byte	0x5
 11237 0058 FE01     		.uleb128 0xfe
 11238 005a 42610000 		.4byte	.LASF932
 11239 005e 05       		.byte	0x5
 11240 005f 9302     		.uleb128 0x113
 11241 0061 33100000 		.4byte	.LASF933
 11242 0065 05       		.byte	0x5
 11243 0066 9702     		.uleb128 0x117
 11244 0068 FB600000 		.4byte	.LASF934
 11245 006c 05       		.byte	0x5
 11246 006d A402     		.uleb128 0x124
 11247 006f 181C0000 		.4byte	.LASF935
 11248 0073 05       		.byte	0x5
 11249 0074 A802     		.uleb128 0x128
 11250 0076 E1230000 		.4byte	.LASF936
 11251 007a 05       		.byte	0x5
 11252 007b AC02     		.uleb128 0x12c
 11253 007d ED0C0000 		.4byte	.LASF937
 11254 0081 05       		.byte	0x5
 11255 0082 B902     		.uleb128 0x139
 11256 0084 A5880000 		.4byte	.LASF938
 11257 0088 05       		.byte	0x5
 11258 0089 C002     		.uleb128 0x140
 11259 008b DF080000 		.4byte	.LASF939
 11260 008f 05       		.byte	0x5
 11261 0090 C602     		.uleb128 0x146
 11262 0092 787C0000 		.4byte	.LASF940
 11263 0096 05       		.byte	0x5
 11264 0097 CC02     		.uleb128 0x14c
 11265 0099 D7070000 		.4byte	.LASF941
 11266 009d 05       		.byte	0x5
 11267 009e D202     		.uleb128 0x152
 11268 00a0 7F940000 		.4byte	.LASF942
 11269 00a4 05       		.byte	0x5
 11270 00a5 D702     		.uleb128 0x157
 11271 00a7 B7380000 		.4byte	.LASF943
 11272 00ab 05       		.byte	0x5
 11273 00ac DC02     		.uleb128 0x15c
 11274 00ae 1F040000 		.4byte	.LASF944
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 266


 11275 00b2 05       		.byte	0x5
 11276 00b3 E202     		.uleb128 0x162
 11277 00b5 5D2E0000 		.4byte	.LASF945
 11278 00b9 05       		.byte	0x5
 11279 00ba EB02     		.uleb128 0x16b
 11280 00bc F10B0000 		.4byte	.LASF946
 11281 00c0 05       		.byte	0x5
 11282 00c1 F302     		.uleb128 0x173
 11283 00c3 F1240000 		.4byte	.LASF947
 11284 00c7 05       		.byte	0x5
 11285 00c8 FB02     		.uleb128 0x17b
 11286 00ca 32600000 		.4byte	.LASF948
 11287 00ce 05       		.byte	0x5
 11288 00cf 8303     		.uleb128 0x183
 11289 00d1 D43D0000 		.4byte	.LASF949
 11290 00d5 05       		.byte	0x5
 11291 00d6 8D03     		.uleb128 0x18d
 11292 00d8 E39F0000 		.4byte	.LASF950
 11293 00dc 05       		.byte	0x5
 11294 00dd 9103     		.uleb128 0x191
 11295 00df 16870000 		.4byte	.LASF951
 11296 00e3 05       		.byte	0x5
 11297 00e4 9503     		.uleb128 0x195
 11298 00e6 652C0000 		.4byte	.LASF952
 11299 00ea 05       		.byte	0x5
 11300 00eb 9903     		.uleb128 0x199
 11301 00ed D7160000 		.4byte	.LASF953
 11302 00f1 05       		.byte	0x5
 11303 00f2 9D03     		.uleb128 0x19d
 11304 00f4 4B880000 		.4byte	.LASF954
 11305 00f8 05       		.byte	0x5
 11306 00f9 A103     		.uleb128 0x1a1
 11307 00fb AA210000 		.4byte	.LASF955
 11308 00ff 05       		.byte	0x5
 11309 0100 A503     		.uleb128 0x1a5
 11310 0102 0E5D0000 		.4byte	.LASF956
 11311 0106 05       		.byte	0x5
 11312 0107 A903     		.uleb128 0x1a9
 11313 0109 F91E0000 		.4byte	.LASF957
 11314 010d 05       		.byte	0x5
 11315 010e AD03     		.uleb128 0x1ad
 11316 0110 F61A0000 		.4byte	.LASF958
 11317 0114 05       		.byte	0x5
 11318 0115 B103     		.uleb128 0x1b1
 11319 0117 1B200000 		.4byte	.LASF959
 11320 011b 05       		.byte	0x5
 11321 011c B503     		.uleb128 0x1b5
 11322 011e FE3E0000 		.4byte	.LASF960
 11323 0122 05       		.byte	0x5
 11324 0123 B903     		.uleb128 0x1b9
 11325 0125 DC0A0000 		.4byte	.LASF961
 11326 0129 05       		.byte	0x5
 11327 012a BD03     		.uleb128 0x1bd
 11328 012c E28B0000 		.4byte	.LASF962
 11329 0130 05       		.byte	0x5
 11330 0131 C103     		.uleb128 0x1c1
 11331 0133 AD750000 		.4byte	.LASF963
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 267


 11332 0137 05       		.byte	0x5
 11333 0138 C503     		.uleb128 0x1c5
 11334 013a 59130000 		.4byte	.LASF964
 11335 013e 05       		.byte	0x5
 11336 013f C903     		.uleb128 0x1c9
 11337 0141 F3860000 		.4byte	.LASF965
 11338 0145 05       		.byte	0x5
 11339 0146 CD03     		.uleb128 0x1cd
 11340 0148 B7980000 		.4byte	.LASF966
 11341 014c 05       		.byte	0x5
 11342 014d D103     		.uleb128 0x1d1
 11343 014f B47B0000 		.4byte	.LASF967
 11344 0153 05       		.byte	0x5
 11345 0154 D503     		.uleb128 0x1d5
 11346 0156 BA9D0000 		.4byte	.LASF968
 11347 015a 05       		.byte	0x5
 11348 015b D903     		.uleb128 0x1d9
 11349 015d E85F0000 		.4byte	.LASF969
 11350 0161 05       		.byte	0x5
 11351 0162 DD03     		.uleb128 0x1dd
 11352 0164 90510000 		.4byte	.LASF970
 11353 0168 05       		.byte	0x5
 11354 0169 E103     		.uleb128 0x1e1
 11355 016b 3C9F0000 		.4byte	.LASF971
 11356 016f 05       		.byte	0x5
 11357 0170 E503     		.uleb128 0x1e5
 11358 0172 733F0000 		.4byte	.LASF972
 11359 0176 05       		.byte	0x5
 11360 0177 E903     		.uleb128 0x1e9
 11361 0179 EE5E0000 		.4byte	.LASF973
 11362 017d 05       		.byte	0x5
 11363 017e ED03     		.uleb128 0x1ed
 11364 0180 D8360000 		.4byte	.LASF974
 11365 0184 05       		.byte	0x5
 11366 0185 F103     		.uleb128 0x1f1
 11367 0187 595D0000 		.4byte	.LASF975
 11368 018b 05       		.byte	0x5
 11369 018c F503     		.uleb128 0x1f5
 11370 018e FA3D0000 		.4byte	.LASF976
 11371 0192 05       		.byte	0x5
 11372 0193 F903     		.uleb128 0x1f9
 11373 0195 7E680000 		.4byte	.LASF977
 11374 0199 05       		.byte	0x5
 11375 019a FD03     		.uleb128 0x1fd
 11376 019c E47E0000 		.4byte	.LASF978
 11377 01a0 05       		.byte	0x5
 11378 01a1 8104     		.uleb128 0x201
 11379 01a3 521C0000 		.4byte	.LASF979
 11380 01a7 05       		.byte	0x5
 11381 01a8 8504     		.uleb128 0x205
 11382 01aa D0320000 		.4byte	.LASF980
 11383 01ae 05       		.byte	0x5
 11384 01af 8904     		.uleb128 0x209
 11385 01b1 64600000 		.4byte	.LASF981
 11386 01b5 05       		.byte	0x5
 11387 01b6 8D04     		.uleb128 0x20d
 11388 01b8 3D0D0000 		.4byte	.LASF982
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 268


 11389 01bc 05       		.byte	0x5
 11390 01bd 9104     		.uleb128 0x211
 11391 01bf 641A0000 		.4byte	.LASF983
 11392 01c3 05       		.byte	0x5
 11393 01c4 9504     		.uleb128 0x215
 11394 01c6 91680000 		.4byte	.LASF984
 11395 01ca 05       		.byte	0x5
 11396 01cb 9904     		.uleb128 0x219
 11397 01cd 12350000 		.4byte	.LASF985
 11398 01d1 05       		.byte	0x5
 11399 01d2 9D04     		.uleb128 0x21d
 11400 01d4 470E0000 		.4byte	.LASF986
 11401 01d8 05       		.byte	0x5
 11402 01d9 A104     		.uleb128 0x221
 11403 01db 066D0000 		.4byte	.LASF987
 11404 01df 05       		.byte	0x5
 11405 01e0 A504     		.uleb128 0x225
 11406 01e2 D8150000 		.4byte	.LASF988
 11407 01e6 05       		.byte	0x5
 11408 01e7 A904     		.uleb128 0x229
 11409 01e9 CC2A0000 		.4byte	.LASF989
 11410 01ed 05       		.byte	0x5
 11411 01ee AD04     		.uleb128 0x22d
 11412 01f0 AD850000 		.4byte	.LASF990
 11413 01f4 05       		.byte	0x5
 11414 01f5 B104     		.uleb128 0x231
 11415 01f7 9C1E0000 		.4byte	.LASF991
 11416 01fb 05       		.byte	0x5
 11417 01fc B504     		.uleb128 0x235
 11418 01fe 966C0000 		.4byte	.LASF992
 11419 0202 05       		.byte	0x5
 11420 0203 B904     		.uleb128 0x239
 11421 0205 66950000 		.4byte	.LASF993
 11422 0209 05       		.byte	0x5
 11423 020a BD04     		.uleb128 0x23d
 11424 020c 4B0B0000 		.4byte	.LASF994
 11425 0210 05       		.byte	0x5
 11426 0211 C104     		.uleb128 0x241
 11427 0213 E28E0000 		.4byte	.LASF995
 11428 0217 05       		.byte	0x5
 11429 0218 C504     		.uleb128 0x245
 11430 021a 69430000 		.4byte	.LASF996
 11431 021e 05       		.byte	0x5
 11432 021f C904     		.uleb128 0x249
 11433 0221 5F040000 		.4byte	.LASF997
 11434 0225 05       		.byte	0x5
 11435 0226 CD04     		.uleb128 0x24d
 11436 0228 05390000 		.4byte	.LASF998
 11437 022c 05       		.byte	0x5
 11438 022d D104     		.uleb128 0x251
 11439 022f A1690000 		.4byte	.LASF999
 11440 0233 05       		.byte	0x5
 11441 0234 D504     		.uleb128 0x255
 11442 0236 E6740000 		.4byte	.LASF1000
 11443 023a 05       		.byte	0x5
 11444 023b D904     		.uleb128 0x259
 11445 023d B5990000 		.4byte	.LASF1001
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 269


 11446 0241 05       		.byte	0x5
 11447 0242 DD04     		.uleb128 0x25d
 11448 0244 63700000 		.4byte	.LASF1002
 11449 0248 05       		.byte	0x5
 11450 0249 E104     		.uleb128 0x261
 11451 024b F2320000 		.4byte	.LASF1003
 11452 024f 05       		.byte	0x5
 11453 0250 F704     		.uleb128 0x277
 11454 0252 FC650000 		.4byte	.LASF1004
 11455 0256 05       		.byte	0x5
 11456 0257 FB04     		.uleb128 0x27b
 11457 0259 847C0000 		.4byte	.LASF1005
 11458 025d 05       		.byte	0x5
 11459 025e FF04     		.uleb128 0x27f
 11460 0260 81570000 		.4byte	.LASF1006
 11461 0264 05       		.byte	0x5
 11462 0265 8305     		.uleb128 0x283
 11463 0267 E20F0000 		.4byte	.LASF1007
 11464 026b 05       		.byte	0x5
 11465 026c 8705     		.uleb128 0x287
 11466 026e 68450000 		.4byte	.LASF1008
 11467 0272 05       		.byte	0x5
 11468 0273 8B05     		.uleb128 0x28b
 11469 0275 5B6C0000 		.4byte	.LASF1009
 11470 0279 05       		.byte	0x5
 11471 027a 9305     		.uleb128 0x293
 11472 027c 0B640000 		.4byte	.LASF1010
 11473 0280 05       		.byte	0x5
 11474 0281 9B05     		.uleb128 0x29b
 11475 0283 F3550000 		.4byte	.LASF1011
 11476 0287 05       		.byte	0x5
 11477 0288 9F05     		.uleb128 0x29f
 11478 028a 7D1E0000 		.4byte	.LASF1012
 11479 028e 05       		.byte	0x5
 11480 028f A305     		.uleb128 0x2a3
 11481 0291 D6260000 		.4byte	.LASF1013
 11482 0295 05       		.byte	0x5
 11483 0296 A705     		.uleb128 0x2a7
 11484 0298 AF1A0000 		.4byte	.LASF1014
 11485 029c 05       		.byte	0x5
 11486 029d AB05     		.uleb128 0x2ab
 11487 029f 77770000 		.4byte	.LASF1015
 11488 02a3 05       		.byte	0x5
 11489 02a4 AF05     		.uleb128 0x2af
 11490 02a6 7D730000 		.4byte	.LASF1016
 11491 02aa 05       		.byte	0x5
 11492 02ab B305     		.uleb128 0x2b3
 11493 02ad DB960000 		.4byte	.LASF1017
 11494 02b1 05       		.byte	0x5
 11495 02b2 B705     		.uleb128 0x2b7
 11496 02b4 17380000 		.4byte	.LASF1018
 11497 02b8 05       		.byte	0x5
 11498 02b9 BB05     		.uleb128 0x2bb
 11499 02bb 711F0000 		.4byte	.LASF1019
 11500 02bf 05       		.byte	0x5
 11501 02c0 C705     		.uleb128 0x2c7
 11502 02c2 ED110000 		.4byte	.LASF1020
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 270


 11503 02c6 05       		.byte	0x5
 11504 02c7 CB05     		.uleb128 0x2cb
 11505 02c9 91340000 		.4byte	.LASF1021
 11506 02cd 05       		.byte	0x5
 11507 02ce D505     		.uleb128 0x2d5
 11508 02d0 49030000 		.4byte	.LASF1022
 11509 02d4 05       		.byte	0x5
 11510 02d5 D905     		.uleb128 0x2d9
 11511 02d7 34180000 		.4byte	.LASF1023
 11512 02db 05       		.byte	0x5
 11513 02dc DA05     		.uleb128 0x2da
 11514 02de 2F550000 		.4byte	.LASF1024
 11515 02e2 05       		.byte	0x5
 11516 02e3 DB05     		.uleb128 0x2db
 11517 02e5 E5620000 		.4byte	.LASF1025
 11518 02e9 05       		.byte	0x5
 11519 02ea DC05     		.uleb128 0x2dc
 11520 02ec BE4A0000 		.4byte	.LASF1026
 11521 02f0 05       		.byte	0x5
 11522 02f1 DD05     		.uleb128 0x2dd
 11523 02f3 DC530000 		.4byte	.LASF1027
 11524 02f7 05       		.byte	0x5
 11525 02f8 DE05     		.uleb128 0x2de
 11526 02fa CB4D0000 		.4byte	.LASF1028
 11527 02fe 05       		.byte	0x5
 11528 02ff DF05     		.uleb128 0x2df
 11529 0301 3A680000 		.4byte	.LASF1029
 11530 0305 05       		.byte	0x5
 11531 0306 E005     		.uleb128 0x2e0
 11532 0308 67680000 		.4byte	.LASF1030
 11533 030c 05       		.byte	0x5
 11534 030d E105     		.uleb128 0x2e1
 11535 030f 70270000 		.4byte	.LASF1031
 11536 0313 05       		.byte	0x5
 11537 0314 E205     		.uleb128 0x2e2
 11538 0316 D59A0000 		.4byte	.LASF1032
 11539 031a 05       		.byte	0x5
 11540 031b E305     		.uleb128 0x2e3
 11541 031d 817E0000 		.4byte	.LASF1033
 11542 0321 05       		.byte	0x5
 11543 0322 E405     		.uleb128 0x2e4
 11544 0324 567A0000 		.4byte	.LASF1034
 11545 0328 05       		.byte	0x5
 11546 0329 E505     		.uleb128 0x2e5
 11547 032b 5A320000 		.4byte	.LASF1035
 11548 032f 05       		.byte	0x5
 11549 0330 E605     		.uleb128 0x2e6
 11550 0332 A20B0000 		.4byte	.LASF1036
 11551 0336 05       		.byte	0x5
 11552 0337 E705     		.uleb128 0x2e7
 11553 0339 D1220000 		.4byte	.LASF1037
 11554 033d 05       		.byte	0x5
 11555 033e EB05     		.uleb128 0x2eb
 11556 0340 DE690000 		.4byte	.LASF1038
 11557 0344 05       		.byte	0x5
 11558 0345 EC05     		.uleb128 0x2ec
 11559 0347 CA750000 		.4byte	.LASF1039
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 271


 11560 034b 05       		.byte	0x5
 11561 034c ED05     		.uleb128 0x2ed
 11562 034e 87990000 		.4byte	.LASF1040
 11563 0352 05       		.byte	0x5
 11564 0353 EE05     		.uleb128 0x2ee
 11565 0355 0F680000 		.4byte	.LASF1041
 11566 0359 00       		.byte	0
 11567              		.section	.debug_macro,"G",%progbits,wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370,comdat
 11568              	.Ldebug_macro30:
 11569 0000 0400     		.2byte	0x4
 11570 0002 00       		.byte	0
 11571 0003 05       		.byte	0x5
 11572 0004 60       		.uleb128 0x60
 11573 0005 474C0000 		.4byte	.LASF1043
 11574 0009 05       		.byte	0x5
 11575 000a 7F       		.uleb128 0x7f
 11576 000b 00410000 		.4byte	.LASF1044
 11577 000f 05       		.byte	0x5
 11578 0010 AB01     		.uleb128 0xab
 11579 0012 52910000 		.4byte	.LASF1045
 11580 0016 05       		.byte	0x5
 11581 0017 B401     		.uleb128 0xb4
 11582 0019 14140000 		.4byte	.LASF1046
 11583 001d 05       		.byte	0x5
 11584 001e BD01     		.uleb128 0xbd
 11585 0020 66010000 		.4byte	.LASF1047
 11586 0024 05       		.byte	0x5
 11587 0025 C701     		.uleb128 0xc7
 11588 0027 DC660000 		.4byte	.LASF1048
 11589 002b 05       		.byte	0x5
 11590 002c D001     		.uleb128 0xd0
 11591 002e CD1C0000 		.4byte	.LASF1049
 11592 0032 05       		.byte	0x5
 11593 0033 D801     		.uleb128 0xd8
 11594 0035 BB040000 		.4byte	.LASF1050
 11595 0039 05       		.byte	0x5
 11596 003a E001     		.uleb128 0xe0
 11597 003c FB9D0000 		.4byte	.LASF1051
 11598 0040 05       		.byte	0x5
 11599 0041 E801     		.uleb128 0xe8
 11600 0043 FC2A0000 		.4byte	.LASF1052
 11601 0047 05       		.byte	0x5
 11602 0048 F101     		.uleb128 0xf1
 11603 004a 3A970000 		.4byte	.LASF1053
 11604 004e 05       		.byte	0x5
 11605 004f F601     		.uleb128 0xf6
 11606 0051 23740000 		.4byte	.LASF1054
 11607 0055 05       		.byte	0x5
 11608 0056 8C02     		.uleb128 0x10c
 11609 0058 4B830000 		.4byte	.LASF1055
 11610 005c 05       		.byte	0x5
 11611 005d AA02     		.uleb128 0x12a
 11612 005f 2C070000 		.4byte	.LASF1056
 11613 0063 05       		.byte	0x5
 11614 0064 B502     		.uleb128 0x135
 11615 0066 73130000 		.4byte	.LASF1057
 11616 006a 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 272


 11617 006b BD02     		.uleb128 0x13d
 11618 006d D2300000 		.4byte	.LASF1058
 11619 0071 05       		.byte	0x5
 11620 0072 C402     		.uleb128 0x144
 11621 0074 E04E0000 		.4byte	.LASF1059
 11622 0078 00       		.byte	0
 11623              		.section	.debug_macro,"G",%progbits,wm4.task.h.84.e110bc08aaffa67ce542955b890201b4,comdat
 11624              	.Ldebug_macro31:
 11625 0000 0400     		.2byte	0x4
 11626 0002 00       		.byte	0
 11627 0003 05       		.byte	0x5
 11628 0004 54       		.uleb128 0x54
 11629 0005 E4780000 		.4byte	.LASF1060
 11630 0009 05       		.byte	0x5
 11631 000a 55       		.uleb128 0x55
 11632 000b 82540000 		.4byte	.LASF1061
 11633 000f 05       		.byte	0x5
 11634 0010 56       		.uleb128 0x56
 11635 0011 9D380000 		.4byte	.LASF1062
 11636 0015 05       		.byte	0x5
 11637 0016 57       		.uleb128 0x57
 11638 0017 18600000 		.4byte	.LASF1063
 11639 001b 05       		.byte	0x5
 11640 001c B201     		.uleb128 0xb2
 11641 001e 3C150000 		.4byte	.LASF1064
 11642 0022 05       		.byte	0x5
 11643 0023 BC01     		.uleb128 0xbc
 11644 0025 1A360000 		.4byte	.LASF1065
 11645 0029 05       		.byte	0x5
 11646 002a CA01     		.uleb128 0xca
 11647 002c F7170000 		.4byte	.LASF1066
 11648 0030 05       		.byte	0x5
 11649 0031 D801     		.uleb128 0xd8
 11650 0033 80760000 		.4byte	.LASF1067
 11651 0037 05       		.byte	0x5
 11652 0038 E201     		.uleb128 0xe2
 11653 003a 0D560000 		.4byte	.LASF1068
 11654 003e 05       		.byte	0x5
 11655 003f EC01     		.uleb128 0xec
 11656 0041 8E120000 		.4byte	.LASF1069
 11657 0045 05       		.byte	0x5
 11658 0046 F101     		.uleb128 0xf1
 11659 0048 E6580000 		.4byte	.LASF1070
 11660 004c 05       		.byte	0x5
 11661 004d F201     		.uleb128 0xf2
 11662 004f 25950000 		.4byte	.LASF1071
 11663 0053 05       		.byte	0x5
 11664 0054 F301     		.uleb128 0xf3
 11665 0056 02450000 		.4byte	.LASF1072
 11666 005a 05       		.byte	0x5
 11667 005b CA02     		.uleb128 0x14a
 11668 005d F8250000 		.4byte	.LASF1073
 11669 0061 05       		.byte	0x5
 11670 0062 8F03     		.uleb128 0x18f
 11671 0064 40790000 		.4byte	.LASF1074
 11672 0068 00       		.byte	0
 11673              		.section	.debug_macro,"G",%progbits,wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d,comdat
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 273


 11674              	.Ldebug_macro32:
 11675 0000 0400     		.2byte	0x4
 11676 0002 00       		.byte	0
 11677 0003 05       		.byte	0x5
 11678 0004 5C       		.uleb128 0x5c
 11679 0005 1F940000 		.4byte	.LASF1076
 11680 0009 05       		.byte	0x5
 11681 000a 5D       		.uleb128 0x5d
 11682 000b A0720000 		.4byte	.LASF1077
 11683 000f 05       		.byte	0x5
 11684 0010 5E       		.uleb128 0x5e
 11685 0011 99470000 		.4byte	.LASF1078
 11686 0015 05       		.byte	0x5
 11687 0016 5F       		.uleb128 0x5f
 11688 0017 FE620000 		.4byte	.LASF1079
 11689 001b 05       		.byte	0x5
 11690 001c 60       		.uleb128 0x60
 11691 001d 040A0000 		.4byte	.LASF1080
 11692 0021 05       		.byte	0x5
 11693 0022 61       		.uleb128 0x61
 11694 0023 9B5C0000 		.4byte	.LASF1081
 11695 0027 05       		.byte	0x5
 11696 0028 62       		.uleb128 0x62
 11697 0029 3F160000 		.4byte	.LASF1082
 11698 002d 05       		.byte	0x5
 11699 002e 63       		.uleb128 0x63
 11700 002f 64580000 		.4byte	.LASF1083
 11701 0033 05       		.byte	0x5
 11702 0034 65       		.uleb128 0x65
 11703 0035 0C4A0000 		.4byte	.LASF1084
 11704 0039 05       		.byte	0x5
 11705 003a 66       		.uleb128 0x66
 11706 003b FC4C0000 		.4byte	.LASF1085
 11707 003f 05       		.byte	0x5
 11708 0040 67       		.uleb128 0x67
 11709 0041 F5220000 		.4byte	.LASF1086
 11710 0045 05       		.byte	0x5
 11711 0046 68       		.uleb128 0x68
 11712 0047 020B0000 		.4byte	.LASF1087
 11713 004b 05       		.byte	0x5
 11714 004c 69       		.uleb128 0x69
 11715 004d A19A0000 		.4byte	.LASF1088
 11716 0051 05       		.byte	0x5
 11717 0052 FA02     		.uleb128 0x17a
 11718 0054 FE6E0000 		.4byte	.LASF1089
 11719 0058 05       		.byte	0x5
 11720 0059 A403     		.uleb128 0x1a4
 11721 005b 6A280000 		.4byte	.LASF1090
 11722 005f 05       		.byte	0x5
 11723 0060 F403     		.uleb128 0x1f4
 11724 0062 AD680000 		.4byte	.LASF1091
 11725 0066 05       		.byte	0x5
 11726 0067 9A04     		.uleb128 0x21a
 11727 0069 AB6B0000 		.4byte	.LASF1092
 11728 006d 05       		.byte	0x5
 11729 006e 9605     		.uleb128 0x296
 11730 0070 B7870000 		.4byte	.LASF1093
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 274


 11731 0074 05       		.byte	0x5
 11732 0075 EC05     		.uleb128 0x2ec
 11733 0077 CE210000 		.4byte	.LASF1094
 11734 007b 05       		.byte	0x5
 11735 007c AB06     		.uleb128 0x32b
 11736 007e 99480000 		.4byte	.LASF1095
 11737 0082 05       		.byte	0x5
 11738 0083 F406     		.uleb128 0x374
 11739 0085 A68F0000 		.4byte	.LASF1096
 11740 0089 05       		.byte	0x5
 11741 008a CA07     		.uleb128 0x3ca
 11742 008c 922E0000 		.4byte	.LASF1097
 11743 0090 00       		.byte	0
 11744              		.section	.debug_macro,"G",%progbits,wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95,comdat
 11745              	.Ldebug_macro33:
 11746 0000 0400     		.2byte	0x4
 11747 0002 00       		.byte	0
 11748 0003 05       		.byte	0x5
 11749 0004 43       		.uleb128 0x43
 11750 0005 D4890000 		.4byte	.LASF1098
 11751 0009 05       		.byte	0x5
 11752 000a 58       		.uleb128 0x58
 11753 000b 6B380000 		.4byte	.LASF1099
 11754 000f 05       		.byte	0x5
 11755 0010 59       		.uleb128 0x59
 11756 0011 BC9F0000 		.4byte	.LASF1100
 11757 0015 00       		.byte	0
 11758              		.section	.debug_line,"",%progbits
 11759              	.Ldebug_line0:
 11760 0000 810B0000 		.section	.debug_str,"MS",%progbits,1
 11760      02006803 
 11760      00000201 
 11760      FB0E0D00 
 11760      01010101 
 11761              	.LASF600:
 11762 0000 5F5F474E 		.ascii	"__GNUCLIKE___SECTION 1\000"
 11762      55434C49 
 11762      4B455F5F 
 11762      5F534543 
 11762      54494F4E 
 11763              	.LASF352:
 11764 0017 5F5F4758 		.ascii	"__GXX_TYPEINFO_EQUALITY_INLINE 0\000"
 11764      585F5459 
 11764      5045494E 
 11764      464F5F45 
 11764      5155414C 
 11765              	.LASF816:
 11766 0038 57494E54 		.ascii	"WINT_MIN (__WINT_MIN__)\000"
 11766      5F4D494E 
 11766      20285F5F 
 11766      57494E54 
 11766      5F4D494E 
 11767              	.LASF157:
 11768 0050 5F5F4445 		.ascii	"__DECIMAL_DIG__ 17\000"
 11768      43494D41 
 11768      4C5F4449 
 11768      475F5F20 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 275


 11768      313700
 11769              	.LASF395:
 11770 0063 5F5F5356 		.ascii	"__SVID_VISIBLE 1\000"
 11770      49445F56 
 11770      49534942 
 11770      4C452031 
 11770      00
 11771              	.LASF726:
 11772 0074 5F5F696E 		.ascii	"__int20 +2\000"
 11772      74323020 
 11772      2B3200
 11773              	.LASF136:
 11774 007f 5F5F464C 		.ascii	"__FLT_HAS_QUIET_NAN__ 1\000"
 11774      545F4841 
 11774      535F5155 
 11774      4945545F 
 11774      4E414E5F 
 11775              	.LASF1302:
 11776 0097 78596965 		.ascii	"xYieldPending\000"
 11776      6C645065 
 11776      6E64696E 
 11776      6700
 11777              	.LASF184:
 11778 00a5 5F5F4445 		.ascii	"__DEC128_EPSILON__ 1E-33DL\000"
 11778      43313238 
 11778      5F455053 
 11778      494C4F4E 
 11778      5F5F2031 
 11779              	.LASF1120:
 11780 00c0 756E7369 		.ascii	"unsigned char\000"
 11780      676E6564 
 11780      20636861 
 11780      7200
 11781              	.LASF314:
 11782 00ce 5F5F4743 		.ascii	"__GCC_ATOMIC_WCHAR_T_LOCK_FREE 2\000"
 11782      435F4154 
 11782      4F4D4943 
 11782      5F574348 
 11782      41525F54 
 11783              	.LASF306:
 11784 00ef 5F5F4348 		.ascii	"__CHAR_UNSIGNED__ 1\000"
 11784      41525F55 
 11784      4E534947 
 11784      4E45445F 
 11784      5F203100 
 11785              	.LASF1118:
 11786 0103 73697A65 		.ascii	"size_t\000"
 11786      5F7400
 11787              	.LASF576:
 11788 010a 5F474C4F 		.ascii	"_GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)\000"
 11788      42414C5F 
 11788      41544558 
 11788      49542028 
 11788      5F474C4F 
 11789              	.LASF1308:
 11790 0132 433A5C55 		.ascii	"C:\\Users\\STUDENT\\Desktop\\RSC\\Embedded\\Potenti"
 11790      73657273 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 276


 11790      5C535455 
 11790      44454E54 
 11790      5C446573 
 11791 015f 6F6D6574 		.ascii	"ometer\000"
 11791      657200
 11792              	.LASF1047:
 11793 0166 6C697374 		.ascii	"listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( ( pxLi"
 11793      5345545F 
 11793      4C495354 
 11793      5F495445 
 11793      4D5F5641 
 11794 0199 73744974 		.ascii	"stItem )->xItemValue = ( xValue ) )\000"
 11794      656D2029 
 11794      2D3E7849 
 11794      74656D56 
 11794      616C7565 
 11795              	.LASF186:
 11796 01bd 5F5F5346 		.ascii	"__SFRACT_FBIT__ 7\000"
 11796      52414354 
 11796      5F464249 
 11796      545F5F20 
 11796      3700
 11797              	.LASF1129:
 11798 01cf 73697A65 		.ascii	"sizetype\000"
 11798      74797065 
 11798      00
 11799              	.LASF79:
 11800 01d8 5F5F494E 		.ascii	"__INTMAX_C(c) c ## LL\000"
 11800      544D4158 
 11800      5F432863 
 11800      29206320 
 11800      2323204C 
 11801              	.LASF403:
 11802 01ee 5F524541 		.ascii	"_READ_WRITE_BUFSIZE_TYPE int\000"
 11802      445F5752 
 11802      4954455F 
 11802      42554653 
 11802      495A455F 
 11803              	.LASF840:
 11804 020b 636F6E66 		.ascii	"configIDLE_SHOULD_YIELD 0\000"
 11804      69674944 
 11804      4C455F53 
 11804      484F554C 
 11804      445F5949 
 11805              	.LASF775:
 11806 0225 494E5431 		.ascii	"INT16_MIN (-__INT16_MAX__ - 1)\000"
 11806      365F4D49 
 11806      4E20282D 
 11806      5F5F494E 
 11806      5431365F 
 11807              	.LASF258:
 11808 0244 5F5F4C4C 		.ascii	"__LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)\000"
 11808      41434355 
 11808      4D5F4D49 
 11808      4E5F5F20 
 11808      282D3058 
 11809              	.LASF250:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 277


 11810 026b 5F5F4C41 		.ascii	"__LACCUM_EPSILON__ 0x1P-31LK\000"
 11810      4343554D 
 11810      5F455053 
 11810      494C4F4E 
 11810      5F5F2030 
 11811              	.LASF76:
 11812 0288 5F5F5054 		.ascii	"__PTRDIFF_MAX__ 0x7fffffff\000"
 11812      52444946 
 11812      465F4D41 
 11812      585F5F20 
 11812      30783766 
 11813              	.LASF423:
 11814 02a3 5F4C4F4E 		.ascii	"_LONG_DOUBLE long double\000"
 11814      475F444F 
 11814      55424C45 
 11814      206C6F6E 
 11814      6720646F 
 11815              	.LASF1192:
 11816 02bc 75735374 		.ascii	"usStackDepth\000"
 11816      61636B44 
 11816      65707468 
 11816      00
 11817              	.LASF751:
 11818 02c9 5F55494E 		.ascii	"_UINT32_T_DECLARED \000"
 11818      5433325F 
 11818      545F4445 
 11818      434C4152 
 11818      45442000 
 11819              	.LASF78:
 11820 02dd 5F5F494E 		.ascii	"__INTMAX_MAX__ 0x7fffffffffffffffLL\000"
 11820      544D4158 
 11820      5F4D4158 
 11820      5F5F2030 
 11820      78376666 
 11821              	.LASF171:
 11822 0301 5F5F4445 		.ascii	"__DEC32_SUBNORMAL_MIN__ 0.000001E-95DF\000"
 11822      4333325F 
 11822      5355424E 
 11822      4F524D41 
 11822      4C5F4D49 
 11823              	.LASF275:
 11824 0328 5F5F5451 		.ascii	"__TQ_IBIT__ 0\000"
 11824      5F494249 
 11824      545F5F20 
 11824      3000
 11825              	.LASF750:
 11826 0336 5F494E54 		.ascii	"_INT32_T_DECLARED \000"
 11826      33325F54 
 11826      5F444543 
 11826      4C415245 
 11826      442000
 11827              	.LASF1022:
 11828 0349 636F6E66 		.ascii	"configENABLE_BACKWARD_COMPATIBILITY 1\000"
 11828      6967454E 
 11828      41424C45 
 11828      5F424143 
 11828      4B574152 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 278


 11829              	.LASF536:
 11830 036f 5F524545 		.ascii	"_REENT_SIGNAL_SIZE 24\000"
 11830      4E545F53 
 11830      49474E41 
 11830      4C5F5349 
 11830      5A452032 
 11831              	.LASF845:
 11832 0385 636F6E66 		.ascii	"configUSE_ALTERNATIVE_API 0\000"
 11832      69675553 
 11832      455F414C 
 11832      5445524E 
 11832      41544956 
 11833              	.LASF572:
 11834 03a1 5F4B6D61 		.ascii	"_Kmax (sizeof (size_t) << 3)\000"
 11834      78202873 
 11834      697A656F 
 11834      66202873 
 11834      697A655F 
 11835              	.LASF11:
 11836 03be 5F5F4154 		.ascii	"__ATOMIC_CONSUME 1\000"
 11836      4F4D4943 
 11836      5F434F4E 
 11836      53554D45 
 11836      203100
 11837              	.LASF251:
 11838 03d1 5F5F554C 		.ascii	"__ULACCUM_FBIT__ 32\000"
 11838      41434355 
 11838      4D5F4642 
 11838      49545F5F 
 11838      20333200 
 11839              	.LASF1232:
 11840 03e5 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11840      6B476574 
 11840      5469636B 
 11840      436F756E 
 11840      7446726F 
 11841              	.LASF238:
 11842 03fe 5F5F4143 		.ascii	"__ACCUM_MIN__ (-0X1P15K-0X1P15K)\000"
 11842      43554D5F 
 11842      4D494E5F 
 11842      5F20282D 
 11842      30583150 
 11843              	.LASF944:
 11844 041f 74726163 		.ascii	"traceLOW_POWER_IDLE_END() \000"
 11844      654C4F57 
 11844      5F504F57 
 11844      45525F49 
 11844      444C455F 
 11845              	.LASF1168:
 11846 043a 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11846      72795265 
 11846      67696F6E 
 11846      5F7400
 11847              	.LASF598:
 11848 0449 5F5F474E 		.ascii	"__GNUCLIKE___TYPEOF 1\000"
 11848      55434C49 
 11848      4B455F5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 279


 11848      5F545950 
 11848      454F4620 
 11849              	.LASF997:
 11850 045f 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(xEventGroup,ux"
 11850      65455645 
 11850      4E545F47 
 11850      524F5550 
 11850      5F434C45 
 11851 0492 42697473 		.ascii	"BitsToClear) \000"
 11851      546F436C 
 11851      65617229 
 11851      2000
 11852              	.LASF1182:
 11853 04a0 78457665 		.ascii	"xEventListItem\000"
 11853      6E744C69 
 11853      73744974 
 11853      656D00
 11854              	.LASF1117:
 11855 04af 7369676E 		.ascii	"signed char\000"
 11855      65642063 
 11855      68617200 
 11856              	.LASF1050:
 11857 04bb 6C697374 		.ascii	"listGET_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd"
 11857      4745545F 
 11857      48454144 
 11857      5F454E54 
 11857      52592870 
 11858 04ee 20292E70 		.ascii	" ).pxNext )\000"
 11858      784E6578 
 11858      74202900 
 11859              	.LASF1159:
 11860 04fa 65546173 		.ascii	"eTaskState\000"
 11860      6B537461 
 11860      746500
 11861              	.LASF15:
 11862 0505 5F5F5349 		.ascii	"__SIZEOF_LONG_LONG__ 8\000"
 11862      5A454F46 
 11862      5F4C4F4E 
 11862      475F4C4F 
 11862      4E475F5F 
 11863              	.LASF1108:
 11864 051c 74736B53 		.ascii	"tskSUSPENDED_CHAR ( 'S' )\000"
 11864      55535045 
 11864      4E444544 
 11864      5F434841 
 11864      52202820 
 11865              	.LASF142:
 11866 0536 5F5F4442 		.ascii	"__DBL_MAX_10_EXP__ 308\000"
 11866      4C5F4D41 
 11866      585F3130 
 11866      5F455850 
 11866      5F5F2033 
 11867              	.LASF1248:
 11868 054d 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11868      6B506C61 
 11868      63654F6E 
 11868      556E6F72 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 280


 11868      64657265 
 11869              	.LASF675:
 11870 056c 5F5F5243 		.ascii	"__RCSID_SOURCE(s) struct __hack\000"
 11870      5349445F 
 11870      534F5552 
 11870      43452873 
 11870      29207374 
 11871              	.LASF198:
 11872 058c 5F5F4652 		.ascii	"__FRACT_MIN__ (-0.5R-0.5R)\000"
 11872      4143545F 
 11872      4D494E5F 
 11872      5F20282D 
 11872      302E3552 
 11873              	.LASF264:
 11874 05a7 5F5F554C 		.ascii	"__ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK\000"
 11874      4C414343 
 11874      554D5F4D 
 11874      41585F5F 
 11874      20305846 
 11875              	.LASF863:
 11876 05d3 636F6E66 		.ascii	"configNET_MASK1 255\000"
 11876      69674E45 
 11876      545F4D41 
 11876      534B3120 
 11876      32353500 
 11877              	.LASF234:
 11878 05e7 5F5F5553 		.ascii	"__USACCUM_MAX__ 0XFFFFP-8UHK\000"
 11878      41434355 
 11878      4D5F4D41 
 11878      585F5F20 
 11878      30584646 
 11879              	.LASF1236:
 11880 0604 70756C54 		.ascii	"pulTotalRunTime\000"
 11880      6F74616C 
 11880      52756E54 
 11880      696D6500 
 11881              	.LASF767:
 11882 0614 494E5450 		.ascii	"INTPTR_MAX (__INTPTR_MAX__)\000"
 11882      54525F4D 
 11882      41582028 
 11882      5F5F494E 
 11882      54505452 
 11883              	.LASF271:
 11884 0630 5F5F5351 		.ascii	"__SQ_IBIT__ 0\000"
 11884      5F494249 
 11884      545F5F20 
 11884      3000
 11885              	.LASF25:
 11886 063e 5F5F4F52 		.ascii	"__ORDER_PDP_ENDIAN__ 3412\000"
 11886      4445525F 
 11886      5044505F 
 11886      454E4449 
 11886      414E5F5F 
 11887              	.LASF29:
 11888 0658 5F5F5349 		.ascii	"__SIZE_TYPE__ unsigned int\000"
 11888      5A455F54 
 11888      5950455F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 281


 11888      5F20756E 
 11888      7369676E 
 11889              	.LASF174:
 11890 0673 5F5F4445 		.ascii	"__DEC64_MAX_EXP__ 385\000"
 11890      4336345F 
 11890      4D41585F 
 11890      4558505F 
 11890      5F203338 
 11891              	.LASF827:
 11892 0689 5F474343 		.ascii	"_GCC_WRAP_STDINT_H \000"
 11892      5F575241 
 11892      505F5354 
 11892      44494E54 
 11892      5F482000 
 11893              	.LASF134:
 11894 069d 5F5F464C 		.ascii	"__FLT_HAS_DENORM__ 1\000"
 11894      545F4841 
 11894      535F4445 
 11894      4E4F524D 
 11894      5F5F2031 
 11895              	.LASF38:
 11896 06b2 5F5F494E 		.ascii	"__INT8_TYPE__ signed char\000"
 11896      54385F54 
 11896      5950455F 
 11896      5F207369 
 11896      676E6564 
 11897              	.LASF334:
 11898 06cc 5F5F4152 		.ascii	"__ARM_ARCH_PROFILE 77\000"
 11898      4D5F4152 
 11898      43485F50 
 11898      524F4649 
 11898      4C452037 
 11899              	.LASF1160:
 11900 06e2 7854494D 		.ascii	"xTIME_OUT\000"
 11900      455F4F55 
 11900      5400
 11901              	.LASF417:
 11902 06ec 5F455846 		.ascii	"_EXFUN(name,proto) name proto\000"
 11902      554E286E 
 11902      616D652C 
 11902      70726F74 
 11902      6F29206E 
 11903              	.LASF1251:
 11904 070a 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 11904      6B52656D 
 11904      6F766546 
 11904      726F6D55 
 11904      6E6F7264 
 11905              	.LASF1056:
 11906 072c 6C697374 		.ascii	"listGET_OWNER_OF_HEAD_ENTRY(pxList) ( (&( ( pxList "
 11906      4745545F 
 11906      4F574E45 
 11906      525F4F46 
 11906      5F484541 
 11907 075f 292D3E78 		.ascii	")->xListEnd ))->pxNext->pvOwner )\000"
 11907      4C697374 
 11907      456E6420 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 282


 11907      29292D3E 
 11907      70784E65 
 11908              	.LASF1298:
 11909 0781 78546963 		.ascii	"xTickCount\000"
 11909      6B436F75 
 11909      6E7400
 11910              	.LASF1186:
 11911 078c 75785461 		.ascii	"uxTaskNumber\000"
 11911      736B4E75 
 11911      6D626572 
 11911      00
 11912              	.LASF151:
 11913 0799 5F5F4C44 		.ascii	"__LDBL_MANT_DIG__ 53\000"
 11913      424C5F4D 
 11913      414E545F 
 11913      4449475F 
 11913      5F203533 
 11914              	.LASF796:
 11915 07ae 494E545F 		.ascii	"INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)\000"
 11915      46415354 
 11915      31365F4D 
 11915      494E2028 
 11915      2D5F5F49 
 11916              	.LASF941:
 11917 07d7 74726163 		.ascii	"traceTASK_SWITCHED_IN() \000"
 11917      65544153 
 11917      4B5F5357 
 11917      49544348 
 11917      45445F49 
 11918              	.LASF1270:
 11919 07f0 70784C69 		.ascii	"pxList\000"
 11919      737400
 11920              	.LASF919:
 11921 07f7 706F7274 		.ascii	"portUSING_MPU_WRAPPERS 0\000"
 11921      5553494E 
 11921      475F4D50 
 11921      555F5752 
 11921      41505045 
 11922              	.LASF101:
 11923 0810 5F5F5549 		.ascii	"__UINT8_C(c) c\000"
 11923      4E54385F 
 11923      43286329 
 11923      206300
 11924              	.LASF39:
 11925 081f 5F5F494E 		.ascii	"__INT16_TYPE__ short int\000"
 11925      5431365F 
 11925      54595045 
 11925      5F5F2073 
 11925      686F7274 
 11926              	.LASF632:
 11927 0838 5F5F616C 		.ascii	"__aligned(x) __attribute__((__aligned__(x)))\000"
 11927      69676E65 
 11927      64287829 
 11927      205F5F61 
 11927      74747269 
 11928              	.LASF685:
 11929 0865 5F5F6C6F 		.ascii	"__locks_exclusive(...) __lock_annotate(exclusive_lo"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 283


 11929      636B735F 
 11929      6578636C 
 11929      75736976 
 11929      65282E2E 
 11930 0898 636B5F66 		.ascii	"ck_function(__VA_ARGS__))\000"
 11930      756E6374 
 11930      696F6E28 
 11930      5F5F5641 
 11930      5F415247 
 11931              	.LASF1158:
 11932 08b2 6544656C 		.ascii	"eDeleted\000"
 11932      65746564 
 11932      00
 11933              	.LASF914:
 11934 08bb 706F7274 		.ascii	"portBYTE_ALIGNMENT_MASK ( 0x0007U )\000"
 11934      42595445 
 11934      5F414C49 
 11934      474E4D45 
 11934      4E545F4D 
 11935              	.LASF939:
 11936 08df 74726163 		.ascii	"traceSTART() \000"
 11936      65535441 
 11936      52542829 
 11936      2000
 11937              	.LASF254:
 11938 08ed 5F5F554C 		.ascii	"__ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK\000"
 11938      41434355 
 11938      4D5F4D41 
 11938      585F5F20 
 11938      30584646 
 11939              	.LASF1184:
 11940 0917 70785374 		.ascii	"pxStack\000"
 11940      61636B00 
 11941              	.LASF589:
 11942 091f 5F5F756E 		.ascii	"__unbounded \000"
 11942      626F756E 
 11942      64656420 
 11942      00
 11943              	.LASF830:
 11944 092c 636F6E66 		.ascii	"configUSE_IDLE_HOOK 0\000"
 11944      69675553 
 11944      455F4944 
 11944      4C455F48 
 11944      4F4F4B20 
 11945              	.LASF731:
 11946 0942 5F5F494E 		.ascii	"__INT8 \"hh\"\000"
 11946      54382022 
 11946      68682200 
 11947              	.LASF307:
 11948 094e 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1\000"
 11948      435F4841 
 11948      56455F53 
 11948      594E435F 
 11948      434F4D50 
 11949              	.LASF779:
 11950 0973 494E545F 		.ascii	"INT_LEAST16_MAX (__INT_LEAST16_MAX__)\000"
 11950      4C454153 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 284


 11950      5431365F 
 11950      4D415820 
 11950      285F5F49 
 11951              	.LASF860:
 11952 0999 636F6E66 		.ascii	"configIP_ADDR2 0\000"
 11952      69674950 
 11952      5F414444 
 11952      52322030 
 11952      00
 11953              	.LASF102:
 11954 09aa 5F5F5549 		.ascii	"__UINT_LEAST16_MAX__ 0xffff\000"
 11954      4E545F4C 
 11954      45415354 
 11954      31365F4D 
 11954      41585F5F 
 11955              	.LASF1:
 11956 09c6 5F5F5354 		.ascii	"__STDC_HOSTED__ 1\000"
 11956      44435F48 
 11956      4F535445 
 11956      445F5F20 
 11956      3100
 11957              	.LASF221:
 11958 09d8 5F5F554C 		.ascii	"__ULLFRACT_FBIT__ 64\000"
 11958      4C465241 
 11958      43545F46 
 11958      4249545F 
 11958      5F203634 
 11959              	.LASF371:
 11960 09ed 5F4C4442 		.ascii	"_LDBL_EQ_DBL 1\000"
 11960      4C5F4551 
 11960      5F44424C 
 11960      203100
 11961              	.LASF1170:
 11962 09fc 7848616E 		.ascii	"xHandle\000"
 11962      646C6500 
 11963              	.LASF1080:
 11964 0a04 746D7243 		.ascii	"tmrCOMMAND_RESET ( ( BaseT_t ) 2 )\000"
 11964      4F4D4D41 
 11964      4E445F52 
 11964      45534554 
 11964      20282028 
 11965              	.LASF552:
 11966 0a27 5F524545 		.ascii	"_REENT_MP_RESULT(ptr) ((ptr)->_result)\000"
 11966      4E545F4D 
 11966      505F5245 
 11966      53554C54 
 11966      28707472 
 11967              	.LASF57:
 11968 0a4e 5F5F494E 		.ascii	"__INT_FAST64_TYPE__ long long int\000"
 11968      545F4641 
 11968      53543634 
 11968      5F545950 
 11968      455F5F20 
 11969              	.LASF32:
 11970 0a70 5F5F5749 		.ascii	"__WINT_TYPE__ unsigned int\000"
 11970      4E545F54 
 11970      5950455F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 285


 11970      5F20756E 
 11970      7369676E 
 11971              	.LASF559:
 11972 0a8b 5F524545 		.ascii	"_REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok"
 11972      4E545F53 
 11972      5452544F 
 11972      4B5F4C41 
 11972      53542870 
 11973 0abe 5F6C6173 		.ascii	"_last)\000"
 11973      742900
 11974              	.LASF1286:
 11975 0ac5 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11975      736B4765 
 11975      744E756D 
 11975      6265724F 
 11975      66546173 
 11976              	.LASF961:
 11977 0adc 74726163 		.ascii	"traceQUEUE_SEND(pxQueue) \000"
 11977      65515545 
 11977      55455F53 
 11977      454E4428 
 11977      70785175 
 11978              	.LASF433:
 11979 0af6 5F5F5349 		.ascii	"__SIZE_T__ \000"
 11979      5A455F54 
 11979      5F5F2000 
 11980              	.LASF1087:
 11981 0b02 746D7243 		.ascii	"tmrCOMMAND_STOP_FROM_ISR ( ( BaseT_t ) 8 )\000"
 11981      4F4D4D41 
 11981      4E445F53 
 11981      544F505F 
 11981      46524F4D 
 11982              	.LASF811:
 11983 0b2d 50545244 		.ascii	"PTRDIFF_MAX (__PTRDIFF_MAX__)\000"
 11983      4946465F 
 11983      4D415820 
 11983      285F5F50 
 11983      54524449 
 11984              	.LASF994:
 11985 0b4b 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_BLOCK(xEventGroup,uxBits"
 11985      65455645 
 11985      4E545F47 
 11985      524F5550 
 11985      5F574149 
 11986 0b7e 546F5761 		.ascii	"ToWaitFor) \000"
 11986      6974466F 
 11986      72292000 
 11987              	.LASF1284:
 11988 0b8a 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11988      6B507269 
 11988      6F726974 
 11988      79446973 
 11988      696E6865 
 11989              	.LASF1036:
 11990 0ba2 70645441 		.ascii	"pdTASK_HOOK_CODE TaskHookFunction_t\000"
 11990      534B5F48 
 11990      4F4F4B5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 286


 11990      434F4445 
 11990      20546173 
 11991              	.LASF304:
 11992 0bc6 5F5F474E 		.ascii	"__GNUC_GNU_INLINE__ 1\000"
 11992      55435F47 
 11992      4E555F49 
 11992      4E4C494E 
 11992      455F5F20 
 11993              	.LASF917:
 11994 0bdc 50524956 		.ascii	"PRIVILEGED_FUNCTION \000"
 11994      494C4547 
 11994      45445F46 
 11994      554E4354 
 11994      494F4E20 
 11995              	.LASF946:
 11996 0bf1 74726163 		.ascii	"traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInh"
 11996      65544153 
 11996      4B5F5052 
 11996      494F5249 
 11996      54595F49 
 11997 0c24 65726974 		.ascii	"eritedPriority) \000"
 11997      65645072 
 11997      696F7269 
 11997      74792920 
 11997      00
 11998              	.LASF555:
 11999 0c35 5F524545 		.ascii	"_REENT_MP_FREELIST(ptr) ((ptr)->_freelist)\000"
 11999      4E545F4D 
 11999      505F4652 
 11999      45454C49 
 11999      53542870 
 12000              	.LASF1075:
 12001 0c60 54494D45 		.ascii	"TIMERS_H \000"
 12001      52535F48 
 12001      2000
 12002              	.LASF581:
 12003 0c6a 5F5F4153 		.ascii	"__ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) "
 12003      4D4E414D 
 12003      4528636E 
 12003      616D6529 
 12003      205F5F58 
 12004 0c9d 636E616D 		.ascii	"cname\000"
 12004      6500
 12005              	.LASF466:
 12006 0ca3 5F5F6E65 		.ascii	"__need_wchar_t\000"
 12006      65645F77 
 12006      63686172 
 12006      5F7400
 12007              	.LASF649:
 12008 0cb2 5F5F7265 		.ascii	"__result_use_check __attribute__((__warn_unused_res"
 12008      73756C74 
 12008      5F757365 
 12008      5F636865 
 12008      636B205F 
 12009 0ce5 756C745F 		.ascii	"ult__))\000"
 12009      5F292900 
 12010              	.LASF937:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 287


 12011 0ced 706F7274 		.ascii	"portSETUP_TCB(pxTCB) ( void ) pxTCB\000"
 12011      53455455 
 12011      505F5443 
 12011      42287078 
 12011      54434229 
 12012              	.LASF504:
 12013 0d11 5F5F6C6F 		.ascii	"__lock_close_recursive(lock) (_CAST_VOID 0)\000"
 12013      636B5F63 
 12013      6C6F7365 
 12013      5F726563 
 12013      75727369 
 12014              	.LASF982:
 12015 0d3d 74726163 		.ascii	"traceTASK_INCREMENT_TICK(xTickCount) \000"
 12015      65544153 
 12015      4B5F494E 
 12015      4352454D 
 12015      454E545F 
 12016              	.LASF577:
 12017 0d63 5F535953 		.ascii	"_SYS_CDEFS_H_ \000"
 12017      5F434445 
 12017      46535F48 
 12017      5F2000
 12018              	.LASF479:
 12019 0d72 5F425344 		.ascii	"_BSD_PTRDIFF_T_ \000"
 12019      5F505452 
 12019      44494646 
 12019      5F545F20 
 12019      00
 12020              	.LASF776:
 12021 0d83 494E5431 		.ascii	"INT16_MAX (__INT16_MAX__)\000"
 12021      365F4D41 
 12021      5820285F 
 12021      5F494E54 
 12021      31365F4D 
 12022              	.LASF291:
 12023 0d9d 5F5F4441 		.ascii	"__DA_IBIT__ 32\000"
 12023      5F494249 
 12023      545F5F20 
 12023      333200
 12024              	.LASF211:
 12025 0dac 5F5F554C 		.ascii	"__ULFRACT_FBIT__ 32\000"
 12025      46524143 
 12025      545F4642 
 12025      49545F5F 
 12025      20333200 
 12026              	.LASF1104:
 12027 0dc0 74736B53 		.ascii	"tskSTACK_FILL_BYTE ( 0xa5U )\000"
 12027      5441434B 
 12027      5F46494C 
 12027      4C5F4259 
 12027      54452028 
 12028              	.LASF421:
 12029 0ddd 5F444546 		.ascii	"_DEFUN_VOID(name) name(_NOARGS)\000"
 12029      554E5F56 
 12029      4F494428 
 12029      6E616D65 
 12029      29206E61 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 288


 12030              	.LASF448:
 12031 0dfd 5F5F7369 		.ascii	"__size_t \000"
 12031      7A655F74 
 12031      2000
 12032              	.LASF588:
 12033 0e07 5F5F626F 		.ascii	"__bounded \000"
 12033      756E6465 
 12033      642000
 12034              	.LASF764:
 12035 0e12 5F5F696E 		.ascii	"__int_fast32_t_defined 1\000"
 12035      745F6661 
 12035      73743332 
 12035      5F745F64 
 12035      6566696E 
 12036              	.LASF1178:
 12037 0e2b 5461736B 		.ascii	"TaskStatus_t\000"
 12037      53746174 
 12037      75735F74 
 12037      00
 12038              	.LASF1221:
 12039 0e38 78546173 		.ascii	"xTaskToSuspend\000"
 12039      6B546F53 
 12039      75737065 
 12039      6E6400
 12040              	.LASF986:
 12041 0e47 74726163 		.ascii	"traceTIMER_EXPIRED(pxTimer) \000"
 12041      6554494D 
 12041      45525F45 
 12041      58504952 
 12041      45442870 
 12042              	.LASF1260:
 12043 0e64 75784861 		.ascii	"uxHandle\000"
 12043      6E646C65 
 12043      00
 12044              	.LASF819:
 12045 0e6d 494E5431 		.ascii	"INT16_C(x) __INT16_C(x)\000"
 12045      365F4328 
 12045      7829205F 
 12045      5F494E54 
 12045      31365F43 
 12046              	.LASF190:
 12047 0e85 5F5F5346 		.ascii	"__SFRACT_EPSILON__ 0x1P-7HR\000"
 12047      52414354 
 12047      5F455053 
 12047      494C4F4E 
 12047      5F5F2030 
 12048              	.LASF619:
 12049 0ea1 5F5F434F 		.ascii	"__CONCAT1(x,y) x ## y\000"
 12049      4E434154 
 12049      3128782C 
 12049      79292078 
 12049      20232320 
 12050              	.LASF437:
 12051 0eb7 5F545F53 		.ascii	"_T_SIZE \000"
 12051      495A4520 
 12051      00
 12052              	.LASF97:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 289


 12053 0ec0 5F5F494E 		.ascii	"__INT32_C(c) c ## L\000"
 12053      5433325F 
 12053      43286329 
 12053      20632023 
 12053      23204C00 
 12054              	.LASF280:
 12055 0ed4 5F5F5553 		.ascii	"__USQ_FBIT__ 32\000"
 12055      515F4642 
 12055      49545F5F 
 12055      20333200 
 12056              	.LASF24:
 12057 0ee4 5F5F4F52 		.ascii	"__ORDER_BIG_ENDIAN__ 4321\000"
 12057      4445525F 
 12057      4249475F 
 12057      454E4449 
 12057      414E5F5F 
 12058              	.LASF858:
 12059 0efe 636F6E66 		.ascii	"configIP_ADDR0 192\000"
 12059      69674950 
 12059      5F414444 
 12059      52302031 
 12059      393200
 12060              	.LASF270:
 12061 0f11 5F5F5351 		.ascii	"__SQ_FBIT__ 31\000"
 12061      5F464249 
 12061      545F5F20 
 12061      333100
 12062              	.LASF1214:
 12063 0f20 75785265 		.ascii	"uxReturn\000"
 12063      7475726E 
 12063      00
 12064              	.LASF305:
 12065 0f29 5F5F4E4F 		.ascii	"__NO_INLINE__ 1\000"
 12065      5F494E4C 
 12065      494E455F 
 12065      5F203100 
 12066              	.LASF769:
 12067 0f39 494E5438 		.ascii	"INT8_MIN (-__INT8_MAX__ - 1)\000"
 12067      5F4D494E 
 12067      20282D5F 
 12067      5F494E54 
 12067      385F4D41 
 12068              	.LASF1140:
 12069 0f56 70784E65 		.ascii	"pxNext\000"
 12069      787400
 12070              	.LASF748:
 12071 0f5d 5F55494E 		.ascii	"_UINT16_T_DECLARED \000"
 12071      5431365F 
 12071      545F4445 
 12071      434C4152 
 12071      45442000 
 12072              	.LASF1114:
 12073 0f71 70727647 		.ascii	"prvGetTCBFromHandle(pxHandle) ( ( ( pxHandle ) == N"
 12073      65745443 
 12073      4246726F 
 12073      6D48616E 
 12073      646C6528 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 290


 12074 0fa4 554C4C20 		.ascii	"ULL ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( px"
 12074      29203F20 
 12074      28205443 
 12074      425F7420 
 12074      2A202920 
 12075 0fd7 48616E64 		.ascii	"Handle ) )\000"
 12075      6C652029 
 12075      202900
 12076              	.LASF1007:
 12077 0fe2 706F7274 		.ascii	"portYIELD_WITHIN_API portYIELD\000"
 12077      5949454C 
 12077      445F5749 
 12077      5448494E 
 12077      5F415049 
 12078              	.LASF278:
 12079 1001 5F5F5548 		.ascii	"__UHQ_FBIT__ 16\000"
 12079      515F4642 
 12079      49545F5F 
 12079      20313600 
 12080              	.LASF1198:
 12081 1011 70784E65 		.ascii	"pxNewTCB\000"
 12081      77544342 
 12081      00
 12082              	.LASF534:
 12083 101a 5F524545 		.ascii	"_REENT_EMERGENCY_SIZE 25\000"
 12083      4E545F45 
 12083      4D455247 
 12083      454E4359 
 12083      5F53495A 
 12084              	.LASF933:
 12085 1033 494E434C 		.ascii	"INCLUDE_xTaskGetSchedulerState 0\000"
 12085      5544455F 
 12085      78546173 
 12085      6B476574 
 12085      53636865 
 12086              	.LASF861:
 12087 1054 636F6E66 		.ascii	"configIP_ADDR3 201\000"
 12087      69674950 
 12087      5F414444 
 12087      52332032 
 12087      303100
 12088              	.LASF669:
 12089 1067 5F5F7765 		.ascii	"__weak_reference(sym,alias) __asm__(\".weak \" #ali"
 12089      616B5F72 
 12089      65666572 
 12089      656E6365 
 12089      2873796D 
 12090 1098 6173293B 		.ascii	"as); __asm__(\".equ \" #alias \", \" #sym)\000"
 12090      205F5F61 
 12090      736D5F5F 
 12090      28222E65 
 12090      71752022 
 12091              	.LASF1305:
 12092 10bf 75785363 		.ascii	"uxSchedulerSuspended\000"
 12092      68656475 
 12092      6C657253 
 12092      75737065 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 291


 12092      6E646564 
 12093              	.LASF112:
 12094 10d4 5F5F5549 		.ascii	"__UINT_FAST8_MAX__ 0xffffffffU\000"
 12094      4E545F46 
 12094      41535438 
 12094      5F4D4158 
 12094      5F5F2030 
 12095              	.LASF170:
 12096 10f3 5F5F4445 		.ascii	"__DEC32_EPSILON__ 1E-6DF\000"
 12096      4333325F 
 12096      45505349 
 12096      4C4F4E5F 
 12096      5F203145 
 12097              	.LASF591:
 12098 110c 5F5F6861 		.ascii	"__has_extension __has_feature\000"
 12098      735F6578 
 12098      74656E73 
 12098      696F6E20 
 12098      5F5F6861 
 12099              	.LASF467:
 12100 112a 4E554C4C 		.ascii	"NULL\000"
 12100      00
 12101              	.LASF541:
 12102 112f 5F524545 		.ascii	"_REENT_CHECK_MP(ptr) \000"
 12102      4E545F43 
 12102      4845434B 
 12102      5F4D5028 
 12102      70747229 
 12103              	.LASF247:
 12104 1145 5F5F4C41 		.ascii	"__LACCUM_IBIT__ 32\000"
 12104      4343554D 
 12104      5F494249 
 12104      545F5F20 
 12104      333200
 12105              	.LASF442:
 12106 1158 5F53495A 		.ascii	"_SIZE_T_DEFINED \000"
 12106      455F545F 
 12106      44454649 
 12106      4E454420 
 12106      00
 12107              	.LASF1119:
 12108 1169 5F5F7569 		.ascii	"__uint8_t\000"
 12108      6E74385F 
 12108      7400
 12109              	.LASF287:
 12110 1173 5F5F4841 		.ascii	"__HA_IBIT__ 8\000"
 12110      5F494249 
 12110      545F5F20 
 12110      3800
 12111              	.LASF358:
 12112 1181 5F5F4E45 		.ascii	"__NEWLIB_H__ 1\000"
 12112      574C4942 
 12112      5F485F5F 
 12112      203100
 12113              	.LASF1175:
 12114 1190 75784261 		.ascii	"uxBasePriority\000"
 12114      73655072 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 292


 12114      696F7269 
 12114      747900
 12115              	.LASF344:
 12116 119f 5F5F5646 		.ascii	"__VFP_FP__ 1\000"
 12116      505F4650 
 12116      5F5F2031 
 12116      00
 12117              	.LASF741:
 12118 11ac 5F5F4C45 		.ascii	"__LEAST32 \"l\"\000"
 12118      41535433 
 12118      3220226C 
 12118      2200
 12119              	.LASF218:
 12120 11ba 5F5F4C4C 		.ascii	"__LLFRACT_MIN__ (-0.5LLR-0.5LLR)\000"
 12120      46524143 
 12120      545F4D49 
 12120      4E5F5F20 
 12120      282D302E 
 12121              	.LASF1188:
 12122 11db 74736B54 		.ascii	"tskTCB\000"
 12122      434200
 12123              	.LASF398:
 12124 11e2 5F5F5241 		.ascii	"__RAND_MAX\000"
 12124      4E445F4D 
 12124      415800
 12125              	.LASF1020:
 12126 11ed 6D74434F 		.ascii	"mtCOVERAGE_TEST_MARKER() \000"
 12126      56455241 
 12126      47455F54 
 12126      4553545F 
 12126      4D41524B 
 12127              	.LASF113:
 12128 1207 5F5F5549 		.ascii	"__UINT_FAST16_MAX__ 0xffffffffU\000"
 12128      4E545F46 
 12128      41535431 
 12128      365F4D41 
 12128      585F5F20 
 12129              	.LASF790:
 12130 1227 494E545F 		.ascii	"INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)\000"
 12130      4C454153 
 12130      5436345F 
 12130      4D494E20 
 12130      282D5F5F 
 12131              	.LASF428:
 12132 1252 5F4E4F49 		.ascii	"_NOINLINE_STATIC _NOINLINE static\000"
 12132      4E4C494E 
 12132      455F5354 
 12132      41544943 
 12132      205F4E4F 
 12133              	.LASF116:
 12134 1274 5F5F494E 		.ascii	"__INTPTR_MAX__ 0x7fffffff\000"
 12134      54505452 
 12134      5F4D4158 
 12134      5F5F2030 
 12134      78376666 
 12135              	.LASF1069:
 12136 128e 7461736B 		.ascii	"taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 293


 12136      454E4142 
 12136      4C455F49 
 12136      4E544552 
 12136      52555054 
 12137              	.LASF602:
 12138 12be 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_CONSTANT_P 1\000"
 12138      55434C49 
 12138      4B455F42 
 12138      55494C54 
 12138      494E5F43 
 12139              	.LASF1174:
 12140 12de 75784375 		.ascii	"uxCurrentPriority\000"
 12140      7272656E 
 12140      74507269 
 12140      6F726974 
 12140      7900
 12141              	.LASF378:
 12142 12f0 5F5F474E 		.ascii	"__GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_M"
 12142      55435F50 
 12142      52455245 
 12142      51286D61 
 12142      6A2C6D69 
 12143 1323 494E4F52 		.ascii	"INOR__ >= ((maj) << 16) + (min))\000"
 12143      5F5F203E 
 12143      3D202828 
 12143      6D616A29 
 12143      203C3C20 
 12144              	.LASF203:
 12145 1344 5F5F5546 		.ascii	"__UFRACT_MIN__ 0.0UR\000"
 12145      52414354 
 12145      5F4D494E 
 12145      5F5F2030 
 12145      2E305552 
 12146              	.LASF964:
 12147 1359 74726163 		.ascii	"traceQUEUE_PEEK(pxQueue) \000"
 12147      65515545 
 12147      55455F50 
 12147      45454B28 
 12147      70785175 
 12148              	.LASF1057:
 12149 1373 6C697374 		.ascii	"listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( Base"
 12149      49535F43 
 12149      4F4E5441 
 12149      494E4544 
 12149      5F574954 
 12150 13a6 545F7420 		.ascii	"T_t ) ( ( pxListItem )->pvContainer == ( void * ) ("
 12150      29202820 
 12150      28207078 
 12150      4C697374 
 12150      4974656D 
 12151 13d9 2070784C 		.ascii	" pxList ) ) )\000"
 12151      69737420 
 12151      29202920 
 12151      2900
 12152              	.LASF537:
 12153 13e7 5F4E5F4C 		.ascii	"_N_LISTS 30\000"
 12153      49535453 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 294


 12153      20333000 
 12154              	.LASF756:
 12155 13f3 5F494E54 		.ascii	"_INTPTR_T_DECLARED \000"
 12155      5054525F 
 12155      545F4445 
 12155      434C4152 
 12155      45442000 
 12156              	.LASF411:
 12157 1407 5F434F4E 		.ascii	"_CONST const\000"
 12157      53542063 
 12157      6F6E7374 
 12157      00
 12158              	.LASF1046:
 12159 1414 6C697374 		.ascii	"listGET_LIST_ITEM_OWNER(pxListItem) ( ( pxListItem "
 12159      4745545F 
 12159      4C495354 
 12159      5F495445 
 12159      4D5F4F57 
 12160 1447 292D3E70 		.ascii	")->pvOwner )\000"
 12160      764F776E 
 12160      65722029 
 12160      00
 12161              	.LASF799:
 12162 1454 494E545F 		.ascii	"INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)\000"
 12162      46415354 
 12162      33325F4D 
 12162      494E2028 
 12162      2D5F5F49 
 12163              	.LASF435:
 12164 147d 5F535953 		.ascii	"_SYS_SIZE_T_H \000"
 12164      5F53495A 
 12164      455F545F 
 12164      482000
 12165              	.LASF549:
 12166 148c 5F524545 		.ascii	"_REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._s"
 12166      4E545F52 
 12166      414E4434 
 12166      385F5345 
 12166      45442870 
 12167 14bf 65656429 		.ascii	"eed)\000"
 12167      00
 12168              	.LASF50:
 12169 14c4 5F5F5549 		.ascii	"__UINT_LEAST8_TYPE__ unsigned char\000"
 12169      4E545F4C 
 12169      45415354 
 12169      385F5459 
 12169      50455F5F 
 12170              	.LASF388:
 12171 14e7 5F5F4154 		.ascii	"__ATFILE_VISIBLE 1\000"
 12171      46494C45 
 12171      5F564953 
 12171      49424C45 
 12171      203100
 12172              	.LASF236:
 12173 14fa 5F5F4143 		.ascii	"__ACCUM_FBIT__ 15\000"
 12173      43554D5F 
 12173      46424954 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 295


 12173      5F5F2031 
 12173      3500
 12174              	.LASF883:
 12175 150c 706F7274 		.ascii	"portCHAR char\000"
 12175      43484152 
 12175      20636861 
 12175      7200
 12176              	.LASF242:
 12177 151a 5F5F5541 		.ascii	"__UACCUM_IBIT__ 16\000"
 12177      4343554D 
 12177      5F494249 
 12177      545F5F20 
 12177      313600
 12178              	.LASF1133:
 12179 152d 5461736B 		.ascii	"TaskFunction_t\000"
 12179      46756E63 
 12179      74696F6E 
 12179      5F7400
 12180              	.LASF1064:
 12181 153c 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( UBaseT_t ) 0U )\000"
 12181      444C455F 
 12181      5052494F 
 12181      52495459 
 12181      20282028 
 12182              	.LASF1312:
 12183 1561 70784375 		.ascii	"pxCurrentTCB\000"
 12183      7272656E 
 12183      74544342 
 12183      00
 12184              	.LASF111:
 12185 156e 5F5F494E 		.ascii	"__INT_FAST64_MAX__ 0x7fffffffffffffffLL\000"
 12185      545F4641 
 12185      53543634 
 12185      5F4D4158 
 12185      5F5F2030 
 12186              	.LASF145:
 12187 1596 5F5F4442 		.ascii	"__DBL_MIN__ ((double)2.2250738585072014e-308L)\000"
 12187      4C5F4D49 
 12187      4E5F5F20 
 12187      2828646F 
 12187      75626C65 
 12188              	.LASF927:
 12189 15c5 636F6E66 		.ascii	"configUSE_TIMERS 0\000"
 12189      69675553 
 12189      455F5449 
 12189      4D455253 
 12189      203000
 12190              	.LASF988:
 12191 15d8 74726163 		.ascii	"traceMALLOC(pvAddress,uiSize) \000"
 12191      654D414C 
 12191      4C4F4328 
 12191      70764164 
 12191      64726573 
 12192              	.LASF494:
 12193 15f7 5F5F5F69 		.ascii	"___int_least16_t_defined 1\000"
 12193      6E745F6C 
 12193      65617374 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 296


 12193      31365F74 
 12193      5F646566 
 12194              	.LASF346:
 12195 1612 5F5F4152 		.ascii	"__ARM_ARCH_7M__ 1\000"
 12195      4D5F4152 
 12195      43485F37 
 12195      4D5F5F20 
 12195      3100
 12196              	.LASF180:
 12197 1624 5F5F4445 		.ascii	"__DEC128_MIN_EXP__ (-6142)\000"
 12197      43313238 
 12197      5F4D494E 
 12197      5F455850 
 12197      5F5F2028 
 12198              	.LASF1082:
 12199 163f 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD ( ( BaseT_t ) 4 )\000"
 12199      4F4D4D41 
 12199      4E445F43 
 12199      48414E47 
 12199      455F5045 
 12200              	.LASF54:
 12201 166a 5F5F494E 		.ascii	"__INT_FAST8_TYPE__ int\000"
 12201      545F4641 
 12201      5354385F 
 12201      54595045 
 12201      5F5F2069 
 12202              	.LASF427:
 12203 1681 5F4E4F49 		.ascii	"_NOINLINE __attribute__ ((__noinline__))\000"
 12203      4E4C494E 
 12203      45205F5F 
 12203      61747472 
 12203      69627574 
 12204              	.LASF298:
 12205 16aa 5F5F5544 		.ascii	"__UDA_FBIT__ 32\000"
 12205      415F4642 
 12205      49545F5F 
 12205      20333200 
 12206              	.LASF432:
 12207 16ba 5F5F7369 		.ascii	"__size_t__ \000"
 12207      7A655F74 
 12207      5F5F2000 
 12208              	.LASF1176:
 12209 16c6 756C5275 		.ascii	"ulRunTimeCounter\000"
 12209      6E54696D 
 12209      65436F75 
 12209      6E746572 
 12209      00
 12210              	.LASF953:
 12211 16d7 74726163 		.ascii	"traceCREATE_MUTEX(pxNewQueue) \000"
 12211      65435245 
 12211      4154455F 
 12211      4D555445 
 12211      58287078 
 12212              	.LASF81:
 12213 16f6 5F5F5549 		.ascii	"__UINTMAX_C(c) c ## ULL\000"
 12213      4E544D41 
 12213      585F4328 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 297


 12213      63292063 
 12213      20232320 
 12214              	.LASF28:
 12215 170e 5F5F5349 		.ascii	"__SIZEOF_POINTER__ 4\000"
 12215      5A454F46 
 12215      5F504F49 
 12215      4E544552 
 12215      5F5F2034 
 12216              	.LASF46:
 12217 1723 5F5F494E 		.ascii	"__INT_LEAST8_TYPE__ signed char\000"
 12217      545F4C45 
 12217      41535438 
 12217      5F545950 
 12217      455F5F20 
 12218              	.LASF310:
 12219 1743 5F5F4743 		.ascii	"__GCC_ATOMIC_BOOL_LOCK_FREE 2\000"
 12219      435F4154 
 12219      4F4D4943 
 12219      5F424F4F 
 12219      4C5F4C4F 
 12220              	.LASF1230:
 12221 1761 78546173 		.ascii	"xTaskGetTickCount\000"
 12221      6B476574 
 12221      5469636B 
 12221      436F756E 
 12221      7400
 12222              	.LASF768:
 12223 1773 55494E54 		.ascii	"UINTPTR_MAX (__UINTPTR_MAX__)\000"
 12223      5054525F 
 12223      4D415820 
 12223      285F5F55 
 12223      494E5450 
 12224              	.LASF1226:
 12225 1791 76546173 		.ascii	"vTaskStartScheduler\000"
 12225      6B537461 
 12225      72745363 
 12225      68656475 
 12225      6C657200 
 12226              	.LASF709:
 12227 17a5 5F535953 		.ascii	"_SYS__LOCALE_H \000"
 12227      5F5F4C4F 
 12227      43414C45 
 12227      5F482000 
 12228              	.LASF345:
 12229 17b5 5F5F5448 		.ascii	"__THUMB_INTERWORK__ 1\000"
 12229      554D425F 
 12229      494E5445 
 12229      52574F52 
 12229      4B5F5F20 
 12230              	.LASF224:
 12231 17cb 5F5F554C 		.ascii	"__ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR\000"
 12231      4C465241 
 12231      43545F4D 
 12231      41585F5F 
 12231      20305846 
 12232              	.LASF1066:
 12233 17f7 7461736B 		.ascii	"taskENTER_CRITICAL() portENTER_CRITICAL()\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 298


 12233      454E5445 
 12233      525F4352 
 12233      49544943 
 12233      414C2829 
 12234              	.LASF1123:
 12235 1821 73686F72 		.ascii	"short unsigned int\000"
 12235      7420756E 
 12235      7369676E 
 12235      65642069 
 12235      6E7400
 12236              	.LASF1023:
 12237 1834 65546173 		.ascii	"eTaskStateGet eTaskGetState\000"
 12237      6B537461 
 12237      74654765 
 12237      74206554 
 12237      61736B47 
 12238              	.LASF1105:
 12239 1850 74736B42 		.ascii	"tskBLOCKED_CHAR ( 'B' )\000"
 12239      4C4F434B 
 12239      45445F43 
 12239      48415220 
 12239      28202742 
 12240              	.LASF153:
 12241 1868 5F5F4C44 		.ascii	"__LDBL_MIN_EXP__ (-1021)\000"
 12241      424C5F4D 
 12241      494E5F45 
 12241      58505F5F 
 12241      20282D31 
 12242              	.LASF444:
 12243 1881 5F53495A 		.ascii	"_SIZE_T_DECLARED \000"
 12243      455F545F 
 12243      4445434C 
 12243      41524544 
 12243      2000
 12244              	.LASF724:
 12245 1893 63686172 		.ascii	"char +0\000"
 12245      202B3000 
 12246              	.LASF36:
 12247 189b 5F5F4348 		.ascii	"__CHAR32_TYPE__ long unsigned int\000"
 12247      41523332 
 12247      5F545950 
 12247      455F5F20 
 12247      6C6F6E67 
 12248              	.LASF165:
 12249 18bd 5F5F4445 		.ascii	"__DEC32_MANT_DIG__ 7\000"
 12249      4333325F 
 12249      4D414E54 
 12249      5F444947 
 12249      5F5F2037 
 12250              	.LASF659:
 12251 18d2 5F5F7261 		.ascii	"__rangeof(type,start,end) (__offsetof(type, end) - "
 12251      6E67656F 
 12251      66287479 
 12251      70652C73 
 12251      74617274 
 12252 1905 5F5F6F66 		.ascii	"__offsetof(type, start))\000"
 12252      66736574 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 299


 12252      6F662874 
 12252      7970652C 
 12252      20737461 
 12253              	.LASF385:
 12254 191e 5F504F53 		.ascii	"_POSIX_C_SOURCE 200809L\000"
 12254      49585F43 
 12254      5F534F55 
 12254      52434520 
 12254      32303038 
 12255              	.LASF617:
 12256 1936 5F5F4343 		.ascii	"__CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1\000"
 12256      5F535550 
 12256      504F5254 
 12256      535F4459 
 12256      4E414D49 
 12257              	.LASF114:
 12258 1959 5F5F5549 		.ascii	"__UINT_FAST32_MAX__ 0xffffffffU\000"
 12258      4E545F46 
 12258      41535433 
 12258      325F4D41 
 12258      585F5F20 
 12259              	.LASF127:
 12260 1979 5F5F464C 		.ascii	"__FLT_MAX_EXP__ 128\000"
 12260      545F4D41 
 12260      585F4558 
 12260      505F5F20 
 12260      31323800 
 12261              	.LASF14:
 12262 198d 5F5F5349 		.ascii	"__SIZEOF_LONG__ 4\000"
 12262      5A454F46 
 12262      5F4C4F4E 
 12262      475F5F20 
 12262      3400
 12263              	.LASF618:
 12264 199f 5F5F5028 		.ascii	"__P(protos) protos\000"
 12264      70726F74 
 12264      6F732920 
 12264      70726F74 
 12264      6F7300
 12265              	.LASF791:
 12266 19b2 494E545F 		.ascii	"INT_LEAST64_MAX (__INT_LEAST64_MAX__)\000"
 12266      4C454153 
 12266      5436345F 
 12266      4D415820 
 12266      285F5F49 
 12267              	.LASF424:
 12268 19d8 5F504152 		.ascii	"_PARAMS(paramlist) paramlist\000"
 12268      414D5328 
 12268      70617261 
 12268      6D6C6973 
 12268      74292070 
 12269              	.LASF664:
 12270 19f5 5F5F7374 		.ascii	"__strfmonlike(fmtarg,firstvararg) __attribute__((__"
 12270      72666D6F 
 12270      6E6C696B 
 12270      6528666D 
 12270      74617267 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 300


 12271 1a28 666F726D 		.ascii	"format__ (__strfmon__, fmtarg, firstvararg)))\000"
 12271      61745F5F 
 12271      20285F5F 
 12271      73747266 
 12271      6D6F6E5F 
 12272              	.LASF1256:
 12273 1a56 70785469 		.ascii	"pxTicksToWait\000"
 12273      636B7354 
 12273      6F576169 
 12273      7400
 12274              	.LASF983:
 12275 1a64 74726163 		.ascii	"traceTIMER_CREATE(pxNewTimer) \000"
 12275      6554494D 
 12275      45525F43 
 12275      52454154 
 12275      45287078 
 12276              	.LASF18:
 12277 1a83 5F5F5349 		.ascii	"__SIZEOF_DOUBLE__ 8\000"
 12277      5A454F46 
 12277      5F444F55 
 12277      424C455F 
 12277      5F203800 
 12278              	.LASF517:
 12279 1a97 5F434C4F 		.ascii	"_CLOCK_T_ unsigned long\000"
 12279      434B5F54 
 12279      5F20756E 
 12279      7369676E 
 12279      6564206C 
 12280              	.LASF1014:
 12281 1aaf 636F6E66 		.ascii	"configUSE_QUEUE_SETS 0\000"
 12281      69675553 
 12281      455F5155 
 12281      4555455F 
 12281      53455453 
 12282              	.LASF1191:
 12283 1ac6 70634E61 		.ascii	"pcName\000"
 12283      6D6500
 12284              	.LASF1107:
 12285 1acd 74736B44 		.ascii	"tskDELETED_CHAR ( 'D' )\000"
 12285      454C4554 
 12285      45445F43 
 12285      48415220 
 12285      28202744 
 12286              	.LASF918:
 12287 1ae5 50524956 		.ascii	"PRIVILEGED_DATA \000"
 12287      494C4547 
 12287      45445F44 
 12287      41544120 
 12287      00
 12288              	.LASF958:
 12289 1af6 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 12289      6554414B 
 12289      455F4D55 
 12289      5445585F 
 12289      52454355 
 12290              	.LASF736:
 12291 1b21 5F5F4641 		.ascii	"__FAST16 \000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 301


 12291      53543136 
 12291      2000
 12292              	.LASF108:
 12293 1b2b 5F5F494E 		.ascii	"__INT_FAST8_MAX__ 0x7fffffff\000"
 12293      545F4641 
 12293      5354385F 
 12293      4D41585F 
 12293      5F203078 
 12294              	.LASF789:
 12295 1b48 55494E54 		.ascii	"UINT64_MAX (__UINT64_MAX__)\000"
 12295      36345F4D 
 12295      41582028 
 12295      5F5F5549 
 12295      4E543634 
 12296              	.LASF392:
 12297 1b64 5F5F4C41 		.ascii	"__LARGEFILE_VISIBLE 0\000"
 12297      52474546 
 12297      494C455F 
 12297      56495349 
 12297      424C4520 
 12298              	.LASF176:
 12299 1b7a 5F5F4445 		.ascii	"__DEC64_MAX__ 9.999999999999999E384DD\000"
 12299      4336345F 
 12299      4D41585F 
 12299      5F20392E 
 12299      39393939 
 12300              	.LASF361:
 12301 1ba0 5F5F4E45 		.ascii	"__NEWLIB__ 2\000"
 12301      574C4942 
 12301      5F5F2032 
 12301      00
 12302              	.LASF880:
 12303 1bad 65727251 		.ascii	"errQUEUE_YIELD ( -5 )\000"
 12303      55455545 
 12303      5F594945 
 12303      4C442028 
 12303      202D3520 
 12304              	.LASF676:
 12305 1bc3 5F5F5343 		.ascii	"__SCCSID(s) struct __hack\000"
 12305      43534944 
 12305      28732920 
 12305      73747275 
 12305      6374205F 
 12306              	.LASF300:
 12307 1bdd 5F5F5554 		.ascii	"__UTA_FBIT__ 64\000"
 12307      415F4642 
 12307      49545F5F 
 12307      20363400 
 12308              	.LASF391:
 12309 1bed 5F5F4953 		.ascii	"__ISO_C_VISIBLE 1999\000"
 12309      4F5F435F 
 12309      56495349 
 12309      424C4520 
 12309      31393939 
 12310              	.LASF129:
 12311 1c02 5F5F464C 		.ascii	"__FLT_DECIMAL_DIG__ 9\000"
 12311      545F4445 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 302


 12311      43494D41 
 12311      4C5F4449 
 12311      475F5F20 
 12312              	.LASF935:
 12313 1c18 706F7274 		.ascii	"portCLEAN_UP_TCB(pxTCB) ( void ) pxTCB\000"
 12313      434C4541 
 12313      4E5F5550 
 12313      5F544342 
 12313      28707854 
 12314              	.LASF1296:
 12315 1c3f 78537573 		.ascii	"xSuspendedTaskList\000"
 12315      70656E64 
 12315      65645461 
 12315      736B4C69 
 12315      737400
 12316              	.LASF979:
 12317 1c52 74726163 		.ascii	"traceTASK_SUSPEND(pxTaskToSuspend) \000"
 12317      65544153 
 12317      4B5F5355 
 12317      5350454E 
 12317      44287078 
 12318              	.LASF45:
 12319 1c76 5F5F5549 		.ascii	"__UINT64_TYPE__ long long unsigned int\000"
 12319      4E543634 
 12319      5F545950 
 12319      455F5F20 
 12319      6C6F6E67 
 12320              	.LASF1157:
 12321 1c9d 65537573 		.ascii	"eSuspended\000"
 12321      70656E64 
 12321      656400
 12322              	.LASF1130:
 12323 1ca8 75696E74 		.ascii	"uint8_t\000"
 12323      385F7400 
 12324              	.LASF806:
 12325 1cb0 494E544D 		.ascii	"INTMAX_MIN (-INTMAX_MAX - 1)\000"
 12325      41585F4D 
 12325      494E2028 
 12325      2D494E54 
 12325      4D41585F 
 12326              	.LASF1049:
 12327 1ccd 6C697374 		.ascii	"listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList) ( ( ( pxLi"
 12327      4745545F 
 12327      4954454D 
 12327      5F56414C 
 12327      55455F4F 
 12328 1d00 73742029 		.ascii	"st )->xListEnd ).pxNext->xItemValue )\000"
 12328      2D3E784C 
 12328      69737445 
 12328      6E642029 
 12328      2E70784E 
 12329              	.LASF1258:
 12330 1d26 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 12330      736B4765 
 12330      74546173 
 12330      6B4E756D 
 12330      62657200 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 303


 12331              	.LASF582:
 12332 1d3a 5F5F7074 		.ascii	"__ptr_t void *\000"
 12332      725F7420 
 12332      766F6964 
 12332      202A00
 12333              	.LASF369:
 12334 1d49 5F484156 		.ascii	"_HAVE_LONG_DOUBLE 1\000"
 12334      455F4C4F 
 12334      4E475F44 
 12334      4F55424C 
 12334      45203100 
 12335              	.LASF1272:
 12336 1d5d 70784E65 		.ascii	"pxNextTCB\000"
 12336      78745443 
 12336      4200
 12337              	.LASF644:
 12338 1d67 5F5F616C 		.ascii	"__always_inline __attribute__((__always_inline__))\000"
 12338      77617973 
 12338      5F696E6C 
 12338      696E6520 
 12338      5F5F6174 
 12339              	.LASF196:
 12340 1d9a 5F5F4652 		.ascii	"__FRACT_FBIT__ 15\000"
 12340      4143545F 
 12340      46424954 
 12340      5F5F2031 
 12340      3500
 12341              	.LASF834:
 12342 1dac 636F6E66 		.ascii	"configTICK_RATE_HZ ( ( portTickType ) 1200 )\000"
 12342      69675449 
 12342      434B5F52 
 12342      4154455F 
 12342      485A2028 
 12343              	.LASF260:
 12344 1dd9 5F5F4C4C 		.ascii	"__LLACCUM_EPSILON__ 0x1P-31LLK\000"
 12344      41434355 
 12344      4D5F4550 
 12344      53494C4F 
 12344      4E5F5F20 
 12345              	.LASF4:
 12346 1df8 5F5F474E 		.ascii	"__GNUC_PATCHLEVEL__ 1\000"
 12346      55435F50 
 12346      41544348 
 12346      4C455645 
 12346      4C5F5F20 
 12347              	.LASF313:
 12348 1e0e 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR32_T_LOCK_FREE 2\000"
 12348      435F4154 
 12348      4F4D4943 
 12348      5F434841 
 12348      5233325F 
 12349              	.LASF635:
 12350 1e30 5F5F616C 		.ascii	"__alloc_align(x) __attribute__((__alloc_align__(x))"
 12350      6C6F635F 
 12350      616C6967 
 12350      6E287829 
 12350      205F5F61 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 304


 12351 1e63 2900     		.ascii	")\000"
 12352              	.LASF529:
 12353 1e65 5F52414E 		.ascii	"_RAND48_SEED_2 (0x1234)\000"
 12353      4434385F 
 12353      53454544 
 12353      5F322028 
 12353      30783132 
 12354              	.LASF1012:
 12355 1e7d 636F6E66 		.ascii	"configPRE_SLEEP_PROCESSING(x) \000"
 12355      69675052 
 12355      455F534C 
 12355      4545505F 
 12355      50524F43 
 12356              	.LASF991:
 12357 1e9c 74726163 		.ascii	"traceEVENT_GROUP_CREATE_FAILED() \000"
 12357      65455645 
 12357      4E545F47 
 12357      524F5550 
 12357      5F435245 
 12358              	.LASF887:
 12359 1ebe 706F7274 		.ascii	"portSHORT short\000"
 12359      53484F52 
 12359      54207368 
 12359      6F727400 
 12360              	.LASF553:
 12361 1ece 5F524545 		.ascii	"_REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)\000"
 12361      4E545F4D 
 12361      505F5245 
 12361      53554C54 
 12361      5F4B2870 
 12362              	.LASF957:
 12363 1ef9 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE(pxMutex) \000"
 12363      6554414B 
 12363      455F4D55 
 12363      5445585F 
 12363      52454355 
 12364              	.LASF420:
 12365 1f1d 5F444546 		.ascii	"_DEFUN(name,arglist,args) name(args)\000"
 12365      554E286E 
 12365      616D652C 
 12365      6172676C 
 12365      6973742C 
 12366              	.LASF653:
 12367 1f42 5F5F7072 		.ascii	"__predict_true(exp) __builtin_expect((exp), 1)\000"
 12367      65646963 
 12367      745F7472 
 12367      75652865 
 12367      78702920 
 12368              	.LASF1019:
 12369 1f71 636F6E66 		.ascii	"configUSE_STATS_FORMATTING_FUNCTIONS 0\000"
 12369      69675553 
 12369      455F5354 
 12369      4154535F 
 12369      464F524D 
 12370              	.LASF256:
 12371 1f98 5F5F4C4C 		.ascii	"__LLACCUM_FBIT__ 31\000"
 12371      41434355 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 305


 12371      4D5F4642 
 12371      49545F5F 
 12371      20333100 
 12372              	.LASF567:
 12373 1fac 5F524545 		.ascii	"_REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wc"
 12373      4E545F57 
 12373      43535254 
 12373      4F4D4253 
 12373      5F535441 
 12374 1fdf 7372746F 		.ascii	"srtombs_state)\000"
 12374      6D62735F 
 12374      73746174 
 12374      652900
 12375              	.LASF124:
 12376 1fee 5F5F464C 		.ascii	"__FLT_DIG__ 6\000"
 12376      545F4449 
 12376      475F5F20 
 12376      3600
 12377              	.LASF837:
 12378 1ffc 636F6E66 		.ascii	"configMAX_TASK_NAME_LEN ( 12 )\000"
 12378      69674D41 
 12378      585F5441 
 12378      534B5F4E 
 12378      414D455F 
 12379              	.LASF959:
 12380 201b 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE() \000"
 12380      65435245 
 12380      4154455F 
 12380      434F554E 
 12380      54494E47 
 12381              	.LASF586:
 12382 203d 5F5F6174 		.ascii	"__attribute_format_strfmon__(a,b) \000"
 12382      74726962 
 12382      7574655F 
 12382      666F726D 
 12382      61745F73 
 12383              	.LASF443:
 12384 2060 5F425344 		.ascii	"_BSD_SIZE_T_DEFINED_ \000"
 12384      5F53495A 
 12384      455F545F 
 12384      44454649 
 12384      4E45445F 
 12385              	.LASF491:
 12386 2076 5F5F5F69 		.ascii	"___int32_t_defined 1\000"
 12386      6E743332 
 12386      5F745F64 
 12386      6566696E 
 12386      65642031 
 12387              	.LASF60:
 12388 208b 5F5F5549 		.ascii	"__UINT_FAST32_TYPE__ unsigned int\000"
 12388      4E545F46 
 12388      41535433 
 12388      325F5459 
 12388      50455F5F 
 12389              	.LASF1261:
 12390 20ad 70727649 		.ascii	"prvIdleTask\000"
 12390      646C6554 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 306


 12390      61736B00 
 12391              	.LASF1303:
 12392 20b9 784E756D 		.ascii	"xNumOfOverflows\000"
 12392      4F664F76 
 12392      6572666C 
 12392      6F777300 
 12393              	.LASF17:
 12394 20c9 5F5F5349 		.ascii	"__SIZEOF_FLOAT__ 4\000"
 12394      5A454F46 
 12394      5F464C4F 
 12394      41545F5F 
 12394      203400
 12395              	.LASF227:
 12396 20dc 5F5F5341 		.ascii	"__SACCUM_IBIT__ 8\000"
 12396      4343554D 
 12396      5F494249 
 12396      545F5F20 
 12396      3800
 12397              	.LASF609:
 12398 20ee 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_RELOPS \000"
 12398      55434C49 
 12398      4B455F4D 
 12398      4154485F 
 12398      4255494C 
 12399              	.LASF128:
 12400 210e 5F5F464C 		.ascii	"__FLT_MAX_10_EXP__ 38\000"
 12400      545F4D41 
 12400      585F3130 
 12400      5F455850 
 12400      5F5F2033 
 12401              	.LASF1197:
 12402 2124 78526574 		.ascii	"xReturn\000"
 12402      75726E00 
 12403              	.LASF183:
 12404 212c 5F5F4445 		.ascii	"__DEC128_MAX__ 9.999999999999999999999999999999999E"
 12404      43313238 
 12404      5F4D4158 
 12404      5F5F2039 
 12404      2E393939 
 12405 215f 36313434 		.ascii	"6144DL\000"
 12405      444C00
 12406              	.LASF199:
 12407 2166 5F5F4652 		.ascii	"__FRACT_MAX__ 0X7FFFP-15R\000"
 12407      4143545F 
 12407      4D41585F 
 12407      5F203058 
 12407      37464646 
 12408              	.LASF118:
 12409 2180 5F5F4743 		.ascii	"__GCC_IEC_559 0\000"
 12409      435F4945 
 12409      435F3535 
 12409      39203000 
 12410              	.LASF140:
 12411 2190 5F5F4442 		.ascii	"__DBL_MIN_10_EXP__ (-307)\000"
 12411      4C5F4D49 
 12411      4E5F3130 
 12411      5F455850 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 307


 12411      5F5F2028 
 12412              	.LASF955:
 12413 21aa 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE(pxMutex) \000"
 12413      65474956 
 12413      455F4D55 
 12413      5445585F 
 12413      52454355 
 12414              	.LASF1094:
 12415 21ce 7854696D 		.ascii	"xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken"
 12415      65725374 
 12415      61727446 
 12415      726F6D49 
 12415      53522878 
 12416 2201 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STAR"
 12416      696D6572 
 12416      47656E65 
 12416      72696343 
 12416      6F6D6D61 
 12417 2234 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 12417      4F4D5F49 
 12417      53522C20 
 12417      28207854 
 12417      61736B47 
 12418 2267 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 12418      72696F72 
 12418      69747954 
 12418      61736B57 
 12418      6F6B656E 
 12419              	.LASF110:
 12420 2284 5F5F494E 		.ascii	"__INT_FAST32_MAX__ 0x7fffffff\000"
 12420      545F4641 
 12420      53543332 
 12420      5F4D4158 
 12420      5F5F2030 
 12421              	.LASF7:
 12422 22a2 5F5F4154 		.ascii	"__ATOMIC_SEQ_CST 5\000"
 12422      4F4D4943 
 12422      5F534551 
 12422      5F435354 
 12422      203500
 12423              	.LASF402:
 12424 22b5 5F524541 		.ascii	"_READ_WRITE_RETURN_TYPE int\000"
 12424      445F5752 
 12424      4954455F 
 12424      52455455 
 12424      524E5F54 
 12425              	.LASF1037:
 12426 22d1 706F7274 		.ascii	"portTICK_RATE_MS portTICK_PERIOD_MS\000"
 12426      5449434B 
 12426      5F524154 
 12426      455F4D53 
 12426      20706F72 
 12427              	.LASF1086:
 12428 22f5 746D7243 		.ascii	"tmrCOMMAND_RESET_FROM_ISR ( ( BaseT_t ) 7 )\000"
 12428      4F4D4D41 
 12428      4E445F52 
 12428      45534554 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 308


 12428      5F46524F 
 12429              	.LASF516:
 12430 2321 5F5F6E65 		.ascii	"__need_wint_t\000"
 12430      65645F77 
 12430      696E745F 
 12430      7400
 12431              	.LASF672:
 12432 232f 5F5F7379 		.ascii	"__sym_default(sym,impl,verid) __asm__(\".symver \" "
 12432      6D5F6465 
 12432      6661756C 
 12432      74287379 
 12432      6D2C696D 
 12433 2360 23696D70 		.ascii	"#impl \", \" #sym \"@@\" #verid)\000"
 12433      6C20222C 
 12433      20222023 
 12433      73796D20 
 12433      22404022 
 12434              	.LASF794:
 12435 237d 494E545F 		.ascii	"INT_FAST8_MAX (__INT_FAST8_MAX__)\000"
 12435      46415354 
 12435      385F4D41 
 12435      5820285F 
 12435      5F494E54 
 12436              	.LASF89:
 12437 239f 5F5F5549 		.ascii	"__UINT16_MAX__ 0xffff\000"
 12437      4E543136 
 12437      5F4D4158 
 12437      5F5F2030 
 12437      78666666 
 12438              	.LASF1280:
 12439 23b5 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 12439      65736574 
 12439      4E657874 
 12439      5461736B 
 12439      556E626C 
 12440              	.LASF274:
 12441 23d1 5F5F5451 		.ascii	"__TQ_FBIT__ 127\000"
 12441      5F464249 
 12441      545F5F20 
 12441      31323700 
 12442              	.LASF936:
 12443 23e1 706F7274 		.ascii	"portPRE_TASK_DELETE_HOOK(pvTaskToDelete,pxYieldPend"
 12443      5052455F 
 12443      5441534B 
 12443      5F44454C 
 12443      4554455F 
 12444 2414 696E6729 		.ascii	"ing) \000"
 12444      2000
 12445              	.LASF155:
 12446 241a 5F5F4C44 		.ascii	"__LDBL_MAX_EXP__ 1024\000"
 12446      424C5F4D 
 12446      41585F45 
 12446      58505F5F 
 12446      20313032 
 12447              	.LASF765:
 12448 2430 5F5F696E 		.ascii	"__int_fast64_t_defined 1\000"
 12448      745F6661 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 309


 12448      73743634 
 12448      5F745F64 
 12448      6566696E 
 12449              	.LASF636:
 12450 2449 5F416C69 		.ascii	"_Alignas(x) __aligned(x)\000"
 12450      676E6173 
 12450      28782920 
 12450      5F5F616C 
 12450      69676E65 
 12451              	.LASF1162:
 12452 2462 7854696D 		.ascii	"xTimeOnEntering\000"
 12452      654F6E45 
 12452      6E746572 
 12452      696E6700 
 12453              	.LASF1301:
 12454 2472 75785065 		.ascii	"uxPendedTicks\000"
 12454      6E646564 
 12454      5469636B 
 12454      7300
 12455              	.LASF885:
 12456 2480 706F7274 		.ascii	"portDOUBLE double\000"
 12456      444F5542 
 12456      4C452064 
 12456      6F75626C 
 12456      6500
 12457              	.LASF412:
 12458 2492 5F564F4C 		.ascii	"_VOLATILE volatile\000"
 12458      4154494C 
 12458      4520766F 
 12458      6C617469 
 12458      6C6500
 12459              	.LASF16:
 12460 24a5 5F5F5349 		.ascii	"__SIZEOF_SHORT__ 2\000"
 12460      5A454F46 
 12460      5F53484F 
 12460      52545F5F 
 12460      203200
 12461              	.LASF261:
 12462 24b8 5F5F554C 		.ascii	"__ULLACCUM_FBIT__ 32\000"
 12462      4C414343 
 12462      554D5F46 
 12462      4249545F 
 12462      5F203332 
 12463              	.LASF419:
 12464 24cd 5F455846 		.ascii	"_EXFNPTR(name,proto) (* name) proto\000"
 12464      4E505452 
 12464      286E616D 
 12464      652C7072 
 12464      6F746F29 
 12465              	.LASF947:
 12466 24f1 74726163 		.ascii	"traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,ux"
 12466      65544153 
 12466      4B5F5052 
 12466      494F5249 
 12466      54595F44 
 12467 2524 4F726967 		.ascii	"OriginalPriority) \000"
 12467      696E616C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 310


 12467      5072696F 
 12467      72697479 
 12467      292000
 12468              	.LASF678:
 12469 2537 5F5F4445 		.ascii	"__DECONST(type,var) ((type)(__uintptr_t)(const void"
 12469      434F4E53 
 12469      54287479 
 12469      70652C76 
 12469      61722920 
 12470 256a 202A2928 		.ascii	" *)(var))\000"
 12470      76617229 
 12470      2900
 12471              	.LASF131:
 12472 2574 5F5F464C 		.ascii	"__FLT_MIN__ 1.1754943508222875e-38F\000"
 12472      545F4D49 
 12472      4E5F5F20 
 12472      312E3137 
 12472      35343934 
 12473              	.LASF377:
 12474 2598 5F535953 		.ascii	"_SYS_FEATURES_H \000"
 12474      5F464541 
 12474      54555245 
 12474      535F4820 
 12474      00
 12475              	.LASF1150:
 12476 25a9 7078496E 		.ascii	"pxIndex\000"
 12476      64657800 
 12477              	.LASF1180:
 12478 25b1 7078546F 		.ascii	"pxTopOfStack\000"
 12478      704F6653 
 12478      7461636B 
 12478      00
 12479              	.LASF645:
 12480 25be 5F5F6E6F 		.ascii	"__noinline __attribute__ ((__noinline__))\000"
 12480      696E6C69 
 12480      6E65205F 
 12480      5F617474 
 12480      72696275 
 12481              	.LASF698:
 12482 25e8 5F4D4143 		.ascii	"_MACHSTDLIB_H_ \000"
 12482      48535444 
 12482      4C49425F 
 12482      485F2000 
 12483              	.LASF1073:
 12484 25f8 78546173 		.ascii	"xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParame"
 12484      6B437265 
 12484      61746528 
 12484      70765461 
 12484      736B436F 
 12485 262b 74657273 		.ascii	"ters,uxPriority,pxCreatedTask) xTaskGenericCreate( "
 12485      2C757850 
 12485      72696F72 
 12485      6974792C 
 12485      70784372 
 12486 265e 28207076 		.ascii	"( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvP"
 12486      5461736B 
 12486      436F6465 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 311


 12486      20292C20 
 12486      28207063 
 12487 2691 6172616D 		.ascii	"arameters ), ( uxPriority ), ( pxCreatedTask ), ( N"
 12487      65746572 
 12487      7320292C 
 12487      20282075 
 12487      78507269 
 12488 26c4 554C4C20 		.ascii	"ULL ), ( NULL ) )\000"
 12488      292C2028 
 12488      204E554C 
 12488      4C202920 
 12488      2900
 12489              	.LASF1013:
 12490 26d6 636F6E66 		.ascii	"configPOST_SLEEP_PROCESSING(x) \000"
 12490      6967504F 
 12490      53545F53 
 12490      4C454550 
 12490      5F50524F 
 12491              	.LASF1268:
 12492 26f6 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 12492      6C6C6F63 
 12492      61746554 
 12492      4342416E 
 12492      64537461 
 12493              	.LASF19:
 12494 270d 5F5F5349 		.ascii	"__SIZEOF_LONG_DOUBLE__ 8\000"
 12494      5A454F46 
 12494      5F4C4F4E 
 12494      475F444F 
 12494      55424C45 
 12495              	.LASF1300:
 12496 2726 78536368 		.ascii	"xSchedulerRunning\000"
 12496      6564756C 
 12496      65725275 
 12496      6E6E696E 
 12496      6700
 12497              	.LASF322:
 12498 2738 5F5F5052 		.ascii	"__PRAGMA_REDEFINE_EXTNAME 1\000"
 12498      41474D41 
 12498      5F524544 
 12498      4546494E 
 12498      455F4558 
 12499              	.LASF31:
 12500 2754 5F5F5743 		.ascii	"__WCHAR_TYPE__ unsigned int\000"
 12500      4841525F 
 12500      54595045 
 12500      5F5F2075 
 12500      6E736967 
 12501              	.LASF1031:
 12502 2770 784D656D 		.ascii	"xMemoryRegion MemoryRegion_t\000"
 12502      6F727952 
 12502      6567696F 
 12502      6E204D65 
 12502      6D6F7279 
 12503              	.LASF881:
 12504 278d 504F5254 		.ascii	"PORTABLE_H \000"
 12504      41424C45 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 312


 12504      5F482000 
 12505              	.LASF1249:
 12506 2799 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 12506      6B52656D 
 12506      6F766546 
 12506      726F6D45 
 12506      76656E74 
 12507              	.LASF297:
 12508 27b2 5F5F5553 		.ascii	"__USA_IBIT__ 16\000"
 12508      415F4942 
 12508      49545F5F 
 12508      20313600 
 12509              	.LASF308:
 12510 27c2 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1\000"
 12510      435F4841 
 12510      56455F53 
 12510      594E435F 
 12510      434F4D50 
 12511              	.LASF825:
 12512 27e7 494E544D 		.ascii	"INTMAX_C(x) __INTMAX_C(x)\000"
 12512      41585F43 
 12512      28782920 
 12512      5F5F494E 
 12512      544D4158 
 12513              	.LASF430:
 12514 2801 5F5F6E65 		.ascii	"__need_wchar_t \000"
 12514      65645F77 
 12514      63686172 
 12514      5F742000 
 12515              	.LASF657:
 12516 2811 5F5F6869 		.ascii	"__hidden __attribute__((__visibility__(\"hidden\"))"
 12516      6464656E 
 12516      205F5F61 
 12516      74747269 
 12516      62757465 
 12517 2842 2900     		.ascii	")\000"
 12518              	.LASF785:
 12519 2844 494E545F 		.ascii	"INT_LEAST32_MAX (__INT_LEAST32_MAX__)\000"
 12519      4C454153 
 12519      5433325F 
 12519      4D415820 
 12519      285F5F49 
 12520              	.LASF1090:
 12521 286a 7854696D 		.ascii	"xTimerStop(xTimer,xTicksToWait) xTimerGenericComman"
 12521      65725374 
 12521      6F702878 
 12521      54696D65 
 12521      722C7854 
 12522 289d 64282028 		.ascii	"d( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksT"
 12522      20785469 
 12522      6D657220 
 12522      292C2074 
 12522      6D72434F 
 12523 28d0 6F576169 		.ascii	"oWait ) )\000"
 12523      74202920 
 12523      2900
 12524              	.LASF924:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 313


 12525 28da 494E434C 		.ascii	"INCLUDE_pcTaskGetTaskName 0\000"
 12525      5544455F 
 12525      70635461 
 12525      736B4765 
 12525      74546173 
 12526              	.LASF1190:
 12527 28f6 70785461 		.ascii	"pxTaskCode\000"
 12527      736B436F 
 12527      646500
 12528              	.LASF61:
 12529 2901 5F5F5549 		.ascii	"__UINT_FAST64_TYPE__ long long unsigned int\000"
 12529      4E545F46 
 12529      41535436 
 12529      345F5459 
 12529      50455F5F 
 12530              	.LASF1146:
 12531 292d 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 12531      495F4C49 
 12531      53545F49 
 12531      54454D00 
 12532              	.LASF915:
 12533 293d 706F7274 		.ascii	"portNUM_CONFIGURABLE_REGIONS 1\000"
 12533      4E554D5F 
 12533      434F4E46 
 12533      49475552 
 12533      41424C45 
 12534              	.LASF564:
 12535 295c 5F524545 		.ascii	"_REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrt"
 12535      4E545F4D 
 12535      4252544F 
 12535      57435F53 
 12535      54415445 
 12536 298f 6F77635F 		.ascii	"owc_state)\000"
 12536      73746174 
 12536      652900
 12537              	.LASF515:
 12538 299a 5F57494E 		.ascii	"_WINT_T \000"
 12538      545F5420 
 12538      00
 12539              	.LASF831:
 12540 29a3 636F6E66 		.ascii	"configMAX_PRIORITIES ( 8 )\000"
 12540      69674D41 
 12540      585F5052 
 12540      494F5249 
 12540      54494553 
 12541              	.LASF773:
 12542 29be 494E545F 		.ascii	"INT_LEAST8_MAX (__INT_LEAST8_MAX__)\000"
 12542      4C454153 
 12542      54385F4D 
 12542      41582028 
 12542      5F5F494E 
 12543              	.LASF1241:
 12544 29e2 70785465 		.ascii	"pxTemp\000"
 12544      6D7000
 12545              	.LASF429:
 12546 29e9 5F5F6E65 		.ascii	"__need_size_t \000"
 12546      65645F73 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 314


 12546      697A655F 
 12546      742000
 12547              	.LASF286:
 12548 29f8 5F5F4841 		.ascii	"__HA_FBIT__ 7\000"
 12548      5F464249 
 12548      545F5F20 
 12548      3700
 12549              	.LASF130:
 12550 2a06 5F5F464C 		.ascii	"__FLT_MAX__ 3.4028234663852886e+38F\000"
 12550      545F4D41 
 12550      585F5F20 
 12550      332E3430 
 12550      32383233 
 12551              	.LASF318:
 12552 2a2a 5F5F4743 		.ascii	"__GCC_ATOMIC_LLONG_LOCK_FREE 1\000"
 12552      435F4154 
 12552      4F4D4943 
 12552      5F4C4C4F 
 12552      4E475F4C 
 12553              	.LASF810:
 12554 2a49 5349475F 		.ascii	"SIG_ATOMIC_MAX (__STDINT_EXP(INT_MAX))\000"
 12554      41544F4D 
 12554      49435F4D 
 12554      41582028 
 12554      5F5F5354 
 12555              	.LASF886:
 12556 2a70 706F7274 		.ascii	"portLONG long\000"
 12556      4C4F4E47 
 12556      206C6F6E 
 12556      6700
 12557              	.LASF801:
 12558 2a7e 55494E54 		.ascii	"UINT_FAST32_MAX (__UINT_FAST32_MAX__)\000"
 12558      5F464153 
 12558      5433325F 
 12558      4D415820 
 12558      285F5F55 
 12559              	.LASF507:
 12560 2aa4 5F5F6C6F 		.ascii	"__lock_try_acquire(lock) (_CAST_VOID 0)\000"
 12560      636B5F74 
 12560      72795F61 
 12560      63717569 
 12560      7265286C 
 12561              	.LASF989:
 12562 2acc 74726163 		.ascii	"traceFREE(pvAddress,uiSize) \000"
 12562      65465245 
 12562      45287076 
 12562      41646472 
 12562      6573732C 
 12563              	.LASF192:
 12564 2ae9 5F5F5553 		.ascii	"__USFRACT_IBIT__ 0\000"
 12564      46524143 
 12564      545F4942 
 12564      49545F5F 
 12564      203000
 12565              	.LASF1052:
 12566 2afc 6C697374 		.ascii	"listGET_END_MARKER(pxList) ( ( ListItem_t const * )"
 12566      4745545F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 315


 12566      454E445F 
 12566      4D41524B 
 12566      45522870 
 12567 2b2f 20282026 		.ascii	" ( &( ( pxList )->xListEnd ) ) )\000"
 12567      28202820 
 12567      70784C69 
 12567      73742029 
 12567      2D3E784C 
 12568              	.LASF1122:
 12569 2b50 5F5F7569 		.ascii	"__uint16_t\000"
 12569      6E743136 
 12569      5F7400
 12570              	.LASF626:
 12571 2b5b 5F5F7765 		.ascii	"__weak_symbol __attribute__((__weak__))\000"
 12571      616B5F73 
 12571      796D626F 
 12571      6C205F5F 
 12571      61747472 
 12572              	.LASF926:
 12573 2b83 494E434C 		.ascii	"INCLUDE_eTaskGetState 0\000"
 12573      5544455F 
 12573      65546173 
 12573      6B476574 
 12573      53746174 
 12574              	.LASF193:
 12575 2b9b 5F5F5553 		.ascii	"__USFRACT_MIN__ 0.0UHR\000"
 12575      46524143 
 12575      545F4D49 
 12575      4E5F5F20 
 12575      302E3055 
 12576              	.LASF630:
 12577 2bb2 5F5F7573 		.ascii	"__used __attribute__((__used__))\000"
 12577      6564205F 
 12577      5F617474 
 12577      72696275 
 12577      74655F5F 
 12578              	.LASF558:
 12579 2bd3 5F524545 		.ascii	"_REENT_EMERGENCY(ptr) ((ptr)->_emergency)\000"
 12579      4E545F45 
 12579      4D455247 
 12579      454E4359 
 12579      28707472 
 12580              	.LASF601:
 12581 2bfd 5F5F474E 		.ascii	"__GNUCLIKE_CTOR_SECTION_HANDLING 1\000"
 12581      55434C49 
 12581      4B455F43 
 12581      544F525F 
 12581      53454354 
 12582              	.LASF88:
 12583 2c20 5F5F5549 		.ascii	"__UINT8_MAX__ 0xff\000"
 12583      4E54385F 
 12583      4D41585F 
 12583      5F203078 
 12583      666600
 12584              	.LASF490:
 12585 2c33 5F5F5F69 		.ascii	"___int16_t_defined 1\000"
 12585      6E743136 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 316


 12585      5F745F64 
 12585      6566696E 
 12585      65642031 
 12586              	.LASF574:
 12587 2c48 5F524545 		.ascii	"_REENT _impure_ptr\000"
 12587      4E54205F 
 12587      696D7075 
 12587      72655F70 
 12587      747200
 12588              	.LASF1163:
 12589 2c5b 54696D65 		.ascii	"TimeOut_t\000"
 12589      4F75745F 
 12589      7400
 12590              	.LASF952:
 12591 2c65 74726163 		.ascii	"traceQUEUE_CREATE_FAILED(ucQueueType) \000"
 12591      65515545 
 12591      55455F43 
 12591      52454154 
 12591      455F4641 
 12592              	.LASF656:
 12593 2c8c 5F5F6578 		.ascii	"__exported __attribute__((__visibility__(\"default\""
 12593      706F7274 
 12593      6564205F 
 12593      5F617474 
 12593      72696275 
 12594 2cbe 29292900 		.ascii	")))\000"
 12595              	.LASF434:
 12596 2cc2 5F53495A 		.ascii	"_SIZE_T \000"
 12596      455F5420 
 12596      00
 12597              	.LASF148:
 12598 2ccb 5F5F4442 		.ascii	"__DBL_HAS_DENORM__ 1\000"
 12598      4C5F4841 
 12598      535F4445 
 12598      4E4F524D 
 12598      5F5F2031 
 12599              	.LASF1112:
 12600 2ce0 7461736B 		.ascii	"taskSWITCH_DELAYED_LISTS() { List_t *pxTemp; config"
 12600      53574954 
 12600      43485F44 
 12600      454C4159 
 12600      45445F4C 
 12601 2d13 41535345 		.ascii	"ASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) "
 12601      52542820 
 12601      28206C69 
 12601      73744C49 
 12601      53545F49 
 12602 2d46 293B2070 		.ascii	"); pxTemp = pxDelayedTaskList; pxDelayedTaskList = "
 12602      7854656D 
 12602      70203D20 
 12602      70784465 
 12602      6C617965 
 12603 2d79 70784F76 		.ascii	"pxOverflowDelayedTaskList; pxOverflowDelayedTaskLis"
 12603      6572666C 
 12603      6F774465 
 12603      6C617965 
 12603      64546173 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 317


 12604 2dac 74203D20 		.ascii	"t = pxTemp; xNumOfOverflows++; prvResetNextTaskUnbl"
 12604      70785465 
 12604      6D703B20 
 12604      784E756D 
 12604      4F664F76 
 12605 2ddf 6F636B54 		.ascii	"ockTime(); }\000"
 12605      696D6528 
 12605      293B207D 
 12605      00
 12606              	.LASF612:
 12607 2dec 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE 1\000"
 12607      5F535550 
 12607      504F5254 
 12607      535F5F5F 
 12607      494E4C49 
 12608              	.LASF366:
 12609 2e05 5F4D425F 		.ascii	"_MB_LEN_MAX 1\000"
 12609      4C454E5F 
 12609      4D415820 
 12609      3100
 12610              	.LASF805:
 12611 2e13 494E544D 		.ascii	"INTMAX_MAX (__INTMAX_MAX__)\000"
 12611      41585F4D 
 12611      41582028 
 12611      5F5F494E 
 12611      544D4158 
 12612              	.LASF782:
 12613 2e2f 494E5433 		.ascii	"INT32_MAX (__INT32_MAX__)\000"
 12613      325F4D41 
 12613      5820285F 
 12613      5F494E54 
 12613      33325F4D 
 12614              	.LASF1201:
 12615 2e49 76546173 		.ascii	"vTaskDelete\000"
 12615      6B44656C 
 12615      65746500 
 12616              	.LASF1276:
 12617 2e55 756C436F 		.ascii	"ulCount\000"
 12617      756E7400 
 12618              	.LASF945:
 12619 2e5d 74726163 		.ascii	"traceTASK_SWITCHED_OUT() \000"
 12619      65544153 
 12619      4B5F5357 
 12619      49544348 
 12619      45445F4F 
 12620              	.LASF290:
 12621 2e77 5F5F4441 		.ascii	"__DA_FBIT__ 31\000"
 12621      5F464249 
 12621      545F5F20 
 12621      333100
 12622              	.LASF1143:
 12623 2e86 7076436F 		.ascii	"pvContainer\000"
 12623      6E746169 
 12623      6E657200 
 12624              	.LASF1097:
 12625 2e92 7854696D 		.ascii	"xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken"
 12625      65725265 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 318


 12625      73657446 
 12625      726F6D49 
 12625      53522878 
 12626 2ec5 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESE"
 12626      696D6572 
 12626      47656E65 
 12626      72696343 
 12626      6F6D6D61 
 12627 2ef8 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 12627      4F4D5F49 
 12627      53522C20 
 12627      28207854 
 12627      61736B47 
 12628 2f2b 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 12628      72696F72 
 12628      69747954 
 12628      61736B57 
 12628      6F6B656E 
 12629              	.LASF94:
 12630 2f48 5F5F494E 		.ascii	"__INT_LEAST16_MAX__ 0x7fff\000"
 12630      545F4C45 
 12630      41535431 
 12630      365F4D41 
 12630      585F5F20 
 12631              	.LASF413:
 12632 2f63 5F534947 		.ascii	"_SIGNED signed\000"
 12632      4E454420 
 12632      7369676E 
 12632      656400
 12633              	.LASF133:
 12634 2f72 5F5F464C 		.ascii	"__FLT_DENORM_MIN__ 1.4012984643248171e-45F\000"
 12634      545F4445 
 12634      4E4F524D 
 12634      5F4D494E 
 12634      5F5F2031 
 12635              	.LASF158:
 12636 2f9d 5F5F4C44 		.ascii	"__LDBL_MAX__ 1.7976931348623157e+308L\000"
 12636      424C5F4D 
 12636      41585F5F 
 12636      20312E37 
 12636      39373639 
 12637              	.LASF798:
 12638 2fc3 55494E54 		.ascii	"UINT_FAST16_MAX (__UINT_FAST16_MAX__)\000"
 12638      5F464153 
 12638      5431365F 
 12638      4D415820 
 12638      285F5F55 
 12639              	.LASF650:
 12640 2fe9 5F5F7265 		.ascii	"__returns_twice __attribute__((__returns_twice__))\000"
 12640      7475726E 
 12640      735F7477 
 12640      69636520 
 12640      5F5F6174 
 12641              	.LASF693:
 12642 301c 5F5F7265 		.ascii	"__requires_shared(...) __lock_annotate(shared_locks"
 12642      71756972 
 12642      65735F73 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 319


 12642      68617265 
 12642      64282E2E 
 12643 304f 5F726571 		.ascii	"_required(__VA_ARGS__))\000"
 12643      75697265 
 12643      64285F5F 
 12643      56415F41 
 12643      5247535F 
 12644              	.LASF406:
 12645 3067 5F454E44 		.ascii	"_END_STD_C \000"
 12645      5F535444 
 12645      5F432000 
 12646              	.LASF1285:
 12647 3073 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 12647      736B5265 
 12647      73657445 
 12647      76656E74 
 12647      4974656D 
 12648              	.LASF1224:
 12649 308d 78546173 		.ascii	"xTaskResumeFromISR\000"
 12649      6B526573 
 12649      756D6546 
 12649      726F6D49 
 12649      535200
 12650              	.LASF65:
 12651 30a0 5F5F6861 		.ascii	"__has_include_next(STR) __has_include_next__(STR)\000"
 12651      735F696E 
 12651      636C7564 
 12651      655F6E65 
 12651      78742853 
 12652              	.LASF1058:
 12653 30d2 6C697374 		.ascii	"listLIST_ITEM_CONTAINER(pxListItem) ( ( pxListItem "
 12653      4C495354 
 12653      5F495445 
 12653      4D5F434F 
 12653      4E544149 
 12654 3105 292D3E70 		.ascii	")->pvContainer )\000"
 12654      76436F6E 
 12654      7461696E 
 12654      65722029 
 12654      00
 12655              	.LASF780:
 12656 3116 55494E54 		.ascii	"UINT_LEAST16_MAX (__UINT_LEAST16_MAX__)\000"
 12656      5F4C4541 
 12656      53543136 
 12656      5F4D4158 
 12656      20285F5F 
 12657              	.LASF105:
 12658 313e 5F5F5549 		.ascii	"__UINT32_C(c) c ## UL\000"
 12658      4E543332 
 12658      5F432863 
 12658      29206320 
 12658      23232055 
 12659              	.LASF855:
 12660 3154 494E434C 		.ascii	"INCLUDE_vTaskDelayUntil 1\000"
 12660      5544455F 
 12660      76546173 
 12660      6B44656C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 320


 12660      6179556E 
 12661              	.LASF243:
 12662 316e 5F5F5541 		.ascii	"__UACCUM_MIN__ 0.0UK\000"
 12662      4343554D 
 12662      5F4D494E 
 12662      5F5F2030 
 12662      2E30554B 
 12663              	.LASF906:
 12664 3183 706F7274 		.ascii	"portTASK_FUNCTION(vFunction,pvParameters) void vFun"
 12664      5441534B 
 12664      5F46554E 
 12664      4354494F 
 12664      4E287646 
 12665 31b6 6374696F 		.ascii	"ction( void *pvParameters )\000"
 12665      6E282076 
 12665      6F696420 
 12665      2A707650 
 12665      6172616D 
 12666              	.LASF716:
 12667 31d2 5F5F6861 		.ascii	"__have_long32 1\000"
 12667      76655F6C 
 12667      6F6E6733 
 12667      32203100 
 12668              	.LASF132:
 12669 31e2 5F5F464C 		.ascii	"__FLT_EPSILON__ 1.1920928955078125e-7F\000"
 12669      545F4550 
 12669      53494C4F 
 12669      4E5F5F20 
 12669      312E3139 
 12670              	.LASF622:
 12671 3209 5F5F5853 		.ascii	"__XSTRING(x) __STRING(x)\000"
 12671      5452494E 
 12671      47287829 
 12671      205F5F53 
 12671      5452494E 
 12672              	.LASF585:
 12673 3222 5F5F6174 		.ascii	"__attribute_pure__ \000"
 12673      74726962 
 12673      7574655F 
 12673      70757265 
 12673      5F5F2000 
 12674              	.LASF374:
 12675 3236 5F574944 		.ascii	"_WIDE_ORIENT 1\000"
 12675      455F4F52 
 12675      49454E54 
 12675      203100
 12676              	.LASF1304:
 12677 3245 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 12677      74546173 
 12677      6B556E62 
 12677      6C6F636B 
 12677      54696D65 
 12678              	.LASF1035:
 12679 325a 78436F52 		.ascii	"xCoRoutineHandle CoRoutineHandle_t\000"
 12679      6F757469 
 12679      6E654861 
 12679      6E646C65 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 321


 12679      20436F52 
 12680              	.LASF30:
 12681 327d 5F5F5054 		.ascii	"__PTRDIFF_TYPE__ int\000"
 12681      52444946 
 12681      465F5459 
 12681      50455F5F 
 12681      20696E74 
 12682              	.LASF923:
 12683 3292 494E434C 		.ascii	"INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetM"
 12683      5544455F 
 12683      7853656D 
 12683      6170686F 
 12683      72654765 
 12684 32c5 75746578 		.ascii	"utexHolder\000"
 12684      486F6C64 
 12684      657200
 12685              	.LASF980:
 12686 32d0 74726163 		.ascii	"traceTASK_RESUME(pxTaskToResume) \000"
 12686      65544153 
 12686      4B5F5245 
 12686      53554D45 
 12686      28707854 
 12687              	.LASF1003:
 12688 32f2 74726163 		.ascii	"traceQUEUE_REGISTRY_ADD(xQueue,pcQueueName) \000"
 12688      65515545 
 12688      55455F52 
 12688      45474953 
 12688      5452595F 
 12689              	.LASF603:
 12690 331f 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VARARGS 1\000"
 12690      55434C49 
 12690      4B455F42 
 12690      55494C54 
 12690      494E5F56 
 12691              	.LASF42:
 12692 333c 5F5F5549 		.ascii	"__UINT8_TYPE__ unsigned char\000"
 12692      4E54385F 
 12692      54595045 
 12692      5F5F2075 
 12692      6E736967 
 12693              	.LASF547:
 12694 3359 5F524545 		.ascii	"_REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_sign"
 12694      4E545F53 
 12694      49474E47 
 12694      414D2870 
 12694      74722920 
 12695 338c 67616D29 		.ascii	"gam)\000"
 12695      00
 12696              	.LASF115:
 12697 3391 5F5F5549 		.ascii	"__UINT_FAST64_MAX__ 0xffffffffffffffffULL\000"
 12697      4E545F46 
 12697      41535436 
 12697      345F4D41 
 12697      585F5F20 
 12698              	.LASF315:
 12699 33bb 5F5F4743 		.ascii	"__GCC_ATOMIC_SHORT_LOCK_FREE 2\000"
 12699      435F4154 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 322


 12699      4F4D4943 
 12699      5F53484F 
 12699      52545F4C 
 12700              	.LASF1293:
 12701 33da 7850656E 		.ascii	"xPendingReadyList\000"
 12701      64696E67 
 12701      52656164 
 12701      794C6973 
 12701      7400
 12702              	.LASF1136:
 12703 33ec 55426173 		.ascii	"UBaseT_t\000"
 12703      65545F74 
 12703      00
 12704              	.LASF668:
 12705 33f5 5F5F7374 		.ascii	"__strong_reference(sym,aliassym) extern __typeof (s"
 12705      726F6E67 
 12705      5F726566 
 12705      6572656E 
 12705      63652873 
 12706 3428 796D2920 		.ascii	"ym) aliassym __attribute__ ((__alias__ (#sym)))\000"
 12706      616C6961 
 12706      7373796D 
 12706      205F5F61 
 12706      74747269 
 12707              	.LASF269:
 12708 3458 5F5F4851 		.ascii	"__HQ_IBIT__ 0\000"
 12708      5F494249 
 12708      545F5F20 
 12708      3000
 12709              	.LASF1309:
 12710 3466 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 12710      7274436F 
 12710      756E744C 
 12710      65616469 
 12710      6E675A65 
 12711              	.LASF231:
 12712 347e 5F5F5553 		.ascii	"__USACCUM_FBIT__ 8\000"
 12712      41434355 
 12712      4D5F4642 
 12712      49545F5F 
 12712      203800
 12713              	.LASF1021:
 12714 3491 706F7274 		.ascii	"portASSERT_IF_IN_ISR() \000"
 12714      41535345 
 12714      52545F49 
 12714      465F494E 
 12714      5F495352 
 12715              	.LASF319:
 12716 34a9 5F5F4743 		.ascii	"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1\000"
 12716      435F4154 
 12716      4F4D4943 
 12716      5F544553 
 12716      545F414E 
 12717              	.LASF485:
 12718 34cd 5F535953 		.ascii	"_SYS__TYPES_H \000"
 12718      5F5F5459 
 12718      5045535F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 323


 12718      482000
 12719              	.LASF551:
 12720 34dc 5F524545 		.ascii	"_REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._ad"
 12720      4E545F52 
 12720      414E4434 
 12720      385F4144 
 12720      44287074 
 12721 350f 642900   		.ascii	"d)\000"
 12722              	.LASF985:
 12723 3512 74726163 		.ascii	"traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageV"
 12723      6554494D 
 12723      45525F43 
 12723      4F4D4D41 
 12723      4E445F53 
 12724 3545 616C7565 		.ascii	"alueValue,xReturn) \000"
 12724      56616C75 
 12724      652C7852 
 12724      65747572 
 12724      6E292000 
 12725              	.LASF699:
 12726 3559 5F4E4557 		.ascii	"_NEWLIB_ALLOCA_H \000"
 12726      4C49425F 
 12726      414C4C4F 
 12726      43415F48 
 12726      2000
 12727              	.LASF163:
 12728 356b 5F5F4C44 		.ascii	"__LDBL_HAS_INFINITY__ 1\000"
 12728      424C5F48 
 12728      41535F49 
 12728      4E46494E 
 12728      4954595F 
 12729              	.LASF828:
 12730 3583 46524545 		.ascii	"FREERTOS_CONFIG_H \000"
 12730      52544F53 
 12730      5F434F4E 
 12730      4649475F 
 12730      482000
 12731              	.LASF804:
 12732 3596 55494E54 		.ascii	"UINT_FAST64_MAX (__UINT_FAST64_MAX__)\000"
 12732      5F464153 
 12732      5436345F 
 12732      4D415820 
 12732      285F5F55 
 12733              	.LASF292:
 12734 35bc 5F5F5441 		.ascii	"__TA_FBIT__ 63\000"
 12734      5F464249 
 12734      545F5F20 
 12734      363300
 12735              	.LASF5:
 12736 35cb 5F5F5645 		.ascii	"__VERSION__ \"5.4.1 20160919 (release) [ARM/embedde"
 12736      5253494F 
 12736      4E5F5F20 
 12736      22352E34 
 12736      2E312032 
 12737 35fd 642D352D 		.ascii	"d-5-branch revision 240496]\"\000"
 12737      6272616E 
 12737      63682072 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 324


 12737      65766973 
 12737      696F6E20 
 12738              	.LASF1065:
 12739 361a 7461736B 		.ascii	"taskYIELD() portYIELD()\000"
 12739      5949454C 
 12739      44282920 
 12739      706F7274 
 12739      5949454C 
 12740              	.LASF702:
 12741 3632 5F5F636F 		.ascii	"__compar_fn_t_defined \000"
 12741      6D706172 
 12741      5F666E5F 
 12741      745F6465 
 12741      66696E65 
 12742              	.LASF1106:
 12743 3649 74736B52 		.ascii	"tskREADY_CHAR ( 'R' )\000"
 12743      45414459 
 12743      5F434841 
 12743      52202820 
 12743      27522720 
 12744              	.LASF1271:
 12745 365f 65537461 		.ascii	"eState\000"
 12745      746500
 12746              	.LASF349:
 12747 3666 5F5F4152 		.ascii	"__ARM_ARCH_EXT_IDIV__ 1\000"
 12747      4D5F4152 
 12747      43485F45 
 12747      58545F49 
 12747      4449565F 
 12748              	.LASF347:
 12749 367e 5F5F4152 		.ascii	"__ARM_PCS 1\000"
 12749      4D5F5043 
 12749      53203100 
 12750              	.LASF878:
 12751 368a 65727243 		.ascii	"errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )\000"
 12751      4F554C44 
 12751      5F4E4F54 
 12751      5F414C4C 
 12751      4F434154 
 12752              	.LASF643:
 12753 36b7 5F5F7075 		.ascii	"__pure __attribute__((__pure__))\000"
 12753      7265205F 
 12753      5F617474 
 12753      72696275 
 12753      74655F5F 
 12754              	.LASF974:
 12755 36d8 74726163 		.ascii	"traceTASK_CREATE_FAILED() \000"
 12755      65544153 
 12755      4B5F4352 
 12755      45415445 
 12755      5F464149 
 12756              	.LASF83:
 12757 36f3 5F5F5349 		.ascii	"__SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)\000"
 12757      475F4154 
 12757      4F4D4943 
 12757      5F4D494E 
 12757      5F5F2028 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 325


 12758              	.LASF100:
 12759 3720 5F5F5549 		.ascii	"__UINT_LEAST8_MAX__ 0xff\000"
 12759      4E545F4C 
 12759      45415354 
 12759      385F4D41 
 12759      585F5F20 
 12760              	.LASF457:
 12761 3739 5F425344 		.ascii	"_BSD_WCHAR_T_ \000"
 12761      5F574348 
 12761      41525F54 
 12761      5F2000
 12762              	.LASF1242:
 12763 3748 76546173 		.ascii	"vTaskSwitchContext\000"
 12763      6B537769 
 12763      74636843 
 12763      6F6E7465 
 12763      787400
 12764              	.LASF872:
 12765 375b 70644641 		.ascii	"pdFALSE ( ( BaseT_t ) 0 )\000"
 12765      4C534520 
 12765      28202820 
 12765      42617365 
 12765      545F7420 
 12766              	.LASF851:
 12767 3775 494E434C 		.ascii	"INCLUDE_uxTaskPriorityGet 1\000"
 12767      5544455F 
 12767      75785461 
 12767      736B5072 
 12767      696F7269 
 12768              	.LASF809:
 12769 3791 5349475F 		.ascii	"SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)\000"
 12769      41544F4D 
 12769      49435F4D 
 12769      494E2028 
 12769      2D5F5F53 
 12770              	.LASF820:
 12771 37bd 55494E54 		.ascii	"UINT16_C(x) __UINT16_C(x)\000"
 12771      31365F43 
 12771      28782920 
 12771      5F5F5549 
 12771      4E543136 
 12772              	.LASF874:
 12773 37d7 70645041 		.ascii	"pdPASS ( pdTRUE )\000"
 12773      53532028 
 12773      20706454 
 12773      52554520 
 12773      2900
 12774              	.LASF506:
 12775 37e9 5F5F6C6F 		.ascii	"__lock_acquire_recursive(lock) (_CAST_VOID 0)\000"
 12775      636B5F61 
 12775      63717569 
 12775      72655F72 
 12775      65637572 
 12776              	.LASF1018:
 12777 3817 636F6E66 		.ascii	"configUSE_NEWLIB_REENTRANT 0\000"
 12777      69675553 
 12777      455F4E45 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 326


 12777      574C4942 
 12777      5F524545 
 12778              	.LASF578:
 12779 3834 5F5F504D 		.ascii	"__PMT(args) args\000"
 12779      54286172 
 12779      67732920 
 12779      61726773 
 12779      00
 12780              	.LASF888:
 12781 3845 706F7274 		.ascii	"portSTACK_TYPE uint32_t\000"
 12781      53544143 
 12781      4B5F5459 
 12781      50452075 
 12781      696E7433 
 12782              	.LASF1278:
 12783 385d 70756345 		.ascii	"pucEndOfStack\000"
 12783      6E644F66 
 12783      53746163 
 12783      6B00
 12784              	.LASF1099:
 12785 386b 7461736B 		.ascii	"taskFIRST_CHECK_FOR_STACK_OVERFLOW() \000"
 12785      46495253 
 12785      545F4348 
 12785      45434B5F 
 12785      464F525F 
 12786              	.LASF1244:
 12787 3891 7078436F 		.ascii	"pxConstList\000"
 12787      6E73744C 
 12787      69737400 
 12788              	.LASF1062:
 12789 389d 74736B4B 		.ascii	"tskKERNEL_VERSION_MINOR 1\000"
 12789      45524E45 
 12789      4C5F5645 
 12789      5253494F 
 12789      4E5F4D49 
 12790              	.LASF943:
 12791 38b7 74726163 		.ascii	"traceLOW_POWER_IDLE_BEGIN() \000"
 12791      654C4F57 
 12791      5F504F57 
 12791      45525F49 
 12791      444C455F 
 12792              	.LASF829:
 12793 38d4 636F6E66 		.ascii	"configUSE_PREEMPTION 1\000"
 12793      69675553 
 12793      455F5052 
 12793      45454D50 
 12793      54494F4E 
 12794              	.LASF1262:
 12795 38eb 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 12795      6E697469 
 12795      616C6973 
 12795      65544342 
 12795      56617269 
 12796              	.LASF998:
 12797 3905 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS(xEventGroup,uxBitsToSet) "
 12797      65455645 
 12797      4E545F47 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 327


 12797      524F5550 
 12797      5F534554 
 12798 3938 00       		.ascii	"\000"
 12799              	.LASF1194:
 12800 3939 70784372 		.ascii	"pxCreatedTask\000"
 12800      65617465 
 12800      64546173 
 12800      6B00
 12801              	.LASF870:
 12802 3947 50524F4A 		.ascii	"PROJDEFS_H \000"
 12802      44454653 
 12802      5F482000 
 12803              	.LASF1287:
 12804 3953 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 12804      736B496E 
 12804      6372656D 
 12804      656E744D 
 12804      75746578 
 12805              	.LASF639:
 12806 3971 5F4E6F72 		.ascii	"_Noreturn __dead2\000"
 12806      65747572 
 12806      6E205F5F 
 12806      64656164 
 12806      3200
 12807              	.LASF1223:
 12808 3983 78546173 		.ascii	"xTaskToResume\000"
 12808      6B546F52 
 12808      6573756D 
 12808      6500
 12809              	.LASF178:
 12810 3991 5F5F4445 		.ascii	"__DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD\000"
 12810      4336345F 
 12810      5355424E 
 12810      4F524D41 
 12810      4C5F4D49 
 12811              	.LASF195:
 12812 39c2 5F5F5553 		.ascii	"__USFRACT_EPSILON__ 0x1P-8UHR\000"
 12812      46524143 
 12812      545F4550 
 12812      53494C4F 
 12812      4E5F5F20 
 12813              	.LASF468:
 12814 39e0 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 12814      20282876 
 12814      6F696420 
 12814      2A293029 
 12814      00
 12815              	.LASF640:
 12816 39f1 5F546872 		.ascii	"_Thread_local __thread\000"
 12816      6561645F 
 12816      6C6F6361 
 12816      6C205F5F 
 12816      74687265 
 12817              	.LASF895:
 12818 3a08 706F7274 		.ascii	"portNVIC_PENDSVSET_BIT ( 1UL << 28UL )\000"
 12818      4E564943 
 12818      5F50454E 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 328


 12818      44535653 
 12818      45545F42 
 12819              	.LASF191:
 12820 3a2f 5F5F5553 		.ascii	"__USFRACT_FBIT__ 8\000"
 12820      46524143 
 12820      545F4642 
 12820      49545F5F 
 12820      203800
 12821              	.LASF259:
 12822 3a42 5F5F4C4C 		.ascii	"__LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK\000"
 12822      41434355 
 12822      4D5F4D41 
 12822      585F5F20 
 12822      30583746 
 12823              	.LASF862:
 12824 3a6c 636F6E66 		.ascii	"configNET_MASK0 255\000"
 12824      69674E45 
 12824      545F4D41 
 12824      534B3020 
 12824      32353500 
 12825              	.LASF469:
 12826 3a80 5F5F6E65 		.ascii	"__need_NULL\000"
 12826      65645F4E 
 12826      554C4C00 
 12827              	.LASF1295:
 12828 3a8c 75785461 		.ascii	"uxTasksDeleted\000"
 12828      736B7344 
 12828      656C6574 
 12828      656400
 12829              	.LASF760:
 12830 3a9b 5F5F696E 		.ascii	"__int_least32_t_defined 1\000"
 12830      745F6C65 
 12830      61737433 
 12830      325F745F 
 12830      64656669 
 12831              	.LASF303:
 12832 3ab5 5F5F5553 		.ascii	"__USER_LABEL_PREFIX__ \000"
 12832      45525F4C 
 12832      4142454C 
 12832      5F505245 
 12832      4649585F 
 12833              	.LASF91:
 12834 3acc 5F5F5549 		.ascii	"__UINT64_MAX__ 0xffffffffffffffffULL\000"
 12834      4E543634 
 12834      5F4D4158 
 12834      5F5F2030 
 12834      78666666 
 12835              	.LASF832:
 12836 3af1 636F6E66 		.ascii	"configUSE_TICK_HOOK 1\000"
 12836      69675553 
 12836      455F5449 
 12836      434B5F48 
 12836      4F4F4B20 
 12837              	.LASF846:
 12838 3b07 636F6E66 		.ascii	"configCHECK_FOR_STACK_OVERFLOW 0\000"
 12838      69674348 
 12838      45434B5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 329


 12838      464F525F 
 12838      53544143 
 12839              	.LASF90:
 12840 3b28 5F5F5549 		.ascii	"__UINT32_MAX__ 0xffffffffUL\000"
 12840      4E543332 
 12840      5F4D4158 
 12840      5F5F2030 
 12840      78666666 
 12841              	.LASF823:
 12842 3b44 494E5436 		.ascii	"INT64_C(x) __INT64_C(x)\000"
 12842      345F4328 
 12842      7829205F 
 12842      5F494E54 
 12842      36345F43 
 12843              	.LASF386:
 12844 3b5c 5F415446 		.ascii	"_ATFILE_SOURCE\000"
 12844      494C455F 
 12844      534F5552 
 12844      434500
 12845              	.LASF561:
 12846 3b6b 5F524545 		.ascii	"_REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtow"
 12846      4E545F4D 
 12846      42544F57 
 12846      435F5354 
 12846      41544528 
 12847 3b9e 635F7374 		.ascii	"c_state)\000"
 12847      61746529 
 12847      00
 12848              	.LASF869:
 12849 3ba7 636F6E66 		.ascii	"configASSERT(x) if( ( x ) == 0 ) { taskDISABLE_INTE"
 12849      69674153 
 12849      53455254 
 12849      28782920 
 12849      69662820 
 12850 3bda 52525550 		.ascii	"RRUPTS(); for( ;; ); }\000"
 12850      54532829 
 12850      3B20666F 
 12850      7228203B 
 12850      3B20293B 
 12851              	.LASF560:
 12852 3bf1 5F524545 		.ascii	"_REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_"
 12852      4E545F4D 
 12852      424C454E 
 12852      5F535441 
 12852      54452870 
 12853 3c24 73746174 		.ascii	"state)\000"
 12853      652900
 12854              	.LASF688:
 12855 3c2b 5F5F7472 		.ascii	"__trylocks_shared(...) __lock_annotate(shared_trylo"
 12855      796C6F63 
 12855      6B735F73 
 12855      68617265 
 12855      64282E2E 
 12856 3c5e 636B5F66 		.ascii	"ck_function(__VA_ARGS__))\000"
 12856      756E6374 
 12856      696F6E28 
 12856      5F5F5641 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 330


 12856      5F415247 
 12857              	.LASF92:
 12858 3c78 5F5F494E 		.ascii	"__INT_LEAST8_MAX__ 0x7f\000"
 12858      545F4C45 
 12858      41535438 
 12858      5F4D4158 
 12858      5F5F2030 
 12859              	.LASF320:
 12860 3c90 5F5F4743 		.ascii	"__GCC_ATOMIC_POINTER_LOCK_FREE 2\000"
 12860      435F4154 
 12860      4F4D4943 
 12860      5F504F49 
 12860      4E544552 
 12861              	.LASF326:
 12862 3cb1 5F5F4152 		.ascii	"__ARM_FEATURE_QBIT 1\000"
 12862      4D5F4645 
 12862      41545552 
 12862      455F5142 
 12862      49542031 
 12863              	.LASF331:
 12864 3cc6 5F5F4152 		.ascii	"__ARM_FEATURE_CLZ 1\000"
 12864      4D5F4645 
 12864      41545552 
 12864      455F434C 
 12864      5A203100 
 12865              	.LASF8:
 12866 3cda 5F5F4154 		.ascii	"__ATOMIC_ACQUIRE 2\000"
 12866      4F4D4943 
 12866      5F414351 
 12866      55495245 
 12866      203200
 12867              	.LASF903:
 12868 3ced 706F7274 		.ascii	"portENTER_CRITICAL() vPortEnterCritical()\000"
 12868      454E5445 
 12868      525F4352 
 12868      49544943 
 12868      414C2829 
 12869              	.LASF1297:
 12870 3d17 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 12870      7272656E 
 12870      744E756D 
 12870      6265724F 
 12870      66546173 
 12871              	.LASF1228:
 12872 3d2e 76546173 		.ascii	"vTaskSuspendAll\000"
 12872      6B537573 
 12872      70656E64 
 12872      416C6C00 
 12873              	.LASF512:
 12874 3d3e 756E7369 		.ascii	"unsigned signed\000"
 12874      676E6564 
 12874      20736967 
 12874      6E656400 
 12875              	.LASF762:
 12876 3d4e 5F5F696E 		.ascii	"__int_fast8_t_defined 1\000"
 12876      745F6661 
 12876      7374385F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 331


 12876      745F6465 
 12876      66696E65 
 12877              	.LASF729:
 12878 3d66 5F494E54 		.ascii	"_INTPTR_EQ_INT \000"
 12878      5054525F 
 12878      45515F49 
 12878      4E542000 
 12879              	.LASF333:
 12880 3d76 5F5F4152 		.ascii	"__ARM_SIZEOF_WCHAR_T 4\000"
 12880      4D5F5349 
 12880      5A454F46 
 12880      5F574348 
 12880      41525F54 
 12881              	.LASF473:
 12882 3d8d 5F414E53 		.ascii	"_ANSI_STDDEF_H \000"
 12882      495F5354 
 12882      44444546 
 12882      5F482000 
 12883              	.LASF64:
 12884 3d9d 5F5F6861 		.ascii	"__has_include(STR) __has_include__(STR)\000"
 12884      735F696E 
 12884      636C7564 
 12884      65285354 
 12884      5229205F 
 12885              	.LASF1161:
 12886 3dc5 784F7665 		.ascii	"xOverflowCount\000"
 12886      72666C6F 
 12886      77436F75 
 12886      6E7400
 12887              	.LASF949:
 12888 3dd4 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_SEND(pxQueue) \000"
 12888      65424C4F 
 12888      434B494E 
 12888      475F4F4E 
 12888      5F515545 
 12889              	.LASF976:
 12890 3dfa 74726163 		.ascii	"traceTASK_DELAY_UNTIL() \000"
 12890      65544153 
 12890      4B5F4445 
 12890      4C41595F 
 12890      554E5449 
 12891              	.LASF104:
 12892 3e13 5F5F5549 		.ascii	"__UINT_LEAST32_MAX__ 0xffffffffUL\000"
 12892      4E545F4C 
 12892      45415354 
 12892      33325F4D 
 12892      41585F5F 
 12893              	.LASF146:
 12894 3e35 5F5F4442 		.ascii	"__DBL_EPSILON__ ((double)2.2204460492503131e-16L)\000"
 12894      4C5F4550 
 12894      53494C4F 
 12894      4E5F5F20 
 12894      2828646F 
 12895              	.LASF1254:
 12896 3e67 70785469 		.ascii	"pxTimeOut\000"
 12896      6D654F75 
 12896      7400
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 332


 12897              	.LASF208:
 12898 3e71 5F5F4C46 		.ascii	"__LFRACT_MIN__ (-0.5LR-0.5LR)\000"
 12898      52414354 
 12898      5F4D494E 
 12898      5F5F2028 
 12898      2D302E35 
 12899              	.LASF592:
 12900 3e8f 5F5F6861 		.ascii	"__has_feature(x) 0\000"
 12900      735F6665 
 12900      61747572 
 12900      65287829 
 12900      203000
 12901              	.LASF548:
 12902 3ea2 5F524545 		.ascii	"_REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_nex"
 12902      4E545F52 
 12902      414E445F 
 12902      4E455854 
 12902      28707472 
 12903 3ed5 742900   		.ascii	"t)\000"
 12904              	.LASF1135:
 12905 3ed8 42617365 		.ascii	"BaseT_t\000"
 12905      545F7400 
 12906              	.LASF239:
 12907 3ee0 5F5F4143 		.ascii	"__ACCUM_MAX__ 0X7FFFFFFFP-15K\000"
 12907      43554D5F 
 12907      4D41585F 
 12907      5F203058 
 12907      37464646 
 12908              	.LASF960:
 12909 3efe 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE_FAILED() \000"
 12909      65435245 
 12909      4154455F 
 12909      434F554E 
 12909      54494E47 
 12910              	.LASF84:
 12911 3f27 5F5F494E 		.ascii	"__INT8_MAX__ 0x7f\000"
 12911      54385F4D 
 12911      41585F5F 
 12911      20307837 
 12911      6600
 12912              	.LASF1155:
 12913 3f39 65526561 		.ascii	"eReady\000"
 12913      647900
 12914              	.LASF902:
 12915 3f40 706F7274 		.ascii	"portENABLE_INTERRUPTS() vPortClearInterruptMask(0)\000"
 12915      454E4142 
 12915      4C455F49 
 12915      4E544552 
 12915      52555054 
 12916              	.LASF972:
 12917 3f73 74726163 		.ascii	"traceQUEUE_DELETE(pxQueue) \000"
 12917      65515545 
 12917      55455F44 
 12917      454C4554 
 12917      45287078 
 12918              	.LASF321:
 12919 3f8f 5F5F4743 		.ascii	"__GCC_HAVE_DWARF2_CFI_ASM 1\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 333


 12919      435F4841 
 12919      56455F44 
 12919      57415246 
 12919      325F4346 
 12920              	.LASF489:
 12921 3fab 5F5F5F69 		.ascii	"___int8_t_defined 1\000"
 12921      6E74385F 
 12921      745F6465 
 12921      66696E65 
 12921      64203100 
 12922              	.LASF1246:
 12923 3fbf 70784576 		.ascii	"pxEventList\000"
 12923      656E744C 
 12923      69737400 
 12924              	.LASF1311:
 12925 3fcb 75635265 		.ascii	"ucReturn\000"
 12925      7475726E 
 12925      00
 12926              	.LASF289:
 12927 3fd4 5F5F5341 		.ascii	"__SA_IBIT__ 16\000"
 12927      5F494249 
 12927      545F5F20 
 12927      313600
 12928              	.LASF1257:
 12929 3fe3 76546173 		.ascii	"vTaskMissedYield\000"
 12929      6B4D6973 
 12929      73656459 
 12929      69656C64 
 12929      00
 12930              	.LASF658:
 12931 3ff4 5F5F6F66 		.ascii	"__offsetof(type,field) offsetof(type, field)\000"
 12931      66736574 
 12931      6F662874 
 12931      7970652C 
 12931      6669656C 
 12932              	.LASF119:
 12933 4021 5F5F4743 		.ascii	"__GCC_IEC_559_COMPLEX 0\000"
 12933      435F4945 
 12933      435F3535 
 12933      395F434F 
 12933      4D504C45 
 12934              	.LASF2:
 12935 4039 5F5F474E 		.ascii	"__GNUC__ 5\000"
 12935      55435F5F 
 12935      203500
 12936              	.LASF647:
 12937 4044 5F5F6E6F 		.ascii	"__nonnull_all __attribute__((__nonnull__))\000"
 12937      6E6E756C 
 12937      6C5F616C 
 12937      6C205F5F 
 12937      61747472 
 12938              	.LASF43:
 12939 406f 5F5F5549 		.ascii	"__UINT16_TYPE__ short unsigned int\000"
 12939      4E543136 
 12939      5F545950 
 12939      455F5F20 
 12939      73686F72 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 334


 12940              	.LASF382:
 12941 4092 5F504F53 		.ascii	"_POSIX_SOURCE\000"
 12941      49585F53 
 12941      4F555243 
 12941      4500
 12942              	.LASF705:
 12943 40a0 52414E44 		.ascii	"RAND_MAX __RAND_MAX\000"
 12943      5F4D4158 
 12943      205F5F52 
 12943      414E445F 
 12943      4D415800 
 12944              	.LASF849:
 12945 40b4 636F6E66 		.ascii	"configGENERATE_RUN_TIME_STATS 0\000"
 12945      69674745 
 12945      4E455241 
 12945      54455F52 
 12945      554E5F54 
 12946              	.LASF1125:
 12947 40d4 5F5F7569 		.ascii	"__uint32_t\000"
 12947      6E743332 
 12947      5F7400
 12948              	.LASF343:
 12949 40df 5F5F534F 		.ascii	"__SOFTFP__ 1\000"
 12949      46544650 
 12949      5F5F2031 
 12949      00
 12950              	.LASF752:
 12951 40ec 5F5F696E 		.ascii	"__int32_t_defined 1\000"
 12951      7433325F 
 12951      745F6465 
 12951      66696E65 
 12951      64203100 
 12952              	.LASF1044:
 12953 4100 636F6E66 		.ascii	"configLIST_VOLATILE \000"
 12953      69674C49 
 12953      53545F56 
 12953      4F4C4154 
 12953      494C4520 
 12954              	.LASF167:
 12955 4115 5F5F4445 		.ascii	"__DEC32_MAX_EXP__ 97\000"
 12955      4333325F 
 12955      4D41585F 
 12955      4558505F 
 12955      5F203937 
 12956              	.LASF1253:
 12957 412a 76546173 		.ascii	"vTaskSetTimeOutState\000"
 12957      6B536574 
 12957      54696D65 
 12957      4F757453 
 12957      74617465 
 12958              	.LASF436:
 12959 413f 5F545F53 		.ascii	"_T_SIZE_ \000"
 12959      495A455F 
 12959      2000
 12960              	.LASF859:
 12961 4149 636F6E66 		.ascii	"configIP_ADDR1 168\000"
 12961      69674950 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 335


 12961      5F414444 
 12961      52312031 
 12961      363800
 12962              	.LASF584:
 12963 415c 5F5F6174 		.ascii	"__attribute_malloc__ \000"
 12963      74726962 
 12963      7574655F 
 12963      6D616C6C 
 12963      6F635F5F 
 12964              	.LASF727:
 12965 4172 696E7420 		.ascii	"int +2\000"
 12965      2B3200
 12966              	.LASF817:
 12967 4179 494E5438 		.ascii	"INT8_C(x) __INT8_C(x)\000"
 12967      5F432878 
 12967      29205F5F 
 12967      494E5438 
 12967      5F432878 
 12968              	.LASF58:
 12969 418f 5F5F5549 		.ascii	"__UINT_FAST8_TYPE__ unsigned int\000"
 12969      4E545F46 
 12969      41535438 
 12969      5F545950 
 12969      455F5F20 
 12970              	.LASF257:
 12971 41b0 5F5F4C4C 		.ascii	"__LLACCUM_IBIT__ 32\000"
 12971      41434355 
 12971      4D5F4942 
 12971      49545F5F 
 12971      20333200 
 12972              	.LASF200:
 12973 41c4 5F5F4652 		.ascii	"__FRACT_EPSILON__ 0x1P-15R\000"
 12973      4143545F 
 12973      45505349 
 12973      4C4F4E5F 
 12973      5F203078 
 12974              	.LASF1169:
 12975 41df 78544153 		.ascii	"xTASK_STATUS\000"
 12975      4B5F5354 
 12975      41545553 
 12975      00
 12976              	.LASF694:
 12977 41ec 5F5F7265 		.ascii	"__requires_unlocked(...) __lock_annotate(locks_excl"
 12977      71756972 
 12977      65735F75 
 12977      6E6C6F63 
 12977      6B656428 
 12978 421f 75646564 		.ascii	"uded(__VA_ARGS__))\000"
 12978      285F5F56 
 12978      415F4152 
 12978      47535F5F 
 12978      292900
 12979              	.LASF51:
 12980 4232 5F5F5549 		.ascii	"__UINT_LEAST16_TYPE__ short unsigned int\000"
 12980      4E545F4C 
 12980      45415354 
 12980      31365F54 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 336


 12980      5950455F 
 12981              	.LASF86:
 12982 425b 5F5F494E 		.ascii	"__INT32_MAX__ 0x7fffffffL\000"
 12982      5433325F 
 12982      4D41585F 
 12982      5F203078 
 12982      37666666 
 12983              	.LASF1147:
 12984 4275 4D696E69 		.ascii	"MiniListItem_t\000"
 12984      4C697374 
 12984      4974656D 
 12984      5F7400
 12985              	.LASF520:
 12986 4284 5F54494D 		.ascii	"_TIMER_T_ unsigned long\000"
 12986      45525F54 
 12986      5F20756E 
 12986      7369676E 
 12986      6564206C 
 12987              	.LASF1111:
 12988 429c 7461736B 		.ascii	"taskRESET_READY_PRIORITY(uxPriority) { if( listCURR"
 12988      52455345 
 12988      545F5245 
 12988      4144595F 
 12988      5052494F 
 12989 42cf 454E545F 		.ascii	"ENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority"
 12989      4C495354 
 12989      5F4C454E 
 12989      47544828 
 12989      20262820 
 12990 4302 2029205D 		.ascii	" ) ] ) ) == ( UBaseT_t ) 0 ) { portRESET_READY_PRIO"
 12990      20292029 
 12990      203D3D20 
 12990      28205542 
 12990      61736554 
 12991 4335 52495459 		.ascii	"RITY( ( uxPriority ), ( uxTopReadyPriority ) ); } }"
 12991      28202820 
 12991      75785072 
 12991      696F7269 
 12991      74792029 
 12992 4368 00       		.ascii	"\000"
 12993              	.LASF996:
 12994 4369 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS(xEventGroup,uxBitsToCle"
 12994      65455645 
 12994      4E545F47 
 12994      524F5550 
 12994      5F434C45 
 12995 439c 61722920 		.ascii	"ar) \000"
 12995      00
 12996              	.LASF98:
 12997 43a1 5F5F494E 		.ascii	"__INT_LEAST64_MAX__ 0x7fffffffffffffffLL\000"
 12997      545F4C45 
 12997      41535436 
 12997      345F4D41 
 12997      585F5F20 
 12998              	.LASF337:
 12999 43ca 5F5F4150 		.ascii	"__APCS_32__ 1\000"
 12999      43535F33 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 337


 12999      325F5F20 
 12999      3100
 13000              	.LASF743:
 13001 43d8 5F535953 		.ascii	"_SYS__STDINT_H \000"
 13001      5F5F5354 
 13001      44494E54 
 13001      5F482000 
 13002              	.LASF431:
 13003 43e8 5F5F6E65 		.ascii	"__need_NULL \000"
 13003      65645F4E 
 13003      554C4C20 
 13003      00
 13004              	.LASF381:
 13005 43f5 5F444546 		.ascii	"_DEFAULT_SOURCE 1\000"
 13005      41554C54 
 13005      5F534F55 
 13005      52434520 
 13005      3100
 13006              	.LASF871:
 13007 4407 70644D53 		.ascii	"pdMS_TO_TICKS(xTimeInMs) ( ( ( TickT_t ) ( xTimeInM"
 13007      5F544F5F 
 13007      5449434B 
 13007      53287854 
 13007      696D6549 
 13008 443a 73202920 		.ascii	"s ) * configTICK_RATE_HZ ) / ( TickT_t ) 1000 )\000"
 13008      2A20636F 
 13008      6E666967 
 13008      5449434B 
 13008      5F524154 
 13009              	.LASF117:
 13010 446a 5F5F5549 		.ascii	"__UINTPTR_MAX__ 0xffffffffU\000"
 13010      4E545054 
 13010      525F4D41 
 13010      585F5F20 
 13010      30786666 
 13011              	.LASF484:
 13012 4486 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 13012      65746F66 
 13012      28545950 
 13012      452C4D45 
 13012      4D424552 
 13013 44b9 42455229 		.ascii	"BER)\000"
 13013      00
 13014              	.LASF53:
 13015 44be 5F5F5549 		.ascii	"__UINT_LEAST64_TYPE__ long long unsigned int\000"
 13015      4E545F4C 
 13015      45415354 
 13015      36345F54 
 13015      5950455F 
 13016              	.LASF854:
 13017 44eb 494E434C 		.ascii	"INCLUDE_vTaskSuspend 1\000"
 13017      5544455F 
 13017      76546173 
 13017      6B537573 
 13017      70656E64 
 13018              	.LASF1072:
 13019 4502 7461736B 		.ascii	"taskSCHEDULER_RUNNING ( ( BaseT_t ) 2 )\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 338


 13019      53434845 
 13019      44554C45 
 13019      525F5255 
 13019      4E4E494E 
 13020              	.LASF1255:
 13021 452a 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 13021      6B436865 
 13021      636B466F 
 13021      7254696D 
 13021      654F7574 
 13022              	.LASF160:
 13023 453f 5F5F4C44 		.ascii	"__LDBL_EPSILON__ 2.2204460492503131e-16L\000"
 13023      424C5F45 
 13023      5053494C 
 13023      4F4E5F5F 
 13023      20322E32 
 13024              	.LASF1008:
 13025 4568 7076506F 		.ascii	"pvPortMallocAligned(x,puxStackBuffer) ( ( ( puxStac"
 13025      72744D61 
 13025      6C6C6F63 
 13025      416C6967 
 13025      6E656428 
 13026 459b 6B427566 		.ascii	"kBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ("
 13026      66657220 
 13026      29203D3D 
 13026      204E554C 
 13026      4C202920 
 13027 45ce 20707578 		.ascii	" puxStackBuffer ) )\000"
 13027      53746163 
 13027      6B427566 
 13027      66657220 
 13027      29202900 
 13028              	.LASF628:
 13029 45e2 5F5F7075 		.ascii	"__pure2 __attribute__((__const__))\000"
 13029      72653220 
 13029      5F5F6174 
 13029      74726962 
 13029      7574655F 
 13030              	.LASF312:
 13031 4605 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR16_T_LOCK_FREE 2\000"
 13031      435F4154 
 13031      4F4D4943 
 13031      5F434841 
 13031      5231365F 
 13032              	.LASF813:
 13033 4627 57434841 		.ascii	"WCHAR_MIN (__WCHAR_MIN__)\000"
 13033      525F4D49 
 13033      4E20285F 
 13033      5F574348 
 13033      41525F4D 
 13034              	.LASF141:
 13035 4641 5F5F4442 		.ascii	"__DBL_MAX_EXP__ 1024\000"
 13035      4C5F4D41 
 13035      585F4558 
 13035      505F5F20 
 13035      31303234 
 13036              	.LASF738:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 339


 13037 4656 5F5F4641 		.ascii	"__FAST64 \"ll\"\000"
 13037      53543634 
 13037      20226C6C 
 13037      2200
 13038              	.LASF9:
 13039 4664 5F5F4154 		.ascii	"__ATOMIC_RELEASE 3\000"
 13039      4F4D4943 
 13039      5F52454C 
 13039      45415345 
 13039      203300
 13040              	.LASF723:
 13041 4677 756E7369 		.ascii	"unsigned +0\000"
 13041      676E6564 
 13041      202B3000 
 13042              	.LASF123:
 13043 4683 5F5F464C 		.ascii	"__FLT_MANT_DIG__ 24\000"
 13043      545F4D41 
 13043      4E545F44 
 13043      49475F5F 
 13043      20323400 
 13044              	.LASF528:
 13045 4697 5F52414E 		.ascii	"_RAND48_SEED_1 (0xabcd)\000"
 13045      4434385F 
 13045      53454544 
 13045      5F312028 
 13045      30786162 
 13046              	.LASF246:
 13047 46af 5F5F4C41 		.ascii	"__LACCUM_FBIT__ 31\000"
 13047      4343554D 
 13047      5F464249 
 13047      545F5F20 
 13047      333100
 13048              	.LASF807:
 13049 46c2 55494E54 		.ascii	"UINTMAX_MAX (__UINTMAX_MAX__)\000"
 13049      4D41585F 
 13049      4D415820 
 13049      285F5F55 
 13049      494E544D 
 13050              	.LASF1115:
 13051 46e0 7461736B 		.ascii	"taskEVENT_LIST_ITEM_VALUE_IN_USE 0x80000000UL\000"
 13051      4556454E 
 13051      545F4C49 
 13051      53545F49 
 13051      54454D5F 
 13052              	.LASF500:
 13053 470e 5F5F4C4F 		.ascii	"__LOCK_INIT_RECURSIVE(class,lock) static int lock ="
 13053      434B5F49 
 13053      4E49545F 
 13053      52454355 
 13053      52534956 
 13054 4741 20303B00 		.ascii	" 0;\000"
 13055              	.LASF1283:
 13056 4745 70784D75 		.ascii	"pxMutexHolder\000"
 13056      74657848 
 13056      6F6C6465 
 13056      7200
 13057              	.LASF646:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 340


 13058 4753 5F5F6E6F 		.ascii	"__nonnull(x) __attribute__((__nonnull__(x)))\000"
 13058      6E6E756C 
 13058      6C287829 
 13058      205F5F61 
 13058      74747269 
 13059              	.LASF614:
 13060 4780 5F5F4343 		.ascii	"__CC_SUPPORTS___FUNC__ 1\000"
 13060      5F535550 
 13060      504F5254 
 13060      535F5F5F 
 13060      46554E43 
 13061              	.LASF1078:
 13062 4799 746D7243 		.ascii	"tmrCOMMAND_START_DONT_TRACE ( ( BaseT_t ) 0 )\000"
 13062      4F4D4D41 
 13062      4E445F53 
 13062      54415254 
 13062      5F444F4E 
 13063              	.LASF847:
 13064 47c7 636F6E66 		.ascii	"configUSE_RECURSIVE_MUTEXES 1\000"
 13064      69675553 
 13064      455F5245 
 13064      43555253 
 13064      4956455F 
 13065              	.LASF597:
 13066 47e5 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_CONSTANTS \000"
 13066      55434C49 
 13066      4B455F4D 
 13066      4154485F 
 13066      4255494C 
 13067              	.LASF690:
 13068 4808 5F5F6173 		.ascii	"__asserts_exclusive(...) __lock_annotate(assert_exc"
 13068      73657274 
 13068      735F6578 
 13068      636C7573 
 13068      69766528 
 13069 483b 6C757369 		.ascii	"lusive_lock(__VA_ARGS__))\000"
 13069      76655F6C 
 13069      6F636B28 
 13069      5F5F5641 
 13069      5F415247 
 13070              	.LASF737:
 13071 4855 5F5F4641 		.ascii	"__FAST32 \000"
 13071      53543332 
 13071      2000
 13072              	.LASF475:
 13073 485f 5F545F50 		.ascii	"_T_PTRDIFF_ \000"
 13073      54524449 
 13073      46465F20 
 13073      00
 13074              	.LASF161:
 13075 486c 5F5F4C44 		.ascii	"__LDBL_DENORM_MIN__ 4.9406564584124654e-324L\000"
 13075      424C5F44 
 13075      454E4F52 
 13075      4D5F4D49 
 13075      4E5F5F20 
 13076              	.LASF1095:
 13077 4899 7854696D 		.ascii	"xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken)"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 341


 13077      65725374 
 13077      6F704672 
 13077      6F6D4953 
 13077      52287854 
 13078 48cc 20785469 		.ascii	" xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_"
 13078      6D657247 
 13078      656E6572 
 13078      6963436F 
 13078      6D6D616E 
 13079 48ff 46524F4D 		.ascii	"FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )\000"
 13079      5F495352 
 13079      2C20302C 
 13079      20282070 
 13079      78486967 
 13080              	.LASF400:
 13081 4930 5F5F4558 		.ascii	"__EXPORT \000"
 13081      504F5254 
 13081      2000
 13082              	.LASF327:
 13083 493a 5F5F4152 		.ascii	"__ARM_FEATURE_SAT 1\000"
 13083      4D5F4645 
 13083      41545552 
 13083      455F5341 
 13083      54203100 
 13084              	.LASF1273:
 13085 494e 70784669 		.ascii	"pxFirstTCB\000"
 13085      72737454 
 13085      434200
 13086              	.LASF749:
 13087 4959 5F5F696E 		.ascii	"__int16_t_defined 1\000"
 13087      7431365F 
 13087      745F6465 
 13087      66696E65 
 13087      64203100 
 13088              	.LASF222:
 13089 496d 5F5F554C 		.ascii	"__ULLFRACT_IBIT__ 0\000"
 13089      4C465241 
 13089      43545F49 
 13089      4249545F 
 13089      5F203000 
 13090              	.LASF1109:
 13091 4981 7461736B 		.ascii	"taskRECORD_READY_PRIORITY(uxPriority) portRECORD_RE"
 13091      5245434F 
 13091      52445F52 
 13091      45414459 
 13091      5F505249 
 13092 49b4 4144595F 		.ascii	"ADY_PRIORITY( uxPriority, uxTopReadyPriority )\000"
 13092      5052494F 
 13092      52495459 
 13092      28207578 
 13092      5072696F 
 13093              	.LASF546:
 13094 49e3 5F524545 		.ascii	"_REENT_CHECK_SIGNAL_BUF(ptr) \000"
 13094      4E545F43 
 13094      4845434B 
 13094      5F534947 
 13094      4E414C5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 342


 13095              	.LASF471:
 13096 4a01 5F535444 		.ascii	"_STDDEF_H \000"
 13096      4445465F 
 13096      482000
 13097              	.LASF1084:
 13098 4a0c 746D7246 		.ascii	"tmrFIRST_FROM_ISR_COMMAND ( ( BaseT_t ) 6 )\000"
 13098      49525354 
 13098      5F46524F 
 13098      4D5F4953 
 13098      525F434F 
 13099              	.LASF1245:
 13100 4a38 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 13100      6B506C61 
 13100      63654F6E 
 13100      4576656E 
 13100      744C6973 
 13101              	.LASF526:
 13102 4a4e 5F524545 		.ascii	"_REENT_SMALL_CHECK_INIT(ptr) \000"
 13102      4E545F53 
 13102      4D414C4C 
 13102      5F434845 
 13102      434B5F49 
 13103              	.LASF842:
 13104 4a6c 636F6E66 		.ascii	"configUSE_MUTEXES 1\000"
 13104      69675553 
 13104      455F4D55 
 13104      54455845 
 13104      53203100 
 13105              	.LASF505:
 13106 4a80 5F5F6C6F 		.ascii	"__lock_acquire(lock) (_CAST_VOID 0)\000"
 13106      636B5F61 
 13106      63717569 
 13106      7265286C 
 13106      6F636B29 
 13107              	.LASF761:
 13108 4aa4 5F5F696E 		.ascii	"__int_least64_t_defined 1\000"
 13108      745F6C65 
 13108      61737436 
 13108      345F745F 
 13108      64656669 
 13109              	.LASF1026:
 13110 4abe 78517565 		.ascii	"xQueueHandle QueueHandle_t\000"
 13110      75654861 
 13110      6E646C65 
 13110      20517565 
 13110      75654861 
 13111              	.LASF1259:
 13112 4ad9 76546173 		.ascii	"vTaskSetTaskNumber\000"
 13112      6B536574 
 13112      5461736B 
 13112      4E756D62 
 13112      657200
 13113              	.LASF623:
 13114 4aec 5F5F636F 		.ascii	"__const const\000"
 13114      6E737420 
 13114      636F6E73 
 13114      7400
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 343


 13115              	.LASF634:
 13116 4afa 5F5F616C 		.ascii	"__alloc_size(x) __attribute__((__alloc_size__(x)))\000"
 13116      6C6F635F 
 13116      73697A65 
 13116      28782920 
 13116      5F5F6174 
 13117              	.LASF836:
 13118 4b2d 636F6E66 		.ascii	"configTOTAL_HEAP_SIZE ( ( size_t ) ( 8 * 1024 ) )\000"
 13118      6967544F 
 13118      54414C5F 
 13118      48454150 
 13118      5F53495A 
 13119              	.LASF1165:
 13120 4b5f 70764261 		.ascii	"pvBaseAddress\000"
 13120      73654164 
 13120      64726573 
 13120      7300
 13121              	.LASF453:
 13122 4b6d 5F545F57 		.ascii	"_T_WCHAR_ \000"
 13122      43484152 
 13122      5F2000
 13123              	.LASF241:
 13124 4b78 5F5F5541 		.ascii	"__UACCUM_FBIT__ 16\000"
 13124      4343554D 
 13124      5F464249 
 13124      545F5F20 
 13124      313600
 13125              	.LASF670:
 13126 4b8b 5F5F7761 		.ascii	"__warn_references(sym,msg) __asm__(\".section .gnu."
 13126      726E5F72 
 13126      65666572 
 13126      656E6365 
 13126      73287379 
 13127 4bbd 7761726E 		.ascii	"warning.\" #sym); __asm__(\".asciz \\\"\" msg \"\\\""
 13127      696E672E 
 13127      22202373 
 13127      796D293B 
 13127      205F5F61 
 13128 4be9 22293B20 		.ascii	"\"); __asm__(\".previous\")\000"
 13128      5F5F6173 
 13128      6D5F5F28 
 13128      222E7072 
 13128      6576696F 
 13129              	.LASF205:
 13130 4c02 5F5F5546 		.ascii	"__UFRACT_EPSILON__ 0x1P-16UR\000"
 13130      52414354 
 13130      5F455053 
 13130      494C4F4E 
 13130      5F5F2030 
 13131              	.LASF73:
 13132 4c1f 5F5F5743 		.ascii	"__WCHAR_MIN__ 0U\000"
 13132      4841525F 
 13132      4D494E5F 
 13132      5F203055 
 13132      00
 13133              	.LASF1142:
 13134 4c30 70764F77 		.ascii	"pvOwner\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 344


 13134      6E657200 
 13135              	.LASF277:
 13136 4c38 5F5F5551 		.ascii	"__UQQ_IBIT__ 0\000"
 13136      515F4942 
 13136      49545F5F 
 13136      203000
 13137              	.LASF1043:
 13138 4c47 4C495354 		.ascii	"LIST_H \000"
 13138      5F482000 
 13139              	.LASF360:
 13140 4c4f 5F4E4557 		.ascii	"_NEWLIB_VERSION \"2.4.0\"\000"
 13140      4C49425F 
 13140      56455253 
 13140      494F4E20 
 13140      22322E34 
 13141              	.LASF359:
 13142 4c67 5F4E4557 		.ascii	"_NEWLIB_VERSION_H__ 1\000"
 13142      4C49425F 
 13142      56455253 
 13142      494F4E5F 
 13142      485F5F20 
 13143              	.LASF317:
 13144 4c7d 5F5F4743 		.ascii	"__GCC_ATOMIC_LONG_LOCK_FREE 2\000"
 13144      435F4154 
 13144      4F4D4943 
 13144      5F4C4F4E 
 13144      475F4C4F 
 13145              	.LASF253:
 13146 4c9b 5F5F554C 		.ascii	"__ULACCUM_MIN__ 0.0ULK\000"
 13146      41434355 
 13146      4D5F4D49 
 13146      4E5F5F20 
 13146      302E3055 
 13147              	.LASF368:
 13148 4cb2 5F415445 		.ascii	"_ATEXIT_DYNAMIC_ALLOC 1\000"
 13148      5849545F 
 13148      44594E41 
 13148      4D49435F 
 13148      414C4C4F 
 13149              	.LASF449:
 13150 4cca 5F5F6E65 		.ascii	"__need_size_t\000"
 13150      65645F73 
 13150      697A655F 
 13150      7400
 13151              	.LASF1225:
 13152 4cd8 75785361 		.ascii	"uxSavedInterruptStatus\000"
 13152      76656449 
 13152      6E746572 
 13152      72757074 
 13152      53746174 
 13153              	.LASF336:
 13154 4cef 5F5F4152 		.ascii	"__ARM_ARCH 7\000"
 13154      4D5F4152 
 13154      43482037 
 13154      00
 13155              	.LASF1085:
 13156 4cfc 746D7243 		.ascii	"tmrCOMMAND_START_FROM_ISR ( ( BaseT_t ) 6 )\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 345


 13156      4F4D4D41 
 13156      4E445F53 
 13156      54415254 
 13156      5F46524F 
 13157              	.LASF439:
 13158 4d28 5F53495A 		.ascii	"_SIZE_T_ \000"
 13158      455F545F 
 13158      2000
 13159              	.LASF414:
 13160 4d32 5F444F54 		.ascii	"_DOTS , ...\000"
 13160      53202C20 
 13160      2E2E2E00 
 13161              	.LASF122:
 13162 4d3e 5F5F464C 		.ascii	"__FLT_RADIX__ 2\000"
 13162      545F5241 
 13162      4449585F 
 13162      5F203200 
 13163              	.LASF1127:
 13164 4d4e 6C6F6E67 		.ascii	"long long int\000"
 13164      206C6F6E 
 13164      6720696E 
 13164      7400
 13165              	.LASF550:
 13166 4d5c 5F524545 		.ascii	"_REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._m"
 13166      4E545F52 
 13166      414E4434 
 13166      385F4D55 
 13166      4C542870 
 13167 4d8f 756C7429 		.ascii	"ult)\000"
 13167      00
 13168              	.LASF788:
 13169 4d94 494E5436 		.ascii	"INT64_MAX (__INT64_MAX__)\000"
 13169      345F4D41 
 13169      5820285F 
 13169      5F494E54 
 13169      36345F4D 
 13170              	.LASF848:
 13171 4dae 636F6E66 		.ascii	"configQUEUE_REGISTRY_SIZE 10\000"
 13171      69675155 
 13171      4555455F 
 13171      52454749 
 13171      53545259 
 13172              	.LASF1028:
 13173 4dcb 78517565 		.ascii	"xQueueSetHandle QueueSetHandle_t\000"
 13173      75655365 
 13173      7448616E 
 13173      646C6520 
 13173      51756575 
 13174              	.LASF783:
 13175 4dec 55494E54 		.ascii	"UINT32_MAX (__UINT32_MAX__)\000"
 13175      33325F4D 
 13175      41582028 
 13175      5F5F5549 
 13175      4E543332 
 13176              	.LASF164:
 13177 4e08 5F5F4C44 		.ascii	"__LDBL_HAS_QUIET_NAN__ 1\000"
 13177      424C5F48 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 346


 13177      41535F51 
 13177      55494554 
 13177      5F4E414E 
 13178              	.LASF1219:
 13179 4e21 78596965 		.ascii	"xYieldRequired\000"
 13179      6C645265 
 13179      71756972 
 13179      656400
 13180              	.LASF839:
 13181 4e30 636F6E66 		.ascii	"configUSE_16_BIT_TICKS 0\000"
 13181      69675553 
 13181      455F3136 
 13181      5F424954 
 13181      5F544943 
 13182              	.LASF474:
 13183 4e49 5F505452 		.ascii	"_PTRDIFF_T \000"
 13183      44494646 
 13183      5F542000 
 13184              	.LASF1269:
 13185 4e55 7072764C 		.ascii	"prvListTaskWithinSingleList\000"
 13185      69737454 
 13185      61736B57 
 13185      69746869 
 13185      6E53696E 
 13186              	.LASF56:
 13187 4e71 5F5F494E 		.ascii	"__INT_FAST32_TYPE__ int\000"
 13187      545F4641 
 13187      53543332 
 13187      5F545950 
 13187      455F5F20 
 13188              	.LASF857:
 13189 4e89 494E434C 		.ascii	"INCLUDE_uxTaskGetStackHighWaterMark 1\000"
 13189      5544455F 
 13189      75785461 
 13189      736B4765 
 13189      74537461 
 13190              	.LASF866:
 13191 4eaf 636F6E66 		.ascii	"configPRIO_BITS 5\000"
 13191      69675052 
 13191      494F5F42 
 13191      49545320 
 13191      3500
 13192              	.LASF543:
 13193 4ec1 5F524545 		.ascii	"_REENT_CHECK_ASCTIME_BUF(ptr) \000"
 13193      4E545F43 
 13193      4845434B 
 13193      5F415343 
 13193      54494D45 
 13194              	.LASF1059:
 13195 4ee0 6C697374 		.ascii	"listLIST_IS_INITIALISED(pxList) ( ( pxList )->xList"
 13195      4C495354 
 13195      5F49535F 
 13195      494E4954 
 13195      49414C49 
 13196 4f13 456E642E 		.ascii	"End.xItemValue == portMAX_DELAY )\000"
 13196      78497465 
 13196      6D56616C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 347


 13196      7565203D 
 13196      3D20706F 
 13197              	.LASF868:
 13198 4f35 636F6E66 		.ascii	"configMAX_SYSCALL_INTERRUPT_PRIORITY ( 5 << (8 - co"
 13198      69674D41 
 13198      585F5359 
 13198      5343414C 
 13198      4C5F494E 
 13199 4f68 6E666967 		.ascii	"nfigPRIO_BITS) )\000"
 13199      5052494F 
 13199      5F424954 
 13199      53292029 
 13199      00
 13200              	.LASF509:
 13201 4f79 5F5F6C6F 		.ascii	"__lock_release(lock) (_CAST_VOID 0)\000"
 13201      636B5F72 
 13201      656C6561 
 13201      7365286C 
 13201      6F636B29 
 13202              	.LASF665:
 13203 4f9d 5F5F7374 		.ascii	"__strftimelike(fmtarg,firstvararg) __attribute__((_"
 13203      72667469 
 13203      6D656C69 
 13203      6B652866 
 13203      6D746172 
 13204 4fd0 5F666F72 		.ascii	"_format__ (__strftime__, fmtarg, firstvararg)))\000"
 13204      6D61745F 
 13204      5F20285F 
 13204      5F737472 
 13204      6674696D 
 13205              	.LASF455:
 13206 5000 5F5F5743 		.ascii	"__WCHAR_T \000"
 13206      4841525F 
 13206      542000
 13207              	.LASF376:
 13208 500b 5F5F5359 		.ascii	"__SYS_CONFIG_H__ \000"
 13208      535F434F 
 13208      4E464947 
 13208      5F485F5F 
 13208      2000
 13209              	.LASF706:
 13210 501d 4D425F43 		.ascii	"MB_CUR_MAX __locale_mb_cur_max()\000"
 13210      55525F4D 
 13210      4158205F 
 13210      5F6C6F63 
 13210      616C655F 
 13211              	.LASF590:
 13212 503e 5F5F7074 		.ascii	"__ptrvalue \000"
 13212      7276616C 
 13212      75652000 
 13213              	.LASF438:
 13214 504a 5F5F5349 		.ascii	"__SIZE_T \000"
 13214      5A455F54 
 13214      2000
 13215              	.LASF370:
 13216 5054 5F484156 		.ascii	"_HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1\000"
 13216      455F4343 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 348


 13216      5F494E48 
 13216      49424954 
 13216      5F4C4F4F 
 13217              	.LASF125:
 13218 5077 5F5F464C 		.ascii	"__FLT_MIN_EXP__ (-125)\000"
 13218      545F4D49 
 13218      4E5F4558 
 13218      505F5F20 
 13218      282D3132 
 13219              	.LASF41:
 13220 508e 5F5F494E 		.ascii	"__INT64_TYPE__ long long int\000"
 13220      5436345F 
 13220      54595045 
 13220      5F5F206C 
 13220      6F6E6720 
 13221              	.LASF206:
 13222 50ab 5F5F4C46 		.ascii	"__LFRACT_FBIT__ 31\000"
 13222      52414354 
 13222      5F464249 
 13222      545F5F20 
 13222      333100
 13223              	.LASF21:
 13224 50be 5F5F4348 		.ascii	"__CHAR_BIT__ 8\000"
 13224      41525F42 
 13224      49545F5F 
 13224      203800
 13225              	.LASF894:
 13226 50cd 706F7274 		.ascii	"portNVIC_INT_CTRL_REG ( * ( ( volatile uint32_t * )"
 13226      4E564943 
 13226      5F494E54 
 13226      5F435452 
 13226      4C5F5245 
 13227 5100 20307865 		.ascii	" 0xe000ed04 ) )\000"
 13227      30303065 
 13227      64303420 
 13227      29202900 
 13228              	.LASF323:
 13229 5110 5F5F5349 		.ascii	"__SIZEOF_WCHAR_T__ 4\000"
 13229      5A454F46 
 13229      5F574348 
 13229      41525F54 
 13229      5F5F2034 
 13230              	.LASF1145:
 13231 5125 784C4953 		.ascii	"xLIST_ITEM\000"
 13231      545F4954 
 13231      454D00
 13232              	.LASF389:
 13233 5130 5F5F4253 		.ascii	"__BSD_VISIBLE 1\000"
 13233      445F5649 
 13233      5349424C 
 13233      45203100 
 13234              	.LASF778:
 13235 5140 494E545F 		.ascii	"INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)\000"
 13235      4C454153 
 13235      5431365F 
 13235      4D494E20 
 13235      282D5F5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 349


 13236              	.LASF629:
 13237 516b 5F5F756E 		.ascii	"__unused __attribute__((__unused__))\000"
 13237      75736564 
 13237      205F5F61 
 13237      74747269 
 13237      62757465 
 13238              	.LASF970:
 13239 5190 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) \000"
 13239      65515545 
 13239      55455F52 
 13239      45434549 
 13239      56455F46 
 13240              	.LASF565:
 13241 51bd 5F524545 		.ascii	"_REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mb"
 13241      4E545F4D 
 13241      42535254 
 13241      4F574353 
 13241      5F535441 
 13242 51f0 7372746F 		.ascii	"srtowcs_state)\000"
 13242      7763735F 
 13242      73746174 
 13242      652900
 13243              	.LASF204:
 13244 51ff 5F5F5546 		.ascii	"__UFRACT_MAX__ 0XFFFFP-16UR\000"
 13244      52414354 
 13244      5F4D4158 
 13244      5F5F2030 
 13244      58464646 
 13245              	.LASF496:
 13246 521b 5F5F5F69 		.ascii	"___int_least64_t_defined 1\000"
 13246      6E745F6C 
 13246      65617374 
 13246      36345F74 
 13246      5F646566 
 13247              	.LASF637:
 13248 5236 5F416C69 		.ascii	"_Alignof(x) __alignof(x)\000"
 13248      676E6F66 
 13248      28782920 
 13248      5F5F616C 
 13248      69676E6F 
 13249              	.LASF580:
 13250 524f 5F5F5448 		.ascii	"__THROW \000"
 13250      524F5720 
 13250      00
 13251              	.LASF294:
 13252 5258 5F5F5548 		.ascii	"__UHA_FBIT__ 8\000"
 13252      415F4642 
 13252      49545F5F 
 13252      203800
 13253              	.LASF1166:
 13254 5267 756C4C65 		.ascii	"ulLengthInBytes\000"
 13254      6E677468 
 13254      496E4279 
 13254      74657300 
 13255              	.LASF96:
 13256 5277 5F5F494E 		.ascii	"__INT_LEAST32_MAX__ 0x7fffffffL\000"
 13256      545F4C45 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 350


 13256      41535433 
 13256      325F4D41 
 13256      585F5F20 
 13257              	.LASF187:
 13258 5297 5F5F5346 		.ascii	"__SFRACT_IBIT__ 0\000"
 13258      52414354 
 13258      5F494249 
 13258      545F5F20 
 13258      3000
 13259              	.LASF568:
 13260 52a9 5F524545 		.ascii	"_REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)"
 13260      4E545F4C 
 13260      3634415F 
 13260      42554628 
 13260      70747229 
 13261 52dc 00       		.ascii	"\000"
 13262              	.LASF387:
 13263 52dd 5F415446 		.ascii	"_ATFILE_SOURCE 1\000"
 13263      494C455F 
 13263      534F5552 
 13263      43452031 
 13263      00
 13264              	.LASF714:
 13265 52ee 5F5F5354 		.ascii	"__STDINT_EXP(x) __ ##x ##__\000"
 13265      44494E54 
 13265      5F455850 
 13265      28782920 
 13265      5F5F2023 
 13266              	.LASF488:
 13267 530a 5F5F4558 		.ascii	"__EXP(x) __ ##x ##__\000"
 13267      50287829 
 13267      205F5F20 
 13267      23237820 
 13267      23235F5F 
 13268              	.LASF26:
 13269 531f 5F5F4259 		.ascii	"__BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 13269      54455F4F 
 13269      52444552 
 13269      5F5F205F 
 13269      5F4F5244 
 13270              	.LASF1235:
 13271 5346 75784172 		.ascii	"uxArraySize\000"
 13271      72617953 
 13271      697A6500 
 13272              	.LASF1288:
 13273 5352 70785265 		.ascii	"pxReadyTasksLists\000"
 13273      61647954 
 13273      61736B73 
 13273      4C697374 
 13273      7300
 13274              	.LASF407:
 13275 5364 5F4E4F54 		.ascii	"_NOTHROW \000"
 13275      48524F57 
 13275      2000
 13276              	.LASF357:
 13277 536e 5F414E53 		.ascii	"_ANSIDECL_H_ \000"
 13277      49444543 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 351


 13277      4C5F485F 
 13277      2000
 13278              	.LASF891:
 13279 537c 706F7274 		.ascii	"portSTACK_GROWTH ( -1 )\000"
 13279      53544143 
 13279      4B5F4752 
 13279      4F575448 
 13279      2028202D 
 13280              	.LASF904:
 13281 5394 706F7274 		.ascii	"portEXIT_CRITICAL() vPortExitCritical()\000"
 13281      45584954 
 13281      5F435249 
 13281      54494341 
 13281      4C282920 
 13282              	.LASF1154:
 13283 53bc 6552756E 		.ascii	"eRunning\000"
 13283      6E696E67 
 13283      00
 13284              	.LASF394:
 13285 53c5 5F5F504F 		.ascii	"__POSIX_VISIBLE 200809\000"
 13285      5349585F 
 13285      56495349 
 13285      424C4520 
 13285      32303038 
 13286              	.LASF1027:
 13287 53dc 7853656D 		.ascii	"xSemaphoreHandle SemaphoreHandle_t\000"
 13287      6170686F 
 13287      72654861 
 13287      6E646C65 
 13287      2053656D 
 13288              	.LASF201:
 13289 53ff 5F5F5546 		.ascii	"__UFRACT_FBIT__ 16\000"
 13289      52414354 
 13289      5F464249 
 13289      545F5F20 
 13289      313600
 13290              	.LASF1042:
 13291 5412 494E435F 		.ascii	"INC_TASK_H \000"
 13291      5441534B 
 13291      5F482000 
 13292              	.LASF282:
 13293 541e 5F5F5544 		.ascii	"__UDQ_FBIT__ 64\000"
 13293      515F4642 
 13293      49545F5F 
 13293      20363400 
 13294              	.LASF610:
 13295 542e 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_MEMCPY 1\000"
 13295      55434C49 
 13295      4B455F42 
 13295      55494C54 
 13295      494E5F4D 
 13296              	.LASF156:
 13297 544a 5F5F4C44 		.ascii	"__LDBL_MAX_10_EXP__ 308\000"
 13297      424C5F4D 
 13297      41585F31 
 13297      305F4558 
 13297      505F5F20 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 352


 13298              	.LASF844:
 13299 5462 636F6E66 		.ascii	"configUSE_COUNTING_SEMAPHORES 1\000"
 13299      69675553 
 13299      455F434F 
 13299      554E5449 
 13299      4E475F53 
 13300              	.LASF1061:
 13301 5482 74736B4B 		.ascii	"tskKERNEL_VERSION_MAJOR 8\000"
 13301      45524E45 
 13301      4C5F5645 
 13301      5253494F 
 13301      4E5F4D41 
 13302              	.LASF910:
 13303 549c 706F7274 		.ascii	"portRESET_READY_PRIORITY(uxPriority,uxReadyPrioriti"
 13303      52455345 
 13303      545F5245 
 13303      4144595F 
 13303      5052494F 
 13304 54cf 65732920 		.ascii	"es) ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority"
 13304      28207578 
 13304      52656164 
 13304      79507269 
 13304      6F726974 
 13305 5502 20292029 		.ascii	" ) )\000"
 13305      00
 13306              	.LASF169:
 13307 5507 5F5F4445 		.ascii	"__DEC32_MAX__ 9.999999E96DF\000"
 13307      4333325F 
 13307      4D41585F 
 13307      5F20392E 
 13307      39393939 
 13308              	.LASF1205:
 13309 5523 7854696D 		.ascii	"xTimeToWake\000"
 13309      65546F57 
 13309      616B6500 
 13310              	.LASF1024:
 13311 552f 706F7274 		.ascii	"portTickType TickT_t\000"
 13311      5469636B 
 13311      54797065 
 13311      20546963 
 13311      6B545F74 
 13312              	.LASF770:
 13313 5544 494E5438 		.ascii	"INT8_MAX (__INT8_MAX__)\000"
 13313      5F4D4158 
 13313      20285F5F 
 13313      494E5438 
 13313      5F4D4158 
 13314              	.LASF754:
 13315 555c 5F55494E 		.ascii	"_UINT64_T_DECLARED \000"
 13315      5436345F 
 13315      545F4445 
 13315      434C4152 
 13315      45442000 
 13316              	.LASF1116:
 13317 5570 756E7369 		.ascii	"unsigned int\000"
 13317      676E6564 
 13317      20696E74 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 353


 13317      00
 13318              	.LASF441:
 13319 557d 5F53495A 		.ascii	"_SIZE_T_DEFINED_ \000"
 13319      455F545F 
 13319      44454649 
 13319      4E45445F 
 13319      2000
 13320              	.LASF739:
 13321 558f 5F5F4C45 		.ascii	"__LEAST8 \"hh\"\000"
 13321      41535438 
 13321      20226868 
 13321      2200
 13322              	.LASF362:
 13323 559d 5F5F4E45 		.ascii	"__NEWLIB_MINOR__ 4\000"
 13323      574C4942 
 13323      5F4D494E 
 13323      4F525F5F 
 13323      203400
 13324              	.LASF121:
 13325 55b0 5F5F4445 		.ascii	"__DEC_EVAL_METHOD__ 2\000"
 13325      435F4556 
 13325      414C5F4D 
 13325      4554484F 
 13325      445F5F20 
 13326              	.LASF822:
 13327 55c6 55494E54 		.ascii	"UINT32_C(x) __UINT32_C(x)\000"
 13327      33325F43 
 13327      28782920 
 13327      5F5F5549 
 13327      4E543332 
 13328              	.LASF232:
 13329 55e0 5F5F5553 		.ascii	"__USACCUM_IBIT__ 8\000"
 13329      41434355 
 13329      4D5F4942 
 13329      49545F5F 
 13329      203800
 13330              	.LASF1011:
 13331 55f3 636F6E66 		.ascii	"configUSE_TICKLESS_IDLE 0\000"
 13331      69675553 
 13331      455F5449 
 13331      434B4C45 
 13331      53535F49 
 13332              	.LASF1068:
 13333 560d 7461736B 		.ascii	"taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()\000"
 13333      44495341 
 13333      424C455F 
 13333      494E5445 
 13333      52525550 
 13334              	.LASF793:
 13335 563f 494E545F 		.ascii	"INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)\000"
 13335      46415354 
 13335      385F4D49 
 13335      4E20282D 
 13335      5F5F494E 
 13336              	.LASF652:
 13337 5666 5F5F7265 		.ascii	"__restrict \000"
 13337      73747269 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 354


 13337      63742000 
 13338              	.LASF654:
 13339 5672 5F5F7072 		.ascii	"__predict_false(exp) __builtin_expect((exp), 0)\000"
 13339      65646963 
 13339      745F6661 
 13339      6C736528 
 13339      65787029 
 13340              	.LASF262:
 13341 56a2 5F5F554C 		.ascii	"__ULLACCUM_IBIT__ 32\000"
 13341      4C414343 
 13341      554D5F49 
 13341      4249545F 
 13341      5F203332 
 13342              	.LASF245:
 13343 56b7 5F5F5541 		.ascii	"__UACCUM_EPSILON__ 0x1P-16UK\000"
 13343      4343554D 
 13343      5F455053 
 13343      494C4F4E 
 13343      5F5F2030 
 13344              	.LASF372:
 13345 56d4 5F465657 		.ascii	"_FVWRITE_IN_STREAMIO 1\000"
 13345      52495445 
 13345      5F494E5F 
 13345      53545245 
 13345      414D494F 
 13346              	.LASF464:
 13347 56eb 5F574348 		.ascii	"_WCHAR_T_DECLARED \000"
 13347      41525F54 
 13347      5F444543 
 13347      4C415245 
 13347      442000
 13348              	.LASF1279:
 13349 56fe 70727644 		.ascii	"prvDeleteTCB\000"
 13349      656C6574 
 13349      65544342 
 13349      00
 13350              	.LASF87:
 13351 570b 5F5F494E 		.ascii	"__INT64_MAX__ 0x7fffffffffffffffLL\000"
 13351      5436345F 
 13351      4D41585F 
 13351      5F203078 
 13351      37666666 
 13352              	.LASF470:
 13353 572e 5F535953 		.ascii	"_SYS_REENT_H_ \000"
 13353      5F524545 
 13353      4E545F48 
 13353      5F2000
 13354              	.LASF120:
 13355 573d 5F5F464C 		.ascii	"__FLT_EVAL_METHOD__ 0\000"
 13355      545F4556 
 13355      414C5F4D 
 13355      4554484F 
 13355      445F5F20 
 13356              	.LASF1121:
 13357 5753 73686F72 		.ascii	"short int\000"
 13357      7420696E 
 13357      7400
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 355


 13358              	.LASF797:
 13359 575d 494E545F 		.ascii	"INT_FAST16_MAX (__INT_FAST16_MAX__)\000"
 13359      46415354 
 13359      31365F4D 
 13359      41582028 
 13359      5F5F494E 
 13360              	.LASF1006:
 13361 5781 706F7274 		.ascii	"portPRIVILEGE_BIT ( ( UBaseT_t ) 0x00 )\000"
 13361      50524956 
 13361      494C4547 
 13361      455F4249 
 13361      54202820 
 13362              	.LASF1149:
 13363 57a9 75784E75 		.ascii	"uxNumberOfItems\000"
 13363      6D626572 
 13363      4F664974 
 13363      656D7300 
 13364              	.LASF67:
 13365 57b9 5F5F5343 		.ascii	"__SCHAR_MAX__ 0x7f\000"
 13365      4841525F 
 13365      4D41585F 
 13365      5F203078 
 13365      376600
 13366              	.LASF732:
 13367 57cc 5F5F494E 		.ascii	"__INT16 \"h\"\000"
 13367      54313620 
 13367      22682200 
 13368              	.LASF532:
 13369 57d8 5F52414E 		.ascii	"_RAND48_MULT_2 (0x0005)\000"
 13369      4434385F 
 13369      4D554C54 
 13369      5F322028 
 13369      30783030 
 13370              	.LASF416:
 13371 57f0 5F455846 		.ascii	"_EXFUN_NOTHROW(name,proto) name proto _NOTHROW\000"
 13371      554E5F4E 
 13371      4F544852 
 13371      4F57286E 
 13371      616D652C 
 13372              	.LASF1274:
 13373 581f 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 13373      61736B43 
 13373      6865636B 
 13373      46726565 
 13373      53746163 
 13374              	.LASF476:
 13375 583a 5F545F50 		.ascii	"_T_PTRDIFF \000"
 13375      54524449 
 13375      46462000 
 13376              	.LASF276:
 13377 5846 5F5F5551 		.ascii	"__UQQ_FBIT__ 8\000"
 13377      515F4642 
 13377      49545F5F 
 13377      203800
 13378              	.LASF1250:
 13379 5855 7078556E 		.ascii	"pxUnblockedTCB\000"
 13379      626C6F63 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 356


 13379      6B656454 
 13379      434200
 13380              	.LASF1083:
 13381 5864 746D7243 		.ascii	"tmrCOMMAND_DELETE ( ( BaseT_t ) 5 )\000"
 13381      4F4D4D41 
 13381      4E445F44 
 13381      454C4554 
 13381      45202820 
 13382              	.LASF1267:
 13383 5888 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 13383      61736B49 
 13383      73546173 
 13383      6B537573 
 13383      70656E64 
 13384              	.LASF173:
 13385 589f 5F5F4445 		.ascii	"__DEC64_MIN_EXP__ (-382)\000"
 13385      4336345F 
 13385      4D494E5F 
 13385      4558505F 
 13385      5F20282D 
 13386              	.LASF244:
 13387 58b8 5F5F5541 		.ascii	"__UACCUM_MAX__ 0XFFFFFFFFP-16UK\000"
 13387      4343554D 
 13387      5F4D4158 
 13387      5F5F2030 
 13387      58464646 
 13388              	.LASF518:
 13389 58d8 5F54494D 		.ascii	"_TIME_T_ long\000"
 13389      455F545F 
 13389      206C6F6E 
 13389      6700
 13390              	.LASF1070:
 13391 58e6 7461736B 		.ascii	"taskSCHEDULER_SUSPENDED ( ( BaseT_t ) 0 )\000"
 13391      53434845 
 13391      44554C45 
 13391      525F5355 
 13391      5350454E 
 13392              	.LASF1187:
 13393 5910 75784D75 		.ascii	"uxMutexesHeld\000"
 13393      74657865 
 13393      7348656C 
 13393      6400
 13394              	.LASF1277:
 13395 591e 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 13395      736B4765 
 13395      74537461 
 13395      636B4869 
 13395      67685761 
 13396              	.LASF700:
 13397 593a 616C6C6F 		.ascii	"alloca\000"
 13397      636100
 13398              	.LASF209:
 13399 5941 5F5F4C46 		.ascii	"__LFRACT_MAX__ 0X7FFFFFFFP-31LR\000"
 13399      52414354 
 13399      5F4D4158 
 13399      5F5F2030 
 13399      58374646 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 357


 13400              	.LASF325:
 13401 5961 5F5F5349 		.ascii	"__SIZEOF_PTRDIFF_T__ 4\000"
 13401      5A454F46 
 13401      5F505452 
 13401      44494646 
 13401      5F545F5F 
 13402              	.LASF897:
 13403 5978 706F7274 		.ascii	"portEND_SWITCHING_ISR(xSwitchRequired) if( xSwitchR"
 13403      454E445F 
 13403      53574954 
 13403      4348494E 
 13403      475F4953 
 13404 59ab 65717569 		.ascii	"equired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSE"
 13404      72656420 
 13404      2920706F 
 13404      72744E56 
 13404      49435F49 
 13405 59de 545F4249 		.ascii	"T_BIT\000"
 13405      5400
 13406              	.LASF482:
 13407 59e4 5F505452 		.ascii	"_PTRDIFF_T_DECLARED \000"
 13407      44494646 
 13407      5F545F44 
 13407      45434C41 
 13407      52454420 
 13408              	.LASF493:
 13409 59f9 5F5F5F69 		.ascii	"___int_least8_t_defined 1\000"
 13409      6E745F6C 
 13409      65617374 
 13409      385F745F 
 13409      64656669 
 13410              	.LASF350:
 13411 5a13 5F5F4152 		.ascii	"__ARM_FEATURE_IDIV 1\000"
 13411      4D5F4645 
 13411      41545552 
 13411      455F4944 
 13411      49562031 
 13412              	.LASF1153:
 13413 5a28 5461736B 		.ascii	"TaskHandle_t\000"
 13413      48616E64 
 13413      6C655F74 
 13413      00
 13414              	.LASF27:
 13415 5a35 5F5F464C 		.ascii	"__FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 13415      4F41545F 
 13415      574F5244 
 13415      5F4F5244 
 13415      45525F5F 
 13416              	.LASF835:
 13417 5a62 636F6E66 		.ascii	"configMINIMAL_STACK_SIZE ( ( unsigned short ) 256 )"
 13417      69674D49 
 13417      4E494D41 
 13417      4C5F5354 
 13417      41434B5F 
 13418 5a95 00       		.ascii	"\000"
 13419              	.LASF463:
 13420 5a96 5F474343 		.ascii	"_GCC_WCHAR_T \000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 358


 13420      5F574348 
 13420      41525F54 
 13420      2000
 13421              	.LASF538:
 13422 5aa4 5F524545 		.ascii	"_REENT_INIT(var) { 0, &(var).__sf[0], &(var).__sf[1"
 13422      4E545F49 
 13422      4E495428 
 13422      76617229 
 13422      207B2030 
 13423 5ad7 5D2C2026 		.ascii	"], &(var).__sf[2], 0, \"\", 0, _NULL, 0, _NULL, _NU"
 13423      28766172 
 13423      292E5F5F 
 13423      73665B32 
 13423      5D2C2030 
 13424 5b08 4C4C2C20 		.ascii	"LL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, \"\", "
 13424      302C205F 
 13424      4E554C4C 
 13424      2C205F4E 
 13424      554C4C2C 
 13425 5b39 7B302C20 		.ascii	"{0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_"
 13425      302C2030 
 13425      2C20302C 
 13425      20302C20 
 13425      302C2030 
 13426 5b6c 302C205F 		.ascii	"0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0"
 13426      52414E44 
 13426      34385F53 
 13426      4545445F 
 13426      312C205F 
 13427 5b9f 2C205F52 		.ascii	", _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {"
 13427      414E4434 
 13427      385F4D55 
 13427      4C545F31 
 13427      2C205F52 
 13428 5bd2 302C207B 		.ascii	"0, {0}}, {0, {0}}, {0, {0}}, \"\", \"\", 0, {0, {0}"
 13428      307D7D2C 
 13428      207B302C 
 13428      207B307D 
 13428      7D2C207B 
 13429 5c01 7D2C207B 		.ascii	"}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REE"
 13429      302C207B 
 13429      307D7D2C 
 13429      207B302C 
 13429      207B307D 
 13430 5c34 4E545F49 		.ascii	"NT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }\000"
 13430      4E49545F 
 13430      41544558 
 13430      4954205F 
 13430      4E554C4C 
 13431              	.LASF689:
 13432 5c5e 5F5F756E 		.ascii	"__unlocks(...) __lock_annotate(unlock_function(__VA"
 13432      6C6F636B 
 13432      73282E2E 
 13432      2E29205F 
 13432      5F6C6F63 
 13433 5c91 5F415247 		.ascii	"_ARGS__))\000"
 13433      535F5F29 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 359


 13433      2900
 13434              	.LASF1081:
 13435 5c9b 746D7243 		.ascii	"tmrCOMMAND_STOP ( ( BaseT_t ) 3 )\000"
 13435      4F4D4D41 
 13435      4E445F53 
 13435      544F5020 
 13435      28202820 
 13436              	.LASF37:
 13437 5cbd 5F5F5349 		.ascii	"__SIG_ATOMIC_TYPE__ int\000"
 13437      475F4154 
 13437      4F4D4943 
 13437      5F545950 
 13437      455F5F20 
 13438              	.LASF607:
 13439 5cd5 5F5F636F 		.ascii	"__compiler_membar() __asm __volatile(\" \" : : : \""
 13439      6D70696C 
 13439      65725F6D 
 13439      656D6261 
 13439      72282920 
 13440 5d05 6D656D6F 		.ascii	"memory\")\000"
 13440      72792229 
 13440      00
 13441              	.LASF956:
 13442 5d0e 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 13442      65474956 
 13442      455F4D55 
 13442      5445585F 
 13442      52454355 
 13443              	.LASF763:
 13444 5d39 5F5F696E 		.ascii	"__int_fast16_t_defined 1\000"
 13444      745F6661 
 13444      73743136 
 13444      5F745F64 
 13444      6566696E 
 13445              	.LASF1152:
 13446 5d52 4C697374 		.ascii	"List_t\000"
 13446      5F7400
 13447              	.LASF975:
 13448 5d59 74726163 		.ascii	"traceTASK_DELETE(pxTaskToDelete) \000"
 13448      65544153 
 13448      4B5F4445 
 13448      4C455445 
 13448      28707854 
 13449              	.LASF179:
 13450 5d7b 5F5F4445 		.ascii	"__DEC128_MANT_DIG__ 34\000"
 13450      43313238 
 13450      5F4D414E 
 13450      545F4449 
 13450      475F5F20 
 13451              	.LASF375:
 13452 5d92 5F554E42 		.ascii	"_UNBUF_STREAM_OPT 1\000"
 13452      55465F53 
 13452      54524541 
 13452      4D5F4F50 
 13452      54203100 
 13453              	.LASF401:
 13454 5da6 5F5F494D 		.ascii	"__IMPORT \000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 360


 13454      504F5254 
 13454      2000
 13455              	.LASF523:
 13456 5db0 5F415445 		.ascii	"_ATEXIT_SIZE 32\000"
 13456      5849545F 
 13456      53495A45 
 13456      20333200 
 13457              	.LASF296:
 13458 5dc0 5F5F5553 		.ascii	"__USA_FBIT__ 16\000"
 13458      415F4642 
 13458      49545F5F 
 13458      20313600 
 13459              	.LASF1247:
 13460 5dd0 78546963 		.ascii	"xTicksToWait\000"
 13460      6B73546F 
 13460      57616974 
 13460      00
 13461              	.LASF501:
 13462 5ddd 5F5F6C6F 		.ascii	"__lock_init(lock) (_CAST_VOID 0)\000"
 13462      636B5F69 
 13462      6E697428 
 13462      6C6F636B 
 13462      2920285F 
 13463              	.LASF356:
 13464 5dfe 5F5F4945 		.ascii	"__IEEE_LITTLE_ENDIAN \000"
 13464      45455F4C 
 13464      4954544C 
 13464      455F454E 
 13464      4449414E 
 13465              	.LASF154:
 13466 5e14 5F5F4C44 		.ascii	"__LDBL_MIN_10_EXP__ (-307)\000"
 13466      424C5F4D 
 13466      494E5F31 
 13466      305F4558 
 13466      505F5F20 
 13467              	.LASF1124:
 13468 5e2f 6C6F6E67 		.ascii	"long int\000"
 13468      20696E74 
 13468      00
 13469              	.LASF1229:
 13470 5e38 78546173 		.ascii	"xTaskResumeAll\000"
 13470      6B526573 
 13470      756D6541 
 13470      6C6C00
 13471              	.LASF899:
 13472 5e47 706F7274 		.ascii	"portSET_INTERRUPT_MASK_FROM_ISR() ulPortSetInterrup"
 13472      5345545F 
 13472      494E5445 
 13472      52525550 
 13472      545F4D41 
 13473 5e7a 744D6173 		.ascii	"tMask()\000"
 13473      6B282900 
 13474              	.LASF311:
 13475 5e82 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR_LOCK_FREE 2\000"
 13475      435F4154 
 13475      4F4D4943 
 13475      5F434841 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 361


 13475      525F4C4F 
 13476              	.LASF418:
 13477 5ea0 5F455850 		.ascii	"_EXPARM(name,proto) (* name) proto\000"
 13477      41524D28 
 13477      6E616D65 
 13477      2C70726F 
 13477      746F2920 
 13478              	.LASF210:
 13479 5ec3 5F5F4C46 		.ascii	"__LFRACT_EPSILON__ 0x1P-31LR\000"
 13479      52414354 
 13479      5F455053 
 13479      494C4F4E 
 13479      5F5F2030 
 13480              	.LASF405:
 13481 5ee0 5F424547 		.ascii	"_BEGIN_STD_C \000"
 13481      494E5F53 
 13481      54445F43 
 13481      2000
 13482              	.LASF973:
 13483 5eee 74726163 		.ascii	"traceTASK_CREATE(pxNewTCB) \000"
 13483      65544153 
 13483      4B5F4352 
 13483      45415445 
 13483      2870784E 
 13484              	.LASF642:
 13485 5f0a 5F5F6D61 		.ascii	"__malloc_like __attribute__((__malloc__))\000"
 13485      6C6C6F63 
 13485      5F6C696B 
 13485      65205F5F 
 13485      61747472 
 13486              	.LASF843:
 13487 5f34 636F6E66 		.ascii	"configMAX_CO_ROUTINE_PRIORITIES ( 2 )\000"
 13487      69674D41 
 13487      585F434F 
 13487      5F524F55 
 13487      54494E45 
 13488              	.LASF907:
 13489 5f5a 706F7274 		.ascii	"portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPo"
 13489      53555050 
 13489      52455353 
 13489      5F544943 
 13489      4B535F41 
 13490 5f8d 72745375 		.ascii	"rtSuppressTicksAndSleep( xExpectedIdleTime )\000"
 13490      70707265 
 13490      73735469 
 13490      636B7341 
 13490      6E64536C 
 13491              	.LASF332:
 13492 5fba 5F5F4152 		.ascii	"__ARM_SIZEOF_MINIMAL_ENUM 1\000"
 13492      4D5F5349 
 13492      5A454F46 
 13492      5F4D494E 
 13492      494D414C 
 13493              	.LASF397:
 13494 5fd6 5F504F49 		.ascii	"_POINTER_INT long\000"
 13494      4E544552 
 13494      5F494E54 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 362


 13494      206C6F6E 
 13494      6700
 13495              	.LASF969:
 13496 5fe8 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR(pxQueue) \000"
 13496      65515545 
 13496      55455F52 
 13496      45434549 
 13496      56455F46 
 13497              	.LASF335:
 13498 600e 5F5F6172 		.ascii	"__arm__ 1\000"
 13498      6D5F5F20 
 13498      3100
 13499              	.LASF1063:
 13500 6018 74736B4B 		.ascii	"tskKERNEL_VERSION_BUILD 2\000"
 13500      45524E45 
 13500      4C5F5645 
 13500      5253494F 
 13500      4E5F4255 
 13501              	.LASF948:
 13502 6032 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) \000"
 13502      65424C4F 
 13502      434B494E 
 13502      475F4F4E 
 13502      5F515545 
 13503              	.LASF1151:
 13504 605b 784C6973 		.ascii	"xListEnd\000"
 13504      74456E64 
 13504      00
 13505              	.LASF981:
 13506 6064 74726163 		.ascii	"traceTASK_RESUME_FROM_ISR(pxTaskToResume) \000"
 13506      65544153 
 13506      4B5F5245 
 13506      53554D45 
 13506      5F46524F 
 13507              	.LASF604:
 13508 608f 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_STDARG 1\000"
 13508      55434C49 
 13508      4B455F42 
 13508      55494C54 
 13508      494E5F53 
 13509              	.LASF445:
 13510 60ab 5F5F5F69 		.ascii	"___int_size_t_h \000"
 13510      6E745F73 
 13510      697A655F 
 13510      745F6820 
 13510      00
 13511              	.LASF399:
 13512 60bc 5F5F5241 		.ascii	"__RAND_MAX 0x7fffffff\000"
 13512      4E445F4D 
 13512      41582030 
 13512      78376666 
 13512      66666666 
 13513              	.LASF1208:
 13514 60d2 78436F6E 		.ascii	"xConstTickCount\000"
 13514      73745469 
 13514      636B436F 
 13514      756E7400 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 363


 13515              	.LASF621:
 13516 60e2 5F5F5354 		.ascii	"__STRING(x) #x\000"
 13516      52494E47 
 13516      28782920 
 13516      237800
 13517              	.LASF452:
 13518 60f1 5F574348 		.ascii	"_WCHAR_T \000"
 13518      41525F54 
 13518      2000
 13519              	.LASF934:
 13520 60fb 494E434C 		.ascii	"INCLUDE_xTaskGetCurrentTaskHandle 0\000"
 13520      5544455F 
 13520      78546173 
 13520      6B476574 
 13520      43757272 
 13521              	.LASF673:
 13522 611f 5F5F4642 		.ascii	"__FBSDID(s) struct __hack\000"
 13522      53444944 
 13522      28732920 
 13522      73747275 
 13522      6374205F 
 13523              	.LASF1156:
 13524 6139 65426C6F 		.ascii	"eBlocked\000"
 13524      636B6564 
 13524      00
 13525              	.LASF932:
 13526 6142 636F6E66 		.ascii	"configASSERT_DEFINED 1\000"
 13526      69674153 
 13526      53455254 
 13526      5F444546 
 13526      494E4544 
 13527              	.LASF802:
 13528 6159 494E545F 		.ascii	"INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)\000"
 13528      46415354 
 13528      36345F4D 
 13528      494E2028 
 13528      2D5F5F49 
 13529              	.LASF873:
 13530 6182 70645452 		.ascii	"pdTRUE ( ( BaseT_t ) 1 )\000"
 13530      55452028 
 13530      20282042 
 13530      61736554 
 13530      5F742029 
 13531              	.LASF487:
 13532 619b 5F4D4143 		.ascii	"_MACHINE__DEFAULT_TYPES_H \000"
 13532      48494E45 
 13532      5F5F4445 
 13532      4641554C 
 13532      545F5459 
 13533              	.LASF22:
 13534 61b6 5F5F4249 		.ascii	"__BIGGEST_ALIGNMENT__ 8\000"
 13534      47474553 
 13534      545F414C 
 13534      49474E4D 
 13534      454E545F 
 13535              	.LASF233:
 13536 61ce 5F5F5553 		.ascii	"__USACCUM_MIN__ 0.0UHK\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 364


 13536      41434355 
 13536      4D5F4D49 
 13536      4E5F5F20 
 13536      302E3055 
 13537              	.LASF481:
 13538 61e5 5F474343 		.ascii	"_GCC_PTRDIFF_T \000"
 13538      5F505452 
 13538      44494646 
 13538      5F542000 
 13539              	.LASF608:
 13540 61f5 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_NEXT_ARG 1\000"
 13540      55434C49 
 13540      4B455F42 
 13540      55494C54 
 13540      494E5F4E 
 13541              	.LASF850:
 13542 6213 494E434C 		.ascii	"INCLUDE_vTaskPrioritySet 1\000"
 13542      5544455F 
 13542      76546173 
 13542      6B507269 
 13542      6F726974 
 13543              	.LASF293:
 13544 622e 5F5F5441 		.ascii	"__TA_IBIT__ 64\000"
 13544      5F494249 
 13544      545F5F20 
 13544      363400
 13545              	.LASF856:
 13546 623d 494E434C 		.ascii	"INCLUDE_vTaskDelay 1\000"
 13546      5544455F 
 13546      76546173 
 13546      6B44656C 
 13546      61792031 
 13547              	.LASF1212:
 13548 6252 75785461 		.ascii	"uxTaskPriorityGet\000"
 13548      736B5072 
 13548      696F7269 
 13548      74794765 
 13548      7400
 13549              	.LASF1177:
 13550 6264 75735374 		.ascii	"usStackHighWaterMark\000"
 13550      61636B48 
 13550      69676857 
 13550      61746572 
 13550      4D61726B 
 13551              	.LASF718:
 13552 6279 63686172 		.ascii	"char\000"
 13552      00
 13553              	.LASF499:
 13554 627e 5F5F4C4F 		.ascii	"__LOCK_INIT(class,lock) static int lock = 0;\000"
 13554      434B5F49 
 13554      4E495428 
 13554      636C6173 
 13554      732C6C6F 
 13555              	.LASF1207:
 13556 62ab 7853686F 		.ascii	"xShouldDelay\000"
 13556      756C6444 
 13556      656C6179 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 365


 13556      00
 13557              	.LASF460:
 13558 62b8 5F574348 		.ascii	"_WCHAR_T_H \000"
 13558      41525F54 
 13558      5F482000 
 13559              	.LASF876:
 13560 62c4 65727251 		.ascii	"errQUEUE_EMPTY ( ( BaseT_t ) 0 )\000"
 13560      55455545 
 13560      5F454D50 
 13560      54592028 
 13560      20282042 
 13561              	.LASF1025:
 13562 62e5 78546173 		.ascii	"xTaskHandle TaskHandle_t\000"
 13562      6B48616E 
 13562      646C6520 
 13562      5461736B 
 13562      48616E64 
 13563              	.LASF1079:
 13564 62fe 746D7243 		.ascii	"tmrCOMMAND_START ( ( BaseT_t ) 1 )\000"
 13564      4F4D4D41 
 13564      4E445F53 
 13564      54415254 
 13564      20282028 
 13565              	.LASF922:
 13566 6321 494E434C 		.ascii	"INCLUDE_xQueueGetMutexHolder 0\000"
 13566      5544455F 
 13566      78517565 
 13566      75654765 
 13566      744D7574 
 13567              	.LASF340:
 13568 6340 5F5F4152 		.ascii	"__ARM_ARCH_ISA_THUMB 2\000"
 13568      4D5F4152 
 13568      43485F49 
 13568      53415F54 
 13568      48554D42 
 13569              	.LASF71:
 13570 6357 5F5F4C4F 		.ascii	"__LONG_LONG_MAX__ 0x7fffffffffffffffLL\000"
 13570      4E475F4C 
 13570      4F4E475F 
 13570      4D41585F 
 13570      5F203078 
 13571              	.LASF373:
 13572 637e 5F465345 		.ascii	"_FSEEK_OPTIMIZATION 1\000"
 13572      454B5F4F 
 13572      5054494D 
 13572      495A4154 
 13572      494F4E20 
 13573              	.LASF777:
 13574 6394 55494E54 		.ascii	"UINT16_MAX (__UINT16_MAX__)\000"
 13574      31365F4D 
 13574      41582028 
 13574      5F5F5549 
 13574      4E543136 
 13575              	.LASF1102:
 13576 63b0 74736B49 		.ascii	"tskIDLE_STACK_SIZE configMINIMAL_STACK_SIZE\000"
 13576      444C455F 
 13576      53544143 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 366


 13576      4B5F5349 
 13576      5A452063 
 13577              	.LASF681:
 13578 63dc 5F5F6172 		.ascii	"__arg_type_tag(arg_kind,arg_idx,type_tag_idx) \000"
 13578      675F7479 
 13578      70655F74 
 13578      61672861 
 13578      72675F6B 
 13579              	.LASF1010:
 13580 640b 636F6E66 		.ascii	"configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2\000"
 13580      69674558 
 13580      50454354 
 13580      45445F49 
 13580      444C455F 
 13581              	.LASF1172:
 13582 6433 78546173 		.ascii	"xTaskNumber\000"
 13582      6B4E756D 
 13582      62657200 
 13583              	.LASF719:
 13584 643f 73686F72 		.ascii	"short\000"
 13584      7400
 13585              	.LASF571:
 13586 6445 5F524545 		.ascii	"_REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(va"
 13586      4E545F49 
 13586      4E49545F 
 13586      50545228 
 13586      76617229 
 13587 6478 72292929 		.ascii	"r))); _REENT_INIT_PTR_ZEROED(var); }\000"
 13587      3B205F52 
 13587      45454E54 
 13587      5F494E49 
 13587      545F5054 
 13588              	.LASF677:
 13589 649d 5F5F434F 		.ascii	"__COPYRIGHT(s) struct __hack\000"
 13589      50595249 
 13589      47485428 
 13589      73292073 
 13589      74727563 
 13590              	.LASF202:
 13591 64ba 5F5F5546 		.ascii	"__UFRACT_IBIT__ 0\000"
 13591      52414354 
 13591      5F494249 
 13591      545F5F20 
 13591      3000
 13592              	.LASF329:
 13593 64cc 5F5F4152 		.ascii	"__ARM_32BIT_STATE 1\000"
 13593      4D5F3332 
 13593      4249545F 
 13593      53544154 
 13593      45203100 
 13594              	.LASF1220:
 13595 64e0 76546173 		.ascii	"vTaskSuspend\000"
 13595      6B537573 
 13595      70656E64 
 13595      00
 13596              	.LASF655:
 13597 64ed 5F5F7365 		.ascii	"__sentinel __attribute__((__sentinel__))\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 367


 13597      6E74696E 
 13597      656C205F 
 13597      5F617474 
 13597      72696275 
 13598              	.LASF93:
 13599 6516 5F5F494E 		.ascii	"__INT8_C(c) c\000"
 13599      54385F43 
 13599      28632920 
 13599      6300
 13600              	.LASF207:
 13601 6524 5F5F4C46 		.ascii	"__LFRACT_IBIT__ 0\000"
 13601      52414354 
 13601      5F494249 
 13601      545F5F20 
 13601      3000
 13602              	.LASF841:
 13603 6536 636F6E66 		.ascii	"configUSE_CO_ROUTINES 0\000"
 13603      69675553 
 13603      455F434F 
 13603      5F524F55 
 13603      54494E45 
 13604              	.LASF472:
 13605 654e 5F535444 		.ascii	"_STDDEF_H_ \000"
 13605      4445465F 
 13605      485F2000 
 13606              	.LASF1218:
 13607 655a 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 13607      696F7269 
 13607      74795573 
 13607      65644F6E 
 13607      456E7472 
 13608              	.LASF139:
 13609 6570 5F5F4442 		.ascii	"__DBL_MIN_EXP__ (-1021)\000"
 13609      4C5F4D49 
 13609      4E5F4558 
 13609      505F5F20 
 13609      282D3130 
 13610              	.LASF1282:
 13611 6588 76546173 		.ascii	"vTaskPriorityInherit\000"
 13611      6B507269 
 13611      6F726974 
 13611      79496E68 
 13611      65726974 
 13612              	.LASF920:
 13613 659d 494E434C 		.ascii	"INCLUDE_xTaskGetIdleTaskHandle 0\000"
 13613      5544455F 
 13613      78546173 
 13613      6B476574 
 13613      49646C65 
 13614              	.LASF1171:
 13615 65be 70635461 		.ascii	"pcTaskName\000"
 13615      736B4E61 
 13615      6D6500
 13616              	.LASF711:
 13617 65c9 494E435F 		.ascii	"INC_FREERTOS_H \000"
 13617      46524545 
 13617      52544F53 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 368


 13617      5F482000 
 13618              	.LASF667:
 13619 65d9 5F5F7072 		.ascii	"__printf0like(fmtarg,firstvararg) \000"
 13619      696E7466 
 13619      306C696B 
 13619      6528666D 
 13619      74617267 
 13620              	.LASF1004:
 13621 65fc 706F7274 		.ascii	"portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() \000"
 13621      434F4E46 
 13621      49475552 
 13621      455F5449 
 13621      4D45525F 
 13622              	.LASF725:
 13623 6626 73686F72 		.ascii	"short +1\000"
 13623      74202B31 
 13623      00
 13624              	.LASF508:
 13625 662f 5F5F6C6F 		.ascii	"__lock_try_acquire_recursive(lock) (_CAST_VOID 0)\000"
 13625      636B5F74 
 13625      72795F61 
 13625      63717569 
 13625      72655F72 
 13626              	.LASF627:
 13627 6661 5F5F6465 		.ascii	"__dead2 __attribute__((__noreturn__))\000"
 13627      61643220 
 13627      5F5F6174 
 13627      74726962 
 13627      7574655F 
 13628              	.LASF742:
 13629 6687 5F5F4C45 		.ascii	"__LEAST64 \"ll\"\000"
 13629      41535436 
 13629      3420226C 
 13629      6C2200
 13630              	.LASF896:
 13631 6696 706F7274 		.ascii	"portYIELD() vPortYield()\000"
 13631      5949454C 
 13631      44282920 
 13631      76506F72 
 13631      74596965 
 13632              	.LASF826:
 13633 66af 55494E54 		.ascii	"UINTMAX_C(x) __UINTMAX_C(x)\000"
 13633      4D41585F 
 13633      43287829 
 13633      205F5F55 
 13633      494E544D 
 13634              	.LASF393:
 13635 66cb 5F5F4D49 		.ascii	"__MISC_VISIBLE 1\000"
 13635      53435F56 
 13635      49534942 
 13635      4C452031 
 13635      00
 13636              	.LASF1048:
 13637 66dc 6C697374 		.ascii	"listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem "
 13637      4745545F 
 13637      4C495354 
 13637      5F495445 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 369


 13637      4D5F5641 
 13638 670f 292D3E78 		.ascii	")->xItemValue )\000"
 13638      4974656D 
 13638      56616C75 
 13638      65202900 
 13639              	.LASF497:
 13640 671f 5F5F4558 		.ascii	"__EXP\000"
 13640      5000
 13641              	.LASF492:
 13642 6725 5F5F5F69 		.ascii	"___int64_t_defined 1\000"
 13642      6E743634 
 13642      5F745F64 
 13642      6566696E 
 13642      65642031 
 13643              	.LASF162:
 13644 673a 5F5F4C44 		.ascii	"__LDBL_HAS_DENORM__ 1\000"
 13644      424C5F48 
 13644      41535F44 
 13644      454E4F52 
 13644      4D5F5F20 
 13645              	.LASF833:
 13646 6750 636F6E66 		.ascii	"configCPU_CLOCK_HZ ( ( unsigned long )120000000ul )"
 13646      69674350 
 13646      555F434C 
 13646      4F434B5F 
 13646      485A2028 
 13647 6783 00       		.ascii	"\000"
 13648              	.LASF1179:
 13649 6784 74736B54 		.ascii	"tskTaskControlBlock\000"
 13649      61736B43 
 13649      6F6E7472 
 13649      6F6C426C 
 13649      6F636B00 
 13650              	.LASF1204:
 13651 6798 7854696D 		.ascii	"xTimeIncrement\000"
 13651      65496E63 
 13651      72656D65 
 13651      6E7400
 13652              	.LASF594:
 13653 67a7 5F5F4245 		.ascii	"__BEGIN_DECLS \000"
 13653      47494E5F 
 13653      4445434C 
 13653      532000
 13654              	.LASF107:
 13655 67b6 5F5F5549 		.ascii	"__UINT64_C(c) c ## ULL\000"
 13655      4E543634 
 13655      5F432863 
 13655      29206320 
 13655      23232055 
 13656              	.LASF545:
 13657 67cd 5F524545 		.ascii	"_REENT_CHECK_MISC(ptr) \000"
 13657      4E545F43 
 13657      4845434B 
 13657      5F4D4953 
 13657      43287074 
 13658              	.LASF1209:
 13659 67e5 76546173 		.ascii	"vTaskDelay\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 370


 13659      6B44656C 
 13659      617900
 13660              	.LASF606:
 13661 67f0 5F5F474E 		.ascii	"__GNUC_VA_LIST_COMPATIBILITY 1\000"
 13661      55435F56 
 13661      415F4C49 
 13661      53545F43 
 13661      4F4D5041 
 13662              	.LASF1041:
 13663 680f 784C6973 		.ascii	"xList List_t\000"
 13663      74204C69 
 13663      73745F74 
 13663      00
 13664              	.LASF48:
 13665 681c 5F5F494E 		.ascii	"__INT_LEAST32_TYPE__ long int\000"
 13665      545F4C45 
 13665      41535433 
 13665      325F5459 
 13665      50455F5F 
 13666              	.LASF1029:
 13667 683a 78517565 		.ascii	"xQueueSetMemberHandle QueueSetMemberHandle_t\000"
 13667      75655365 
 13667      744D656D 
 13667      62657248 
 13667      616E646C 
 13668              	.LASF1030:
 13669 6867 7854696D 		.ascii	"xTimeOutType TimeOut_t\000"
 13669      654F7574 
 13669      54797065 
 13669      2054696D 
 13669      654F7574 
 13670              	.LASF977:
 13671 687e 74726163 		.ascii	"traceTASK_DELAY() \000"
 13671      65544153 
 13671      4B5F4445 
 13671      4C415928 
 13671      292000
 13672              	.LASF984:
 13673 6891 74726163 		.ascii	"traceTIMER_CREATE_FAILED() \000"
 13673      6554494D 
 13673      45525F43 
 13673      52454154 
 13673      455F4641 
 13674              	.LASF1091:
 13675 68ad 7854696D 		.ascii	"xTimerChangePeriod(xTimer,xNewPeriod,xTicksToWait) "
 13675      65724368 
 13675      616E6765 
 13675      50657269 
 13675      6F642878 
 13676 68e0 7854696D 		.ascii	"xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE"
 13676      65724765 
 13676      6E657269 
 13676      63436F6D 
 13676      6D616E64 
 13677 6913 5F504552 		.ascii	"_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )\000"
 13677      494F442C 
 13677      20282078 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 371


 13677      4E657750 
 13677      6572696F 
 13678              	.LASF1243:
 13679 6945 7578546F 		.ascii	"uxTopPriority\000"
 13679      70507269 
 13679      6F726974 
 13679      7900
 13680              	.LASF106:
 13681 6953 5F5F5549 		.ascii	"__UINT_LEAST64_MAX__ 0xffffffffffffffffULL\000"
 13681      4E545F4C 
 13681      45415354 
 13681      36345F4D 
 13681      41585F5F 
 13682              	.LASF1234:
 13683 697e 70785461 		.ascii	"pxTaskStatusArray\000"
 13683      736B5374 
 13683      61747573 
 13683      41727261 
 13683      7900
 13684              	.LASF197:
 13685 6990 5F5F4652 		.ascii	"__FRACT_IBIT__ 0\000"
 13685      4143545F 
 13685      49424954 
 13685      5F5F2030 
 13685      00
 13686              	.LASF999:
 13687 69a1 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup,uxBi"
 13687      65455645 
 13687      4E545F47 
 13687      524F5550 
 13687      5F534554 
 13688 69d4 7473546F 		.ascii	"tsToSet) \000"
 13688      53657429 
 13688      2000
 13689              	.LASF1038:
 13690 69de 746D7254 		.ascii	"tmrTIMER_CALLBACK TimerCallbackFunction_t\000"
 13690      494D4552 
 13690      5F43414C 
 13690      4C424143 
 13690      4B205469 
 13691              	.LASF363:
 13692 6a08 5F5F4E45 		.ascii	"__NEWLIB_PATCHLEVEL__ 0\000"
 13692      574C4942 
 13692      5F504154 
 13692      43484C45 
 13692      56454C5F 
 13693              	.LASF23:
 13694 6a20 5F5F4F52 		.ascii	"__ORDER_LITTLE_ENDIAN__ 1234\000"
 13694      4445525F 
 13694      4C495454 
 13694      4C455F45 
 13694      4E444941 
 13695              	.LASF511:
 13696 6a3d 5F5F7369 		.ascii	"__size_t\000"
 13696      7A655F74 
 13696      00
 13697              	.LASF611:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 372


 13698 6a46 5F5F4343 		.ascii	"__CC_SUPPORTS_INLINE 1\000"
 13698      5F535550 
 13698      504F5254 
 13698      535F494E 
 13698      4C494E45 
 13699              	.LASF579:
 13700 6a5d 5F5F444F 		.ascii	"__DOTS , ...\000"
 13700      5453202C 
 13700      202E2E2E 
 13700      00
 13701              	.LASF172:
 13702 6a6a 5F5F4445 		.ascii	"__DEC64_MANT_DIG__ 16\000"
 13702      4336345F 
 13702      4D414E54 
 13702      5F444947 
 13702      5F5F2031 
 13703              	.LASF1128:
 13704 6a80 6C6F6E67 		.ascii	"long long unsigned int\000"
 13704      206C6F6E 
 13704      6720756E 
 13704      7369676E 
 13704      65642069 
 13705              	.LASF792:
 13706 6a97 55494E54 		.ascii	"UINT_LEAST64_MAX (__UINT_LEAST64_MAX__)\000"
 13706      5F4C4541 
 13706      53543634 
 13706      5F4D4158 
 13706      20285F5F 
 13707              	.LASF126:
 13708 6abf 5F5F464C 		.ascii	"__FLT_MIN_10_EXP__ (-37)\000"
 13708      545F4D49 
 13708      4E5F3130 
 13708      5F455850 
 13708      5F5F2028 
 13709              	.LASF252:
 13710 6ad8 5F5F554C 		.ascii	"__ULACCUM_IBIT__ 32\000"
 13710      41434355 
 13710      4D5F4942 
 13710      49545F5F 
 13710      20333200 
 13711              	.LASF1252:
 13712 6aec 70784576 		.ascii	"pxEventListItem\000"
 13712      656E744C 
 13712      69737449 
 13712      74656D00 
 13713              	.LASF68:
 13714 6afc 5F5F5348 		.ascii	"__SHRT_MAX__ 0x7fff\000"
 13714      52545F4D 
 13714      41585F5F 
 13714      20307837 
 13714      66666600 
 13715              	.LASF795:
 13716 6b10 55494E54 		.ascii	"UINT_FAST8_MAX (__UINT_FAST8_MAX__)\000"
 13716      5F464153 
 13716      54385F4D 
 13716      41582028 
 13716      5F5F5549 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 373


 13717              	.LASF265:
 13718 6b34 5F5F554C 		.ascii	"__ULLACCUM_EPSILON__ 0x1P-32ULLK\000"
 13718      4C414343 
 13718      554D5F45 
 13718      5053494C 
 13718      4F4E5F5F 
 13719              	.LASF486:
 13720 6b55 5F4D4143 		.ascii	"_MACHINE__TYPES_H \000"
 13720      48494E45 
 13720      5F5F5459 
 13720      5045535F 
 13720      482000
 13721              	.LASF272:
 13722 6b68 5F5F4451 		.ascii	"__DQ_FBIT__ 63\000"
 13722      5F464249 
 13722      545F5F20 
 13722      363300
 13723              	.LASF390:
 13724 6b77 5F5F474E 		.ascii	"__GNU_VISIBLE 0\000"
 13724      555F5649 
 13724      5349424C 
 13724      45203000 
 13725              	.LASF1131:
 13726 6b87 75696E74 		.ascii	"uint16_t\000"
 13726      31365F74 
 13726      00
 13727              	.LASF477:
 13728 6b90 5F5F5054 		.ascii	"__PTRDIFF_T \000"
 13728      52444946 
 13728      465F5420 
 13728      00
 13729              	.LASF1216:
 13730 6b9d 75784E65 		.ascii	"uxNewPriority\000"
 13730      77507269 
 13730      6F726974 
 13730      7900
 13731              	.LASF1092:
 13732 6bab 7854696D 		.ascii	"xTimerDelete(xTimer,xTicksToWait) xTimerGenericComm"
 13732      65724465 
 13732      6C657465 
 13732      28785469 
 13732      6D65722C 
 13733 6bde 616E6428 		.ascii	"and( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTi"
 13733      20282078 
 13733      54696D65 
 13733      7220292C 
 13733      20746D72 
 13734 6c11 636B7354 		.ascii	"cksToWait ) )\000"
 13734      6F576169 
 13734      74202920 
 13734      2900
 13735              	.LASF562:
 13736 6c1f 5F524545 		.ascii	"_REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctom"
 13736      4E545F57 
 13736      43544F4D 
 13736      425F5354 
 13736      41544528 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 374


 13737 6c52 625F7374 		.ascii	"b_state)\000"
 13737      61746529 
 13737      00
 13738              	.LASF1009:
 13739 6c5b 76506F72 		.ascii	"vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockT"
 13739      74467265 
 13739      65416C69 
 13739      676E6564 
 13739      28707642 
 13740 6c8e 6F467265 		.ascii	"oFree )\000"
 13740      65202900 
 13741              	.LASF992:
 13742 6c96 74726163 		.ascii	"traceEVENT_GROUP_SYNC_BLOCK(xEventGroup,uxBitsToSet"
 13742      65455645 
 13742      4E545F47 
 13742      524F5550 
 13742      5F53594E 
 13743 6cc9 2C757842 		.ascii	",uxBitsToWaitFor) \000"
 13743      69747354 
 13743      6F576169 
 13743      74466F72 
 13743      292000
 13744              	.LASF1126:
 13745 6cdc 6C6F6E67 		.ascii	"long unsigned int\000"
 13745      20756E73 
 13745      69676E65 
 13745      6420696E 
 13745      7400
 13746              	.LASF55:
 13747 6cee 5F5F494E 		.ascii	"__INT_FAST16_TYPE__ int\000"
 13747      545F4641 
 13747      53543136 
 13747      5F545950 
 13747      455F5F20 
 13748              	.LASF987:
 13749 6d06 74726163 		.ascii	"traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMes"
 13749      6554494D 
 13749      45525F43 
 13749      4F4D4D41 
 13749      4E445F52 
 13750 6d39 73616765 		.ascii	"sageValue) \000"
 13750      56616C75 
 13750      65292000 
 13751              	.LASF877:
 13752 6d45 65727251 		.ascii	"errQUEUE_FULL ( ( BaseT_t ) 0 )\000"
 13752      55455545 
 13752      5F46554C 
 13752      4C202820 
 13752      28204261 
 13753              	.LASF228:
 13754 6d65 5F5F5341 		.ascii	"__SACCUM_MIN__ (-0X1P7HK-0X1P7HK)\000"
 13754      4343554D 
 13754      5F4D494E 
 13754      5F5F2028 
 13754      2D305831 
 13755              	.LASF214:
 13756 6d87 5F5F554C 		.ascii	"__ULFRACT_MAX__ 0XFFFFFFFFP-32ULR\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 375


 13756      46524143 
 13756      545F4D41 
 13756      585F5F20 
 13756      30584646 
 13757              	.LASF865:
 13758 6da9 636F6E66 		.ascii	"configNET_MASK3 0\000"
 13758      69674E45 
 13758      545F4D41 
 13758      534B3320 
 13758      3000
 13759              	.LASF1239:
 13760 6dbb 78546173 		.ascii	"xTaskIncrementTick\000"
 13760      6B496E63 
 13760      72656D65 
 13760      6E745469 
 13760      636B00
 13761              	.LASF890:
 13762 6dce 706F7274 		.ascii	"portMAX_DELAY ( TickType_t ) 0xffffffffUL\000"
 13762      4D41585F 
 13762      44454C41 
 13762      59202820 
 13762      5469636B 
 13763              	.LASF249:
 13764 6df8 5F5F4C41 		.ascii	"__LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK\000"
 13764      4343554D 
 13764      5F4D4158 
 13764      5F5F2030 
 13764      58374646 
 13765              	.LASF35:
 13766 6e20 5F5F4348 		.ascii	"__CHAR16_TYPE__ short unsigned int\000"
 13766      41523136 
 13766      5F545950 
 13766      455F5F20 
 13766      73686F72 
 13767              	.LASF563:
 13768 6e43 5F524545 		.ascii	"_REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrle"
 13768      4E545F4D 
 13768      42524C45 
 13768      4E5F5354 
 13768      41544528 
 13769 6e76 6E5F7374 		.ascii	"n_state)\000"
 13769      61746529 
 13769      00
 13770              	.LASF624:
 13771 6e7f 5F5F7369 		.ascii	"__signed signed\000"
 13771      676E6564 
 13771      20736967 
 13771      6E656400 
 13772              	.LASF721:
 13773 6e8f 6C6F6E67 		.ascii	"long\000"
 13773      00
 13774              	.LASF284:
 13775 6e94 5F5F5554 		.ascii	"__UTQ_FBIT__ 128\000"
 13775      515F4642 
 13775      49545F5F 
 13775      20313238 
 13775      00
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 376


 13776              	.LASF1266:
 13777 6ea5 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 13777      64644375 
 13777      7272656E 
 13777      74546173 
 13777      6B546F44 
 13778              	.LASF556:
 13779 6ec4 5F524545 		.ascii	"_REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctim"
 13779      4E545F41 
 13779      53435449 
 13779      4D455F42 
 13779      55462870 
 13780 6ef7 655F6275 		.ascii	"e_buf)\000"
 13780      662900
 13781              	.LASF1089:
 13782 6efe 7854696D 		.ascii	"xTimerStart(xTimer,xTicksToWait) xTimerGenericComma"
 13782      65725374 
 13782      61727428 
 13782      7854696D 
 13782      65722C78 
 13783 6f31 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCou"
 13783      28207854 
 13783      696D6572 
 13783      20292C20 
 13783      746D7243 
 13784 6f64 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 13784      20292C20 
 13784      4E554C4C 
 13784      2C202820 
 13784      78546963 
 13785              	.LASF889:
 13786 6f85 706F7274 		.ascii	"portBASE_TYPE long\000"
 13786      42415345 
 13786      5F545950 
 13786      45206C6F 
 13786      6E6700
 13787              	.LASF12:
 13788 6f98 5F5F4649 		.ascii	"__FINITE_MATH_ONLY__ 0\000"
 13788      4E495445 
 13788      5F4D4154 
 13788      485F4F4E 
 13788      4C595F5F 
 13789              	.LASF1141:
 13790 6faf 70785072 		.ascii	"pxPrevious\000"
 13790      6576696F 
 13790      757300
 13791              	.LASF109:
 13792 6fba 5F5F494E 		.ascii	"__INT_FAST16_MAX__ 0x7fffffff\000"
 13792      545F4641 
 13792      53543136 
 13792      5F4D4158 
 13792      5F5F2030 
 13793              	.LASF715:
 13794 6fd8 5F5F6861 		.ascii	"__have_longlong64 1\000"
 13794      76655F6C 
 13794      6F6E676C 
 13794      6F6E6736 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 377


 13794      34203100 
 13795              	.LASF745:
 13796 6fec 5F55494E 		.ascii	"_UINT8_T_DECLARED \000"
 13796      54385F54 
 13796      5F444543 
 13796      4C415245 
 13796      442000
 13797              	.LASF554:
 13798 6fff 5F524545 		.ascii	"_REENT_MP_P5S(ptr) ((ptr)->_p5s)\000"
 13798      4E545F4D 
 13798      505F5035 
 13798      53287074 
 13798      72292028 
 13799              	.LASF1202:
 13800 7020 76546173 		.ascii	"vTaskDelayUntil\000"
 13800      6B44656C 
 13800      6179556E 
 13800      74696C00 
 13801              	.LASF757:
 13802 7030 5F55494E 		.ascii	"_UINTPTR_T_DECLARED \000"
 13802      54505452 
 13802      5F545F44 
 13802      45434C41 
 13802      52454420 
 13803              	.LASF1222:
 13804 7045 76546173 		.ascii	"vTaskResume\000"
 13804      6B526573 
 13804      756D6500 
 13805              	.LASF459:
 13806 7051 5F574348 		.ascii	"_WCHAR_T_DEFINED \000"
 13806      41525F54 
 13806      5F444546 
 13806      494E4544 
 13806      2000
 13807              	.LASF1002:
 13808 7063 74726163 		.ascii	"tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend,pvPara"
 13808      6550454E 
 13808      445F4655 
 13808      4E435F43 
 13808      414C4C5F 
 13809 7096 6D657465 		.ascii	"meter1,ulParameter2,ret) \000"
 13809      72312C75 
 13809      6C506172 
 13809      616D6574 
 13809      6572322C 
 13810              	.LASF1227:
 13811 70b0 76546173 		.ascii	"vTaskEndScheduler\000"
 13811      6B456E64 
 13811      53636865 
 13811      64756C65 
 13811      7200
 13812              	.LASF687:
 13813 70c2 5F5F7472 		.ascii	"__trylocks_exclusive(...) __lock_annotate(exclusive"
 13813      796C6F63 
 13813      6B735F65 
 13813      78636C75 
 13813      73697665 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 378


 13814 70f5 5F747279 		.ascii	"_trylock_function(__VA_ARGS__))\000"
 13814      6C6F636B 
 13814      5F66756E 
 13814      6374696F 
 13814      6E285F5F 
 13815              	.LASF916:
 13816 7115 4D50555F 		.ascii	"MPU_WRAPPERS_H \000"
 13816      57524150 
 13816      50455253 
 13816      5F482000 
 13817              	.LASF1307:
 13818 7125 46726565 		.ascii	"FreeRTOS/tasks.c\000"
 13818      52544F53 
 13818      2F746173 
 13818      6B732E63 
 13818      00
 13819              	.LASF1137:
 13820 7136 5469636B 		.ascii	"TickType_t\000"
 13820      54797065 
 13820      5F7400
 13821              	.LASF213:
 13822 7141 5F5F554C 		.ascii	"__ULFRACT_MIN__ 0.0ULR\000"
 13822      46524143 
 13822      545F4D49 
 13822      4E5F5F20 
 13822      302E3055 
 13823              	.LASF808:
 13824 7158 53495A45 		.ascii	"SIZE_MAX (__SIZE_MAX__)\000"
 13824      5F4D4158 
 13824      20285F5F 
 13824      53495A45 
 13824      5F4D4158 
 13825              	.LASF273:
 13826 7170 5F5F4451 		.ascii	"__DQ_IBIT__ 0\000"
 13826      5F494249 
 13826      545F5F20 
 13826      3000
 13827              	.LASF566:
 13828 717e 5F524545 		.ascii	"_REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrt"
 13828      4E545F57 
 13828      4352544F 
 13828      4D425F53 
 13828      54415445 
 13829 71b1 6F6D625F 		.ascii	"omb_state)\000"
 13829      73746174 
 13829      652900
 13830              	.LASF1264:
 13831 71bc 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 13831      6865636B 
 13831      5461736B 
 13831      73576169 
 13831      74696E67 
 13832              	.LASF309:
 13833 71dc 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1\000"
 13833      435F4841 
 13833      56455F53 
 13833      594E435F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 379


 13833      434F4D50 
 13834              	.LASF746:
 13835 7201 5F5F696E 		.ascii	"__int8_t_defined 1\000"
 13835      74385F74 
 13835      5F646566 
 13835      696E6564 
 13835      203100
 13836              	.LASF660:
 13837 7214 5F5F636F 		.ascii	"__containerof(x,s,m) ({ const volatile __typeof(((s"
 13837      6E746169 
 13837      6E65726F 
 13837      6628782C 
 13837      732C6D29 
 13838 7247 202A2930 		.ascii	" *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volat"
 13838      292D3E6D 
 13838      29202A5F 
 13838      5F78203D 
 13838      20287829 
 13839 727a 696C6520 		.ascii	"ile char *)__x - __offsetof(s, m));})\000"
 13839      63686172 
 13839      202A295F 
 13839      5F78202D 
 13839      205F5F6F 
 13840              	.LASF1077:
 13841 72a0 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK ( ( BaseT_t ) -1 )\000"
 13841      4F4D4D41 
 13841      4E445F45 
 13841      58454355 
 13841      54455F43 
 13842              	.LASF440:
 13843 72cf 5F425344 		.ascii	"_BSD_SIZE_T_ \000"
 13843      5F53495A 
 13843      455F545F 
 13843      2000
 13844              	.LASF695:
 13845 72dd 5F5F6E6F 		.ascii	"__no_lock_analysis __lock_annotate(no_thread_safety"
 13845      5F6C6F63 
 13845      6B5F616E 
 13845      616C7973 
 13845      6973205F 
 13846 7310 5F616E61 		.ascii	"_analysis)\000"
 13846      6C797369 
 13846      732900
 13847              	.LASF456:
 13848 731b 5F574348 		.ascii	"_WCHAR_T_ \000"
 13848      41525F54 
 13848      5F2000
 13849              	.LASF753:
 13850 7326 5F494E54 		.ascii	"_INT64_T_DECLARED \000"
 13850      36345F54 
 13850      5F444543 
 13850      4C415245 
 13850      442000
 13851              	.LASF1203:
 13852 7339 70785072 		.ascii	"pxPreviousWakeTime\000"
 13852      6576696F 
 13852      75735761 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 380


 13852      6B655469 
 13852      6D6500
 13853              	.LASF66:
 13854 734c 5F5F4758 		.ascii	"__GXX_ABI_VERSION 1009\000"
 13854      585F4142 
 13854      495F5645 
 13854      5253494F 
 13854      4E203130 
 13855              	.LASF1240:
 13856 7363 78537769 		.ascii	"xSwitchRequired\000"
 13856      74636852 
 13856      65717569 
 13856      72656400 
 13857              	.LASF454:
 13858 7373 5F545F57 		.ascii	"_T_WCHAR \000"
 13858      43484152 
 13858      2000
 13859              	.LASF1016:
 13860 737d 636F6E66 		.ascii	"configUSE_TIME_SLICING 1\000"
 13860      69675553 
 13860      455F5449 
 13860      4D455F53 
 13860      4C494349 
 13861              	.LASF1101:
 13862 7396 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE\000"
 13862      57524150 
 13862      50455253 
 13862      5F494E43 
 13862      4C554445 
 13863              	.LASF480:
 13864 73ba 5F5F5F69 		.ascii	"___int_ptrdiff_t_h \000"
 13864      6E745F70 
 13864      74726469 
 13864      66665F74 
 13864      5F682000 
 13865              	.LASF905:
 13866 73ce 706F7274 		.ascii	"portTASK_FUNCTION_PROTO(vFunction,pvParameters) voi"
 13866      5441534B 
 13866      5F46554E 
 13866      4354494F 
 13866      4E5F5052 
 13867 7401 64207646 		.ascii	"d vFunction( void *pvParameters )\000"
 13867      756E6374 
 13867      696F6E28 
 13867      20766F69 
 13867      64202A70 
 13868              	.LASF1054:
 13869 7423 6C697374 		.ascii	"listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNum"
 13869      43555252 
 13869      454E545F 
 13869      4C495354 
 13869      5F4C454E 
 13870 7456 6265724F 		.ascii	"berOfItems )\000"
 13870      66497465 
 13870      6D732029 
 13870      00
 13871              	.LASF701:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 381


 13872 7463 616C6C6F 		.ascii	"alloca(size) __builtin_alloca(size)\000"
 13872      63612873 
 13872      697A6529 
 13872      205F5F62 
 13872      75696C74 
 13873              	.LASF519:
 13874 7487 5F434C4F 		.ascii	"_CLOCKID_T_ unsigned long\000"
 13874      434B4944 
 13874      5F545F20 
 13874      756E7369 
 13874      676E6564 
 13875              	.LASF542:
 13876 74a1 5F524545 		.ascii	"_REENT_CHECK_TM(ptr) \000"
 13876      4E545F43 
 13876      4845434B 
 13876      5F544D28 
 13876      70747229 
 13877              	.LASF285:
 13878 74b7 5F5F5554 		.ascii	"__UTQ_IBIT__ 0\000"
 13878      515F4942 
 13878      49545F5F 
 13878      203000
 13879              	.LASF288:
 13880 74c6 5F5F5341 		.ascii	"__SA_FBIT__ 15\000"
 13880      5F464249 
 13880      545F5F20 
 13880      313500
 13881              	.LASF462:
 13882 74d5 5F5F494E 		.ascii	"__INT_WCHAR_T_H \000"
 13882      545F5743 
 13882      4841525F 
 13882      545F4820 
 13882      00
 13883              	.LASF1000:
 13884 74e6 74726163 		.ascii	"traceEVENT_GROUP_DELETE(xEventGroup) \000"
 13884      65455645 
 13884      4E545F47 
 13884      524F5550 
 13884      5F44454C 
 13885              	.LASF422:
 13886 750c 5F434153 		.ascii	"_CAST_VOID (void)\000"
 13886      545F564F 
 13886      49442028 
 13886      766F6964 
 13886      2900
 13887              	.LASF814:
 13888 751e 57434841 		.ascii	"WCHAR_MAX (__WCHAR_MAX__)\000"
 13888      525F4D41 
 13888      5820285F 
 13888      5F574348 
 13888      41525F4D 
 13889              	.LASF929:
 13890 7538 494E434C 		.ascii	"INCLUDE_xTaskResumeFromISR 1\000"
 13890      5544455F 
 13890      78546173 
 13890      6B526573 
 13890      756D6546 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 382


 13891              	.LASF353:
 13892 7555 5F5F454C 		.ascii	"__ELF__ 1\000"
 13892      465F5F20 
 13892      3100
 13893              	.LASF781:
 13894 755f 494E5433 		.ascii	"INT32_MIN (-__INT32_MAX__ - 1)\000"
 13894      325F4D49 
 13894      4E20282D 
 13894      5F5F494E 
 13894      5433325F 
 13895              	.LASF342:
 13896 757e 5F5F5448 		.ascii	"__THUMBEL__ 1\000"
 13896      554D4245 
 13896      4C5F5F20 
 13896      3100
 13897              	.LASF1299:
 13898 758c 7578546F 		.ascii	"uxTopReadyPriority\000"
 13898      70526561 
 13898      64795072 
 13898      696F7269 
 13898      747900
 13899              	.LASF267:
 13900 759f 5F5F5151 		.ascii	"__QQ_IBIT__ 0\000"
 13900      5F494249 
 13900      545F5F20 
 13900      3000
 13901              	.LASF963:
 13902 75ad 74726163 		.ascii	"traceQUEUE_RECEIVE(pxQueue) \000"
 13902      65515545 
 13902      55455F52 
 13902      45434549 
 13902      56452870 
 13903              	.LASF1039:
 13904 75ca 70645441 		.ascii	"pdTASK_CODE TaskFunction_t\000"
 13904      534B5F43 
 13904      4F444520 
 13904      5461736B 
 13904      46756E63 
 13905              	.LASF824:
 13906 75e5 55494E54 		.ascii	"UINT64_C(x) __UINT64_C(x)\000"
 13906      36345F43 
 13906      28782920 
 13906      5F5F5549 
 13906      4E543634 
 13907              	.LASF1206:
 13908 75ff 78416C72 		.ascii	"xAlreadyYielded\000"
 13908      65616479 
 13908      5969656C 
 13908      64656400 
 13909              	.LASF1231:
 13910 760f 78546963 		.ascii	"xTicks\000"
 13910      6B7300
 13911              	.LASF34:
 13912 7616 5F5F5549 		.ascii	"__UINTMAX_TYPE__ long long unsigned int\000"
 13912      4E544D41 
 13912      585F5459 
 13912      50455F5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 383


 13912      206C6F6E 
 13913              	.LASF410:
 13914 763e 5F4E4F41 		.ascii	"_NOARGS void\000"
 13914      52475320 
 13914      766F6964 
 13914      00
 13915              	.LASF774:
 13916 764b 55494E54 		.ascii	"UINT_LEAST8_MAX (__UINT_LEAST8_MAX__)\000"
 13916      5F4C4541 
 13916      5354385F 
 13916      4D415820 
 13916      285F5F55 
 13917              	.LASF281:
 13918 7671 5F5F5553 		.ascii	"__USQ_IBIT__ 0\000"
 13918      515F4942 
 13918      49545F5F 
 13918      203000
 13919              	.LASF1067:
 13920 7680 7461736B 		.ascii	"taskEXIT_CRITICAL() portEXIT_CRITICAL()\000"
 13920      45584954 
 13920      5F435249 
 13920      54494341 
 13920      4C282920 
 13921              	.LASF3:
 13922 76a8 5F5F474E 		.ascii	"__GNUC_MINOR__ 4\000"
 13922      55435F4D 
 13922      494E4F52 
 13922      5F5F2034 
 13922      00
 13923              	.LASF52:
 13924 76b9 5F5F5549 		.ascii	"__UINT_LEAST32_TYPE__ long unsigned int\000"
 13924      4E545F4C 
 13924      45415354 
 13924      33325F54 
 13924      5950455F 
 13925              	.LASF279:
 13926 76e1 5F5F5548 		.ascii	"__UHQ_IBIT__ 0\000"
 13926      515F4942 
 13926      49545F5F 
 13926      203000
 13927              	.LASF692:
 13928 76f0 5F5F7265 		.ascii	"__requires_exclusive(...) __lock_annotate(exclusive"
 13928      71756972 
 13928      65735F65 
 13928      78636C75 
 13928      73697665 
 13929 7723 5F6C6F63 		.ascii	"_locks_required(__VA_ARGS__))\000"
 13929      6B735F72 
 13929      65717569 
 13929      72656428 
 13929      5F5F5641 
 13930              	.LASF531:
 13931 7741 5F52414E 		.ascii	"_RAND48_MULT_1 (0xdeec)\000"
 13931      4434385F 
 13931      4D554C54 
 13931      5F312028 
 13931      30786465 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 384


 13932              	.LASF33:
 13933 7759 5F5F494E 		.ascii	"__INTMAX_TYPE__ long long int\000"
 13933      544D4158 
 13933      5F545950 
 13933      455F5F20 
 13933      6C6F6E67 
 13934              	.LASF1015:
 13935 7777 706F7274 		.ascii	"portTASK_USES_FLOATING_POINT() \000"
 13935      5441534B 
 13935      5F555345 
 13935      535F464C 
 13935      4F415449 
 13936              	.LASF194:
 13937 7797 5F5F5553 		.ascii	"__USFRACT_MAX__ 0XFFP-8UHR\000"
 13937      46524143 
 13937      545F4D41 
 13937      585F5F20 
 13937      30584646 
 13938              	.LASF316:
 13939 77b2 5F5F4743 		.ascii	"__GCC_ATOMIC_INT_LOCK_FREE 2\000"
 13939      435F4154 
 13939      4F4D4943 
 13939      5F494E54 
 13939      5F4C4F43 
 13940              	.LASF527:
 13941 77cf 5F52414E 		.ascii	"_RAND48_SEED_0 (0x330e)\000"
 13941      4434385F 
 13941      53454544 
 13941      5F302028 
 13941      30783333 
 13942              	.LASF188:
 13943 77e7 5F5F5346 		.ascii	"__SFRACT_MIN__ (-0.5HR-0.5HR)\000"
 13943      52414354 
 13943      5F4D494E 
 13943      5F5F2028 
 13943      2D302E35 
 13944              	.LASF909:
 13945 7805 706F7274 		.ascii	"portRECORD_READY_PRIORITY(uxPriority,uxReadyPriorit"
 13945      5245434F 
 13945      52445F52 
 13945      45414459 
 13945      5F505249 
 13946 7838 69657329 		.ascii	"ies) ( uxReadyPriorities ) |= ( 1UL << ( uxPriority"
 13946      20282075 
 13946      78526561 
 13946      64795072 
 13946      696F7269 
 13947 786b 20292029 		.ascii	" ) )\000"
 13947      00
 13948              	.LASF522:
 13949 7870 5F5F4C6F 		.ascii	"__Long long\000"
 13949      6E67206C 
 13949      6F6E6700 
 13950              	.LASF495:
 13951 787c 5F5F5F69 		.ascii	"___int_least32_t_defined 1\000"
 13951      6E745F6C 
 13951      65617374 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 385


 13951      33325F74 
 13951      5F646566 
 13952              	.LASF447:
 13953 7897 5F53495A 		.ascii	"_SIZET_ \000"
 13953      45545F20 
 13953      00
 13954              	.LASF1173:
 13955 78a0 65437572 		.ascii	"eCurrentState\000"
 13955      72656E74 
 13955      53746174 
 13955      6500
 13956              	.LASF235:
 13957 78ae 5F5F5553 		.ascii	"__USACCUM_EPSILON__ 0x1P-8UHK\000"
 13957      41434355 
 13957      4D5F4550 
 13957      53494C4F 
 13957      4E5F5F20 
 13958              	.LASF150:
 13959 78cc 5F5F4442 		.ascii	"__DBL_HAS_QUIET_NAN__ 1\000"
 13959      4C5F4841 
 13959      535F5155 
 13959      4945545F 
 13959      4E414E5F 
 13960              	.LASF1060:
 13961 78e4 74736B4B 		.ascii	"tskKERNEL_VERSION_NUMBER \"V8.1.2\"\000"
 13961      45524E45 
 13961      4C5F5645 
 13961      5253494F 
 13961      4E5F4E55 
 13962              	.LASF821:
 13963 7906 494E5433 		.ascii	"INT32_C(x) __INT32_C(x)\000"
 13963      325F4328 
 13963      7829205F 
 13963      5F494E54 
 13963      33325F43 
 13964              	.LASF1195:
 13965 791e 70757853 		.ascii	"puxStackBuffer\000"
 13965      7461636B 
 13965      42756666 
 13965      657200
 13966              	.LASF1211:
 13967 792d 78546173 		.ascii	"xTaskGenericCreate\000"
 13967      6B47656E 
 13967      65726963 
 13967      43726561 
 13967      746500
 13968              	.LASF1074:
 13969 7940 78546173 		.ascii	"xTaskCreateRestricted(x,pxCreatedTask) xTaskGeneric"
 13969      6B437265 
 13969      61746552 
 13969      65737472 
 13969      69637465 
 13970 7973 43726561 		.ascii	"Create( ((x)->pvTaskCode), ((x)->pcName), ((x)->usS"
 13970      74652820 
 13970      28287829 
 13970      2D3E7076 
 13970      5461736B 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 386


 13971 79a6 7461636B 		.ascii	"tackDepth), ((x)->pvParameters), ((x)->uxPriority),"
 13971      44657074 
 13971      68292C20 
 13971      28287829 
 13971      2D3E7076 
 13972 79d9 20287078 		.ascii	" (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xReg"
 13972      43726561 
 13972      74656454 
 13972      61736B29 
 13972      2C202828 
 13973 7a0c 696F6E73 		.ascii	"ions) )\000"
 13973      29202900 
 13974              	.LASF219:
 13975 7a14 5F5F4C4C 		.ascii	"__LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR\000"
 13975      46524143 
 13975      545F4D41 
 13975      585F5F20 
 13975      30583746 
 13976              	.LASF181:
 13977 7a3e 5F5F4445 		.ascii	"__DEC128_MAX_EXP__ 6145\000"
 13977      43313238 
 13977      5F4D4158 
 13977      5F455850 
 13977      5F5F2036 
 13978              	.LASF1034:
 13979 7a56 7854696D 		.ascii	"xTimerHandle TimerHandle_t\000"
 13979      65724861 
 13979      6E646C65 
 13979      2054696D 
 13979      65724861 
 13980              	.LASF786:
 13981 7a71 55494E54 		.ascii	"UINT_LEAST32_MAX (__UINT_LEAST32_MAX__)\000"
 13981      5F4C4541 
 13981      53543332 
 13981      5F4D4158 
 13981      20285F5F 
 13982              	.LASF1275:
 13983 7a99 70756353 		.ascii	"pucStackByte\000"
 13983      7461636B 
 13983      42797465 
 13983      00
 13984              	.LASF911:
 13985 7aa6 706F7274 		.ascii	"portGET_HIGHEST_PRIORITY(uxTopPriority,uxReadyPrior"
 13985      4745545F 
 13985      48494748 
 13985      4553545F 
 13985      5052494F 
 13986 7ad9 69746965 		.ascii	"ities) uxTopPriority = ( 31 - ucPortCountLeadingZer"
 13986      73292075 
 13986      78546F70 
 13986      5072696F 
 13986      72697479 
 13987 7b0c 6F732820 		.ascii	"os( ( uxReadyPriorities ) ) )\000"
 13987      28207578 
 13987      52656164 
 13987      79507269 
 13987      6F726974 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 387


 13988              	.LASF544:
 13989 7b2a 5F524545 		.ascii	"_REENT_CHECK_EMERGENCY(ptr) \000"
 13989      4E545F43 
 13989      4845434B 
 13989      5F454D45 
 13989      5247454E 
 13990              	.LASF853:
 13991 7b47 494E434C 		.ascii	"INCLUDE_vTaskCleanUpResources 0\000"
 13991      5544455F 
 13991      76546173 
 13991      6B436C65 
 13991      616E5570 
 13992              	.LASF229:
 13993 7b67 5F5F5341 		.ascii	"__SACCUM_MAX__ 0X7FFFP-7HK\000"
 13993      4343554D 
 13993      5F4D4158 
 13993      5F5F2030 
 13993      58374646 
 13994              	.LASF62:
 13995 7b82 5F5F494E 		.ascii	"__INTPTR_TYPE__ int\000"
 13995      54505452 
 13995      5F545950 
 13995      455F5F20 
 13995      696E7400 
 13996              	.LASF63:
 13997 7b96 5F5F5549 		.ascii	"__UINTPTR_TYPE__ unsigned int\000"
 13997      4E545054 
 13997      525F5459 
 13997      50455F5F 
 13997      20756E73 
 13998              	.LASF967:
 13999 7bb4 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR(pxQueue) \000"
 13999      65515545 
 13999      55455F53 
 13999      454E445F 
 13999      46524F4D 
 14000              	.LASF302:
 14001 7bd7 5F5F5245 		.ascii	"__REGISTER_PREFIX__ \000"
 14001      47495354 
 14001      45525F50 
 14001      52454649 
 14001      585F5F20 
 14002              	.LASF185:
 14003 7bec 5F5F4445 		.ascii	"__DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000"
 14003      43313238 
 14003      5F535542 
 14003      4E4F524D 
 14003      414C5F4D 
 14004 7c1f 30303030 		.ascii	"000000001E-6143DL\000"
 14004      30303030 
 14004      31452D36 
 14004      31343344 
 14004      4C00
 14005              	.LASF138:
 14006 7c31 5F5F4442 		.ascii	"__DBL_DIG__ 15\000"
 14006      4C5F4449 
 14006      475F5F20 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 388


 14006      313500
 14007              	.LASF215:
 14008 7c40 5F5F554C 		.ascii	"__ULFRACT_EPSILON__ 0x1P-32ULR\000"
 14008      46524143 
 14008      545F4550 
 14008      53494C4F 
 14008      4E5F5F20 
 14009              	.LASF674:
 14010 7c5f 5F5F5243 		.ascii	"__RCSID(s) struct __hack\000"
 14010      53494428 
 14010      73292073 
 14010      74727563 
 14010      74205F5F 
 14011              	.LASF940:
 14012 7c78 74726163 		.ascii	"traceEND() \000"
 14012      65454E44 
 14012      28292000 
 14013              	.LASF1005:
 14014 7c84 636F6E66 		.ascii	"configUSE_MALLOC_FAILED_HOOK 0\000"
 14014      69675553 
 14014      455F4D41 
 14014      4C4C4F43 
 14014      5F464149 
 14015              	.LASF20:
 14016 7ca3 5F5F5349 		.ascii	"__SIZEOF_SIZE_T__ 4\000"
 14016      5A454F46 
 14016      5F53495A 
 14016      455F545F 
 14016      5F203400 
 14017              	.LASF1291:
 14018 7cb7 70784465 		.ascii	"pxDelayedTaskList\000"
 14018      6C617965 
 14018      64546173 
 14018      6B4C6973 
 14018      7400
 14019              	.LASF1148:
 14020 7cc9 784C4953 		.ascii	"xLIST\000"
 14020      5400
 14021              	.LASF599:
 14022 7ccf 5F5F474E 		.ascii	"__GNUCLIKE___OFFSETOF 1\000"
 14022      55434C49 
 14022      4B455F5F 
 14022      5F4F4646 
 14022      5345544F 
 14023              	.LASF182:
 14024 7ce7 5F5F4445 		.ascii	"__DEC128_MIN__ 1E-6143DL\000"
 14024      43313238 
 14024      5F4D494E 
 14024      5F5F2031 
 14024      452D3631 
 14025              	.LASF99:
 14026 7d00 5F5F494E 		.ascii	"__INT64_C(c) c ## LL\000"
 14026      5436345F 
 14026      43286329 
 14026      20632023 
 14026      23204C4C 
 14027              	.LASF367:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 389


 14028 7d15 48415645 		.ascii	"HAVE_INITFINI_ARRAY 1\000"
 14028      5F494E49 
 14028      5446494E 
 14028      495F4152 
 14028      52415920 
 14029              	.LASF684:
 14030 7d2b 5F5F6C6F 		.ascii	"__lockable __lock_annotate(lockable)\000"
 14030      636B6162 
 14030      6C65205F 
 14030      5F6C6F63 
 14030      6B5F616E 
 14031              	.LASF404:
 14032 7d50 5F484156 		.ascii	"_HAVE_STDC \000"
 14032      455F5354 
 14032      44432000 
 14033              	.LASF784:
 14034 7d5c 494E545F 		.ascii	"INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)\000"
 14034      4C454153 
 14034      5433325F 
 14034      4D494E20 
 14034      282D5F5F 
 14035              	.LASF595:
 14036 7d87 5F5F454E 		.ascii	"__END_DECLS \000"
 14036      445F4445 
 14036      434C5320 
 14036      00
 14037              	.LASF908:
 14038 7d94 636F6E66 		.ascii	"configUSE_PORT_OPTIMISED_TASK_SELECTION 1\000"
 14038      69675553 
 14038      455F504F 
 14038      52545F4F 
 14038      5054494D 
 14039              	.LASF641:
 14040 7dbe 5F5F6765 		.ascii	"__generic(expr,t,yes,no) __builtin_choose_expr( __b"
 14040      6E657269 
 14040      63286578 
 14040      70722C74 
 14040      2C796573 
 14041 7df1 75696C74 		.ascii	"uiltin_types_compatible_p(__typeof(expr), t), yes, "
 14041      696E5F74 
 14041      79706573 
 14041      5F636F6D 
 14041      70617469 
 14042 7e24 6E6F2900 		.ascii	"no)\000"
 14043              	.LASF159:
 14044 7e28 5F5F4C44 		.ascii	"__LDBL_MIN__ 2.2250738585072014e-308L\000"
 14044      424C5F4D 
 14044      494E5F5F 
 14044      20322E32 
 14044      32353037 
 14045              	.LASF931:
 14046 7e4e 494E434C 		.ascii	"INCLUDE_xTimerPendFunctionCall 0\000"
 14046      5544455F 
 14046      7854696D 
 14046      65725065 
 14046      6E644675 
 14047              	.LASF237:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 390


 14048 7e6f 5F5F4143 		.ascii	"__ACCUM_IBIT__ 16\000"
 14048      43554D5F 
 14048      49424954 
 14048      5F5F2031 
 14048      3600
 14049              	.LASF1033:
 14050 7e81 78546173 		.ascii	"xTaskStatusType TaskStatus_t\000"
 14050      6B537461 
 14050      74757354 
 14050      79706520 
 14050      5461736B 
 14051              	.LASF1292:
 14052 7e9e 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 14052      6572666C 
 14052      6F774465 
 14052      6C617965 
 14052      64546173 
 14053              	.LASF513:
 14054 7eb8 756E7369 		.ascii	"unsigned\000"
 14054      676E6564 
 14054      00
 14055              	.LASF884:
 14056 7ec1 706F7274 		.ascii	"portFLOAT float\000"
 14056      464C4F41 
 14056      5420666C 
 14056      6F617400 
 14057              	.LASF593:
 14058 7ed1 5F5F6861 		.ascii	"__has_builtin(x) 0\000"
 14058      735F6275 
 14058      696C7469 
 14058      6E287829 
 14058      203000
 14059              	.LASF978:
 14060 7ee4 74726163 		.ascii	"traceTASK_PRIORITY_SET(pxTask,uxNewPriority) \000"
 14060      65544153 
 14060      4B5F5052 
 14060      494F5249 
 14060      54595F53 
 14061              	.LASF708:
 14062 7f12 5F535452 		.ascii	"_STRING_H_ \000"
 14062      494E475F 
 14062      485F2000 
 14063              	.LASF1215:
 14064 7f1e 76546173 		.ascii	"vTaskPrioritySet\000"
 14064      6B507269 
 14064      6F726974 
 14064      79536574 
 14064      00
 14065              	.LASF557:
 14066 7f2f 5F524545 		.ascii	"_REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)"
 14066      4E545F54 
 14066      4D287074 
 14066      72292028 
 14066      26287074 
 14067 7f62 00       		.ascii	"\000"
 14068              	.LASF697:
 14069 7f63 5F5F7074 		.ascii	"__pt_guarded_by(x) __lock_annotate(pt_guarded_by(x)"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 391


 14069      5F677561 
 14069      72646564 
 14069      5F627928 
 14069      7829205F 
 14070 7f96 2900     		.ascii	")\000"
 14071              	.LASF696:
 14072 7f98 5F5F6775 		.ascii	"__guarded_by(x) __lock_annotate(guarded_by(x))\000"
 14072      61726465 
 14072      645F6279 
 14072      28782920 
 14072      5F5F6C6F 
 14073              	.LASF539:
 14074 7fc7 5F524545 		.ascii	"_REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = &(var"
 14074      4E545F49 
 14074      4E49545F 
 14074      5054525F 
 14074      5A45524F 
 14075 7ffa 292D3E5F 		.ascii	")->__sf[0]; (var)->_stdout = &(var)->__sf[1]; (var)"
 14075      5F73665B 
 14075      305D3B20 
 14075      28766172 
 14075      292D3E5F 
 14076 802d 2D3E5F73 		.ascii	"->_stderr = &(var)->__sf[2]; (var)->_new._reent._ra"
 14076      74646572 
 14076      72203D20 
 14076      26287661 
 14076      72292D3E 
 14077 8060 6E645F6E 		.ascii	"nd_next = 1; (var)->_new._reent._r48._seed[0] = _RA"
 14077      65787420 
 14077      3D20313B 
 14077      20287661 
 14077      72292D3E 
 14078 8093 4E443438 		.ascii	"ND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RA"
 14078      5F534545 
 14078      445F303B 
 14078      20287661 
 14078      72292D3E 
 14079 80c6 4E443438 		.ascii	"ND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RA"
 14079      5F534545 
 14079      445F313B 
 14079      20287661 
 14079      72292D3E 
 14080 80f9 4E443438 		.ascii	"ND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RA"
 14080      5F534545 
 14080      445F323B 
 14080      20287661 
 14080      72292D3E 
 14081 812c 4E443438 		.ascii	"ND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RA"
 14081      5F4D554C 
 14081      545F303B 
 14081      20287661 
 14081      72292D3E 
 14082 815f 4E443438 		.ascii	"ND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RA"
 14082      5F4D554C 
 14082      545F313B 
 14082      20287661 
 14082      72292D3E 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 392


 14083 8192 4E443438 		.ascii	"ND48_MULT_2; (var)->_new._reent._r48._add = _RAND48"
 14083      5F4D554C 
 14083      545F323B 
 14083      20287661 
 14083      72292D3E 
 14084 81c5 5F414444 		.ascii	"_ADD; }\000"
 14084      3B207D00 
 14085              	.LASF103:
 14086 81cd 5F5F5549 		.ascii	"__UINT16_C(c) c\000"
 14086      4E543136 
 14086      5F432863 
 14086      29206300 
 14087              	.LASF525:
 14088 81dd 5F524545 		.ascii	"_REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,\000"
 14088      4E545F49 
 14088      4E49545F 
 14088      41544558 
 14088      4954205F 
 14089              	.LASF613:
 14090 8205 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE__ 1\000"
 14090      5F535550 
 14090      504F5254 
 14090      535F5F5F 
 14090      494E4C49 
 14091              	.LASF299:
 14092 8220 5F5F5544 		.ascii	"__UDA_IBIT__ 32\000"
 14092      415F4942 
 14092      49545F5F 
 14092      20333200 
 14093              	.LASF740:
 14094 8230 5F5F4C45 		.ascii	"__LEAST16 \"h\"\000"
 14094      41535431 
 14094      36202268 
 14094      2200
 14095              	.LASF661:
 14096 823e 5F5F7072 		.ascii	"__printflike(fmtarg,firstvararg) __attribute__((__f"
 14096      696E7466 
 14096      6C696B65 
 14096      28666D74 
 14096      6172672C 
 14097 8271 6F726D61 		.ascii	"ormat__ (__printf__, fmtarg, firstvararg)))\000"
 14097      745F5F20 
 14097      285F5F70 
 14097      72696E74 
 14097      665F5F2C 
 14098              	.LASF135:
 14099 829d 5F5F464C 		.ascii	"__FLT_HAS_INFINITY__ 1\000"
 14099      545F4841 
 14099      535F494E 
 14099      46494E49 
 14099      54595F5F 
 14100              	.LASF648:
 14101 82b4 5F5F6661 		.ascii	"__fastcall __attribute__((__fastcall__))\000"
 14101      73746361 
 14101      6C6C205F 
 14101      5F617474 
 14101      72696275 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 393


 14102              	.LASF787:
 14103 82dd 494E5436 		.ascii	"INT64_MIN (-__INT64_MAX__ - 1)\000"
 14103      345F4D49 
 14103      4E20282D 
 14103      5F5F494E 
 14103      5436345F 
 14104              	.LASF683:
 14105 82fc 5F5F6C6F 		.ascii	"__lock_annotate(x) \000"
 14105      636B5F61 
 14105      6E6E6F74 
 14105      61746528 
 14105      78292000 
 14106              	.LASF6:
 14107 8310 5F5F4154 		.ascii	"__ATOMIC_RELAXED 0\000"
 14107      4F4D4943 
 14107      5F52454C 
 14107      41584544 
 14107      203000
 14108              	.LASF425:
 14109 8323 5F415454 		.ascii	"_ATTRIBUTE(attrs) __attribute__ (attrs)\000"
 14109      52494255 
 14109      54452861 
 14109      74747273 
 14109      29205F5F 
 14110              	.LASF1055:
 14111 834b 6C697374 		.ascii	"listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { List_t "
 14111      4745545F 
 14111      4F574E45 
 14111      525F4F46 
 14111      5F4E4558 
 14112 837e 2A20636F 		.ascii	"* const pxConstList = ( pxList ); ( pxConstList )->"
 14112      6E737420 
 14112      7078436F 
 14112      6E73744C 
 14112      69737420 
 14113 83b1 7078496E 		.ascii	"pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( v"
 14113      64657820 
 14113      3D202820 
 14113      7078436F 
 14113      6E73744C 
 14114 83e4 6F696420 		.ascii	"oid * ) ( pxConstList )->pxIndex == ( void * ) &( ("
 14114      2A202920 
 14114      28207078 
 14114      436F6E73 
 14114      744C6973 
 14115 8417 20707843 		.ascii	" pxConstList )->xListEnd ) ) { ( pxConstList )->pxI"
 14115      6F6E7374 
 14115      4C697374 
 14115      20292D3E 
 14115      784C6973 
 14116 844a 6E646578 		.ascii	"ndex = ( pxConstList )->pxIndex->pxNext; } ( pxTCB "
 14116      203D2028 
 14116      20707843 
 14116      6F6E7374 
 14116      4C697374 
 14117 847d 29203D20 		.ascii	") = ( pxConstList )->pxIndex->pvOwner; }\000"
 14117      28207078 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 394


 14117      436F6E73 
 14117      744C6973 
 14117      7420292D 
 14118              	.LASF815:
 14119 84a6 57494E54 		.ascii	"WINT_MAX (__WINT_MAX__)\000"
 14119      5F4D4158 
 14119      20285F5F 
 14119      57494E54 
 14119      5F4D4158 
 14120              	.LASF573:
 14121 84be 5F5F4154 		.ascii	"__ATTRIBUTE_IMPURE_PTR__ \000"
 14121      54524942 
 14121      5554455F 
 14121      494D5055 
 14121      52455F50 
 14122              	.LASF510:
 14123 84d8 5F5F6C6F 		.ascii	"__lock_release_recursive(lock) (_CAST_VOID 0)\000"
 14123      636B5F72 
 14123      656C6561 
 14123      73655F72 
 14123      65637572 
 14124              	.LASF666:
 14125 8506 5F5F676E 		.ascii	"__gnu_inline __attribute__((__gnu_inline__, __artif"
 14125      755F696E 
 14125      6C696E65 
 14125      205F5F61 
 14125      74747269 
 14126 8539 69636961 		.ascii	"icial__))\000"
 14126      6C5F5F29 
 14126      2900
 14127              	.LASF82:
 14128 8543 5F5F5349 		.ascii	"__SIG_ATOMIC_MAX__ 0x7fffffff\000"
 14128      475F4154 
 14128      4F4D4943 
 14128      5F4D4158 
 14128      5F5F2030 
 14129              	.LASF530:
 14130 8561 5F52414E 		.ascii	"_RAND48_MULT_0 (0xe66d)\000"
 14130      4434385F 
 14130      4D554C54 
 14130      5F302028 
 14130      30786536 
 14131              	.LASF1164:
 14132 8579 784D454D 		.ascii	"xMEMORY_REGION\000"
 14132      4F52595F 
 14132      52454749 
 14132      4F4E00
 14133              	.LASF710:
 14134 8588 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE \000"
 14134      57524150 
 14134      50455253 
 14134      5F494E43 
 14134      4C554445 
 14135              	.LASF990:
 14136 85ad 74726163 		.ascii	"traceEVENT_GROUP_CREATE(xEventGroup) \000"
 14136      65455645 
 14136      4E545F47 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 395


 14136      524F5550 
 14136      5F435245 
 14137              	.LASF587:
 14138 85d3 5F5F666C 		.ascii	"__flexarr [0]\000"
 14138      65786172 
 14138      72205B30 
 14138      5D00
 14139              	.LASF900:
 14140 85e1 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortClearInte"
 14140      434C4541 
 14140      525F494E 
 14140      54455252 
 14140      5550545F 
 14141 8614 72727570 		.ascii	"rruptMask(x)\000"
 14141      744D6173 
 14141      6B287829 
 14141      00
 14142              	.LASF354:
 14143 8621 5F5F5553 		.ascii	"__USES_INITFINI__ 1\000"
 14143      45535F49 
 14143      4E495446 
 14143      494E495F 
 14143      5F203100 
 14144              	.LASF818:
 14145 8635 55494E54 		.ascii	"UINT8_C(x) __UINT8_C(x)\000"
 14145      385F4328 
 14145      7829205F 
 14145      5F55494E 
 14145      54385F43 
 14146              	.LASF175:
 14147 864d 5F5F4445 		.ascii	"__DEC64_MIN__ 1E-383DD\000"
 14147      4336345F 
 14147      4D494E5F 
 14147      5F203145 
 14147      2D333833 
 14148              	.LASF483:
 14149 8664 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 14149      65645F70 
 14149      74726469 
 14149      66665F74 
 14149      00
 14150              	.LASF143:
 14151 8675 5F5F4442 		.ascii	"__DBL_DECIMAL_DIG__ 17\000"
 14151      4C5F4445 
 14151      43494D41 
 14151      4C5F4449 
 14151      475F5F20 
 14152              	.LASF478:
 14153 868c 5F505452 		.ascii	"_PTRDIFF_T_ \000"
 14153      44494646 
 14153      5F545F20 
 14153      00
 14154              	.LASF772:
 14155 8699 494E545F 		.ascii	"INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)\000"
 14155      4C454153 
 14155      54385F4D 
 14155      494E2028 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 396


 14155      2D5F5F49 
 14156              	.LASF575:
 14157 86c2 5F474C4F 		.ascii	"_GLOBAL_REENT _global_impure_ptr\000"
 14157      42414C5F 
 14157      5245454E 
 14157      54205F67 
 14157      6C6F6261 
 14158              	.LASF521:
 14159 86e3 5F4E554C 		.ascii	"_NULL 0\000"
 14159      4C203000 
 14160              	.LASF1238:
 14161 86eb 75785175 		.ascii	"uxQueue\000"
 14161      65756500 
 14162              	.LASF965:
 14163 86f3 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR(pxQueue) \000"
 14163      65515545 
 14163      55455F50 
 14163      45454B5F 
 14163      46524F4D 
 14164              	.LASF951:
 14165 8716 74726163 		.ascii	"traceQUEUE_CREATE(pxNewQueue) \000"
 14165      65515545 
 14165      55455F43 
 14165      52454154 
 14165      45287078 
 14166              	.LASF755:
 14167 8735 5F5F696E 		.ascii	"__int64_t_defined 1\000"
 14167      7436345F 
 14167      745F6465 
 14167      66696E65 
 14167      64203100 
 14168              	.LASF85:
 14169 8749 5F5F494E 		.ascii	"__INT16_MAX__ 0x7fff\000"
 14169      5431365F 
 14169      4D41585F 
 14169      5F203078 
 14169      37666666 
 14170              	.LASF365:
 14171 875e 5F57414E 		.ascii	"_WANT_REGISTER_FINI 1\000"
 14171      545F5245 
 14171      47495354 
 14171      45525F46 
 14171      494E4920 
 14172              	.LASF679:
 14173 8774 5F5F4445 		.ascii	"__DEVOLATILE(type,var) ((type)(__uintptr_t)(volatil"
 14173      564F4C41 
 14173      54494C45 
 14173      28747970 
 14173      652C7661 
 14174 87a7 6520766F 		.ascii	"e void *)(var))\000"
 14174      6964202A 
 14174      29287661 
 14174      72292900 
 14175              	.LASF1093:
 14176 87b7 7854696D 		.ascii	"xTimerReset(xTimer,xTicksToWait) xTimerGenericComma"
 14176      65725265 
 14176      73657428 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 397


 14176      7854696D 
 14176      65722C78 
 14177 87ea 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCou"
 14177      28207854 
 14177      696D6572 
 14177      20292C20 
 14177      746D7243 
 14178 881d 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 14178      20292C20 
 14178      4E554C4C 
 14178      2C202820 
 14178      78546963 
 14179              	.LASF451:
 14180 883e 5F5F5743 		.ascii	"__WCHAR_T__ \000"
 14180      4841525F 
 14180      545F5F20 
 14180      00
 14181              	.LASF954:
 14182 884b 74726163 		.ascii	"traceCREATE_MUTEX_FAILED() \000"
 14182      65435245 
 14182      4154455F 
 14182      4D555445 
 14182      585F4641 
 14183              	.LASF735:
 14184 8867 5F5F4641 		.ascii	"__FAST8 \000"
 14184      53543820 
 14184      00
 14185              	.LASF396:
 14186 8870 5F5F5853 		.ascii	"__XSI_VISIBLE 0\000"
 14186      495F5649 
 14186      5349424C 
 14186      45203000 
 14187              	.LASF1294:
 14188 8880 78546173 		.ascii	"xTasksWaitingTermination\000"
 14188      6B735761 
 14188      6974696E 
 14188      67546572 
 14188      6D696E61 
 14189              	.LASF355:
 14190 8899 5F535444 		.ascii	"_STDLIB_H_ \000"
 14190      4C49425F 
 14190      485F2000 
 14191              	.LASF938:
 14192 88a5 706F7274 		.ascii	"portPOINTER_SIZE_TYPE uint32_t\000"
 14192      504F494E 
 14192      5445525F 
 14192      53495A45 
 14192      5F545950 
 14193              	.LASF266:
 14194 88c4 5F5F5151 		.ascii	"__QQ_FBIT__ 7\000"
 14194      5F464249 
 14194      545F5F20 
 14194      3700
 14195              	.LASF925:
 14196 88d2 636F6E66 		.ascii	"configUSE_APPLICATION_TASK_TAG 0\000"
 14196      69675553 
 14196      455F4150 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 398


 14196      504C4943 
 14196      4154494F 
 14197              	.LASF1144:
 14198 88f3 4C697374 		.ascii	"ListItem_t\000"
 14198      4974656D 
 14198      5F7400
 14199              	.LASF1138:
 14200 88fe 5469636B 		.ascii	"TickT_t\000"
 14200      545F7400 
 14201              	.LASF379:
 14202 8906 5F5F474E 		.ascii	"__GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)\000"
 14202      55435F50 
 14202      52455245 
 14202      515F5F28 
 14202      6D612C6D 
 14203              	.LASF301:
 14204 8933 5F5F5554 		.ascii	"__UTA_IBIT__ 64\000"
 14204      415F4942 
 14204      49545F5F 
 14204      20363400 
 14205              	.LASF901:
 14206 8943 706F7274 		.ascii	"portDISABLE_INTERRUPTS() ulPortSetInterruptMask()\000"
 14206      44495341 
 14206      424C455F 
 14206      494E5445 
 14206      52525550 
 14207              	.LASF168:
 14208 8975 5F5F4445 		.ascii	"__DEC32_MIN__ 1E-95DF\000"
 14208      4333325F 
 14208      4D494E5F 
 14208      5F203145 
 14208      2D393544 
 14209              	.LASF225:
 14210 898b 5F5F554C 		.ascii	"__ULLFRACT_EPSILON__ 0x1P-64ULLR\000"
 14210      4C465241 
 14210      43545F45 
 14210      5053494C 
 14210      4F4E5F5F 
 14211              	.LASF651:
 14212 89ac 5F5F756E 		.ascii	"__unreachable() __builtin_unreachable()\000"
 14212      72656163 
 14212      6861626C 
 14212      65282920 
 14212      5F5F6275 
 14213              	.LASF1098:
 14214 89d4 53544143 		.ascii	"STACK_MACROS_H \000"
 14214      4B5F4D41 
 14214      43524F53 
 14214      5F482000 
 14215              	.LASF1110:
 14216 89e4 7461736B 		.ascii	"taskSELECT_HIGHEST_PRIORITY_TASK() { UBaseT_t uxTop"
 14216      53454C45 
 14216      43545F48 
 14216      49474845 
 14216      53545F50 
 14217 8a17 5072696F 		.ascii	"Priority; portGET_HIGHEST_PRIORITY( uxTopPriority, "
 14217      72697479 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 399


 14217      3B20706F 
 14217      72744745 
 14217      545F4849 
 14218 8a4a 7578546F 		.ascii	"uxTopReadyPriority ); configASSERT( listCURRENT_LIS"
 14218      70526561 
 14218      64795072 
 14218      696F7269 
 14218      74792029 
 14219 8a7d 545F4C45 		.ascii	"T_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) )"
 14219      4E475448 
 14219      28202628 
 14219      20707852 
 14219      65616479 
 14220 8ab0 203E2030 		.ascii	" > 0 ); listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, "
 14220      20293B20 
 14220      6C697374 
 14220      4745545F 
 14220      4F574E45 
 14221 8ae3 26282070 		.ascii	"&( pxReadyTasksLists[ uxTopPriority ] ) ); }\000"
 14221      78526561 
 14221      64795461 
 14221      736B734C 
 14221      69737473 
 14222              	.LASF324:
 14223 8b10 5F5F5349 		.ascii	"__SIZEOF_WINT_T__ 4\000"
 14223      5A454F46 
 14223      5F57494E 
 14223      545F545F 
 14223      5F203400 
 14224              	.LASF328:
 14225 8b24 5F5F4152 		.ascii	"__ARM_FEATURE_UNALIGNED 1\000"
 14225      4D5F4645 
 14225      41545552 
 14225      455F554E 
 14225      414C4947 
 14226              	.LASF0:
 14227 8b3e 5F5F5354 		.ascii	"__STDC__ 1\000"
 14227      44435F5F 
 14227      203100
 14228              	.LASF686:
 14229 8b49 5F5F6C6F 		.ascii	"__locks_shared(...) __lock_annotate(shared_lock_fun"
 14229      636B735F 
 14229      73686172 
 14229      6564282E 
 14229      2E2E2920 
 14230 8b7c 6374696F 		.ascii	"ction(__VA_ARGS__))\000"
 14230      6E285F5F 
 14230      56415F41 
 14230      5247535F 
 14230      5F292900 
 14231              	.LASF1185:
 14232 8b90 75785443 		.ascii	"uxTCBNumber\000"
 14232      424E756D 
 14232      62657200 
 14233              	.LASF415:
 14234 8b9c 5F564F49 		.ascii	"_VOID void\000"
 14234      4420766F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 400


 14234      696400
 14235              	.LASF1189:
 14236 8ba7 5443425F 		.ascii	"TCB_t\000"
 14236      7400
 14237              	.LASF596:
 14238 8bad 5F5F474E 		.ascii	"__GNUCLIKE_ASM 3\000"
 14238      55434C49 
 14238      4B455F41 
 14238      534D2033 
 14238      00
 14239              	.LASF248:
 14240 8bbe 5F5F4C41 		.ascii	"__LACCUM_MIN__ (-0X1P31LK-0X1P31LK)\000"
 14240      4343554D 
 14240      5F4D494E 
 14240      5F5F2028 
 14240      2D305831 
 14241              	.LASF962:
 14242 8be2 74726163 		.ascii	"traceQUEUE_SEND_FAILED(pxQueue) \000"
 14242      65515545 
 14242      55455F53 
 14242      454E445F 
 14242      4641494C 
 14243              	.LASF348:
 14244 8c03 5F5F4152 		.ascii	"__ARM_EABI__ 1\000"
 14244      4D5F4541 
 14244      42495F5F 
 14244      203100
 14245              	.LASF1217:
 14246 8c12 75784375 		.ascii	"uxCurrentBasePriority\000"
 14246      7272656E 
 14246      74426173 
 14246      65507269 
 14246      6F726974 
 14247              	.LASF662:
 14248 8c28 5F5F7363 		.ascii	"__scanflike(fmtarg,firstvararg) __attribute__((__fo"
 14248      616E666C 
 14248      696B6528 
 14248      666D7461 
 14248      72672C66 
 14249 8c5b 726D6174 		.ascii	"rmat__ (__scanf__, fmtarg, firstvararg)))\000"
 14249      5F5F2028 
 14249      5F5F7363 
 14249      616E665F 
 14249      5F2C2066 
 14250              	.LASF166:
 14251 8c85 5F5F4445 		.ascii	"__DEC32_MIN_EXP__ (-94)\000"
 14251      4333325F 
 14251      4D494E5F 
 14251      4558505F 
 14251      5F20282D 
 14252              	.LASF263:
 14253 8c9d 5F5F554C 		.ascii	"__ULLACCUM_MIN__ 0.0ULLK\000"
 14253      4C414343 
 14253      554D5F4D 
 14253      494E5F5F 
 14253      20302E30 
 14254              	.LASF1210:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 401


 14255 8cb6 78546963 		.ascii	"xTicksToDelay\000"
 14255      6B73546F 
 14255      44656C61 
 14255      7900
 14256              	.LASF744:
 14257 8cc4 5F494E54 		.ascii	"_INT8_T_DECLARED \000"
 14257      385F545F 
 14257      4445434C 
 14257      41524544 
 14257      2000
 14258              	.LASF461:
 14259 8cd6 5F5F5F69 		.ascii	"___int_wchar_t_h \000"
 14259      6E745F77 
 14259      63686172 
 14259      5F745F68 
 14259      2000
 14260              	.LASF605:
 14261 8ce8 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VAALIST 1\000"
 14261      55434C49 
 14261      4B455F42 
 14261      55494C54 
 14261      494E5F56 
 14262              	.LASF1103:
 14263 8d05 7461736B 		.ascii	"taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_AP"
 14263      5949454C 
 14263      445F4946 
 14263      5F555349 
 14263      4E475F50 
 14264 8d38 49282900 		.ascii	"I()\000"
 14265              	.LASF671:
 14266 8d3c 5F5F7379 		.ascii	"__sym_compat(sym,impl,verid) __asm__(\".symver \" #"
 14266      6D5F636F 
 14266      6D706174 
 14266      2873796D 
 14266      2C696D70 
 14267 8d6d 696D706C 		.ascii	"impl \", \" #sym \"@\" #verid)\000"
 14267      20222C20 
 14267      22202373 
 14267      796D2022 
 14267      40222023 
 14268              	.LASF733:
 14269 8d88 5F5F494E 		.ascii	"__INT32 \"l\"\000"
 14269      54333220 
 14269      226C2200 
 14270              	.LASF351:
 14271 8d94 5F5F4152 		.ascii	"__ARM_ASM_SYNTAX_UNIFIED__ 1\000"
 14271      4D5F4153 
 14271      4D5F5359 
 14271      4E544158 
 14271      5F554E49 
 14272              	.LASF707:
 14273 8db1 73747274 		.ascii	"strtodf strtof\000"
 14273      6F646620 
 14273      73747274 
 14273      6F6600
 14274              	.LASF44:
 14275 8dc0 5F5F5549 		.ascii	"__UINT32_TYPE__ long unsigned int\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 402


 14275      4E543332 
 14275      5F545950 
 14275      455F5F20 
 14275      6C6F6E67 
 14276              	.LASF892:
 14277 8de2 706F7274 		.ascii	"portTICK_PERIOD_MS ( ( TickType_t ) 1000 / configTI"
 14277      5449434B 
 14277      5F504552 
 14277      494F445F 
 14277      4D532028 
 14278 8e15 434B5F52 		.ascii	"CK_RATE_HZ )\000"
 14278      4154455F 
 14278      485A2029 
 14278      00
 14279              	.LASF339:
 14280 8e22 5F5F7468 		.ascii	"__thumb2__ 1\000"
 14280      756D6232 
 14280      5F5F2031 
 14280      00
 14281              	.LASF1193:
 14282 8e2f 70765061 		.ascii	"pvParameters\000"
 14282      72616D65 
 14282      74657273 
 14282      00
 14283              	.LASF1237:
 14284 8e3c 75785461 		.ascii	"uxTask\000"
 14284      736B00
 14285              	.LASF722:
 14286 8e43 7369676E 		.ascii	"signed +0\000"
 14286      6564202B 
 14286      3000
 14287              	.LASF380:
 14288 8e4d 5F444546 		.ascii	"_DEFAULT_SOURCE\000"
 14288      41554C54 
 14288      5F534F55 
 14288      52434500 
 14289              	.LASF446:
 14290 8e5d 5F474343 		.ascii	"_GCC_SIZE_T \000"
 14290      5F53495A 
 14290      455F5420 
 14290      00
 14291              	.LASF913:
 14292 8e6a 706F7274 		.ascii	"portNOP() \000"
 14292      4E4F5028 
 14292      292000
 14293              	.LASF615:
 14294 8e75 5F5F4343 		.ascii	"__CC_SUPPORTS_WARNING 1\000"
 14294      5F535550 
 14294      504F5254 
 14294      535F5741 
 14294      524E494E 
 14295              	.LASF147:
 14296 8e8d 5F5F4442 		.ascii	"__DBL_DENORM_MIN__ ((double)4.9406564584124654e-324"
 14296      4C5F4445 
 14296      4E4F524D 
 14296      5F4D494E 
 14296      5F5F2028 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 403


 14297 8ec0 4C2900   		.ascii	"L)\000"
 14298              	.LASF223:
 14299 8ec3 5F5F554C 		.ascii	"__ULLFRACT_MIN__ 0.0ULLR\000"
 14299      4C465241 
 14299      43545F4D 
 14299      494E5F5F 
 14299      20302E30 
 14300              	.LASF1213:
 14301 8edc 78546173 		.ascii	"xTask\000"
 14301      6B00
 14302              	.LASF995:
 14303 8ee2 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_END(xEventGroup,uxBitsTo"
 14303      65455645 
 14303      4E545F47 
 14303      524F5550 
 14303      5F574149 
 14304 8f15 57616974 		.ascii	"WaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred"
 14304      466F722C 
 14304      7854696D 
 14304      656F7574 
 14304      4F636375 
 14305 8f48 00       		.ascii	"\000"
 14306              	.LASF1233:
 14307 8f49 75785461 		.ascii	"uxTaskGetSystemState\000"
 14307      736B4765 
 14307      74537973 
 14307      74656D53 
 14307      74617465 
 14308              	.LASF540:
 14309 8f5e 5F524545 		.ascii	"_REENT_CHECK_RAND48(ptr) \000"
 14309      4E545F43 
 14309      4845434B 
 14309      5F52414E 
 14309      44343828 
 14310              	.LASF283:
 14311 8f78 5F5F5544 		.ascii	"__UDQ_IBIT__ 0\000"
 14311      515F4942 
 14311      49545F5F 
 14311      203000
 14312              	.LASF13:
 14313 8f87 5F5F5349 		.ascii	"__SIZEOF_INT__ 4\000"
 14313      5A454F46 
 14313      5F494E54 
 14313      5F5F2034 
 14313      00
 14314              	.LASF465:
 14315 8f98 5F425344 		.ascii	"_BSD_WCHAR_T_\000"
 14315      5F574348 
 14315      41525F54 
 14315      5F00
 14316              	.LASF1096:
 14317 8fa6 7854696D 		.ascii	"xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHighe"
 14317      65724368 
 14317      616E6765 
 14317      50657269 
 14317      6F644672 
 14318 8fd9 72507269 		.ascii	"rPriorityTaskWoken) xTimerGenericCommand( ( xTimer "
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 404


 14318      6F726974 
 14318      79546173 
 14318      6B576F6B 
 14318      656E2920 
 14319 900c 292C2074 		.ascii	"), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod "
 14319      6D72434F 
 14319      4D4D414E 
 14319      445F4348 
 14319      414E4745 
 14320 903f 292C2028 		.ascii	"), ( pxHigherPriorityTaskWoken ), 0U )\000"
 14320      20707848 
 14320      69676865 
 14320      72507269 
 14320      6F726974 
 14321              	.LASF217:
 14322 9066 5F5F4C4C 		.ascii	"__LLFRACT_IBIT__ 0\000"
 14322      46524143 
 14322      545F4942 
 14322      49545F5F 
 14322      203000
 14323              	.LASF616:
 14324 9079 5F5F4343 		.ascii	"__CC_SUPPORTS_VARADIC_XXX 1\000"
 14324      5F535550 
 14324      504F5254 
 14324      535F5641 
 14324      52414449 
 14325              	.LASF1132:
 14326 9095 75696E74 		.ascii	"uint32_t\000"
 14326      33325F74 
 14326      00
 14327              	.LASF893:
 14328 909e 706F7274 		.ascii	"portBYTE_ALIGNMENT 8\000"
 14328      42595445 
 14328      5F414C49 
 14328      474E4D45 
 14328      4E542038 
 14329              	.LASF713:
 14330 90b3 5F535953 		.ascii	"_SYS__INTSUP_H \000"
 14330      5F5F494E 
 14330      54535550 
 14330      5F482000 
 14331              	.LASF230:
 14332 90c3 5F5F5341 		.ascii	"__SACCUM_EPSILON__ 0x1P-7HK\000"
 14332      4343554D 
 14332      5F455053 
 14332      494C4F4E 
 14332      5F5F2030 
 14333              	.LASF882:
 14334 90df 504F5254 		.ascii	"PORTMACRO_H \000"
 14334      4D414352 
 14334      4F5F4820 
 14334      00
 14335              	.LASF803:
 14336 90ec 494E545F 		.ascii	"INT_FAST64_MAX (__INT_FAST64_MAX__)\000"
 14336      46415354 
 14336      36345F4D 
 14336      41582028 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 405


 14336      5F5F494E 
 14337              	.LASF1196:
 14338 9110 78526567 		.ascii	"xRegions\000"
 14338      696F6E73 
 14338      00
 14339              	.LASF921:
 14340 9119 494E434C 		.ascii	"INCLUDE_xTimerGetTimerDaemonTaskHandle 0\000"
 14340      5544455F 
 14340      7854696D 
 14340      65724765 
 14340      7454696D 
 14341              	.LASF383:
 14342 9142 5F504F53 		.ascii	"_POSIX_SOURCE 1\000"
 14342      49585F53 
 14342      4F555243 
 14342      45203100 
 14343              	.LASF1045:
 14344 9152 6C697374 		.ascii	"listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( ( pxL"
 14344      5345545F 
 14344      4C495354 
 14344      5F495445 
 14344      4D5F4F57 
 14345 9185 69737449 		.ascii	"istItem )->pvOwner = ( void * ) ( pxOwner ) )\000"
 14345      74656D20 
 14345      292D3E70 
 14345      764F776E 
 14345      6572203D 
 14346              	.LASF59:
 14347 91b3 5F5F5549 		.ascii	"__UINT_FAST16_TYPE__ unsigned int\000"
 14347      4E545F46 
 14347      41535431 
 14347      365F5459 
 14347      50455F5F 
 14348              	.LASF295:
 14349 91d5 5F5F5548 		.ascii	"__UHA_IBIT__ 8\000"
 14349      415F4942 
 14349      49545F5F 
 14349      203800
 14350              	.LASF514:
 14351 91e4 5F5F6E65 		.ascii	"__need_wint_t \000"
 14351      65645F77 
 14351      696E745F 
 14351      742000
 14352              	.LASF240:
 14353 91f3 5F5F4143 		.ascii	"__ACCUM_EPSILON__ 0x1P-15K\000"
 14353      43554D5F 
 14353      45505349 
 14353      4C4F4E5F 
 14353      5F203078 
 14354              	.LASF255:
 14355 920e 5F5F554C 		.ascii	"__ULACCUM_EPSILON__ 0x1P-32ULK\000"
 14355      41434355 
 14355      4D5F4550 
 14355      53494C4F 
 14355      4E5F5F20 
 14356              	.LASF152:
 14357 922d 5F5F4C44 		.ascii	"__LDBL_DIG__ 15\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 406


 14357      424C5F44 
 14357      49475F5F 
 14357      20313500 
 14358              	.LASF704:
 14359 923d 45584954 		.ascii	"EXIT_SUCCESS 0\000"
 14359      5F535543 
 14359      43455353 
 14359      203000
 14360              	.LASF638:
 14361 924c 5F41746F 		.ascii	"_Atomic(T) struct { T volatile __val; }\000"
 14361      6D696328 
 14361      54292073 
 14361      74727563 
 14361      74207B20 
 14362              	.LASF1113:
 14363 9274 70727641 		.ascii	"prvAddTaskToReadyList(pxTCB) traceMOVED_TASK_TO_REA"
 14363      64645461 
 14363      736B546F 
 14363      52656164 
 14363      794C6973 
 14364 92a7 44595F53 		.ascii	"DY_STATE( pxTCB ) taskRECORD_READY_PRIORITY( ( pxTC"
 14364      54415445 
 14364      28207078 
 14364      54434220 
 14364      29207461 
 14365 92da 4220292D 		.ascii	"B )->uxPriority ); vListInsertEnd( &( pxReadyTasksL"
 14365      3E757850 
 14365      72696F72 
 14365      69747920 
 14365      293B2076 
 14366 930d 69737473 		.ascii	"ists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGen"
 14366      5B202820 
 14366      70785443 
 14366      4220292D 
 14366      3E757850 
 14367 9340 65726963 		.ascii	"ericListItem ) )\000"
 14367      4C697374 
 14367      4974656D 
 14367      20292029 
 14367      00
 14368              	.LASF75:
 14369 9351 5F5F5749 		.ascii	"__WINT_MIN__ 0U\000"
 14369      4E545F4D 
 14369      494E5F5F 
 14369      20305500 
 14370              	.LASF1181:
 14371 9361 7847656E 		.ascii	"xGenericListItem\000"
 14371      65726963 
 14371      4C697374 
 14371      4974656D 
 14371      00
 14372              	.LASF177:
 14373 9372 5F5F4445 		.ascii	"__DEC64_EPSILON__ 1E-15DD\000"
 14373      4336345F 
 14373      45505349 
 14373      4C4F4E5F 
 14373      5F203145 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 407


 14374              	.LASF583:
 14375 938c 5F5F6C6F 		.ascii	"__long_double_t long double\000"
 14375      6E675F64 
 14375      6F75626C 
 14375      655F7420 
 14375      6C6F6E67 
 14376              	.LASF74:
 14377 93a8 5F5F5749 		.ascii	"__WINT_MAX__ 0xffffffffU\000"
 14377      4E545F4D 
 14377      41585F5F 
 14377      20307866 
 14377      66666666 
 14378              	.LASF898:
 14379 93c1 706F7274 		.ascii	"portYIELD_FROM_ISR(x) portEND_SWITCHING_ISR( x )\000"
 14379      5949454C 
 14379      445F4652 
 14379      4F4D5F49 
 14379      53522878 
 14380              	.LASF633:
 14381 93f2 5F5F7365 		.ascii	"__section(x) __attribute__((__section__(x)))\000"
 14381      6374696F 
 14381      6E287829 
 14381      205F5F61 
 14381      74747269 
 14382              	.LASF1076:
 14383 941f 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR ( ( BaseT_t ) "
 14383      4F4D4D41 
 14383      4E445F45 
 14383      58454355 
 14383      54455F43 
 14384 9452 2D322029 		.ascii	"-2 )\000"
 14384      00
 14385              	.LASF1310:
 14386 9457 756C4269 		.ascii	"ulBitmap\000"
 14386      746D6170 
 14386      00
 14387              	.LASF47:
 14388 9460 5F5F494E 		.ascii	"__INT_LEAST16_TYPE__ short int\000"
 14388      545F4C45 
 14388      41535431 
 14388      365F5459 
 14388      50455F5F 
 14389              	.LASF942:
 14390 947f 74726163 		.ascii	"traceINCREASE_TICK_COUNT(x) \000"
 14390      65494E43 
 14390      52454153 
 14390      455F5449 
 14390      434B5F43 
 14391              	.LASF1199:
 14392 949c 78546173 		.ascii	"xTaskToDelete\000"
 14392      6B546F44 
 14392      656C6574 
 14392      6500
 14393              	.LASF747:
 14394 94aa 5F494E54 		.ascii	"_INT16_T_DECLARED \000"
 14394      31365F54 
 14394      5F444543 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 408


 14394      4C415245 
 14394      442000
 14395              	.LASF144:
 14396 94bd 5F5F4442 		.ascii	"__DBL_MAX__ ((double)1.7976931348623157e+308L)\000"
 14396      4C5F4D41 
 14396      585F5F20 
 14396      2828646F 
 14396      75626C65 
 14397              	.LASF408:
 14398 94ec 5F505452 		.ascii	"_PTR void *\000"
 14398      20766F69 
 14398      64202A00 
 14399              	.LASF216:
 14400 94f8 5F5F4C4C 		.ascii	"__LLFRACT_FBIT__ 63\000"
 14400      46524143 
 14400      545F4642 
 14400      49545F5F 
 14400      20363300 
 14401              	.LASF450:
 14402 950c 5F5F7763 		.ascii	"__wchar_t__ \000"
 14402      6861725F 
 14402      745F5F20 
 14402      00
 14403              	.LASF338:
 14404 9519 5F5F7468 		.ascii	"__thumb__ 1\000"
 14404      756D625F 
 14404      5F203100 
 14405              	.LASF1071:
 14406 9525 7461736B 		.ascii	"taskSCHEDULER_NOT_STARTED ( ( BaseT_t ) 1 )\000"
 14406      53434845 
 14406      44554C45 
 14406      525F4E4F 
 14406      545F5354 
 14407              	.LASF1134:
 14408 9551 53746163 		.ascii	"StackT_t\000"
 14408      6B545F74 
 14408      00
 14409              	.LASF341:
 14410 955a 5F5F4152 		.ascii	"__ARMEL__ 1\000"
 14410      4D454C5F 
 14410      5F203100 
 14411              	.LASF993:
 14412 9566 74726163 		.ascii	"traceEVENT_GROUP_SYNC_END(xEventGroup,uxBitsToSet,u"
 14412      65455645 
 14412      4E545F47 
 14412      524F5550 
 14412      5F53594E 
 14413 9599 78426974 		.ascii	"xBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutO"
 14413      73546F57 
 14413      61697446 
 14413      6F722C78 
 14413      54696D65 
 14414 95cc 63637572 		.ascii	"ccurred\000"
 14414      72656400 
 14415              	.LASF502:
 14416 95d4 5F5F6C6F 		.ascii	"__lock_init_recursive(lock) (_CAST_VOID 0)\000"
 14416      636B5F69 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 409


 14416      6E69745F 
 14416      72656375 
 14416      72736976 
 14417              	.LASF663:
 14418 95ff 5F5F666F 		.ascii	"__format_arg(fmtarg) __attribute__((__format_arg__ "
 14418      726D6174 
 14418      5F617267 
 14418      28666D74 
 14418      61726729 
 14419 9632 28666D74 		.ascii	"(fmtarg)))\000"
 14419      61726729 
 14419      292900
 14420              	.LASF1306:
 14421 963d 474E5520 		.ascii	"GNU C89 5.4.1 20160919 (release) [ARM/embedded-5-br"
 14421      43383920 
 14421      352E342E 
 14421      31203230 
 14421      31363039 
 14422 9670 616E6368 		.ascii	"anch revision 240496] -mcpu=cortex-m3 -mthumb -g -g"
 14422      20726576 
 14422      6973696F 
 14422      6E203234 
 14422      30343936 
 14423 96a3 67646233 		.ascii	"gdb3 -O0 -std=gnu90 -ffunction-sections -fdata-sect"
 14423      202D4F30 
 14423      202D7374 
 14423      643D676E 
 14423      75393020 
 14424 96d6 696F6E73 		.ascii	"ions\000"
 14424      00
 14425              	.LASF1017:
 14426 96db 636F6E66 		.ascii	"configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTI"
 14426      6967494E 
 14426      434C5544 
 14426      455F4150 
 14426      504C4943 
 14427 970e 4F4E5320 		.ascii	"ONS 0\000"
 14427      3000
 14428              	.LASF268:
 14429 9714 5F5F4851 		.ascii	"__HQ_FBIT__ 15\000"
 14429      5F464249 
 14429      545F5F20 
 14429      313500
 14430              	.LASF1263:
 14431 9723 70727649 		.ascii	"prvInitialiseTaskLists\000"
 14431      6E697469 
 14431      616C6973 
 14431      65546173 
 14431      6B4C6973 
 14432              	.LASF1053:
 14433 973a 6C697374 		.ascii	"listLIST_IS_EMPTY(pxList) ( ( BaseT_t ) ( ( pxList "
 14433      4C495354 
 14433      5F49535F 
 14433      454D5054 
 14433      59287078 
 14434 976d 292D3E75 		.ascii	")->uxNumberOfItems == ( UBaseT_t ) 0 ) )\000"
 14434      784E756D 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 410


 14434      6265724F 
 14434      66497465 
 14434      6D73203D 
 14435              	.LASF682:
 14436 9796 5F5F6461 		.ascii	"__datatype_type_tag(kind,type) \000"
 14436      74617479 
 14436      70655F74 
 14436      7970655F 
 14436      74616728 
 14437              	.LASF569:
 14438 97b6 5F524545 		.ascii	"_REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_"
 14438      4E545F53 
 14438      49474E41 
 14438      4C5F4255 
 14438      46287074 
 14439 97e9 62756629 		.ascii	"buf)\000"
 14439      00
 14440              	.LASF77:
 14441 97ee 5F5F5349 		.ascii	"__SIZE_MAX__ 0xffffffffU\000"
 14441      5A455F4D 
 14441      41585F5F 
 14441      20307866 
 14441      66666666 
 14442              	.LASF1289:
 14443 9807 7844656C 		.ascii	"xDelayedTaskList1\000"
 14443      61796564 
 14443      5461736B 
 14443      4C697374 
 14443      3100
 14444              	.LASF1290:
 14445 9819 7844656C 		.ascii	"xDelayedTaskList2\000"
 14445      61796564 
 14445      5461736B 
 14445      4C697374 
 14445      3200
 14446              	.LASF734:
 14447 982b 5F5F494E 		.ascii	"__INT64 \"ll\"\000"
 14447      54363420 
 14447      226C6C22 
 14447      00
 14448              	.LASF771:
 14449 9838 55494E54 		.ascii	"UINT8_MAX (__UINT8_MAX__)\000"
 14449      385F4D41 
 14449      5820285F 
 14449      5F55494E 
 14449      54385F4D 
 14450              	.LASF70:
 14451 9852 5F5F4C4F 		.ascii	"__LONG_MAX__ 0x7fffffffL\000"
 14451      4E475F4D 
 14451      41585F5F 
 14451      20307837 
 14451      66666666 
 14452              	.LASF625:
 14453 986b 5F5F766F 		.ascii	"__volatile volatile\000"
 14453      6C617469 
 14453      6C652076 
 14453      6F6C6174 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 411


 14453      696C6500 
 14454              	.LASF149:
 14455 987f 5F5F4442 		.ascii	"__DBL_HAS_INFINITY__ 1\000"
 14455      4C5F4841 
 14455      535F494E 
 14455      46494E49 
 14455      54595F5F 
 14456              	.LASF758:
 14457 9896 5F5F696E 		.ascii	"__int_least8_t_defined 1\000"
 14457      745F6C65 
 14457      61737438 
 14457      5F745F64 
 14457      6566696E 
 14458              	.LASF728:
 14459 98af 6C6F6E67 		.ascii	"long +4\000"
 14459      202B3400 
 14460              	.LASF966:
 14461 98b7 74726163 		.ascii	"traceQUEUE_RECEIVE_FAILED(pxQueue) \000"
 14461      65515545 
 14461      55455F52 
 14461      45434549 
 14461      56455F46 
 14462              	.LASF533:
 14463 98db 5F52414E 		.ascii	"_RAND48_ADD (0x000b)\000"
 14463      4434385F 
 14463      41444420 
 14463      28307830 
 14463      30306229 
 14464              	.LASF703:
 14465 98f0 45584954 		.ascii	"EXIT_FAILURE 1\000"
 14465      5F464149 
 14465      4C555245 
 14465      203100
 14466              	.LASF330:
 14467 98ff 5F5F4152 		.ascii	"__ARM_FEATURE_LDREX 7\000"
 14467      4D5F4645 
 14467      41545552 
 14467      455F4C44 
 14467      52455820 
 14468              	.LASF712:
 14469 9915 5F535444 		.ascii	"_STDINT_H \000"
 14469      494E545F 
 14469      482000
 14470              	.LASF730:
 14471 9920 5F494E54 		.ascii	"_INT32_EQ_LONG \000"
 14471      33325F45 
 14471      515F4C4F 
 14471      4E472000 
 14472              	.LASF1167:
 14473 9930 756C5061 		.ascii	"ulParameters\000"
 14473      72616D65 
 14473      74657273 
 14473      00
 14474              	.LASF879:
 14475 993d 65727251 		.ascii	"errQUEUE_BLOCKED ( -4 )\000"
 14475      55455545 
 14475      5F424C4F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 412


 14475      434B4544 
 14475      2028202D 
 14476              	.LASF220:
 14477 9955 5F5F4C4C 		.ascii	"__LLFRACT_EPSILON__ 0x1P-63LLR\000"
 14477      46524143 
 14477      545F4550 
 14477      53494C4F 
 14477      4E5F5F20 
 14478              	.LASF875:
 14479 9974 70644641 		.ascii	"pdFAIL ( pdFALSE )\000"
 14479      494C2028 
 14479      20706446 
 14479      414C5345 
 14479      202900
 14480              	.LASF1040:
 14481 9987 784C6973 		.ascii	"xListItem ListItem_t\000"
 14481      74497465 
 14481      6D204C69 
 14481      73744974 
 14481      656D5F74 
 14482              	.LASF189:
 14483 999c 5F5F5346 		.ascii	"__SFRACT_MAX__ 0X7FP-7HR\000"
 14483      52414354 
 14483      5F4D4158 
 14483      5F5F2030 
 14483      58374650 
 14484              	.LASF1001:
 14485 99b5 74726163 		.ascii	"tracePEND_FUNC_CALL(xFunctionToPend,pvParameter1,ul"
 14485      6550454E 
 14485      445F4655 
 14485      4E435F43 
 14485      414C4C28 
 14486 99e8 50617261 		.ascii	"Parameter2,ret) \000"
 14486      6D657465 
 14486      72322C72 
 14486      65742920 
 14486      00
 14487              	.LASF72:
 14488 99f9 5F5F5743 		.ascii	"__WCHAR_MAX__ 0xffffffffU\000"
 14488      4841525F 
 14488      4D41585F 
 14488      5F203078 
 14488      66666666 
 14489              	.LASF503:
 14490 9a13 5F5F6C6F 		.ascii	"__lock_close(lock) (_CAST_VOID 0)\000"
 14490      636B5F63 
 14490      6C6F7365 
 14490      286C6F63 
 14490      6B292028 
 14491              	.LASF620:
 14492 9a35 5F5F434F 		.ascii	"__CONCAT(x,y) __CONCAT1(x,y)\000"
 14492      4E434154 
 14492      28782C79 
 14492      29205F5F 
 14492      434F4E43 
 14493              	.LASF867:
 14494 9a52 636F6E66 		.ascii	"configKERNEL_INTERRUPT_PRIORITY ( 31 << (8 - config"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 413


 14494      69674B45 
 14494      524E454C 
 14494      5F494E54 
 14494      45525255 
 14495 9a85 5052494F 		.ascii	"PRIO_BITS) )\000"
 14495      5F424954 
 14495      53292029 
 14495      00
 14496              	.LASF95:
 14497 9a92 5F5F494E 		.ascii	"__INT16_C(c) c\000"
 14497      5431365F 
 14497      43286329 
 14497      206300
 14498              	.LASF1088:
 14499 9aa1 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD_FROM_ISR ( ( BaseT_t ) 9 )"
 14499      4F4D4D41 
 14499      4E445F43 
 14499      48414E47 
 14499      455F5045 
 14500 9ad4 00       		.ascii	"\000"
 14501              	.LASF1032:
 14502 9ad5 78546173 		.ascii	"xTaskParameters TaskParameters_t\000"
 14502      6B506172 
 14502      616D6574 
 14502      65727320 
 14502      5461736B 
 14503              	.LASF409:
 14504 9af6 5F414E44 		.ascii	"_AND ,\000"
 14504      202C00
 14505              	.LASF912:
 14506 9afd 706F7274 		.ascii	"portASSERT_IF_INTERRUPT_PRIORITY_INVALID() vPortVal"
 14506      41535345 
 14506      52545F49 
 14506      465F494E 
 14506      54455252 
 14507 9b30 69646174 		.ascii	"idateInterruptPriority()\000"
 14507      65496E74 
 14507      65727275 
 14507      70745072 
 14507      696F7269 
 14508              	.LASF570:
 14509 9b49 5F524545 		.ascii	"_REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._ge"
 14509      4E545F47 
 14509      45544441 
 14509      54455F45 
 14509      52525F50 
 14510 9b7c 74646174 		.ascii	"tdate_err))\000"
 14510      655F6572 
 14510      72292900 
 14511              	.LASF524:
 14512 9b88 5F415445 		.ascii	"_ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL},"
 14512      5849545F 
 14512      494E4954 
 14512      207B5F4E 
 14512      554C4C2C 
 14513 9bbb 20302C20 		.ascii	" 0, 0}}\000"
 14513      307D7D00 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 414


 14514              	.LASF864:
 14515 9bc3 636F6E66 		.ascii	"configNET_MASK2 255\000"
 14515      69674E45 
 14515      545F4D41 
 14515      534B3220 
 14515      32353500 
 14516              	.LASF680:
 14517 9bd7 5F5F4445 		.ascii	"__DEQUALIFY(type,var) ((type)(__uintptr_t)(const vo"
 14517      5155414C 
 14517      49465928 
 14517      74797065 
 14517      2C766172 
 14518 9c0a 6C617469 		.ascii	"latile void *)(var))\000"
 14518      6C652076 
 14518      6F696420 
 14518      2A292876 
 14518      61722929 
 14519              	.LASF838:
 14520 9c1f 636F6E66 		.ascii	"configUSE_TRACE_FACILITY 1\000"
 14520      69675553 
 14520      455F5452 
 14520      4143455F 
 14520      46414349 
 14521              	.LASF10:
 14522 9c3a 5F5F4154 		.ascii	"__ATOMIC_ACQ_REL 4\000"
 14522      4F4D4943 
 14522      5F414351 
 14522      5F52454C 
 14522      203400
 14523              	.LASF40:
 14524 9c4d 5F5F494E 		.ascii	"__INT32_TYPE__ long int\000"
 14524      5433325F 
 14524      54595045 
 14524      5F5F206C 
 14524      6F6E6720 
 14525              	.LASF631:
 14526 9c65 5F5F7061 		.ascii	"__packed __attribute__((__packed__))\000"
 14526      636B6564 
 14526      205F5F61 
 14526      74747269 
 14526      62757465 
 14527              	.LASF458:
 14528 9c8a 5F574348 		.ascii	"_WCHAR_T_DEFINED_ \000"
 14528      41525F54 
 14528      5F444546 
 14528      494E4544 
 14528      5F2000
 14529              	.LASF852:
 14530 9c9d 494E434C 		.ascii	"INCLUDE_vTaskDelete 1\000"
 14530      5544455F 
 14530      76546173 
 14530      6B44656C 
 14530      65746520 
 14531              	.LASF1265:
 14532 9cb3 784C6973 		.ascii	"xListIsEmpty\000"
 14532      74497345 
 14532      6D707479 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 415


 14532      00
 14533              	.LASF364:
 14534 9cc0 5F57414E 		.ascii	"_WANT_IO_LONG_LONG 1\000"
 14534      545F494F 
 14534      5F4C4F4E 
 14534      475F4C4F 
 14534      4E472031 
 14535              	.LASF928:
 14536 9cd5 706F7274 		.ascii	"portCRITICAL_NESTING_IN_TCB 0\000"
 14536      43524954 
 14536      4943414C 
 14536      5F4E4553 
 14536      54494E47 
 14537              	.LASF691:
 14538 9cf3 5F5F6173 		.ascii	"__asserts_shared(...) __lock_annotate(assert_shared"
 14538      73657274 
 14538      735F7368 
 14538      61726564 
 14538      282E2E2E 
 14539 9d26 5F6C6F63 		.ascii	"_lock(__VA_ARGS__))\000"
 14539      6B285F5F 
 14539      56415F41 
 14539      5247535F 
 14539      5F292900 
 14540              	.LASF498:
 14541 9d3a 5F5F5359 		.ascii	"__SYS_LOCK_H__ \000"
 14541      535F4C4F 
 14541      434B5F48 
 14541      5F5F2000 
 14542              	.LASF720:
 14543 9d4a 5F5F696E 		.ascii	"__int20\000"
 14543      74323000 
 14544              	.LASF800:
 14545 9d52 494E545F 		.ascii	"INT_FAST32_MAX (__INT_FAST32_MAX__)\000"
 14545      46415354 
 14545      33325F4D 
 14545      41582028 
 14545      5F5F494E 
 14546              	.LASF426:
 14547 9d76 5F454C49 		.ascii	"_ELIDABLE_INLINE extern __inline__ _ATTRIBUTE ((__a"
 14547      4441424C 
 14547      455F494E 
 14547      4C494E45 
 14547      20657874 
 14548 9da9 6C776179 		.ascii	"lways_inline__))\000"
 14548      735F696E 
 14548      6C696E65 
 14548      5F5F2929 
 14548      00
 14549              	.LASF968:
 14550 9dba 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) \000"
 14550      65515545 
 14550      55455F53 
 14550      454E445F 
 14550      46524F4D 
 14551              	.LASF535:
 14552 9de4 5F524545 		.ascii	"_REENT_ASCTIME_SIZE 26\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 416


 14552      4E545F41 
 14552      53435449 
 14552      4D455F53 
 14552      495A4520 
 14553              	.LASF1051:
 14554 9dfb 6C697374 		.ascii	"listGET_NEXT(pxListItem) ( ( pxListItem )->pxNext )"
 14554      4745545F 
 14554      4E455854 
 14554      2870784C 
 14554      69737449 
 14555 9e2e 00       		.ascii	"\000"
 14556              	.LASF766:
 14557 9e2f 494E5450 		.ascii	"INTPTR_MIN (-__INTPTR_MAX__ - 1)\000"
 14557      54525F4D 
 14557      494E2028 
 14557      2D5F5F49 
 14557      4E545054 
 14558              	.LASF1281:
 14559 9e50 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 14559      6B476574 
 14559      43757272 
 14559      656E7454 
 14559      61736B48 
 14560              	.LASF812:
 14561 9e6a 50545244 		.ascii	"PTRDIFF_MIN (-PTRDIFF_MAX - 1)\000"
 14561      4946465F 
 14561      4D494E20 
 14561      282D5054 
 14561      52444946 
 14562              	.LASF384:
 14563 9e89 5F504F53 		.ascii	"_POSIX_C_SOURCE\000"
 14563      49585F43 
 14563      5F534F55 
 14563      52434500 
 14564              	.LASF80:
 14565 9e99 5F5F5549 		.ascii	"__UINTMAX_MAX__ 0xffffffffffffffffULL\000"
 14565      4E544D41 
 14565      585F4D41 
 14565      585F5F20 
 14565      30786666 
 14566              	.LASF1139:
 14567 9ebf 78497465 		.ascii	"xItemValue\000"
 14567      6D56616C 
 14567      756500
 14568              	.LASF137:
 14569 9eca 5F5F4442 		.ascii	"__DBL_MANT_DIG__ 53\000"
 14569      4C5F4D41 
 14569      4E545F44 
 14569      49475F5F 
 14569      20353300 
 14570              	.LASF1200:
 14571 9ede 70785443 		.ascii	"pxTCB\000"
 14571      4200
 14572              	.LASF212:
 14573 9ee4 5F5F554C 		.ascii	"__ULFRACT_IBIT__ 0\000"
 14573      46524143 
 14573      545F4942 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 417


 14573      49545F5F 
 14573      203000
 14574              	.LASF1183:
 14575 9ef7 75785072 		.ascii	"uxPriority\000"
 14575      696F7269 
 14575      747900
 14576              	.LASF69:
 14577 9f02 5F5F494E 		.ascii	"__INT_MAX__ 0x7fffffff\000"
 14577      545F4D41 
 14577      585F5F20 
 14577      30783766 
 14577      66666666 
 14578              	.LASF49:
 14579 9f19 5F5F494E 		.ascii	"__INT_LEAST64_TYPE__ long long int\000"
 14579      545F4C45 
 14579      41535436 
 14579      345F5459 
 14579      50455F5F 
 14580              	.LASF971:
 14581 9f3c 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR_FAILED(pxQueue) \000"
 14581      65515545 
 14581      55455F50 
 14581      45454B5F 
 14581      46524F4D 
 14582              	.LASF717:
 14583 9f66 7369676E 		.ascii	"signed\000"
 14583      656400
 14584              	.LASF226:
 14585 9f6d 5F5F5341 		.ascii	"__SACCUM_FBIT__ 7\000"
 14585      4343554D 
 14585      5F464249 
 14585      545F5F20 
 14585      3700
 14586              	.LASF759:
 14587 9f7f 5F5F696E 		.ascii	"__int_least16_t_defined 1\000"
 14587      745F6C65 
 14587      61737431 
 14587      365F745F 
 14587      64656669 
 14588              	.LASF930:
 14589 9f99 494E434C 		.ascii	"INCLUDE_xEventGroupSetBitFromISR 0\000"
 14589      5544455F 
 14589      78457665 
 14589      6E744772 
 14589      6F757053 
 14590              	.LASF1100:
 14591 9fbc 7461736B 		.ascii	"taskSECOND_CHECK_FOR_STACK_OVERFLOW() \000"
 14591      5345434F 
 14591      4E445F43 
 14591      4845434B 
 14591      5F464F52 
 14592              	.LASF950:
 14593 9fe3 74726163 		.ascii	"traceMOVED_TASK_TO_READY_STATE(pxTCB) \000"
 14593      654D4F56 
 14593      45445F54 
 14593      41534B5F 
 14593      544F5F52 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 418


 14594              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160919 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 419


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:63     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:60     .bss.pxCurrentTCB:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:66     .bss.pxReadyTasksLists:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:69     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:72     .bss.xDelayedTaskList1:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:75     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:78     .bss.xDelayedTaskList2:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:81     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:84     .bss.pxDelayedTaskList:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:87     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:90     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:93     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:96     .bss.xPendingReadyList:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:99     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:102    .bss.xTasksWaitingTermination:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:105    .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:108    .bss.uxTasksDeleted:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:111    .bss.uxTasksDeleted:00000000 uxTasksDeleted
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:114    .bss.xSuspendedTaskList:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:117    .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:120    .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:123    .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:126    .bss.xTickCount:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:129    .bss.xTickCount:00000000 xTickCount
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:132    .bss.uxTopReadyPriority:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:135    .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:138    .bss.xSchedulerRunning:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:141    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:144    .bss.uxPendedTicks:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:147    .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:150    .bss.xYieldPending:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:153    .bss.xYieldPending:00000000 xYieldPending
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:156    .bss.xNumOfOverflows:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:159    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:162    .bss.uxTaskNumber:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:165    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:168    .data.xNextTaskUnblockTime:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:171    .data.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:174    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:177    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:180    .text.xTaskGenericCreate:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:185    .text.xTaskGenericCreate:00000000 xTaskGenericCreate
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3831   .text.prvAllocateTCBAndStack:00000000 prvAllocateTCBAndStack
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3448   .text.prvInitialiseTCBVariables:00000000 prvInitialiseTCBVariables
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3566   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:405    .text.xTaskGenericCreate:0000014c $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:415    .text.vTaskDelete:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:420    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4268   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:558    .text.vTaskDelete:000000c8 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:570    .text.vTaskDelayUntil:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:575    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1743   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3749   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1783   .text.xTaskResumeAll:00000000 xTaskResumeAll
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 420


C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:731    .text.vTaskDelayUntil:000000d4 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:739    .text.vTaskDelay:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:744    .text.vTaskDelay:00000000 vTaskDelay
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:831    .text.vTaskDelay:00000078 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:839    .text.uxTaskPriorityGet:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:844    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:894    .text.uxTaskPriorityGet:00000030 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:899    .text.vTaskPrioritySet:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:904    .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1114   .text.vTaskPrioritySet:00000130 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1121   .text.vTaskSuspend:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1126   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2494   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1276   .text.vTaskSuspend:000000d8 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1287   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1291   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1375   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1381   .text.vTaskResume:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1386   .text.vTaskResume:00000000 vTaskResume
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1484   .text.vTaskResume:00000090 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1491   .text.xTaskResumeFromISR:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1496   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1607   .text.xTaskResumeFromISR:000000a4 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1616   .rodata:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1620   .text.vTaskStartScheduler:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1625   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1694   .text.vTaskStartScheduler:00000058 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3420   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1702   .text.vTaskEndScheduler:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1707   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1733   .text.vTaskEndScheduler:00000018 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1738   .text.vTaskSuspendAll:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1773   .text.vTaskSuspendAll:00000018 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1778   .text.xTaskResumeAll:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2243   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1944   .text.xTaskResumeAll:000000e8 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1956   .text.xTaskGetTickCount:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1961   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:1996   .text.xTaskGetTickCount:00000020 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2001   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2006   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2045   .text.xTaskGetTickCountFromISR:00000028 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2050   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2055   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2082   .text.uxTaskGetNumberOfTasks:00000010 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2087   .text.uxTaskGetSystemState:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2092   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3914   .text.prvListTaskWithinSingleList:00000000 prvListTaskWithinSingleList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2228   .text.uxTaskGetSystemState:000000dc $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2238   .text.xTaskIncrementTick:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2474   .text.xTaskIncrementTick:00000150 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2489   .text.vTaskSwitchContext:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2611   .text.vTaskSwitchContext:00000090 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2620   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2625   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2714   .text.vTaskPlaceOnEventList:00000080 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2722   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 421


C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2727   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2834   .text.vTaskPlaceOnUnorderedEventList:0000009c $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2843   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2848   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2958   .text.xTaskRemoveFromEventList:0000009c $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2968   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:2973   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3083   .text.xTaskRemoveFromUnorderedEventList:0000009c $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3092   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3097   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3142   .text.vTaskSetTimeOutState:0000002c $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3148   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3153   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3270   .text.xTaskCheckForTimeOut:00000098 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3276   .text.vTaskMissedYield:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3281   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3309   .text.vTaskMissedYield:00000014 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3314   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3319   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3368   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3373   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3416   .text.prvIdleTask:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3654   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3444   .text.prvInitialiseTCBVariables:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3562   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3638   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3650   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4229   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3738   .text.prvCheckTasksWaitingTermination:0000006c $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3745   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3818   .text.prvAddCurrentTaskToDelayedList:00000058 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3827   .text.prvAllocateTCBAndStack:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:3910   .text.prvListTaskWithinSingleList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4107   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4103   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4164   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4169   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4220   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4225   .text.prvDeleteTCB:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4264   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4331   .text.prvResetNextTaskUnblockTime:00000040 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4337   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4342   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4376   .text.xTaskGetCurrentTaskHandle:00000018 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4381   .text.vTaskPriorityInherit:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4386   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4534   .text.vTaskPriorityInherit:000000e0 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4541   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4546   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4682   .text.xTaskPriorityDisinherit:000000d0 $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4688   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4693   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4736   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4741   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4746   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s:4785   .text.pvTaskIncrementMutexHeldCount:00000024 $d
                     .debug_frame:00000010 $d
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccxFq0aC.s 			page 422


                           .group:00000000 wm4.0.c0d9c46791312c607b68c96c4ad07fb1
                           .group:00000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:00000000 wm4.newlib.h.21.0b9fc973bddc8b940a18de2b6ea6adc7
                           .group:00000000 wm4.features.h.22.692cd1f2e947ca7b8fea300222f5f1f2
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:00000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.cdefs.h.47.d0af77d4010113800282e6476aca9724
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f7bb76d8eb43fb7e79a949819dbf4bda
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:00000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8
                           .group:00000000 wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066
                           .group:00000000 wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946
                           .group:00000000 wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e
                           .group:00000000 wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370
                           .group:00000000 wm4.task.h.84.e110bc08aaffa67ce542955b890201b4
                           .group:00000000 wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d
                           .group:00000000 wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95

UNDEFINED SYMBOLS
ulPortSetInterruptMask
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
vPortValidateInterruptPriority
vPortClearInterruptMask
xPortStartScheduler
vPortEndScheduler
vApplicationTickHook
vListInsert
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
