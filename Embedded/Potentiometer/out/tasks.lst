ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"tasks.c"
  14              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.9.3 20150303 (release) [ARM/embedded-4_9-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I config -I system -I core -I drivers -I FreeRTOS
  18              	@ -I FreeRTOS/include -I FreeRTOS/portable/GCC/ARM_CM3 -I FreeRTOS/portable
  19              	@ -I tasks/rc_task_leds -I tasks/rc_task_pot -I modules/rc_leds
  20              	@ -I modules/rc_pot -I drivers/rc_system -I drivers/rc_gpio
  21              	@ -I drivers/rc_uart -I drivers/rc_pinsel -I drivers/rc_timer
  22              	@ -I drivers/rc_adc -imultilib armv7-m
  23              	@ -iprefix c:\gnu tools arm embedded\4.9 2015q1\bin\../lib/gcc/arm-none-eabi/4.9.3/
  24              	@ -isysroot c:\gnu tools arm embedded\4.9 2015q1\bin\../arm-none-eabi
  25              	@ -MD out/tasks.d -MF out/tasks.d -MP -MQ out/tasks.o -D__USES_INITFINI__
  26              	@ FreeRTOS/tasks.c -mcpu=cortex-m3 -mthumb -auxbase-strip out/tasks.o -g
  27              	@ -ggdb3 -O0 -Wall -Wstrict-prototypes -Wextra -std=gnu90
  28              	@ -ffunction-sections -fdata-sections -fverbose-asm
  29              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec -fcommon
  30              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  31              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  32              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  33              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  34              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  35              	@ -fleading-underscore -flifetime-dse -fmath-errno -fmerge-debug-strings
  36              	@ -fpeephole -fprefetch-loop-arrays -freg-struct-return
  37              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  38              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  39              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  40              	@ -fsched-stalled-insns-dep -fshow-column -fsigned-zeros
  41              	@ -fsplit-ivs-in-unroller -fstrict-volatile-bitfields -fsync-libcalls
  42              	@ -ftrapping-math -ftree-coalesce-vars -ftree-cselim -ftree-forwprop
  43              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  44              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  45              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  46              	@ -fzero-initialized-in-bss -mfix-cortex-m3-ldrd -mlittle-endian -mlra
  47              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  48              	@ -mvectorize-with-neon-quad
  49              	
  50              		.text
  51              	.Ltext0:
  52              		.cfi_sections	.debug_frame
  53              		.global	pxCurrentTCB
  54              		.section	.bss.pxCurrentTCB,"aw",%nobits
  55              		.align	2
  56              		.type	pxCurrentTCB, %object
  57              		.size	pxCurrentTCB, 4
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 2


  58              	pxCurrentTCB:
  59 0000 00000000 		.space	4
  60              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  61              		.align	2
  62              		.type	pxReadyTasksLists, %object
  63              		.size	pxReadyTasksLists, 160
  64              	pxReadyTasksLists:
  65 0000 00000000 		.space	160
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  67              		.align	2
  68              		.type	xDelayedTaskList1, %object
  69              		.size	xDelayedTaskList1, 20
  70              	xDelayedTaskList1:
  71 0000 00000000 		.space	20
  71      00000000 
  71      00000000 
  71      00000000 
  71      00000000 
  72              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  73              		.align	2
  74              		.type	xDelayedTaskList2, %object
  75              		.size	xDelayedTaskList2, 20
  76              	xDelayedTaskList2:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  79              		.align	2
  80              		.type	pxDelayedTaskList, %object
  81              		.size	pxDelayedTaskList, 4
  82              	pxDelayedTaskList:
  83 0000 00000000 		.space	4
  84              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  85              		.align	2
  86              		.type	pxOverflowDelayedTaskList, %object
  87              		.size	pxOverflowDelayedTaskList, 4
  88              	pxOverflowDelayedTaskList:
  89 0000 00000000 		.space	4
  90              		.section	.bss.xPendingReadyList,"aw",%nobits
  91              		.align	2
  92              		.type	xPendingReadyList, %object
  93              		.size	xPendingReadyList, 20
  94              	xPendingReadyList:
  95 0000 00000000 		.space	20
  95      00000000 
  95      00000000 
  95      00000000 
  95      00000000 
  96              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  97              		.align	2
  98              		.type	xTasksWaitingTermination, %object
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 3


  99              		.size	xTasksWaitingTermination, 20
 100              	xTasksWaitingTermination:
 101 0000 00000000 		.space	20
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.section	.bss.uxTasksDeleted,"aw",%nobits
 103              		.align	2
 104              		.type	uxTasksDeleted, %object
 105              		.size	uxTasksDeleted, 4
 106              	uxTasksDeleted:
 107 0000 00000000 		.space	4
 108              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 109              		.align	2
 110              		.type	xSuspendedTaskList, %object
 111              		.size	xSuspendedTaskList, 20
 112              	xSuspendedTaskList:
 113 0000 00000000 		.space	20
 113      00000000 
 113      00000000 
 113      00000000 
 113      00000000 
 114              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 115              		.align	2
 116              		.type	uxCurrentNumberOfTasks, %object
 117              		.size	uxCurrentNumberOfTasks, 4
 118              	uxCurrentNumberOfTasks:
 119 0000 00000000 		.space	4
 120              		.section	.bss.xTickCount,"aw",%nobits
 121              		.align	2
 122              		.type	xTickCount, %object
 123              		.size	xTickCount, 4
 124              	xTickCount:
 125 0000 00000000 		.space	4
 126              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 127              		.align	2
 128              		.type	uxTopReadyPriority, %object
 129              		.size	uxTopReadyPriority, 4
 130              	uxTopReadyPriority:
 131 0000 00000000 		.space	4
 132              		.section	.bss.xSchedulerRunning,"aw",%nobits
 133              		.align	2
 134              		.type	xSchedulerRunning, %object
 135              		.size	xSchedulerRunning, 4
 136              	xSchedulerRunning:
 137 0000 00000000 		.space	4
 138              		.section	.bss.uxPendedTicks,"aw",%nobits
 139              		.align	2
 140              		.type	uxPendedTicks, %object
 141              		.size	uxPendedTicks, 4
 142              	uxPendedTicks:
 143 0000 00000000 		.space	4
 144              		.section	.bss.xYieldPending,"aw",%nobits
 145              		.align	2
 146              		.type	xYieldPending, %object
 147              		.size	xYieldPending, 4
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 4


 148              	xYieldPending:
 149 0000 00000000 		.space	4
 150              		.section	.bss.xNumOfOverflows,"aw",%nobits
 151              		.align	2
 152              		.type	xNumOfOverflows, %object
 153              		.size	xNumOfOverflows, 4
 154              	xNumOfOverflows:
 155 0000 00000000 		.space	4
 156              		.section	.bss.uxTaskNumber,"aw",%nobits
 157              		.align	2
 158              		.type	uxTaskNumber, %object
 159              		.size	uxTaskNumber, 4
 160              	uxTaskNumber:
 161 0000 00000000 		.space	4
 162              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 163              		.align	2
 164              		.type	xNextTaskUnblockTime, %object
 165              		.size	xNextTaskUnblockTime, 4
 166              	xNextTaskUnblockTime:
 167 0000 FFFFFFFF 		.word	-1
 168              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 169              		.align	2
 170              		.type	uxSchedulerSuspended, %object
 171              		.size	uxSchedulerSuspended, 4
 172              	uxSchedulerSuspended:
 173 0000 00000000 		.space	4
 174              		.section	.text.xTaskGenericCreate,"ax",%progbits
 175              		.align	2
 176              		.global	xTaskGenericCreate
 177              		.thumb
 178              		.thumb_func
 179              		.type	xTaskGenericCreate, %function
 180              	xTaskGenericCreate:
 181              	.LFB1:
 182              		.file 1 "FreeRTOS/tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/tasks.c ****     All rights reserved
   4:FreeRTOS/tasks.c **** 
   5:FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/tasks.c **** 
   7:FreeRTOS/tasks.c ****     ***************************************************************************
   8:FreeRTOS/tasks.c ****      *                                                                       *
   9:FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/tasks.c ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/tasks.c ****      *                                                                       *
  13:FreeRTOS/tasks.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/tasks.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/tasks.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/tasks.c ****      *                                                                       *
  17:FreeRTOS/tasks.c ****      *    Thank you!                                                         *
  18:FreeRTOS/tasks.c ****      *                                                                       *
  19:FreeRTOS/tasks.c ****     ***************************************************************************
  20:FreeRTOS/tasks.c **** 
  21:FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 5


  23:FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/tasks.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/tasks.c **** 
  27:FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/tasks.c **** 
  32:FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/tasks.c **** 
  37:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  38:FreeRTOS/tasks.c **** 
  39:FreeRTOS/tasks.c ****     ***************************************************************************
  40:FreeRTOS/tasks.c ****      *                                                                       *
  41:FreeRTOS/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/tasks.c ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/tasks.c ****      *                                                                       *
  44:FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/tasks.c ****      *                                                                       *
  46:FreeRTOS/tasks.c ****     ***************************************************************************
  47:FreeRTOS/tasks.c **** 
  48:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/tasks.c ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/tasks.c **** 
  51:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/tasks.c **** 
  55:FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/tasks.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  62:FreeRTOS/tasks.c **** 
  63:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  64:FreeRTOS/tasks.c **** */
  65:FreeRTOS/tasks.c **** 
  66:FreeRTOS/tasks.c **** /* Standard includes. */
  67:FreeRTOS/tasks.c **** #include <stdlib.h>
  68:FreeRTOS/tasks.c **** #include <string.h>
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  71:FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  72:FreeRTOS/tasks.c **** task.h is included from an application file. */
  73:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  74:FreeRTOS/tasks.c **** 
  75:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  76:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  77:FreeRTOS/tasks.c **** #include "task.h"
  78:FreeRTOS/tasks.c **** #include "timers.h"
  79:FreeRTOS/tasks.c **** #include "StackMacros.h"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 6


  80:FreeRTOS/tasks.c **** 
  81:FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  82:FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  83:FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  84:FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  85:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  86:FreeRTOS/tasks.c **** 
  87:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  88:FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  89:FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  90:FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  91:FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  92:FreeRTOS/tasks.c **** 	#include <stdio.h>
  93:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  94:FreeRTOS/tasks.c **** 
  95:FreeRTOS/tasks.c **** /* Sanity check the configuration. */
  96:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
  97:FreeRTOS/tasks.c **** 	#if INCLUDE_vTaskSuspend != 1
  98:FreeRTOS/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
  99:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 100:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 101:FreeRTOS/tasks.c **** 
 102:FreeRTOS/tasks.c **** /*
 103:FreeRTOS/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 104:FreeRTOS/tasks.c ****  */
 105:FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 106:FreeRTOS/tasks.c **** 
 107:FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 108:FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 109:FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 110:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 111:FreeRTOS/tasks.c **** #else
 112:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 113:FreeRTOS/tasks.c **** #endif
 114:FreeRTOS/tasks.c **** 
 115:FreeRTOS/tasks.c **** /*
 116:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 117:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 118:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 119:FreeRTOS/tasks.c ****  */
 120:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 121:FreeRTOS/tasks.c **** {
 122:FreeRTOS/tasks.c **** 	volatile StackT_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the tasks s
 123:FreeRTOS/tasks.c **** 
 124:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 125:FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 126:FreeRTOS/tasks.c **** 	#endif
 127:FreeRTOS/tasks.c **** 
 128:FreeRTOS/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 129:FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 130:FreeRTOS/tasks.c **** 	UBaseT_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 131:FreeRTOS/tasks.c **** 	StackT_t			*pxStack;			/*< Points to the start of the stack. */
 132:FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 133:FreeRTOS/tasks.c **** 
 134:FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 135:FreeRTOS/tasks.c **** 		StackT_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack gro
 136:FreeRTOS/tasks.c **** 	#endif
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 7


 137:FreeRTOS/tasks.c **** 
 138:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 139:FreeRTOS/tasks.c **** 		UBaseT_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do not 
 140:FreeRTOS/tasks.c **** 	#endif
 141:FreeRTOS/tasks.c **** 
 142:FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 143:FreeRTOS/tasks.c **** 		UBaseT_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It allow
 144:FreeRTOS/tasks.c **** 		UBaseT_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. */
 145:FreeRTOS/tasks.c **** 	#endif
 146:FreeRTOS/tasks.c **** 
 147:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 148:FreeRTOS/tasks.c **** 		UBaseT_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority inhe
 149:FreeRTOS/tasks.c **** 		UBaseT_t 	uxMutexesHeld;
 150:FreeRTOS/tasks.c **** 	#endif
 151:FreeRTOS/tasks.c **** 
 152:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 153:FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 154:FreeRTOS/tasks.c **** 	#endif
 155:FreeRTOS/tasks.c **** 
 156:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 157:FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 158:FreeRTOS/tasks.c **** 	#endif
 159:FreeRTOS/tasks.c **** 
 160:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 161:FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 162:FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 163:FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 164:FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 165:FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 166:FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 167:FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 168:FreeRTOS/tasks.c **** 		struct 	_reent xNewLib_reent;
 169:FreeRTOS/tasks.c **** 	#endif
 170:FreeRTOS/tasks.c **** 
 171:FreeRTOS/tasks.c **** } tskTCB;
 172:FreeRTOS/tasks.c **** 
 173:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 174:FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 175:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 176:FreeRTOS/tasks.c **** 
 177:FreeRTOS/tasks.c **** /*
 178:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 179:FreeRTOS/tasks.c ****  * be global, rather than file scope.
 180:FreeRTOS/tasks.c ****  */
 181:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 182:FreeRTOS/tasks.c **** 	#define static
 183:FreeRTOS/tasks.c **** #endif
 184:FreeRTOS/tasks.c **** 
 185:FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 186:FreeRTOS/tasks.c **** static variables must be declared volatile. */
 187:FreeRTOS/tasks.c **** 
 188:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 189:FreeRTOS/tasks.c **** 
 190:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 191:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 192:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 193:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 8


 194:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 195:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 196:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 197:FreeRTOS/tasks.c **** 
 198:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 199:FreeRTOS/tasks.c **** 
 200:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 201:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseT_t uxTasksDeleted = ( UBaseT_t ) 0U;
 202:FreeRTOS/tasks.c **** 
 203:FreeRTOS/tasks.c **** #endif
 204:FreeRTOS/tasks.c **** 
 205:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 206:FreeRTOS/tasks.c **** 
 207:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 208:FreeRTOS/tasks.c **** 
 209:FreeRTOS/tasks.c **** #endif
 210:FreeRTOS/tasks.c **** 
 211:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 212:FreeRTOS/tasks.c **** 
 213:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 214:FreeRTOS/tasks.c **** 
 215:FreeRTOS/tasks.c **** #endif
 216:FreeRTOS/tasks.c **** 
 217:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 218:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxCurrentNumberOfTasks 	= ( UBaseT_t ) 0U;
 219:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xTickCount 				= ( TickT_t ) 0U;
 220:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 221:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xSchedulerRunning 		= pdFALSE;
 222:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxPendedTicks 			= ( UBaseT_t ) 0U;
 223:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xYieldPending 			= pdFALSE;
 224:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xNumOfOverflows 			= ( BaseT_t ) 0;
 225:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseT_t uxTaskNumber 					= ( UBaseT_t ) 0U;
 226:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xNextTaskUnblockTime		= portMAX_DELAY;
 227:FreeRTOS/tasks.c **** 
 228:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 229:FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 230:FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 231:FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 232:FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 233:FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 234:FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 235:FreeRTOS/tasks.c **** accessed from a critical section. */
 236:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxSchedulerSuspended	= ( UBaseT_t ) pdFALSE;
 237:FreeRTOS/tasks.c **** 
 238:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 239:FreeRTOS/tasks.c **** 
 240:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 241:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 242:FreeRTOS/tasks.c **** 
 243:FreeRTOS/tasks.c **** #endif
 244:FreeRTOS/tasks.c **** 
 245:FreeRTOS/tasks.c **** /*lint +e956 */
 246:FreeRTOS/tasks.c **** 
 247:FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 248:FreeRTOS/tasks.c **** 
 249:FreeRTOS/tasks.c **** /*
 250:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 9


 251:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 252:FreeRTOS/tasks.c ****  */
 253:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 254:FreeRTOS/tasks.c **** 
 255:FreeRTOS/tasks.c **** /*
 256:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 257:FreeRTOS/tasks.c ****  */
 258:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 259:FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 260:FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 261:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 262:FreeRTOS/tasks.c **** 
 263:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 264:FreeRTOS/tasks.c **** 
 265:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 266:FreeRTOS/tasks.c **** 
 267:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 268:FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 269:FreeRTOS/tasks.c **** 	microcontroller architecture. */
 270:FreeRTOS/tasks.c **** 
 271:FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 272:FreeRTOS/tasks.c **** 	state task. */
 273:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 274:FreeRTOS/tasks.c **** 	{																									\
 275:FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 276:FreeRTOS/tasks.c **** 		{																								\
 277:FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 278:FreeRTOS/tasks.c **** 		}																								\
 279:FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 280:FreeRTOS/tasks.c **** 
 281:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 282:FreeRTOS/tasks.c **** 
 283:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 284:FreeRTOS/tasks.c **** 	{																									\
 285:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 286:FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 287:FreeRTOS/tasks.c **** 		{																								\
 288:FreeRTOS/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 289:FreeRTOS/tasks.c **** 			--uxTopReadyPriority;																		\
 290:FreeRTOS/tasks.c **** 		}																								\
 291:FreeRTOS/tasks.c **** 																										\
 292:FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 293:FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 294:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 295:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 296:FreeRTOS/tasks.c **** 
 297:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 298:FreeRTOS/tasks.c **** 
 299:FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 300:FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 301:FreeRTOS/tasks.c **** 	being used. */
 302:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 303:FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 304:FreeRTOS/tasks.c **** 
 305:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 306:FreeRTOS/tasks.c **** 
 307:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 10


 308:FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 309:FreeRTOS/tasks.c **** 	architecture being used. */
 310:FreeRTOS/tasks.c **** 
 311:FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 312:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 313:FreeRTOS/tasks.c **** 
 314:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 315:FreeRTOS/tasks.c **** 
 316:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 317:FreeRTOS/tasks.c **** 	{																								\
 318:FreeRTOS/tasks.c **** 	UBaseT_t uxTopPriority;																		\
 319:FreeRTOS/tasks.c **** 																									\
 320:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 321:FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 322:FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 323:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 324:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 325:FreeRTOS/tasks.c **** 
 326:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 327:FreeRTOS/tasks.c **** 
 328:FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 329:FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 330:FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 331:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 332:FreeRTOS/tasks.c **** 	{																									\
 333:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseT_t ) 0 )	\
 334:FreeRTOS/tasks.c **** 		{																								\
 335:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 336:FreeRTOS/tasks.c **** 		}																								\
 337:FreeRTOS/tasks.c **** 	}
 338:FreeRTOS/tasks.c **** 
 339:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 340:FreeRTOS/tasks.c **** 
 341:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 342:FreeRTOS/tasks.c **** 
 343:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 344:FreeRTOS/tasks.c **** count overflows. */
 345:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 346:FreeRTOS/tasks.c **** {																									\
 347:FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 348:FreeRTOS/tasks.c **** 																									\
 349:FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 350:FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 351:FreeRTOS/tasks.c **** 																									\
 352:FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 353:FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 354:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 355:FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 356:FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 357:FreeRTOS/tasks.c **** }
 358:FreeRTOS/tasks.c **** 
 359:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 360:FreeRTOS/tasks.c **** 
 361:FreeRTOS/tasks.c **** /*
 362:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 363:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 364:FreeRTOS/tasks.c ****  */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 11


 365:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 366:FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )															\
 367:FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 368:FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 369:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 370:FreeRTOS/tasks.c **** 
 371:FreeRTOS/tasks.c **** /*
 372:FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 373:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 374:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 375:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 376:FreeRTOS/tasks.c ****  */
 377:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 378:FreeRTOS/tasks.c **** 
 379:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 380:FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 381:FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 382:FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 383:FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 384:FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 385:FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 386:FreeRTOS/tasks.c **** to its original value when it is released. */
 387:FreeRTOS/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 388:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 389:FreeRTOS/tasks.c **** #else
 390:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 391:FreeRTOS/tasks.c **** #endif
 392:FreeRTOS/tasks.c **** 
 393:FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 394:FreeRTOS/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 395:FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 396:FreeRTOS/tasks.c **** #endif
 397:FreeRTOS/tasks.c **** 
 398:FreeRTOS/tasks.c **** #if configUSE_TICK_HOOK > 0
 399:FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 400:FreeRTOS/tasks.c **** #endif
 401:FreeRTOS/tasks.c **** 
 402:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 403:FreeRTOS/tasks.c **** 
 404:FreeRTOS/tasks.c **** /*
 405:FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 406:FreeRTOS/tasks.c ****  * into the TCB structure.
 407:FreeRTOS/tasks.c ****  */
 408:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
 409:FreeRTOS/tasks.c **** 
 410:FreeRTOS/tasks.c **** /**
 411:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 412:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 413:FreeRTOS/tasks.c ****  * is in any other state.
 414:FreeRTOS/tasks.c ****  */
 415:FreeRTOS/tasks.c **** static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 416:FreeRTOS/tasks.c **** 
 417:FreeRTOS/tasks.c **** /*
 418:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 419:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 420:FreeRTOS/tasks.c ****  */
 421:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 12


 422:FreeRTOS/tasks.c **** 
 423:FreeRTOS/tasks.c **** /*
 424:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 425:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 426:FreeRTOS/tasks.c ****  * creation of the first user task.
 427:FreeRTOS/tasks.c ****  *
 428:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 429:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 430:FreeRTOS/tasks.c ****  *
 431:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 432:FreeRTOS/tasks.c ****  *
 433:FreeRTOS/tasks.c ****  */
 434:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 435:FreeRTOS/tasks.c **** 
 436:FreeRTOS/tasks.c **** /*
 437:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 438:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 439:FreeRTOS/tasks.c ****  *
 440:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 441:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 442:FreeRTOS/tasks.c ****  */
 443:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 444:FreeRTOS/tasks.c **** 
 445:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 446:FreeRTOS/tasks.c **** 
 447:FreeRTOS/tasks.c **** #endif
 448:FreeRTOS/tasks.c **** 
 449:FreeRTOS/tasks.c **** /*
 450:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 451:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 452:FreeRTOS/tasks.c ****  * and its TCB deleted.
 453:FreeRTOS/tasks.c ****  */
 454:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 455:FreeRTOS/tasks.c **** 
 456:FreeRTOS/tasks.c **** /*
 457:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 458:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 459:FreeRTOS/tasks.c ****  */
 460:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake ) PRIVILEGED_FUNCTION;
 461:FreeRTOS/tasks.c **** 
 462:FreeRTOS/tasks.c **** /*
 463:FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 464:FreeRTOS/tasks.c ****  * allocation was successful.
 465:FreeRTOS/tasks.c ****  */
 466:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
 467:FreeRTOS/tasks.c **** 
 468:FreeRTOS/tasks.c **** /*
 469:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 470:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 471:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 472:FreeRTOS/tasks.c ****  *
 473:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 474:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 475:FreeRTOS/tasks.c ****  */
 476:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 477:FreeRTOS/tasks.c **** 
 478:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 13


 479:FreeRTOS/tasks.c **** 
 480:FreeRTOS/tasks.c **** #endif
 481:FreeRTOS/tasks.c **** 
 482:FreeRTOS/tasks.c **** /*
 483:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 484:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 485:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 486:FreeRTOS/tasks.c ****  */
 487:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 488:FreeRTOS/tasks.c **** 
 489:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 490:FreeRTOS/tasks.c **** 
 491:FreeRTOS/tasks.c **** #endif
 492:FreeRTOS/tasks.c **** 
 493:FreeRTOS/tasks.c **** /*
 494:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 495:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 496:FreeRTOS/tasks.c ****  *
 497:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 498:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 499:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 500:FreeRTOS/tasks.c ****  * set to a value other than 1.
 501:FreeRTOS/tasks.c ****  */
 502:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 503:FreeRTOS/tasks.c **** 
 504:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 505:FreeRTOS/tasks.c **** 
 506:FreeRTOS/tasks.c **** #endif
 507:FreeRTOS/tasks.c **** 
 508:FreeRTOS/tasks.c **** /*
 509:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 510:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 511:FreeRTOS/tasks.c ****  */
 512:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 513:FreeRTOS/tasks.c **** 
 514:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 515:FreeRTOS/tasks.c **** 
 516:FreeRTOS/tasks.c **** BaseT_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t us
 517:FreeRTOS/tasks.c **** {
 183              		.loc 1 517 0
 184              		.cfi_startproc
 185              		@ args = 16, pretend = 0, frame = 32
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187 0000 80B5     		push	{r7, lr}	@
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 7, -8
 190              		.cfi_offset 14, -4
 191 0002 8AB0     		sub	sp, sp, #40	@,,
 192              		.cfi_def_cfa_offset 48
 193 0004 02AF     		add	r7, sp, #8	@,,
 194              		.cfi_def_cfa 7, 40
 195 0006 F860     		str	r0, [r7, #12]	@ pxTaskCode, pxTaskCode
 196 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 197 000a 3B60     		str	r3, [r7]	@ pvParameters, pvParameters
 198 000c 1346     		mov	r3, r2	@ movhi	@ tmp143, tmp142
 199 000e FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp143, usStackDepth
 518:FreeRTOS/tasks.c **** BaseT_t xReturn;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 14


 519:FreeRTOS/tasks.c **** TCB_t * pxNewTCB;
 520:FreeRTOS/tasks.c **** 
 521:FreeRTOS/tasks.c **** 	configASSERT( pxTaskCode );
 200              		.loc 1 521 0
 201 0010 FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTaskCode
 202 0012 002B     		cmp	r3, #0	@ tmp144,
 203 0014 02D1     		bne	.L2	@,
 204              		.loc 1 521 0 is_stmt 0 discriminator 1
 205 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 206              	.L3:
 207 001a FEE7     		b	.L3	@
 208              	.L2:
 522:FreeRTOS/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 209              		.loc 1 522 0 is_stmt 1
 210 001c BB6A     		ldr	r3, [r7, #40]	@ tmp145, uxPriority
 211 001e 072B     		cmp	r3, #7	@ tmp145,
 212 0020 02D9     		bls	.L4	@,
 213              		.loc 1 522 0 is_stmt 0 discriminator 1
 214 0022 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 215              	.L5:
 216              		.loc 1 522 0 discriminator 2
 217 0026 FEE7     		b	.L5	@
 218              	.L4:
 523:FreeRTOS/tasks.c **** 
 524:FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 525:FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 526:FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 219              		.loc 1 526 0 is_stmt 1
 220 0028 FB88     		ldrh	r3, [r7, #6]	@ tmp146, usStackDepth
 221 002a 1846     		mov	r0, r3	@, tmp146
 222 002c 396B     		ldr	r1, [r7, #48]	@, puxStackBuffer
 223 002e FFF7FEFF 		bl	prvAllocateTCBAndStack	@
 224 0032 B861     		str	r0, [r7, #24]	@, pxNewTCB
 527:FreeRTOS/tasks.c **** 
 528:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 225              		.loc 1 528 0
 226 0034 BB69     		ldr	r3, [r7, #24]	@ tmp147, pxNewTCB
 227 0036 002B     		cmp	r3, #0	@ tmp147,
 228 0038 73D0     		beq	.L6	@,
 229              	.LBB6:
 529:FreeRTOS/tasks.c **** 	{
 530:FreeRTOS/tasks.c **** 		StackT_t *pxTopOfStack;
 531:FreeRTOS/tasks.c **** 
 532:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 533:FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 534:FreeRTOS/tasks.c **** 			BaseT_t xRunPrivileged;
 535:FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 536:FreeRTOS/tasks.c **** 			{
 537:FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 538:FreeRTOS/tasks.c **** 			}
 539:FreeRTOS/tasks.c **** 			else
 540:FreeRTOS/tasks.c **** 			{
 541:FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
 542:FreeRTOS/tasks.c **** 			}
 543:FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 544:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 545:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 15


 546:FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 547:FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 548:FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 549:FreeRTOS/tasks.c **** 		required by the port. */
 550:FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 551:FreeRTOS/tasks.c **** 		{
 552:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 230              		.loc 1 552 0
 231 003a BB69     		ldr	r3, [r7, #24]	@ tmp148, pxNewTCB
 232 003c 1A6B     		ldr	r2, [r3, #48]	@ D.6463, pxNewTCB_6->pxStack
 233 003e FB88     		ldrh	r3, [r7, #6]	@ D.6464, usStackDepth
 234 0040 03F18043 		add	r3, r3, #1073741824	@ D.6464, D.6464,
 235 0044 013B     		subs	r3, r3, #1	@ D.6464, D.6464,
 236 0046 9B00     		lsls	r3, r3, #2	@ D.6464, D.6464,
 237 0048 1344     		add	r3, r3, r2	@ tmp149, D.6463
 238 004a 7B61     		str	r3, [r7, #20]	@ tmp149, pxTopOfStack
 553:FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackT_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZ
 239              		.loc 1 553 0
 240 004c 7B69     		ldr	r3, [r7, #20]	@ D.6465, pxTopOfStack
 241 004e 23F00703 		bic	r3, r3, #7	@ D.6465, D.6465,
 242 0052 7B61     		str	r3, [r7, #20]	@ D.6465, pxTopOfStack
 554:FreeRTOS/tasks.c **** 
 555:FreeRTOS/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 556:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 243              		.loc 1 556 0
 244 0054 7B69     		ldr	r3, [r7, #20]	@ D.6465, pxTopOfStack
 245 0056 03F00703 		and	r3, r3, #7	@ D.6465, D.6465,
 246 005a 002B     		cmp	r3, #0	@ D.6465,
 247 005c 02D0     		beq	.L7	@,
 248              		.loc 1 556 0 is_stmt 0 discriminator 1
 249 005e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 250              	.L8:
 251              		.loc 1 556 0 discriminator 3
 252 0062 FEE7     		b	.L8	@
 253              	.L7:
 557:FreeRTOS/tasks.c **** 		}
 558:FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 559:FreeRTOS/tasks.c **** 		{
 560:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 561:FreeRTOS/tasks.c **** 
 562:FreeRTOS/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 563:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 564:FreeRTOS/tasks.c **** 
 565:FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 566:FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 567:FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 568:FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 569:FreeRTOS/tasks.c **** 		}
 570:FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 571:FreeRTOS/tasks.c **** 
 572:FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 573:FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 254              		.loc 1 573 0 is_stmt 1
 255 0064 FB88     		ldrh	r3, [r7, #6]	@ tmp150, usStackDepth
 256 0066 0093     		str	r3, [sp]	@ tmp150,
 257 0068 B869     		ldr	r0, [r7, #24]	@, pxNewTCB
 258 006a B968     		ldr	r1, [r7, #8]	@, pcName
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 16


 259 006c BA6A     		ldr	r2, [r7, #40]	@, uxPriority
 260 006e 7B6B     		ldr	r3, [r7, #52]	@, xRegions
 261 0070 FFF7FEFF 		bl	prvInitialiseTCBVariables	@
 574:FreeRTOS/tasks.c **** 
 575:FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 576:FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 577:FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 578:FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 579:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 580:FreeRTOS/tasks.c **** 		{
 581:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 582:FreeRTOS/tasks.c **** 		}
 583:FreeRTOS/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 584:FreeRTOS/tasks.c **** 		{
 585:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 262              		.loc 1 585 0
 263 0074 7869     		ldr	r0, [r7, #20]	@, pxTopOfStack
 264 0076 F968     		ldr	r1, [r7, #12]	@, pxTaskCode
 265 0078 3A68     		ldr	r2, [r7]	@, pvParameters
 266 007a FFF7FEFF 		bl	pxPortInitialiseStack	@
 267 007e 0246     		mov	r2, r0	@ D.6463,
 268 0080 BB69     		ldr	r3, [r7, #24]	@ tmp151, pxNewTCB
 269 0082 1A60     		str	r2, [r3]	@ D.6463, pxNewTCB_6->pxTopOfStack
 586:FreeRTOS/tasks.c **** 		}
 587:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 588:FreeRTOS/tasks.c **** 
 589:FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 270              		.loc 1 589 0
 271 0084 FB6A     		ldr	r3, [r7, #44]	@ tmp152, pxCreatedTask
 272 0086 002B     		cmp	r3, #0	@ tmp152,
 273 0088 02D0     		beq	.L9	@,
 590:FreeRTOS/tasks.c **** 		{
 591:FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 592:FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 593:FreeRTOS/tasks.c **** 			required.*/
 594:FreeRTOS/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 274              		.loc 1 594 0
 275 008a FB6A     		ldr	r3, [r7, #44]	@ tmp153, pxCreatedTask
 276 008c BA69     		ldr	r2, [r7, #24]	@ tmp154, pxNewTCB
 277 008e 1A60     		str	r2, [r3]	@ tmp154, *pxCreatedTask_21(D)
 278              	.L9:
 595:FreeRTOS/tasks.c **** 		}
 596:FreeRTOS/tasks.c **** 		else
 597:FreeRTOS/tasks.c **** 		{
 598:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 599:FreeRTOS/tasks.c **** 		}
 600:FreeRTOS/tasks.c **** 
 601:FreeRTOS/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 602:FreeRTOS/tasks.c **** 		updated. */
 603:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 279              		.loc 1 603 0
 280 0090 FFF7FEFF 		bl	vPortEnterCritical	@
 604:FreeRTOS/tasks.c **** 		{
 605:FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 281              		.loc 1 605 0
 282 0094 2E4B     		ldr	r3, .L15	@ tmp155,
 283 0096 1B68     		ldr	r3, [r3]	@ D.6465, uxCurrentNumberOfTasks
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 17


 284 0098 0133     		adds	r3, r3, #1	@ D.6465, D.6465,
 285 009a 2D4A     		ldr	r2, .L15	@ tmp156,
 286 009c 1360     		str	r3, [r2]	@ D.6465, uxCurrentNumberOfTasks
 606:FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 287              		.loc 1 606 0
 288 009e 2D4B     		ldr	r3, .L15+4	@ tmp157,
 289 00a0 1B68     		ldr	r3, [r3]	@ D.6466, pxCurrentTCB
 290 00a2 002B     		cmp	r3, #0	@ D.6466,
 291 00a4 09D1     		bne	.L10	@,
 607:FreeRTOS/tasks.c **** 			{
 608:FreeRTOS/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 609:FreeRTOS/tasks.c **** 				the suspended state - make this the current task. */
 610:FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 292              		.loc 1 610 0
 293 00a6 2B4A     		ldr	r2, .L15+4	@ tmp158,
 294 00a8 BB69     		ldr	r3, [r7, #24]	@ tmp159, pxNewTCB
 295 00aa 1360     		str	r3, [r2]	@ tmp159, pxCurrentTCB
 611:FreeRTOS/tasks.c **** 
 612:FreeRTOS/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseT_t ) 1 )
 296              		.loc 1 612 0
 297 00ac 284B     		ldr	r3, .L15	@ tmp160,
 298 00ae 1B68     		ldr	r3, [r3]	@ D.6465, uxCurrentNumberOfTasks
 299 00b0 012B     		cmp	r3, #1	@ D.6465,
 300 00b2 0FD1     		bne	.L11	@,
 613:FreeRTOS/tasks.c **** 				{
 614:FreeRTOS/tasks.c **** 					/* This is the first task to be created so do the preliminary
 615:FreeRTOS/tasks.c **** 					initialisation required.  We will not recover if this call
 616:FreeRTOS/tasks.c **** 					fails, but we will report the failure. */
 617:FreeRTOS/tasks.c **** 					prvInitialiseTaskLists();
 301              		.loc 1 617 0
 302 00b4 FFF7FEFF 		bl	prvInitialiseTaskLists	@
 303 00b8 0CE0     		b	.L11	@
 304              	.L10:
 618:FreeRTOS/tasks.c **** 				}
 619:FreeRTOS/tasks.c **** 				else
 620:FreeRTOS/tasks.c **** 				{
 621:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 622:FreeRTOS/tasks.c **** 				}
 623:FreeRTOS/tasks.c **** 			}
 624:FreeRTOS/tasks.c **** 			else
 625:FreeRTOS/tasks.c **** 			{
 626:FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 627:FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
 628:FreeRTOS/tasks.c **** 				so far. */
 629:FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 305              		.loc 1 629 0
 306 00ba 274B     		ldr	r3, .L15+8	@ tmp161,
 307 00bc 1B68     		ldr	r3, [r3]	@ D.6467, xSchedulerRunning
 308 00be 002B     		cmp	r3, #0	@ D.6467,
 309 00c0 08D1     		bne	.L11	@,
 630:FreeRTOS/tasks.c **** 				{
 631:FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 310              		.loc 1 631 0
 311 00c2 244B     		ldr	r3, .L15+4	@ tmp162,
 312 00c4 1B68     		ldr	r3, [r3]	@ D.6466, pxCurrentTCB
 313 00c6 DA6A     		ldr	r2, [r3, #44]	@ D.6465, _27->uxPriority
 314 00c8 BB6A     		ldr	r3, [r7, #40]	@ tmp163, uxPriority
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 18


 315 00ca 9A42     		cmp	r2, r3	@ D.6465, tmp163
 316 00cc 02D8     		bhi	.L11	@,
 632:FreeRTOS/tasks.c **** 					{
 633:FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 317              		.loc 1 633 0
 318 00ce 214A     		ldr	r2, .L15+4	@ tmp164,
 319 00d0 BB69     		ldr	r3, [r7, #24]	@ tmp165, pxNewTCB
 320 00d2 1360     		str	r3, [r2]	@ tmp165, pxCurrentTCB
 321              	.L11:
 634:FreeRTOS/tasks.c **** 					}
 635:FreeRTOS/tasks.c **** 					else
 636:FreeRTOS/tasks.c **** 					{
 637:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 638:FreeRTOS/tasks.c **** 					}
 639:FreeRTOS/tasks.c **** 				}
 640:FreeRTOS/tasks.c **** 				else
 641:FreeRTOS/tasks.c **** 				{
 642:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 643:FreeRTOS/tasks.c **** 				}
 644:FreeRTOS/tasks.c **** 			}
 645:FreeRTOS/tasks.c **** 
 646:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 322              		.loc 1 646 0
 323 00d4 214B     		ldr	r3, .L15+12	@ tmp166,
 324 00d6 1B68     		ldr	r3, [r3]	@ D.6465, uxTaskNumber
 325 00d8 0133     		adds	r3, r3, #1	@ D.6465, D.6465,
 326 00da 204A     		ldr	r2, .L15+12	@ tmp167,
 327 00dc 1360     		str	r3, [r2]	@ D.6465, uxTaskNumber
 647:FreeRTOS/tasks.c **** 
 648:FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 649:FreeRTOS/tasks.c **** 			{
 650:FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 651:FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 328              		.loc 1 651 0
 329 00de 1F4B     		ldr	r3, .L15+12	@ tmp168,
 330 00e0 1A68     		ldr	r2, [r3]	@ D.6465, uxTaskNumber
 331 00e2 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxNewTCB
 332 00e4 1A64     		str	r2, [r3, #64]	@ D.6465, pxNewTCB_6->uxTCBNumber
 652:FreeRTOS/tasks.c **** 			}
 653:FreeRTOS/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 654:FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 655:FreeRTOS/tasks.c **** 
 656:FreeRTOS/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 333              		.loc 1 656 0
 334 00e6 BB69     		ldr	r3, [r7, #24]	@ tmp170, pxNewTCB
 335 00e8 DB6A     		ldr	r3, [r3, #44]	@ D.6465, pxNewTCB_6->uxPriority
 336 00ea 1A46     		mov	r2, r3	@ D.6468, D.6465
 337 00ec 0123     		movs	r3, #1	@ tmp171,
 338 00ee 03FA02F2 		lsl	r2, r3, r2	@ D.6465, tmp171, D.6468
 339 00f2 1B4B     		ldr	r3, .L15+16	@ tmp172,
 340 00f4 1B68     		ldr	r3, [r3]	@ D.6465, uxTopReadyPriority
 341 00f6 1343     		orrs	r3, r3, r2	@, D.6465, D.6465, D.6465
 342 00f8 194A     		ldr	r2, .L15+16	@ tmp173,
 343 00fa 1360     		str	r3, [r2]	@ D.6465, uxTopReadyPriority
 344 00fc BB69     		ldr	r3, [r7, #24]	@ tmp174, pxNewTCB
 345 00fe DA6A     		ldr	r2, [r3, #44]	@ D.6465, pxNewTCB_6->uxPriority
 346 0100 1346     		mov	r3, r2	@ tmp175, D.6465
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 19


 347 0102 9B00     		lsls	r3, r3, #2	@ tmp175, tmp175,
 348 0104 1344     		add	r3, r3, r2	@ tmp175, D.6465
 349 0106 9B00     		lsls	r3, r3, #2	@ tmp176, tmp175,
 350 0108 164A     		ldr	r2, .L15+20	@ tmp177,
 351 010a 1A44     		add	r2, r2, r3	@ D.6469, tmp175
 352 010c BB69     		ldr	r3, [r7, #24]	@ tmp178, pxNewTCB
 353 010e 0433     		adds	r3, r3, #4	@ D.6470, tmp178,
 354 0110 1046     		mov	r0, r2	@, D.6469
 355 0112 1946     		mov	r1, r3	@, D.6470
 356 0114 FFF7FEFF 		bl	vListInsertEnd	@
 657:FreeRTOS/tasks.c **** 
 658:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 357              		.loc 1 658 0
 358 0118 0123     		movs	r3, #1	@ tmp179,
 359 011a FB61     		str	r3, [r7, #28]	@ tmp179, xReturn
 659:FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 660:FreeRTOS/tasks.c **** 		}
 661:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 360              		.loc 1 661 0
 361 011c FFF7FEFF 		bl	vPortExitCritical	@
 362              	.LBE6:
 363 0120 02E0     		b	.L12	@
 364              	.L6:
 662:FreeRTOS/tasks.c **** 	}
 663:FreeRTOS/tasks.c **** 	else
 664:FreeRTOS/tasks.c **** 	{
 665:FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 365              		.loc 1 665 0
 366 0122 4FF0FF33 		mov	r3, #-1	@ tmp180,
 367 0126 FB61     		str	r3, [r7, #28]	@ tmp180, xReturn
 368              	.L12:
 666:FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 667:FreeRTOS/tasks.c **** 	}
 668:FreeRTOS/tasks.c **** 
 669:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 369              		.loc 1 669 0
 370 0128 FB69     		ldr	r3, [r7, #28]	@ tmp181, xReturn
 371 012a 012B     		cmp	r3, #1	@ tmp181,
 372 012c 0BD1     		bne	.L13	@,
 670:FreeRTOS/tasks.c **** 	{
 671:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 373              		.loc 1 671 0
 374 012e 0A4B     		ldr	r3, .L15+8	@ tmp182,
 375 0130 1B68     		ldr	r3, [r3]	@ D.6467, xSchedulerRunning
 376 0132 002B     		cmp	r3, #0	@ D.6467,
 377 0134 07D0     		beq	.L13	@,
 672:FreeRTOS/tasks.c **** 		{
 673:FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 674:FreeRTOS/tasks.c **** 			then it should run now. */
 675:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 378              		.loc 1 675 0
 379 0136 074B     		ldr	r3, .L15+4	@ tmp183,
 380 0138 1B68     		ldr	r3, [r3]	@ D.6466, pxCurrentTCB
 381 013a DA6A     		ldr	r2, [r3, #44]	@ D.6465, _43->uxPriority
 382 013c BB6A     		ldr	r3, [r7, #40]	@ tmp184, uxPriority
 383 013e 9A42     		cmp	r2, r3	@ D.6465, tmp184
 384 0140 01D2     		bcs	.L13	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 20


 676:FreeRTOS/tasks.c **** 			{
 677:FreeRTOS/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 385              		.loc 1 677 0
 386 0142 FFF7FEFF 		bl	vPortYield	@
 387              	.L13:
 678:FreeRTOS/tasks.c **** 			}
 679:FreeRTOS/tasks.c **** 			else
 680:FreeRTOS/tasks.c **** 			{
 681:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 682:FreeRTOS/tasks.c **** 			}
 683:FreeRTOS/tasks.c **** 		}
 684:FreeRTOS/tasks.c **** 		else
 685:FreeRTOS/tasks.c **** 		{
 686:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 687:FreeRTOS/tasks.c **** 		}
 688:FreeRTOS/tasks.c **** 	}
 689:FreeRTOS/tasks.c **** 
 690:FreeRTOS/tasks.c **** 	return xReturn;
 388              		.loc 1 690 0
 389 0146 FB69     		ldr	r3, [r7, #28]	@ D.6471, xReturn
 691:FreeRTOS/tasks.c **** }
 390              		.loc 1 691 0
 391 0148 1846     		mov	r0, r3	@, <retval>
 392 014a 2037     		adds	r7, r7, #32	@,,
 393              		.cfi_def_cfa_offset 8
 394 014c BD46     		mov	sp, r7	@,
 395              		.cfi_def_cfa_register 13
 396              		@ sp needed	@
 397 014e 80BD     		pop	{r7, pc}	@
 398              	.L16:
 399              		.align	2
 400              	.L15:
 401 0150 00000000 		.word	uxCurrentNumberOfTasks
 402 0154 00000000 		.word	pxCurrentTCB
 403 0158 00000000 		.word	xSchedulerRunning
 404 015c 00000000 		.word	uxTaskNumber
 405 0160 00000000 		.word	uxTopReadyPriority
 406 0164 00000000 		.word	pxReadyTasksLists
 407              		.cfi_endproc
 408              	.LFE1:
 409              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 410              		.section	.text.vTaskDelete,"ax",%progbits
 411              		.align	2
 412              		.global	vTaskDelete
 413              		.thumb
 414              		.thumb_func
 415              		.type	vTaskDelete, %function
 416              	vTaskDelete:
 417              	.LFB2:
 692:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 693:FreeRTOS/tasks.c **** 
 694:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 695:FreeRTOS/tasks.c **** 
 696:FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 697:FreeRTOS/tasks.c **** 	{
 418              		.loc 1 697 0
 419              		.cfi_startproc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 21


 420              		@ args = 0, pretend = 0, frame = 16
 421              		@ frame_needed = 1, uses_anonymous_args = 0
 422 0000 80B5     		push	{r7, lr}	@
 423              		.cfi_def_cfa_offset 8
 424              		.cfi_offset 7, -8
 425              		.cfi_offset 14, -4
 426 0002 84B0     		sub	sp, sp, #16	@,,
 427              		.cfi_def_cfa_offset 24
 428 0004 00AF     		add	r7, sp, #0	@,,
 429              		.cfi_def_cfa_register 7
 430 0006 7860     		str	r0, [r7, #4]	@ xTaskToDelete, xTaskToDelete
 698:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 699:FreeRTOS/tasks.c **** 
 700:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 431              		.loc 1 700 0
 432 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 701:FreeRTOS/tasks.c **** 		{
 702:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 703:FreeRTOS/tasks.c **** 			being deleted. */
 704:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 433              		.loc 1 704 0
 434 000c 7B68     		ldr	r3, [r7, #4]	@ tmp131, xTaskToDelete
 435 000e 002B     		cmp	r3, #0	@ tmp131,
 436 0010 02D1     		bne	.L18	@,
 437              		.loc 1 704 0 is_stmt 0 discriminator 1
 438 0012 2D4B     		ldr	r3, .L27	@ tmp132,
 439 0014 1B68     		ldr	r3, [r3]	@ D.6472, pxCurrentTCB
 440 0016 00E0     		b	.L19	@
 441              	.L18:
 442              		.loc 1 704 0 discriminator 2
 443 0018 7B68     		ldr	r3, [r7, #4]	@ D.6472, xTaskToDelete
 444              	.L19:
 445              		.loc 1 704 0 discriminator 4
 446 001a FB60     		str	r3, [r7, #12]	@ D.6472, pxTCB
 705:FreeRTOS/tasks.c **** 
 706:FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 707:FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 708:FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 709:FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 710:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 447              		.loc 1 710 0 is_stmt 1 discriminator 4
 448 001c FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 449 001e 0433     		adds	r3, r3, #4	@ D.6473, tmp133,
 450 0020 1846     		mov	r0, r3	@, D.6473
 451 0022 FFF7FEFF 		bl	uxListRemove	@
 452 0026 0346     		mov	r3, r0	@ D.6474,
 453 0028 002B     		cmp	r3, #0	@ D.6474,
 454 002a 15D1     		bne	.L20	@,
 711:FreeRTOS/tasks.c **** 			{
 712:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 455              		.loc 1 712 0
 456 002c FB68     		ldr	r3, [r7, #12]	@ tmp134, pxTCB
 457 002e DA6A     		ldr	r2, [r3, #44]	@ D.6474, pxTCB_5->uxPriority
 458 0030 2649     		ldr	r1, .L27+4	@ tmp135,
 459 0032 1346     		mov	r3, r2	@ tmp136, D.6474
 460 0034 9B00     		lsls	r3, r3, #2	@ tmp136, tmp136,
 461 0036 1344     		add	r3, r3, r2	@ tmp136, D.6474
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 22


 462 0038 9B00     		lsls	r3, r3, #2	@ tmp137, tmp136,
 463 003a 0B44     		add	r3, r3, r1	@ tmp138, tmp135
 464 003c 1B68     		ldr	r3, [r3]	@ D.6474, pxReadyTasksLists[_8].uxNumberOfItems
 465 003e 002B     		cmp	r3, #0	@ D.6474,
 466 0040 0AD1     		bne	.L20	@,
 467              		.loc 1 712 0 is_stmt 0 discriminator 1
 468 0042 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 469 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6474, pxTCB_5->uxPriority
 470 0046 1A46     		mov	r2, r3	@ D.6475, D.6474
 471 0048 0123     		movs	r3, #1	@ tmp140,
 472 004a 9340     		lsls	r3, r3, r2	@ D.6474, tmp140, D.6475
 473 004c DA43     		mvns	r2, r3	@ D.6474, D.6474
 474 004e 204B     		ldr	r3, .L27+8	@ tmp141,
 475 0050 1B68     		ldr	r3, [r3]	@ D.6474, uxTopReadyPriority
 476 0052 1340     		ands	r3, r3, r2	@, D.6474, D.6474, D.6474
 477 0054 1E4A     		ldr	r2, .L27+8	@ tmp142,
 478 0056 1360     		str	r3, [r2]	@ D.6474, uxTopReadyPriority
 479              	.L20:
 713:FreeRTOS/tasks.c **** 			}
 714:FreeRTOS/tasks.c **** 			else
 715:FreeRTOS/tasks.c **** 			{
 716:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 717:FreeRTOS/tasks.c **** 			}
 718:FreeRTOS/tasks.c **** 
 719:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 720:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 480              		.loc 1 720 0 is_stmt 1
 481 0058 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 482 005a 9B6A     		ldr	r3, [r3, #40]	@ D.6476, pxTCB_5->xEventListItem.pvContainer
 483 005c 002B     		cmp	r3, #0	@ D.6476,
 484 005e 04D0     		beq	.L22	@,
 721:FreeRTOS/tasks.c **** 			{
 722:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 485              		.loc 1 722 0
 486 0060 FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 487 0062 1833     		adds	r3, r3, #24	@ D.6473, tmp144,
 488 0064 1846     		mov	r0, r3	@, D.6473
 489 0066 FFF7FEFF 		bl	uxListRemove	@
 490              	.L22:
 723:FreeRTOS/tasks.c **** 			}
 724:FreeRTOS/tasks.c **** 			else
 725:FreeRTOS/tasks.c **** 			{
 726:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 727:FreeRTOS/tasks.c **** 			}
 728:FreeRTOS/tasks.c **** 
 729:FreeRTOS/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 491              		.loc 1 729 0
 492 006a FB68     		ldr	r3, [r7, #12]	@ tmp145, pxTCB
 493 006c 0433     		adds	r3, r3, #4	@ D.6473, tmp145,
 494 006e 1948     		ldr	r0, .L27+12	@,
 495 0070 1946     		mov	r1, r3	@, D.6473
 496 0072 FFF7FEFF 		bl	vListInsertEnd	@
 730:FreeRTOS/tasks.c **** 
 731:FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 732:FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
 733:FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 734:FreeRTOS/tasks.c **** 			++uxTasksDeleted;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 23


 497              		.loc 1 734 0
 498 0076 184B     		ldr	r3, .L27+16	@ tmp146,
 499 0078 1B68     		ldr	r3, [r3]	@ D.6474, uxTasksDeleted
 500 007a 0133     		adds	r3, r3, #1	@ D.6474, D.6474,
 501 007c 164A     		ldr	r2, .L27+16	@ tmp147,
 502 007e 1360     		str	r3, [r2]	@ D.6474, uxTasksDeleted
 735:FreeRTOS/tasks.c **** 
 736:FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 737:FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 738:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 503              		.loc 1 738 0
 504 0080 164B     		ldr	r3, .L27+20	@ tmp148,
 505 0082 1B68     		ldr	r3, [r3]	@ D.6474, uxTaskNumber
 506 0084 0133     		adds	r3, r3, #1	@ D.6474, D.6474,
 507 0086 154A     		ldr	r2, .L27+20	@ tmp149,
 508 0088 1360     		str	r3, [r2]	@ D.6474, uxTaskNumber
 739:FreeRTOS/tasks.c **** 
 740:FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 741:FreeRTOS/tasks.c **** 		}
 742:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 509              		.loc 1 742 0
 510 008a FFF7FEFF 		bl	vPortExitCritical	@
 743:FreeRTOS/tasks.c **** 
 744:FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 745:FreeRTOS/tasks.c **** 		been deleted. */
 746:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 511              		.loc 1 746 0
 512 008e 144B     		ldr	r3, .L27+24	@ tmp150,
 513 0090 1B68     		ldr	r3, [r3]	@ D.6477, xSchedulerRunning
 514 0092 002B     		cmp	r3, #0	@ D.6477,
 515 0094 14D0     		beq	.L17	@,
 747:FreeRTOS/tasks.c **** 		{
 748:FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 516              		.loc 1 748 0
 517 0096 0C4B     		ldr	r3, .L27	@ tmp151,
 518 0098 1B68     		ldr	r3, [r3]	@ D.6478, pxCurrentTCB
 519 009a FA68     		ldr	r2, [r7, #12]	@ tmp152, pxTCB
 520 009c 9A42     		cmp	r2, r3	@ tmp152, D.6478
 521 009e 09D1     		bne	.L24	@,
 749:FreeRTOS/tasks.c **** 			{
 750:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 522              		.loc 1 750 0
 523 00a0 104B     		ldr	r3, .L27+28	@ tmp153,
 524 00a2 1B68     		ldr	r3, [r3]	@ D.6474, uxSchedulerSuspended
 525 00a4 002B     		cmp	r3, #0	@ D.6474,
 526 00a6 02D0     		beq	.L25	@,
 527              		.loc 1 750 0 is_stmt 0 discriminator 1
 528 00a8 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 529              	.L26:
 530 00ac FEE7     		b	.L26	@
 531              	.L25:
 751:FreeRTOS/tasks.c **** 
 752:FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 753:FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
 754:FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
 755:FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 756:FreeRTOS/tasks.c **** 				required. */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 24


 757:FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 758:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 532              		.loc 1 758 0 is_stmt 1
 533 00ae FFF7FEFF 		bl	vPortYield	@
 534 00b2 05E0     		b	.L17	@
 535              	.L24:
 759:FreeRTOS/tasks.c **** 			}
 760:FreeRTOS/tasks.c **** 			else
 761:FreeRTOS/tasks.c **** 			{
 762:FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 763:FreeRTOS/tasks.c **** 				the task that has just been deleted. */
 764:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 536              		.loc 1 764 0
 537 00b4 FFF7FEFF 		bl	vPortEnterCritical	@
 765:FreeRTOS/tasks.c **** 				{
 766:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 538              		.loc 1 766 0
 539 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 767:FreeRTOS/tasks.c **** 				}
 768:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 540              		.loc 1 768 0
 541 00bc FFF7FEFF 		bl	vPortExitCritical	@
 542              	.L17:
 769:FreeRTOS/tasks.c **** 			}
 770:FreeRTOS/tasks.c **** 		}
 771:FreeRTOS/tasks.c **** 	}
 543              		.loc 1 771 0
 544 00c0 1037     		adds	r7, r7, #16	@,,
 545              		.cfi_def_cfa_offset 8
 546 00c2 BD46     		mov	sp, r7	@,
 547              		.cfi_def_cfa_register 13
 548              		@ sp needed	@
 549 00c4 80BD     		pop	{r7, pc}	@
 550              	.L28:
 551 00c6 00BF     		.align	2
 552              	.L27:
 553 00c8 00000000 		.word	pxCurrentTCB
 554 00cc 00000000 		.word	pxReadyTasksLists
 555 00d0 00000000 		.word	uxTopReadyPriority
 556 00d4 00000000 		.word	xTasksWaitingTermination
 557 00d8 00000000 		.word	uxTasksDeleted
 558 00dc 00000000 		.word	uxTaskNumber
 559 00e0 00000000 		.word	xSchedulerRunning
 560 00e4 00000000 		.word	uxSchedulerSuspended
 561              		.cfi_endproc
 562              	.LFE2:
 563              		.size	vTaskDelete, .-vTaskDelete
 564              		.section	.text.vTaskDelayUntil,"ax",%progbits
 565              		.align	2
 566              		.global	vTaskDelayUntil
 567              		.thumb
 568              		.thumb_func
 569              		.type	vTaskDelayUntil, %function
 570              	vTaskDelayUntil:
 571              	.LFB3:
 772:FreeRTOS/tasks.c **** 
 773:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 25


 774:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 775:FreeRTOS/tasks.c **** 
 776:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 777:FreeRTOS/tasks.c **** 
 778:FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickT_t * const pxPreviousWakeTime, const TickT_t xTimeIncrement )
 779:FreeRTOS/tasks.c **** 	{
 572              		.loc 1 779 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 24
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576 0000 80B5     		push	{r7, lr}	@
 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 7, -8
 579              		.cfi_offset 14, -4
 580 0002 86B0     		sub	sp, sp, #24	@,,
 581              		.cfi_def_cfa_offset 32
 582 0004 00AF     		add	r7, sp, #0	@,,
 583              		.cfi_def_cfa_register 7
 584 0006 7860     		str	r0, [r7, #4]	@ pxPreviousWakeTime, pxPreviousWakeTime
 585 0008 3960     		str	r1, [r7]	@ xTimeIncrement, xTimeIncrement
 780:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 781:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded, xShouldDelay = pdFALSE;
 586              		.loc 1 781 0
 587 000a 0023     		movs	r3, #0	@ tmp125,
 588 000c 7B61     		str	r3, [r7, #20]	@ tmp125, xShouldDelay
 782:FreeRTOS/tasks.c **** 
 783:FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 589              		.loc 1 783 0
 590 000e 7B68     		ldr	r3, [r7, #4]	@ tmp126, pxPreviousWakeTime
 591 0010 002B     		cmp	r3, #0	@ tmp126,
 592 0012 02D1     		bne	.L30	@,
 593              		.loc 1 783 0 is_stmt 0 discriminator 1
 594 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 595              	.L31:
 596 0018 FEE7     		b	.L31	@
 597              	.L30:
 784:FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 598              		.loc 1 784 0 is_stmt 1
 599 001a 3B68     		ldr	r3, [r7]	@ tmp127, xTimeIncrement
 600 001c 002B     		cmp	r3, #0	@ tmp127,
 601 001e 02D1     		bne	.L32	@,
 602              		.loc 1 784 0 is_stmt 0 discriminator 1
 603 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 604              	.L33:
 605              		.loc 1 784 0 discriminator 2
 606 0024 FEE7     		b	.L33	@
 607              	.L32:
 785:FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 608              		.loc 1 785 0 is_stmt 1
 609 0026 2B4B     		ldr	r3, .L42	@ tmp128,
 610 0028 1B68     		ldr	r3, [r3]	@ D.6479, uxSchedulerSuspended
 611 002a 002B     		cmp	r3, #0	@ D.6479,
 612 002c 02D0     		beq	.L34	@,
 613              		.loc 1 785 0 is_stmt 0 discriminator 1
 614 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 615              	.L35:
 616              		.loc 1 785 0 discriminator 3
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 26


 617 0032 FEE7     		b	.L35	@
 618              	.L34:
 786:FreeRTOS/tasks.c **** 
 787:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 619              		.loc 1 787 0 is_stmt 1
 620 0034 FFF7FEFF 		bl	vTaskSuspendAll	@
 621              	.LBB7:
 788:FreeRTOS/tasks.c **** 		{
 789:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 790:FreeRTOS/tasks.c **** 			block. */
 791:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 622              		.loc 1 791 0
 623 0038 274B     		ldr	r3, .L42+4	@ tmp129,
 624 003a 1B68     		ldr	r3, [r3]	@ tmp130, xTickCount
 625 003c 3B61     		str	r3, [r7, #16]	@ tmp130, xConstTickCount
 792:FreeRTOS/tasks.c **** 
 793:FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 794:FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 626              		.loc 1 794 0
 627 003e 7B68     		ldr	r3, [r7, #4]	@ tmp131, pxPreviousWakeTime
 628 0040 1A68     		ldr	r2, [r3]	@ D.6479, *pxPreviousWakeTime_3(D)
 629 0042 3B68     		ldr	r3, [r7]	@ tmp133, xTimeIncrement
 630 0044 1344     		add	r3, r3, r2	@ tmp132, D.6479
 631 0046 FB60     		str	r3, [r7, #12]	@ tmp132, xTimeToWake
 795:FreeRTOS/tasks.c **** 
 796:FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 632              		.loc 1 796 0
 633 0048 7B68     		ldr	r3, [r7, #4]	@ tmp134, pxPreviousWakeTime
 634 004a 1A68     		ldr	r2, [r3]	@ D.6479, *pxPreviousWakeTime_3(D)
 635 004c 3B69     		ldr	r3, [r7, #16]	@ tmp135, xConstTickCount
 636 004e 9A42     		cmp	r2, r3	@ D.6479, tmp135
 637 0050 0BD9     		bls	.L36	@,
 797:FreeRTOS/tasks.c **** 			{
 798:FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 799:FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 800:FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 801:FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 802:FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 803:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 638              		.loc 1 803 0
 639 0052 7B68     		ldr	r3, [r7, #4]	@ tmp136, pxPreviousWakeTime
 640 0054 1A68     		ldr	r2, [r3]	@ D.6479, *pxPreviousWakeTime_3(D)
 641 0056 FB68     		ldr	r3, [r7, #12]	@ tmp137, xTimeToWake
 642 0058 9A42     		cmp	r2, r3	@ D.6479, tmp137
 643 005a 11D9     		bls	.L37	@,
 644              		.loc 1 803 0 is_stmt 0 discriminator 1
 645 005c FA68     		ldr	r2, [r7, #12]	@ tmp138, xTimeToWake
 646 005e 3B69     		ldr	r3, [r7, #16]	@ tmp139, xConstTickCount
 647 0060 9A42     		cmp	r2, r3	@ tmp138, tmp139
 648 0062 0DD9     		bls	.L37	@,
 804:FreeRTOS/tasks.c **** 				{
 805:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 649              		.loc 1 805 0 is_stmt 1
 650 0064 0123     		movs	r3, #1	@ tmp140,
 651 0066 7B61     		str	r3, [r7, #20]	@ tmp140, xShouldDelay
 652 0068 0AE0     		b	.L37	@
 653              	.L36:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 27


 806:FreeRTOS/tasks.c **** 				}
 807:FreeRTOS/tasks.c **** 				else
 808:FreeRTOS/tasks.c **** 				{
 809:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 810:FreeRTOS/tasks.c **** 				}
 811:FreeRTOS/tasks.c **** 			}
 812:FreeRTOS/tasks.c **** 			else
 813:FreeRTOS/tasks.c **** 			{
 814:FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 815:FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 816:FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 817:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 654              		.loc 1 817 0
 655 006a 7B68     		ldr	r3, [r7, #4]	@ tmp141, pxPreviousWakeTime
 656 006c 1A68     		ldr	r2, [r3]	@ D.6479, *pxPreviousWakeTime_3(D)
 657 006e FB68     		ldr	r3, [r7, #12]	@ tmp142, xTimeToWake
 658 0070 9A42     		cmp	r2, r3	@ D.6479, tmp142
 659 0072 03D8     		bhi	.L38	@,
 660              		.loc 1 817 0 is_stmt 0 discriminator 1
 661 0074 FA68     		ldr	r2, [r7, #12]	@ tmp143, xTimeToWake
 662 0076 3B69     		ldr	r3, [r7, #16]	@ tmp144, xConstTickCount
 663 0078 9A42     		cmp	r2, r3	@ tmp143, tmp144
 664 007a 01D9     		bls	.L37	@,
 665              	.L38:
 818:FreeRTOS/tasks.c **** 				{
 819:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 666              		.loc 1 819 0 is_stmt 1
 667 007c 0123     		movs	r3, #1	@ tmp145,
 668 007e 7B61     		str	r3, [r7, #20]	@ tmp145, xShouldDelay
 669              	.L37:
 820:FreeRTOS/tasks.c **** 				}
 821:FreeRTOS/tasks.c **** 				else
 822:FreeRTOS/tasks.c **** 				{
 823:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 824:FreeRTOS/tasks.c **** 				}
 825:FreeRTOS/tasks.c **** 			}
 826:FreeRTOS/tasks.c **** 
 827:FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 828:FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 670              		.loc 1 828 0
 671 0080 7B68     		ldr	r3, [r7, #4]	@ tmp146, pxPreviousWakeTime
 672 0082 FA68     		ldr	r2, [r7, #12]	@ tmp147, xTimeToWake
 673 0084 1A60     		str	r2, [r3]	@ tmp147, *pxPreviousWakeTime_3(D)
 829:FreeRTOS/tasks.c **** 
 830:FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 674              		.loc 1 830 0
 675 0086 7B69     		ldr	r3, [r7, #20]	@ tmp148, xShouldDelay
 676 0088 002B     		cmp	r3, #0	@ tmp148,
 677 008a 17D0     		beq	.L39	@,
 831:FreeRTOS/tasks.c **** 			{
 832:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 833:FreeRTOS/tasks.c **** 
 834:FreeRTOS/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 835:FreeRTOS/tasks.c **** 				blocked list as the same list item is used for both lists. */
 836:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 678              		.loc 1 836 0
 679 008c 134B     		ldr	r3, .L42+8	@ tmp149,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 28


 680 008e 1B68     		ldr	r3, [r3]	@ D.6480, pxCurrentTCB
 681 0090 0433     		adds	r3, r3, #4	@ D.6481, D.6480,
 682 0092 1846     		mov	r0, r3	@, D.6481
 683 0094 FFF7FEFF 		bl	uxListRemove	@
 684 0098 0346     		mov	r3, r0	@ D.6479,
 685 009a 002B     		cmp	r3, #0	@ D.6479,
 686 009c 0BD1     		bne	.L40	@,
 837:FreeRTOS/tasks.c **** 				{
 838:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 839:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 840:FreeRTOS/tasks.c **** 					directly. */
 841:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 687              		.loc 1 841 0
 688 009e 0F4B     		ldr	r3, .L42+8	@ tmp150,
 689 00a0 1B68     		ldr	r3, [r3]	@ D.6480, pxCurrentTCB
 690 00a2 DB6A     		ldr	r3, [r3, #44]	@ D.6479, _17->uxPriority
 691 00a4 1A46     		mov	r2, r3	@ D.6482, D.6479
 692 00a6 0123     		movs	r3, #1	@ tmp151,
 693 00a8 9340     		lsls	r3, r3, r2	@ D.6479, tmp151, D.6482
 694 00aa DA43     		mvns	r2, r3	@ D.6479, D.6479
 695 00ac 0C4B     		ldr	r3, .L42+12	@ tmp152,
 696 00ae 1B68     		ldr	r3, [r3]	@ D.6479, uxTopReadyPriority
 697 00b0 1340     		ands	r3, r3, r2	@, D.6479, D.6479, D.6479
 698 00b2 0B4A     		ldr	r2, .L42+12	@ tmp153,
 699 00b4 1360     		str	r3, [r2]	@ D.6479, uxTopReadyPriority
 700              	.L40:
 842:FreeRTOS/tasks.c **** 				}
 843:FreeRTOS/tasks.c **** 				else
 844:FreeRTOS/tasks.c **** 				{
 845:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 846:FreeRTOS/tasks.c **** 				}
 847:FreeRTOS/tasks.c **** 
 848:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 701              		.loc 1 848 0
 702 00b6 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 703 00b8 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 704              	.L39:
 705              	.LBE7:
 849:FreeRTOS/tasks.c **** 			}
 850:FreeRTOS/tasks.c **** 			else
 851:FreeRTOS/tasks.c **** 			{
 852:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 853:FreeRTOS/tasks.c **** 			}
 854:FreeRTOS/tasks.c **** 		}
 855:FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 706              		.loc 1 855 0
 707 00bc FFF7FEFF 		bl	xTaskResumeAll	@
 708 00c0 B860     		str	r0, [r7, #8]	@, xAlreadyYielded
 856:FreeRTOS/tasks.c **** 
 857:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 858:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 859:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 709              		.loc 1 859 0
 710 00c2 BB68     		ldr	r3, [r7, #8]	@ tmp154, xAlreadyYielded
 711 00c4 002B     		cmp	r3, #0	@ tmp154,
 712 00c6 01D1     		bne	.L29	@,
 860:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 29


 861:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 713              		.loc 1 861 0
 714 00c8 FFF7FEFF 		bl	vPortYield	@
 715              	.L29:
 862:FreeRTOS/tasks.c **** 		}
 863:FreeRTOS/tasks.c **** 		else
 864:FreeRTOS/tasks.c **** 		{
 865:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 866:FreeRTOS/tasks.c **** 		}
 867:FreeRTOS/tasks.c **** 	}
 716              		.loc 1 867 0
 717 00cc 1837     		adds	r7, r7, #24	@,,
 718              		.cfi_def_cfa_offset 8
 719 00ce BD46     		mov	sp, r7	@,
 720              		.cfi_def_cfa_register 13
 721              		@ sp needed	@
 722 00d0 80BD     		pop	{r7, pc}	@
 723              	.L43:
 724 00d2 00BF     		.align	2
 725              	.L42:
 726 00d4 00000000 		.word	uxSchedulerSuspended
 727 00d8 00000000 		.word	xTickCount
 728 00dc 00000000 		.word	pxCurrentTCB
 729 00e0 00000000 		.word	uxTopReadyPriority
 730              		.cfi_endproc
 731              	.LFE3:
 732              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 733              		.section	.text.vTaskDelay,"ax",%progbits
 734              		.align	2
 735              		.global	vTaskDelay
 736              		.thumb
 737              		.thumb_func
 738              		.type	vTaskDelay, %function
 739              	vTaskDelay:
 740              	.LFB4:
 868:FreeRTOS/tasks.c **** 
 869:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 870:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 871:FreeRTOS/tasks.c **** 
 872:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 873:FreeRTOS/tasks.c **** 
 874:FreeRTOS/tasks.c **** 	void vTaskDelay( const TickT_t xTicksToDelay )
 875:FreeRTOS/tasks.c **** 	{
 741              		.loc 1 875 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 16
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745 0000 80B5     		push	{r7, lr}	@
 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 7, -8
 748              		.cfi_offset 14, -4
 749 0002 84B0     		sub	sp, sp, #16	@,,
 750              		.cfi_def_cfa_offset 24
 751 0004 00AF     		add	r7, sp, #0	@,,
 752              		.cfi_def_cfa_register 7
 753 0006 7860     		str	r0, [r7, #4]	@ xTicksToDelay, xTicksToDelay
 876:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 30


 877:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded = pdFALSE;
 754              		.loc 1 877 0
 755 0008 0023     		movs	r3, #0	@ tmp122,
 756 000a FB60     		str	r3, [r7, #12]	@ tmp122, xAlreadyYielded
 878:FreeRTOS/tasks.c **** 
 879:FreeRTOS/tasks.c **** 
 880:FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 881:FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickT_t ) 0U )
 757              		.loc 1 881 0
 758 000c 7B68     		ldr	r3, [r7, #4]	@ tmp123, xTicksToDelay
 759 000e 002B     		cmp	r3, #0	@ tmp123,
 760 0010 28D0     		beq	.L45	@,
 882:FreeRTOS/tasks.c **** 		{
 883:FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 761              		.loc 1 883 0
 762 0012 184B     		ldr	r3, .L50	@ tmp124,
 763 0014 1B68     		ldr	r3, [r3]	@ D.6483, uxSchedulerSuspended
 764 0016 002B     		cmp	r3, #0	@ D.6483,
 765 0018 02D0     		beq	.L46	@,
 766              		.loc 1 883 0 is_stmt 0 discriminator 1
 767 001a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 768              	.L47:
 769 001e FEE7     		b	.L47	@
 770              	.L46:
 884:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 771              		.loc 1 884 0 is_stmt 1
 772 0020 FFF7FEFF 		bl	vTaskSuspendAll	@
 885:FreeRTOS/tasks.c **** 			{
 886:FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 887:FreeRTOS/tasks.c **** 
 888:FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 889:FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 890:FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 891:FreeRTOS/tasks.c **** 				is resumed.
 892:FreeRTOS/tasks.c **** 
 893:FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 894:FreeRTOS/tasks.c **** 				executing task. */
 895:FreeRTOS/tasks.c **** 
 896:FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 897:FreeRTOS/tasks.c **** 				not a problem. */
 898:FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 773              		.loc 1 898 0
 774 0024 144B     		ldr	r3, .L50+4	@ tmp125,
 775 0026 1A68     		ldr	r2, [r3]	@ D.6483, xTickCount
 776 0028 7B68     		ldr	r3, [r7, #4]	@ tmp127, xTicksToDelay
 777 002a 1344     		add	r3, r3, r2	@ tmp126, D.6483
 778 002c BB60     		str	r3, [r7, #8]	@ tmp126, xTimeToWake
 899:FreeRTOS/tasks.c **** 
 900:FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 901:FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 902:FreeRTOS/tasks.c **** 				both lists. */
 903:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 779              		.loc 1 903 0
 780 002e 134B     		ldr	r3, .L50+8	@ tmp128,
 781 0030 1B68     		ldr	r3, [r3]	@ D.6484, pxCurrentTCB
 782 0032 0433     		adds	r3, r3, #4	@ D.6485, D.6484,
 783 0034 1846     		mov	r0, r3	@, D.6485
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 31


 784 0036 FFF7FEFF 		bl	uxListRemove	@
 785 003a 0346     		mov	r3, r0	@ D.6483,
 786 003c 002B     		cmp	r3, #0	@ D.6483,
 787 003e 0BD1     		bne	.L48	@,
 904:FreeRTOS/tasks.c **** 				{
 905:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 906:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 907:FreeRTOS/tasks.c **** 					directly. */
 908:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 788              		.loc 1 908 0
 789 0040 0E4B     		ldr	r3, .L50+8	@ tmp129,
 790 0042 1B68     		ldr	r3, [r3]	@ D.6484, pxCurrentTCB
 791 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6483, _10->uxPriority
 792 0046 1A46     		mov	r2, r3	@ D.6486, D.6483
 793 0048 0123     		movs	r3, #1	@ tmp130,
 794 004a 9340     		lsls	r3, r3, r2	@ D.6483, tmp130, D.6486
 795 004c DA43     		mvns	r2, r3	@ D.6483, D.6483
 796 004e 0C4B     		ldr	r3, .L50+12	@ tmp131,
 797 0050 1B68     		ldr	r3, [r3]	@ D.6483, uxTopReadyPriority
 798 0052 1340     		ands	r3, r3, r2	@, D.6483, D.6483, D.6483
 799 0054 0A4A     		ldr	r2, .L50+12	@ tmp132,
 800 0056 1360     		str	r3, [r2]	@ D.6483, uxTopReadyPriority
 801              	.L48:
 909:FreeRTOS/tasks.c **** 				}
 910:FreeRTOS/tasks.c **** 				else
 911:FreeRTOS/tasks.c **** 				{
 912:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 913:FreeRTOS/tasks.c **** 				}
 914:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 802              		.loc 1 914 0
 803 0058 B868     		ldr	r0, [r7, #8]	@, xTimeToWake
 804 005a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 915:FreeRTOS/tasks.c **** 			}
 916:FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 805              		.loc 1 916 0
 806 005e FFF7FEFF 		bl	xTaskResumeAll	@
 807 0062 F860     		str	r0, [r7, #12]	@, xAlreadyYielded
 808              	.L45:
 917:FreeRTOS/tasks.c **** 		}
 918:FreeRTOS/tasks.c **** 		else
 919:FreeRTOS/tasks.c **** 		{
 920:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 921:FreeRTOS/tasks.c **** 		}
 922:FreeRTOS/tasks.c **** 
 923:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 924:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 925:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 809              		.loc 1 925 0
 810 0064 FB68     		ldr	r3, [r7, #12]	@ tmp133, xAlreadyYielded
 811 0066 002B     		cmp	r3, #0	@ tmp133,
 812 0068 01D1     		bne	.L44	@,
 926:FreeRTOS/tasks.c **** 		{
 927:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 813              		.loc 1 927 0
 814 006a FFF7FEFF 		bl	vPortYield	@
 815              	.L44:
 928:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 32


 929:FreeRTOS/tasks.c **** 		else
 930:FreeRTOS/tasks.c **** 		{
 931:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 932:FreeRTOS/tasks.c **** 		}
 933:FreeRTOS/tasks.c **** 	}
 816              		.loc 1 933 0
 817 006e 1037     		adds	r7, r7, #16	@,,
 818              		.cfi_def_cfa_offset 8
 819 0070 BD46     		mov	sp, r7	@,
 820              		.cfi_def_cfa_register 13
 821              		@ sp needed	@
 822 0072 80BD     		pop	{r7, pc}	@
 823              	.L51:
 824              		.align	2
 825              	.L50:
 826 0074 00000000 		.word	uxSchedulerSuspended
 827 0078 00000000 		.word	xTickCount
 828 007c 00000000 		.word	pxCurrentTCB
 829 0080 00000000 		.word	uxTopReadyPriority
 830              		.cfi_endproc
 831              	.LFE4:
 832              		.size	vTaskDelay, .-vTaskDelay
 833              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 834              		.align	2
 835              		.global	uxTaskPriorityGet
 836              		.thumb
 837              		.thumb_func
 838              		.type	uxTaskPriorityGet, %function
 839              	uxTaskPriorityGet:
 840              	.LFB5:
 934:FreeRTOS/tasks.c **** 
 935:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 936:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 937:FreeRTOS/tasks.c **** 
 938:FreeRTOS/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 939:FreeRTOS/tasks.c **** 
 940:FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 941:FreeRTOS/tasks.c **** 	{
 942:FreeRTOS/tasks.c **** 	eTaskState eReturn;
 943:FreeRTOS/tasks.c **** 	List_t *pxStateList;
 944:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 945:FreeRTOS/tasks.c **** 
 946:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 947:FreeRTOS/tasks.c **** 
 948:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 949:FreeRTOS/tasks.c **** 		{
 950:FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
 951:FreeRTOS/tasks.c **** 			eReturn = eRunning;
 952:FreeRTOS/tasks.c **** 		}
 953:FreeRTOS/tasks.c **** 		else
 954:FreeRTOS/tasks.c **** 		{
 955:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 956:FreeRTOS/tasks.c **** 			{
 957:FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 958:FreeRTOS/tasks.c **** 			}
 959:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 960:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 33


 961:FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 962:FreeRTOS/tasks.c **** 			{
 963:FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 964:FreeRTOS/tasks.c **** 				lists. */
 965:FreeRTOS/tasks.c **** 				eReturn = eBlocked;
 966:FreeRTOS/tasks.c **** 			}
 967:FreeRTOS/tasks.c **** 
 968:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 969:FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 970:FreeRTOS/tasks.c **** 				{
 971:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
 972:FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
 973:FreeRTOS/tasks.c **** 					indefinitely? */
 974:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 975:FreeRTOS/tasks.c **** 					{
 976:FreeRTOS/tasks.c **** 						eReturn = eSuspended;
 977:FreeRTOS/tasks.c **** 					}
 978:FreeRTOS/tasks.c **** 					else
 979:FreeRTOS/tasks.c **** 					{
 980:FreeRTOS/tasks.c **** 						eReturn = eBlocked;
 981:FreeRTOS/tasks.c **** 					}
 982:FreeRTOS/tasks.c **** 				}
 983:FreeRTOS/tasks.c **** 			#endif
 984:FreeRTOS/tasks.c **** 
 985:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 986:FreeRTOS/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 987:FreeRTOS/tasks.c **** 				{
 988:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
 989:FreeRTOS/tasks.c **** 					tasks list. */
 990:FreeRTOS/tasks.c **** 					eReturn = eDeleted;
 991:FreeRTOS/tasks.c **** 				}
 992:FreeRTOS/tasks.c **** 			#endif
 993:FreeRTOS/tasks.c **** 
 994:FreeRTOS/tasks.c **** 			else
 995:FreeRTOS/tasks.c **** 			{
 996:FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
 997:FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
 998:FreeRTOS/tasks.c **** 				eReturn = eReady;
 999:FreeRTOS/tasks.c **** 			}
1000:FreeRTOS/tasks.c **** 		}
1001:FreeRTOS/tasks.c **** 
1002:FreeRTOS/tasks.c **** 		return eReturn;
1003:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1004:FreeRTOS/tasks.c **** 
1005:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1006:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1007:FreeRTOS/tasks.c **** 
1008:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1009:FreeRTOS/tasks.c **** 
1010:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskPriorityGet( TaskHandle_t xTask )
1011:FreeRTOS/tasks.c **** 	{
 841              		.loc 1 1011 0
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 16
 844              		@ frame_needed = 1, uses_anonymous_args = 0
 845 0000 80B5     		push	{r7, lr}	@
 846              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 34


 847              		.cfi_offset 7, -8
 848              		.cfi_offset 14, -4
 849 0002 84B0     		sub	sp, sp, #16	@,,
 850              		.cfi_def_cfa_offset 24
 851 0004 00AF     		add	r7, sp, #0	@,,
 852              		.cfi_def_cfa_register 7
 853 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1012:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1013:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
1014:FreeRTOS/tasks.c **** 
1015:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 854              		.loc 1 1015 0
 855 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1016:FreeRTOS/tasks.c **** 		{
1017:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are changing the
1018:FreeRTOS/tasks.c **** 			priority of the calling function. */
1019:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 856              		.loc 1 1019 0
 857 000c 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 858 000e 002B     		cmp	r3, #0	@ tmp113,
 859 0010 02D1     		bne	.L53	@,
 860              		.loc 1 1019 0 is_stmt 0 discriminator 1
 861 0012 074B     		ldr	r3, .L56	@ tmp114,
 862 0014 1B68     		ldr	r3, [r3]	@ D.6487, pxCurrentTCB
 863 0016 00E0     		b	.L54	@
 864              	.L53:
 865              		.loc 1 1019 0 discriminator 2
 866 0018 7B68     		ldr	r3, [r7, #4]	@ D.6487, xTask
 867              	.L54:
 868              		.loc 1 1019 0 discriminator 4
 869 001a FB60     		str	r3, [r7, #12]	@ D.6487, pxTCB
1020:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 870              		.loc 1 1020 0 is_stmt 1 discriminator 4
 871 001c FB68     		ldr	r3, [r7, #12]	@ tmp115, pxTCB
 872 001e DB6A     		ldr	r3, [r3, #44]	@ tmp116, pxTCB_5->uxPriority
 873 0020 BB60     		str	r3, [r7, #8]	@ tmp116, uxReturn
1021:FreeRTOS/tasks.c **** 		}
1022:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 874              		.loc 1 1022 0 discriminator 4
 875 0022 FFF7FEFF 		bl	vPortExitCritical	@
1023:FreeRTOS/tasks.c **** 
1024:FreeRTOS/tasks.c **** 		return uxReturn;
 876              		.loc 1 1024 0 discriminator 4
 877 0026 BB68     		ldr	r3, [r7, #8]	@ D.6488, uxReturn
1025:FreeRTOS/tasks.c **** 	}
 878              		.loc 1 1025 0 discriminator 4
 879 0028 1846     		mov	r0, r3	@, <retval>
 880 002a 1037     		adds	r7, r7, #16	@,,
 881              		.cfi_def_cfa_offset 8
 882 002c BD46     		mov	sp, r7	@,
 883              		.cfi_def_cfa_register 13
 884              		@ sp needed	@
 885 002e 80BD     		pop	{r7, pc}	@
 886              	.L57:
 887              		.align	2
 888              	.L56:
 889 0030 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 35


 890              		.cfi_endproc
 891              	.LFE5:
 892              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 893              		.section	.text.vTaskPrioritySet,"ax",%progbits
 894              		.align	2
 895              		.global	vTaskPrioritySet
 896              		.thumb
 897              		.thumb_func
 898              		.type	vTaskPrioritySet, %function
 899              	vTaskPrioritySet:
 900              	.LFB6:
1026:FreeRTOS/tasks.c **** 
1027:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1028:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1029:FreeRTOS/tasks.c **** 
1030:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1031:FreeRTOS/tasks.c **** 
1032:FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseT_t uxNewPriority )
1033:FreeRTOS/tasks.c **** 	{
 901              		.loc 1 1033 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 24
 904              		@ frame_needed = 1, uses_anonymous_args = 0
 905 0000 80B5     		push	{r7, lr}	@
 906              		.cfi_def_cfa_offset 8
 907              		.cfi_offset 7, -8
 908              		.cfi_offset 14, -4
 909 0002 86B0     		sub	sp, sp, #24	@,,
 910              		.cfi_def_cfa_offset 32
 911 0004 00AF     		add	r7, sp, #0	@,,
 912              		.cfi_def_cfa_register 7
 913 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 914 0008 3960     		str	r1, [r7]	@ uxNewPriority, uxNewPriority
1034:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1035:FreeRTOS/tasks.c **** 	UBaseT_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1036:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 915              		.loc 1 1036 0
 916 000a 0023     		movs	r3, #0	@ tmp138,
 917 000c 7B61     		str	r3, [r7, #20]	@ tmp138, xYieldRequired
1037:FreeRTOS/tasks.c **** 
1038:FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 918              		.loc 1 1038 0
 919 000e 3B68     		ldr	r3, [r7]	@ tmp139, uxNewPriority
 920 0010 072B     		cmp	r3, #7	@ tmp139,
 921 0012 02D9     		bls	.L59	@,
 922              		.loc 1 1038 0 is_stmt 0 discriminator 1
 923 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 924              	.L60:
 925 0018 FEE7     		b	.L60	@
 926              	.L59:
1039:FreeRTOS/tasks.c **** 
1040:FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1041:FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 927              		.loc 1 1041 0 is_stmt 1
 928 001a 3B68     		ldr	r3, [r7]	@ tmp140, uxNewPriority
 929 001c 072B     		cmp	r3, #7	@ tmp140,
 930 001e 01D9     		bls	.L61	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 36


1042:FreeRTOS/tasks.c **** 		{
1043:FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 931              		.loc 1 1043 0
 932 0020 0723     		movs	r3, #7	@ tmp141,
 933 0022 3B60     		str	r3, [r7]	@ tmp141, uxNewPriority
 934              	.L61:
1044:FreeRTOS/tasks.c **** 		}
1045:FreeRTOS/tasks.c **** 		else
1046:FreeRTOS/tasks.c **** 		{
1047:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1048:FreeRTOS/tasks.c **** 		}
1049:FreeRTOS/tasks.c **** 
1050:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 935              		.loc 1 1050 0
 936 0024 FFF7FEFF 		bl	vPortEnterCritical	@
1051:FreeRTOS/tasks.c **** 		{
1052:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1053:FreeRTOS/tasks.c **** 			task that is being changed. */
1054:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 937              		.loc 1 1054 0
 938 0028 7B68     		ldr	r3, [r7, #4]	@ tmp142, xTask
 939 002a 002B     		cmp	r3, #0	@ tmp142,
 940 002c 02D1     		bne	.L62	@,
 941              		.loc 1 1054 0 is_stmt 0 discriminator 1
 942 002e 414B     		ldr	r3, .L73	@ tmp143,
 943 0030 1B68     		ldr	r3, [r3]	@ D.6489, pxCurrentTCB
 944 0032 00E0     		b	.L63	@
 945              	.L62:
 946              		.loc 1 1054 0 discriminator 2
 947 0034 7B68     		ldr	r3, [r7, #4]	@ D.6489, xTask
 948              	.L63:
 949              		.loc 1 1054 0 discriminator 4
 950 0036 3B61     		str	r3, [r7, #16]	@ D.6489, pxTCB
1055:FreeRTOS/tasks.c **** 
1056:FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1057:FreeRTOS/tasks.c **** 
1058:FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1059:FreeRTOS/tasks.c **** 			{
1060:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 951              		.loc 1 1060 0 is_stmt 1 discriminator 4
 952 0038 3B69     		ldr	r3, [r7, #16]	@ tmp144, pxTCB
 953 003a 9B6C     		ldr	r3, [r3, #72]	@ tmp145, pxTCB_11->uxBasePriority
 954 003c FB60     		str	r3, [r7, #12]	@ tmp145, uxCurrentBasePriority
1061:FreeRTOS/tasks.c **** 			}
1062:FreeRTOS/tasks.c **** 			#else
1063:FreeRTOS/tasks.c **** 			{
1064:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1065:FreeRTOS/tasks.c **** 			}
1066:FreeRTOS/tasks.c **** 			#endif
1067:FreeRTOS/tasks.c **** 
1068:FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 955              		.loc 1 1068 0 discriminator 4
 956 003e FA68     		ldr	r2, [r7, #12]	@ tmp146, uxCurrentBasePriority
 957 0040 3B68     		ldr	r3, [r7]	@ tmp147, uxNewPriority
 958 0042 9A42     		cmp	r2, r3	@ tmp146, tmp147
 959 0044 70D0     		beq	.L64	@,
1069:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 37


1070:FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1071:FreeRTOS/tasks.c **** 				priority than the calling task. */
1072:FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 960              		.loc 1 1072 0
 961 0046 3A68     		ldr	r2, [r7]	@ tmp148, uxNewPriority
 962 0048 FB68     		ldr	r3, [r7, #12]	@ tmp149, uxCurrentBasePriority
 963 004a 9A42     		cmp	r2, r3	@ tmp148, tmp149
 964 004c 0DD9     		bls	.L65	@,
1073:FreeRTOS/tasks.c **** 				{
1074:FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 965              		.loc 1 1074 0
 966 004e 394B     		ldr	r3, .L73	@ tmp150,
 967 0050 1B68     		ldr	r3, [r3]	@ D.6491, pxCurrentTCB
 968 0052 3A69     		ldr	r2, [r7, #16]	@ tmp151, pxTCB
 969 0054 9A42     		cmp	r2, r3	@ tmp151, D.6491
 970 0056 0FD0     		beq	.L66	@,
1075:FreeRTOS/tasks.c **** 					{
1076:FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1077:FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1078:FreeRTOS/tasks.c **** 						raised above that of the running task? */
1079:FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 971              		.loc 1 1079 0
 972 0058 364B     		ldr	r3, .L73	@ tmp152,
 973 005a 1B68     		ldr	r3, [r3]	@ D.6491, pxCurrentTCB
 974 005c DA6A     		ldr	r2, [r3, #44]	@ D.6492, _14->uxPriority
 975 005e 3B68     		ldr	r3, [r7]	@ tmp153, uxNewPriority
 976 0060 9A42     		cmp	r2, r3	@ D.6492, tmp153
 977 0062 09D8     		bhi	.L66	@,
1080:FreeRTOS/tasks.c **** 						{
1081:FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 978              		.loc 1 1081 0
 979 0064 0123     		movs	r3, #1	@ tmp154,
 980 0066 7B61     		str	r3, [r7, #20]	@ tmp154, xYieldRequired
 981 0068 06E0     		b	.L66	@
 982              	.L65:
1082:FreeRTOS/tasks.c **** 						}
1083:FreeRTOS/tasks.c **** 						else
1084:FreeRTOS/tasks.c **** 						{
1085:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1086:FreeRTOS/tasks.c **** 						}
1087:FreeRTOS/tasks.c **** 					}
1088:FreeRTOS/tasks.c **** 					else
1089:FreeRTOS/tasks.c **** 					{
1090:FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1091:FreeRTOS/tasks.c **** 						but the running task must already be the highest
1092:FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1093:FreeRTOS/tasks.c **** 					}
1094:FreeRTOS/tasks.c **** 				}
1095:FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 983              		.loc 1 1095 0
 984 006a 324B     		ldr	r3, .L73	@ tmp155,
 985 006c 1B68     		ldr	r3, [r3]	@ D.6491, pxCurrentTCB
 986 006e 3A69     		ldr	r2, [r7, #16]	@ tmp156, pxTCB
 987 0070 9A42     		cmp	r2, r3	@ tmp156, D.6491
 988 0072 01D1     		bne	.L66	@,
1096:FreeRTOS/tasks.c **** 				{
1097:FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 38


1098:FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1099:FreeRTOS/tasks.c **** 					is ready to execute. */
1100:FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 989              		.loc 1 1100 0
 990 0074 0123     		movs	r3, #1	@ tmp157,
 991 0076 7B61     		str	r3, [r7, #20]	@ tmp157, xYieldRequired
 992              	.L66:
1101:FreeRTOS/tasks.c **** 				}
1102:FreeRTOS/tasks.c **** 				else
1103:FreeRTOS/tasks.c **** 				{
1104:FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1105:FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1106:FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1107:FreeRTOS/tasks.c **** 				}
1108:FreeRTOS/tasks.c **** 
1109:FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1110:FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1111:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1112:FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 993              		.loc 1 1112 0
 994 0078 3B69     		ldr	r3, [r7, #16]	@ tmp158, pxTCB
 995 007a DB6A     		ldr	r3, [r3, #44]	@ tmp159, pxTCB_11->uxPriority
 996 007c BB60     		str	r3, [r7, #8]	@ tmp159, uxPriorityUsedOnEntry
1113:FreeRTOS/tasks.c **** 
1114:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1115:FreeRTOS/tasks.c **** 				{
1116:FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1117:FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1118:FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 997              		.loc 1 1118 0
 998 007e 3B69     		ldr	r3, [r7, #16]	@ tmp160, pxTCB
 999 0080 9A6C     		ldr	r2, [r3, #72]	@ D.6492, pxTCB_11->uxBasePriority
 1000 0082 3B69     		ldr	r3, [r7, #16]	@ tmp161, pxTCB
 1001 0084 DB6A     		ldr	r3, [r3, #44]	@ D.6492, pxTCB_11->uxPriority
 1002 0086 9A42     		cmp	r2, r3	@ D.6492, D.6492
 1003 0088 02D1     		bne	.L67	@,
1119:FreeRTOS/tasks.c **** 					{
1120:FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1004              		.loc 1 1120 0
 1005 008a 3B69     		ldr	r3, [r7, #16]	@ tmp162, pxTCB
 1006 008c 3A68     		ldr	r2, [r7]	@ tmp163, uxNewPriority
 1007 008e DA62     		str	r2, [r3, #44]	@ tmp163, pxTCB_11->uxPriority
 1008              	.L67:
1121:FreeRTOS/tasks.c **** 					}
1122:FreeRTOS/tasks.c **** 					else
1123:FreeRTOS/tasks.c **** 					{
1124:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1125:FreeRTOS/tasks.c **** 					}
1126:FreeRTOS/tasks.c **** 
1127:FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1128:FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1009              		.loc 1 1128 0
 1010 0090 3B69     		ldr	r3, [r7, #16]	@ tmp164, pxTCB
 1011 0092 3A68     		ldr	r2, [r7]	@ tmp165, uxNewPriority
 1012 0094 9A64     		str	r2, [r3, #72]	@ tmp165, pxTCB_11->uxBasePriority
1129:FreeRTOS/tasks.c **** 				}
1130:FreeRTOS/tasks.c **** 				#else
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 39


1131:FreeRTOS/tasks.c **** 				{
1132:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1133:FreeRTOS/tasks.c **** 				}
1134:FreeRTOS/tasks.c **** 				#endif
1135:FreeRTOS/tasks.c **** 
1136:FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1137:FreeRTOS/tasks.c **** 				being used for anything else. */
1138:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1013              		.loc 1 1138 0
 1014 0096 3B69     		ldr	r3, [r7, #16]	@ tmp166, pxTCB
 1015 0098 9B69     		ldr	r3, [r3, #24]	@ D.6492, pxTCB_11->xEventListItem.xItemValue
 1016 009a 002B     		cmp	r3, #0	@ D.6493,
 1017 009c 04DB     		blt	.L68	@,
1139:FreeRTOS/tasks.c **** 				{
1140:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - ( Ti
 1018              		.loc 1 1140 0
 1019 009e 3B68     		ldr	r3, [r7]	@ tmp167, uxNewPriority
 1020 00a0 C3F10802 		rsb	r2, r3, #8	@ D.6492, tmp167,
 1021 00a4 3B69     		ldr	r3, [r7, #16]	@ tmp168, pxTCB
 1022 00a6 9A61     		str	r2, [r3, #24]	@ D.6492, pxTCB_11->xEventListItem.xItemValue
 1023              	.L68:
1141:FreeRTOS/tasks.c **** 				}
1142:FreeRTOS/tasks.c **** 				else
1143:FreeRTOS/tasks.c **** 				{
1144:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1145:FreeRTOS/tasks.c **** 				}
1146:FreeRTOS/tasks.c **** 
1147:FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1148:FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1149:FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1150:FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1151:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 1024              		.loc 1 1151 0
 1025 00a8 3B69     		ldr	r3, [r7, #16]	@ tmp169, pxTCB
 1026 00aa 5969     		ldr	r1, [r3, #20]	@ D.6494, pxTCB_11->xGenericListItem.pvContainer
 1027 00ac BA68     		ldr	r2, [r7, #8]	@ tmp170, uxPriorityUsedOnEntry
 1028 00ae 1346     		mov	r3, r2	@ tmp171, tmp170
 1029 00b0 9B00     		lsls	r3, r3, #2	@ tmp171, tmp171,
 1030 00b2 1344     		add	r3, r3, r2	@ tmp171, tmp170
 1031 00b4 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 1032 00b6 204A     		ldr	r2, .L73+4	@ tmp173,
 1033 00b8 1344     		add	r3, r3, r2	@ D.6495, tmp173
 1034 00ba 9942     		cmp	r1, r3	@ D.6494, D.6495
 1035 00bc 01D1     		bne	.L69	@,
 1036              		.loc 1 1151 0 is_stmt 0 discriminator 1
 1037 00be 0123     		movs	r3, #1	@ D.6490,
 1038 00c0 00E0     		b	.L70	@
 1039              	.L69:
 1040              		.loc 1 1151 0 discriminator 2
 1041 00c2 0023     		movs	r3, #0	@ D.6490,
 1042              	.L70:
 1043              		.loc 1 1151 0 discriminator 4
 1044 00c4 002B     		cmp	r3, #0	@ D.6490,
 1045 00c6 2AD0     		beq	.L71	@,
1152:FreeRTOS/tasks.c **** 				{
1153:FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1154:FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 40


1155:FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1156:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1046              		.loc 1 1156 0 is_stmt 1
 1047 00c8 3B69     		ldr	r3, [r7, #16]	@ tmp174, pxTCB
 1048 00ca 0433     		adds	r3, r3, #4	@ D.6496, tmp174,
 1049 00cc 1846     		mov	r0, r3	@, D.6496
 1050 00ce FFF7FEFF 		bl	uxListRemove	@
 1051 00d2 0346     		mov	r3, r0	@ D.6492,
 1052 00d4 002B     		cmp	r3, #0	@ D.6492,
 1053 00d6 09D1     		bne	.L72	@,
1157:FreeRTOS/tasks.c **** 					{
1158:FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1159:FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1160:FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1161:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1054              		.loc 1 1161 0
 1055 00d8 BB68     		ldr	r3, [r7, #8]	@ D.6497, uxPriorityUsedOnEntry
 1056 00da 0122     		movs	r2, #1	@ tmp175,
 1057 00dc 02FA03F3 		lsl	r3, r2, r3	@ D.6492, tmp175, D.6497
 1058 00e0 DA43     		mvns	r2, r3	@ D.6492, D.6492
 1059 00e2 164B     		ldr	r3, .L73+8	@ tmp176,
 1060 00e4 1B68     		ldr	r3, [r3]	@ D.6492, uxTopReadyPriority
 1061 00e6 1340     		ands	r3, r3, r2	@, D.6492, D.6492, D.6492
 1062 00e8 144A     		ldr	r2, .L73+8	@ tmp177,
 1063 00ea 1360     		str	r3, [r2]	@ D.6492, uxTopReadyPriority
 1064              	.L72:
1162:FreeRTOS/tasks.c **** 					}
1163:FreeRTOS/tasks.c **** 					else
1164:FreeRTOS/tasks.c **** 					{
1165:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1166:FreeRTOS/tasks.c **** 					}
1167:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1065              		.loc 1 1167 0
 1066 00ec 3B69     		ldr	r3, [r7, #16]	@ tmp178, pxTCB
 1067 00ee DB6A     		ldr	r3, [r3, #44]	@ D.6492, pxTCB_11->uxPriority
 1068 00f0 1A46     		mov	r2, r3	@ D.6497, D.6492
 1069 00f2 0123     		movs	r3, #1	@ tmp179,
 1070 00f4 03FA02F2 		lsl	r2, r3, r2	@ D.6492, tmp179, D.6497
 1071 00f8 104B     		ldr	r3, .L73+8	@ tmp180,
 1072 00fa 1B68     		ldr	r3, [r3]	@ D.6492, uxTopReadyPriority
 1073 00fc 1343     		orrs	r3, r3, r2	@, D.6492, D.6492, D.6492
 1074 00fe 0F4A     		ldr	r2, .L73+8	@ tmp181,
 1075 0100 1360     		str	r3, [r2]	@ D.6492, uxTopReadyPriority
 1076 0102 3B69     		ldr	r3, [r7, #16]	@ tmp182, pxTCB
 1077 0104 DA6A     		ldr	r2, [r3, #44]	@ D.6492, pxTCB_11->uxPriority
 1078 0106 1346     		mov	r3, r2	@ tmp183, D.6492
 1079 0108 9B00     		lsls	r3, r3, #2	@ tmp183, tmp183,
 1080 010a 1344     		add	r3, r3, r2	@ tmp183, D.6492
 1081 010c 9B00     		lsls	r3, r3, #2	@ tmp184, tmp183,
 1082 010e 0A4A     		ldr	r2, .L73+4	@ tmp185,
 1083 0110 1A44     		add	r2, r2, r3	@ D.6495, tmp183
 1084 0112 3B69     		ldr	r3, [r7, #16]	@ tmp186, pxTCB
 1085 0114 0433     		adds	r3, r3, #4	@ D.6496, tmp186,
 1086 0116 1046     		mov	r0, r2	@, D.6495
 1087 0118 1946     		mov	r1, r3	@, D.6496
 1088 011a FFF7FEFF 		bl	vListInsertEnd	@
 1089              	.L71:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 41


1168:FreeRTOS/tasks.c **** 				}
1169:FreeRTOS/tasks.c **** 				else
1170:FreeRTOS/tasks.c **** 				{
1171:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:FreeRTOS/tasks.c **** 				}
1173:FreeRTOS/tasks.c **** 
1174:FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
 1090              		.loc 1 1174 0
 1091 011e 7B69     		ldr	r3, [r7, #20]	@ tmp187, xYieldRequired
 1092 0120 012B     		cmp	r3, #1	@ tmp187,
 1093 0122 01D1     		bne	.L64	@,
1175:FreeRTOS/tasks.c **** 				{
1176:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1094              		.loc 1 1176 0
 1095 0124 FFF7FEFF 		bl	vPortYield	@
 1096              	.L64:
1177:FreeRTOS/tasks.c **** 				}
1178:FreeRTOS/tasks.c **** 				else
1179:FreeRTOS/tasks.c **** 				{
1180:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1181:FreeRTOS/tasks.c **** 				}
1182:FreeRTOS/tasks.c **** 
1183:FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1184:FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1185:FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1186:FreeRTOS/tasks.c **** 			}
1187:FreeRTOS/tasks.c **** 		}
1188:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1097              		.loc 1 1188 0
 1098 0128 FFF7FEFF 		bl	vPortExitCritical	@
1189:FreeRTOS/tasks.c **** 	}
 1099              		.loc 1 1189 0
 1100 012c 1837     		adds	r7, r7, #24	@,,
 1101              		.cfi_def_cfa_offset 8
 1102 012e BD46     		mov	sp, r7	@,
 1103              		.cfi_def_cfa_register 13
 1104              		@ sp needed	@
 1105 0130 80BD     		pop	{r7, pc}	@
 1106              	.L74:
 1107 0132 00BF     		.align	2
 1108              	.L73:
 1109 0134 00000000 		.word	pxCurrentTCB
 1110 0138 00000000 		.word	pxReadyTasksLists
 1111 013c 00000000 		.word	uxTopReadyPriority
 1112              		.cfi_endproc
 1113              	.LFE6:
 1114              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1115              		.section	.text.vTaskSuspend,"ax",%progbits
 1116              		.align	2
 1117              		.global	vTaskSuspend
 1118              		.thumb
 1119              		.thumb_func
 1120              		.type	vTaskSuspend, %function
 1121              	vTaskSuspend:
 1122              	.LFB7:
1190:FreeRTOS/tasks.c **** 
1191:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 42


1192:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1193:FreeRTOS/tasks.c **** 
1194:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1195:FreeRTOS/tasks.c **** 
1196:FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1197:FreeRTOS/tasks.c **** 	{
 1123              		.loc 1 1197 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 16
 1126              		@ frame_needed = 1, uses_anonymous_args = 0
 1127 0000 80B5     		push	{r7, lr}	@
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 7, -8
 1130              		.cfi_offset 14, -4
 1131 0002 84B0     		sub	sp, sp, #16	@,,
 1132              		.cfi_def_cfa_offset 24
 1133 0004 00AF     		add	r7, sp, #0	@,,
 1134              		.cfi_def_cfa_register 7
 1135 0006 7860     		str	r0, [r7, #4]	@ xTaskToSuspend, xTaskToSuspend
1198:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1199:FreeRTOS/tasks.c **** 
1200:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 1136              		.loc 1 1200 0
 1137 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1201:FreeRTOS/tasks.c **** 		{
1202:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1203:FreeRTOS/tasks.c **** 			being suspended. */
1204:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1138              		.loc 1 1204 0
 1139 000c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTaskToSuspend
 1140 000e 002B     		cmp	r3, #0	@ tmp130,
 1141 0010 02D1     		bne	.L76	@,
 1142              		.loc 1 1204 0 is_stmt 0 discriminator 1
 1143 0012 304B     		ldr	r3, .L88	@ tmp131,
 1144 0014 1B68     		ldr	r3, [r3]	@ D.6498, pxCurrentTCB
 1145 0016 00E0     		b	.L77	@
 1146              	.L76:
 1147              		.loc 1 1204 0 discriminator 2
 1148 0018 7B68     		ldr	r3, [r7, #4]	@ D.6498, xTaskToSuspend
 1149              	.L77:
 1150              		.loc 1 1204 0 discriminator 4
 1151 001a FB60     		str	r3, [r7, #12]	@ D.6498, pxTCB
1205:FreeRTOS/tasks.c **** 
1206:FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1207:FreeRTOS/tasks.c **** 
1208:FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1209:FreeRTOS/tasks.c **** 			suspended list. */
1210:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1152              		.loc 1 1210 0 is_stmt 1 discriminator 4
 1153 001c FB68     		ldr	r3, [r7, #12]	@ tmp132, pxTCB
 1154 001e 0433     		adds	r3, r3, #4	@ D.6499, tmp132,
 1155 0020 1846     		mov	r0, r3	@, D.6499
 1156 0022 FFF7FEFF 		bl	uxListRemove	@
 1157 0026 0346     		mov	r3, r0	@ D.6500,
 1158 0028 002B     		cmp	r3, #0	@ D.6500,
 1159 002a 15D1     		bne	.L78	@,
1211:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 43


1212:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1160              		.loc 1 1212 0
 1161 002c FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 1162 002e DA6A     		ldr	r2, [r3, #44]	@ D.6500, pxTCB_5->uxPriority
 1163 0030 2949     		ldr	r1, .L88+4	@ tmp134,
 1164 0032 1346     		mov	r3, r2	@ tmp135, D.6500
 1165 0034 9B00     		lsls	r3, r3, #2	@ tmp135, tmp135,
 1166 0036 1344     		add	r3, r3, r2	@ tmp135, D.6500
 1167 0038 9B00     		lsls	r3, r3, #2	@ tmp136, tmp135,
 1168 003a 0B44     		add	r3, r3, r1	@ tmp137, tmp134
 1169 003c 1B68     		ldr	r3, [r3]	@ D.6500, pxReadyTasksLists[_8].uxNumberOfItems
 1170 003e 002B     		cmp	r3, #0	@ D.6500,
 1171 0040 0AD1     		bne	.L78	@,
 1172              		.loc 1 1212 0 is_stmt 0 discriminator 1
 1173 0042 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 1174 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6500, pxTCB_5->uxPriority
 1175 0046 1A46     		mov	r2, r3	@ D.6501, D.6500
 1176 0048 0123     		movs	r3, #1	@ tmp139,
 1177 004a 9340     		lsls	r3, r3, r2	@ D.6500, tmp139, D.6501
 1178 004c DA43     		mvns	r2, r3	@ D.6500, D.6500
 1179 004e 234B     		ldr	r3, .L88+8	@ tmp140,
 1180 0050 1B68     		ldr	r3, [r3]	@ D.6500, uxTopReadyPriority
 1181 0052 1340     		ands	r3, r3, r2	@, D.6500, D.6500, D.6500
 1182 0054 214A     		ldr	r2, .L88+8	@ tmp141,
 1183 0056 1360     		str	r3, [r2]	@ D.6500, uxTopReadyPriority
 1184              	.L78:
1213:FreeRTOS/tasks.c **** 			}
1214:FreeRTOS/tasks.c **** 			else
1215:FreeRTOS/tasks.c **** 			{
1216:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1217:FreeRTOS/tasks.c **** 			}
1218:FreeRTOS/tasks.c **** 
1219:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1220:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1185              		.loc 1 1220 0 is_stmt 1
 1186 0058 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 1187 005a 9B6A     		ldr	r3, [r3, #40]	@ D.6502, pxTCB_5->xEventListItem.pvContainer
 1188 005c 002B     		cmp	r3, #0	@ D.6502,
 1189 005e 04D0     		beq	.L80	@,
1221:FreeRTOS/tasks.c **** 			{
1222:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1190              		.loc 1 1222 0
 1191 0060 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 1192 0062 1833     		adds	r3, r3, #24	@ D.6499, tmp143,
 1193 0064 1846     		mov	r0, r3	@, D.6499
 1194 0066 FFF7FEFF 		bl	uxListRemove	@
 1195              	.L80:
1223:FreeRTOS/tasks.c **** 			}
1224:FreeRTOS/tasks.c **** 			else
1225:FreeRTOS/tasks.c **** 			{
1226:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1227:FreeRTOS/tasks.c **** 			}
1228:FreeRTOS/tasks.c **** 
1229:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1196              		.loc 1 1229 0
 1197 006a FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 1198 006c 0433     		adds	r3, r3, #4	@ D.6499, tmp144,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 44


 1199 006e 1C48     		ldr	r0, .L88+12	@,
 1200 0070 1946     		mov	r1, r3	@, D.6499
 1201 0072 FFF7FEFF 		bl	vListInsertEnd	@
1230:FreeRTOS/tasks.c **** 		}
1231:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1202              		.loc 1 1231 0
 1203 0076 FFF7FEFF 		bl	vPortExitCritical	@
1232:FreeRTOS/tasks.c **** 
1233:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1204              		.loc 1 1233 0
 1205 007a 164B     		ldr	r3, .L88	@ tmp145,
 1206 007c 1B68     		ldr	r3, [r3]	@ D.6503, pxCurrentTCB
 1207 007e FA68     		ldr	r2, [r7, #12]	@ tmp146, pxTCB
 1208 0080 9A42     		cmp	r2, r3	@ tmp146, D.6503
 1209 0082 1AD1     		bne	.L81	@,
1234:FreeRTOS/tasks.c **** 		{
1235:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1210              		.loc 1 1235 0
 1211 0084 174B     		ldr	r3, .L88+16	@ tmp147,
 1212 0086 1B68     		ldr	r3, [r3]	@ D.6504, xSchedulerRunning
 1213 0088 002B     		cmp	r3, #0	@ D.6504,
 1214 008a 09D0     		beq	.L82	@,
1236:FreeRTOS/tasks.c **** 			{
1237:FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1238:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1215              		.loc 1 1238 0
 1216 008c 164B     		ldr	r3, .L88+20	@ tmp148,
 1217 008e 1B68     		ldr	r3, [r3]	@ D.6500, uxSchedulerSuspended
 1218 0090 002B     		cmp	r3, #0	@ D.6500,
 1219 0092 02D0     		beq	.L83	@,
 1220              		.loc 1 1238 0 is_stmt 0 discriminator 1
 1221 0094 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1222              	.L84:
 1223 0098 FEE7     		b	.L84	@
 1224              	.L83:
1239:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1225              		.loc 1 1239 0 is_stmt 1
 1226 009a FFF7FEFF 		bl	vPortYield	@
 1227 009e 16E0     		b	.L75	@
 1228              	.L82:
1240:FreeRTOS/tasks.c **** 			}
1241:FreeRTOS/tasks.c **** 			else
1242:FreeRTOS/tasks.c **** 			{
1243:FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1244:FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1245:FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1246:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1229              		.loc 1 1246 0
 1230 00a0 0F4B     		ldr	r3, .L88+12	@ tmp149,
 1231 00a2 1A68     		ldr	r2, [r3]	@ D.6500, xSuspendedTaskList.uxNumberOfItems
 1232 00a4 114B     		ldr	r3, .L88+24	@ tmp150,
 1233 00a6 1B68     		ldr	r3, [r3]	@ D.6500, uxCurrentNumberOfTasks
 1234 00a8 9A42     		cmp	r2, r3	@ D.6500, D.6500
 1235 00aa 03D1     		bne	.L86	@,
1247:FreeRTOS/tasks.c **** 				{
1248:FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1249:FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 45


1250:FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1251:FreeRTOS/tasks.c **** 					is. */
1252:FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
 1236              		.loc 1 1252 0
 1237 00ac 094B     		ldr	r3, .L88	@ tmp151,
 1238 00ae 0022     		movs	r2, #0	@ tmp152,
 1239 00b0 1A60     		str	r2, [r3]	@ tmp152, pxCurrentTCB
 1240 00b2 0CE0     		b	.L75	@
 1241              	.L86:
1253:FreeRTOS/tasks.c **** 				}
1254:FreeRTOS/tasks.c **** 				else
1255:FreeRTOS/tasks.c **** 				{
1256:FreeRTOS/tasks.c **** 					vTaskSwitchContext();
 1242              		.loc 1 1256 0
 1243 00b4 FFF7FEFF 		bl	vTaskSwitchContext	@
 1244 00b8 09E0     		b	.L75	@
 1245              	.L81:
1257:FreeRTOS/tasks.c **** 				}
1258:FreeRTOS/tasks.c **** 			}
1259:FreeRTOS/tasks.c **** 		}
1260:FreeRTOS/tasks.c **** 		else
1261:FreeRTOS/tasks.c **** 		{
1262:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1246              		.loc 1 1262 0
 1247 00ba 0A4B     		ldr	r3, .L88+16	@ tmp153,
 1248 00bc 1B68     		ldr	r3, [r3]	@ D.6504, xSchedulerRunning
 1249 00be 002B     		cmp	r3, #0	@ D.6504,
 1250 00c0 05D0     		beq	.L75	@,
1263:FreeRTOS/tasks.c **** 			{
1264:FreeRTOS/tasks.c **** 				/* A task other than the currently running task was suspended,
1265:FreeRTOS/tasks.c **** 				reset the next expected unblock time in case it referred to the
1266:FreeRTOS/tasks.c **** 				task that is now in the Suspended state. */
1267:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 1251              		.loc 1 1267 0
 1252 00c2 FFF7FEFF 		bl	vPortEnterCritical	@
1268:FreeRTOS/tasks.c **** 				{
1269:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 1253              		.loc 1 1269 0
 1254 00c6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
1270:FreeRTOS/tasks.c **** 				}
1271:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 1255              		.loc 1 1271 0
 1256 00ca FFF7FEFF 		bl	vPortExitCritical	@
 1257              	.L75:
1272:FreeRTOS/tasks.c **** 			}
1273:FreeRTOS/tasks.c **** 			else
1274:FreeRTOS/tasks.c **** 			{
1275:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1276:FreeRTOS/tasks.c **** 			}
1277:FreeRTOS/tasks.c **** 		}
1278:FreeRTOS/tasks.c **** 	}
 1258              		.loc 1 1278 0
 1259 00ce 1037     		adds	r7, r7, #16	@,,
 1260              		.cfi_def_cfa_offset 8
 1261 00d0 BD46     		mov	sp, r7	@,
 1262              		.cfi_def_cfa_register 13
 1263              		@ sp needed	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 46


 1264 00d2 80BD     		pop	{r7, pc}	@
 1265              	.L89:
 1266              		.align	2
 1267              	.L88:
 1268 00d4 00000000 		.word	pxCurrentTCB
 1269 00d8 00000000 		.word	pxReadyTasksLists
 1270 00dc 00000000 		.word	uxTopReadyPriority
 1271 00e0 00000000 		.word	xSuspendedTaskList
 1272 00e4 00000000 		.word	xSchedulerRunning
 1273 00e8 00000000 		.word	uxSchedulerSuspended
 1274 00ec 00000000 		.word	uxCurrentNumberOfTasks
 1275              		.cfi_endproc
 1276              	.LFE7:
 1277              		.size	vTaskSuspend, .-vTaskSuspend
 1278              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1279              		.align	2
 1280              		.thumb
 1281              		.thumb_func
 1282              		.type	prvTaskIsTaskSuspended, %function
 1283              	prvTaskIsTaskSuspended:
 1284              	.LFB8:
1279:FreeRTOS/tasks.c **** 
1280:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1281:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1282:FreeRTOS/tasks.c **** 
1283:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1284:FreeRTOS/tasks.c **** 
1285:FreeRTOS/tasks.c **** 	static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1286:FreeRTOS/tasks.c **** 	{
 1285              		.loc 1 1286 0
 1286              		.cfi_startproc
 1287              		@ args = 0, pretend = 0, frame = 16
 1288              		@ frame_needed = 1, uses_anonymous_args = 0
 1289 0000 80B5     		push	{r7, lr}	@
 1290              		.cfi_def_cfa_offset 8
 1291              		.cfi_offset 7, -8
 1292              		.cfi_offset 14, -4
 1293 0002 84B0     		sub	sp, sp, #16	@,,
 1294              		.cfi_def_cfa_offset 24
 1295 0004 00AF     		add	r7, sp, #0	@,,
 1296              		.cfi_def_cfa_register 7
 1297 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1287:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 1298              		.loc 1 1287 0
 1299 0008 0023     		movs	r3, #0	@ tmp117,
 1300 000a FB60     		str	r3, [r7, #12]	@ tmp117, xReturn
1288:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1301              		.loc 1 1288 0
 1302 000c 7B68     		ldr	r3, [r7, #4]	@ tmp118, xTask
 1303 000e BB60     		str	r3, [r7, #8]	@ tmp118, pxTCB
1289:FreeRTOS/tasks.c **** 
1290:FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1291:FreeRTOS/tasks.c **** 		section. */
1292:FreeRTOS/tasks.c **** 
1293:FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1294:FreeRTOS/tasks.c **** 		configASSERT( xTask );
 1304              		.loc 1 1294 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 47


 1305 0010 7B68     		ldr	r3, [r7, #4]	@ tmp119, xTask
 1306 0012 002B     		cmp	r3, #0	@ tmp119,
 1307 0014 02D1     		bne	.L91	@,
 1308              		.loc 1 1294 0 is_stmt 0 discriminator 1
 1309 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1310              	.L92:
 1311 001a FEE7     		b	.L92	@
 1312              	.L91:
1295:FreeRTOS/tasks.c **** 
1296:FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1297:FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1313              		.loc 1 1297 0 is_stmt 1
 1314 001c BB68     		ldr	r3, [r7, #8]	@ tmp120, pxTCB
 1315 001e 5B69     		ldr	r3, [r3, #20]	@ D.6506, pxTCB_6->xGenericListItem.pvContainer
 1316 0020 0E4A     		ldr	r2, .L99	@ tmp121,
 1317 0022 9342     		cmp	r3, r2	@ D.6506, tmp121
 1318 0024 01D1     		bne	.L93	@,
 1319              		.loc 1 1297 0 is_stmt 0 discriminator 1
 1320 0026 0123     		movs	r3, #1	@ D.6505,
 1321 0028 00E0     		b	.L94	@
 1322              	.L93:
 1323              		.loc 1 1297 0 discriminator 2
 1324 002a 0023     		movs	r3, #0	@ D.6505,
 1325              	.L94:
 1326              		.loc 1 1297 0 discriminator 4
 1327 002c 002B     		cmp	r3, #0	@ D.6505,
 1328 002e 0FD0     		beq	.L95	@,
1298:FreeRTOS/tasks.c **** 		{
1299:FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1300:FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1329              		.loc 1 1300 0 is_stmt 1
 1330 0030 BB68     		ldr	r3, [r7, #8]	@ tmp122, pxTCB
 1331 0032 9B6A     		ldr	r3, [r3, #40]	@ D.6506, pxTCB_6->xEventListItem.pvContainer
 1332 0034 0A4A     		ldr	r2, .L99+4	@ tmp123,
 1333 0036 9342     		cmp	r3, r2	@ D.6506, tmp123
 1334 0038 0AD0     		beq	.L95	@,
1301:FreeRTOS/tasks.c **** 			{
1302:FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1303:FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1304:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1335              		.loc 1 1304 0
 1336 003a BB68     		ldr	r3, [r7, #8]	@ tmp124, pxTCB
 1337 003c 9B6A     		ldr	r3, [r3, #40]	@ D.6506, pxTCB_6->xEventListItem.pvContainer
 1338 003e 002B     		cmp	r3, #0	@ D.6506,
 1339 0040 01D1     		bne	.L96	@,
 1340              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1341 0042 0123     		movs	r3, #1	@ D.6505,
 1342 0044 00E0     		b	.L97	@
 1343              	.L96:
 1344              		.loc 1 1304 0 discriminator 2
 1345 0046 0023     		movs	r3, #0	@ D.6505,
 1346              	.L97:
 1347              		.loc 1 1304 0 discriminator 4
 1348 0048 002B     		cmp	r3, #0	@ D.6505,
 1349 004a 01D0     		beq	.L95	@,
1305:FreeRTOS/tasks.c **** 				{
1306:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 48


 1350              		.loc 1 1306 0 is_stmt 1
 1351 004c 0123     		movs	r3, #1	@ tmp125,
 1352 004e FB60     		str	r3, [r7, #12]	@ tmp125, xReturn
 1353              	.L95:
1307:FreeRTOS/tasks.c **** 				}
1308:FreeRTOS/tasks.c **** 				else
1309:FreeRTOS/tasks.c **** 				{
1310:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1311:FreeRTOS/tasks.c **** 				}
1312:FreeRTOS/tasks.c **** 			}
1313:FreeRTOS/tasks.c **** 			else
1314:FreeRTOS/tasks.c **** 			{
1315:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1316:FreeRTOS/tasks.c **** 			}
1317:FreeRTOS/tasks.c **** 		}
1318:FreeRTOS/tasks.c **** 		else
1319:FreeRTOS/tasks.c **** 		{
1320:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1321:FreeRTOS/tasks.c **** 		}
1322:FreeRTOS/tasks.c **** 
1323:FreeRTOS/tasks.c **** 		return xReturn;
 1354              		.loc 1 1323 0
 1355 0050 FB68     		ldr	r3, [r7, #12]	@ D.6507, xReturn
1324:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1356              		.loc 1 1324 0
 1357 0052 1846     		mov	r0, r3	@, <retval>
 1358 0054 1037     		adds	r7, r7, #16	@,,
 1359              		.cfi_def_cfa_offset 8
 1360 0056 BD46     		mov	sp, r7	@,
 1361              		.cfi_def_cfa_register 13
 1362              		@ sp needed	@
 1363 0058 80BD     		pop	{r7, pc}	@
 1364              	.L100:
 1365 005a 00BF     		.align	2
 1366              	.L99:
 1367 005c 00000000 		.word	xSuspendedTaskList
 1368 0060 00000000 		.word	xPendingReadyList
 1369              		.cfi_endproc
 1370              	.LFE8:
 1371              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1372              		.section	.text.vTaskResume,"ax",%progbits
 1373              		.align	2
 1374              		.global	vTaskResume
 1375              		.thumb
 1376              		.thumb_func
 1377              		.type	vTaskResume, %function
 1378              	vTaskResume:
 1379              	.LFB9:
1325:FreeRTOS/tasks.c **** 
1326:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1327:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1328:FreeRTOS/tasks.c **** 
1329:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1330:FreeRTOS/tasks.c **** 
1331:FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1332:FreeRTOS/tasks.c **** 	{
 1380              		.loc 1 1332 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 49


 1381              		.cfi_startproc
 1382              		@ args = 0, pretend = 0, frame = 16
 1383              		@ frame_needed = 1, uses_anonymous_args = 0
 1384 0000 80B5     		push	{r7, lr}	@
 1385              		.cfi_def_cfa_offset 8
 1386              		.cfi_offset 7, -8
 1387              		.cfi_offset 14, -4
 1388 0002 84B0     		sub	sp, sp, #16	@,,
 1389              		.cfi_def_cfa_offset 24
 1390 0004 00AF     		add	r7, sp, #0	@,,
 1391              		.cfi_def_cfa_register 7
 1392 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
1333:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1393              		.loc 1 1333 0
 1394 0008 7B68     		ldr	r3, [r7, #4]	@ tmp124, xTaskToResume
 1395 000a FB60     		str	r3, [r7, #12]	@ tmp124, pxTCB
1334:FreeRTOS/tasks.c **** 
1335:FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1336:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1396              		.loc 1 1336 0
 1397 000c 7B68     		ldr	r3, [r7, #4]	@ tmp125, xTaskToResume
 1398 000e 002B     		cmp	r3, #0	@ tmp125,
 1399 0010 02D1     		bne	.L102	@,
 1400              		.loc 1 1336 0 is_stmt 0 discriminator 1
 1401 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1402              	.L103:
 1403 0016 FEE7     		b	.L103	@
 1404              	.L102:
1337:FreeRTOS/tasks.c **** 
1338:FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1339:FreeRTOS/tasks.c **** 		currently executing task. */
1340:FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1405              		.loc 1 1340 0 is_stmt 1
 1406 0018 FB68     		ldr	r3, [r7, #12]	@ tmp126, pxTCB
 1407 001a 002B     		cmp	r3, #0	@ tmp126,
 1408 001c 35D0     		beq	.L101	@,
 1409              		.loc 1 1340 0 is_stmt 0 discriminator 1
 1410 001e 1C4B     		ldr	r3, .L106	@ tmp127,
 1411 0020 1B68     		ldr	r3, [r3]	@ D.6508, pxCurrentTCB
 1412 0022 FA68     		ldr	r2, [r7, #12]	@ tmp128, pxTCB
 1413 0024 9A42     		cmp	r2, r3	@ tmp128, D.6508
 1414 0026 30D0     		beq	.L101	@,
1341:FreeRTOS/tasks.c **** 		{
1342:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 1415              		.loc 1 1342 0 is_stmt 1
 1416 0028 FFF7FEFF 		bl	vPortEnterCritical	@
1343:FreeRTOS/tasks.c **** 			{
1344:FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1417              		.loc 1 1344 0
 1418 002c F868     		ldr	r0, [r7, #12]	@, pxTCB
 1419 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1420 0032 0346     		mov	r3, r0	@ D.6509,
 1421 0034 012B     		cmp	r3, #1	@ D.6509,
 1422 0036 26D1     		bne	.L105	@,
1345:FreeRTOS/tasks.c **** 				{
1346:FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1347:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 50


1348:FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1349:FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1350:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1423              		.loc 1 1350 0
 1424 0038 FB68     		ldr	r3, [r7, #12]	@ tmp129, pxTCB
 1425 003a 0433     		adds	r3, r3, #4	@ D.6510, tmp129,
 1426 003c 1846     		mov	r0, r3	@, D.6510
 1427 003e FFF7FEFF 		bl	uxListRemove	@
1351:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1428              		.loc 1 1351 0
 1429 0042 FB68     		ldr	r3, [r7, #12]	@ tmp130, pxTCB
 1430 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6511, pxTCB_2->uxPriority
 1431 0046 1A46     		mov	r2, r3	@ D.6512, D.6511
 1432 0048 0123     		movs	r3, #1	@ tmp131,
 1433 004a 03FA02F2 		lsl	r2, r3, r2	@ D.6511, tmp131, D.6512
 1434 004e 114B     		ldr	r3, .L106+4	@ tmp132,
 1435 0050 1B68     		ldr	r3, [r3]	@ D.6511, uxTopReadyPriority
 1436 0052 1343     		orrs	r3, r3, r2	@, D.6511, D.6511, D.6511
 1437 0054 0F4A     		ldr	r2, .L106+4	@ tmp133,
 1438 0056 1360     		str	r3, [r2]	@ D.6511, uxTopReadyPriority
 1439 0058 FB68     		ldr	r3, [r7, #12]	@ tmp134, pxTCB
 1440 005a DA6A     		ldr	r2, [r3, #44]	@ D.6511, pxTCB_2->uxPriority
 1441 005c 1346     		mov	r3, r2	@ tmp135, D.6511
 1442 005e 9B00     		lsls	r3, r3, #2	@ tmp135, tmp135,
 1443 0060 1344     		add	r3, r3, r2	@ tmp135, D.6511
 1444 0062 9B00     		lsls	r3, r3, #2	@ tmp136, tmp135,
 1445 0064 0C4A     		ldr	r2, .L106+8	@ tmp137,
 1446 0066 1A44     		add	r2, r2, r3	@ D.6513, tmp135
 1447 0068 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 1448 006a 0433     		adds	r3, r3, #4	@ D.6510, tmp138,
 1449 006c 1046     		mov	r0, r2	@, D.6513
 1450 006e 1946     		mov	r1, r3	@, D.6510
 1451 0070 FFF7FEFF 		bl	vListInsertEnd	@
1352:FreeRTOS/tasks.c **** 
1353:FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1354:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1452              		.loc 1 1354 0
 1453 0074 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 1454 0076 DA6A     		ldr	r2, [r3, #44]	@ D.6511, pxTCB_2->uxPriority
 1455 0078 054B     		ldr	r3, .L106	@ tmp140,
 1456 007a 1B68     		ldr	r3, [r3]	@ D.6508, pxCurrentTCB
 1457 007c DB6A     		ldr	r3, [r3, #44]	@ D.6511, _15->uxPriority
 1458 007e 9A42     		cmp	r2, r3	@ D.6511, D.6511
 1459 0080 01D3     		bcc	.L105	@,
1355:FreeRTOS/tasks.c **** 					{
1356:FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1357:FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1358:FreeRTOS/tasks.c **** 						next yield. */
1359:FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1460              		.loc 1 1359 0
 1461 0082 FFF7FEFF 		bl	vPortYield	@
 1462              	.L105:
1360:FreeRTOS/tasks.c **** 					}
1361:FreeRTOS/tasks.c **** 					else
1362:FreeRTOS/tasks.c **** 					{
1363:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1364:FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 51


1365:FreeRTOS/tasks.c **** 				}
1366:FreeRTOS/tasks.c **** 				else
1367:FreeRTOS/tasks.c **** 				{
1368:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1369:FreeRTOS/tasks.c **** 				}
1370:FreeRTOS/tasks.c **** 			}
1371:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1463              		.loc 1 1371 0
 1464 0086 FFF7FEFF 		bl	vPortExitCritical	@
 1465              	.L101:
1372:FreeRTOS/tasks.c **** 		}
1373:FreeRTOS/tasks.c **** 		else
1374:FreeRTOS/tasks.c **** 		{
1375:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1376:FreeRTOS/tasks.c **** 		}
1377:FreeRTOS/tasks.c **** 	}
 1466              		.loc 1 1377 0
 1467 008a 1037     		adds	r7, r7, #16	@,,
 1468              		.cfi_def_cfa_offset 8
 1469 008c BD46     		mov	sp, r7	@,
 1470              		.cfi_def_cfa_register 13
 1471              		@ sp needed	@
 1472 008e 80BD     		pop	{r7, pc}	@
 1473              	.L107:
 1474              		.align	2
 1475              	.L106:
 1476 0090 00000000 		.word	pxCurrentTCB
 1477 0094 00000000 		.word	uxTopReadyPriority
 1478 0098 00000000 		.word	pxReadyTasksLists
 1479              		.cfi_endproc
 1480              	.LFE9:
 1481              		.size	vTaskResume, .-vTaskResume
 1482              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1483              		.align	2
 1484              		.global	xTaskResumeFromISR
 1485              		.thumb
 1486              		.thumb_func
 1487              		.type	xTaskResumeFromISR, %function
 1488              	xTaskResumeFromISR:
 1489              	.LFB10:
1378:FreeRTOS/tasks.c **** 
1379:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1380:FreeRTOS/tasks.c **** 
1381:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1382:FreeRTOS/tasks.c **** 
1383:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1384:FreeRTOS/tasks.c **** 
1385:FreeRTOS/tasks.c **** 	BaseT_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1386:FreeRTOS/tasks.c **** 	{
 1490              		.loc 1 1386 0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 24
 1493              		@ frame_needed = 1, uses_anonymous_args = 0
 1494 0000 80B5     		push	{r7, lr}	@
 1495              		.cfi_def_cfa_offset 8
 1496              		.cfi_offset 7, -8
 1497              		.cfi_offset 14, -4
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 52


 1498 0002 86B0     		sub	sp, sp, #24	@,,
 1499              		.cfi_def_cfa_offset 32
 1500 0004 00AF     		add	r7, sp, #0	@,,
 1501              		.cfi_def_cfa_register 7
 1502 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
1387:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 1503              		.loc 1 1387 0
 1504 0008 0023     		movs	r3, #0	@ tmp127,
 1505 000a 7B61     		str	r3, [r7, #20]	@ tmp127, xYieldRequired
1388:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1506              		.loc 1 1388 0
 1507 000c 7B68     		ldr	r3, [r7, #4]	@ tmp128, xTaskToResume
 1508 000e 3B61     		str	r3, [r7, #16]	@ tmp128, pxTCB
1389:FreeRTOS/tasks.c **** 	UBaseT_t uxSavedInterruptStatus;
1390:FreeRTOS/tasks.c **** 
1391:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1509              		.loc 1 1391 0
 1510 0010 7B68     		ldr	r3, [r7, #4]	@ tmp129, xTaskToResume
 1511 0012 002B     		cmp	r3, #0	@ tmp129,
 1512 0014 02D1     		bne	.L109	@,
 1513              		.loc 1 1391 0 is_stmt 0 discriminator 1
 1514 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1515              	.L110:
 1516 001a FEE7     		b	.L110	@
 1517              	.L109:
1392:FreeRTOS/tasks.c **** 
1393:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1394:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1395:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1396:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1397:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1398:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1399:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1400:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1401:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1402:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1403:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1404:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1405:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1406:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1407:FreeRTOS/tasks.c **** 		provided on the following link:
1408:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1409:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1518              		.loc 1 1409 0 is_stmt 1
 1519 001c FFF7FEFF 		bl	vPortValidateInterruptPriority	@
1410:FreeRTOS/tasks.c **** 
1411:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1520              		.loc 1 1411 0
 1521 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1522 0024 F860     		str	r0, [r7, #12]	@, uxSavedInterruptStatus
1412:FreeRTOS/tasks.c **** 		{
1413:FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1523              		.loc 1 1413 0
 1524 0026 3869     		ldr	r0, [r7, #16]	@, pxTCB
 1525 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1526 002c 0346     		mov	r3, r0	@ D.6514,
 1527 002e 012B     		cmp	r3, #1	@ D.6514,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 53


 1528 0030 31D1     		bne	.L111	@,
1414:FreeRTOS/tasks.c **** 			{
1415:FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1416:FreeRTOS/tasks.c **** 
1417:FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1418:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1529              		.loc 1 1418 0
 1530 0032 1D4B     		ldr	r3, .L116	@ tmp130,
 1531 0034 1B68     		ldr	r3, [r3]	@ D.6515, uxSchedulerSuspended
 1532 0036 002B     		cmp	r3, #0	@ D.6515,
 1533 0038 27D1     		bne	.L112	@,
1419:FreeRTOS/tasks.c **** 				{
1420:FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1421:FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1422:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1534              		.loc 1 1422 0
 1535 003a 3B69     		ldr	r3, [r7, #16]	@ tmp131, pxTCB
 1536 003c DA6A     		ldr	r2, [r3, #44]	@ D.6515, pxTCB_6->uxPriority
 1537 003e 1B4B     		ldr	r3, .L116+4	@ tmp132,
 1538 0040 1B68     		ldr	r3, [r3]	@ D.6516, pxCurrentTCB
 1539 0042 DB6A     		ldr	r3, [r3, #44]	@ D.6515, _11->uxPriority
 1540 0044 9A42     		cmp	r2, r3	@ D.6515, D.6515
 1541 0046 01D3     		bcc	.L113	@,
1423:FreeRTOS/tasks.c **** 					{
1424:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 1542              		.loc 1 1424 0
 1543 0048 0123     		movs	r3, #1	@ tmp133,
 1544 004a 7B61     		str	r3, [r7, #20]	@ tmp133, xYieldRequired
 1545              	.L113:
1425:FreeRTOS/tasks.c **** 					}
1426:FreeRTOS/tasks.c **** 					else
1427:FreeRTOS/tasks.c **** 					{
1428:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1429:FreeRTOS/tasks.c **** 					}
1430:FreeRTOS/tasks.c **** 
1431:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1546              		.loc 1 1431 0
 1547 004c 3B69     		ldr	r3, [r7, #16]	@ tmp134, pxTCB
 1548 004e 0433     		adds	r3, r3, #4	@ D.6517, tmp134,
 1549 0050 1846     		mov	r0, r3	@, D.6517
 1550 0052 FFF7FEFF 		bl	uxListRemove	@
1432:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1551              		.loc 1 1432 0
 1552 0056 3B69     		ldr	r3, [r7, #16]	@ tmp135, pxTCB
 1553 0058 DB6A     		ldr	r3, [r3, #44]	@ D.6515, pxTCB_6->uxPriority
 1554 005a 1A46     		mov	r2, r3	@ D.6518, D.6515
 1555 005c 0123     		movs	r3, #1	@ tmp136,
 1556 005e 03FA02F2 		lsl	r2, r3, r2	@ D.6515, tmp136, D.6518
 1557 0062 134B     		ldr	r3, .L116+8	@ tmp137,
 1558 0064 1B68     		ldr	r3, [r3]	@ D.6515, uxTopReadyPriority
 1559 0066 1343     		orrs	r3, r3, r2	@, D.6515, D.6515, D.6515
 1560 0068 114A     		ldr	r2, .L116+8	@ tmp138,
 1561 006a 1360     		str	r3, [r2]	@ D.6515, uxTopReadyPriority
 1562 006c 3B69     		ldr	r3, [r7, #16]	@ tmp139, pxTCB
 1563 006e DA6A     		ldr	r2, [r3, #44]	@ D.6515, pxTCB_6->uxPriority
 1564 0070 1346     		mov	r3, r2	@ tmp140, D.6515
 1565 0072 9B00     		lsls	r3, r3, #2	@ tmp140, tmp140,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 54


 1566 0074 1344     		add	r3, r3, r2	@ tmp140, D.6515
 1567 0076 9B00     		lsls	r3, r3, #2	@ tmp141, tmp140,
 1568 0078 0E4A     		ldr	r2, .L116+12	@ tmp142,
 1569 007a 1A44     		add	r2, r2, r3	@ D.6519, tmp140
 1570 007c 3B69     		ldr	r3, [r7, #16]	@ tmp143, pxTCB
 1571 007e 0433     		adds	r3, r3, #4	@ D.6517, tmp143,
 1572 0080 1046     		mov	r0, r2	@, D.6519
 1573 0082 1946     		mov	r1, r3	@, D.6517
 1574 0084 FFF7FEFF 		bl	vListInsertEnd	@
 1575 0088 05E0     		b	.L111	@
 1576              	.L112:
1433:FreeRTOS/tasks.c **** 				}
1434:FreeRTOS/tasks.c **** 				else
1435:FreeRTOS/tasks.c **** 				{
1436:FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1437:FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1438:FreeRTOS/tasks.c **** 					unsuspended. */
1439:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1577              		.loc 1 1439 0
 1578 008a 3B69     		ldr	r3, [r7, #16]	@ tmp144, pxTCB
 1579 008c 1833     		adds	r3, r3, #24	@ D.6517, tmp144,
 1580 008e 0A48     		ldr	r0, .L116+16	@,
 1581 0090 1946     		mov	r1, r3	@, D.6517
 1582 0092 FFF7FEFF 		bl	vListInsertEnd	@
 1583              	.L111:
1440:FreeRTOS/tasks.c **** 				}
1441:FreeRTOS/tasks.c **** 			}
1442:FreeRTOS/tasks.c **** 			else
1443:FreeRTOS/tasks.c **** 			{
1444:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1445:FreeRTOS/tasks.c **** 			}
1446:FreeRTOS/tasks.c **** 		}
1447:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1584              		.loc 1 1447 0
 1585 0096 F868     		ldr	r0, [r7, #12]	@, uxSavedInterruptStatus
 1586 0098 FFF7FEFF 		bl	vPortClearInterruptMask	@
1448:FreeRTOS/tasks.c **** 
1449:FreeRTOS/tasks.c **** 		return xYieldRequired;
 1587              		.loc 1 1449 0
 1588 009c 7B69     		ldr	r3, [r7, #20]	@ D.6520, xYieldRequired
1450:FreeRTOS/tasks.c **** 	}
 1589              		.loc 1 1450 0
 1590 009e 1846     		mov	r0, r3	@, <retval>
 1591 00a0 1837     		adds	r7, r7, #24	@,,
 1592              		.cfi_def_cfa_offset 8
 1593 00a2 BD46     		mov	sp, r7	@,
 1594              		.cfi_def_cfa_register 13
 1595              		@ sp needed	@
 1596 00a4 80BD     		pop	{r7, pc}	@
 1597              	.L117:
 1598 00a6 00BF     		.align	2
 1599              	.L116:
 1600 00a8 00000000 		.word	uxSchedulerSuspended
 1601 00ac 00000000 		.word	pxCurrentTCB
 1602 00b0 00000000 		.word	uxTopReadyPriority
 1603 00b4 00000000 		.word	pxReadyTasksLists
 1604 00b8 00000000 		.word	xPendingReadyList
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 55


 1605              		.cfi_endproc
 1606              	.LFE10:
 1607              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1608              		.section	.rodata
 1609              		.align	2
 1610              	.LC0:
 1611 0000 49444C45 		.ascii	"IDLE\000"
 1611      00
 1612 0005 000000   		.section	.text.vTaskStartScheduler,"ax",%progbits
 1613              		.align	2
 1614              		.global	vTaskStartScheduler
 1615              		.thumb
 1616              		.thumb_func
 1617              		.type	vTaskStartScheduler, %function
 1618              	vTaskStartScheduler:
 1619              	.LFB11:
1451:FreeRTOS/tasks.c **** 
1452:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1453:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1454:FreeRTOS/tasks.c **** 
1455:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1456:FreeRTOS/tasks.c **** {
 1620              		.loc 1 1456 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 8
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624 0000 80B5     		push	{r7, lr}	@
 1625              		.cfi_def_cfa_offset 8
 1626              		.cfi_offset 7, -8
 1627              		.cfi_offset 14, -4
 1628 0002 86B0     		sub	sp, sp, #24	@,,
 1629              		.cfi_def_cfa_offset 32
 1630 0004 04AF     		add	r7, sp, #16	@,,
 1631              		.cfi_def_cfa 7, 16
1457:FreeRTOS/tasks.c **** BaseT_t xReturn;
1458:FreeRTOS/tasks.c **** 
1459:FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1460:FreeRTOS/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1461:FreeRTOS/tasks.c **** 	{
1462:FreeRTOS/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1463:FreeRTOS/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1464:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1465:FreeRTOS/tasks.c **** 	}
1466:FreeRTOS/tasks.c **** 	#else
1467:FreeRTOS/tasks.c **** 	{
1468:FreeRTOS/tasks.c **** 		/* Create the idle task without storing its handle. */
1469:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
 1632              		.loc 1 1469 0
 1633 0006 0023     		movs	r3, #0	@ tmp111,
 1634 0008 0093     		str	r3, [sp]	@ tmp111,
 1635 000a 0023     		movs	r3, #0	@ tmp112,
 1636 000c 0193     		str	r3, [sp, #4]	@ tmp112,
 1637 000e 0023     		movs	r3, #0	@ tmp113,
 1638 0010 0293     		str	r3, [sp, #8]	@ tmp113,
 1639 0012 0023     		movs	r3, #0	@ tmp114,
 1640 0014 0393     		str	r3, [sp, #12]	@ tmp114,
 1641 0016 0F48     		ldr	r0, .L122	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 56


 1642 0018 0F49     		ldr	r1, .L122+4	@,
 1643 001a 4FF48072 		mov	r2, #256	@,
 1644 001e 0023     		movs	r3, #0	@,
 1645 0020 FFF7FEFF 		bl	xTaskGenericCreate	@
 1646 0024 7860     		str	r0, [r7, #4]	@, xReturn
1470:FreeRTOS/tasks.c **** 	}
1471:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1472:FreeRTOS/tasks.c **** 
1473:FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1474:FreeRTOS/tasks.c **** 	{
1475:FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1476:FreeRTOS/tasks.c **** 		{
1477:FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1478:FreeRTOS/tasks.c **** 		}
1479:FreeRTOS/tasks.c **** 		else
1480:FreeRTOS/tasks.c **** 		{
1481:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:FreeRTOS/tasks.c **** 		}
1483:FreeRTOS/tasks.c **** 	}
1484:FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1485:FreeRTOS/tasks.c **** 
1486:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 1647              		.loc 1 1486 0
 1648 0026 7B68     		ldr	r3, [r7, #4]	@ tmp115, xReturn
 1649 0028 012B     		cmp	r3, #1	@ tmp115,
 1650 002a 0AD1     		bne	.L119	@,
1487:FreeRTOS/tasks.c **** 	{
1488:FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1489:FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1490:FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1491:FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1492:FreeRTOS/tasks.c **** 		starts to run. */
1493:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
 1651              		.loc 1 1493 0
 1652 002c FFF7FEFF 		bl	ulPortSetInterruptMask	@
1494:FreeRTOS/tasks.c **** 
1495:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1496:FreeRTOS/tasks.c **** 		{
1497:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1498:FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1499:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1500:FreeRTOS/tasks.c **** 		}
1501:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1502:FreeRTOS/tasks.c **** 
1503:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1653              		.loc 1 1503 0
 1654 0030 0A4B     		ldr	r3, .L122+8	@ tmp116,
 1655 0032 0122     		movs	r2, #1	@ tmp117,
 1656 0034 1A60     		str	r2, [r3]	@ tmp117, xSchedulerRunning
1504:FreeRTOS/tasks.c **** 		xTickCount = ( TickT_t ) 0U;
 1657              		.loc 1 1504 0
 1658 0036 0A4B     		ldr	r3, .L122+12	@ tmp118,
 1659 0038 0022     		movs	r2, #0	@ tmp119,
 1660 003a 1A60     		str	r2, [r3]	@ tmp119, xTickCount
1505:FreeRTOS/tasks.c **** 
1506:FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1507:FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 57


1508:FreeRTOS/tasks.c **** 		the run time counter time base. */
1509:FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1510:FreeRTOS/tasks.c **** 
1511:FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1512:FreeRTOS/tasks.c **** 		portable interface. */
1513:FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1661              		.loc 1 1513 0
 1662 003c FFF7FEFF 		bl	xPortStartScheduler	@
 1663 0040 05E0     		b	.L118	@
 1664              	.L119:
1514:FreeRTOS/tasks.c **** 		{
1515:FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1516:FreeRTOS/tasks.c **** 			function will not return. */
1517:FreeRTOS/tasks.c **** 		}
1518:FreeRTOS/tasks.c **** 		else
1519:FreeRTOS/tasks.c **** 		{
1520:FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1521:FreeRTOS/tasks.c **** 		}
1522:FreeRTOS/tasks.c **** 	}
1523:FreeRTOS/tasks.c **** 	else
1524:FreeRTOS/tasks.c **** 	{
1525:FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1526:FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1527:FreeRTOS/tasks.c **** 		or the timer task. */
1528:FreeRTOS/tasks.c **** 		configASSERT( xReturn );
 1665              		.loc 1 1528 0
 1666 0042 7B68     		ldr	r3, [r7, #4]	@ tmp120, xReturn
 1667 0044 002B     		cmp	r3, #0	@ tmp120,
 1668 0046 02D1     		bne	.L118	@,
 1669              		.loc 1 1528 0 is_stmt 0 discriminator 1
 1670 0048 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1671              	.L121:
 1672              		.loc 1 1528 0 discriminator 2
 1673 004c FEE7     		b	.L121	@
 1674              	.L118:
1529:FreeRTOS/tasks.c **** 	}
1530:FreeRTOS/tasks.c **** }
 1675              		.loc 1 1530 0 is_stmt 1
 1676 004e 0837     		adds	r7, r7, #8	@,,
 1677              		.cfi_def_cfa_offset 8
 1678 0050 BD46     		mov	sp, r7	@,
 1679              		.cfi_def_cfa_register 13
 1680              		@ sp needed	@
 1681 0052 80BD     		pop	{r7, pc}	@
 1682              	.L123:
 1683              		.align	2
 1684              	.L122:
 1685 0054 00000000 		.word	prvIdleTask
 1686 0058 00000000 		.word	.LC0
 1687 005c 00000000 		.word	xSchedulerRunning
 1688 0060 00000000 		.word	xTickCount
 1689              		.cfi_endproc
 1690              	.LFE11:
 1691              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1692              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1693              		.align	2
 1694              		.global	vTaskEndScheduler
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 58


 1695              		.thumb
 1696              		.thumb_func
 1697              		.type	vTaskEndScheduler, %function
 1698              	vTaskEndScheduler:
 1699              	.LFB12:
1531:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1532:FreeRTOS/tasks.c **** 
1533:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1534:FreeRTOS/tasks.c **** {
 1700              		.loc 1 1534 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704 0000 80B5     		push	{r7, lr}	@
 1705              		.cfi_def_cfa_offset 8
 1706              		.cfi_offset 7, -8
 1707              		.cfi_offset 14, -4
 1708 0002 00AF     		add	r7, sp, #0	@,,
 1709              		.cfi_def_cfa_register 7
1535:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1536:FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1537:FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1538:FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
 1710              		.loc 1 1538 0
 1711 0004 FFF7FEFF 		bl	ulPortSetInterruptMask	@
1539:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1712              		.loc 1 1539 0
 1713 0008 024B     		ldr	r3, .L125	@ tmp110,
 1714 000a 0022     		movs	r2, #0	@ tmp111,
 1715 000c 1A60     		str	r2, [r3]	@ tmp111, xSchedulerRunning
1540:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1716              		.loc 1 1540 0
 1717 000e FFF7FEFF 		bl	vPortEndScheduler	@
1541:FreeRTOS/tasks.c **** }
 1718              		.loc 1 1541 0
 1719 0012 80BD     		pop	{r7, pc}	@
 1720              	.L126:
 1721              		.align	2
 1722              	.L125:
 1723 0014 00000000 		.word	xSchedulerRunning
 1724              		.cfi_endproc
 1725              	.LFE12:
 1726              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1727              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1728              		.align	2
 1729              		.global	vTaskSuspendAll
 1730              		.thumb
 1731              		.thumb_func
 1732              		.type	vTaskSuspendAll, %function
 1733              	vTaskSuspendAll:
 1734              	.LFB13:
1542:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1543:FreeRTOS/tasks.c **** 
1544:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1545:FreeRTOS/tasks.c **** {
 1735              		.loc 1 1545 0
 1736              		.cfi_startproc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 59


 1737              		@ args = 0, pretend = 0, frame = 0
 1738              		@ frame_needed = 1, uses_anonymous_args = 0
 1739              		@ link register save eliminated.
 1740 0000 80B4     		push	{r7}	@
 1741              		.cfi_def_cfa_offset 4
 1742              		.cfi_offset 7, -4
 1743 0002 00AF     		add	r7, sp, #0	@,,
 1744              		.cfi_def_cfa_register 7
1546:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1547:FreeRTOS/tasks.c **** 	BaseT_t.  Please read Richard Barry's reply in the following link to a
1548:FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1549:FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1550:FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
 1745              		.loc 1 1550 0
 1746 0004 044B     		ldr	r3, .L128	@ tmp112,
 1747 0006 1B68     		ldr	r3, [r3]	@ D.6523, uxSchedulerSuspended
 1748 0008 0133     		adds	r3, r3, #1	@ D.6523, D.6523,
 1749 000a 034A     		ldr	r2, .L128	@ tmp113,
 1750 000c 1360     		str	r3, [r2]	@ D.6523, uxSchedulerSuspended
1551:FreeRTOS/tasks.c **** }
 1751              		.loc 1 1551 0
 1752 000e BD46     		mov	sp, r7	@,
 1753              		.cfi_def_cfa_register 13
 1754              		@ sp needed	@
 1755 0010 5DF8047B 		ldr	r7, [sp], #4	@,
 1756              		.cfi_restore 7
 1757              		.cfi_def_cfa_offset 0
 1758 0014 7047     		bx	lr	@
 1759              	.L129:
 1760 0016 00BF     		.align	2
 1761              	.L128:
 1762 0018 00000000 		.word	uxSchedulerSuspended
 1763              		.cfi_endproc
 1764              	.LFE13:
 1765              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1766              		.section	.text.xTaskResumeAll,"ax",%progbits
 1767              		.align	2
 1768              		.global	xTaskResumeAll
 1769              		.thumb
 1770              		.thumb_func
 1771              		.type	xTaskResumeAll, %function
 1772              	xTaskResumeAll:
 1773              	.LFB14:
1552:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1553:FreeRTOS/tasks.c **** 
1554:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1555:FreeRTOS/tasks.c **** 
1556:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void )
1557:FreeRTOS/tasks.c **** 	{
1558:FreeRTOS/tasks.c **** 	TickT_t xReturn;
1559:FreeRTOS/tasks.c **** 
1560:FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1561:FreeRTOS/tasks.c **** 		{
1562:FreeRTOS/tasks.c **** 			xReturn = 0;
1563:FreeRTOS/tasks.c **** 		}
1564:FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1565:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 60


1566:FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1567:FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1568:FreeRTOS/tasks.c **** 			processed. */
1569:FreeRTOS/tasks.c **** 			xReturn = 0;
1570:FreeRTOS/tasks.c **** 		}
1571:FreeRTOS/tasks.c **** 		else
1572:FreeRTOS/tasks.c **** 		{
1573:FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1574:FreeRTOS/tasks.c **** 		}
1575:FreeRTOS/tasks.c **** 
1576:FreeRTOS/tasks.c **** 		return xReturn;
1577:FreeRTOS/tasks.c **** 	}
1578:FreeRTOS/tasks.c **** 
1579:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1580:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1581:FreeRTOS/tasks.c **** 
1582:FreeRTOS/tasks.c **** BaseT_t xTaskResumeAll( void )
1583:FreeRTOS/tasks.c **** {
 1774              		.loc 1 1583 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 8
 1777              		@ frame_needed = 1, uses_anonymous_args = 0
 1778 0000 80B5     		push	{r7, lr}	@
 1779              		.cfi_def_cfa_offset 8
 1780              		.cfi_offset 7, -8
 1781              		.cfi_offset 14, -4
 1782 0002 82B0     		sub	sp, sp, #8	@,,
 1783              		.cfi_def_cfa_offset 16
 1784 0004 00AF     		add	r7, sp, #0	@,,
 1785              		.cfi_def_cfa_register 7
1584:FreeRTOS/tasks.c **** TCB_t *pxTCB;
1585:FreeRTOS/tasks.c **** BaseT_t xAlreadyYielded = pdFALSE;
 1786              		.loc 1 1585 0
 1787 0006 0023     		movs	r3, #0	@ tmp138,
 1788 0008 7B60     		str	r3, [r7, #4]	@ tmp138, xAlreadyYielded
1586:FreeRTOS/tasks.c **** 
1587:FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1588:FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
1589:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1789              		.loc 1 1589 0
 1790 000a 384B     		ldr	r3, .L141	@ tmp139,
 1791 000c 1B68     		ldr	r3, [r3]	@ D.6524, uxSchedulerSuspended
 1792 000e 002B     		cmp	r3, #0	@ D.6524,
 1793 0010 02D1     		bne	.L131	@,
 1794              		.loc 1 1589 0 is_stmt 0 discriminator 1
 1795 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1796              	.L132:
 1797 0016 FEE7     		b	.L132	@
 1798              	.L131:
1590:FreeRTOS/tasks.c **** 
1591:FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1592:FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1593:FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1594:FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1595:FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1596:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1799              		.loc 1 1596 0 is_stmt 1
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 61


 1800 0018 FFF7FEFF 		bl	vPortEnterCritical	@
1597:FreeRTOS/tasks.c **** 	{
1598:FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
 1801              		.loc 1 1598 0
 1802 001c 334B     		ldr	r3, .L141	@ tmp140,
 1803 001e 1B68     		ldr	r3, [r3]	@ D.6524, uxSchedulerSuspended
 1804 0020 013B     		subs	r3, r3, #1	@ D.6524, D.6524,
 1805 0022 324A     		ldr	r2, .L141	@ tmp141,
 1806 0024 1360     		str	r3, [r2]	@ D.6524, uxSchedulerSuspended
1599:FreeRTOS/tasks.c **** 
1600:FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1807              		.loc 1 1600 0
 1808 0026 314B     		ldr	r3, .L141	@ tmp142,
 1809 0028 1B68     		ldr	r3, [r3]	@ D.6524, uxSchedulerSuspended
 1810 002a 002B     		cmp	r3, #0	@ D.6524,
 1811 002c 57D1     		bne	.L133	@,
1601:FreeRTOS/tasks.c **** 		{
1602:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseT_t ) 0U )
 1812              		.loc 1 1602 0
 1813 002e 304B     		ldr	r3, .L141+4	@ tmp143,
 1814 0030 1B68     		ldr	r3, [r3]	@ D.6524, uxCurrentNumberOfTasks
 1815 0032 002B     		cmp	r3, #0	@ D.6524,
 1816 0034 53D0     		beq	.L133	@,
1603:FreeRTOS/tasks.c **** 			{
1604:FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1605:FreeRTOS/tasks.c **** 				appropriate ready list. */
1606:FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 1817              		.loc 1 1606 0
 1818 0036 30E0     		b	.L134	@
 1819              	.L135:
1607:FreeRTOS/tasks.c **** 				{
1608:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 1820              		.loc 1 1608 0
 1821 0038 2E4B     		ldr	r3, .L141+8	@ tmp144,
 1822 003a DB68     		ldr	r3, [r3, #12]	@ D.6525, xPendingReadyList.xListEnd.pxNext
 1823 003c DB68     		ldr	r3, [r3, #12]	@ tmp145, _9->pvOwner
 1824 003e 3B60     		str	r3, [r7]	@ tmp145, pxTCB
1609:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1825              		.loc 1 1609 0
 1826 0040 3B68     		ldr	r3, [r7]	@ tmp146, pxTCB
 1827 0042 1833     		adds	r3, r3, #24	@ D.6526, tmp146,
 1828 0044 1846     		mov	r0, r3	@, D.6526
 1829 0046 FFF7FEFF 		bl	uxListRemove	@
1610:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1830              		.loc 1 1610 0
 1831 004a 3B68     		ldr	r3, [r7]	@ tmp147, pxTCB
 1832 004c 0433     		adds	r3, r3, #4	@ D.6526, tmp147,
 1833 004e 1846     		mov	r0, r3	@, D.6526
 1834 0050 FFF7FEFF 		bl	uxListRemove	@
1611:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1835              		.loc 1 1611 0
 1836 0054 3B68     		ldr	r3, [r7]	@ tmp148, pxTCB
 1837 0056 DB6A     		ldr	r3, [r3, #44]	@ D.6524, pxTCB_10->uxPriority
 1838 0058 1A46     		mov	r2, r3	@ D.6527, D.6524
 1839 005a 0123     		movs	r3, #1	@ tmp149,
 1840 005c 03FA02F2 		lsl	r2, r3, r2	@ D.6524, tmp149, D.6527
 1841 0060 254B     		ldr	r3, .L141+12	@ tmp150,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 62


 1842 0062 1B68     		ldr	r3, [r3]	@ D.6524, uxTopReadyPriority
 1843 0064 1343     		orrs	r3, r3, r2	@, D.6524, D.6524, D.6524
 1844 0066 244A     		ldr	r2, .L141+12	@ tmp151,
 1845 0068 1360     		str	r3, [r2]	@ D.6524, uxTopReadyPriority
 1846 006a 3B68     		ldr	r3, [r7]	@ tmp152, pxTCB
 1847 006c DA6A     		ldr	r2, [r3, #44]	@ D.6524, pxTCB_10->uxPriority
 1848 006e 1346     		mov	r3, r2	@ tmp153, D.6524
 1849 0070 9B00     		lsls	r3, r3, #2	@ tmp153, tmp153,
 1850 0072 1344     		add	r3, r3, r2	@ tmp153, D.6524
 1851 0074 9B00     		lsls	r3, r3, #2	@ tmp154, tmp153,
 1852 0076 214A     		ldr	r2, .L141+16	@ tmp155,
 1853 0078 1A44     		add	r2, r2, r3	@ D.6528, tmp153
 1854 007a 3B68     		ldr	r3, [r7]	@ tmp156, pxTCB
 1855 007c 0433     		adds	r3, r3, #4	@ D.6526, tmp156,
 1856 007e 1046     		mov	r0, r2	@, D.6528
 1857 0080 1946     		mov	r1, r3	@, D.6526
 1858 0082 FFF7FEFF 		bl	vListInsertEnd	@
1612:FreeRTOS/tasks.c **** 
1613:FreeRTOS/tasks.c **** 					/* If we have moved a task that has a priority higher than
1614:FreeRTOS/tasks.c **** 					the current task then we should yield. */
1615:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1859              		.loc 1 1615 0
 1860 0086 3B68     		ldr	r3, [r7]	@ tmp157, pxTCB
 1861 0088 DA6A     		ldr	r2, [r3, #44]	@ D.6524, pxTCB_10->uxPriority
 1862 008a 1D4B     		ldr	r3, .L141+20	@ tmp158,
 1863 008c 1B68     		ldr	r3, [r3]	@ D.6529, pxCurrentTCB
 1864 008e DB6A     		ldr	r3, [r3, #44]	@ D.6524, _22->uxPriority
 1865 0090 9A42     		cmp	r2, r3	@ D.6524, D.6524
 1866 0092 02D3     		bcc	.L134	@,
1616:FreeRTOS/tasks.c **** 					{
1617:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
 1867              		.loc 1 1617 0
 1868 0094 1B4B     		ldr	r3, .L141+24	@ tmp159,
 1869 0096 0122     		movs	r2, #1	@ tmp160,
 1870 0098 1A60     		str	r2, [r3]	@ tmp160, xYieldPending
 1871              	.L134:
1606:FreeRTOS/tasks.c **** 				{
 1872              		.loc 1 1606 0
 1873 009a 164B     		ldr	r3, .L141+8	@ tmp161,
 1874 009c 1B68     		ldr	r3, [r3]	@ D.6524, xPendingReadyList.uxNumberOfItems
 1875 009e 002B     		cmp	r3, #0	@ D.6524,
 1876 00a0 CAD1     		bne	.L135	@,
1618:FreeRTOS/tasks.c **** 					}
1619:FreeRTOS/tasks.c **** 					else
1620:FreeRTOS/tasks.c **** 					{
1621:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1622:FreeRTOS/tasks.c **** 					}
1623:FreeRTOS/tasks.c **** 				}
1624:FreeRTOS/tasks.c **** 
1625:FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1626:FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
1627:FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1628:FreeRTOS/tasks.c **** 				time. */
1629:FreeRTOS/tasks.c **** 				if( uxPendedTicks > ( UBaseT_t ) 0U )
 1877              		.loc 1 1629 0
 1878 00a2 194B     		ldr	r3, .L141+28	@ tmp162,
 1879 00a4 1B68     		ldr	r3, [r3]	@ D.6524, uxPendedTicks
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 63


 1880 00a6 002B     		cmp	r3, #0	@ D.6524,
 1881 00a8 11D0     		beq	.L136	@,
1630:FreeRTOS/tasks.c **** 				{
1631:FreeRTOS/tasks.c **** 					while( uxPendedTicks > ( UBaseT_t ) 0U )
 1882              		.loc 1 1631 0
 1883 00aa 0CE0     		b	.L137	@
 1884              	.L139:
1632:FreeRTOS/tasks.c **** 					{
1633:FreeRTOS/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 1885              		.loc 1 1633 0
 1886 00ac FFF7FEFF 		bl	xTaskIncrementTick	@
 1887 00b0 0346     		mov	r3, r0	@ D.6530,
 1888 00b2 002B     		cmp	r3, #0	@ D.6530,
 1889 00b4 02D0     		beq	.L138	@,
1634:FreeRTOS/tasks.c **** 						{
1635:FreeRTOS/tasks.c **** 							xYieldPending = pdTRUE;
 1890              		.loc 1 1635 0
 1891 00b6 134B     		ldr	r3, .L141+24	@ tmp163,
 1892 00b8 0122     		movs	r2, #1	@ tmp164,
 1893 00ba 1A60     		str	r2, [r3]	@ tmp164, xYieldPending
 1894              	.L138:
1636:FreeRTOS/tasks.c **** 						}
1637:FreeRTOS/tasks.c **** 						else
1638:FreeRTOS/tasks.c **** 						{
1639:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1640:FreeRTOS/tasks.c **** 						}
1641:FreeRTOS/tasks.c **** 						--uxPendedTicks;
 1895              		.loc 1 1641 0
 1896 00bc 124B     		ldr	r3, .L141+28	@ tmp165,
 1897 00be 1B68     		ldr	r3, [r3]	@ D.6524, uxPendedTicks
 1898 00c0 013B     		subs	r3, r3, #1	@ D.6524, D.6524,
 1899 00c2 114A     		ldr	r2, .L141+28	@ tmp166,
 1900 00c4 1360     		str	r3, [r2]	@ D.6524, uxPendedTicks
 1901              	.L137:
1631:FreeRTOS/tasks.c **** 					{
 1902              		.loc 1 1631 0
 1903 00c6 104B     		ldr	r3, .L141+28	@ tmp167,
 1904 00c8 1B68     		ldr	r3, [r3]	@ D.6524, uxPendedTicks
 1905 00ca 002B     		cmp	r3, #0	@ D.6524,
 1906 00cc EED1     		bne	.L139	@,
 1907              	.L136:
1642:FreeRTOS/tasks.c **** 					}
1643:FreeRTOS/tasks.c **** 				}
1644:FreeRTOS/tasks.c **** 				else
1645:FreeRTOS/tasks.c **** 				{
1646:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1647:FreeRTOS/tasks.c **** 				}
1648:FreeRTOS/tasks.c **** 
1649:FreeRTOS/tasks.c **** 				if( xYieldPending == pdTRUE )
 1908              		.loc 1 1649 0
 1909 00ce 0D4B     		ldr	r3, .L141+24	@ tmp168,
 1910 00d0 1B68     		ldr	r3, [r3]	@ D.6530, xYieldPending
 1911 00d2 012B     		cmp	r3, #1	@ D.6530,
 1912 00d4 03D1     		bne	.L133	@,
1650:FreeRTOS/tasks.c **** 				{
1651:FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1652:FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 64


1653:FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
 1913              		.loc 1 1653 0
 1914 00d6 0123     		movs	r3, #1	@ tmp169,
 1915 00d8 7B60     		str	r3, [r7, #4]	@ tmp169, xAlreadyYielded
1654:FreeRTOS/tasks.c **** 					}
1655:FreeRTOS/tasks.c **** 					#endif
1656:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1916              		.loc 1 1656 0
 1917 00da FFF7FEFF 		bl	vPortYield	@
 1918              	.L133:
1657:FreeRTOS/tasks.c **** 				}
1658:FreeRTOS/tasks.c **** 				else
1659:FreeRTOS/tasks.c **** 				{
1660:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1661:FreeRTOS/tasks.c **** 				}
1662:FreeRTOS/tasks.c **** 			}
1663:FreeRTOS/tasks.c **** 		}
1664:FreeRTOS/tasks.c **** 		else
1665:FreeRTOS/tasks.c **** 		{
1666:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1667:FreeRTOS/tasks.c **** 		}
1668:FreeRTOS/tasks.c **** 	}
1669:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1919              		.loc 1 1669 0
 1920 00de FFF7FEFF 		bl	vPortExitCritical	@
1670:FreeRTOS/tasks.c **** 
1671:FreeRTOS/tasks.c **** 	return xAlreadyYielded;
 1921              		.loc 1 1671 0
 1922 00e2 7B68     		ldr	r3, [r7, #4]	@ D.6531, xAlreadyYielded
1672:FreeRTOS/tasks.c **** }
 1923              		.loc 1 1672 0
 1924 00e4 1846     		mov	r0, r3	@, <retval>
 1925 00e6 0837     		adds	r7, r7, #8	@,,
 1926              		.cfi_def_cfa_offset 8
 1927 00e8 BD46     		mov	sp, r7	@,
 1928              		.cfi_def_cfa_register 13
 1929              		@ sp needed	@
 1930 00ea 80BD     		pop	{r7, pc}	@
 1931              	.L142:
 1932              		.align	2
 1933              	.L141:
 1934 00ec 00000000 		.word	uxSchedulerSuspended
 1935 00f0 00000000 		.word	uxCurrentNumberOfTasks
 1936 00f4 00000000 		.word	xPendingReadyList
 1937 00f8 00000000 		.word	uxTopReadyPriority
 1938 00fc 00000000 		.word	pxReadyTasksLists
 1939 0100 00000000 		.word	pxCurrentTCB
 1940 0104 00000000 		.word	xYieldPending
 1941 0108 00000000 		.word	uxPendedTicks
 1942              		.cfi_endproc
 1943              	.LFE14:
 1944              		.size	xTaskResumeAll, .-xTaskResumeAll
 1945              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1946              		.align	2
 1947              		.global	xTaskGetTickCount
 1948              		.thumb
 1949              		.thumb_func
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 65


 1950              		.type	xTaskGetTickCount, %function
 1951              	xTaskGetTickCount:
 1952              	.LFB15:
1673:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1674:FreeRTOS/tasks.c **** 
1675:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCount( void )
1676:FreeRTOS/tasks.c **** {
 1953              		.loc 1 1676 0
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 8
 1956              		@ frame_needed = 1, uses_anonymous_args = 0
 1957 0000 80B5     		push	{r7, lr}	@
 1958              		.cfi_def_cfa_offset 8
 1959              		.cfi_offset 7, -8
 1960              		.cfi_offset 14, -4
 1961 0002 82B0     		sub	sp, sp, #8	@,,
 1962              		.cfi_def_cfa_offset 16
 1963 0004 00AF     		add	r7, sp, #0	@,,
 1964              		.cfi_def_cfa_register 7
1677:FreeRTOS/tasks.c **** TickT_t xTicks;
1678:FreeRTOS/tasks.c **** 
1679:FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1680:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1965              		.loc 1 1680 0
 1966 0006 FFF7FEFF 		bl	vPortEnterCritical	@
1681:FreeRTOS/tasks.c **** 	{
1682:FreeRTOS/tasks.c **** 		xTicks = xTickCount;
 1967              		.loc 1 1682 0
 1968 000a 054B     		ldr	r3, .L145	@ tmp112,
 1969 000c 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 1970 000e 7B60     		str	r3, [r7, #4]	@ tmp113, xTicks
1683:FreeRTOS/tasks.c **** 	}
1684:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1971              		.loc 1 1684 0
 1972 0010 FFF7FEFF 		bl	vPortExitCritical	@
1685:FreeRTOS/tasks.c **** 
1686:FreeRTOS/tasks.c **** 	return xTicks;
 1973              		.loc 1 1686 0
 1974 0014 7B68     		ldr	r3, [r7, #4]	@ D.6532, xTicks
1687:FreeRTOS/tasks.c **** }
 1975              		.loc 1 1687 0
 1976 0016 1846     		mov	r0, r3	@, <retval>
 1977 0018 0837     		adds	r7, r7, #8	@,,
 1978              		.cfi_def_cfa_offset 8
 1979 001a BD46     		mov	sp, r7	@,
 1980              		.cfi_def_cfa_register 13
 1981              		@ sp needed	@
 1982 001c 80BD     		pop	{r7, pc}	@
 1983              	.L146:
 1984 001e 00BF     		.align	2
 1985              	.L145:
 1986 0020 00000000 		.word	xTickCount
 1987              		.cfi_endproc
 1988              	.LFE15:
 1989              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1990              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1991              		.align	2
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 66


 1992              		.global	xTaskGetTickCountFromISR
 1993              		.thumb
 1994              		.thumb_func
 1995              		.type	xTaskGetTickCountFromISR, %function
 1996              	xTaskGetTickCountFromISR:
 1997              	.LFB16:
1688:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1689:FreeRTOS/tasks.c **** 
1690:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCountFromISR( void )
1691:FreeRTOS/tasks.c **** {
 1998              		.loc 1 1691 0
 1999              		.cfi_startproc
 2000              		@ args = 0, pretend = 0, frame = 8
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002 0000 80B5     		push	{r7, lr}	@
 2003              		.cfi_def_cfa_offset 8
 2004              		.cfi_offset 7, -8
 2005              		.cfi_offset 14, -4
 2006 0002 82B0     		sub	sp, sp, #8	@,,
 2007              		.cfi_def_cfa_offset 16
 2008 0004 00AF     		add	r7, sp, #0	@,,
 2009              		.cfi_def_cfa_register 7
1692:FreeRTOS/tasks.c **** TickT_t xReturn;
1693:FreeRTOS/tasks.c **** UBaseT_t uxSavedInterruptStatus;
1694:FreeRTOS/tasks.c **** 
1695:FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1696:FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1697:FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1698:FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1699:FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1700:FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1701:FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1702:FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1703:FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1704:FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1705:FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1706:FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1707:FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1708:FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1709:FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2010              		.loc 1 1709 0
 2011 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority	@
1710:FreeRTOS/tasks.c **** 
1711:FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2012              		.loc 1 1711 0
 2013 000a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2014 000e 7860     		str	r0, [r7, #4]	@, uxSavedInterruptStatus
1712:FreeRTOS/tasks.c **** 	{
1713:FreeRTOS/tasks.c **** 		xReturn = xTickCount;
 2015              		.loc 1 1713 0
 2016 0010 054B     		ldr	r3, .L149	@ tmp112,
 2017 0012 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 2018 0014 3B60     		str	r3, [r7]	@ tmp113, xReturn
1714:FreeRTOS/tasks.c **** 	}
1715:FreeRTOS/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2019              		.loc 1 1715 0
 2020 0016 7868     		ldr	r0, [r7, #4]	@, uxSavedInterruptStatus
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 67


 2021 0018 FFF7FEFF 		bl	vPortClearInterruptMask	@
1716:FreeRTOS/tasks.c **** 
1717:FreeRTOS/tasks.c **** 	return xReturn;
 2022              		.loc 1 1717 0
 2023 001c 3B68     		ldr	r3, [r7]	@ D.6533, xReturn
1718:FreeRTOS/tasks.c **** }
 2024              		.loc 1 1718 0
 2025 001e 1846     		mov	r0, r3	@, <retval>
 2026 0020 0837     		adds	r7, r7, #8	@,,
 2027              		.cfi_def_cfa_offset 8
 2028 0022 BD46     		mov	sp, r7	@,
 2029              		.cfi_def_cfa_register 13
 2030              		@ sp needed	@
 2031 0024 80BD     		pop	{r7, pc}	@
 2032              	.L150:
 2033 0026 00BF     		.align	2
 2034              	.L149:
 2035 0028 00000000 		.word	xTickCount
 2036              		.cfi_endproc
 2037              	.LFE16:
 2038              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2039              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2040              		.align	2
 2041              		.global	uxTaskGetNumberOfTasks
 2042              		.thumb
 2043              		.thumb_func
 2044              		.type	uxTaskGetNumberOfTasks, %function
 2045              	uxTaskGetNumberOfTasks:
 2046              	.LFB17:
1719:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1720:FreeRTOS/tasks.c **** 
1721:FreeRTOS/tasks.c **** UBaseT_t uxTaskGetNumberOfTasks( void )
1722:FreeRTOS/tasks.c **** {
 2047              		.loc 1 1722 0
 2048              		.cfi_startproc
 2049              		@ args = 0, pretend = 0, frame = 0
 2050              		@ frame_needed = 1, uses_anonymous_args = 0
 2051              		@ link register save eliminated.
 2052 0000 80B4     		push	{r7}	@
 2053              		.cfi_def_cfa_offset 4
 2054              		.cfi_offset 7, -4
 2055 0002 00AF     		add	r7, sp, #0	@,,
 2056              		.cfi_def_cfa_register 7
1723:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1724:FreeRTOS/tasks.c **** 	BaseT_t. */
1725:FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 2057              		.loc 1 1725 0
 2058 0004 034B     		ldr	r3, .L153	@ tmp112,
 2059 0006 1B68     		ldr	r3, [r3]	@ D.6534, uxCurrentNumberOfTasks
1726:FreeRTOS/tasks.c **** }
 2060              		.loc 1 1726 0
 2061 0008 1846     		mov	r0, r3	@, <retval>
 2062 000a BD46     		mov	sp, r7	@,
 2063              		.cfi_def_cfa_register 13
 2064              		@ sp needed	@
 2065 000c 5DF8047B 		ldr	r7, [sp], #4	@,
 2066              		.cfi_restore 7
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 68


 2067              		.cfi_def_cfa_offset 0
 2068 0010 7047     		bx	lr	@
 2069              	.L154:
 2070 0012 00BF     		.align	2
 2071              	.L153:
 2072 0014 00000000 		.word	uxCurrentNumberOfTasks
 2073              		.cfi_endproc
 2074              	.LFE17:
 2075              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2076              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2077              		.align	2
 2078              		.global	uxTaskGetSystemState
 2079              		.thumb
 2080              		.thumb_func
 2081              		.type	uxTaskGetSystemState, %function
 2082              	uxTaskGetSystemState:
 2083              	.LFB18:
1727:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:FreeRTOS/tasks.c **** 
1729:FreeRTOS/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1730:FreeRTOS/tasks.c **** 
1731:FreeRTOS/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1732:FreeRTOS/tasks.c **** 	{
1733:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1734:FreeRTOS/tasks.c **** 
1735:FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1736:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1737:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1738:FreeRTOS/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1739:FreeRTOS/tasks.c **** 	}
1740:FreeRTOS/tasks.c **** 
1741:FreeRTOS/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1742:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1743:FreeRTOS/tasks.c **** 
1744:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1745:FreeRTOS/tasks.c **** 
1746:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseT_t uxArraySize,
1747:FreeRTOS/tasks.c **** 	{
 2084              		.loc 1 1747 0
 2085              		.cfi_startproc
 2086              		@ args = 0, pretend = 0, frame = 24
 2087              		@ frame_needed = 1, uses_anonymous_args = 0
 2088 0000 80B5     		push	{r7, lr}	@
 2089              		.cfi_def_cfa_offset 8
 2090              		.cfi_offset 7, -8
 2091              		.cfi_offset 14, -4
 2092 0002 86B0     		sub	sp, sp, #24	@,,
 2093              		.cfi_def_cfa_offset 32
 2094 0004 00AF     		add	r7, sp, #0	@,,
 2095              		.cfi_def_cfa_register 7
 2096 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 2097 0008 B960     		str	r1, [r7, #8]	@ uxArraySize, uxArraySize
 2098 000a 7A60     		str	r2, [r7, #4]	@ pulTotalRunTime, pulTotalRunTime
1748:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2099              		.loc 1 1748 0
 2100 000c 0023     		movs	r3, #0	@ tmp131,
 2101 000e 7B61     		str	r3, [r7, #20]	@ tmp131, uxTask
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 69


 2102 0010 0823     		movs	r3, #8	@ tmp132,
 2103 0012 3B61     		str	r3, [r7, #16]	@ tmp132, uxQueue
1749:FreeRTOS/tasks.c **** 
1750:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 2104              		.loc 1 1750 0
 2105 0014 FFF7FEFF 		bl	vTaskSuspendAll	@
1751:FreeRTOS/tasks.c **** 		{
1752:FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1753:FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2106              		.loc 1 1753 0
 2107 0018 314B     		ldr	r3, .L160	@ tmp133,
 2108 001a 1B68     		ldr	r3, [r3]	@ D.6535, uxCurrentNumberOfTasks
 2109 001c BA68     		ldr	r2, [r7, #8]	@ tmp134, uxArraySize
 2110 001e 9A42     		cmp	r2, r3	@ tmp134, D.6535
 2111 0020 57D3     		bcc	.L156	@,
 2112              	.L157:
1754:FreeRTOS/tasks.c **** 			{
1755:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1756:FreeRTOS/tasks.c **** 				task in the Ready state. */
1757:FreeRTOS/tasks.c **** 				do
1758:FreeRTOS/tasks.c **** 				{
1759:FreeRTOS/tasks.c **** 					uxQueue--;
 2113              		.loc 1 1759 0 discriminator 1
 2114 0022 3B69     		ldr	r3, [r7, #16]	@ tmp136, uxQueue
 2115 0024 013B     		subs	r3, r3, #1	@ tmp135, tmp136,
 2116 0026 3B61     		str	r3, [r7, #16]	@ tmp135, uxQueue
1760:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
 2117              		.loc 1 1760 0 discriminator 1
 2118 0028 7B69     		ldr	r3, [r7, #20]	@ tmp137, uxTask
 2119 002a 5B01     		lsls	r3, r3, #5	@ D.6535, tmp137,
 2120 002c FA68     		ldr	r2, [r7, #12]	@ tmp138, pxTaskStatusArray
 2121 002e D118     		adds	r1, r2, r3	@ D.6536, tmp138, D.6535
 2122 0030 3A69     		ldr	r2, [r7, #16]	@ tmp139, uxQueue
 2123 0032 1346     		mov	r3, r2	@ tmp140, tmp139
 2124 0034 9B00     		lsls	r3, r3, #2	@ tmp140, tmp140,
 2125 0036 1344     		add	r3, r3, r2	@ tmp140, tmp139
 2126 0038 9B00     		lsls	r3, r3, #2	@ tmp141, tmp140,
 2127 003a 2A4A     		ldr	r2, .L160+4	@ tmp142,
 2128 003c 1344     		add	r3, r3, r2	@ D.6537, tmp142
 2129 003e 0846     		mov	r0, r1	@, D.6536
 2130 0040 1946     		mov	r1, r3	@, D.6537
 2131 0042 0122     		movs	r2, #1	@,
 2132 0044 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2133 0048 0246     		mov	r2, r0	@ D.6535,
 2134 004a 7B69     		ldr	r3, [r7, #20]	@ tmp144, uxTask
 2135 004c 1344     		add	r3, r3, r2	@ tmp143, D.6535
 2136 004e 7B61     		str	r3, [r7, #20]	@ tmp143, uxTask
1761:FreeRTOS/tasks.c **** 
1762:FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseT_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts a
 2137              		.loc 1 1762 0 discriminator 1
 2138 0050 3B69     		ldr	r3, [r7, #16]	@ tmp145, uxQueue
 2139 0052 002B     		cmp	r3, #0	@ tmp145,
 2140 0054 E5D1     		bne	.L157	@,
1763:FreeRTOS/tasks.c **** 
1764:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1765:FreeRTOS/tasks.c **** 				task in the Blocked state. */
1766:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 70


 2141              		.loc 1 1766 0
 2142 0056 7B69     		ldr	r3, [r7, #20]	@ tmp146, uxTask
 2143 0058 5B01     		lsls	r3, r3, #5	@ D.6535, tmp146,
 2144 005a FA68     		ldr	r2, [r7, #12]	@ tmp147, pxTaskStatusArray
 2145 005c 1A44     		add	r2, r2, r3	@ D.6536, D.6535
 2146 005e 224B     		ldr	r3, .L160+8	@ tmp148,
 2147 0060 1B68     		ldr	r3, [r3]	@ D.6537, pxDelayedTaskList
 2148 0062 1046     		mov	r0, r2	@, D.6536
 2149 0064 1946     		mov	r1, r3	@, D.6537
 2150 0066 0222     		movs	r2, #2	@,
 2151 0068 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2152 006c 0246     		mov	r2, r0	@ D.6535,
 2153 006e 7B69     		ldr	r3, [r7, #20]	@ tmp150, uxTask
 2154 0070 1344     		add	r3, r3, r2	@ tmp149, D.6535
 2155 0072 7B61     		str	r3, [r7, #20]	@ tmp149, uxTask
1767:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2156              		.loc 1 1767 0
 2157 0074 7B69     		ldr	r3, [r7, #20]	@ tmp151, uxTask
 2158 0076 5B01     		lsls	r3, r3, #5	@ D.6535, tmp151,
 2159 0078 FA68     		ldr	r2, [r7, #12]	@ tmp152, pxTaskStatusArray
 2160 007a 1A44     		add	r2, r2, r3	@ D.6536, D.6535
 2161 007c 1B4B     		ldr	r3, .L160+12	@ tmp153,
 2162 007e 1B68     		ldr	r3, [r3]	@ D.6537, pxOverflowDelayedTaskList
 2163 0080 1046     		mov	r0, r2	@, D.6536
 2164 0082 1946     		mov	r1, r3	@, D.6537
 2165 0084 0222     		movs	r2, #2	@,
 2166 0086 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2167 008a 0246     		mov	r2, r0	@ D.6535,
 2168 008c 7B69     		ldr	r3, [r7, #20]	@ tmp155, uxTask
 2169 008e 1344     		add	r3, r3, r2	@ tmp154, D.6535
 2170 0090 7B61     		str	r3, [r7, #20]	@ tmp154, uxTask
1768:FreeRTOS/tasks.c **** 
1769:FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1770:FreeRTOS/tasks.c **** 				{
1771:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1772:FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1773:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
 2171              		.loc 1 1773 0
 2172 0092 7B69     		ldr	r3, [r7, #20]	@ tmp156, uxTask
 2173 0094 5B01     		lsls	r3, r3, #5	@ D.6535, tmp156,
 2174 0096 FA68     		ldr	r2, [r7, #12]	@ tmp157, pxTaskStatusArray
 2175 0098 1344     		add	r3, r3, r2	@ D.6536, tmp157
 2176 009a 1846     		mov	r0, r3	@, D.6536
 2177 009c 1449     		ldr	r1, .L160+16	@,
 2178 009e 0422     		movs	r2, #4	@,
 2179 00a0 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2180 00a4 0246     		mov	r2, r0	@ D.6535,
 2181 00a6 7B69     		ldr	r3, [r7, #20]	@ tmp159, uxTask
 2182 00a8 1344     		add	r3, r3, r2	@ tmp158, D.6535
 2183 00aa 7B61     		str	r3, [r7, #20]	@ tmp158, uxTask
1774:FreeRTOS/tasks.c **** 				}
1775:FreeRTOS/tasks.c **** 				#endif
1776:FreeRTOS/tasks.c **** 
1777:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1778:FreeRTOS/tasks.c **** 				{
1779:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1780:FreeRTOS/tasks.c **** 					each task in the Suspended state. */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 71


1781:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
 2184              		.loc 1 1781 0
 2185 00ac 7B69     		ldr	r3, [r7, #20]	@ tmp160, uxTask
 2186 00ae 5B01     		lsls	r3, r3, #5	@ D.6535, tmp160,
 2187 00b0 FA68     		ldr	r2, [r7, #12]	@ tmp161, pxTaskStatusArray
 2188 00b2 1344     		add	r3, r3, r2	@ D.6536, tmp161
 2189 00b4 1846     		mov	r0, r3	@, D.6536
 2190 00b6 0F49     		ldr	r1, .L160+20	@,
 2191 00b8 0322     		movs	r2, #3	@,
 2192 00ba FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2193 00be 0246     		mov	r2, r0	@ D.6535,
 2194 00c0 7B69     		ldr	r3, [r7, #20]	@ tmp163, uxTask
 2195 00c2 1344     		add	r3, r3, r2	@ tmp162, D.6535
 2196 00c4 7B61     		str	r3, [r7, #20]	@ tmp162, uxTask
1782:FreeRTOS/tasks.c **** 				}
1783:FreeRTOS/tasks.c **** 				#endif
1784:FreeRTOS/tasks.c **** 
1785:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1786:FreeRTOS/tasks.c **** 				{
1787:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1788:FreeRTOS/tasks.c **** 					{
1789:FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1790:FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1791:FreeRTOS/tasks.c **** 						#else
1792:FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1793:FreeRTOS/tasks.c **** 						#endif
1794:FreeRTOS/tasks.c **** 					}
1795:FreeRTOS/tasks.c **** 				}
1796:FreeRTOS/tasks.c **** 				#else
1797:FreeRTOS/tasks.c **** 				{
1798:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
 2197              		.loc 1 1798 0
 2198 00c6 7B68     		ldr	r3, [r7, #4]	@ tmp164, pulTotalRunTime
 2199 00c8 002B     		cmp	r3, #0	@ tmp164,
 2200 00ca 02D0     		beq	.L156	@,
1799:FreeRTOS/tasks.c **** 					{
1800:FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
 2201              		.loc 1 1800 0
 2202 00cc 7B68     		ldr	r3, [r7, #4]	@ tmp165, pulTotalRunTime
 2203 00ce 0022     		movs	r2, #0	@ tmp166,
 2204 00d0 1A60     		str	r2, [r3]	@ tmp166, *pulTotalRunTime_33(D)
 2205              	.L156:
1801:FreeRTOS/tasks.c **** 					}
1802:FreeRTOS/tasks.c **** 				}
1803:FreeRTOS/tasks.c **** 				#endif
1804:FreeRTOS/tasks.c **** 			}
1805:FreeRTOS/tasks.c **** 			else
1806:FreeRTOS/tasks.c **** 			{
1807:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1808:FreeRTOS/tasks.c **** 			}
1809:FreeRTOS/tasks.c **** 		}
1810:FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
 2206              		.loc 1 1810 0
 2207 00d2 FFF7FEFF 		bl	xTaskResumeAll	@
1811:FreeRTOS/tasks.c **** 
1812:FreeRTOS/tasks.c **** 		return uxTask;
 2208              		.loc 1 1812 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 72


 2209 00d6 7B69     		ldr	r3, [r7, #20]	@ D.6538, uxTask
1813:FreeRTOS/tasks.c **** 	}
 2210              		.loc 1 1813 0
 2211 00d8 1846     		mov	r0, r3	@, <retval>
 2212 00da 1837     		adds	r7, r7, #24	@,,
 2213              		.cfi_def_cfa_offset 8
 2214 00dc BD46     		mov	sp, r7	@,
 2215              		.cfi_def_cfa_register 13
 2216              		@ sp needed	@
 2217 00de 80BD     		pop	{r7, pc}	@
 2218              	.L161:
 2219              		.align	2
 2220              	.L160:
 2221 00e0 00000000 		.word	uxCurrentNumberOfTasks
 2222 00e4 00000000 		.word	pxReadyTasksLists
 2223 00e8 00000000 		.word	pxDelayedTaskList
 2224 00ec 00000000 		.word	pxOverflowDelayedTaskList
 2225 00f0 00000000 		.word	xTasksWaitingTermination
 2226 00f4 00000000 		.word	xSuspendedTaskList
 2227              		.cfi_endproc
 2228              	.LFE18:
 2229              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 2230              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2231              		.align	2
 2232              		.global	xTaskIncrementTick
 2233              		.thumb
 2234              		.thumb_func
 2235              		.type	xTaskIncrementTick, %function
 2236              	xTaskIncrementTick:
 2237              	.LFB19:
1814:FreeRTOS/tasks.c **** 
1815:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1816:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1817:FreeRTOS/tasks.c **** 
1818:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1821:FreeRTOS/tasks.c **** 	{
1822:FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1823:FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1824:FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1825:FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
1826:FreeRTOS/tasks.c **** 	}
1827:FreeRTOS/tasks.c **** 
1828:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1829:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1830:FreeRTOS/tasks.c **** 
1831:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1832:FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1833:FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1834:FreeRTOS/tasks.c **** 1. */
1835:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1836:FreeRTOS/tasks.c **** 
1837:FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickT_t xTicksToJump )
1838:FreeRTOS/tasks.c **** 	{
1839:FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1840:FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 73


1841:FreeRTOS/tasks.c **** 		each stepped tick. */
1842:FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1843:FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
1844:FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1845:FreeRTOS/tasks.c **** 	}
1846:FreeRTOS/tasks.c **** 
1847:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1848:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1849:FreeRTOS/tasks.c **** 
1850:FreeRTOS/tasks.c **** BaseT_t xTaskIncrementTick( void )
1851:FreeRTOS/tasks.c **** {
 2238              		.loc 1 1851 0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 24
 2241              		@ frame_needed = 1, uses_anonymous_args = 0
 2242 0000 80B5     		push	{r7, lr}	@
 2243              		.cfi_def_cfa_offset 8
 2244              		.cfi_offset 7, -8
 2245              		.cfi_offset 14, -4
 2246 0002 86B0     		sub	sp, sp, #24	@,,
 2247              		.cfi_def_cfa_offset 32
 2248 0004 00AF     		add	r7, sp, #0	@,,
 2249              		.cfi_def_cfa_register 7
1852:FreeRTOS/tasks.c **** TCB_t * pxTCB;
1853:FreeRTOS/tasks.c **** TickT_t xItemValue;
1854:FreeRTOS/tasks.c **** BaseT_t xSwitchRequired = pdFALSE;
 2250              		.loc 1 1854 0
 2251 0006 0023     		movs	r3, #0	@ tmp147,
 2252 0008 7B61     		str	r3, [r7, #20]	@ tmp147, xSwitchRequired
1855:FreeRTOS/tasks.c **** 
1856:FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1857:FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1858:FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1859:FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1860:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2253              		.loc 1 1860 0
 2254 000a 524B     		ldr	r3, .L179	@ tmp148,
 2255 000c 1B68     		ldr	r3, [r3]	@ D.6540, uxSchedulerSuspended
 2256 000e 002B     		cmp	r3, #0	@ D.6540,
 2257 0010 40F08E80 		bne	.L163	@,
1861:FreeRTOS/tasks.c **** 	{
1862:FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1863:FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
1864:FreeRTOS/tasks.c **** 		++xTickCount;
 2258              		.loc 1 1864 0
 2259 0014 504B     		ldr	r3, .L179+4	@ tmp149,
 2260 0016 1B68     		ldr	r3, [r3]	@ D.6540, xTickCount
 2261 0018 0133     		adds	r3, r3, #1	@ D.6540, D.6540,
 2262 001a 4F4A     		ldr	r2, .L179+4	@ tmp150,
 2263 001c 1360     		str	r3, [r2]	@ D.6540, xTickCount
 2264              	.LBB8:
1865:FreeRTOS/tasks.c **** 
1866:FreeRTOS/tasks.c **** 		{
1867:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1868:FreeRTOS/tasks.c **** 			block. */
1869:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 2265              		.loc 1 1869 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 74


 2266 001e 4E4B     		ldr	r3, .L179+4	@ tmp151,
 2267 0020 1B68     		ldr	r3, [r3]	@ tmp152, xTickCount
 2268 0022 3B61     		str	r3, [r7, #16]	@ tmp152, xConstTickCount
1870:FreeRTOS/tasks.c **** 
1871:FreeRTOS/tasks.c **** 			if( xConstTickCount == ( TickT_t ) 0U )
 2269              		.loc 1 1871 0
 2270 0024 3B69     		ldr	r3, [r7, #16]	@ tmp153, xConstTickCount
 2271 0026 002B     		cmp	r3, #0	@ tmp153,
 2272 0028 18D1     		bne	.L164	@,
 2273              	.LBB9:
1872:FreeRTOS/tasks.c **** 			{
1873:FreeRTOS/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 2274              		.loc 1 1873 0
 2275 002a 4C4B     		ldr	r3, .L179+8	@ tmp154,
 2276 002c 1B68     		ldr	r3, [r3]	@ D.6541, pxDelayedTaskList
 2277 002e 1B68     		ldr	r3, [r3]	@ D.6540, _13->uxNumberOfItems
 2278 0030 002B     		cmp	r3, #0	@ D.6540,
 2279 0032 02D0     		beq	.L165	@,
 2280              		.loc 1 1873 0 is_stmt 0 discriminator 1
 2281 0034 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2282              	.L166:
 2283 0038 FEE7     		b	.L166	@
 2284              	.L165:
 2285              		.loc 1 1873 0 discriminator 2
 2286 003a 484B     		ldr	r3, .L179+8	@ tmp155,
 2287 003c 1B68     		ldr	r3, [r3]	@ tmp156, pxDelayedTaskList
 2288 003e FB60     		str	r3, [r7, #12]	@ tmp156, pxTemp
 2289 0040 474B     		ldr	r3, .L179+12	@ tmp157,
 2290 0042 1B68     		ldr	r3, [r3]	@ D.6541, pxOverflowDelayedTaskList
 2291 0044 454A     		ldr	r2, .L179+8	@ tmp158,
 2292 0046 1360     		str	r3, [r2]	@ D.6541, pxDelayedTaskList
 2293 0048 454A     		ldr	r2, .L179+12	@ tmp159,
 2294 004a FB68     		ldr	r3, [r7, #12]	@ tmp160, pxTemp
 2295 004c 1360     		str	r3, [r2]	@ tmp160, pxOverflowDelayedTaskList
 2296 004e 454B     		ldr	r3, .L179+16	@ tmp161,
 2297 0050 1B68     		ldr	r3, [r3]	@ D.6542, xNumOfOverflows
 2298 0052 0133     		adds	r3, r3, #1	@ D.6542, D.6542,
 2299 0054 434A     		ldr	r2, .L179+16	@ tmp162,
 2300 0056 1360     		str	r3, [r2]	@ D.6542, xNumOfOverflows
 2301 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 2302              	.L164:
 2303              	.LBE9:
1874:FreeRTOS/tasks.c **** 			}
1875:FreeRTOS/tasks.c **** 			else
1876:FreeRTOS/tasks.c **** 			{
1877:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1878:FreeRTOS/tasks.c **** 			}
1879:FreeRTOS/tasks.c **** 
1880:FreeRTOS/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1881:FreeRTOS/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1882:FreeRTOS/tasks.c **** 			has been found whose block time has not expired there is no need to
1883:FreeRTOS/tasks.c **** 			look any further	down the list. */
1884:FreeRTOS/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 2304              		.loc 1 1884 0 is_stmt 1
 2305 005c 424B     		ldr	r3, .L179+20	@ tmp163,
 2306 005e 1B68     		ldr	r3, [r3]	@ D.6540, xNextTaskUnblockTime
 2307 0060 3A69     		ldr	r2, [r7, #16]	@ tmp164, xConstTickCount
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 75


 2308 0062 9A42     		cmp	r2, r3	@ tmp164, D.6540
 2309 0064 4FD3     		bcc	.L167	@,
 2310              	.L174:
1885:FreeRTOS/tasks.c **** 			{
1886:FreeRTOS/tasks.c **** 				for( ;; )
1887:FreeRTOS/tasks.c **** 				{
1888:FreeRTOS/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2311              		.loc 1 1888 0
 2312 0066 3D4B     		ldr	r3, .L179+8	@ tmp165,
 2313 0068 1B68     		ldr	r3, [r3]	@ D.6541, pxDelayedTaskList
 2314 006a 1B68     		ldr	r3, [r3]	@ D.6540, _20->uxNumberOfItems
 2315 006c 002B     		cmp	r3, #0	@ D.6540,
 2316 006e 01D1     		bne	.L168	@,
 2317              		.loc 1 1888 0 is_stmt 0 discriminator 1
 2318 0070 0123     		movs	r3, #1	@ D.6539,
 2319 0072 00E0     		b	.L169	@
 2320              	.L168:
 2321              		.loc 1 1888 0 discriminator 2
 2322 0074 0023     		movs	r3, #0	@ D.6539,
 2323              	.L169:
 2324              		.loc 1 1888 0 discriminator 4
 2325 0076 002B     		cmp	r3, #0	@ D.6539,
 2326 0078 04D0     		beq	.L170	@,
1889:FreeRTOS/tasks.c **** 					{
1890:FreeRTOS/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1891:FreeRTOS/tasks.c **** 						to the maximum possible value so it is extremely
1892:FreeRTOS/tasks.c **** 						unlikely that the
1893:FreeRTOS/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1894:FreeRTOS/tasks.c **** 						next time through. */
1895:FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 2327              		.loc 1 1895 0 is_stmt 1
 2328 007a 3B4B     		ldr	r3, .L179+20	@ tmp166,
 2329 007c 4FF0FF32 		mov	r2, #-1	@ tmp167,
 2330 0080 1A60     		str	r2, [r3]	@ tmp167, xNextTaskUnblockTime
1896:FreeRTOS/tasks.c **** 						break;
 2331              		.loc 1 1896 0
 2332 0082 40E0     		b	.L167	@
 2333              	.L170:
1897:FreeRTOS/tasks.c **** 					}
1898:FreeRTOS/tasks.c **** 					else
1899:FreeRTOS/tasks.c **** 					{
1900:FreeRTOS/tasks.c **** 						/* The delayed list is not empty, get the value of the
1901:FreeRTOS/tasks.c **** 						item at the head of the delayed list.  This is the time
1902:FreeRTOS/tasks.c **** 						at which the task at the head of the delayed list must
1903:FreeRTOS/tasks.c **** 						be removed from the Blocked state. */
1904:FreeRTOS/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2334              		.loc 1 1904 0
 2335 0084 354B     		ldr	r3, .L179+8	@ tmp168,
 2336 0086 1B68     		ldr	r3, [r3]	@ D.6541, pxDelayedTaskList
 2337 0088 DB68     		ldr	r3, [r3, #12]	@ D.6543, _24->xListEnd.pxNext
 2338 008a DB68     		ldr	r3, [r3, #12]	@ tmp169, _25->pvOwner
 2339 008c BB60     		str	r3, [r7, #8]	@ tmp169, pxTCB
1905:FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2340              		.loc 1 1905 0
 2341 008e BB68     		ldr	r3, [r7, #8]	@ tmp170, pxTCB
 2342 0090 5B68     		ldr	r3, [r3, #4]	@ tmp171, pxTCB_26->xGenericListItem.xItemValue
 2343 0092 7B60     		str	r3, [r7, #4]	@ tmp171, xItemValue
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 76


1906:FreeRTOS/tasks.c **** 
1907:FreeRTOS/tasks.c **** 						if( xConstTickCount < xItemValue )
 2344              		.loc 1 1907 0
 2345 0094 3A69     		ldr	r2, [r7, #16]	@ tmp172, xConstTickCount
 2346 0096 7B68     		ldr	r3, [r7, #4]	@ tmp173, xItemValue
 2347 0098 9A42     		cmp	r2, r3	@ tmp172, tmp173
 2348 009a 03D2     		bcs	.L171	@,
1908:FreeRTOS/tasks.c **** 						{
1909:FreeRTOS/tasks.c **** 							/* It is not time to unblock this item yet, but the
1910:FreeRTOS/tasks.c **** 							item value is the time at which the task at the head
1911:FreeRTOS/tasks.c **** 							of the blocked list must be removed from the Blocked
1912:FreeRTOS/tasks.c **** 							state -	so record the item value in
1913:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime. */
1914:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
 2349              		.loc 1 1914 0
 2350 009c 324A     		ldr	r2, .L179+20	@ tmp174,
 2351 009e 7B68     		ldr	r3, [r7, #4]	@ tmp175, xItemValue
 2352 00a0 1360     		str	r3, [r2]	@ tmp175, xNextTaskUnblockTime
1915:FreeRTOS/tasks.c **** 							break;
 2353              		.loc 1 1915 0
 2354 00a2 30E0     		b	.L167	@
 2355              	.L171:
1916:FreeRTOS/tasks.c **** 						}
1917:FreeRTOS/tasks.c **** 						else
1918:FreeRTOS/tasks.c **** 						{
1919:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1920:FreeRTOS/tasks.c **** 						}
1921:FreeRTOS/tasks.c **** 
1922:FreeRTOS/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
1923:FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2356              		.loc 1 1923 0
 2357 00a4 BB68     		ldr	r3, [r7, #8]	@ tmp176, pxTCB
 2358 00a6 0433     		adds	r3, r3, #4	@ D.6544, tmp176,
 2359 00a8 1846     		mov	r0, r3	@, D.6544
 2360 00aa FFF7FEFF 		bl	uxListRemove	@
1924:FreeRTOS/tasks.c **** 
1925:FreeRTOS/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
1926:FreeRTOS/tasks.c **** 						it from the event list. */
1927:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2361              		.loc 1 1927 0
 2362 00ae BB68     		ldr	r3, [r7, #8]	@ tmp177, pxTCB
 2363 00b0 9B6A     		ldr	r3, [r3, #40]	@ D.6545, pxTCB_26->xEventListItem.pvContainer
 2364 00b2 002B     		cmp	r3, #0	@ D.6545,
 2365 00b4 04D0     		beq	.L172	@,
1928:FreeRTOS/tasks.c **** 						{
1929:FreeRTOS/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2366              		.loc 1 1929 0
 2367 00b6 BB68     		ldr	r3, [r7, #8]	@ tmp178, pxTCB
 2368 00b8 1833     		adds	r3, r3, #24	@ D.6544, tmp178,
 2369 00ba 1846     		mov	r0, r3	@, D.6544
 2370 00bc FFF7FEFF 		bl	uxListRemove	@
 2371              	.L172:
1930:FreeRTOS/tasks.c **** 						}
1931:FreeRTOS/tasks.c **** 						else
1932:FreeRTOS/tasks.c **** 						{
1933:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1934:FreeRTOS/tasks.c **** 						}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 77


1935:FreeRTOS/tasks.c **** 
1936:FreeRTOS/tasks.c **** 						/* Place the unblocked task into the appropriate ready
1937:FreeRTOS/tasks.c **** 						list. */
1938:FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 2372              		.loc 1 1938 0
 2373 00c0 BB68     		ldr	r3, [r7, #8]	@ tmp179, pxTCB
 2374 00c2 DB6A     		ldr	r3, [r3, #44]	@ D.6540, pxTCB_26->uxPriority
 2375 00c4 1A46     		mov	r2, r3	@ D.6546, D.6540
 2376 00c6 0123     		movs	r3, #1	@ tmp180,
 2377 00c8 03FA02F2 		lsl	r2, r3, r2	@ D.6540, tmp180, D.6546
 2378 00cc 274B     		ldr	r3, .L179+24	@ tmp181,
 2379 00ce 1B68     		ldr	r3, [r3]	@ D.6540, uxTopReadyPriority
 2380 00d0 1343     		orrs	r3, r3, r2	@, D.6540, D.6540, D.6540
 2381 00d2 264A     		ldr	r2, .L179+24	@ tmp182,
 2382 00d4 1360     		str	r3, [r2]	@ D.6540, uxTopReadyPriority
 2383 00d6 BB68     		ldr	r3, [r7, #8]	@ tmp183, pxTCB
 2384 00d8 DA6A     		ldr	r2, [r3, #44]	@ D.6540, pxTCB_26->uxPriority
 2385 00da 1346     		mov	r3, r2	@ tmp184, D.6540
 2386 00dc 9B00     		lsls	r3, r3, #2	@ tmp184, tmp184,
 2387 00de 1344     		add	r3, r3, r2	@ tmp184, D.6540
 2388 00e0 9B00     		lsls	r3, r3, #2	@ tmp185, tmp184,
 2389 00e2 234A     		ldr	r2, .L179+28	@ tmp186,
 2390 00e4 1A44     		add	r2, r2, r3	@ D.6541, tmp184
 2391 00e6 BB68     		ldr	r3, [r7, #8]	@ tmp187, pxTCB
 2392 00e8 0433     		adds	r3, r3, #4	@ D.6544, tmp187,
 2393 00ea 1046     		mov	r0, r2	@, D.6541
 2394 00ec 1946     		mov	r1, r3	@, D.6544
 2395 00ee FFF7FEFF 		bl	vListInsertEnd	@
1939:FreeRTOS/tasks.c **** 
1940:FreeRTOS/tasks.c **** 						/* A task being unblocked cannot cause an immediate
1941:FreeRTOS/tasks.c **** 						context switch if preemption is turned off. */
1942:FreeRTOS/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
1943:FreeRTOS/tasks.c **** 						{
1944:FreeRTOS/tasks.c **** 							/* Preemption is on, but a context switch should
1945:FreeRTOS/tasks.c **** 							only be performed if the unblocked task has a
1946:FreeRTOS/tasks.c **** 							priority that is equal to or higher than the
1947:FreeRTOS/tasks.c **** 							currently executing task. */
1948:FreeRTOS/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2396              		.loc 1 1948 0
 2397 00f2 BB68     		ldr	r3, [r7, #8]	@ tmp188, pxTCB
 2398 00f4 DA6A     		ldr	r2, [r3, #44]	@ D.6540, pxTCB_26->uxPriority
 2399 00f6 1F4B     		ldr	r3, .L179+32	@ tmp189,
 2400 00f8 1B68     		ldr	r3, [r3]	@ D.6547, pxCurrentTCB
 2401 00fa DB6A     		ldr	r3, [r3, #44]	@ D.6540, _40->uxPriority
 2402 00fc 9A42     		cmp	r2, r3	@ D.6540, D.6540
 2403 00fe 01D3     		bcc	.L173	@,
1949:FreeRTOS/tasks.c **** 							{
1950:FreeRTOS/tasks.c **** 								xSwitchRequired = pdTRUE;
 2404              		.loc 1 1950 0
 2405 0100 0123     		movs	r3, #1	@ tmp190,
 2406 0102 7B61     		str	r3, [r7, #20]	@ tmp190, xSwitchRequired
 2407              	.L173:
1951:FreeRTOS/tasks.c **** 							}
1952:FreeRTOS/tasks.c **** 							else
1953:FreeRTOS/tasks.c **** 							{
1954:FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
1955:FreeRTOS/tasks.c **** 							}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 78


1956:FreeRTOS/tasks.c **** 						}
1957:FreeRTOS/tasks.c **** 						#endif /* configUSE_PREEMPTION */
1958:FreeRTOS/tasks.c **** 					}
1959:FreeRTOS/tasks.c **** 				}
 2408              		.loc 1 1959 0
 2409 0104 AFE7     		b	.L174	@
 2410              	.L167:
 2411              	.LBE8:
1960:FreeRTOS/tasks.c **** 			}
1961:FreeRTOS/tasks.c **** 		}
1962:FreeRTOS/tasks.c **** 
1963:FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
1964:FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
1965:FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
1966:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
1967:FreeRTOS/tasks.c **** 		{
1968:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseT_t )
 2412              		.loc 1 1968 0
 2413 0106 1B4B     		ldr	r3, .L179+32	@ tmp191,
 2414 0108 1B68     		ldr	r3, [r3]	@ D.6547, pxCurrentTCB
 2415 010a DA6A     		ldr	r2, [r3, #44]	@ D.6540, _43->uxPriority
 2416 010c 1849     		ldr	r1, .L179+28	@ tmp192,
 2417 010e 1346     		mov	r3, r2	@ tmp193, D.6540
 2418 0110 9B00     		lsls	r3, r3, #2	@ tmp193, tmp193,
 2419 0112 1344     		add	r3, r3, r2	@ tmp193, D.6540
 2420 0114 9B00     		lsls	r3, r3, #2	@ tmp194, tmp193,
 2421 0116 0B44     		add	r3, r3, r1	@ tmp195, tmp192
 2422 0118 1B68     		ldr	r3, [r3]	@ D.6540, pxReadyTasksLists[_44].uxNumberOfItems
 2423 011a 012B     		cmp	r3, #1	@ D.6540,
 2424 011c 01D9     		bls	.L175	@,
1969:FreeRTOS/tasks.c **** 			{
1970:FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 2425              		.loc 1 1970 0
 2426 011e 0123     		movs	r3, #1	@ tmp196,
 2427 0120 7B61     		str	r3, [r7, #20]	@ tmp196, xSwitchRequired
 2428              	.L175:
1971:FreeRTOS/tasks.c **** 			}
1972:FreeRTOS/tasks.c **** 			else
1973:FreeRTOS/tasks.c **** 			{
1974:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1975:FreeRTOS/tasks.c **** 			}
1976:FreeRTOS/tasks.c **** 		}
1977:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
1978:FreeRTOS/tasks.c **** 
1979:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1980:FreeRTOS/tasks.c **** 		{
1981:FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
1982:FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
1983:FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseT_t ) 0U )
 2429              		.loc 1 1983 0
 2430 0122 154B     		ldr	r3, .L179+36	@ tmp197,
 2431 0124 1B68     		ldr	r3, [r3]	@ D.6540, uxPendedTicks
 2432 0126 002B     		cmp	r3, #0	@ D.6540,
 2433 0128 09D1     		bne	.L176	@,
1984:FreeRTOS/tasks.c **** 			{
1985:FreeRTOS/tasks.c **** 				vApplicationTickHook();
 2434              		.loc 1 1985 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 79


 2435 012a FFF7FEFF 		bl	vApplicationTickHook	@
 2436 012e 06E0     		b	.L176	@
 2437              	.L163:
1986:FreeRTOS/tasks.c **** 			}
1987:FreeRTOS/tasks.c **** 			else
1988:FreeRTOS/tasks.c **** 			{
1989:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1990:FreeRTOS/tasks.c **** 			}
1991:FreeRTOS/tasks.c **** 		}
1992:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
1993:FreeRTOS/tasks.c **** 	}
1994:FreeRTOS/tasks.c **** 	else
1995:FreeRTOS/tasks.c **** 	{
1996:FreeRTOS/tasks.c **** 		++uxPendedTicks;
 2438              		.loc 1 1996 0
 2439 0130 114B     		ldr	r3, .L179+36	@ tmp198,
 2440 0132 1B68     		ldr	r3, [r3]	@ D.6540, uxPendedTicks
 2441 0134 0133     		adds	r3, r3, #1	@ D.6540, D.6540,
 2442 0136 104A     		ldr	r2, .L179+36	@ tmp199,
 2443 0138 1360     		str	r3, [r2]	@ D.6540, uxPendedTicks
1997:FreeRTOS/tasks.c **** 
1998:FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1999:FreeRTOS/tasks.c **** 		scheduler is locked. */
2000:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2001:FreeRTOS/tasks.c **** 		{
2002:FreeRTOS/tasks.c **** 			vApplicationTickHook();
 2444              		.loc 1 2002 0
 2445 013a FFF7FEFF 		bl	vApplicationTickHook	@
 2446              	.L176:
2003:FreeRTOS/tasks.c **** 		}
2004:FreeRTOS/tasks.c **** 		#endif
2005:FreeRTOS/tasks.c **** 	}
2006:FreeRTOS/tasks.c **** 
2007:FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2008:FreeRTOS/tasks.c **** 	{
2009:FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 2447              		.loc 1 2009 0
 2448 013e 0F4B     		ldr	r3, .L179+40	@ tmp200,
 2449 0140 1B68     		ldr	r3, [r3]	@ D.6542, xYieldPending
 2450 0142 002B     		cmp	r3, #0	@ D.6542,
 2451 0144 01D0     		beq	.L177	@,
2010:FreeRTOS/tasks.c **** 		{
2011:FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 2452              		.loc 1 2011 0
 2453 0146 0123     		movs	r3, #1	@ tmp201,
 2454 0148 7B61     		str	r3, [r7, #20]	@ tmp201, xSwitchRequired
 2455              	.L177:
2012:FreeRTOS/tasks.c **** 		}
2013:FreeRTOS/tasks.c **** 		else
2014:FreeRTOS/tasks.c **** 		{
2015:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2016:FreeRTOS/tasks.c **** 		}
2017:FreeRTOS/tasks.c **** 	}
2018:FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2019:FreeRTOS/tasks.c **** 
2020:FreeRTOS/tasks.c **** 	return xSwitchRequired;
 2456              		.loc 1 2020 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 80


 2457 014a 7B69     		ldr	r3, [r7, #20]	@ D.6548, xSwitchRequired
2021:FreeRTOS/tasks.c **** }
 2458              		.loc 1 2021 0
 2459 014c 1846     		mov	r0, r3	@, <retval>
 2460 014e 1837     		adds	r7, r7, #24	@,,
 2461              		.cfi_def_cfa_offset 8
 2462 0150 BD46     		mov	sp, r7	@,
 2463              		.cfi_def_cfa_register 13
 2464              		@ sp needed	@
 2465 0152 80BD     		pop	{r7, pc}	@
 2466              	.L180:
 2467              		.align	2
 2468              	.L179:
 2469 0154 00000000 		.word	uxSchedulerSuspended
 2470 0158 00000000 		.word	xTickCount
 2471 015c 00000000 		.word	pxDelayedTaskList
 2472 0160 00000000 		.word	pxOverflowDelayedTaskList
 2473 0164 00000000 		.word	xNumOfOverflows
 2474 0168 00000000 		.word	xNextTaskUnblockTime
 2475 016c 00000000 		.word	uxTopReadyPriority
 2476 0170 00000000 		.word	pxReadyTasksLists
 2477 0174 00000000 		.word	pxCurrentTCB
 2478 0178 00000000 		.word	uxPendedTicks
 2479 017c 00000000 		.word	xYieldPending
 2480              		.cfi_endproc
 2481              	.LFE19:
 2482              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2483              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2484              		.align	2
 2485              		.global	vTaskSwitchContext
 2486              		.thumb
 2487              		.thumb_func
 2488              		.type	vTaskSwitchContext, %function
 2489              	vTaskSwitchContext:
 2490              	.LFB20:
2022:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2023:FreeRTOS/tasks.c **** 
2024:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2025:FreeRTOS/tasks.c **** 
2026:FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2027:FreeRTOS/tasks.c **** 	{
2028:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2029:FreeRTOS/tasks.c **** 
2030:FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2031:FreeRTOS/tasks.c **** 		getting set. */
2032:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2033:FreeRTOS/tasks.c **** 		{
2034:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2035:FreeRTOS/tasks.c **** 		}
2036:FreeRTOS/tasks.c **** 		else
2037:FreeRTOS/tasks.c **** 		{
2038:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2039:FreeRTOS/tasks.c **** 		}
2040:FreeRTOS/tasks.c **** 
2041:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2042:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2043:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 81


2044:FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2045:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2046:FreeRTOS/tasks.c **** 	}
2047:FreeRTOS/tasks.c **** 
2048:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2049:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2050:FreeRTOS/tasks.c **** 
2051:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2052:FreeRTOS/tasks.c **** 
2053:FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2054:FreeRTOS/tasks.c **** 	{
2055:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2056:FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2057:FreeRTOS/tasks.c **** 
2058:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2059:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2060:FreeRTOS/tasks.c **** 		{
2061:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2062:FreeRTOS/tasks.c **** 		}
2063:FreeRTOS/tasks.c **** 		else
2064:FreeRTOS/tasks.c **** 		{
2065:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2066:FreeRTOS/tasks.c **** 		}
2067:FreeRTOS/tasks.c **** 
2068:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2069:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2070:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2071:FreeRTOS/tasks.c **** 		{
2072:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2073:FreeRTOS/tasks.c **** 		}
2074:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2075:FreeRTOS/tasks.c **** 
2076:FreeRTOS/tasks.c **** 		return xReturn;
2077:FreeRTOS/tasks.c **** 	}
2078:FreeRTOS/tasks.c **** 
2079:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2080:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2081:FreeRTOS/tasks.c **** 
2082:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2083:FreeRTOS/tasks.c **** 
2084:FreeRTOS/tasks.c **** 	BaseT_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2085:FreeRTOS/tasks.c **** 	{
2086:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2087:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
2088:FreeRTOS/tasks.c **** 
2089:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2090:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2091:FreeRTOS/tasks.c **** 		{
2092:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2093:FreeRTOS/tasks.c **** 		}
2094:FreeRTOS/tasks.c **** 		else
2095:FreeRTOS/tasks.c **** 		{
2096:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2097:FreeRTOS/tasks.c **** 		}
2098:FreeRTOS/tasks.c **** 
2099:FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2100:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 82


2101:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2102:FreeRTOS/tasks.c **** 		}
2103:FreeRTOS/tasks.c **** 		else
2104:FreeRTOS/tasks.c **** 		{
2105:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2106:FreeRTOS/tasks.c **** 		}
2107:FreeRTOS/tasks.c **** 
2108:FreeRTOS/tasks.c **** 		return xReturn;
2109:FreeRTOS/tasks.c **** 	}
2110:FreeRTOS/tasks.c **** 
2111:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2112:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2113:FreeRTOS/tasks.c **** 
2114:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2115:FreeRTOS/tasks.c **** {
 2491              		.loc 1 2115 0
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 16
 2494              		@ frame_needed = 1, uses_anonymous_args = 0
 2495 0000 80B5     		push	{r7, lr}	@
 2496              		.cfi_def_cfa_offset 8
 2497              		.cfi_offset 7, -8
 2498              		.cfi_offset 14, -4
 2499 0002 84B0     		sub	sp, sp, #16	@,,
 2500              		.cfi_def_cfa_offset 24
 2501 0004 00AF     		add	r7, sp, #0	@,,
 2502              		.cfi_def_cfa_register 7
2116:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseT_t ) pdFALSE )
 2503              		.loc 1 2116 0
 2504 0006 214B     		ldr	r3, .L188	@ tmp124,
 2505 0008 1B68     		ldr	r3, [r3]	@ D.6549, uxSchedulerSuspended
 2506 000a 002B     		cmp	r3, #0	@ D.6549,
 2507 000c 03D0     		beq	.L182	@,
2117:FreeRTOS/tasks.c **** 	{
2118:FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2119:FreeRTOS/tasks.c **** 		switch. */
2120:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2508              		.loc 1 2120 0
 2509 000e 204B     		ldr	r3, .L188+4	@ tmp125,
 2510 0010 0122     		movs	r2, #1	@ tmp126,
 2511 0012 1A60     		str	r2, [r3]	@ tmp126, xYieldPending
 2512 0014 37E0     		b	.L181	@
 2513              	.L182:
2121:FreeRTOS/tasks.c **** 	}
2122:FreeRTOS/tasks.c **** 	else
2123:FreeRTOS/tasks.c **** 	{
2124:FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
 2514              		.loc 1 2124 0
 2515 0016 1E4B     		ldr	r3, .L188+4	@ tmp127,
 2516 0018 0022     		movs	r2, #0	@ tmp128,
 2517 001a 1A60     		str	r2, [r3]	@ tmp128, xYieldPending
 2518              	.LBB10:
2125:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2126:FreeRTOS/tasks.c **** 
2127:FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2128:FreeRTOS/tasks.c **** 		{
2129:FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 83


2130:FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2131:FreeRTOS/tasks.c **** 				#else
2132:FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2133:FreeRTOS/tasks.c **** 				#endif
2134:FreeRTOS/tasks.c **** 
2135:FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2136:FreeRTOS/tasks.c **** 				accumulated	time so far.  The time the task started running was
2137:FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2138:FreeRTOS/tasks.c **** 				protection here	so count values are only valid until the timer
2139:FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2140:FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2141:FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2142:FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2143:FreeRTOS/tasks.c **** 				{
2144:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2145:FreeRTOS/tasks.c **** 				}
2146:FreeRTOS/tasks.c **** 				else
2147:FreeRTOS/tasks.c **** 				{
2148:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2149:FreeRTOS/tasks.c **** 				}
2150:FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2151:FreeRTOS/tasks.c **** 		}
2152:FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2153:FreeRTOS/tasks.c **** 
2154:FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2155:FreeRTOS/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
2156:FreeRTOS/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
2157:FreeRTOS/tasks.c **** 
2158:FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2159:FreeRTOS/tasks.c **** 		optimised asm code. */
2160:FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 2519              		.loc 1 2160 0
 2520 001c 1D4B     		ldr	r3, .L188+8	@ tmp129,
 2521 001e 1B68     		ldr	r3, [r3]	@ D.6549, uxTopReadyPriority
 2522 0020 7B60     		str	r3, [r7, #4]	@ D.6549, ulBitmap
 2523              	.LBB11:
 2524              	.LBB12:
 2525              		.file 2 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   5:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   7:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
   8:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
   9:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  13:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  17:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Thank you!                                                         *
  18:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  19:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 84


  20:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  21:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  23:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  27:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  38:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  40:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  41:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  44:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  46:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  47:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  48:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  51:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  62:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  63:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  64:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** */
  65:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  68:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  69:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  70:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  71:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  72:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
  73:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  74:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  75:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  76:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 85


  77:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  78:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  79:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  80:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  81:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  82:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  83:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  84:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  85:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  86:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  87:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  88:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  89:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  90:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  91:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  92:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  93:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  94:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackT_t;
  95:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  96:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseT_t;
  97:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  98:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseT_t;
  99:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 100:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 101:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 102:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 103:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #else
 104:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 105:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickT_t;
 106:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 108:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 111:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 112:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 113:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 114:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 115:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 116:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 118:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortYield( void );
 119:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 120:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 121:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD()					vPortYield()
 122:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 123:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 124:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 125:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 126:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 127:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 128:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 129:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 130:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 131:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 132:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 133:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 86


 134:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
 135:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 137:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 139:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 141:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 143:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 144:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 145:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 147:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 148:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 149:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 150:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 151:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 152:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 154:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 155:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 156:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 157:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 159:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 161:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 162:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	{
 163:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 164:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2526              		.loc 2 165 0
 2527 0022 7B68     		ldr	r3, [r7, #4]	@ tmp131, ulBitmap
 2528              	@ 165 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2529 0024 B3FA83F3 		clz r3, r3	@ ucReturn, tmp131
 2530              	@ 0 "" 2
 2531              		.thumb
 2532 0028 FB70     		strb	r3, [r7, #3]	@ ucReturn, ucReturn
 166:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2533              		.loc 2 166 0
 2534 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2	@ D.6555, ucReturn
 2535              	.LBE12:
 2536              	.LBE11:
 2537              		.loc 1 2160 0
 2538 002c C3F11F03 		rsb	r3, r3, #31	@ D.6550, D.6550,
 2539 0030 FB60     		str	r3, [r7, #12]	@ D.6550, uxTopPriority
 2540 0032 1949     		ldr	r1, .L188+12	@ tmp132,
 2541 0034 FA68     		ldr	r2, [r7, #12]	@ tmp133, uxTopPriority
 2542 0036 1346     		mov	r3, r2	@ tmp134, tmp133
 2543 0038 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 2544 003a 1344     		add	r3, r3, r2	@ tmp134, tmp133
 2545 003c 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 2546 003e 0B44     		add	r3, r3, r1	@ tmp136, tmp132
 2547 0040 1B68     		ldr	r3, [r3]	@ D.6549, pxReadyTasksLists[uxTopPriority_6].uxNumberOfItems
 2548 0042 002B     		cmp	r3, #0	@ D.6549,
 2549 0044 02D1     		bne	.L185	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 87


 2550              		.loc 1 2160 0 is_stmt 0 discriminator 1
 2551 0046 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2552              	.L186:
 2553 004a FEE7     		b	.L186	@
 2554              	.L185:
 2555              	.LBB13:
 2556              		.loc 1 2160 0 discriminator 2
 2557 004c FA68     		ldr	r2, [r7, #12]	@ tmp137, uxTopPriority
 2558 004e 1346     		mov	r3, r2	@ tmp138, tmp137
 2559 0050 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 2560 0052 1344     		add	r3, r3, r2	@ tmp138, tmp137
 2561 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 2562 0056 104A     		ldr	r2, .L188+12	@ tmp141,
 2563 0058 1344     		add	r3, r3, r2	@ tmp140, tmp141
 2564 005a BB60     		str	r3, [r7, #8]	@ tmp140, pxConstList
 2565 005c BB68     		ldr	r3, [r7, #8]	@ tmp142, pxConstList
 2566 005e 5B68     		ldr	r3, [r3, #4]	@ D.6551, pxConstList_8->pxIndex
 2567 0060 5A68     		ldr	r2, [r3, #4]	@ D.6552, _9->pxNext
 2568 0062 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxConstList
 2569 0064 5A60     		str	r2, [r3, #4]	@ D.6552, pxConstList_8->pxIndex
 2570 0066 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxConstList
 2571 0068 5A68     		ldr	r2, [r3, #4]	@ D.6551, pxConstList_8->pxIndex
 2572 006a BB68     		ldr	r3, [r7, #8]	@ tmp145, pxConstList
 2573 006c 0833     		adds	r3, r3, #8	@ D.6553, tmp145,
 2574 006e 9A42     		cmp	r2, r3	@ D.6551, D.6553
 2575 0070 04D1     		bne	.L187	@,
 2576              		.loc 1 2160 0 discriminator 3
 2577 0072 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxConstList
 2578 0074 5B68     		ldr	r3, [r3, #4]	@ D.6551, pxConstList_8->pxIndex
 2579 0076 5A68     		ldr	r2, [r3, #4]	@ D.6552, _13->pxNext
 2580 0078 BB68     		ldr	r3, [r7, #8]	@ tmp147, pxConstList
 2581 007a 5A60     		str	r2, [r3, #4]	@ D.6552, pxConstList_8->pxIndex
 2582              	.L187:
 2583              		.loc 1 2160 0 discriminator 5
 2584 007c BB68     		ldr	r3, [r7, #8]	@ tmp148, pxConstList
 2585 007e 5B68     		ldr	r3, [r3, #4]	@ D.6551, pxConstList_8->pxIndex
 2586 0080 DB68     		ldr	r3, [r3, #12]	@ D.6554, _15->pvOwner
 2587 0082 064A     		ldr	r2, .L188+16	@ tmp149,
 2588 0084 1360     		str	r3, [r2]	@ D.6554, pxCurrentTCB
 2589              	.L181:
 2590              	.LBE13:
 2591              	.LBE10:
2161:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2162:FreeRTOS/tasks.c **** 
2163:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2164:FreeRTOS/tasks.c **** 		{
2165:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2166:FreeRTOS/tasks.c **** 			structure specific to this task. */
2167:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2168:FreeRTOS/tasks.c **** 		}
2169:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2170:FreeRTOS/tasks.c **** 	}
2171:FreeRTOS/tasks.c **** }
 2592              		.loc 1 2171 0 is_stmt 1
 2593 0086 1037     		adds	r7, r7, #16	@,,
 2594              		.cfi_def_cfa_offset 8
 2595 0088 BD46     		mov	sp, r7	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 88


 2596              		.cfi_def_cfa_register 13
 2597              		@ sp needed	@
 2598 008a 80BD     		pop	{r7, pc}	@
 2599              	.L189:
 2600              		.align	2
 2601              	.L188:
 2602 008c 00000000 		.word	uxSchedulerSuspended
 2603 0090 00000000 		.word	xYieldPending
 2604 0094 00000000 		.word	uxTopReadyPriority
 2605 0098 00000000 		.word	pxReadyTasksLists
 2606 009c 00000000 		.word	pxCurrentTCB
 2607              		.cfi_endproc
 2608              	.LFE20:
 2609              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2610              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2611              		.align	2
 2612              		.global	vTaskPlaceOnEventList
 2613              		.thumb
 2614              		.thumb_func
 2615              		.type	vTaskPlaceOnEventList, %function
 2616              	vTaskPlaceOnEventList:
 2617              	.LFB21:
2172:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2173:FreeRTOS/tasks.c **** 
2174:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickT_t xTicksToWait )
2175:FreeRTOS/tasks.c **** {
 2618              		.loc 1 2175 0
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 16
 2621              		@ frame_needed = 1, uses_anonymous_args = 0
 2622 0000 80B5     		push	{r7, lr}	@
 2623              		.cfi_def_cfa_offset 8
 2624              		.cfi_offset 7, -8
 2625              		.cfi_offset 14, -4
 2626 0002 84B0     		sub	sp, sp, #16	@,,
 2627              		.cfi_def_cfa_offset 24
 2628 0004 00AF     		add	r7, sp, #0	@,,
 2629              		.cfi_def_cfa_register 7
 2630 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
 2631 0008 3960     		str	r1, [r7]	@ xTicksToWait, xTicksToWait
2176:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2177:FreeRTOS/tasks.c **** 
2178:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2632              		.loc 1 2178 0
 2633 000a 7B68     		ldr	r3, [r7, #4]	@ tmp125, pxEventList
 2634 000c 002B     		cmp	r3, #0	@ tmp125,
 2635 000e 02D1     		bne	.L191	@,
 2636              		.loc 1 2178 0 is_stmt 0 discriminator 1
 2637 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2638              	.L192:
 2639 0014 FEE7     		b	.L192	@
 2640              	.L191:
2179:FreeRTOS/tasks.c **** 
2180:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2181:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2182:FreeRTOS/tasks.c **** 
2183:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 89


2184:FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2185:FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2186:FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2187:FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2641              		.loc 1 2187 0 is_stmt 1
 2642 0016 194B     		ldr	r3, .L196	@ tmp126,
 2643 0018 1B68     		ldr	r3, [r3]	@ D.6557, pxCurrentTCB
 2644 001a 1833     		adds	r3, r3, #24	@ D.6558, D.6557,
 2645 001c 7868     		ldr	r0, [r7, #4]	@, pxEventList
 2646 001e 1946     		mov	r1, r3	@, D.6558
 2647 0020 FFF7FEFF 		bl	vListInsert	@
2188:FreeRTOS/tasks.c **** 
2189:FreeRTOS/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2190:FreeRTOS/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2191:FreeRTOS/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2192:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 2648              		.loc 1 2192 0
 2649 0024 154B     		ldr	r3, .L196	@ tmp127,
 2650 0026 1B68     		ldr	r3, [r3]	@ D.6557, pxCurrentTCB
 2651 0028 0433     		adds	r3, r3, #4	@ D.6558, D.6557,
 2652 002a 1846     		mov	r0, r3	@, D.6558
 2653 002c FFF7FEFF 		bl	uxListRemove	@
 2654 0030 0346     		mov	r3, r0	@ D.6559,
 2655 0032 002B     		cmp	r3, #0	@ D.6559,
 2656 0034 0BD1     		bne	.L193	@,
2193:FreeRTOS/tasks.c **** 	{
2194:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2195:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2196:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2657              		.loc 1 2196 0
 2658 0036 114B     		ldr	r3, .L196	@ tmp128,
 2659 0038 1B68     		ldr	r3, [r3]	@ D.6557, pxCurrentTCB
 2660 003a DB6A     		ldr	r3, [r3, #44]	@ D.6559, _7->uxPriority
 2661 003c 1A46     		mov	r2, r3	@ D.6560, D.6559
 2662 003e 0123     		movs	r3, #1	@ tmp129,
 2663 0040 9340     		lsls	r3, r3, r2	@ D.6559, tmp129, D.6560
 2664 0042 DA43     		mvns	r2, r3	@ D.6559, D.6559
 2665 0044 0E4B     		ldr	r3, .L196+4	@ tmp130,
 2666 0046 1B68     		ldr	r3, [r3]	@ D.6559, uxTopReadyPriority
 2667 0048 1340     		ands	r3, r3, r2	@, D.6559, D.6559, D.6559
 2668 004a 0D4A     		ldr	r2, .L196+4	@ tmp131,
 2669 004c 1360     		str	r3, [r2]	@ D.6559, uxTopReadyPriority
 2670              	.L193:
2197:FreeRTOS/tasks.c **** 	}
2198:FreeRTOS/tasks.c **** 	else
2199:FreeRTOS/tasks.c **** 	{
2200:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2201:FreeRTOS/tasks.c **** 	}
2202:FreeRTOS/tasks.c **** 
2203:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2204:FreeRTOS/tasks.c **** 	{
2205:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2671              		.loc 1 2205 0
 2672 004e 3B68     		ldr	r3, [r7]	@ tmp132, xTicksToWait
 2673 0050 B3F1FF3F 		cmp	r3, #-1	@ tmp132,
 2674 0054 07D1     		bne	.L194	@,
2206:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 90


2207:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2208:FreeRTOS/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2209:FreeRTOS/tasks.c **** 			block indefinitely. */
2210:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2675              		.loc 1 2210 0
 2676 0056 094B     		ldr	r3, .L196	@ tmp133,
 2677 0058 1B68     		ldr	r3, [r3]	@ D.6557, pxCurrentTCB
 2678 005a 0433     		adds	r3, r3, #4	@ D.6558, D.6557,
 2679 005c 0948     		ldr	r0, .L196+8	@,
 2680 005e 1946     		mov	r1, r3	@, D.6558
 2681 0060 FFF7FEFF 		bl	vListInsertEnd	@
 2682 0064 07E0     		b	.L190	@
 2683              	.L194:
2211:FreeRTOS/tasks.c **** 		}
2212:FreeRTOS/tasks.c **** 		else
2213:FreeRTOS/tasks.c **** 		{
2214:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2215:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2216:FreeRTOS/tasks.c **** 			scheduler will handle it. */
2217:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2684              		.loc 1 2217 0
 2685 0066 084B     		ldr	r3, .L196+12	@ tmp134,
 2686 0068 1A68     		ldr	r2, [r3]	@ D.6559, xTickCount
 2687 006a 3B68     		ldr	r3, [r7]	@ tmp136, xTicksToWait
 2688 006c 1344     		add	r3, r3, r2	@ tmp135, D.6559
 2689 006e FB60     		str	r3, [r7, #12]	@ tmp135, xTimeToWake
2218:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2690              		.loc 1 2218 0
 2691 0070 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 2692 0072 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2693              	.L190:
2219:FreeRTOS/tasks.c **** 		}
2220:FreeRTOS/tasks.c **** 	}
2221:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2222:FreeRTOS/tasks.c **** 	{
2223:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2224:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2225:FreeRTOS/tasks.c **** 			will handle it. */
2226:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2227:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2228:FreeRTOS/tasks.c **** 	}
2229:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2230:FreeRTOS/tasks.c **** }
 2694              		.loc 1 2230 0
 2695 0076 1037     		adds	r7, r7, #16	@,,
 2696              		.cfi_def_cfa_offset 8
 2697 0078 BD46     		mov	sp, r7	@,
 2698              		.cfi_def_cfa_register 13
 2699              		@ sp needed	@
 2700 007a 80BD     		pop	{r7, pc}	@
 2701              	.L197:
 2702              		.align	2
 2703              	.L196:
 2704 007c 00000000 		.word	pxCurrentTCB
 2705 0080 00000000 		.word	uxTopReadyPriority
 2706 0084 00000000 		.word	xSuspendedTaskList
 2707 0088 00000000 		.word	xTickCount
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 91


 2708              		.cfi_endproc
 2709              	.LFE21:
 2710              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2711              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2712              		.align	2
 2713              		.global	vTaskPlaceOnUnorderedEventList
 2714              		.thumb
 2715              		.thumb_func
 2716              		.type	vTaskPlaceOnUnorderedEventList, %function
 2717              	vTaskPlaceOnUnorderedEventList:
 2718              	.LFB22:
2231:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2232:FreeRTOS/tasks.c **** 
2233:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickT_t xItemValue, const TickT_t 
2234:FreeRTOS/tasks.c **** {
 2719              		.loc 1 2234 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 24
 2722              		@ frame_needed = 1, uses_anonymous_args = 0
 2723 0000 80B5     		push	{r7, lr}	@
 2724              		.cfi_def_cfa_offset 8
 2725              		.cfi_offset 7, -8
 2726              		.cfi_offset 14, -4
 2727 0002 86B0     		sub	sp, sp, #24	@,,
 2728              		.cfi_def_cfa_offset 32
 2729 0004 00AF     		add	r7, sp, #0	@,,
 2730              		.cfi_def_cfa_register 7
 2731 0006 F860     		str	r0, [r7, #12]	@ pxEventList, pxEventList
 2732 0008 B960     		str	r1, [r7, #8]	@ xItemValue, xItemValue
 2733 000a 7A60     		str	r2, [r7, #4]	@ xTicksToWait, xTicksToWait
2235:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2236:FreeRTOS/tasks.c **** 
2237:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2734              		.loc 1 2237 0
 2735 000c FB68     		ldr	r3, [r7, #12]	@ tmp128, pxEventList
 2736 000e 002B     		cmp	r3, #0	@ tmp128,
 2737 0010 02D1     		bne	.L199	@,
 2738              		.loc 1 2237 0 is_stmt 0 discriminator 1
 2739 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2740              	.L200:
 2741 0016 FEE7     		b	.L200	@
 2742              	.L199:
2238:FreeRTOS/tasks.c **** 
2239:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2240:FreeRTOS/tasks.c **** 	the event groups implementation. */
2241:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 2743              		.loc 1 2241 0 is_stmt 1
 2744 0018 1F4B     		ldr	r3, .L206	@ tmp129,
 2745 001a 1B68     		ldr	r3, [r3]	@ D.6561, uxSchedulerSuspended
 2746 001c 002B     		cmp	r3, #0	@ D.6561,
 2747 001e 02D1     		bne	.L201	@,
 2748              		.loc 1 2241 0 is_stmt 0 discriminator 1
 2749 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2750              	.L202:
 2751              		.loc 1 2241 0 discriminator 2
 2752 0024 FEE7     		b	.L202	@
 2753              	.L201:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 92


2242:FreeRTOS/tasks.c **** 
2243:FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2244:FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2245:FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2246:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2754              		.loc 1 2246 0 is_stmt 1
 2755 0026 1D4B     		ldr	r3, .L206+4	@ tmp130,
 2756 0028 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2757 002a BA68     		ldr	r2, [r7, #8]	@ tmp131, xItemValue
 2758 002c 42F00042 		orr	r2, r2, #-2147483648	@ D.6561, tmp131,
 2759 0030 9A61     		str	r2, [r3, #24]	@ D.6561, _3->xEventListItem.xItemValue
2247:FreeRTOS/tasks.c **** 
2248:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2249:FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2250:FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2251:FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2252:FreeRTOS/tasks.c **** 	the task level). */
2253:FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2760              		.loc 1 2253 0
 2761 0032 1A4B     		ldr	r3, .L206+4	@ tmp132,
 2762 0034 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2763 0036 1833     		adds	r3, r3, #24	@ D.6563, D.6562,
 2764 0038 F868     		ldr	r0, [r7, #12]	@, pxEventList
 2765 003a 1946     		mov	r1, r3	@, D.6563
 2766 003c FFF7FEFF 		bl	vListInsertEnd	@
2254:FreeRTOS/tasks.c **** 
2255:FreeRTOS/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2256:FreeRTOS/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2257:FreeRTOS/tasks.c **** 	scheduler is locked. */
2258:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 2767              		.loc 1 2258 0
 2768 0040 164B     		ldr	r3, .L206+4	@ tmp133,
 2769 0042 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2770 0044 0433     		adds	r3, r3, #4	@ D.6563, D.6562,
 2771 0046 1846     		mov	r0, r3	@, D.6563
 2772 0048 FFF7FEFF 		bl	uxListRemove	@
 2773 004c 0346     		mov	r3, r0	@ D.6561,
 2774 004e 002B     		cmp	r3, #0	@ D.6561,
 2775 0050 0BD1     		bne	.L203	@,
2259:FreeRTOS/tasks.c **** 	{
2260:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2261:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2262:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2776              		.loc 1 2262 0
 2777 0052 124B     		ldr	r3, .L206+4	@ tmp134,
 2778 0054 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2779 0056 DB6A     		ldr	r3, [r3, #44]	@ D.6561, _11->uxPriority
 2780 0058 1A46     		mov	r2, r3	@ D.6564, D.6561
 2781 005a 0123     		movs	r3, #1	@ tmp135,
 2782 005c 9340     		lsls	r3, r3, r2	@ D.6561, tmp135, D.6564
 2783 005e DA43     		mvns	r2, r3	@ D.6561, D.6561
 2784 0060 0F4B     		ldr	r3, .L206+8	@ tmp136,
 2785 0062 1B68     		ldr	r3, [r3]	@ D.6561, uxTopReadyPriority
 2786 0064 1340     		ands	r3, r3, r2	@, D.6561, D.6561, D.6561
 2787 0066 0E4A     		ldr	r2, .L206+8	@ tmp137,
 2788 0068 1360     		str	r3, [r2]	@ D.6561, uxTopReadyPriority
 2789              	.L203:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 93


2263:FreeRTOS/tasks.c **** 	}
2264:FreeRTOS/tasks.c **** 	else
2265:FreeRTOS/tasks.c **** 	{
2266:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2267:FreeRTOS/tasks.c **** 	}
2268:FreeRTOS/tasks.c **** 
2269:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2270:FreeRTOS/tasks.c **** 	{
2271:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2790              		.loc 1 2271 0
 2791 006a 7B68     		ldr	r3, [r7, #4]	@ tmp138, xTicksToWait
 2792 006c B3F1FF3F 		cmp	r3, #-1	@ tmp138,
 2793 0070 07D1     		bne	.L204	@,
2272:FreeRTOS/tasks.c **** 		{
2273:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2274:FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2275:FreeRTOS/tasks.c **** 			indefinitely. */
2276:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2794              		.loc 1 2276 0
 2795 0072 0A4B     		ldr	r3, .L206+4	@ tmp139,
 2796 0074 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2797 0076 0433     		adds	r3, r3, #4	@ D.6563, D.6562,
 2798 0078 0A48     		ldr	r0, .L206+12	@,
 2799 007a 1946     		mov	r1, r3	@, D.6563
 2800 007c FFF7FEFF 		bl	vListInsertEnd	@
 2801 0080 07E0     		b	.L198	@
 2802              	.L204:
2277:FreeRTOS/tasks.c **** 		}
2278:FreeRTOS/tasks.c **** 		else
2279:FreeRTOS/tasks.c **** 		{
2280:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2281:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2282:FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
2283:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2803              		.loc 1 2283 0
 2804 0082 094B     		ldr	r3, .L206+16	@ tmp140,
 2805 0084 1A68     		ldr	r2, [r3]	@ D.6561, xTickCount
 2806 0086 7B68     		ldr	r3, [r7, #4]	@ tmp142, xTicksToWait
 2807 0088 1344     		add	r3, r3, r2	@ tmp141, D.6561
 2808 008a 7B61     		str	r3, [r7, #20]	@ tmp141, xTimeToWake
2284:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2809              		.loc 1 2284 0
 2810 008c 7869     		ldr	r0, [r7, #20]	@, xTimeToWake
 2811 008e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2812              	.L198:
2285:FreeRTOS/tasks.c **** 		}
2286:FreeRTOS/tasks.c **** 	}
2287:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2288:FreeRTOS/tasks.c **** 	{
2289:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2290:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2291:FreeRTOS/tasks.c **** 			will manage it correctly. */
2292:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2293:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2294:FreeRTOS/tasks.c **** 	}
2295:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2296:FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 94


 2813              		.loc 1 2296 0
 2814 0092 1837     		adds	r7, r7, #24	@,,
 2815              		.cfi_def_cfa_offset 8
 2816 0094 BD46     		mov	sp, r7	@,
 2817              		.cfi_def_cfa_register 13
 2818              		@ sp needed	@
 2819 0096 80BD     		pop	{r7, pc}	@
 2820              	.L207:
 2821              		.align	2
 2822              	.L206:
 2823 0098 00000000 		.word	uxSchedulerSuspended
 2824 009c 00000000 		.word	pxCurrentTCB
 2825 00a0 00000000 		.word	uxTopReadyPriority
 2826 00a4 00000000 		.word	xSuspendedTaskList
 2827 00a8 00000000 		.word	xTickCount
 2828              		.cfi_endproc
 2829              	.LFE22:
 2830              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2831              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2832              		.align	2
 2833              		.global	xTaskRemoveFromEventList
 2834              		.thumb
 2835              		.thumb_func
 2836              		.type	xTaskRemoveFromEventList, %function
 2837              	xTaskRemoveFromEventList:
 2838              	.LFB23:
2297:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2298:FreeRTOS/tasks.c **** 
2299:FreeRTOS/tasks.c **** #if configUSE_TIMERS == 1
2300:FreeRTOS/tasks.c **** 
2301:FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickT_t xTicksToWait )
2302:FreeRTOS/tasks.c **** 	{
2303:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
2304:FreeRTOS/tasks.c **** 
2305:FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2306:FreeRTOS/tasks.c **** 
2307:FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2308:FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2309:FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2310:FreeRTOS/tasks.c **** 		it should be called from a critical section. */
2311:FreeRTOS/tasks.c **** 
2312:FreeRTOS/tasks.c **** 
2313:FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2314:FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2315:FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2316:FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2317:FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2318:FreeRTOS/tasks.c **** 
2319:FreeRTOS/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2320:FreeRTOS/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2321:FreeRTOS/tasks.c **** 		function is called form a critical section. */
2322:FreeRTOS/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
2323:FreeRTOS/tasks.c **** 		{
2324:FreeRTOS/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2325:FreeRTOS/tasks.c **** 			check, and the port reset macro can be called directly. */
2326:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2327:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 95


2328:FreeRTOS/tasks.c **** 		else
2329:FreeRTOS/tasks.c **** 		{
2330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2331:FreeRTOS/tasks.c **** 		}
2332:FreeRTOS/tasks.c **** 
2333:FreeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
2334:FreeRTOS/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
2335:FreeRTOS/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
2336:FreeRTOS/tasks.c **** 
2337:FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL();
2338:FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
2339:FreeRTOS/tasks.c **** 	}
2340:FreeRTOS/tasks.c **** 
2341:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2342:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2343:FreeRTOS/tasks.c **** 
2344:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2345:FreeRTOS/tasks.c **** {
 2839              		.loc 1 2345 0
 2840              		.cfi_startproc
 2841              		@ args = 0, pretend = 0, frame = 16
 2842              		@ frame_needed = 1, uses_anonymous_args = 0
 2843 0000 80B5     		push	{r7, lr}	@
 2844              		.cfi_def_cfa_offset 8
 2845              		.cfi_offset 7, -8
 2846              		.cfi_offset 14, -4
 2847 0002 84B0     		sub	sp, sp, #16	@,,
 2848              		.cfi_def_cfa_offset 24
 2849 0004 00AF     		add	r7, sp, #0	@,,
 2850              		.cfi_def_cfa_register 7
 2851 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
2346:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2347:FreeRTOS/tasks.c **** BaseT_t xReturn;
2348:FreeRTOS/tasks.c **** 
2349:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2350:FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2351:FreeRTOS/tasks.c **** 
2352:FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2353:FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2354:FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2355:FreeRTOS/tasks.c **** 
2356:FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2357:FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2358:FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2359:FreeRTOS/tasks.c **** 
2360:FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2361:FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2362:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2852              		.loc 1 2362 0
 2853 0008 7B68     		ldr	r3, [r7, #4]	@ tmp128, pxEventList
 2854 000a DB68     		ldr	r3, [r3, #12]	@ D.6565, pxEventList_2(D)->xListEnd.pxNext
 2855 000c DB68     		ldr	r3, [r3, #12]	@ tmp129, _3->pvOwner
 2856 000e BB60     		str	r3, [r7, #8]	@ tmp129, pxUnblockedTCB
2363:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2857              		.loc 1 2363 0
 2858 0010 BB68     		ldr	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
 2859 0012 002B     		cmp	r3, #0	@ tmp130,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 96


 2860 0014 02D1     		bne	.L209	@,
 2861              		.loc 1 2363 0 is_stmt 0 discriminator 1
 2862 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2863              	.L210:
 2864 001a FEE7     		b	.L210	@
 2865              	.L209:
2364:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2866              		.loc 1 2364 0 is_stmt 1
 2867 001c BB68     		ldr	r3, [r7, #8]	@ tmp131, pxUnblockedTCB
 2868 001e 1833     		adds	r3, r3, #24	@ D.6566, tmp131,
 2869 0020 1846     		mov	r0, r3	@, D.6566
 2870 0022 FFF7FEFF 		bl	uxListRemove	@
2365:FreeRTOS/tasks.c **** 
2366:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2871              		.loc 1 2366 0
 2872 0026 1E4B     		ldr	r3, .L216	@ tmp132,
 2873 0028 1B68     		ldr	r3, [r3]	@ D.6567, uxSchedulerSuspended
 2874 002a 002B     		cmp	r3, #0	@ D.6567,
 2875 002c 1ED1     		bne	.L211	@,
2367:FreeRTOS/tasks.c **** 	{
2368:FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2876              		.loc 1 2368 0
 2877 002e BB68     		ldr	r3, [r7, #8]	@ tmp133, pxUnblockedTCB
 2878 0030 0433     		adds	r3, r3, #4	@ D.6566, tmp133,
 2879 0032 1846     		mov	r0, r3	@, D.6566
 2880 0034 FFF7FEFF 		bl	uxListRemove	@
2369:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2881              		.loc 1 2369 0
 2882 0038 BB68     		ldr	r3, [r7, #8]	@ tmp134, pxUnblockedTCB
 2883 003a DB6A     		ldr	r3, [r3, #44]	@ D.6567, pxUnblockedTCB_4->uxPriority
 2884 003c 1A46     		mov	r2, r3	@ D.6568, D.6567
 2885 003e 0123     		movs	r3, #1	@ tmp135,
 2886 0040 03FA02F2 		lsl	r2, r3, r2	@ D.6567, tmp135, D.6568
 2887 0044 174B     		ldr	r3, .L216+4	@ tmp136,
 2888 0046 1B68     		ldr	r3, [r3]	@ D.6567, uxTopReadyPriority
 2889 0048 1343     		orrs	r3, r3, r2	@, D.6567, D.6567, D.6567
 2890 004a 164A     		ldr	r2, .L216+4	@ tmp137,
 2891 004c 1360     		str	r3, [r2]	@ D.6567, uxTopReadyPriority
 2892 004e BB68     		ldr	r3, [r7, #8]	@ tmp138, pxUnblockedTCB
 2893 0050 DA6A     		ldr	r2, [r3, #44]	@ D.6567, pxUnblockedTCB_4->uxPriority
 2894 0052 1346     		mov	r3, r2	@ tmp139, D.6567
 2895 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp139,
 2896 0056 1344     		add	r3, r3, r2	@ tmp139, D.6567
 2897 0058 9B00     		lsls	r3, r3, #2	@ tmp140, tmp139,
 2898 005a 134A     		ldr	r2, .L216+8	@ tmp141,
 2899 005c 1A44     		add	r2, r2, r3	@ D.6569, tmp139
 2900 005e BB68     		ldr	r3, [r7, #8]	@ tmp142, pxUnblockedTCB
 2901 0060 0433     		adds	r3, r3, #4	@ D.6566, tmp142,
 2902 0062 1046     		mov	r0, r2	@, D.6569
 2903 0064 1946     		mov	r1, r3	@, D.6566
 2904 0066 FFF7FEFF 		bl	vListInsertEnd	@
 2905 006a 05E0     		b	.L212	@
 2906              	.L211:
2370:FreeRTOS/tasks.c **** 	}
2371:FreeRTOS/tasks.c **** 	else
2372:FreeRTOS/tasks.c **** 	{
2373:FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 97


2374:FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2375:FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2907              		.loc 1 2375 0
 2908 006c BB68     		ldr	r3, [r7, #8]	@ tmp143, pxUnblockedTCB
 2909 006e 1833     		adds	r3, r3, #24	@ D.6566, tmp143,
 2910 0070 0E48     		ldr	r0, .L216+12	@,
 2911 0072 1946     		mov	r1, r3	@, D.6566
 2912 0074 FFF7FEFF 		bl	vListInsertEnd	@
 2913              	.L212:
2376:FreeRTOS/tasks.c **** 	}
2377:FreeRTOS/tasks.c **** 
2378:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2914              		.loc 1 2378 0
 2915 0078 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxUnblockedTCB
 2916 007a DA6A     		ldr	r2, [r3, #44]	@ D.6567, pxUnblockedTCB_4->uxPriority
 2917 007c 0C4B     		ldr	r3, .L216+16	@ tmp145,
 2918 007e 1B68     		ldr	r3, [r3]	@ D.6570, pxCurrentTCB
 2919 0080 DB6A     		ldr	r3, [r3, #44]	@ D.6567, _18->uxPriority
 2920 0082 9A42     		cmp	r2, r3	@ D.6567, D.6567
 2921 0084 05D9     		bls	.L213	@,
2379:FreeRTOS/tasks.c **** 	{
2380:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2381:FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2382:FreeRTOS/tasks.c **** 		it should force a context switch now. */
2383:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 2922              		.loc 1 2383 0
 2923 0086 0123     		movs	r3, #1	@ tmp146,
 2924 0088 FB60     		str	r3, [r7, #12]	@ tmp146, xReturn
2384:FreeRTOS/tasks.c **** 
2385:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2386:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2387:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2925              		.loc 1 2387 0
 2926 008a 0A4B     		ldr	r3, .L216+20	@ tmp147,
 2927 008c 0122     		movs	r2, #1	@ tmp148,
 2928 008e 1A60     		str	r2, [r3]	@ tmp148, xYieldPending
 2929 0090 01E0     		b	.L214	@
 2930              	.L213:
2388:FreeRTOS/tasks.c **** 	}
2389:FreeRTOS/tasks.c **** 	else
2390:FreeRTOS/tasks.c **** 	{
2391:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 2931              		.loc 1 2391 0
 2932 0092 0023     		movs	r3, #0	@ tmp149,
 2933 0094 FB60     		str	r3, [r7, #12]	@ tmp149, xReturn
 2934              	.L214:
2392:FreeRTOS/tasks.c **** 	}
2393:FreeRTOS/tasks.c **** 
2394:FreeRTOS/tasks.c **** 	return xReturn;
 2935              		.loc 1 2394 0
 2936 0096 FB68     		ldr	r3, [r7, #12]	@ D.6571, xReturn
2395:FreeRTOS/tasks.c **** }
 2937              		.loc 1 2395 0
 2938 0098 1846     		mov	r0, r3	@, <retval>
 2939 009a 1037     		adds	r7, r7, #16	@,,
 2940              		.cfi_def_cfa_offset 8
 2941 009c BD46     		mov	sp, r7	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 98


 2942              		.cfi_def_cfa_register 13
 2943              		@ sp needed	@
 2944 009e 80BD     		pop	{r7, pc}	@
 2945              	.L217:
 2946              		.align	2
 2947              	.L216:
 2948 00a0 00000000 		.word	uxSchedulerSuspended
 2949 00a4 00000000 		.word	uxTopReadyPriority
 2950 00a8 00000000 		.word	pxReadyTasksLists
 2951 00ac 00000000 		.word	xPendingReadyList
 2952 00b0 00000000 		.word	pxCurrentTCB
 2953 00b4 00000000 		.word	xYieldPending
 2954              		.cfi_endproc
 2955              	.LFE23:
 2956              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2957              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2958              		.align	2
 2959              		.global	xTaskRemoveFromUnorderedEventList
 2960              		.thumb
 2961              		.thumb_func
 2962              		.type	xTaskRemoveFromUnorderedEventList, %function
 2963              	xTaskRemoveFromUnorderedEventList:
 2964              	.LFB24:
2396:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2397:FreeRTOS/tasks.c **** 
2398:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickT_t xItemValue )
2399:FreeRTOS/tasks.c **** {
 2965              		.loc 1 2399 0
 2966              		.cfi_startproc
 2967              		@ args = 0, pretend = 0, frame = 16
 2968              		@ frame_needed = 1, uses_anonymous_args = 0
 2969 0000 80B5     		push	{r7, lr}	@
 2970              		.cfi_def_cfa_offset 8
 2971              		.cfi_offset 7, -8
 2972              		.cfi_offset 14, -4
 2973 0002 84B0     		sub	sp, sp, #16	@,,
 2974              		.cfi_def_cfa_offset 24
 2975 0004 00AF     		add	r7, sp, #0	@,,
 2976              		.cfi_def_cfa_register 7
 2977 0006 7860     		str	r0, [r7, #4]	@ pxEventListItem, pxEventListItem
 2978 0008 3960     		str	r1, [r7]	@ xItemValue, xItemValue
2400:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2401:FreeRTOS/tasks.c **** BaseT_t xReturn;
2402:FreeRTOS/tasks.c **** 
2403:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2404:FreeRTOS/tasks.c **** 	the event flags implementation. */
2405:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 2979              		.loc 1 2405 0
 2980 000a 254B     		ldr	r3, .L226	@ tmp126,
 2981 000c 1B68     		ldr	r3, [r3]	@ D.6572, uxSchedulerSuspended
 2982 000e 002B     		cmp	r3, #0	@ D.6572,
 2983 0010 02D1     		bne	.L219	@,
 2984              		.loc 1 2405 0 is_stmt 0 discriminator 1
 2985 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2986              	.L220:
 2987 0016 FEE7     		b	.L220	@
 2988              	.L219:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 99


2406:FreeRTOS/tasks.c **** 
2407:FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2408:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 2989              		.loc 1 2408 0 is_stmt 1
 2990 0018 3B68     		ldr	r3, [r7]	@ tmp127, xItemValue
 2991 001a 43F00042 		orr	r2, r3, #-2147483648	@ D.6572, tmp127,
 2992 001e 7B68     		ldr	r3, [r7, #4]	@ tmp128, pxEventListItem
 2993 0020 1A60     		str	r2, [r3]	@ D.6572, pxEventListItem_5(D)->xItemValue
2409:FreeRTOS/tasks.c **** 
2410:FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2411:FreeRTOS/tasks.c **** 	event flags. */
2412:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 2994              		.loc 1 2412 0
 2995 0022 7B68     		ldr	r3, [r7, #4]	@ tmp129, pxEventListItem
 2996 0024 DB68     		ldr	r3, [r3, #12]	@ tmp130, pxEventListItem_5(D)->pvOwner
 2997 0026 BB60     		str	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
2413:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2998              		.loc 1 2413 0
 2999 0028 BB68     		ldr	r3, [r7, #8]	@ tmp131, pxUnblockedTCB
 3000 002a 002B     		cmp	r3, #0	@ tmp131,
 3001 002c 02D1     		bne	.L221	@,
 3002              		.loc 1 2413 0 is_stmt 0 discriminator 1
 3003 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3004              	.L222:
 3005              		.loc 1 2413 0 discriminator 2
 3006 0032 FEE7     		b	.L222	@
 3007              	.L221:
2414:FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3008              		.loc 1 2414 0 is_stmt 1
 3009 0034 7868     		ldr	r0, [r7, #4]	@, pxEventListItem
 3010 0036 FFF7FEFF 		bl	uxListRemove	@
2415:FreeRTOS/tasks.c **** 
2416:FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2417:FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2418:FreeRTOS/tasks.c **** 	lists. */
2419:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3011              		.loc 1 2419 0
 3012 003a BB68     		ldr	r3, [r7, #8]	@ tmp132, pxUnblockedTCB
 3013 003c 0433     		adds	r3, r3, #4	@ D.6573, tmp132,
 3014 003e 1846     		mov	r0, r3	@, D.6573
 3015 0040 FFF7FEFF 		bl	uxListRemove	@
2420:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3016              		.loc 1 2420 0
 3017 0044 BB68     		ldr	r3, [r7, #8]	@ tmp133, pxUnblockedTCB
 3018 0046 DB6A     		ldr	r3, [r3, #44]	@ D.6572, pxUnblockedTCB_6->uxPriority
 3019 0048 1A46     		mov	r2, r3	@ D.6574, D.6572
 3020 004a 0123     		movs	r3, #1	@ tmp134,
 3021 004c 03FA02F2 		lsl	r2, r3, r2	@ D.6572, tmp134, D.6574
 3022 0050 144B     		ldr	r3, .L226+4	@ tmp135,
 3023 0052 1B68     		ldr	r3, [r3]	@ D.6572, uxTopReadyPriority
 3024 0054 1343     		orrs	r3, r3, r2	@, D.6572, D.6572, D.6572
 3025 0056 134A     		ldr	r2, .L226+4	@ tmp136,
 3026 0058 1360     		str	r3, [r2]	@ D.6572, uxTopReadyPriority
 3027 005a BB68     		ldr	r3, [r7, #8]	@ tmp137, pxUnblockedTCB
 3028 005c DA6A     		ldr	r2, [r3, #44]	@ D.6572, pxUnblockedTCB_6->uxPriority
 3029 005e 1346     		mov	r3, r2	@ tmp138, D.6572
 3030 0060 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 100


 3031 0062 1344     		add	r3, r3, r2	@ tmp138, D.6572
 3032 0064 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 3033 0066 104A     		ldr	r2, .L226+8	@ tmp140,
 3034 0068 1A44     		add	r2, r2, r3	@ D.6575, tmp138
 3035 006a BB68     		ldr	r3, [r7, #8]	@ tmp141, pxUnblockedTCB
 3036 006c 0433     		adds	r3, r3, #4	@ D.6573, tmp141,
 3037 006e 1046     		mov	r0, r2	@, D.6575
 3038 0070 1946     		mov	r1, r3	@, D.6573
 3039 0072 FFF7FEFF 		bl	vListInsertEnd	@
2421:FreeRTOS/tasks.c **** 
2422:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3040              		.loc 1 2422 0
 3041 0076 BB68     		ldr	r3, [r7, #8]	@ tmp142, pxUnblockedTCB
 3042 0078 DA6A     		ldr	r2, [r3, #44]	@ D.6572, pxUnblockedTCB_6->uxPriority
 3043 007a 0C4B     		ldr	r3, .L226+12	@ tmp143,
 3044 007c 1B68     		ldr	r3, [r3]	@ D.6576, pxCurrentTCB
 3045 007e DB6A     		ldr	r3, [r3, #44]	@ D.6572, _17->uxPriority
 3046 0080 9A42     		cmp	r2, r3	@ D.6572, D.6572
 3047 0082 05D9     		bls	.L223	@,
2423:FreeRTOS/tasks.c **** 	{
2424:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2425:FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2426:FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2427:FreeRTOS/tasks.c **** 		switch now. */
2428:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 3048              		.loc 1 2428 0
 3049 0084 0123     		movs	r3, #1	@ tmp144,
 3050 0086 FB60     		str	r3, [r7, #12]	@ tmp144, xReturn
2429:FreeRTOS/tasks.c **** 
2430:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2431:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2432:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3051              		.loc 1 2432 0
 3052 0088 094B     		ldr	r3, .L226+16	@ tmp145,
 3053 008a 0122     		movs	r2, #1	@ tmp146,
 3054 008c 1A60     		str	r2, [r3]	@ tmp146, xYieldPending
 3055 008e 01E0     		b	.L224	@
 3056              	.L223:
2433:FreeRTOS/tasks.c **** 	}
2434:FreeRTOS/tasks.c **** 	else
2435:FreeRTOS/tasks.c **** 	{
2436:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 3057              		.loc 1 2436 0
 3058 0090 0023     		movs	r3, #0	@ tmp147,
 3059 0092 FB60     		str	r3, [r7, #12]	@ tmp147, xReturn
 3060              	.L224:
2437:FreeRTOS/tasks.c **** 	}
2438:FreeRTOS/tasks.c **** 
2439:FreeRTOS/tasks.c **** 	return xReturn;
 3061              		.loc 1 2439 0
 3062 0094 FB68     		ldr	r3, [r7, #12]	@ D.6577, xReturn
2440:FreeRTOS/tasks.c **** }
 3063              		.loc 1 2440 0
 3064 0096 1846     		mov	r0, r3	@, <retval>
 3065 0098 1037     		adds	r7, r7, #16	@,,
 3066              		.cfi_def_cfa_offset 8
 3067 009a BD46     		mov	sp, r7	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 101


 3068              		.cfi_def_cfa_register 13
 3069              		@ sp needed	@
 3070 009c 80BD     		pop	{r7, pc}	@
 3071              	.L227:
 3072 009e 00BF     		.align	2
 3073              	.L226:
 3074 00a0 00000000 		.word	uxSchedulerSuspended
 3075 00a4 00000000 		.word	uxTopReadyPriority
 3076 00a8 00000000 		.word	pxReadyTasksLists
 3077 00ac 00000000 		.word	pxCurrentTCB
 3078 00b0 00000000 		.word	xYieldPending
 3079              		.cfi_endproc
 3080              	.LFE24:
 3081              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 3082              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3083              		.align	2
 3084              		.global	vTaskSetTimeOutState
 3085              		.thumb
 3086              		.thumb_func
 3087              		.type	vTaskSetTimeOutState, %function
 3088              	vTaskSetTimeOutState:
 3089              	.LFB25:
2441:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2442:FreeRTOS/tasks.c **** 
2443:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2444:FreeRTOS/tasks.c **** {
 3090              		.loc 1 2444 0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 8
 3093              		@ frame_needed = 1, uses_anonymous_args = 0
 3094 0000 80B5     		push	{r7, lr}	@
 3095              		.cfi_def_cfa_offset 8
 3096              		.cfi_offset 7, -8
 3097              		.cfi_offset 14, -4
 3098 0002 82B0     		sub	sp, sp, #8	@,,
 3099              		.cfi_def_cfa_offset 16
 3100 0004 00AF     		add	r7, sp, #0	@,,
 3101              		.cfi_def_cfa_register 7
 3102 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
2445:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3103              		.loc 1 2445 0
 3104 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, pxTimeOut
 3105 000a 002B     		cmp	r3, #0	@ tmp112,
 3106 000c 02D1     		bne	.L229	@,
 3107              		.loc 1 2445 0 is_stmt 0 discriminator 1
 3108 000e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3109              	.L230:
 3110 0012 FEE7     		b	.L230	@
 3111              	.L229:
2446:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3112              		.loc 1 2446 0 is_stmt 1
 3113 0014 054B     		ldr	r3, .L231	@ tmp113,
 3114 0016 1A68     		ldr	r2, [r3]	@ D.6578, xNumOfOverflows
 3115 0018 7B68     		ldr	r3, [r7, #4]	@ tmp114, pxTimeOut
 3116 001a 1A60     		str	r2, [r3]	@ D.6578, pxTimeOut_1(D)->xOverflowCount
2447:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3117              		.loc 1 2447 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 102


 3118 001c 044B     		ldr	r3, .L231+4	@ tmp115,
 3119 001e 1A68     		ldr	r2, [r3]	@ D.6579, xTickCount
 3120 0020 7B68     		ldr	r3, [r7, #4]	@ tmp116, pxTimeOut
 3121 0022 5A60     		str	r2, [r3, #4]	@ D.6579, pxTimeOut_1(D)->xTimeOnEntering
2448:FreeRTOS/tasks.c **** }
 3122              		.loc 1 2448 0
 3123 0024 0837     		adds	r7, r7, #8	@,,
 3124              		.cfi_def_cfa_offset 8
 3125 0026 BD46     		mov	sp, r7	@,
 3126              		.cfi_def_cfa_register 13
 3127              		@ sp needed	@
 3128 0028 80BD     		pop	{r7, pc}	@
 3129              	.L232:
 3130 002a 00BF     		.align	2
 3131              	.L231:
 3132 002c 00000000 		.word	xNumOfOverflows
 3133 0030 00000000 		.word	xTickCount
 3134              		.cfi_endproc
 3135              	.LFE25:
 3136              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3137              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3138              		.align	2
 3139              		.global	xTaskCheckForTimeOut
 3140              		.thumb
 3141              		.thumb_func
 3142              		.type	xTaskCheckForTimeOut, %function
 3143              	xTaskCheckForTimeOut:
 3144              	.LFB26:
2449:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2450:FreeRTOS/tasks.c **** 
2451:FreeRTOS/tasks.c **** BaseT_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickT_t * const pxTicksToWait )
2452:FreeRTOS/tasks.c **** {
 3145              		.loc 1 2452 0
 3146              		.cfi_startproc
 3147              		@ args = 0, pretend = 0, frame = 16
 3148              		@ frame_needed = 1, uses_anonymous_args = 0
 3149 0000 80B5     		push	{r7, lr}	@
 3150              		.cfi_def_cfa_offset 8
 3151              		.cfi_offset 7, -8
 3152              		.cfi_offset 14, -4
 3153 0002 84B0     		sub	sp, sp, #16	@,,
 3154              		.cfi_def_cfa_offset 24
 3155 0004 00AF     		add	r7, sp, #0	@,,
 3156              		.cfi_def_cfa_register 7
 3157 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
 3158 0008 3960     		str	r1, [r7]	@ pxTicksToWait, pxTicksToWait
2453:FreeRTOS/tasks.c **** BaseT_t xReturn;
2454:FreeRTOS/tasks.c **** 
2455:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3159              		.loc 1 2455 0
 3160 000a 7B68     		ldr	r3, [r7, #4]	@ tmp123, pxTimeOut
 3161 000c 002B     		cmp	r3, #0	@ tmp123,
 3162 000e 02D1     		bne	.L234	@,
 3163              		.loc 1 2455 0 is_stmt 0 discriminator 1
 3164 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3165              	.L235:
 3166 0014 FEE7     		b	.L235	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 103


 3167              	.L234:
2456:FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 3168              		.loc 1 2456 0 is_stmt 1
 3169 0016 3B68     		ldr	r3, [r7]	@ tmp124, pxTicksToWait
 3170 0018 002B     		cmp	r3, #0	@ tmp124,
 3171 001a 02D1     		bne	.L236	@,
 3172              		.loc 1 2456 0 is_stmt 0 discriminator 1
 3173 001c FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3174              	.L237:
 3175              		.loc 1 2456 0 discriminator 2
 3176 0020 FEE7     		b	.L237	@
 3177              	.L236:
2457:FreeRTOS/tasks.c **** 
2458:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 3178              		.loc 1 2458 0 is_stmt 1
 3179 0022 FFF7FEFF 		bl	vPortEnterCritical	@
 3180              	.LBB14:
2459:FreeRTOS/tasks.c **** 	{
2460:FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2461:FreeRTOS/tasks.c **** 		const TickT_t xConstTickCount = xTickCount;
 3181              		.loc 1 2461 0
 3182 0026 1C4B     		ldr	r3, .L243	@ tmp125,
 3183 0028 1B68     		ldr	r3, [r3]	@ tmp126, xTickCount
 3184 002a BB60     		str	r3, [r7, #8]	@ tmp126, xConstTickCount
2462:FreeRTOS/tasks.c **** 
2463:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2464:FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2465:FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2466:FreeRTOS/tasks.c **** 			therefore never time out. */
2467:FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3185              		.loc 1 2467 0
 3186 002c 3B68     		ldr	r3, [r7]	@ tmp127, pxTicksToWait
 3187 002e 1B68     		ldr	r3, [r3]	@ D.6580, *pxTicksToWait_3(D)
 3188 0030 B3F1FF3F 		cmp	r3, #-1	@ D.6580,
 3189 0034 02D1     		bne	.L238	@,
2468:FreeRTOS/tasks.c **** 			{
2469:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
 3190              		.loc 1 2469 0
 3191 0036 0023     		movs	r3, #0	@ tmp128,
 3192 0038 FB60     		str	r3, [r7, #12]	@ tmp128, xReturn
 3193 003a 26E0     		b	.L239	@
 3194              	.L238:
2470:FreeRTOS/tasks.c **** 			}
2471:FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2472:FreeRTOS/tasks.c **** 		#endif
2473:FreeRTOS/tasks.c **** 
2474:FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3195              		.loc 1 2474 0
 3196 003c 7B68     		ldr	r3, [r7, #4]	@ tmp129, pxTimeOut
 3197 003e 1A68     		ldr	r2, [r3]	@ D.6581, pxTimeOut_2(D)->xOverflowCount
 3198 0040 164B     		ldr	r3, .L243+4	@ tmp130,
 3199 0042 1B68     		ldr	r3, [r3]	@ D.6581, xNumOfOverflows
 3200 0044 9A42     		cmp	r2, r3	@ D.6581, D.6581
 3201 0046 07D0     		beq	.L240	@,
 3202              		.loc 1 2474 0 is_stmt 0 discriminator 1
 3203 0048 7B68     		ldr	r3, [r7, #4]	@ tmp131, pxTimeOut
 3204 004a 5A68     		ldr	r2, [r3, #4]	@ D.6580, pxTimeOut_2(D)->xTimeOnEntering
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 104


 3205 004c BB68     		ldr	r3, [r7, #8]	@ tmp132, xConstTickCount
 3206 004e 9A42     		cmp	r2, r3	@ D.6580, tmp132
 3207 0050 02D8     		bhi	.L240	@,
2475:FreeRTOS/tasks.c **** 		{
2476:FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2477:FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2478:FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2479:FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2480:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3208              		.loc 1 2480 0 is_stmt 1
 3209 0052 0123     		movs	r3, #1	@ tmp133,
 3210 0054 FB60     		str	r3, [r7, #12]	@ tmp133, xReturn
 3211 0056 18E0     		b	.L239	@
 3212              	.L240:
2481:FreeRTOS/tasks.c **** 		}
2482:FreeRTOS/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 3213              		.loc 1 2482 0
 3214 0058 7B68     		ldr	r3, [r7, #4]	@ tmp134, pxTimeOut
 3215 005a 5B68     		ldr	r3, [r3, #4]	@ D.6580, pxTimeOut_2(D)->xTimeOnEntering
 3216 005c BA68     		ldr	r2, [r7, #8]	@ tmp135, xConstTickCount
 3217 005e D21A     		subs	r2, r2, r3	@ D.6580, tmp135, D.6580
 3218 0060 3B68     		ldr	r3, [r7]	@ tmp136, pxTicksToWait
 3219 0062 1B68     		ldr	r3, [r3]	@ D.6580, *pxTicksToWait_3(D)
 3220 0064 9A42     		cmp	r2, r3	@ D.6580, D.6580
 3221 0066 0ED2     		bcs	.L241	@,
2483:FreeRTOS/tasks.c **** 		{
2484:FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2485:FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 3222              		.loc 1 2485 0
 3223 0068 3B68     		ldr	r3, [r7]	@ tmp137, pxTicksToWait
 3224 006a 1A68     		ldr	r2, [r3]	@ D.6580, *pxTicksToWait_3(D)
 3225 006c 7B68     		ldr	r3, [r7, #4]	@ tmp138, pxTimeOut
 3226 006e 5968     		ldr	r1, [r3, #4]	@ D.6580, pxTimeOut_2(D)->xTimeOnEntering
 3227 0070 BB68     		ldr	r3, [r7, #8]	@ tmp139, xConstTickCount
 3228 0072 CB1A     		subs	r3, r1, r3	@ D.6580, D.6580, tmp139
 3229 0074 1A44     		add	r2, r2, r3	@ D.6580, D.6580
 3230 0076 3B68     		ldr	r3, [r7]	@ tmp140, pxTicksToWait
 3231 0078 1A60     		str	r2, [r3]	@ D.6580, *pxTicksToWait_3(D)
2486:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3232              		.loc 1 2486 0
 3233 007a 7868     		ldr	r0, [r7, #4]	@, pxTimeOut
 3234 007c FFF7FEFF 		bl	vTaskSetTimeOutState	@
2487:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 3235              		.loc 1 2487 0
 3236 0080 0023     		movs	r3, #0	@ tmp141,
 3237 0082 FB60     		str	r3, [r7, #12]	@ tmp141, xReturn
 3238 0084 01E0     		b	.L239	@
 3239              	.L241:
2488:FreeRTOS/tasks.c **** 		}
2489:FreeRTOS/tasks.c **** 		else
2490:FreeRTOS/tasks.c **** 		{
2491:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3240              		.loc 1 2491 0
 3241 0086 0123     		movs	r3, #1	@ tmp142,
 3242 0088 FB60     		str	r3, [r7, #12]	@ tmp142, xReturn
 3243              	.L239:
 3244              	.LBE14:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 105


2492:FreeRTOS/tasks.c **** 		}
2493:FreeRTOS/tasks.c **** 	}
2494:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 3245              		.loc 1 2494 0
 3246 008a FFF7FEFF 		bl	vPortExitCritical	@
2495:FreeRTOS/tasks.c **** 
2496:FreeRTOS/tasks.c **** 	return xReturn;
 3247              		.loc 1 2496 0
 3248 008e FB68     		ldr	r3, [r7, #12]	@ D.6582, xReturn
2497:FreeRTOS/tasks.c **** }
 3249              		.loc 1 2497 0
 3250 0090 1846     		mov	r0, r3	@, <retval>
 3251 0092 1037     		adds	r7, r7, #16	@,,
 3252              		.cfi_def_cfa_offset 8
 3253 0094 BD46     		mov	sp, r7	@,
 3254              		.cfi_def_cfa_register 13
 3255              		@ sp needed	@
 3256 0096 80BD     		pop	{r7, pc}	@
 3257              	.L244:
 3258              		.align	2
 3259              	.L243:
 3260 0098 00000000 		.word	xTickCount
 3261 009c 00000000 		.word	xNumOfOverflows
 3262              		.cfi_endproc
 3263              	.LFE26:
 3264              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3265              		.section	.text.vTaskMissedYield,"ax",%progbits
 3266              		.align	2
 3267              		.global	vTaskMissedYield
 3268              		.thumb
 3269              		.thumb_func
 3270              		.type	vTaskMissedYield, %function
 3271              	vTaskMissedYield:
 3272              	.LFB27:
2498:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2499:FreeRTOS/tasks.c **** 
2500:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
2501:FreeRTOS/tasks.c **** {
 3273              		.loc 1 2501 0
 3274              		.cfi_startproc
 3275              		@ args = 0, pretend = 0, frame = 0
 3276              		@ frame_needed = 1, uses_anonymous_args = 0
 3277              		@ link register save eliminated.
 3278 0000 80B4     		push	{r7}	@
 3279              		.cfi_def_cfa_offset 4
 3280              		.cfi_offset 7, -4
 3281 0002 00AF     		add	r7, sp, #0	@,,
 3282              		.cfi_def_cfa_register 7
2502:FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3283              		.loc 1 2502 0
 3284 0004 034B     		ldr	r3, .L246	@ tmp110,
 3285 0006 0122     		movs	r2, #1	@ tmp111,
 3286 0008 1A60     		str	r2, [r3]	@ tmp111, xYieldPending
2503:FreeRTOS/tasks.c **** }
 3287              		.loc 1 2503 0
 3288 000a BD46     		mov	sp, r7	@,
 3289              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 106


 3290              		@ sp needed	@
 3291 000c 5DF8047B 		ldr	r7, [sp], #4	@,
 3292              		.cfi_restore 7
 3293              		.cfi_def_cfa_offset 0
 3294 0010 7047     		bx	lr	@
 3295              	.L247:
 3296 0012 00BF     		.align	2
 3297              	.L246:
 3298 0014 00000000 		.word	xYieldPending
 3299              		.cfi_endproc
 3300              	.LFE27:
 3301              		.size	vTaskMissedYield, .-vTaskMissedYield
 3302              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3303              		.align	2
 3304              		.global	uxTaskGetTaskNumber
 3305              		.thumb
 3306              		.thumb_func
 3307              		.type	uxTaskGetTaskNumber, %function
 3308              	uxTaskGetTaskNumber:
 3309              	.LFB28:
2504:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2505:FreeRTOS/tasks.c **** 
2506:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2507:FreeRTOS/tasks.c **** 
2508:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2509:FreeRTOS/tasks.c **** 	{
 3310              		.loc 1 2509 0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 16
 3313              		@ frame_needed = 1, uses_anonymous_args = 0
 3314              		@ link register save eliminated.
 3315 0000 80B4     		push	{r7}	@
 3316              		.cfi_def_cfa_offset 4
 3317              		.cfi_offset 7, -4
 3318 0002 85B0     		sub	sp, sp, #20	@,,
 3319              		.cfi_def_cfa_offset 24
 3320 0004 00AF     		add	r7, sp, #0	@,,
 3321              		.cfi_def_cfa_register 7
 3322 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
2510:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
2511:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2512:FreeRTOS/tasks.c **** 
2513:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3323              		.loc 1 2513 0
 3324 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, xTask
 3325 000a 002B     		cmp	r3, #0	@ tmp112,
 3326 000c 05D0     		beq	.L249	@,
2514:FreeRTOS/tasks.c **** 		{
2515:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3327              		.loc 1 2515 0
 3328 000e 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 3329 0010 BB60     		str	r3, [r7, #8]	@ tmp113, pxTCB
2516:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 3330              		.loc 1 2516 0
 3331 0012 BB68     		ldr	r3, [r7, #8]	@ tmp114, pxTCB
 3332 0014 5B6C     		ldr	r3, [r3, #68]	@ tmp115, pxTCB_3->uxTaskNumber
 3333 0016 FB60     		str	r3, [r7, #12]	@ tmp115, uxReturn
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 107


 3334 0018 01E0     		b	.L250	@
 3335              	.L249:
2517:FreeRTOS/tasks.c **** 		}
2518:FreeRTOS/tasks.c **** 		else
2519:FreeRTOS/tasks.c **** 		{
2520:FreeRTOS/tasks.c **** 			uxReturn = 0U;
 3336              		.loc 1 2520 0
 3337 001a 0023     		movs	r3, #0	@ tmp116,
 3338 001c FB60     		str	r3, [r7, #12]	@ tmp116, uxReturn
 3339              	.L250:
2521:FreeRTOS/tasks.c **** 		}
2522:FreeRTOS/tasks.c **** 
2523:FreeRTOS/tasks.c **** 		return uxReturn;
 3340              		.loc 1 2523 0
 3341 001e FB68     		ldr	r3, [r7, #12]	@ D.6583, uxReturn
2524:FreeRTOS/tasks.c **** 	}
 3342              		.loc 1 2524 0
 3343 0020 1846     		mov	r0, r3	@, <retval>
 3344 0022 1437     		adds	r7, r7, #20	@,,
 3345              		.cfi_def_cfa_offset 4
 3346 0024 BD46     		mov	sp, r7	@,
 3347              		.cfi_def_cfa_register 13
 3348              		@ sp needed	@
 3349 0026 5DF8047B 		ldr	r7, [sp], #4	@,
 3350              		.cfi_restore 7
 3351              		.cfi_def_cfa_offset 0
 3352 002a 7047     		bx	lr	@
 3353              		.cfi_endproc
 3354              	.LFE28:
 3355              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 3356              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3357              		.align	2
 3358              		.global	vTaskSetTaskNumber
 3359              		.thumb
 3360              		.thumb_func
 3361              		.type	vTaskSetTaskNumber, %function
 3362              	vTaskSetTaskNumber:
 3363              	.LFB29:
2525:FreeRTOS/tasks.c **** 
2526:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2527:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2528:FreeRTOS/tasks.c **** 
2529:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2530:FreeRTOS/tasks.c **** 
2531:FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseT_t uxHandle )
2532:FreeRTOS/tasks.c **** 	{
 3364              		.loc 1 2532 0
 3365              		.cfi_startproc
 3366              		@ args = 0, pretend = 0, frame = 16
 3367              		@ frame_needed = 1, uses_anonymous_args = 0
 3368              		@ link register save eliminated.
 3369 0000 80B4     		push	{r7}	@
 3370              		.cfi_def_cfa_offset 4
 3371              		.cfi_offset 7, -4
 3372 0002 85B0     		sub	sp, sp, #20	@,,
 3373              		.cfi_def_cfa_offset 24
 3374 0004 00AF     		add	r7, sp, #0	@,,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 108


 3375              		.cfi_def_cfa_register 7
 3376 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 3377 0008 3960     		str	r1, [r7]	@ uxHandle, uxHandle
2533:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2534:FreeRTOS/tasks.c **** 
2535:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3378              		.loc 1 2535 0
 3379 000a 7B68     		ldr	r3, [r7, #4]	@ tmp110, xTask
 3380 000c 002B     		cmp	r3, #0	@ tmp110,
 3381 000e 04D0     		beq	.L252	@,
2536:FreeRTOS/tasks.c **** 		{
2537:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3382              		.loc 1 2537 0
 3383 0010 7B68     		ldr	r3, [r7, #4]	@ tmp111, xTask
 3384 0012 FB60     		str	r3, [r7, #12]	@ tmp111, pxTCB
2538:FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 3385              		.loc 1 2538 0
 3386 0014 FB68     		ldr	r3, [r7, #12]	@ tmp112, pxTCB
 3387 0016 3A68     		ldr	r2, [r7]	@ tmp113, uxHandle
 3388 0018 5A64     		str	r2, [r3, #68]	@ tmp113, pxTCB_2->uxTaskNumber
 3389              	.L252:
2539:FreeRTOS/tasks.c **** 		}
2540:FreeRTOS/tasks.c **** 	}
 3390              		.loc 1 2540 0
 3391 001a 1437     		adds	r7, r7, #20	@,,
 3392              		.cfi_def_cfa_offset 4
 3393 001c BD46     		mov	sp, r7	@,
 3394              		.cfi_def_cfa_register 13
 3395              		@ sp needed	@
 3396 001e 5DF8047B 		ldr	r7, [sp], #4	@,
 3397              		.cfi_restore 7
 3398              		.cfi_def_cfa_offset 0
 3399 0022 7047     		bx	lr	@
 3400              		.cfi_endproc
 3401              	.LFE29:
 3402              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 3403              		.section	.text.prvIdleTask,"ax",%progbits
 3404              		.align	2
 3405              		.thumb
 3406              		.thumb_func
 3407              		.type	prvIdleTask, %function
 3408              	prvIdleTask:
 3409              	.LFB30:
2541:FreeRTOS/tasks.c **** 
2542:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2543:FreeRTOS/tasks.c **** 
2544:FreeRTOS/tasks.c **** /*
2545:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
2546:FreeRTOS/tasks.c ****  * The Idle task.
2547:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
2548:FreeRTOS/tasks.c ****  *
2549:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2550:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2551:FreeRTOS/tasks.c ****  *
2552:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
2553:FreeRTOS/tasks.c ****  *
2554:FreeRTOS/tasks.c ****  */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 109


2555:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2556:FreeRTOS/tasks.c **** {
 3410              		.loc 1 2556 0
 3411              		.cfi_startproc
 3412              		@ args = 0, pretend = 0, frame = 8
 3413              		@ frame_needed = 1, uses_anonymous_args = 0
 3414 0000 80B5     		push	{r7, lr}	@
 3415              		.cfi_def_cfa_offset 8
 3416              		.cfi_offset 7, -8
 3417              		.cfi_offset 14, -4
 3418 0002 82B0     		sub	sp, sp, #8	@,,
 3419              		.cfi_def_cfa_offset 16
 3420 0004 00AF     		add	r7, sp, #0	@,,
 3421              		.cfi_def_cfa_register 7
 3422 0006 7860     		str	r0, [r7, #4]	@ pvParameters, pvParameters
 3423              	.L255:
2557:FreeRTOS/tasks.c **** 	/* Stop warnings. */
2558:FreeRTOS/tasks.c **** 	( void ) pvParameters;
2559:FreeRTOS/tasks.c **** 
2560:FreeRTOS/tasks.c **** 	for( ;; )
2561:FreeRTOS/tasks.c **** 	{
2562:FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
2563:FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 3424              		.loc 1 2563 0 discriminator 1
 3425 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination	@
2564:FreeRTOS/tasks.c **** 
2565:FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2566:FreeRTOS/tasks.c **** 		{
2567:FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2568:FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
2569:FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
2570:FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
2571:FreeRTOS/tasks.c **** 			taskYIELD();
2572:FreeRTOS/tasks.c **** 		}
2573:FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2574:FreeRTOS/tasks.c **** 
2575:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2576:FreeRTOS/tasks.c **** 		{
2577:FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
2578:FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2579:FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
2580:FreeRTOS/tasks.c **** 			timeslice.
2581:FreeRTOS/tasks.c **** 
2582:FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
2583:FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2584:FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
2585:FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
2586:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseT_t ) 1 )
2587:FreeRTOS/tasks.c **** 			{
2588:FreeRTOS/tasks.c **** 				taskYIELD();
2589:FreeRTOS/tasks.c **** 			}
2590:FreeRTOS/tasks.c **** 			else
2591:FreeRTOS/tasks.c **** 			{
2592:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2593:FreeRTOS/tasks.c **** 			}
2594:FreeRTOS/tasks.c **** 		}
2595:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 110


2596:FreeRTOS/tasks.c **** 
2597:FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2598:FreeRTOS/tasks.c **** 		{
2599:FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
2600:FreeRTOS/tasks.c **** 
2601:FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2602:FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
2603:FreeRTOS/tasks.c **** 			without the overhead of a separate task.
2604:FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2605:FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2606:FreeRTOS/tasks.c **** 			vApplicationIdleHook();
2607:FreeRTOS/tasks.c **** 		}
2608:FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2609:FreeRTOS/tasks.c **** 
2610:FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2611:FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2612:FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
2613:FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2614:FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2615:FreeRTOS/tasks.c **** 		{
2616:FreeRTOS/tasks.c **** 		TickT_t xExpectedIdleTime;
2617:FreeRTOS/tasks.c **** 
2618:FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2619:FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2620:FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
2621:FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2622:FreeRTOS/tasks.c **** 			valid. */
2623:FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2624:FreeRTOS/tasks.c **** 
2625:FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2626:FreeRTOS/tasks.c **** 			{
2627:FreeRTOS/tasks.c **** 				vTaskSuspendAll();
2628:FreeRTOS/tasks.c **** 				{
2629:FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2630:FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
2631:FreeRTOS/tasks.c **** 					be used. */
2632:FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2633:FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2634:FreeRTOS/tasks.c **** 
2635:FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2636:FreeRTOS/tasks.c **** 					{
2637:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2638:FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2639:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
2640:FreeRTOS/tasks.c **** 					}
2641:FreeRTOS/tasks.c **** 					else
2642:FreeRTOS/tasks.c **** 					{
2643:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2644:FreeRTOS/tasks.c **** 					}
2645:FreeRTOS/tasks.c **** 				}
2646:FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
2647:FreeRTOS/tasks.c **** 			}
2648:FreeRTOS/tasks.c **** 			else
2649:FreeRTOS/tasks.c **** 			{
2650:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2651:FreeRTOS/tasks.c **** 			}
2652:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 111


2653:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2654:FreeRTOS/tasks.c **** 	}
 3426              		.loc 1 2654 0 discriminator 1
 3427 000c FCE7     		b	.L255	@
 3428              		.cfi_endproc
 3429              	.LFE30:
 3430              		.size	prvIdleTask, .-prvIdleTask
 3431 000e 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 3432              		.align	2
 3433              		.thumb
 3434              		.thumb_func
 3435              		.type	prvInitialiseTCBVariables, %function
 3436              	prvInitialiseTCBVariables:
 3437              	.LFB31:
2655:FreeRTOS/tasks.c **** }
2656:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2657:FreeRTOS/tasks.c **** 
2658:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
2659:FreeRTOS/tasks.c **** 
2660:FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2661:FreeRTOS/tasks.c **** 	{
2662:FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2663:FreeRTOS/tasks.c **** 
2664:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2665:FreeRTOS/tasks.c **** 		{
2666:FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2667:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2668:FreeRTOS/tasks.c **** 		}
2669:FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
2670:FreeRTOS/tasks.c **** 		{
2671:FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2672:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2673:FreeRTOS/tasks.c **** 		}
2674:FreeRTOS/tasks.c **** 		else
2675:FreeRTOS/tasks.c **** 		{
2676:FreeRTOS/tasks.c **** 			#if configUSE_TIMERS == 0
2677:FreeRTOS/tasks.c **** 			{
2678:FreeRTOS/tasks.c **** 				/* The idle task exists in addition to the application tasks. */
2679:FreeRTOS/tasks.c **** 				const UBaseT_t uxNonApplicationTasks = 1;
2680:FreeRTOS/tasks.c **** 
2681:FreeRTOS/tasks.c **** 				/* If timers are not being used and all the tasks are in the
2682:FreeRTOS/tasks.c **** 				suspended list (which might mean they have an infinite block
2683:FreeRTOS/tasks.c **** 				time rather than actually being suspended) then it is safe to
2684:FreeRTOS/tasks.c **** 				turn all clocks off and just wait for external interrupts. */
2685:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicati
2686:FreeRTOS/tasks.c **** 				{
2687:FreeRTOS/tasks.c **** 					eReturn = eNoTasksWaitingTimeout;
2688:FreeRTOS/tasks.c **** 				}
2689:FreeRTOS/tasks.c **** 				else
2690:FreeRTOS/tasks.c **** 				{
2691:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2692:FreeRTOS/tasks.c **** 				}
2693:FreeRTOS/tasks.c **** 			}
2694:FreeRTOS/tasks.c **** 			#endif /* configUSE_TIMERS */
2695:FreeRTOS/tasks.c **** 		}
2696:FreeRTOS/tasks.c **** 
2697:FreeRTOS/tasks.c **** 		return eReturn;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 112


2698:FreeRTOS/tasks.c **** 	}
2699:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2700:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2701:FreeRTOS/tasks.c **** 
2702:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
2703:FreeRTOS/tasks.c **** {
 3438              		.loc 1 2703 0
 3439              		.cfi_startproc
 3440              		@ args = 4, pretend = 0, frame = 24
 3441              		@ frame_needed = 1, uses_anonymous_args = 0
 3442 0000 80B5     		push	{r7, lr}	@
 3443              		.cfi_def_cfa_offset 8
 3444              		.cfi_offset 7, -8
 3445              		.cfi_offset 14, -4
 3446 0002 86B0     		sub	sp, sp, #24	@,,
 3447              		.cfi_def_cfa_offset 32
 3448 0004 00AF     		add	r7, sp, #0	@,,
 3449              		.cfi_def_cfa_register 7
 3450 0006 F860     		str	r0, [r7, #12]	@ pxTCB, pxTCB
 3451 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 3452 000a 7A60     		str	r2, [r7, #4]	@ uxPriority, uxPriority
 3453 000c 3B60     		str	r3, [r7]	@ xRegions, xRegions
2704:FreeRTOS/tasks.c **** UBaseT_t x;
2705:FreeRTOS/tasks.c **** 
2706:FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
2707:FreeRTOS/tasks.c **** 	for( x = ( UBaseT_t ) 0; x < ( UBaseT_t ) configMAX_TASK_NAME_LEN; x++ )
 3454              		.loc 1 2707 0
 3455 000e 0023     		movs	r3, #0	@ tmp117,
 3456 0010 7B61     		str	r3, [r7, #20]	@ tmp117, x
 3457 0012 13E0     		b	.L257	@
 3458              	.L260:
2708:FreeRTOS/tasks.c **** 	{
2709:FreeRTOS/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 3459              		.loc 1 2709 0
 3460 0014 BA68     		ldr	r2, [r7, #8]	@ tmp118, pcName
 3461 0016 7B69     		ldr	r3, [r7, #20]	@ tmp119, x
 3462 0018 1344     		add	r3, r3, r2	@ D.6584, tmp118
 3463 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2	@ D.6585, *_5
 3464 001c FA68     		ldr	r2, [r7, #12]	@ tmp120, pxTCB
 3465 001e 7B69     		ldr	r3, [r7, #20]	@ tmp122, x
 3466 0020 1344     		add	r3, r3, r2	@ tmp121, tmp120
 3467 0022 3033     		adds	r3, r3, #48	@ tmp123, tmp121,
 3468 0024 0A46     		mov	r2, r1	@ tmp124, D.6585
 3469 0026 1A71     		strb	r2, [r3, #4]	@ tmp124, pxTCB_7(D)->pcTaskName
2710:FreeRTOS/tasks.c **** 
2711:FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2712:FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2713:FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
2714:FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 3470              		.loc 1 2714 0
 3471 0028 BA68     		ldr	r2, [r7, #8]	@ tmp125, pcName
 3472 002a 7B69     		ldr	r3, [r7, #20]	@ tmp126, x
 3473 002c 1344     		add	r3, r3, r2	@ D.6584, tmp125
 3474 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ D.6585, *_8
 3475 0030 002B     		cmp	r3, #0	@ D.6585,
 3476 0032 00D1     		bne	.L258	@,
2715:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 113


2716:FreeRTOS/tasks.c **** 			break;
 3477              		.loc 1 2716 0
 3478 0034 05E0     		b	.L259	@
 3479              	.L258:
2707:FreeRTOS/tasks.c **** 	{
 3480              		.loc 1 2707 0 discriminator 2
 3481 0036 7B69     		ldr	r3, [r7, #20]	@ tmp128, x
 3482 0038 0133     		adds	r3, r3, #1	@ tmp127, tmp128,
 3483 003a 7B61     		str	r3, [r7, #20]	@ tmp127, x
 3484              	.L257:
2707:FreeRTOS/tasks.c **** 	{
 3485              		.loc 1 2707 0 is_stmt 0 discriminator 1
 3486 003c 7B69     		ldr	r3, [r7, #20]	@ tmp129, x
 3487 003e 0B2B     		cmp	r3, #11	@ tmp129,
 3488 0040 E8D9     		bls	.L260	@,
 3489              	.L259:
2717:FreeRTOS/tasks.c **** 		}
2718:FreeRTOS/tasks.c **** 		else
2719:FreeRTOS/tasks.c **** 		{
2720:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2721:FreeRTOS/tasks.c **** 		}
2722:FreeRTOS/tasks.c **** 	}
2723:FreeRTOS/tasks.c **** 
2724:FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2725:FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2726:FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 3490              		.loc 1 2726 0 is_stmt 1
 3491 0042 FB68     		ldr	r3, [r7, #12]	@ tmp130, pxTCB
 3492 0044 0022     		movs	r2, #0	@ tmp131,
 3493 0046 83F83F20 		strb	r2, [r3, #63]	@ tmp132, pxTCB_7(D)->pcTaskName
2727:FreeRTOS/tasks.c **** 
2728:FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2729:FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
2730:FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 3494              		.loc 1 2730 0
 3495 004a 7B68     		ldr	r3, [r7, #4]	@ tmp133, uxPriority
 3496 004c 072B     		cmp	r3, #7	@ tmp133,
 3497 004e 01D9     		bls	.L261	@,
2731:FreeRTOS/tasks.c **** 	{
2732:FreeRTOS/tasks.c **** 		uxPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 3498              		.loc 1 2732 0
 3499 0050 0723     		movs	r3, #7	@ tmp134,
 3500 0052 7B60     		str	r3, [r7, #4]	@ tmp134, uxPriority
 3501              	.L261:
2733:FreeRTOS/tasks.c **** 	}
2734:FreeRTOS/tasks.c **** 	else
2735:FreeRTOS/tasks.c **** 	{
2736:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2737:FreeRTOS/tasks.c **** 	}
2738:FreeRTOS/tasks.c **** 
2739:FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 3502              		.loc 1 2739 0
 3503 0054 FB68     		ldr	r3, [r7, #12]	@ tmp135, pxTCB
 3504 0056 7A68     		ldr	r2, [r7, #4]	@ tmp136, uxPriority
 3505 0058 DA62     		str	r2, [r3, #44]	@ tmp136, pxTCB_7(D)->uxPriority
2740:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2741:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 114


2742:FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 3506              		.loc 1 2742 0
 3507 005a FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 3508 005c 7A68     		ldr	r2, [r7, #4]	@ tmp138, uxPriority
 3509 005e 9A64     		str	r2, [r3, #72]	@ tmp138, pxTCB_7(D)->uxBasePriority
2743:FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 3510              		.loc 1 2743 0
 3511 0060 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 3512 0062 0022     		movs	r2, #0	@ tmp140,
 3513 0064 DA64     		str	r2, [r3, #76]	@ tmp140, pxTCB_7(D)->uxMutexesHeld
2744:FreeRTOS/tasks.c **** 	}
2745:FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
2746:FreeRTOS/tasks.c **** 
2747:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 3514              		.loc 1 2747 0
 3515 0066 FB68     		ldr	r3, [r7, #12]	@ tmp141, pxTCB
 3516 0068 0433     		adds	r3, r3, #4	@ D.6586, tmp141,
 3517 006a 1846     		mov	r0, r3	@, D.6586
 3518 006c FFF7FEFF 		bl	vListInitialiseItem	@
2748:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 3519              		.loc 1 2748 0
 3520 0070 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 3521 0072 1833     		adds	r3, r3, #24	@ D.6586, tmp142,
 3522 0074 1846     		mov	r0, r3	@, D.6586
 3523 0076 FFF7FEFF 		bl	vListInitialiseItem	@
2749:FreeRTOS/tasks.c **** 
2750:FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2751:FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2752:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 3524              		.loc 1 2752 0
 3525 007a FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 3526 007c FA68     		ldr	r2, [r7, #12]	@ tmp144, pxTCB
 3527 007e 1A61     		str	r2, [r3, #16]	@ tmp144, pxTCB_7(D)->xGenericListItem.pvOwner
2753:FreeRTOS/tasks.c **** 
2754:FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
2755:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( TickT_t 
 3528              		.loc 1 2755 0
 3529 0080 7B68     		ldr	r3, [r7, #4]	@ tmp145, uxPriority
 3530 0082 C3F10802 		rsb	r2, r3, #8	@ D.6587, tmp145,
 3531 0086 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 3532 0088 9A61     		str	r2, [r3, #24]	@ D.6587, pxTCB_7(D)->xEventListItem.xItemValue
2756:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3533              		.loc 1 2756 0
 3534 008a FB68     		ldr	r3, [r7, #12]	@ tmp147, pxTCB
 3535 008c FA68     		ldr	r2, [r7, #12]	@ tmp148, pxTCB
 3536 008e 5A62     		str	r2, [r3, #36]	@ tmp148, pxTCB_7(D)->xEventListItem.pvOwner
2757:FreeRTOS/tasks.c **** 
2758:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2759:FreeRTOS/tasks.c **** 	{
2760:FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseT_t ) 0U;
2761:FreeRTOS/tasks.c **** 	}
2762:FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2763:FreeRTOS/tasks.c **** 
2764:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2765:FreeRTOS/tasks.c **** 	{
2766:FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2767:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 115


2768:FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2769:FreeRTOS/tasks.c **** 
2770:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2771:FreeRTOS/tasks.c **** 	{
2772:FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2773:FreeRTOS/tasks.c **** 	}
2774:FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2775:FreeRTOS/tasks.c **** 
2776:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2777:FreeRTOS/tasks.c **** 	{
2778:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2779:FreeRTOS/tasks.c **** 	}
2780:FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2781:FreeRTOS/tasks.c **** 	{
2782:FreeRTOS/tasks.c **** 		( void ) xRegions;
2783:FreeRTOS/tasks.c **** 		( void ) usStackDepth;
2784:FreeRTOS/tasks.c **** 	}
2785:FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2786:FreeRTOS/tasks.c **** 
2787:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2788:FreeRTOS/tasks.c **** 	{
2789:FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2790:FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2791:FreeRTOS/tasks.c **** 	}
2792:FreeRTOS/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2793:FreeRTOS/tasks.c **** }
 3537              		.loc 1 2793 0
 3538 0090 1837     		adds	r7, r7, #24	@,,
 3539              		.cfi_def_cfa_offset 8
 3540 0092 BD46     		mov	sp, r7	@,
 3541              		.cfi_def_cfa_register 13
 3542              		@ sp needed	@
 3543 0094 80BD     		pop	{r7, pc}	@
 3544              		.cfi_endproc
 3545              	.LFE31:
 3546              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 3547 0096 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3548              		.align	2
 3549              		.thumb
 3550              		.thumb_func
 3551              		.type	prvInitialiseTaskLists, %function
 3552              	prvInitialiseTaskLists:
 3553              	.LFB32:
2794:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2795:FreeRTOS/tasks.c **** 
2796:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2797:FreeRTOS/tasks.c **** 
2798:FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2799:FreeRTOS/tasks.c **** 	{
2800:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2801:FreeRTOS/tasks.c **** 
2802:FreeRTOS/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2803:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2804:FreeRTOS/tasks.c **** 
2805:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2806:FreeRTOS/tasks.c **** 	}
2807:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 116


2808:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2809:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2810:FreeRTOS/tasks.c **** 
2811:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
2812:FreeRTOS/tasks.c **** {
 3554              		.loc 1 2812 0
 3555              		.cfi_startproc
 3556              		@ args = 0, pretend = 0, frame = 8
 3557              		@ frame_needed = 1, uses_anonymous_args = 0
 3558 0000 80B5     		push	{r7, lr}	@
 3559              		.cfi_def_cfa_offset 8
 3560              		.cfi_offset 7, -8
 3561              		.cfi_offset 14, -4
 3562 0002 82B0     		sub	sp, sp, #8	@,,
 3563              		.cfi_def_cfa_offset 16
 3564 0004 00AF     		add	r7, sp, #0	@,,
 3565              		.cfi_def_cfa_register 7
2813:FreeRTOS/tasks.c **** UBaseT_t uxPriority;
2814:FreeRTOS/tasks.c **** 
2815:FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseT_t ) 0U; uxPriority < ( UBaseT_t ) configMAX_PRIORITIES; uxPriority++ )
 3566              		.loc 1 2815 0
 3567 0006 0023     		movs	r3, #0	@ tmp111,
 3568 0008 7B60     		str	r3, [r7, #4]	@ tmp111, uxPriority
 3569 000a 0CE0     		b	.L263	@
 3570              	.L264:
2816:FreeRTOS/tasks.c **** 	{
2817:FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3571              		.loc 1 2817 0 discriminator 3
 3572 000c 7A68     		ldr	r2, [r7, #4]	@ tmp112, uxPriority
 3573 000e 1346     		mov	r3, r2	@ tmp113, tmp112
 3574 0010 9B00     		lsls	r3, r3, #2	@ tmp113, tmp113,
 3575 0012 1344     		add	r3, r3, r2	@ tmp113, tmp112
 3576 0014 9B00     		lsls	r3, r3, #2	@ tmp114, tmp113,
 3577 0016 114A     		ldr	r2, .L265	@ tmp115,
 3578 0018 1344     		add	r3, r3, r2	@ D.6588, tmp115
 3579 001a 1846     		mov	r0, r3	@, D.6588
 3580 001c FFF7FEFF 		bl	vListInitialise	@
2815:FreeRTOS/tasks.c **** 	{
 3581              		.loc 1 2815 0 discriminator 3
 3582 0020 7B68     		ldr	r3, [r7, #4]	@ tmp117, uxPriority
 3583 0022 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 3584 0024 7B60     		str	r3, [r7, #4]	@ tmp116, uxPriority
 3585              	.L263:
2815:FreeRTOS/tasks.c **** 	{
 3586              		.loc 1 2815 0 is_stmt 0 discriminator 1
 3587 0026 7B68     		ldr	r3, [r7, #4]	@ tmp118, uxPriority
 3588 0028 072B     		cmp	r3, #7	@ tmp118,
 3589 002a EFD9     		bls	.L264	@,
2818:FreeRTOS/tasks.c **** 	}
2819:FreeRTOS/tasks.c **** 
2820:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3590              		.loc 1 2820 0 is_stmt 1
 3591 002c 0C48     		ldr	r0, .L265+4	@,
 3592 002e FFF7FEFF 		bl	vListInitialise	@
2821:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3593              		.loc 1 2821 0
 3594 0032 0C48     		ldr	r0, .L265+8	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 117


 3595 0034 FFF7FEFF 		bl	vListInitialise	@
2822:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3596              		.loc 1 2822 0
 3597 0038 0B48     		ldr	r0, .L265+12	@,
 3598 003a FFF7FEFF 		bl	vListInitialise	@
2823:FreeRTOS/tasks.c **** 
2824:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2825:FreeRTOS/tasks.c **** 	{
2826:FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3599              		.loc 1 2826 0
 3600 003e 0B48     		ldr	r0, .L265+16	@,
 3601 0040 FFF7FEFF 		bl	vListInitialise	@
2827:FreeRTOS/tasks.c **** 	}
2828:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
2829:FreeRTOS/tasks.c **** 
2830:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2831:FreeRTOS/tasks.c **** 	{
2832:FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3602              		.loc 1 2832 0
 3603 0044 0A48     		ldr	r0, .L265+20	@,
 3604 0046 FFF7FEFF 		bl	vListInitialise	@
2833:FreeRTOS/tasks.c **** 	}
2834:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2835:FreeRTOS/tasks.c **** 
2836:FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2837:FreeRTOS/tasks.c **** 	using list2. */
2838:FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3605              		.loc 1 2838 0
 3606 004a 0A4B     		ldr	r3, .L265+24	@ tmp119,
 3607 004c 044A     		ldr	r2, .L265+4	@ tmp120,
 3608 004e 1A60     		str	r2, [r3]	@ tmp120, pxDelayedTaskList
2839:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3609              		.loc 1 2839 0
 3610 0050 094B     		ldr	r3, .L265+28	@ tmp121,
 3611 0052 044A     		ldr	r2, .L265+8	@ tmp122,
 3612 0054 1A60     		str	r2, [r3]	@ tmp122, pxOverflowDelayedTaskList
2840:FreeRTOS/tasks.c **** }
 3613              		.loc 1 2840 0
 3614 0056 0837     		adds	r7, r7, #8	@,,
 3615              		.cfi_def_cfa_offset 8
 3616 0058 BD46     		mov	sp, r7	@,
 3617              		.cfi_def_cfa_register 13
 3618              		@ sp needed	@
 3619 005a 80BD     		pop	{r7, pc}	@
 3620              	.L266:
 3621              		.align	2
 3622              	.L265:
 3623 005c 00000000 		.word	pxReadyTasksLists
 3624 0060 00000000 		.word	xDelayedTaskList1
 3625 0064 00000000 		.word	xDelayedTaskList2
 3626 0068 00000000 		.word	xPendingReadyList
 3627 006c 00000000 		.word	xTasksWaitingTermination
 3628 0070 00000000 		.word	xSuspendedTaskList
 3629 0074 00000000 		.word	pxDelayedTaskList
 3630 0078 00000000 		.word	pxOverflowDelayedTaskList
 3631              		.cfi_endproc
 3632              	.LFE32:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 118


 3633              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3634              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3635              		.align	2
 3636              		.thumb
 3637              		.thumb_func
 3638              		.type	prvCheckTasksWaitingTermination, %function
 3639              	prvCheckTasksWaitingTermination:
 3640              	.LFB33:
2841:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2842:FreeRTOS/tasks.c **** 
2843:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2844:FreeRTOS/tasks.c **** {
 3641              		.loc 1 2844 0
 3642              		.cfi_startproc
 3643              		@ args = 0, pretend = 0, frame = 8
 3644              		@ frame_needed = 1, uses_anonymous_args = 0
 3645 0000 80B5     		push	{r7, lr}	@
 3646              		.cfi_def_cfa_offset 8
 3647              		.cfi_offset 7, -8
 3648              		.cfi_offset 14, -4
 3649 0002 82B0     		sub	sp, sp, #8	@,,
 3650              		.cfi_def_cfa_offset 16
 3651 0004 00AF     		add	r7, sp, #0	@,,
 3652              		.cfi_def_cfa_register 7
 3653              	.LBB15:
2845:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2846:FreeRTOS/tasks.c **** 	{
2847:FreeRTOS/tasks.c **** 		BaseT_t xListIsEmpty;
2848:FreeRTOS/tasks.c **** 
2849:FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2850:FreeRTOS/tasks.c **** 		too often in the idle task. */
2851:FreeRTOS/tasks.c **** 		while( uxTasksDeleted > ( UBaseT_t ) 0U )
 3654              		.loc 1 2851 0
 3655 0006 28E0     		b	.L268	@
 3656              	.L269:
2852:FreeRTOS/tasks.c **** 		{
2853:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3657              		.loc 1 2853 0
 3658 0008 FFF7FEFF 		bl	vTaskSuspendAll	@
2854:FreeRTOS/tasks.c **** 			{
2855:FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3659              		.loc 1 2855 0
 3660 000c 164B     		ldr	r3, .L270	@ tmp119,
 3661 000e 1B68     		ldr	r3, [r3]	@ D.6589, xTasksWaitingTermination.uxNumberOfItems
 3662 0010 002B     		cmp	r3, #0	@ D.6589,
 3663 0012 0CBF     		ite	eq
 3664 0014 0123     		moveq	r3, #1	@ tmp121,
 3665 0016 0023     		movne	r3, #0	@ tmp121,
 3666 0018 DBB2     		uxtb	r3, r3	@ D.6590, tmp120
 3667 001a 7B60     		str	r3, [r7, #4]	@ D.6590, xListIsEmpty
2856:FreeRTOS/tasks.c **** 			}
2857:FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
 3668              		.loc 1 2857 0
 3669 001c FFF7FEFF 		bl	xTaskResumeAll	@
2858:FreeRTOS/tasks.c **** 
2859:FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3670              		.loc 1 2859 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 119


 3671 0020 7B68     		ldr	r3, [r7, #4]	@ tmp122, xListIsEmpty
 3672 0022 002B     		cmp	r3, #0	@ tmp122,
 3673 0024 19D1     		bne	.L268	@,
 3674              	.LBB16:
2860:FreeRTOS/tasks.c **** 			{
2861:FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
2862:FreeRTOS/tasks.c **** 
2863:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 3675              		.loc 1 2863 0
 3676 0026 FFF7FEFF 		bl	vPortEnterCritical	@
2864:FreeRTOS/tasks.c **** 				{
2865:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 3677              		.loc 1 2865 0
 3678 002a 0F4B     		ldr	r3, .L270	@ tmp123,
 3679 002c DB68     		ldr	r3, [r3, #12]	@ D.6591, xTasksWaitingTermination.xListEnd.pxNext
 3680 002e DB68     		ldr	r3, [r3, #12]	@ tmp124, _5->pvOwner
 3681 0030 3B60     		str	r3, [r7]	@ tmp124, pxTCB
2866:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3682              		.loc 1 2866 0
 3683 0032 3B68     		ldr	r3, [r7]	@ tmp125, pxTCB
 3684 0034 0433     		adds	r3, r3, #4	@ D.6592, tmp125,
 3685 0036 1846     		mov	r0, r3	@, D.6592
 3686 0038 FFF7FEFF 		bl	uxListRemove	@
2867:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 3687              		.loc 1 2867 0
 3688 003c 0B4B     		ldr	r3, .L270+4	@ tmp126,
 3689 003e 1B68     		ldr	r3, [r3]	@ D.6589, uxCurrentNumberOfTasks
 3690 0040 013B     		subs	r3, r3, #1	@ D.6589, D.6589,
 3691 0042 0A4A     		ldr	r2, .L270+4	@ tmp127,
 3692 0044 1360     		str	r3, [r2]	@ D.6589, uxCurrentNumberOfTasks
2868:FreeRTOS/tasks.c **** 					--uxTasksDeleted;
 3693              		.loc 1 2868 0
 3694 0046 0A4B     		ldr	r3, .L270+8	@ tmp128,
 3695 0048 1B68     		ldr	r3, [r3]	@ D.6589, uxTasksDeleted
 3696 004a 013B     		subs	r3, r3, #1	@ D.6589, D.6589,
 3697 004c 084A     		ldr	r2, .L270+8	@ tmp129,
 3698 004e 1360     		str	r3, [r2]	@ D.6589, uxTasksDeleted
2869:FreeRTOS/tasks.c **** 				}
2870:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 3699              		.loc 1 2870 0
 3700 0050 FFF7FEFF 		bl	vPortExitCritical	@
2871:FreeRTOS/tasks.c **** 
2872:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 3701              		.loc 1 2872 0
 3702 0054 3868     		ldr	r0, [r7]	@, pxTCB
 3703 0056 FFF7FEFF 		bl	prvDeleteTCB	@
 3704              	.L268:
 3705              	.LBE16:
2851:FreeRTOS/tasks.c **** 		{
 3706              		.loc 1 2851 0
 3707 005a 054B     		ldr	r3, .L270+8	@ tmp130,
 3708 005c 1B68     		ldr	r3, [r3]	@ D.6589, uxTasksDeleted
 3709 005e 002B     		cmp	r3, #0	@ D.6589,
 3710 0060 D2D1     		bne	.L269	@,
 3711              	.LBE15:
2873:FreeRTOS/tasks.c **** 			}
2874:FreeRTOS/tasks.c **** 			else
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 120


2875:FreeRTOS/tasks.c **** 			{
2876:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2877:FreeRTOS/tasks.c **** 			}
2878:FreeRTOS/tasks.c **** 		}
2879:FreeRTOS/tasks.c **** 	}
2880:FreeRTOS/tasks.c **** 	#endif /* vTaskDelete */
2881:FreeRTOS/tasks.c **** }
 3712              		.loc 1 2881 0
 3713 0062 0837     		adds	r7, r7, #8	@,,
 3714              		.cfi_def_cfa_offset 8
 3715 0064 BD46     		mov	sp, r7	@,
 3716              		.cfi_def_cfa_register 13
 3717              		@ sp needed	@
 3718 0066 80BD     		pop	{r7, pc}	@
 3719              	.L271:
 3720              		.align	2
 3721              	.L270:
 3722 0068 00000000 		.word	xTasksWaitingTermination
 3723 006c 00000000 		.word	uxCurrentNumberOfTasks
 3724 0070 00000000 		.word	uxTasksDeleted
 3725              		.cfi_endproc
 3726              	.LFE33:
 3727              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3728              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 3729              		.align	2
 3730              		.thumb
 3731              		.thumb_func
 3732              		.type	prvAddCurrentTaskToDelayedList, %function
 3733              	prvAddCurrentTaskToDelayedList:
 3734              	.LFB34:
2882:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2883:FreeRTOS/tasks.c **** 
2884:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake )
2885:FreeRTOS/tasks.c **** {
 3735              		.loc 1 2885 0
 3736              		.cfi_startproc
 3737              		@ args = 0, pretend = 0, frame = 8
 3738              		@ frame_needed = 1, uses_anonymous_args = 0
 3739 0000 80B5     		push	{r7, lr}	@
 3740              		.cfi_def_cfa_offset 8
 3741              		.cfi_offset 7, -8
 3742              		.cfi_offset 14, -4
 3743 0002 82B0     		sub	sp, sp, #8	@,,
 3744              		.cfi_def_cfa_offset 16
 3745 0004 00AF     		add	r7, sp, #0	@,,
 3746              		.cfi_def_cfa_register 7
 3747 0006 7860     		str	r0, [r7, #4]	@ xTimeToWake, xTimeToWake
2886:FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
2887:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3748              		.loc 1 2887 0
 3749 0008 134B     		ldr	r3, .L275	@ tmp119,
 3750 000a 1B68     		ldr	r3, [r3]	@ D.6593, pxCurrentTCB
 3751 000c 7A68     		ldr	r2, [r7, #4]	@ tmp120, xTimeToWake
 3752 000e 5A60     		str	r2, [r3, #4]	@ tmp120, _1->xGenericListItem.xItemValue
2888:FreeRTOS/tasks.c **** 
2889:FreeRTOS/tasks.c **** 	if( xTimeToWake < xTickCount )
 3753              		.loc 1 2889 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 121


 3754 0010 124B     		ldr	r3, .L275+4	@ tmp121,
 3755 0012 1B68     		ldr	r3, [r3]	@ D.6594, xTickCount
 3756 0014 7A68     		ldr	r2, [r7, #4]	@ tmp122, xTimeToWake
 3757 0016 9A42     		cmp	r2, r3	@ tmp122, D.6594
 3758 0018 09D2     		bcs	.L273	@,
2890:FreeRTOS/tasks.c **** 	{
2891:FreeRTOS/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2892:FreeRTOS/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3759              		.loc 1 2892 0
 3760 001a 114B     		ldr	r3, .L275+8	@ tmp123,
 3761 001c 1A68     		ldr	r2, [r3]	@ D.6595, pxOverflowDelayedTaskList
 3762 001e 0E4B     		ldr	r3, .L275	@ tmp124,
 3763 0020 1B68     		ldr	r3, [r3]	@ D.6593, pxCurrentTCB
 3764 0022 0433     		adds	r3, r3, #4	@ D.6596, D.6593,
 3765 0024 1046     		mov	r0, r2	@, D.6595
 3766 0026 1946     		mov	r1, r3	@, D.6596
 3767 0028 FFF7FEFF 		bl	vListInsert	@
 3768 002c 10E0     		b	.L272	@
 3769              	.L273:
2893:FreeRTOS/tasks.c **** 	}
2894:FreeRTOS/tasks.c **** 	else
2895:FreeRTOS/tasks.c **** 	{
2896:FreeRTOS/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
2897:FreeRTOS/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3770              		.loc 1 2897 0
 3771 002e 0D4B     		ldr	r3, .L275+12	@ tmp125,
 3772 0030 1A68     		ldr	r2, [r3]	@ D.6595, pxDelayedTaskList
 3773 0032 094B     		ldr	r3, .L275	@ tmp126,
 3774 0034 1B68     		ldr	r3, [r3]	@ D.6593, pxCurrentTCB
 3775 0036 0433     		adds	r3, r3, #4	@ D.6596, D.6593,
 3776 0038 1046     		mov	r0, r2	@, D.6595
 3777 003a 1946     		mov	r1, r3	@, D.6596
 3778 003c FFF7FEFF 		bl	vListInsert	@
2898:FreeRTOS/tasks.c **** 
2899:FreeRTOS/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2900:FreeRTOS/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2901:FreeRTOS/tasks.c **** 		too. */
2902:FreeRTOS/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 3779              		.loc 1 2902 0
 3780 0040 094B     		ldr	r3, .L275+16	@ tmp127,
 3781 0042 1B68     		ldr	r3, [r3]	@ D.6594, xNextTaskUnblockTime
 3782 0044 7A68     		ldr	r2, [r7, #4]	@ tmp128, xTimeToWake
 3783 0046 9A42     		cmp	r2, r3	@ tmp128, D.6594
 3784 0048 02D2     		bcs	.L272	@,
2903:FreeRTOS/tasks.c **** 		{
2904:FreeRTOS/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 3785              		.loc 1 2904 0
 3786 004a 074A     		ldr	r2, .L275+16	@ tmp129,
 3787 004c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTimeToWake
 3788 004e 1360     		str	r3, [r2]	@ tmp130, xNextTaskUnblockTime
 3789              	.L272:
2905:FreeRTOS/tasks.c **** 		}
2906:FreeRTOS/tasks.c **** 		else
2907:FreeRTOS/tasks.c **** 		{
2908:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2909:FreeRTOS/tasks.c **** 		}
2910:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 122


2911:FreeRTOS/tasks.c **** }
 3790              		.loc 1 2911 0
 3791 0050 0837     		adds	r7, r7, #8	@,,
 3792              		.cfi_def_cfa_offset 8
 3793 0052 BD46     		mov	sp, r7	@,
 3794              		.cfi_def_cfa_register 13
 3795              		@ sp needed	@
 3796 0054 80BD     		pop	{r7, pc}	@
 3797              	.L276:
 3798 0056 00BF     		.align	2
 3799              	.L275:
 3800 0058 00000000 		.word	pxCurrentTCB
 3801 005c 00000000 		.word	xTickCount
 3802 0060 00000000 		.word	pxOverflowDelayedTaskList
 3803 0064 00000000 		.word	pxDelayedTaskList
 3804 0068 00000000 		.word	xNextTaskUnblockTime
 3805              		.cfi_endproc
 3806              	.LFE34:
 3807              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 3808              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 3809              		.align	2
 3810              		.thumb
 3811              		.thumb_func
 3812              		.type	prvAllocateTCBAndStack, %function
 3813              	prvAllocateTCBAndStack:
 3814              	.LFB35:
2912:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2913:FreeRTOS/tasks.c **** 
2914:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
2915:FreeRTOS/tasks.c **** {
 3815              		.loc 1 2915 0
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 16
 3818              		@ frame_needed = 1, uses_anonymous_args = 0
 3819 0000 80B5     		push	{r7, lr}	@
 3820              		.cfi_def_cfa_offset 8
 3821              		.cfi_offset 7, -8
 3822              		.cfi_offset 14, -4
 3823 0002 84B0     		sub	sp, sp, #16	@,,
 3824              		.cfi_def_cfa_offset 24
 3825 0004 00AF     		add	r7, sp, #0	@,,
 3826              		.cfi_def_cfa_register 7
 3827 0006 0346     		mov	r3, r0	@ tmp119, usStackDepth
 3828 0008 3960     		str	r1, [r7]	@ puxStackBuffer, puxStackBuffer
 3829 000a FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp120, usStackDepth
2916:FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
2917:FreeRTOS/tasks.c **** 
2918:FreeRTOS/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2919:FreeRTOS/tasks.c **** 	the implementation of the port malloc function. */
2920:FreeRTOS/tasks.c **** 	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 3830              		.loc 1 2920 0
 3831 000c 5020     		movs	r0, #80	@,
 3832 000e FFF7FEFF 		bl	pvPortMalloc	@
 3833 0012 F860     		str	r0, [r7, #12]	@, pxNewTCB
2921:FreeRTOS/tasks.c **** 
2922:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 3834              		.loc 1 2922 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 123


 3835 0014 FB68     		ldr	r3, [r7, #12]	@ tmp121, pxNewTCB
 3836 0016 002B     		cmp	r3, #0	@ tmp121,
 3837 0018 1FD0     		beq	.L278	@,
2923:FreeRTOS/tasks.c **** 	{
2924:FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2925:FreeRTOS/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2926:FreeRTOS/tasks.c **** 		be deleted later if required. */
2927:FreeRTOS/tasks.c **** 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( S
 3838              		.loc 1 2927 0
 3839 001a 3B68     		ldr	r3, [r7]	@ tmp122, puxStackBuffer
 3840 001c 002B     		cmp	r3, #0	@ tmp122,
 3841 001e 06D1     		bne	.L279	@,
 3842              		.loc 1 2927 0 is_stmt 0 discriminator 1
 3843 0020 FB88     		ldrh	r3, [r7, #6]	@ D.6598, usStackDepth
 3844 0022 9B00     		lsls	r3, r3, #2	@ D.6598, D.6598,
 3845 0024 1846     		mov	r0, r3	@, D.6598
 3846 0026 FFF7FEFF 		bl	pvPortMalloc	@
 3847 002a 0346     		mov	r3, r0	@ D.6597,
 3848 002c 00E0     		b	.L280	@
 3849              	.L279:
 3850              		.loc 1 2927 0 discriminator 2
 3851 002e 3B68     		ldr	r3, [r7]	@ D.6597, puxStackBuffer
 3852              	.L280:
 3853              		.loc 1 2927 0 discriminator 4
 3854 0030 FA68     		ldr	r2, [r7, #12]	@ tmp123, pxNewTCB
 3855 0032 1363     		str	r3, [r2, #48]	@ D.6597, pxNewTCB_3->pxStack
2928:FreeRTOS/tasks.c **** 
2929:FreeRTOS/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3856              		.loc 1 2929 0 is_stmt 1 discriminator 4
 3857 0034 FB68     		ldr	r3, [r7, #12]	@ tmp124, pxNewTCB
 3858 0036 1B6B     		ldr	r3, [r3, #48]	@ D.6597, pxNewTCB_3->pxStack
 3859 0038 002B     		cmp	r3, #0	@ D.6597,
 3860 003a 05D1     		bne	.L281	@,
2930:FreeRTOS/tasks.c **** 		{
2931:FreeRTOS/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2932:FreeRTOS/tasks.c **** 			vPortFree( pxNewTCB );
 3861              		.loc 1 2932 0
 3862 003c F868     		ldr	r0, [r7, #12]	@, pxNewTCB
 3863 003e FFF7FEFF 		bl	vPortFree	@
2933:FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
 3864              		.loc 1 2933 0
 3865 0042 0023     		movs	r3, #0	@ tmp125,
 3866 0044 FB60     		str	r3, [r7, #12]	@ tmp125, pxNewTCB
 3867 0046 08E0     		b	.L278	@
 3868              	.L281:
2934:FreeRTOS/tasks.c **** 		}
2935:FreeRTOS/tasks.c **** 		else
2936:FreeRTOS/tasks.c **** 		{
2937:FreeRTOS/tasks.c **** 			/* Avoid dependency on memset() if it is not required. */
2938:FreeRTOS/tasks.c **** 			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_ux
2939:FreeRTOS/tasks.c **** 			{
2940:FreeRTOS/tasks.c **** 				/* Just to help debugging. */
2941:FreeRTOS/tasks.c **** 				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeo
 3869              		.loc 1 2941 0
 3870 0048 FB68     		ldr	r3, [r7, #12]	@ tmp126, pxNewTCB
 3871 004a 1A6B     		ldr	r2, [r3, #48]	@ D.6597, pxNewTCB_3->pxStack
 3872 004c FB88     		ldrh	r3, [r7, #6]	@ D.6598, usStackDepth
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 124


 3873 004e 9B00     		lsls	r3, r3, #2	@ D.6598, D.6598,
 3874 0050 1046     		mov	r0, r2	@, D.6597
 3875 0052 A521     		movs	r1, #165	@,
 3876 0054 1A46     		mov	r2, r3	@, D.6598
 3877 0056 FFF7FEFF 		bl	memset	@
 3878              	.L278:
2942:FreeRTOS/tasks.c **** 			}
2943:FreeRTOS/tasks.c **** 			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( I
2944:FreeRTOS/tasks.c **** 		}
2945:FreeRTOS/tasks.c **** 	}
2946:FreeRTOS/tasks.c **** 
2947:FreeRTOS/tasks.c **** 	return pxNewTCB;
 3879              		.loc 1 2947 0
 3880 005a FB68     		ldr	r3, [r7, #12]	@ D.6599, pxNewTCB
2948:FreeRTOS/tasks.c **** }
 3881              		.loc 1 2948 0
 3882 005c 1846     		mov	r0, r3	@, <retval>
 3883 005e 1037     		adds	r7, r7, #16	@,,
 3884              		.cfi_def_cfa_offset 8
 3885 0060 BD46     		mov	sp, r7	@,
 3886              		.cfi_def_cfa_register 13
 3887              		@ sp needed	@
 3888 0062 80BD     		pop	{r7, pc}	@
 3889              		.cfi_endproc
 3890              	.LFE35:
 3891              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 3892              		.section	.text.prvListTaskWithinSingleList,"ax",%progbits
 3893              		.align	2
 3894              		.thumb
 3895              		.thumb_func
 3896              		.type	prvListTaskWithinSingleList, %function
 3897              	prvListTaskWithinSingleList:
 3898              	.LFB36:
2949:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:FreeRTOS/tasks.c **** 
2951:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2952:FreeRTOS/tasks.c **** 
2953:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
2954:FreeRTOS/tasks.c **** 	{
 3899              		.loc 1 2954 0
 3900              		.cfi_startproc
 3901              		@ args = 0, pretend = 0, frame = 40
 3902              		@ frame_needed = 1, uses_anonymous_args = 0
 3903 0000 90B5     		push	{r4, r7, lr}	@
 3904              		.cfi_def_cfa_offset 12
 3905              		.cfi_offset 4, -12
 3906              		.cfi_offset 7, -8
 3907              		.cfi_offset 14, -4
 3908 0002 8BB0     		sub	sp, sp, #44	@,,
 3909              		.cfi_def_cfa_offset 56
 3910 0004 00AF     		add	r7, sp, #0	@,,
 3911              		.cfi_def_cfa_register 7
 3912 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 3913 0008 B960     		str	r1, [r7, #8]	@ pxList, pxList
 3914 000a 1346     		mov	r3, r2	@ tmp152, eState
 3915 000c FB71     		strb	r3, [r7, #7]	@ tmp153, eState
2955:FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 125


2956:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0;
 3916              		.loc 1 2956 0
 3917 000e 0023     		movs	r3, #0	@ tmp154,
 3918 0010 7B62     		str	r3, [r7, #36]	@ tmp154, uxTask
2957:FreeRTOS/tasks.c **** 
2958:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseT_t ) 0 )
 3919              		.loc 1 2958 0
 3920 0012 BB68     		ldr	r3, [r7, #8]	@ tmp155, pxList
 3921 0014 1B68     		ldr	r3, [r3]	@ D.6600, pxList_4(D)->uxNumberOfItems
 3922 0016 002B     		cmp	r3, #0	@ D.6600,
 3923 0018 78D0     		beq	.L284	@,
 3924              	.LBB17:
2959:FreeRTOS/tasks.c **** 		{
2960:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3925              		.loc 1 2960 0
 3926 001a BB68     		ldr	r3, [r7, #8]	@ tmp156, pxList
 3927 001c 3B62     		str	r3, [r7, #32]	@ tmp156, pxConstList
 3928 001e 3B6A     		ldr	r3, [r7, #32]	@ tmp157, pxConstList
 3929 0020 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_6->pxIndex
 3930 0022 5A68     		ldr	r2, [r3, #4]	@ D.6602, _7->pxNext
 3931 0024 3B6A     		ldr	r3, [r7, #32]	@ tmp158, pxConstList
 3932 0026 5A60     		str	r2, [r3, #4]	@ D.6602, pxConstList_6->pxIndex
 3933 0028 3B6A     		ldr	r3, [r7, #32]	@ tmp159, pxConstList
 3934 002a 5A68     		ldr	r2, [r3, #4]	@ D.6601, pxConstList_6->pxIndex
 3935 002c 3B6A     		ldr	r3, [r7, #32]	@ tmp160, pxConstList
 3936 002e 0833     		adds	r3, r3, #8	@ D.6603, tmp160,
 3937 0030 9A42     		cmp	r2, r3	@ D.6601, D.6603
 3938 0032 04D1     		bne	.L285	@,
 3939              		.loc 1 2960 0 is_stmt 0 discriminator 1
 3940 0034 3B6A     		ldr	r3, [r7, #32]	@ tmp161, pxConstList
 3941 0036 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_6->pxIndex
 3942 0038 5A68     		ldr	r2, [r3, #4]	@ D.6602, _11->pxNext
 3943 003a 3B6A     		ldr	r3, [r7, #32]	@ tmp162, pxConstList
 3944 003c 5A60     		str	r2, [r3, #4]	@ D.6602, pxConstList_6->pxIndex
 3945              	.L285:
 3946              		.loc 1 2960 0 discriminator 3
 3947 003e 3B6A     		ldr	r3, [r7, #32]	@ tmp163, pxConstList
 3948 0040 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_6->pxIndex
 3949 0042 DB68     		ldr	r3, [r3, #12]	@ tmp164, _13->pvOwner
 3950 0044 FB61     		str	r3, [r7, #28]	@ tmp164, pxFirstTCB
 3951              	.L288:
 3952              	.LBE17:
 3953              	.LBB18:
2961:FreeRTOS/tasks.c **** 
2962:FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
2963:FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
2964:FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
2965:FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
2966:FreeRTOS/tasks.c **** 			do
2967:FreeRTOS/tasks.c **** 			{
2968:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3954              		.loc 1 2968 0 is_stmt 1
 3955 0046 BB68     		ldr	r3, [r7, #8]	@ tmp165, pxList
 3956 0048 BB61     		str	r3, [r7, #24]	@ tmp165, pxConstList
 3957 004a BB69     		ldr	r3, [r7, #24]	@ tmp166, pxConstList
 3958 004c 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_15->pxIndex
 3959 004e 5A68     		ldr	r2, [r3, #4]	@ D.6602, _16->pxNext
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 126


 3960 0050 BB69     		ldr	r3, [r7, #24]	@ tmp167, pxConstList
 3961 0052 5A60     		str	r2, [r3, #4]	@ D.6602, pxConstList_15->pxIndex
 3962 0054 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxConstList
 3963 0056 5A68     		ldr	r2, [r3, #4]	@ D.6601, pxConstList_15->pxIndex
 3964 0058 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxConstList
 3965 005a 0833     		adds	r3, r3, #8	@ D.6603, tmp169,
 3966 005c 9A42     		cmp	r2, r3	@ D.6601, D.6603
 3967 005e 04D1     		bne	.L286	@,
 3968              		.loc 1 2968 0 is_stmt 0 discriminator 1
 3969 0060 BB69     		ldr	r3, [r7, #24]	@ tmp170, pxConstList
 3970 0062 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_15->pxIndex
 3971 0064 5A68     		ldr	r2, [r3, #4]	@ D.6602, _20->pxNext
 3972 0066 BB69     		ldr	r3, [r7, #24]	@ tmp171, pxConstList
 3973 0068 5A60     		str	r2, [r3, #4]	@ D.6602, pxConstList_15->pxIndex
 3974              	.L286:
 3975              		.loc 1 2968 0 discriminator 3
 3976 006a BB69     		ldr	r3, [r7, #24]	@ tmp172, pxConstList
 3977 006c 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_15->pxIndex
 3978 006e DB68     		ldr	r3, [r3, #12]	@ tmp173, _22->pvOwner
 3979 0070 7B61     		str	r3, [r7, #20]	@ tmp173, pxNextTCB
 3980              	.LBE18:
2969:FreeRTOS/tasks.c **** 
2970:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 3981              		.loc 1 2970 0 is_stmt 1 discriminator 3
 3982 0072 7B6A     		ldr	r3, [r7, #36]	@ tmp174, uxTask
 3983 0074 5B01     		lsls	r3, r3, #5	@ D.6600, tmp174,
 3984 0076 FA68     		ldr	r2, [r7, #12]	@ tmp175, pxTaskStatusArray
 3985 0078 1344     		add	r3, r3, r2	@ D.6604, tmp175
 3986 007a 7A69     		ldr	r2, [r7, #20]	@ tmp176, pxNextTCB
 3987 007c 1A60     		str	r2, [r3]	@ tmp176, _26->xHandle
2971:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 3988              		.loc 1 2971 0 discriminator 3
 3989 007e 7B6A     		ldr	r3, [r7, #36]	@ tmp177, uxTask
 3990 0080 5B01     		lsls	r3, r3, #5	@ D.6600, tmp177,
 3991 0082 FA68     		ldr	r2, [r7, #12]	@ tmp178, pxTaskStatusArray
 3992 0084 1344     		add	r3, r3, r2	@ D.6604, tmp178
 3993 0086 7A69     		ldr	r2, [r7, #20]	@ tmp179, pxNextTCB
 3994 0088 3432     		adds	r2, r2, #52	@ D.6605, tmp179,
 3995 008a 5A60     		str	r2, [r3, #4]	@ D.6605, _28->pcTaskName
2972:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 3996              		.loc 1 2972 0 discriminator 3
 3997 008c 7B6A     		ldr	r3, [r7, #36]	@ tmp180, uxTask
 3998 008e 5B01     		lsls	r3, r3, #5	@ D.6600, tmp180,
 3999 0090 FA68     		ldr	r2, [r7, #12]	@ tmp181, pxTaskStatusArray
 4000 0092 1344     		add	r3, r3, r2	@ D.6604, tmp181
 4001 0094 7A69     		ldr	r2, [r7, #20]	@ tmp182, pxNextTCB
 4002 0096 126C     		ldr	r2, [r2, #64]	@ D.6600, pxNextTCB_23->uxTCBNumber
 4003 0098 9A60     		str	r2, [r3, #8]	@ D.6600, _31->xTaskNumber
2973:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 4004              		.loc 1 2973 0 discriminator 3
 4005 009a 7B6A     		ldr	r3, [r7, #36]	@ tmp183, uxTask
 4006 009c 5B01     		lsls	r3, r3, #5	@ D.6600, tmp183,
 4007 009e FA68     		ldr	r2, [r7, #12]	@ tmp184, pxTaskStatusArray
 4008 00a0 1344     		add	r3, r3, r2	@ D.6604, tmp184
 4009 00a2 FA79     		ldrb	r2, [r7, #7]	@ tmp185, eState
 4010 00a4 1A73     		strb	r2, [r3, #12]	@ tmp185, _34->eCurrentState
2974:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 127


 4011              		.loc 1 2974 0 discriminator 3
 4012 00a6 7B6A     		ldr	r3, [r7, #36]	@ tmp186, uxTask
 4013 00a8 5B01     		lsls	r3, r3, #5	@ D.6600, tmp186,
 4014 00aa FA68     		ldr	r2, [r7, #12]	@ tmp187, pxTaskStatusArray
 4015 00ac 1344     		add	r3, r3, r2	@ D.6604, tmp187
 4016 00ae 7A69     		ldr	r2, [r7, #20]	@ tmp188, pxNextTCB
 4017 00b0 D26A     		ldr	r2, [r2, #44]	@ D.6600, pxNextTCB_23->uxPriority
 4018 00b2 1A61     		str	r2, [r3, #16]	@ D.6600, _37->uxCurrentPriority
2975:FreeRTOS/tasks.c **** 
2976:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2977:FreeRTOS/tasks.c **** 				{
2978:FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a chance
2979:FreeRTOS/tasks.c **** 					it is actually just blocked indefinitely - so really it should
2980:FreeRTOS/tasks.c **** 					be reported as being in the Blocked state. */
2981:FreeRTOS/tasks.c **** 					if( eState == eSuspended )
 4019              		.loc 1 2981 0 discriminator 3
 4020 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2	@ tmp189, eState
 4021 00b6 032B     		cmp	r3, #3	@ tmp189,
 4022 00b8 09D1     		bne	.L287	@,
2982:FreeRTOS/tasks.c **** 					{
2983:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 4023              		.loc 1 2983 0
 4024 00ba 7B69     		ldr	r3, [r7, #20]	@ tmp190, pxNextTCB
 4025 00bc 9B6A     		ldr	r3, [r3, #40]	@ D.6606, pxNextTCB_23->xEventListItem.pvContainer
 4026 00be 002B     		cmp	r3, #0	@ D.6606,
 4027 00c0 05D0     		beq	.L287	@,
2984:FreeRTOS/tasks.c **** 						{
2985:FreeRTOS/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 4028              		.loc 1 2985 0
 4029 00c2 7B6A     		ldr	r3, [r7, #36]	@ tmp191, uxTask
 4030 00c4 5B01     		lsls	r3, r3, #5	@ D.6600, tmp191,
 4031 00c6 FA68     		ldr	r2, [r7, #12]	@ tmp192, pxTaskStatusArray
 4032 00c8 1344     		add	r3, r3, r2	@ D.6604, tmp192
 4033 00ca 0222     		movs	r2, #2	@ tmp193,
 4034 00cc 1A73     		strb	r2, [r3, #12]	@ tmp194, _41->eCurrentState
 4035              	.L287:
2986:FreeRTOS/tasks.c **** 						}
2987:FreeRTOS/tasks.c **** 					}
2988:FreeRTOS/tasks.c **** 				}
2989:FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
2990:FreeRTOS/tasks.c **** 
2991:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
2992:FreeRTOS/tasks.c **** 				{
2993:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 4036              		.loc 1 2993 0
 4037 00ce 7B6A     		ldr	r3, [r7, #36]	@ tmp195, uxTask
 4038 00d0 5B01     		lsls	r3, r3, #5	@ D.6600, tmp195,
 4039 00d2 FA68     		ldr	r2, [r7, #12]	@ tmp196, pxTaskStatusArray
 4040 00d4 1344     		add	r3, r3, r2	@ D.6604, tmp196
 4041 00d6 7A69     		ldr	r2, [r7, #20]	@ tmp197, pxNextTCB
 4042 00d8 926C     		ldr	r2, [r2, #72]	@ D.6600, pxNextTCB_23->uxBasePriority
 4043 00da 5A61     		str	r2, [r3, #20]	@ D.6600, _43->uxBasePriority
2994:FreeRTOS/tasks.c **** 				}
2995:FreeRTOS/tasks.c **** 				#else
2996:FreeRTOS/tasks.c **** 				{
2997:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
2998:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 128


2999:FreeRTOS/tasks.c **** 				#endif
3000:FreeRTOS/tasks.c **** 
3001:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3002:FreeRTOS/tasks.c **** 				{
3003:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3004:FreeRTOS/tasks.c **** 				}
3005:FreeRTOS/tasks.c **** 				#else
3006:FreeRTOS/tasks.c **** 				{
3007:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 4044              		.loc 1 3007 0
 4045 00dc 7B6A     		ldr	r3, [r7, #36]	@ tmp198, uxTask
 4046 00de 5B01     		lsls	r3, r3, #5	@ D.6600, tmp198,
 4047 00e0 FA68     		ldr	r2, [r7, #12]	@ tmp199, pxTaskStatusArray
 4048 00e2 1344     		add	r3, r3, r2	@ D.6604, tmp199
 4049 00e4 0022     		movs	r2, #0	@ tmp200,
 4050 00e6 9A61     		str	r2, [r3, #24]	@ tmp200, _46->ulRunTimeCounter
3008:FreeRTOS/tasks.c **** 				}
3009:FreeRTOS/tasks.c **** 				#endif
3010:FreeRTOS/tasks.c **** 
3011:FreeRTOS/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3012:FreeRTOS/tasks.c **** 				{
3013:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3014:FreeRTOS/tasks.c **** 				}
3015:FreeRTOS/tasks.c **** 				#else
3016:FreeRTOS/tasks.c **** 				{
3017:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
 4051              		.loc 1 3017 0
 4052 00e8 7B6A     		ldr	r3, [r7, #36]	@ tmp201, uxTask
 4053 00ea 5B01     		lsls	r3, r3, #5	@ D.6600, tmp201,
 4054 00ec FA68     		ldr	r2, [r7, #12]	@ tmp202, pxTaskStatusArray
 4055 00ee D418     		adds	r4, r2, r3	@ D.6604, tmp202, D.6600
 4056 00f0 7B69     		ldr	r3, [r7, #20]	@ tmp203, pxNextTCB
 4057 00f2 1B6B     		ldr	r3, [r3, #48]	@ D.6607, pxNextTCB_23->pxStack
 4058 00f4 1846     		mov	r0, r3	@, D.6607
 4059 00f6 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4060 00fa 0346     		mov	r3, r0	@ tmp204,
 4061 00fc A383     		strh	r3, [r4, #28]	@ movhi	@ tmp205, _48->usStackHighWaterMark
3018:FreeRTOS/tasks.c **** 				}
3019:FreeRTOS/tasks.c **** 				#endif
3020:FreeRTOS/tasks.c **** 
3021:FreeRTOS/tasks.c **** 				uxTask++;
 4062              		.loc 1 3021 0
 4063 00fe 7B6A     		ldr	r3, [r7, #36]	@ tmp207, uxTask
 4064 0100 0133     		adds	r3, r3, #1	@ tmp206, tmp207,
 4065 0102 7B62     		str	r3, [r7, #36]	@ tmp206, uxTask
3022:FreeRTOS/tasks.c **** 
3023:FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4066              		.loc 1 3023 0
 4067 0104 7A69     		ldr	r2, [r7, #20]	@ tmp208, pxNextTCB
 4068 0106 FB69     		ldr	r3, [r7, #28]	@ tmp209, pxFirstTCB
 4069 0108 9A42     		cmp	r2, r3	@ tmp208, tmp209
 4070 010a 9CD1     		bne	.L288	@,
 4071              	.L284:
3024:FreeRTOS/tasks.c **** 		}
3025:FreeRTOS/tasks.c **** 		else
3026:FreeRTOS/tasks.c **** 		{
3027:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 129


3028:FreeRTOS/tasks.c **** 		}
3029:FreeRTOS/tasks.c **** 
3030:FreeRTOS/tasks.c **** 		return uxTask;
 4072              		.loc 1 3030 0
 4073 010c 7B6A     		ldr	r3, [r7, #36]	@ D.6609, uxTask
3031:FreeRTOS/tasks.c **** 	}
 4074              		.loc 1 3031 0
 4075 010e 1846     		mov	r0, r3	@, <retval>
 4076 0110 2C37     		adds	r7, r7, #44	@,,
 4077              		.cfi_def_cfa_offset 12
 4078 0112 BD46     		mov	sp, r7	@,
 4079              		.cfi_def_cfa_register 13
 4080              		@ sp needed	@
 4081 0114 90BD     		pop	{r4, r7, pc}	@
 4082              		.cfi_endproc
 4083              	.LFE36:
 4084              		.size	prvListTaskWithinSingleList, .-prvListTaskWithinSingleList
 4085 0116 00BF     		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4086              		.align	2
 4087              		.thumb
 4088              		.thumb_func
 4089              		.type	prvTaskCheckFreeStackSpace, %function
 4090              	prvTaskCheckFreeStackSpace:
 4091              	.LFB37:
3032:FreeRTOS/tasks.c **** 
3033:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3034:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3035:FreeRTOS/tasks.c **** 
3036:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3037:FreeRTOS/tasks.c **** 
3038:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3039:FreeRTOS/tasks.c **** 	{
 4092              		.loc 1 3039 0
 4093              		.cfi_startproc
 4094              		@ args = 0, pretend = 0, frame = 16
 4095              		@ frame_needed = 1, uses_anonymous_args = 0
 4096              		@ link register save eliminated.
 4097 0000 80B4     		push	{r7}	@
 4098              		.cfi_def_cfa_offset 4
 4099              		.cfi_offset 7, -4
 4100 0002 85B0     		sub	sp, sp, #20	@,,
 4101              		.cfi_def_cfa_offset 24
 4102 0004 00AF     		add	r7, sp, #0	@,,
 4103              		.cfi_def_cfa_register 7
 4104 0006 7860     		str	r0, [r7, #4]	@ pucStackByte, pucStackByte
3040:FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 4105              		.loc 1 3040 0
 4106 0008 0023     		movs	r3, #0	@ tmp113,
 4107 000a FB60     		str	r3, [r7, #12]	@ tmp113, ulCount
3041:FreeRTOS/tasks.c **** 
3042:FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4108              		.loc 1 3042 0
 4109 000c 05E0     		b	.L291	@
 4110              	.L292:
3043:FreeRTOS/tasks.c **** 		{
3044:FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4111              		.loc 1 3044 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 130


 4112 000e 7B68     		ldr	r3, [r7, #4]	@ tmp115, pucStackByte
 4113 0010 0133     		adds	r3, r3, #1	@ tmp114, tmp115,
 4114 0012 7B60     		str	r3, [r7, #4]	@ tmp114, pucStackByte
3045:FreeRTOS/tasks.c **** 			ulCount++;
 4115              		.loc 1 3045 0
 4116 0014 FB68     		ldr	r3, [r7, #12]	@ tmp117, ulCount
 4117 0016 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 4118 0018 FB60     		str	r3, [r7, #12]	@ tmp116, ulCount
 4119              	.L291:
3042:FreeRTOS/tasks.c **** 		{
 4120              		.loc 1 3042 0
 4121 001a 7B68     		ldr	r3, [r7, #4]	@ tmp118, pucStackByte
 4122 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ D.6610, *pucStackByte_1
 4123 001e A52B     		cmp	r3, #165	@ D.6610,
 4124 0020 F5D0     		beq	.L292	@,
3046:FreeRTOS/tasks.c **** 		}
3047:FreeRTOS/tasks.c **** 
3048:FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackT_t ); /*lint !e961 Casting is not redundant on smaller arch
 4125              		.loc 1 3048 0
 4126 0022 FB68     		ldr	r3, [r7, #12]	@ tmp120, ulCount
 4127 0024 9B08     		lsrs	r3, r3, #2	@ tmp119, tmp120,
 4128 0026 FB60     		str	r3, [r7, #12]	@ tmp119, ulCount
3049:FreeRTOS/tasks.c **** 
3050:FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 4129              		.loc 1 3050 0
 4130 0028 FB68     		ldr	r3, [r7, #12]	@ tmp121, ulCount
 4131 002a 9BB2     		uxth	r3, r3	@ D.6611, tmp121
3051:FreeRTOS/tasks.c **** 	}
 4132              		.loc 1 3051 0
 4133 002c 1846     		mov	r0, r3	@, <retval>
 4134 002e 1437     		adds	r7, r7, #20	@,,
 4135              		.cfi_def_cfa_offset 4
 4136 0030 BD46     		mov	sp, r7	@,
 4137              		.cfi_def_cfa_register 13
 4138              		@ sp needed	@
 4139 0032 5DF8047B 		ldr	r7, [sp], #4	@,
 4140              		.cfi_restore 7
 4141              		.cfi_def_cfa_offset 0
 4142 0036 7047     		bx	lr	@
 4143              		.cfi_endproc
 4144              	.LFE37:
 4145              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 4146              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4147              		.align	2
 4148              		.global	uxTaskGetStackHighWaterMark
 4149              		.thumb
 4150              		.thumb_func
 4151              		.type	uxTaskGetStackHighWaterMark, %function
 4152              	uxTaskGetStackHighWaterMark:
 4153              	.LFB38:
3052:FreeRTOS/tasks.c **** 
3053:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3054:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3055:FreeRTOS/tasks.c **** 
3056:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3057:FreeRTOS/tasks.c **** 
3058:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 131


3059:FreeRTOS/tasks.c **** 	{
 4154              		.loc 1 3059 0
 4155              		.cfi_startproc
 4156              		@ args = 0, pretend = 0, frame = 24
 4157              		@ frame_needed = 1, uses_anonymous_args = 0
 4158 0000 80B5     		push	{r7, lr}	@
 4159              		.cfi_def_cfa_offset 8
 4160              		.cfi_offset 7, -8
 4161              		.cfi_offset 14, -4
 4162 0002 86B0     		sub	sp, sp, #24	@,,
 4163              		.cfi_def_cfa_offset 32
 4164 0004 00AF     		add	r7, sp, #0	@,,
 4165              		.cfi_def_cfa_register 7
 4166 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
3060:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3061:FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3062:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
3063:FreeRTOS/tasks.c **** 
3064:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4167              		.loc 1 3064 0
 4168 0008 7B68     		ldr	r3, [r7, #4]	@ tmp114, xTask
 4169 000a 002B     		cmp	r3, #0	@ tmp114,
 4170 000c 02D1     		bne	.L295	@,
 4171              		.loc 1 3064 0 is_stmt 0 discriminator 1
 4172 000e 094B     		ldr	r3, .L298	@ tmp115,
 4173 0010 1B68     		ldr	r3, [r3]	@ D.6612, pxCurrentTCB
 4174 0012 00E0     		b	.L296	@
 4175              	.L295:
 4176              		.loc 1 3064 0 discriminator 2
 4177 0014 7B68     		ldr	r3, [r7, #4]	@ D.6612, xTask
 4178              	.L296:
 4179              		.loc 1 3064 0 discriminator 4
 4180 0016 7B61     		str	r3, [r7, #20]	@ D.6612, pxTCB
3065:FreeRTOS/tasks.c **** 
3066:FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3067:FreeRTOS/tasks.c **** 		{
3068:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 4181              		.loc 1 3068 0 is_stmt 1 discriminator 4
 4182 0018 7B69     		ldr	r3, [r7, #20]	@ tmp116, pxTCB
 4183 001a 1B6B     		ldr	r3, [r3, #48]	@ tmp117, pxTCB_5->pxStack
 4184 001c 3B61     		str	r3, [r7, #16]	@ tmp117, pucEndOfStack
3069:FreeRTOS/tasks.c **** 		}
3070:FreeRTOS/tasks.c **** 		#else
3071:FreeRTOS/tasks.c **** 		{
3072:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3073:FreeRTOS/tasks.c **** 		}
3074:FreeRTOS/tasks.c **** 		#endif
3075:FreeRTOS/tasks.c **** 
3076:FreeRTOS/tasks.c **** 		uxReturn = ( UBaseT_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 4185              		.loc 1 3076 0 discriminator 4
 4186 001e 3869     		ldr	r0, [r7, #16]	@, pucEndOfStack
 4187 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4188 0024 0346     		mov	r3, r0	@ tmp118,
 4189 0026 FB60     		str	r3, [r7, #12]	@ D.6613, uxReturn
3077:FreeRTOS/tasks.c **** 
3078:FreeRTOS/tasks.c **** 		return uxReturn;
 4190              		.loc 1 3078 0 discriminator 4
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 132


 4191 0028 FB68     		ldr	r3, [r7, #12]	@ D.6614, uxReturn
3079:FreeRTOS/tasks.c **** 	}
 4192              		.loc 1 3079 0 discriminator 4
 4193 002a 1846     		mov	r0, r3	@, <retval>
 4194 002c 1837     		adds	r7, r7, #24	@,,
 4195              		.cfi_def_cfa_offset 8
 4196 002e BD46     		mov	sp, r7	@,
 4197              		.cfi_def_cfa_register 13
 4198              		@ sp needed	@
 4199 0030 80BD     		pop	{r7, pc}	@
 4200              	.L299:
 4201 0032 00BF     		.align	2
 4202              	.L298:
 4203 0034 00000000 		.word	pxCurrentTCB
 4204              		.cfi_endproc
 4205              	.LFE38:
 4206              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 4207              		.section	.text.prvDeleteTCB,"ax",%progbits
 4208              		.align	2
 4209              		.thumb
 4210              		.thumb_func
 4211              		.type	prvDeleteTCB, %function
 4212              	prvDeleteTCB:
 4213              	.LFB39:
3080:FreeRTOS/tasks.c **** 
3081:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3082:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3083:FreeRTOS/tasks.c **** 
3084:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3085:FreeRTOS/tasks.c **** 
3086:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3087:FreeRTOS/tasks.c **** 	{
 4214              		.loc 1 3087 0
 4215              		.cfi_startproc
 4216              		@ args = 0, pretend = 0, frame = 8
 4217              		@ frame_needed = 1, uses_anonymous_args = 0
 4218 0000 80B5     		push	{r7, lr}	@
 4219              		.cfi_def_cfa_offset 8
 4220              		.cfi_offset 7, -8
 4221              		.cfi_offset 14, -4
 4222 0002 82B0     		sub	sp, sp, #8	@,,
 4223              		.cfi_def_cfa_offset 16
 4224 0004 00AF     		add	r7, sp, #0	@,,
 4225              		.cfi_def_cfa_register 7
 4226 0006 7860     		str	r0, [r7, #4]	@ pxTCB, pxTCB
3088:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3089:FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3090:FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3091:FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3092:FreeRTOS/tasks.c **** 
3093:FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3094:FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3095:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3096:FreeRTOS/tasks.c **** 		{
3097:FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3098:FreeRTOS/tasks.c **** 		}
3099:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 133


3100:FreeRTOS/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 4227              		.loc 1 3100 0
 4228 0008 7B68     		ldr	r3, [r7, #4]	@ tmp111, pxTCB
 4229 000a 1B6B     		ldr	r3, [r3, #48]	@ D.6615, pxTCB_1(D)->pxStack
 4230 000c 1846     		mov	r0, r3	@, D.6615
 4231 000e FFF7FEFF 		bl	vPortFree	@
3101:FreeRTOS/tasks.c **** 		vPortFree( pxTCB );
 4232              		.loc 1 3101 0
 4233 0012 7868     		ldr	r0, [r7, #4]	@, pxTCB
 4234 0014 FFF7FEFF 		bl	vPortFree	@
3102:FreeRTOS/tasks.c **** 	}
 4235              		.loc 1 3102 0
 4236 0018 0837     		adds	r7, r7, #8	@,,
 4237              		.cfi_def_cfa_offset 8
 4238 001a BD46     		mov	sp, r7	@,
 4239              		.cfi_def_cfa_register 13
 4240              		@ sp needed	@
 4241 001c 80BD     		pop	{r7, pc}	@
 4242              		.cfi_endproc
 4243              	.LFE39:
 4244              		.size	prvDeleteTCB, .-prvDeleteTCB
 4245 001e 00BF     		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4246              		.align	2
 4247              		.thumb
 4248              		.thumb_func
 4249              		.type	prvResetNextTaskUnblockTime, %function
 4250              	prvResetNextTaskUnblockTime:
 4251              	.LFB40:
3103:FreeRTOS/tasks.c **** 
3104:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3105:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3106:FreeRTOS/tasks.c **** 
3107:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3108:FreeRTOS/tasks.c **** {
 4252              		.loc 1 3108 0
 4253              		.cfi_startproc
 4254              		@ args = 0, pretend = 0, frame = 8
 4255              		@ frame_needed = 1, uses_anonymous_args = 0
 4256              		@ link register save eliminated.
 4257 0000 80B4     		push	{r7}	@
 4258              		.cfi_def_cfa_offset 4
 4259              		.cfi_offset 7, -4
 4260 0002 83B0     		sub	sp, sp, #12	@,,
 4261              		.cfi_def_cfa_offset 16
 4262 0004 00AF     		add	r7, sp, #0	@,,
 4263              		.cfi_def_cfa_register 7
3109:FreeRTOS/tasks.c **** TCB_t *pxTCB;
3110:FreeRTOS/tasks.c **** 
3111:FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4264              		.loc 1 3111 0
 4265 0006 0E4B     		ldr	r3, .L306	@ tmp116,
 4266 0008 1B68     		ldr	r3, [r3]	@ D.6617, pxDelayedTaskList
 4267 000a 1B68     		ldr	r3, [r3]	@ D.6618, _2->uxNumberOfItems
 4268 000c 002B     		cmp	r3, #0	@ D.6618,
 4269 000e 01D1     		bne	.L302	@,
 4270              		.loc 1 3111 0 is_stmt 0 discriminator 1
 4271 0010 0123     		movs	r3, #1	@ D.6616,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 134


 4272 0012 00E0     		b	.L303	@
 4273              	.L302:
 4274              		.loc 1 3111 0 discriminator 2
 4275 0014 0023     		movs	r3, #0	@ D.6616,
 4276              	.L303:
 4277              		.loc 1 3111 0 discriminator 4
 4278 0016 002B     		cmp	r3, #0	@ D.6616,
 4279 0018 04D0     		beq	.L304	@,
3112:FreeRTOS/tasks.c **** 	{
3113:FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set
3114:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime to the maximum possible value so it is
3115:FreeRTOS/tasks.c **** 		extremely unlikely that the
3116:FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3117:FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3118:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4280              		.loc 1 3118 0 is_stmt 1
 4281 001a 0A4B     		ldr	r3, .L306+4	@ tmp117,
 4282 001c 4FF0FF32 		mov	r2, #-1	@ tmp118,
 4283 0020 1A60     		str	r2, [r3]	@ tmp118, xNextTaskUnblockTime
 4284 0022 08E0     		b	.L301	@
 4285              	.L304:
3119:FreeRTOS/tasks.c **** 	}
3120:FreeRTOS/tasks.c **** 	else
3121:FreeRTOS/tasks.c **** 	{
3122:FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3123:FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3124:FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3125:FreeRTOS/tasks.c **** 		from the Blocked state. */
3126:FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 4286              		.loc 1 3126 0
 4287 0024 064B     		ldr	r3, .L306	@ tmp119,
 4288 0026 1B68     		ldr	r3, [r3]	@ D.6617, pxDelayedTaskList
 4289 0028 DB68     		ldr	r3, [r3, #12]	@ D.6619, _6->xListEnd.pxNext
 4290 002a DB68     		ldr	r3, [r3, #12]	@ tmp120, _7->pvOwner
 4291 002c 7B60     		str	r3, [r7, #4]	@ tmp120, pxTCB
3127:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 4292              		.loc 1 3127 0
 4293 002e 7B68     		ldr	r3, [r7, #4]	@ tmp121, pxTCB
 4294 0030 5B68     		ldr	r3, [r3, #4]	@ D.6618, pxTCB_8->xGenericListItem.xItemValue
 4295 0032 044A     		ldr	r2, .L306+4	@ tmp122,
 4296 0034 1360     		str	r3, [r2]	@ D.6618, xNextTaskUnblockTime
 4297              	.L301:
3128:FreeRTOS/tasks.c **** 	}
3129:FreeRTOS/tasks.c **** }
 4298              		.loc 1 3129 0
 4299 0036 0C37     		adds	r7, r7, #12	@,,
 4300              		.cfi_def_cfa_offset 4
 4301 0038 BD46     		mov	sp, r7	@,
 4302              		.cfi_def_cfa_register 13
 4303              		@ sp needed	@
 4304 003a 5DF8047B 		ldr	r7, [sp], #4	@,
 4305              		.cfi_restore 7
 4306              		.cfi_def_cfa_offset 0
 4307 003e 7047     		bx	lr	@
 4308              	.L307:
 4309              		.align	2
 4310              	.L306:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 135


 4311 0040 00000000 		.word	pxDelayedTaskList
 4312 0044 00000000 		.word	xNextTaskUnblockTime
 4313              		.cfi_endproc
 4314              	.LFE40:
 4315              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4316              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4317              		.align	2
 4318              		.global	xTaskGetCurrentTaskHandle
 4319              		.thumb
 4320              		.thumb_func
 4321              		.type	xTaskGetCurrentTaskHandle, %function
 4322              	xTaskGetCurrentTaskHandle:
 4323              	.LFB41:
3130:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3131:FreeRTOS/tasks.c **** 
3132:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3133:FreeRTOS/tasks.c **** 
3134:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3135:FreeRTOS/tasks.c **** 	{
 4324              		.loc 1 3135 0
 4325              		.cfi_startproc
 4326              		@ args = 0, pretend = 0, frame = 8
 4327              		@ frame_needed = 1, uses_anonymous_args = 0
 4328              		@ link register save eliminated.
 4329 0000 80B4     		push	{r7}	@
 4330              		.cfi_def_cfa_offset 4
 4331              		.cfi_offset 7, -4
 4332 0002 83B0     		sub	sp, sp, #12	@,,
 4333              		.cfi_def_cfa_offset 16
 4334 0004 00AF     		add	r7, sp, #0	@,,
 4335              		.cfi_def_cfa_register 7
3136:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3137:FreeRTOS/tasks.c **** 
3138:FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3139:FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3140:FreeRTOS/tasks.c **** 		individual execution thread. */
3141:FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 4336              		.loc 1 3141 0
 4337 0006 054B     		ldr	r3, .L310	@ tmp112,
 4338 0008 1B68     		ldr	r3, [r3]	@ tmp113, pxCurrentTCB
 4339 000a 7B60     		str	r3, [r7, #4]	@ tmp113, xReturn
3142:FreeRTOS/tasks.c **** 
3143:FreeRTOS/tasks.c **** 		return xReturn;
 4340              		.loc 1 3143 0
 4341 000c 7B68     		ldr	r3, [r7, #4]	@ D.6620, xReturn
3144:FreeRTOS/tasks.c **** 	}
 4342              		.loc 1 3144 0
 4343 000e 1846     		mov	r0, r3	@, <retval>
 4344 0010 0C37     		adds	r7, r7, #12	@,,
 4345              		.cfi_def_cfa_offset 4
 4346 0012 BD46     		mov	sp, r7	@,
 4347              		.cfi_def_cfa_register 13
 4348              		@ sp needed	@
 4349 0014 5DF8047B 		ldr	r7, [sp], #4	@,
 4350              		.cfi_restore 7
 4351              		.cfi_def_cfa_offset 0
 4352 0018 7047     		bx	lr	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 136


 4353              	.L311:
 4354 001a 00BF     		.align	2
 4355              	.L310:
 4356 001c 00000000 		.word	pxCurrentTCB
 4357              		.cfi_endproc
 4358              	.LFE41:
 4359              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4360              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4361              		.align	2
 4362              		.global	vTaskPriorityInherit
 4363              		.thumb
 4364              		.thumb_func
 4365              		.type	vTaskPriorityInherit, %function
 4366              	vTaskPriorityInherit:
 4367              	.LFB42:
3145:FreeRTOS/tasks.c **** 
3146:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3147:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3148:FreeRTOS/tasks.c **** 
3149:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3150:FreeRTOS/tasks.c **** 
3151:FreeRTOS/tasks.c **** 	BaseT_t xTaskGetSchedulerState( void )
3152:FreeRTOS/tasks.c **** 	{
3153:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
3154:FreeRTOS/tasks.c **** 
3155:FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3156:FreeRTOS/tasks.c **** 		{
3157:FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3158:FreeRTOS/tasks.c **** 		}
3159:FreeRTOS/tasks.c **** 		else
3160:FreeRTOS/tasks.c **** 		{
3161:FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
3162:FreeRTOS/tasks.c **** 			{
3163:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3164:FreeRTOS/tasks.c **** 			}
3165:FreeRTOS/tasks.c **** 			else
3166:FreeRTOS/tasks.c **** 			{
3167:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3168:FreeRTOS/tasks.c **** 			}
3169:FreeRTOS/tasks.c **** 		}
3170:FreeRTOS/tasks.c **** 
3171:FreeRTOS/tasks.c **** 		return xReturn;
3172:FreeRTOS/tasks.c **** 	}
3173:FreeRTOS/tasks.c **** 
3174:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3175:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3176:FreeRTOS/tasks.c **** 
3177:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3178:FreeRTOS/tasks.c **** 
3179:FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3180:FreeRTOS/tasks.c **** 	{
 4368              		.loc 1 3180 0
 4369              		.cfi_startproc
 4370              		@ args = 0, pretend = 0, frame = 16
 4371              		@ frame_needed = 1, uses_anonymous_args = 0
 4372 0000 80B5     		push	{r7, lr}	@
 4373              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 137


 4374              		.cfi_offset 7, -8
 4375              		.cfi_offset 14, -4
 4376 0002 84B0     		sub	sp, sp, #16	@,,
 4377              		.cfi_def_cfa_offset 24
 4378 0004 00AF     		add	r7, sp, #0	@,,
 4379              		.cfi_def_cfa_register 7
 4380 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
3181:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4381              		.loc 1 3181 0
 4382 0008 7B68     		ldr	r3, [r7, #4]	@ tmp144, pxMutexHolder
 4383 000a FB60     		str	r3, [r7, #12]	@ tmp144, pxTCB
3182:FreeRTOS/tasks.c **** 
3183:FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3184:FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3185:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 4384              		.loc 1 3185 0
 4385 000c 7B68     		ldr	r3, [r7, #4]	@ tmp145, pxMutexHolder
 4386 000e 002B     		cmp	r3, #0	@ tmp145,
 4387 0010 64D0     		beq	.L312	@,
3186:FreeRTOS/tasks.c **** 		{
3187:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4388              		.loc 1 3187 0
 4389 0012 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 4390 0014 DA6A     		ldr	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4391 0016 334B     		ldr	r3, .L321	@ tmp147,
 4392 0018 1B68     		ldr	r3, [r3]	@ D.6623, pxCurrentTCB
 4393 001a DB6A     		ldr	r3, [r3, #44]	@ D.6622, _5->uxPriority
 4394 001c 9A42     		cmp	r2, r3	@ D.6622, D.6622
 4395 001e 5DD2     		bcs	.L312	@,
3188:FreeRTOS/tasks.c **** 			{
3189:FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3190:FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3191:FreeRTOS/tasks.c **** 				not	being used for anything else. */
3192:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4396              		.loc 1 3192 0
 4397 0020 FB68     		ldr	r3, [r7, #12]	@ tmp148, pxTCB
 4398 0022 9B69     		ldr	r3, [r3, #24]	@ D.6622, pxTCB_3->xEventListItem.xItemValue
 4399 0024 002B     		cmp	r3, #0	@ D.6624,
 4400 0026 06DB     		blt	.L314	@,
3193:FreeRTOS/tasks.c **** 				{
3194:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 4401              		.loc 1 3194 0
 4402 0028 2E4B     		ldr	r3, .L321	@ tmp149,
 4403 002a 1B68     		ldr	r3, [r3]	@ D.6623, pxCurrentTCB
 4404 002c DB6A     		ldr	r3, [r3, #44]	@ D.6622, _9->uxPriority
 4405 002e C3F10802 		rsb	r2, r3, #8	@ D.6622, D.6622,
 4406 0032 FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 4407 0034 9A61     		str	r2, [r3, #24]	@ D.6622, pxTCB_3->xEventListItem.xItemValue
 4408              	.L314:
3195:FreeRTOS/tasks.c **** 				}
3196:FreeRTOS/tasks.c **** 				else
3197:FreeRTOS/tasks.c **** 				{
3198:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3199:FreeRTOS/tasks.c **** 				}
3200:FreeRTOS/tasks.c **** 
3201:FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need to
3202:FreeRTOS/tasks.c **** 				be moved into a new list. */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 138


3203:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 4409              		.loc 1 3203 0
 4410 0036 FB68     		ldr	r3, [r7, #12]	@ tmp151, pxTCB
 4411 0038 5969     		ldr	r1, [r3, #20]	@ D.6625, pxTCB_3->xGenericListItem.pvContainer
 4412 003a FB68     		ldr	r3, [r7, #12]	@ tmp152, pxTCB
 4413 003c DA6A     		ldr	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4414 003e 1346     		mov	r3, r2	@ tmp153, D.6622
 4415 0040 9B00     		lsls	r3, r3, #2	@ tmp153, tmp153,
 4416 0042 1344     		add	r3, r3, r2	@ tmp153, D.6622
 4417 0044 9B00     		lsls	r3, r3, #2	@ tmp154, tmp153,
 4418 0046 284A     		ldr	r2, .L321+4	@ tmp155,
 4419 0048 1344     		add	r3, r3, r2	@ D.6626, tmp155
 4420 004a 9942     		cmp	r1, r3	@ D.6625, D.6626
 4421 004c 01D1     		bne	.L315	@,
 4422              		.loc 1 3203 0 is_stmt 0 discriminator 1
 4423 004e 0123     		movs	r3, #1	@ D.6621,
 4424 0050 00E0     		b	.L316	@
 4425              	.L315:
 4426              		.loc 1 3203 0 discriminator 2
 4427 0052 0023     		movs	r3, #0	@ D.6621,
 4428              	.L316:
 4429              		.loc 1 3203 0 discriminator 4
 4430 0054 002B     		cmp	r3, #0	@ D.6621,
 4431 0056 3CD0     		beq	.L317	@,
3204:FreeRTOS/tasks.c **** 				{
3205:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 4432              		.loc 1 3205 0 is_stmt 1
 4433 0058 FB68     		ldr	r3, [r7, #12]	@ tmp156, pxTCB
 4434 005a 0433     		adds	r3, r3, #4	@ D.6627, tmp156,
 4435 005c 1846     		mov	r0, r3	@, D.6627
 4436 005e FFF7FEFF 		bl	uxListRemove	@
 4437 0062 0346     		mov	r3, r0	@ D.6622,
 4438 0064 002B     		cmp	r3, #0	@ D.6622,
 4439 0066 15D1     		bne	.L318	@,
3206:FreeRTOS/tasks.c **** 					{
3207:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4440              		.loc 1 3207 0
 4441 0068 FB68     		ldr	r3, [r7, #12]	@ tmp157, pxTCB
 4442 006a DA6A     		ldr	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4443 006c 1E49     		ldr	r1, .L321+4	@ tmp158,
 4444 006e 1346     		mov	r3, r2	@ tmp159, D.6622
 4445 0070 9B00     		lsls	r3, r3, #2	@ tmp159, tmp159,
 4446 0072 1344     		add	r3, r3, r2	@ tmp159, D.6622
 4447 0074 9B00     		lsls	r3, r3, #2	@ tmp160, tmp159,
 4448 0076 0B44     		add	r3, r3, r1	@ tmp161, tmp158
 4449 0078 1B68     		ldr	r3, [r3]	@ D.6622, pxReadyTasksLists[_19].uxNumberOfItems
 4450 007a 002B     		cmp	r3, #0	@ D.6622,
 4451 007c 0AD1     		bne	.L318	@,
 4452              		.loc 1 3207 0 is_stmt 0 discriminator 1
 4453 007e FB68     		ldr	r3, [r7, #12]	@ tmp162, pxTCB
 4454 0080 DB6A     		ldr	r3, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4455 0082 1A46     		mov	r2, r3	@ D.6628, D.6622
 4456 0084 0123     		movs	r3, #1	@ tmp163,
 4457 0086 9340     		lsls	r3, r3, r2	@ D.6622, tmp163, D.6628
 4458 0088 DA43     		mvns	r2, r3	@ D.6622, D.6622
 4459 008a 184B     		ldr	r3, .L321+8	@ tmp164,
 4460 008c 1B68     		ldr	r3, [r3]	@ D.6622, uxTopReadyPriority
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 139


 4461 008e 1340     		ands	r3, r3, r2	@, D.6622, D.6622, D.6622
 4462 0090 164A     		ldr	r2, .L321+8	@ tmp165,
 4463 0092 1360     		str	r3, [r2]	@ D.6622, uxTopReadyPriority
 4464              	.L318:
3208:FreeRTOS/tasks.c **** 					}
3209:FreeRTOS/tasks.c **** 					else
3210:FreeRTOS/tasks.c **** 					{
3211:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3212:FreeRTOS/tasks.c **** 					}
3213:FreeRTOS/tasks.c **** 
3214:FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3215:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4465              		.loc 1 3215 0 is_stmt 1
 4466 0094 134B     		ldr	r3, .L321	@ tmp166,
 4467 0096 1B68     		ldr	r3, [r3]	@ D.6623, pxCurrentTCB
 4468 0098 DA6A     		ldr	r2, [r3, #44]	@ D.6622, _27->uxPriority
 4469 009a FB68     		ldr	r3, [r7, #12]	@ tmp167, pxTCB
 4470 009c DA62     		str	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
3216:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4471              		.loc 1 3216 0
 4472 009e FB68     		ldr	r3, [r7, #12]	@ tmp168, pxTCB
 4473 00a0 DB6A     		ldr	r3, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4474 00a2 1A46     		mov	r2, r3	@ D.6628, D.6622
 4475 00a4 0123     		movs	r3, #1	@ tmp169,
 4476 00a6 03FA02F2 		lsl	r2, r3, r2	@ D.6622, tmp169, D.6628
 4477 00aa 104B     		ldr	r3, .L321+8	@ tmp170,
 4478 00ac 1B68     		ldr	r3, [r3]	@ D.6622, uxTopReadyPriority
 4479 00ae 1343     		orrs	r3, r3, r2	@, D.6622, D.6622, D.6622
 4480 00b0 0E4A     		ldr	r2, .L321+8	@ tmp171,
 4481 00b2 1360     		str	r3, [r2]	@ D.6622, uxTopReadyPriority
 4482 00b4 FB68     		ldr	r3, [r7, #12]	@ tmp172, pxTCB
 4483 00b6 DA6A     		ldr	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4484 00b8 1346     		mov	r3, r2	@ tmp173, D.6622
 4485 00ba 9B00     		lsls	r3, r3, #2	@ tmp173, tmp173,
 4486 00bc 1344     		add	r3, r3, r2	@ tmp173, D.6622
 4487 00be 9B00     		lsls	r3, r3, #2	@ tmp174, tmp173,
 4488 00c0 094A     		ldr	r2, .L321+4	@ tmp175,
 4489 00c2 1A44     		add	r2, r2, r3	@ D.6626, tmp173
 4490 00c4 FB68     		ldr	r3, [r7, #12]	@ tmp176, pxTCB
 4491 00c6 0433     		adds	r3, r3, #4	@ D.6627, tmp176,
 4492 00c8 1046     		mov	r0, r2	@, D.6626
 4493 00ca 1946     		mov	r1, r3	@, D.6627
 4494 00cc FFF7FEFF 		bl	vListInsertEnd	@
 4495 00d0 04E0     		b	.L312	@
 4496              	.L317:
3217:FreeRTOS/tasks.c **** 				}
3218:FreeRTOS/tasks.c **** 				else
3219:FreeRTOS/tasks.c **** 				{
3220:FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3221:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4497              		.loc 1 3221 0
 4498 00d2 044B     		ldr	r3, .L321	@ tmp177,
 4499 00d4 1B68     		ldr	r3, [r3]	@ D.6623, pxCurrentTCB
 4500 00d6 DA6A     		ldr	r2, [r3, #44]	@ D.6622, _37->uxPriority
 4501 00d8 FB68     		ldr	r3, [r7, #12]	@ tmp178, pxTCB
 4502 00da DA62     		str	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4503              	.L312:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 140


3222:FreeRTOS/tasks.c **** 				}
3223:FreeRTOS/tasks.c **** 
3224:FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3225:FreeRTOS/tasks.c **** 			}
3226:FreeRTOS/tasks.c **** 			else
3227:FreeRTOS/tasks.c **** 			{
3228:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3229:FreeRTOS/tasks.c **** 			}
3230:FreeRTOS/tasks.c **** 		}
3231:FreeRTOS/tasks.c **** 		else
3232:FreeRTOS/tasks.c **** 		{
3233:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3234:FreeRTOS/tasks.c **** 		}
3235:FreeRTOS/tasks.c **** 	}
 4504              		.loc 1 3235 0
 4505 00dc 1037     		adds	r7, r7, #16	@,,
 4506              		.cfi_def_cfa_offset 8
 4507 00de BD46     		mov	sp, r7	@,
 4508              		.cfi_def_cfa_register 13
 4509              		@ sp needed	@
 4510 00e0 80BD     		pop	{r7, pc}	@
 4511              	.L322:
 4512 00e2 00BF     		.align	2
 4513              	.L321:
 4514 00e4 00000000 		.word	pxCurrentTCB
 4515 00e8 00000000 		.word	pxReadyTasksLists
 4516 00ec 00000000 		.word	uxTopReadyPriority
 4517              		.cfi_endproc
 4518              	.LFE42:
 4519              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 4520              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4521              		.align	2
 4522              		.global	xTaskPriorityDisinherit
 4523              		.thumb
 4524              		.thumb_func
 4525              		.type	xTaskPriorityDisinherit, %function
 4526              	xTaskPriorityDisinherit:
 4527              	.LFB43:
3236:FreeRTOS/tasks.c **** 
3237:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3238:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3239:FreeRTOS/tasks.c **** 
3240:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3241:FreeRTOS/tasks.c **** 
3242:FreeRTOS/tasks.c **** 	BaseT_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3243:FreeRTOS/tasks.c **** 	{
 4528              		.loc 1 3243 0
 4529              		.cfi_startproc
 4530              		@ args = 0, pretend = 0, frame = 16
 4531              		@ frame_needed = 1, uses_anonymous_args = 0
 4532 0000 80B5     		push	{r7, lr}	@
 4533              		.cfi_def_cfa_offset 8
 4534              		.cfi_offset 7, -8
 4535              		.cfi_offset 14, -4
 4536 0002 84B0     		sub	sp, sp, #16	@,,
 4537              		.cfi_def_cfa_offset 24
 4538 0004 00AF     		add	r7, sp, #0	@,,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 141


 4539              		.cfi_def_cfa_register 7
 4540 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
3244:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4541              		.loc 1 3244 0
 4542 0008 7B68     		ldr	r3, [r7, #4]	@ tmp139, pxMutexHolder
 4543 000a BB60     		str	r3, [r7, #8]	@ tmp139, pxTCB
3245:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 4544              		.loc 1 3245 0
 4545 000c 0023     		movs	r3, #0	@ tmp140,
 4546 000e FB60     		str	r3, [r7, #12]	@ tmp140, xReturn
3246:FreeRTOS/tasks.c **** 
3247:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 4547              		.loc 1 3247 0
 4548 0010 7B68     		ldr	r3, [r7, #4]	@ tmp141, pxMutexHolder
 4549 0012 002B     		cmp	r3, #0	@ tmp141,
 4550 0014 58D0     		beq	.L324	@,
3248:FreeRTOS/tasks.c **** 		{
3249:FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4551              		.loc 1 3249 0
 4552 0016 BB68     		ldr	r3, [r7, #8]	@ tmp142, pxTCB
 4553 0018 DB6C     		ldr	r3, [r3, #76]	@ D.6629, pxTCB_3->uxMutexesHeld
 4554 001a 002B     		cmp	r3, #0	@ D.6629,
 4555 001c 02D1     		bne	.L325	@,
 4556              		.loc 1 3249 0 is_stmt 0 discriminator 1
 4557 001e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 4558              	.L326:
 4559 0022 FEE7     		b	.L326	@
 4560              	.L325:
3250:FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4561              		.loc 1 3250 0 is_stmt 1
 4562 0024 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxTCB
 4563 0026 DB6C     		ldr	r3, [r3, #76]	@ D.6629, pxTCB_3->uxMutexesHeld
 4564 0028 5A1E     		subs	r2, r3, #1	@ D.6629, D.6629,
 4565 002a BB68     		ldr	r3, [r7, #8]	@ tmp144, pxTCB
 4566 002c DA64     		str	r2, [r3, #76]	@ D.6629, pxTCB_3->uxMutexesHeld
3251:FreeRTOS/tasks.c **** 
3252:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4567              		.loc 1 3252 0
 4568 002e BB68     		ldr	r3, [r7, #8]	@ tmp145, pxTCB
 4569 0030 DA6A     		ldr	r2, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4570 0032 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxTCB
 4571 0034 9B6C     		ldr	r3, [r3, #72]	@ D.6629, pxTCB_3->uxBasePriority
 4572 0036 9A42     		cmp	r2, r3	@ D.6629, D.6629
 4573 0038 46D0     		beq	.L324	@,
3253:FreeRTOS/tasks.c **** 			{
3254:FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3255:FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseT_t ) 0 )
 4574              		.loc 1 3255 0
 4575 003a BB68     		ldr	r3, [r7, #8]	@ tmp147, pxTCB
 4576 003c DB6C     		ldr	r3, [r3, #76]	@ D.6629, pxTCB_3->uxMutexesHeld
 4577 003e 002B     		cmp	r3, #0	@ D.6629,
 4578 0040 42D1     		bne	.L324	@,
3256:FreeRTOS/tasks.c **** 				{
3257:FreeRTOS/tasks.c **** 					/* The holding task must be the running task to be able to give
3258:FreeRTOS/tasks.c **** 					the mutex back.  Remove the holding task from the ready list. */
3259:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 4579              		.loc 1 3259 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 142


 4580 0042 BB68     		ldr	r3, [r7, #8]	@ tmp148, pxTCB
 4581 0044 0433     		adds	r3, r3, #4	@ D.6630, tmp148,
 4582 0046 1846     		mov	r0, r3	@, D.6630
 4583 0048 FFF7FEFF 		bl	uxListRemove	@
 4584 004c 0346     		mov	r3, r0	@ D.6629,
 4585 004e 002B     		cmp	r3, #0	@ D.6629,
 4586 0050 15D1     		bne	.L327	@,
3260:FreeRTOS/tasks.c **** 					{
3261:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4587              		.loc 1 3261 0
 4588 0052 BB68     		ldr	r3, [r7, #8]	@ tmp149, pxTCB
 4589 0054 DA6A     		ldr	r2, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4590 0056 1F49     		ldr	r1, .L330	@ tmp150,
 4591 0058 1346     		mov	r3, r2	@ tmp151, D.6629
 4592 005a 9B00     		lsls	r3, r3, #2	@ tmp151, tmp151,
 4593 005c 1344     		add	r3, r3, r2	@ tmp151, D.6629
 4594 005e 9B00     		lsls	r3, r3, #2	@ tmp152, tmp151,
 4595 0060 0B44     		add	r3, r3, r1	@ tmp153, tmp150
 4596 0062 1B68     		ldr	r3, [r3]	@ D.6629, pxReadyTasksLists[_13].uxNumberOfItems
 4597 0064 002B     		cmp	r3, #0	@ D.6629,
 4598 0066 0AD1     		bne	.L327	@,
 4599              		.loc 1 3261 0 is_stmt 0 discriminator 1
 4600 0068 BB68     		ldr	r3, [r7, #8]	@ tmp154, pxTCB
 4601 006a DB6A     		ldr	r3, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4602 006c 1A46     		mov	r2, r3	@ D.6631, D.6629
 4603 006e 0123     		movs	r3, #1	@ tmp155,
 4604 0070 9340     		lsls	r3, r3, r2	@ D.6629, tmp155, D.6631
 4605 0072 DA43     		mvns	r2, r3	@ D.6629, D.6629
 4606 0074 184B     		ldr	r3, .L330+4	@ tmp156,
 4607 0076 1B68     		ldr	r3, [r3]	@ D.6629, uxTopReadyPriority
 4608 0078 1340     		ands	r3, r3, r2	@, D.6629, D.6629, D.6629
 4609 007a 174A     		ldr	r2, .L330+4	@ tmp157,
 4610 007c 1360     		str	r3, [r2]	@ D.6629, uxTopReadyPriority
 4611              	.L327:
3262:FreeRTOS/tasks.c **** 					}
3263:FreeRTOS/tasks.c **** 					else
3264:FreeRTOS/tasks.c **** 					{
3265:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3266:FreeRTOS/tasks.c **** 					}
3267:FreeRTOS/tasks.c **** 
3268:FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the new
3269:FreeRTOS/tasks.c **** 					ready list. */
3270:FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3271:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4612              		.loc 1 3271 0 is_stmt 1
 4613 007e BB68     		ldr	r3, [r7, #8]	@ tmp158, pxTCB
 4614 0080 9A6C     		ldr	r2, [r3, #72]	@ D.6629, pxTCB_3->uxBasePriority
 4615 0082 BB68     		ldr	r3, [r7, #8]	@ tmp159, pxTCB
 4616 0084 DA62     		str	r2, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
3272:FreeRTOS/tasks.c **** 
3273:FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3274:FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3275:FreeRTOS/tasks.c **** 					running to give back the mutex. */
3276:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 4617              		.loc 1 3276 0
 4618 0086 BB68     		ldr	r3, [r7, #8]	@ tmp160, pxTCB
 4619 0088 DB6A     		ldr	r3, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 143


 4620 008a C3F10802 		rsb	r2, r3, #8	@ D.6629, D.6629,
 4621 008e BB68     		ldr	r3, [r7, #8]	@ tmp161, pxTCB
 4622 0090 9A61     		str	r2, [r3, #24]	@ D.6629, pxTCB_3->xEventListItem.xItemValue
3277:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4623              		.loc 1 3277 0
 4624 0092 BB68     		ldr	r3, [r7, #8]	@ tmp162, pxTCB
 4625 0094 DB6A     		ldr	r3, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4626 0096 1A46     		mov	r2, r3	@ D.6631, D.6629
 4627 0098 0123     		movs	r3, #1	@ tmp163,
 4628 009a 03FA02F2 		lsl	r2, r3, r2	@ D.6629, tmp163, D.6631
 4629 009e 0E4B     		ldr	r3, .L330+4	@ tmp164,
 4630 00a0 1B68     		ldr	r3, [r3]	@ D.6629, uxTopReadyPriority
 4631 00a2 1343     		orrs	r3, r3, r2	@, D.6629, D.6629, D.6629
 4632 00a4 0C4A     		ldr	r2, .L330+4	@ tmp165,
 4633 00a6 1360     		str	r3, [r2]	@ D.6629, uxTopReadyPriority
 4634 00a8 BB68     		ldr	r3, [r7, #8]	@ tmp166, pxTCB
 4635 00aa DA6A     		ldr	r2, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4636 00ac 1346     		mov	r3, r2	@ tmp167, D.6629
 4637 00ae 9B00     		lsls	r3, r3, #2	@ tmp167, tmp167,
 4638 00b0 1344     		add	r3, r3, r2	@ tmp167, D.6629
 4639 00b2 9B00     		lsls	r3, r3, #2	@ tmp168, tmp167,
 4640 00b4 074A     		ldr	r2, .L330	@ tmp169,
 4641 00b6 1A44     		add	r2, r2, r3	@ D.6632, tmp167
 4642 00b8 BB68     		ldr	r3, [r7, #8]	@ tmp170, pxTCB
 4643 00ba 0433     		adds	r3, r3, #4	@ D.6630, tmp170,
 4644 00bc 1046     		mov	r0, r2	@, D.6632
 4645 00be 1946     		mov	r1, r3	@, D.6630
 4646 00c0 FFF7FEFF 		bl	vListInsertEnd	@
3278:FreeRTOS/tasks.c **** 
3279:FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3280:FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3281:FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3282:FreeRTOS/tasks.c **** 					in an order different to that in which they were taken. */
3283:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 4647              		.loc 1 3283 0
 4648 00c4 0123     		movs	r3, #1	@ tmp171,
 4649 00c6 FB60     		str	r3, [r7, #12]	@ tmp171, xReturn
 4650              	.L324:
3284:FreeRTOS/tasks.c **** 				}
3285:FreeRTOS/tasks.c **** 				else
3286:FreeRTOS/tasks.c **** 				{
3287:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3288:FreeRTOS/tasks.c **** 				}
3289:FreeRTOS/tasks.c **** 			}
3290:FreeRTOS/tasks.c **** 			else
3291:FreeRTOS/tasks.c **** 			{
3292:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3293:FreeRTOS/tasks.c **** 			}
3294:FreeRTOS/tasks.c **** 		}
3295:FreeRTOS/tasks.c **** 		else
3296:FreeRTOS/tasks.c **** 		{
3297:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3298:FreeRTOS/tasks.c **** 		}
3299:FreeRTOS/tasks.c **** 
3300:FreeRTOS/tasks.c **** 		return xReturn;
 4651              		.loc 1 3300 0
 4652 00c8 FB68     		ldr	r3, [r7, #12]	@ D.6633, xReturn
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 144


3301:FreeRTOS/tasks.c **** 	}
 4653              		.loc 1 3301 0
 4654 00ca 1846     		mov	r0, r3	@, <retval>
 4655 00cc 1037     		adds	r7, r7, #16	@,,
 4656              		.cfi_def_cfa_offset 8
 4657 00ce BD46     		mov	sp, r7	@,
 4658              		.cfi_def_cfa_register 13
 4659              		@ sp needed	@
 4660 00d0 80BD     		pop	{r7, pc}	@
 4661              	.L331:
 4662 00d2 00BF     		.align	2
 4663              	.L330:
 4664 00d4 00000000 		.word	pxReadyTasksLists
 4665 00d8 00000000 		.word	uxTopReadyPriority
 4666              		.cfi_endproc
 4667              	.LFE43:
 4668              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 4669              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4670              		.align	2
 4671              		.global	uxTaskResetEventItemValue
 4672              		.thumb
 4673              		.thumb_func
 4674              		.type	uxTaskResetEventItemValue, %function
 4675              	uxTaskResetEventItemValue:
 4676              	.LFB44:
3302:FreeRTOS/tasks.c **** 
3303:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3304:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3305:FreeRTOS/tasks.c **** 
3306:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3307:FreeRTOS/tasks.c **** 
3308:FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3309:FreeRTOS/tasks.c **** 	{
3310:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3311:FreeRTOS/tasks.c **** 
3312:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3313:FreeRTOS/tasks.c **** 		{
3314:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3315:FreeRTOS/tasks.c **** 
3316:FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3317:FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3318:FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3319:FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3320:FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3321:FreeRTOS/tasks.c **** 			critical section. */
3322:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3323:FreeRTOS/tasks.c **** 			{
3324:FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3325:FreeRTOS/tasks.c **** 			}
3326:FreeRTOS/tasks.c **** 
3327:FreeRTOS/tasks.c **** 		}
3328:FreeRTOS/tasks.c **** 		else
3329:FreeRTOS/tasks.c **** 		{
3330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3331:FreeRTOS/tasks.c **** 		}
3332:FreeRTOS/tasks.c **** 	}
3333:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 145


3334:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3335:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3336:FreeRTOS/tasks.c **** 
3337:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3338:FreeRTOS/tasks.c **** 
3339:FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3340:FreeRTOS/tasks.c **** 	{
3341:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3342:FreeRTOS/tasks.c **** 		{
3343:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3344:FreeRTOS/tasks.c **** 			{
3345:FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3346:FreeRTOS/tasks.c **** 
3347:FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3348:FreeRTOS/tasks.c **** 				{
3349:FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3350:FreeRTOS/tasks.c **** 				}
3351:FreeRTOS/tasks.c **** 				else
3352:FreeRTOS/tasks.c **** 				{
3353:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3354:FreeRTOS/tasks.c **** 				}
3355:FreeRTOS/tasks.c **** 			}
3356:FreeRTOS/tasks.c **** 			else
3357:FreeRTOS/tasks.c **** 			{
3358:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3359:FreeRTOS/tasks.c **** 			}
3360:FreeRTOS/tasks.c **** 		}
3361:FreeRTOS/tasks.c **** 		else
3362:FreeRTOS/tasks.c **** 		{
3363:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3364:FreeRTOS/tasks.c **** 		}
3365:FreeRTOS/tasks.c **** 	}
3366:FreeRTOS/tasks.c **** 
3367:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3368:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3369:FreeRTOS/tasks.c **** 
3370:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3371:FreeRTOS/tasks.c **** 
3372:FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3373:FreeRTOS/tasks.c **** 	{
3374:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3375:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3376:FreeRTOS/tasks.c **** 	char cStatus;
3377:FreeRTOS/tasks.c **** 
3378:FreeRTOS/tasks.c **** 		/*
3379:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3380:FreeRTOS/tasks.c **** 		 *
3381:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3382:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3383:FreeRTOS/tasks.c **** 		 * scheduler.
3384:FreeRTOS/tasks.c **** 		 *
3385:FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3386:FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3387:FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3388:FreeRTOS/tasks.c **** 		 *
3389:FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3390:FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 146


3391:FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3392:FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3393:FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3394:FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3395:FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3396:FreeRTOS/tasks.c **** 		 *
3397:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3398:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3399:FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
3400:FreeRTOS/tasks.c **** 		 */
3401:FreeRTOS/tasks.c **** 
3402:FreeRTOS/tasks.c **** 
3403:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3404:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3405:FreeRTOS/tasks.c **** 
3406:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3407:FreeRTOS/tasks.c **** 		function is executing. */
3408:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3409:FreeRTOS/tasks.c **** 
3410:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3411:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3412:FreeRTOS/tasks.c **** 
3413:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3414:FreeRTOS/tasks.c **** 		{
3415:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3416:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3417:FreeRTOS/tasks.c **** 
3418:FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3419:FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3420:FreeRTOS/tasks.c **** 			{
3421:FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3422:FreeRTOS/tasks.c **** 				{
3423:FreeRTOS/tasks.c **** 				case eReady:		cStatus = tskREADY_CHAR;
3424:FreeRTOS/tasks.c **** 									break;
3425:FreeRTOS/tasks.c **** 
3426:FreeRTOS/tasks.c **** 				case eBlocked:		cStatus = tskBLOCKED_CHAR;
3427:FreeRTOS/tasks.c **** 									break;
3428:FreeRTOS/tasks.c **** 
3429:FreeRTOS/tasks.c **** 				case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3430:FreeRTOS/tasks.c **** 									break;
3431:FreeRTOS/tasks.c **** 
3432:FreeRTOS/tasks.c **** 				case eDeleted:		cStatus = tskDELETED_CHAR;
3433:FreeRTOS/tasks.c **** 									break;
3434:FreeRTOS/tasks.c **** 
3435:FreeRTOS/tasks.c **** 				default:			/* Should not get here, but it is included
3436:FreeRTOS/tasks.c **** 									to prevent static checking errors. */
3437:FreeRTOS/tasks.c **** 									cStatus = 0x00;
3438:FreeRTOS/tasks.c **** 									break;
3439:FreeRTOS/tasks.c **** 				}
3440:FreeRTOS/tasks.c **** 
3441:FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus,
3442:FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3443:FreeRTOS/tasks.c **** 			}
3444:FreeRTOS/tasks.c **** 
3445:FreeRTOS/tasks.c **** 			/* Free the array again. */
3446:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3447:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 147


3448:FreeRTOS/tasks.c **** 		else
3449:FreeRTOS/tasks.c **** 		{
3450:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3451:FreeRTOS/tasks.c **** 		}
3452:FreeRTOS/tasks.c **** 	}
3453:FreeRTOS/tasks.c **** 
3454:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) ) */
3455:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
3456:FreeRTOS/tasks.c **** 
3457:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3458:FreeRTOS/tasks.c **** 
3459:FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3460:FreeRTOS/tasks.c **** 	{
3461:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3462:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3463:FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3464:FreeRTOS/tasks.c **** 
3465:FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3466:FreeRTOS/tasks.c **** 		{
3467:FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3468:FreeRTOS/tasks.c **** 		}
3469:FreeRTOS/tasks.c **** 		#endif
3470:FreeRTOS/tasks.c **** 
3471:FreeRTOS/tasks.c **** 		/*
3472:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3473:FreeRTOS/tasks.c **** 		 *
3474:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3475:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3476:FreeRTOS/tasks.c **** 		 * scheduler.
3477:FreeRTOS/tasks.c **** 		 *
3478:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3479:FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3480:FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3481:FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
3482:FreeRTOS/tasks.c **** 		 *
3483:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3484:FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3485:FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3486:FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3487:FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3488:FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3489:FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
3490:FreeRTOS/tasks.c **** 		 *
3491:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3492:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3493:FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3494:FreeRTOS/tasks.c **** 		 */
3495:FreeRTOS/tasks.c **** 
3496:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3497:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3498:FreeRTOS/tasks.c **** 
3499:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3500:FreeRTOS/tasks.c **** 		function is executing. */
3501:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3502:FreeRTOS/tasks.c **** 
3503:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3504:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 148


3505:FreeRTOS/tasks.c **** 
3506:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3507:FreeRTOS/tasks.c **** 		{
3508:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3509:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3510:FreeRTOS/tasks.c **** 
3511:FreeRTOS/tasks.c **** 			/* For percentage calculations. */
3512:FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
3513:FreeRTOS/tasks.c **** 
3514:FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
3515:FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
3516:FreeRTOS/tasks.c **** 			{
3517:FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
3518:FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3519:FreeRTOS/tasks.c **** 				{
3520:FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
3521:FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
3522:FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3523:FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3524:FreeRTOS/tasks.c **** 
3525:FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3526:FreeRTOS/tasks.c **** 					{
3527:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3528:FreeRTOS/tasks.c **** 						{
3529:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskS
3530:FreeRTOS/tasks.c **** 						}
3531:FreeRTOS/tasks.c **** 						#else
3532:FreeRTOS/tasks.c **** 						{
3533:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3534:FreeRTOS/tasks.c **** 							printf() library can be used. */
3535:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t%u%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3536:FreeRTOS/tasks.c **** 						}
3537:FreeRTOS/tasks.c **** 						#endif
3538:FreeRTOS/tasks.c **** 					}
3539:FreeRTOS/tasks.c **** 					else
3540:FreeRTOS/tasks.c **** 					{
3541:FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
3542:FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
3543:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3544:FreeRTOS/tasks.c **** 						{
3545:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskSt
3546:FreeRTOS/tasks.c **** 						}
3547:FreeRTOS/tasks.c **** 						#else
3548:FreeRTOS/tasks.c **** 						{
3549:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3550:FreeRTOS/tasks.c **** 							printf() library can be used. */
3551:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3552:FreeRTOS/tasks.c **** 						}
3553:FreeRTOS/tasks.c **** 						#endif
3554:FreeRTOS/tasks.c **** 					}
3555:FreeRTOS/tasks.c **** 
3556:FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3557:FreeRTOS/tasks.c **** 				}
3558:FreeRTOS/tasks.c **** 			}
3559:FreeRTOS/tasks.c **** 			else
3560:FreeRTOS/tasks.c **** 			{
3561:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 149


3562:FreeRTOS/tasks.c **** 			}
3563:FreeRTOS/tasks.c **** 
3564:FreeRTOS/tasks.c **** 			/* Free the array again. */
3565:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3566:FreeRTOS/tasks.c **** 		}
3567:FreeRTOS/tasks.c **** 		else
3568:FreeRTOS/tasks.c **** 		{
3569:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3570:FreeRTOS/tasks.c **** 		}
3571:FreeRTOS/tasks.c **** 	}
3572:FreeRTOS/tasks.c **** 
3573:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
3574:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3575:FreeRTOS/tasks.c **** 
3576:FreeRTOS/tasks.c **** TickT_t uxTaskResetEventItemValue( void )
3577:FreeRTOS/tasks.c **** {
 4677              		.loc 1 3577 0
 4678              		.cfi_startproc
 4679              		@ args = 0, pretend = 0, frame = 8
 4680              		@ frame_needed = 1, uses_anonymous_args = 0
 4681              		@ link register save eliminated.
 4682 0000 80B4     		push	{r7}	@
 4683              		.cfi_def_cfa_offset 4
 4684              		.cfi_offset 7, -4
 4685 0002 83B0     		sub	sp, sp, #12	@,,
 4686              		.cfi_def_cfa_offset 16
 4687 0004 00AF     		add	r7, sp, #0	@,,
 4688              		.cfi_def_cfa_register 7
3578:FreeRTOS/tasks.c **** TickT_t uxReturn;
3579:FreeRTOS/tasks.c **** 
3580:FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4689              		.loc 1 3580 0
 4690 0006 094B     		ldr	r3, .L334	@ tmp117,
 4691 0008 1B68     		ldr	r3, [r3]	@ D.6634, pxCurrentTCB
 4692 000a 9B69     		ldr	r3, [r3, #24]	@ tmp118, _1->xEventListItem.xItemValue
 4693 000c 7B60     		str	r3, [r7, #4]	@ tmp118, uxReturn
3581:FreeRTOS/tasks.c **** 
3582:FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3583:FreeRTOS/tasks.c **** 	queues and semaphores. */
3584:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - (
 4694              		.loc 1 3584 0
 4695 000e 074B     		ldr	r3, .L334	@ tmp119,
 4696 0010 1B68     		ldr	r3, [r3]	@ D.6634, pxCurrentTCB
 4697 0012 064A     		ldr	r2, .L334	@ tmp120,
 4698 0014 1268     		ldr	r2, [r2]	@ D.6634, pxCurrentTCB
 4699 0016 D26A     		ldr	r2, [r2, #44]	@ D.6635, _4->uxPriority
 4700 0018 C2F10802 		rsb	r2, r2, #8	@ D.6635, D.6635,
 4701 001c 9A61     		str	r2, [r3, #24]	@ D.6635, _3->xEventListItem.xItemValue
3585:FreeRTOS/tasks.c **** 
3586:FreeRTOS/tasks.c **** 	return uxReturn;
 4702              		.loc 1 3586 0
 4703 001e 7B68     		ldr	r3, [r7, #4]	@ D.6636, uxReturn
3587:FreeRTOS/tasks.c **** }
 4704              		.loc 1 3587 0
 4705 0020 1846     		mov	r0, r3	@, <retval>
 4706 0022 0C37     		adds	r7, r7, #12	@,,
 4707              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 150


 4708 0024 BD46     		mov	sp, r7	@,
 4709              		.cfi_def_cfa_register 13
 4710              		@ sp needed	@
 4711 0026 5DF8047B 		ldr	r7, [sp], #4	@,
 4712              		.cfi_restore 7
 4713              		.cfi_def_cfa_offset 0
 4714 002a 7047     		bx	lr	@
 4715              	.L335:
 4716              		.align	2
 4717              	.L334:
 4718 002c 00000000 		.word	pxCurrentTCB
 4719              		.cfi_endproc
 4720              	.LFE44:
 4721              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4722              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4723              		.align	2
 4724              		.global	pvTaskIncrementMutexHeldCount
 4725              		.thumb
 4726              		.thumb_func
 4727              		.type	pvTaskIncrementMutexHeldCount, %function
 4728              	pvTaskIncrementMutexHeldCount:
 4729              	.LFB45:
3588:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3589:FreeRTOS/tasks.c **** 
3590:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3591:FreeRTOS/tasks.c **** 
3592:FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3593:FreeRTOS/tasks.c **** 	{
 4730              		.loc 1 3593 0
 4731              		.cfi_startproc
 4732              		@ args = 0, pretend = 0, frame = 0
 4733              		@ frame_needed = 1, uses_anonymous_args = 0
 4734              		@ link register save eliminated.
 4735 0000 80B4     		push	{r7}	@
 4736              		.cfi_def_cfa_offset 4
 4737              		.cfi_offset 7, -4
 4738 0002 00AF     		add	r7, sp, #0	@,,
 4739              		.cfi_def_cfa_register 7
3594:FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3595:FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
3596:FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 4740              		.loc 1 3596 0
 4741 0004 074B     		ldr	r3, .L339	@ tmp116,
 4742 0006 1B68     		ldr	r3, [r3]	@ D.6637, pxCurrentTCB
 4743 0008 002B     		cmp	r3, #0	@ D.6637,
 4744 000a 04D0     		beq	.L337	@,
3597:FreeRTOS/tasks.c **** 		{
3598:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4745              		.loc 1 3598 0
 4746 000c 054B     		ldr	r3, .L339	@ tmp117,
 4747 000e 1B68     		ldr	r3, [r3]	@ D.6637, pxCurrentTCB
 4748 0010 DA6C     		ldr	r2, [r3, #76]	@ D.6638, _2->uxMutexesHeld
 4749 0012 0132     		adds	r2, r2, #1	@ D.6638, D.6638,
 4750 0014 DA64     		str	r2, [r3, #76]	@ D.6638, _2->uxMutexesHeld
 4751              	.L337:
3599:FreeRTOS/tasks.c **** 		}
3600:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 151


3601:FreeRTOS/tasks.c **** 		return pxCurrentTCB;
 4752              		.loc 1 3601 0
 4753 0016 034B     		ldr	r3, .L339	@ tmp118,
 4754 0018 1B68     		ldr	r3, [r3]	@ D.6639, pxCurrentTCB
3602:FreeRTOS/tasks.c **** 	}
 4755              		.loc 1 3602 0
 4756 001a 1846     		mov	r0, r3	@, <retval>
 4757 001c BD46     		mov	sp, r7	@,
 4758              		.cfi_def_cfa_register 13
 4759              		@ sp needed	@
 4760 001e 5DF8047B 		ldr	r7, [sp], #4	@,
 4761              		.cfi_restore 7
 4762              		.cfi_def_cfa_offset 0
 4763 0022 7047     		bx	lr	@
 4764              	.L340:
 4765              		.align	2
 4766              	.L339:
 4767 0024 00000000 		.word	pxCurrentTCB
 4768              		.cfi_endproc
 4769              	.LFE45:
 4770              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4771              		.text
 4772              	.Letext0:
 4773              		.file 3 "c:\\gnu tools arm embedded\\4.9 2015q1\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h
 4774              		.file 4 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\machine\\_default_types.h
 4775              		.file 5 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\stdint.h"
 4776              		.file 6 "FreeRTOS/include/projdefs.h"
 4777              		.file 7 "FreeRTOS/include/list.h"
 4778              		.file 8 "FreeRTOS/include/task.h"
 4779              		.section	.debug_info,"",%progbits
 4780              	.Ldebug_info0:
 4781 0000 4B120000 		.4byte	0x124b
 4782 0004 0400     		.2byte	0x4
 4783 0006 00000000 		.4byte	.Ldebug_abbrev0
 4784 000a 04       		.byte	0x4
 4785 000b 01       		.uleb128 0x1
 4786 000c 950B0000 		.4byte	.LASF1222
 4787 0010 01       		.byte	0x1
 4788 0011 C76B0000 		.4byte	.LASF1223
 4789 0015 48940000 		.4byte	.LASF1224
 4790 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4791 001d 00000000 		.4byte	0
 4792 0021 00000000 		.4byte	.Ldebug_line0
 4793 0025 00000000 		.4byte	.Ldebug_macro0
 4794 0029 02       		.uleb128 0x2
 4795 002a 03010000 		.4byte	.LASF1033
 4796 002e 03       		.byte	0x3
 4797 002f D4       		.byte	0xd4
 4798 0030 34000000 		.4byte	0x34
 4799 0034 03       		.uleb128 0x3
 4800 0035 04       		.byte	0x4
 4801 0036 07       		.byte	0x7
 4802 0037 BD540000 		.4byte	.LASF1031
 4803 003b 04       		.uleb128 0x4
 4804 003c 04       		.byte	0x4
 4805 003d 05       		.byte	0x5
 4806 003e 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 152


 4807 0042 03       		.uleb128 0x3
 4808 0043 01       		.byte	0x1
 4809 0044 06       		.byte	0x6
 4810 0045 BE040000 		.4byte	.LASF1032
 4811 0049 02       		.uleb128 0x2
 4812 004a B4100000 		.4byte	.LASF1034
 4813 004e 04       		.byte	0x4
 4814 004f 1D       		.byte	0x1d
 4815 0050 54000000 		.4byte	0x54
 4816 0054 03       		.uleb128 0x3
 4817 0055 01       		.byte	0x1
 4818 0056 08       		.byte	0x8
 4819 0057 A2000000 		.4byte	.LASF1035
 4820 005b 03       		.uleb128 0x3
 4821 005c 02       		.byte	0x2
 4822 005d 05       		.byte	0x5
 4823 005e 9E560000 		.4byte	.LASF1036
 4824 0062 02       		.uleb128 0x2
 4825 0063 06290000 		.4byte	.LASF1037
 4826 0067 04       		.byte	0x4
 4827 0068 2B       		.byte	0x2b
 4828 0069 6D000000 		.4byte	0x6d
 4829 006d 03       		.uleb128 0x3
 4830 006e 02       		.byte	0x2
 4831 006f 07       		.byte	0x7
 4832 0070 87360000 		.4byte	.LASF1038
 4833 0074 03       		.uleb128 0x3
 4834 0075 04       		.byte	0x4
 4835 0076 05       		.byte	0x5
 4836 0077 175B0000 		.4byte	.LASF1039
 4837 007b 02       		.uleb128 0x2
 4838 007c 413D0000 		.4byte	.LASF1040
 4839 0080 04       		.byte	0x4
 4840 0081 41       		.byte	0x41
 4841 0082 86000000 		.4byte	0x86
 4842 0086 03       		.uleb128 0x3
 4843 0087 04       		.byte	0x4
 4844 0088 07       		.byte	0x7
 4845 0089 82670000 		.4byte	.LASF1041
 4846 008d 03       		.uleb128 0x3
 4847 008e 08       		.byte	0x8
 4848 008f 05       		.byte	0x5
 4849 0090 3E490000 		.4byte	.LASF1042
 4850 0094 03       		.uleb128 0x3
 4851 0095 08       		.byte	0x8
 4852 0096 07       		.byte	0x7
 4853 0097 A4650000 		.4byte	.LASF1043
 4854 009b 03       		.uleb128 0x3
 4855 009c 04       		.byte	0x4
 4856 009d 07       		.byte	0x7
 4857 009e 5D010000 		.4byte	.LASF1044
 4858 00a2 05       		.uleb128 0x5
 4859 00a3 04       		.byte	0x4
 4860 00a4 03       		.uleb128 0x3
 4861 00a5 01       		.byte	0x1
 4862 00a6 08       		.byte	0x8
 4863 00a7 375F0000 		.4byte	.LASF1045
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 153


 4864 00ab 06       		.uleb128 0x6
 4865 00ac 04       		.byte	0x4
 4866 00ad B1000000 		.4byte	0xb1
 4867 00b1 07       		.uleb128 0x7
 4868 00b2 A4000000 		.4byte	0xa4
 4869 00b6 02       		.uleb128 0x2
 4870 00b7 E21B0000 		.4byte	.LASF1046
 4871 00bb 05       		.byte	0x5
 4872 00bc 15       		.byte	0x15
 4873 00bd 49000000 		.4byte	0x49
 4874 00c1 02       		.uleb128 0x2
 4875 00c2 72660000 		.4byte	.LASF1047
 4876 00c6 05       		.byte	0x5
 4877 00c7 21       		.byte	0x21
 4878 00c8 62000000 		.4byte	0x62
 4879 00cc 02       		.uleb128 0x2
 4880 00cd AD880000 		.4byte	.LASF1048
 4881 00d1 05       		.byte	0x5
 4882 00d2 2D       		.byte	0x2d
 4883 00d3 7B000000 		.4byte	0x7b
 4884 00d7 02       		.uleb128 0x2
 4885 00d8 06140000 		.4byte	.LASF1049
 4886 00dc 06       		.byte	0x6
 4887 00dd 49       		.byte	0x49
 4888 00de E2000000 		.4byte	0xe2
 4889 00e2 06       		.uleb128 0x6
 4890 00e3 04       		.byte	0x4
 4891 00e4 E8000000 		.4byte	0xe8
 4892 00e8 08       		.uleb128 0x8
 4893 00e9 F3000000 		.4byte	0xf3
 4894 00ed 09       		.uleb128 0x9
 4895 00ee A2000000 		.4byte	0xa2
 4896 00f2 00       		.byte	0
 4897 00f3 02       		.uleb128 0x2
 4898 00f4 17000000 		.4byte	.LASF1050
 4899 00f8 02       		.byte	0x2
 4900 00f9 5E       		.byte	0x5e
 4901 00fa CC000000 		.4byte	0xcc
 4902 00fe 02       		.uleb128 0x2
 4903 00ff 733B0000 		.4byte	.LASF1051
 4904 0103 02       		.byte	0x2
 4905 0104 60       		.byte	0x60
 4906 0105 74000000 		.4byte	0x74
 4907 0109 02       		.uleb128 0x2
 4908 010a 5A300000 		.4byte	.LASF1052
 4909 010e 02       		.byte	0x2
 4910 010f 62       		.byte	0x62
 4911 0110 86000000 		.4byte	0x86
 4912 0114 02       		.uleb128 0x2
 4913 0115 D86B0000 		.4byte	.LASF1053
 4914 0119 02       		.byte	0x2
 4915 011a 68       		.byte	0x68
 4916 011b CC000000 		.4byte	0xcc
 4917 011f 02       		.uleb128 0x2
 4918 0120 0B810000 		.4byte	.LASF1054
 4919 0124 02       		.byte	0x2
 4920 0125 69       		.byte	0x69
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 154


 4921 0126 CC000000 		.4byte	0xcc
 4922 012a 06       		.uleb128 0x6
 4923 012b 04       		.byte	0x4
 4924 012c B6000000 		.4byte	0xb6
 4925 0130 0A       		.uleb128 0xa
 4926 0131 944E0000 		.4byte	.LASF1061
 4927 0135 14       		.byte	0x14
 4928 0136 07       		.byte	0x7
 4929 0137 88       		.byte	0x88
 4930 0138 79010000 		.4byte	0x179
 4931 013c 0B       		.uleb128 0xb
 4932 013d A5950000 		.4byte	.LASF1055
 4933 0141 07       		.byte	0x7
 4934 0142 8A       		.byte	0x8a
 4935 0143 1F010000 		.4byte	0x11f
 4936 0147 00       		.byte	0
 4937 0148 0B       		.uleb128 0xb
 4938 0149 650F0000 		.4byte	.LASF1056
 4939 014d 07       		.byte	0x7
 4940 014e 8B       		.byte	0x8b
 4941 014f 79010000 		.4byte	0x179
 4942 0153 04       		.byte	0x4
 4943 0154 0B       		.uleb128 0xb
 4944 0155 A06A0000 		.4byte	.LASF1057
 4945 0159 07       		.byte	0x7
 4946 015a 8C       		.byte	0x8c
 4947 015b 79010000 		.4byte	0x179
 4948 015f 08       		.byte	0x8
 4949 0160 0B       		.uleb128 0xb
 4950 0161 823A0000 		.4byte	.LASF1058
 4951 0165 07       		.byte	0x7
 4952 0166 8D       		.byte	0x8d
 4953 0167 A2000000 		.4byte	0xa2
 4954 016b 0C       		.byte	0xc
 4955 016c 0B       		.uleb128 0xb
 4956 016d CE2B0000 		.4byte	.LASF1059
 4957 0171 07       		.byte	0x7
 4958 0172 8E       		.byte	0x8e
 4959 0173 A2000000 		.4byte	0xa2
 4960 0177 10       		.byte	0x10
 4961 0178 00       		.byte	0
 4962 0179 06       		.uleb128 0x6
 4963 017a 04       		.byte	0x4
 4964 017b 30010000 		.4byte	0x130
 4965 017f 02       		.uleb128 0x2
 4966 0180 00810000 		.4byte	.LASF1060
 4967 0184 07       		.byte	0x7
 4968 0185 90       		.byte	0x90
 4969 0186 30010000 		.4byte	0x130
 4970 018a 0A       		.uleb128 0xa
 4971 018b 85270000 		.4byte	.LASF1062
 4972 018f 0C       		.byte	0xc
 4973 0190 07       		.byte	0x7
 4974 0191 92       		.byte	0x92
 4975 0192 BB010000 		.4byte	0x1bb
 4976 0196 0B       		.uleb128 0xb
 4977 0197 A5950000 		.4byte	.LASF1055
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 155


 4978 019b 07       		.byte	0x7
 4979 019c 94       		.byte	0x94
 4980 019d 1F010000 		.4byte	0x11f
 4981 01a1 00       		.byte	0
 4982 01a2 0B       		.uleb128 0xb
 4983 01a3 650F0000 		.4byte	.LASF1056
 4984 01a7 07       		.byte	0x7
 4985 01a8 95       		.byte	0x95
 4986 01a9 79010000 		.4byte	0x179
 4987 01ad 04       		.byte	0x4
 4988 01ae 0B       		.uleb128 0xb
 4989 01af A06A0000 		.4byte	.LASF1057
 4990 01b3 07       		.byte	0x7
 4991 01b4 96       		.byte	0x96
 4992 01b5 79010000 		.4byte	0x179
 4993 01b9 08       		.byte	0x8
 4994 01ba 00       		.byte	0
 4995 01bb 02       		.uleb128 0x2
 4996 01bc CC3E0000 		.4byte	.LASF1063
 4997 01c0 07       		.byte	0x7
 4998 01c1 98       		.byte	0x98
 4999 01c2 8A010000 		.4byte	0x18a
 5000 01c6 0A       		.uleb128 0xa
 5001 01c7 74760000 		.4byte	.LASF1064
 5002 01cb 14       		.byte	0x14
 5003 01cc 07       		.byte	0x7
 5004 01cd 9D       		.byte	0x9d
 5005 01ce F7010000 		.4byte	0x1f7
 5006 01d2 0B       		.uleb128 0xb
 5007 01d3 D0560000 		.4byte	.LASF1065
 5008 01d7 07       		.byte	0x7
 5009 01d8 9F       		.byte	0x9f
 5010 01d9 09010000 		.4byte	0x109
 5011 01dd 00       		.byte	0
 5012 01de 0B       		.uleb128 0xb
 5013 01df A3240000 		.4byte	.LASF1066
 5014 01e3 07       		.byte	0x7
 5015 01e4 A0       		.byte	0xa0
 5016 01e5 F7010000 		.4byte	0x1f7
 5017 01e9 04       		.byte	0x4
 5018 01ea 0B       		.uleb128 0xb
 5019 01eb 275D0000 		.4byte	.LASF1067
 5020 01ef 07       		.byte	0x7
 5021 01f0 A1       		.byte	0xa1
 5022 01f1 BB010000 		.4byte	0x1bb
 5023 01f5 08       		.byte	0x8
 5024 01f6 00       		.byte	0
 5025 01f7 06       		.uleb128 0x6
 5026 01f8 04       		.byte	0x4
 5027 01f9 7F010000 		.4byte	0x17f
 5028 01fd 02       		.uleb128 0x2
 5029 01fe 645A0000 		.4byte	.LASF1068
 5030 0202 07       		.byte	0x7
 5031 0203 A2       		.byte	0xa2
 5032 0204 C6010000 		.4byte	0x1c6
 5033 0208 02       		.uleb128 0x2
 5034 0209 51590000 		.4byte	.LASF1069
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 156


 5035 020d 08       		.byte	0x8
 5036 020e 63       		.byte	0x63
 5037 020f A2000000 		.4byte	0xa2
 5038 0213 0C       		.uleb128 0xc
 5039 0214 01       		.byte	0x1
 5040 0215 08       		.byte	0x8
 5041 0216 6D       		.byte	0x6d
 5042 0217 3A020000 		.4byte	0x23a
 5043 021b 0D       		.uleb128 0xd
 5044 021c E2520000 		.4byte	.LASF1070
 5045 0220 00       		.sleb128 0
 5046 0221 0D       		.uleb128 0xd
 5047 0222 DD3B0000 		.4byte	.LASF1071
 5048 0226 01       		.sleb128 1
 5049 0227 0D       		.uleb128 0xd
 5050 0228 F75D0000 		.4byte	.LASF1072
 5051 022c 02       		.sleb128 2
 5052 022d 0D       		.uleb128 0xd
 5053 022e D71B0000 		.4byte	.LASF1073
 5054 0232 03       		.sleb128 3
 5055 0233 0D       		.uleb128 0xd
 5056 0234 6E080000 		.4byte	.LASF1074
 5057 0238 04       		.sleb128 4
 5058 0239 00       		.byte	0
 5059 023a 02       		.uleb128 0x2
 5060 023b 09050000 		.4byte	.LASF1075
 5061 023f 08       		.byte	0x8
 5062 0240 73       		.byte	0x73
 5063 0241 13020000 		.4byte	0x213
 5064 0245 0A       		.uleb128 0xa
 5065 0246 21070000 		.4byte	.LASF1076
 5066 024a 08       		.byte	0x8
 5067 024b 08       		.byte	0x8
 5068 024c 78       		.byte	0x78
 5069 024d 6A020000 		.4byte	0x26a
 5070 0251 0B       		.uleb128 0xb
 5071 0252 733A0000 		.4byte	.LASF1077
 5072 0256 08       		.byte	0x8
 5073 0257 7A       		.byte	0x7a
 5074 0258 FE000000 		.4byte	0xfe
 5075 025c 00       		.byte	0
 5076 025d 0B       		.uleb128 0xb
 5077 025e 67230000 		.4byte	.LASF1078
 5078 0262 08       		.byte	0x8
 5079 0263 7B       		.byte	0x7b
 5080 0264 1F010000 		.4byte	0x11f
 5081 0268 04       		.byte	0x4
 5082 0269 00       		.byte	0
 5083 026a 02       		.uleb128 0x2
 5084 026b D6290000 		.4byte	.LASF1079
 5085 026f 08       		.byte	0x8
 5086 0270 7C       		.byte	0x7c
 5087 0271 45020000 		.4byte	0x245
 5088 0275 0A       		.uleb128 0xa
 5089 0276 F07C0000 		.4byte	.LASF1080
 5090 027a 0C       		.byte	0xc
 5091 027b 08       		.byte	0x8
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 157


 5092 027c 81       		.byte	0x81
 5093 027d A6020000 		.4byte	0x2a6
 5094 0281 0B       		.uleb128 0xb
 5095 0282 38470000 		.4byte	.LASF1081
 5096 0286 08       		.byte	0x8
 5097 0287 83       		.byte	0x83
 5098 0288 A2000000 		.4byte	0xa2
 5099 028c 00       		.byte	0
 5100 028d 0B       		.uleb128 0xb
 5101 028e F94F0000 		.4byte	.LASF1082
 5102 0292 08       		.byte	0x8
 5103 0293 84       		.byte	0x84
 5104 0294 CC000000 		.4byte	0xcc
 5105 0298 04       		.byte	0x4
 5106 0299 0B       		.uleb128 0xb
 5107 029a 5E900000 		.4byte	.LASF1083
 5108 029e 08       		.byte	0x8
 5109 029f 85       		.byte	0x85
 5110 02a0 CC000000 		.4byte	0xcc
 5111 02a4 08       		.byte	0x8
 5112 02a5 00       		.byte	0
 5113 02a6 02       		.uleb128 0x2
 5114 02a7 49040000 		.4byte	.LASF1084
 5115 02ab 08       		.byte	0x8
 5116 02ac 86       		.byte	0x86
 5117 02ad 75020000 		.4byte	0x275
 5118 02b1 07       		.uleb128 0x7
 5119 02b2 AB000000 		.4byte	0xab
 5120 02b6 06       		.uleb128 0x6
 5121 02b7 04       		.byte	0x4
 5122 02b8 F3000000 		.4byte	0xf3
 5123 02bc 0A       		.uleb128 0xa
 5124 02bd 5E3E0000 		.4byte	.LASF1085
 5125 02c1 20       		.byte	0x20
 5126 02c2 08       		.byte	0x8
 5127 02c3 98       		.byte	0x98
 5128 02c4 29030000 		.4byte	0x329
 5129 02c8 0B       		.uleb128 0xb
 5130 02c9 AC090000 		.4byte	.LASF1086
 5131 02cd 08       		.byte	0x8
 5132 02ce 9A       		.byte	0x9a
 5133 02cf 08020000 		.4byte	0x208
 5134 02d3 00       		.byte	0
 5135 02d4 0B       		.uleb128 0xb
 5136 02d5 5B610000 		.4byte	.LASF1087
 5137 02d9 08       		.byte	0x8
 5138 02da 9B       		.byte	0x9b
 5139 02db AB000000 		.4byte	0xab
 5140 02df 04       		.byte	0x4
 5141 02e0 0B       		.uleb128 0xb
 5142 02e1 51600000 		.4byte	.LASF1088
 5143 02e5 08       		.byte	0x8
 5144 02e6 9C       		.byte	0x9c
 5145 02e7 09010000 		.4byte	0x109
 5146 02eb 08       		.byte	0x8
 5147 02ec 0B       		.uleb128 0xb
 5148 02ed 8E720000 		.4byte	.LASF1089
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 158


 5149 02f1 08       		.byte	0x8
 5150 02f2 9D       		.byte	0x9d
 5151 02f3 3A020000 		.4byte	0x23a
 5152 02f7 0C       		.byte	0xc
 5153 02f8 0B       		.uleb128 0xb
 5154 02f9 4E120000 		.4byte	.LASF1090
 5155 02fd 08       		.byte	0x8
 5156 02fe 9E       		.byte	0x9e
 5157 02ff 09010000 		.4byte	0x109
 5158 0303 10       		.byte	0x10
 5159 0304 0B       		.uleb128 0xb
 5160 0305 EF100000 		.4byte	.LASF1091
 5161 0309 08       		.byte	0x8
 5162 030a 9F       		.byte	0x9f
 5163 030b 09010000 		.4byte	0x109
 5164 030f 14       		.byte	0x14
 5165 0310 0B       		.uleb128 0xb
 5166 0311 AB2C0000 		.4byte	.LASF1092
 5167 0315 08       		.byte	0x8
 5168 0316 A0       		.byte	0xa0
 5169 0317 CC000000 		.4byte	0xcc
 5170 031b 18       		.byte	0x18
 5171 031c 0B       		.uleb128 0xb
 5172 031d 225F0000 		.4byte	.LASF1093
 5173 0321 08       		.byte	0x8
 5174 0322 A1       		.byte	0xa1
 5175 0323 C1000000 		.4byte	0xc1
 5176 0327 1C       		.byte	0x1c
 5177 0328 00       		.byte	0
 5178 0329 02       		.uleb128 0x2
 5179 032a 030E0000 		.4byte	.LASF1094
 5180 032e 08       		.byte	0x8
 5181 032f A2       		.byte	0xa2
 5182 0330 BC020000 		.4byte	0x2bc
 5183 0334 0A       		.uleb128 0xa
 5184 0335 D0620000 		.4byte	.LASF1095
 5185 0339 50       		.byte	0x50
 5186 033a 01       		.byte	0x1
 5187 033b 78       		.byte	0x78
 5188 033c B9030000 		.4byte	0x3b9
 5189 0340 0B       		.uleb128 0xb
 5190 0341 AB240000 		.4byte	.LASF1096
 5191 0345 01       		.byte	0x1
 5192 0346 7A       		.byte	0x7a
 5193 0347 B9030000 		.4byte	0x3b9
 5194 034b 00       		.byte	0
 5195 034c 0B       		.uleb128 0xb
 5196 034d 7B8B0000 		.4byte	.LASF1097
 5197 0351 01       		.byte	0x1
 5198 0352 80       		.byte	0x80
 5199 0353 7F010000 		.4byte	0x17f
 5200 0357 04       		.byte	0x4
 5201 0358 0B       		.uleb128 0xb
 5202 0359 AF040000 		.4byte	.LASF1098
 5203 035d 01       		.byte	0x1
 5204 035e 81       		.byte	0x81
 5205 035f 7F010000 		.4byte	0x17f
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 159


 5206 0363 18       		.byte	0x18
 5207 0364 0B       		.uleb128 0xb
 5208 0365 DD950000 		.4byte	.LASF1099
 5209 0369 01       		.byte	0x1
 5210 036a 82       		.byte	0x82
 5211 036b 09010000 		.4byte	0x109
 5212 036f 2C       		.byte	0x2c
 5213 0370 0B       		.uleb128 0xb
 5214 0371 FA080000 		.4byte	.LASF1100
 5215 0375 01       		.byte	0x1
 5216 0376 83       		.byte	0x83
 5217 0377 B6020000 		.4byte	0x2b6
 5218 037b 30       		.byte	0x30
 5219 037c 0B       		.uleb128 0xb
 5220 037d 5B610000 		.4byte	.LASF1087
 5221 0381 01       		.byte	0x1
 5222 0382 84       		.byte	0x84
 5223 0383 C4030000 		.4byte	0x3c4
 5224 0387 34       		.byte	0x34
 5225 0388 0B       		.uleb128 0xb
 5226 0389 33830000 		.4byte	.LASF1101
 5227 038d 01       		.byte	0x1
 5228 038e 8F       		.byte	0x8f
 5229 038f 09010000 		.4byte	0x109
 5230 0393 40       		.byte	0x40
 5231 0394 0B       		.uleb128 0xb
 5232 0395 CB070000 		.4byte	.LASF1102
 5233 0399 01       		.byte	0x1
 5234 039a 90       		.byte	0x90
 5235 039b 09010000 		.4byte	0x109
 5236 039f 44       		.byte	0x44
 5237 03a0 0B       		.uleb128 0xb
 5238 03a1 EF100000 		.4byte	.LASF1091
 5239 03a5 01       		.byte	0x1
 5240 03a6 94       		.byte	0x94
 5241 03a7 09010000 		.4byte	0x109
 5242 03ab 48       		.byte	0x48
 5243 03ac 0B       		.uleb128 0xb
 5244 03ad 56580000 		.4byte	.LASF1103
 5245 03b1 01       		.byte	0x1
 5246 03b2 95       		.byte	0x95
 5247 03b3 09010000 		.4byte	0x109
 5248 03b7 4C       		.byte	0x4c
 5249 03b8 00       		.byte	0
 5250 03b9 06       		.uleb128 0x6
 5251 03ba 04       		.byte	0x4
 5252 03bb BF030000 		.4byte	0x3bf
 5253 03bf 0E       		.uleb128 0xe
 5254 03c0 F3000000 		.4byte	0xf3
 5255 03c4 0F       		.uleb128 0xf
 5256 03c5 A4000000 		.4byte	0xa4
 5257 03c9 D4030000 		.4byte	0x3d4
 5258 03cd 10       		.uleb128 0x10
 5259 03ce 9B000000 		.4byte	0x9b
 5260 03d2 0B       		.byte	0xb
 5261 03d3 00       		.byte	0
 5262 03d4 02       		.uleb128 0x2
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 160


 5263 03d5 45110000 		.4byte	.LASF1104
 5264 03d9 01       		.byte	0x1
 5265 03da AB       		.byte	0xab
 5266 03db 34030000 		.4byte	0x334
 5267 03df 02       		.uleb128 0x2
 5268 03e0 4A830000 		.4byte	.LASF1105
 5269 03e4 01       		.byte	0x1
 5270 03e5 AF       		.byte	0xaf
 5271 03e6 D4030000 		.4byte	0x3d4
 5272 03ea 11       		.uleb128 0x11
 5273 03eb D4300000 		.4byte	.LASF1225
 5274 03ef 02       		.byte	0x2
 5275 03f0 A1       		.byte	0xa1
 5276 03f1 B6000000 		.4byte	0xb6
 5277 03f5 03       		.byte	0x3
 5278 03f6 11040000 		.4byte	0x411
 5279 03fa 12       		.uleb128 0x12
 5280 03fb 418C0000 		.4byte	.LASF1226
 5281 03ff 02       		.byte	0x2
 5282 0400 A1       		.byte	0xa1
 5283 0401 CC000000 		.4byte	0xcc
 5284 0405 13       		.uleb128 0x13
 5285 0406 6F3C0000 		.4byte	.LASF1227
 5286 040a 02       		.byte	0x2
 5287 040b A3       		.byte	0xa3
 5288 040c B6000000 		.4byte	0xb6
 5289 0410 00       		.byte	0
 5290 0411 14       		.uleb128 0x14
 5291 0412 06730000 		.4byte	.LASF1127
 5292 0416 01       		.byte	0x1
 5293 0417 0402     		.2byte	0x204
 5294 0419 FE000000 		.4byte	0xfe
 5295 041d 00000000 		.4byte	.LFB1
 5296 0421 68010000 		.4byte	.LFE1-.LFB1
 5297 0425 01       		.uleb128 0x1
 5298 0426 9C       		.byte	0x9c
 5299 0427 DB040000 		.4byte	0x4db
 5300 042b 15       		.uleb128 0x15
 5301 042c 4E270000 		.4byte	.LASF1106
 5302 0430 01       		.byte	0x1
 5303 0431 0402     		.2byte	0x204
 5304 0433 D7000000 		.4byte	0xd7
 5305 0437 02       		.uleb128 0x2
 5306 0438 91       		.byte	0x91
 5307 0439 64       		.sleb128 -28
 5308 043a 15       		.uleb128 0x15
 5309 043b 261A0000 		.4byte	.LASF1107
 5310 043f 01       		.byte	0x1
 5311 0440 0402     		.2byte	0x204
 5312 0442 B1020000 		.4byte	0x2b1
 5313 0446 02       		.uleb128 0x2
 5314 0447 91       		.byte	0x91
 5315 0448 60       		.sleb128 -32
 5316 0449 15       		.uleb128 0x15
 5317 044a 92020000 		.4byte	.LASF1108
 5318 044e 01       		.byte	0x1
 5319 044f 0402     		.2byte	0x204
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 161


 5320 0451 DB040000 		.4byte	0x4db
 5321 0455 02       		.uleb128 0x2
 5322 0456 91       		.byte	0x91
 5323 0457 5E       		.sleb128 -34
 5324 0458 15       		.uleb128 0x15
 5325 0459 1D860000 		.4byte	.LASF1109
 5326 045d 01       		.byte	0x1
 5327 045e 0402     		.2byte	0x204
 5328 0460 E0040000 		.4byte	0x4e0
 5329 0464 02       		.uleb128 0x2
 5330 0465 91       		.byte	0x91
 5331 0466 58       		.sleb128 -40
 5332 0467 15       		.uleb128 0x15
 5333 0468 DD950000 		.4byte	.LASF1099
 5334 046c 01       		.byte	0x1
 5335 046d 0402     		.2byte	0x204
 5336 046f 09010000 		.4byte	0x109
 5337 0473 02       		.uleb128 0x2
 5338 0474 91       		.byte	0x91
 5339 0475 00       		.sleb128 0
 5340 0476 15       		.uleb128 0x15
 5341 0477 E1350000 		.4byte	.LASF1110
 5342 047b 01       		.byte	0x1
 5343 047c 0402     		.2byte	0x204
 5344 047e E5040000 		.4byte	0x4e5
 5345 0482 02       		.uleb128 0x2
 5346 0483 91       		.byte	0x91
 5347 0484 04       		.sleb128 4
 5348 0485 15       		.uleb128 0x15
 5349 0486 0C6B0000 		.4byte	.LASF1111
 5350 048a 01       		.byte	0x1
 5351 048b 0402     		.2byte	0x204
 5352 048d F0040000 		.4byte	0x4f0
 5353 0491 02       		.uleb128 0x2
 5354 0492 91       		.byte	0x91
 5355 0493 08       		.sleb128 8
 5356 0494 15       		.uleb128 0x15
 5357 0495 04890000 		.4byte	.LASF1112
 5358 0499 01       		.byte	0x1
 5359 049a 0402     		.2byte	0x204
 5360 049c F5040000 		.4byte	0x4f5
 5361 04a0 02       		.uleb128 0x2
 5362 04a1 91       		.byte	0x91
 5363 04a2 0C       		.sleb128 12
 5364 04a3 16       		.uleb128 0x16
 5365 04a4 9E210000 		.4byte	.LASF1113
 5366 04a8 01       		.byte	0x1
 5367 04a9 0602     		.2byte	0x206
 5368 04ab FE000000 		.4byte	0xfe
 5369 04af 02       		.uleb128 0x2
 5370 04b0 91       		.byte	0x91
 5371 04b1 74       		.sleb128 -12
 5372 04b2 16       		.uleb128 0x16
 5373 04b3 9B0F0000 		.4byte	.LASF1114
 5374 04b7 01       		.byte	0x1
 5375 04b8 0702     		.2byte	0x207
 5376 04ba 05050000 		.4byte	0x505
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 162


 5377 04be 02       		.uleb128 0x2
 5378 04bf 91       		.byte	0x91
 5379 04c0 70       		.sleb128 -16
 5380 04c1 17       		.uleb128 0x17
 5381 04c2 3A000000 		.4byte	.LBB6
 5382 04c6 E6000000 		.4byte	.LBE6-.LBB6
 5383 04ca 16       		.uleb128 0x16
 5384 04cb AB240000 		.4byte	.LASF1096
 5385 04cf 01       		.byte	0x1
 5386 04d0 1202     		.2byte	0x212
 5387 04d2 B6020000 		.4byte	0x2b6
 5388 04d6 02       		.uleb128 0x2
 5389 04d7 91       		.byte	0x91
 5390 04d8 6C       		.sleb128 -20
 5391 04d9 00       		.byte	0
 5392 04da 00       		.byte	0
 5393 04db 07       		.uleb128 0x7
 5394 04dc C1000000 		.4byte	0xc1
 5395 04e0 07       		.uleb128 0x7
 5396 04e1 A2000000 		.4byte	0xa2
 5397 04e5 07       		.uleb128 0x7
 5398 04e6 EA040000 		.4byte	0x4ea
 5399 04ea 06       		.uleb128 0x6
 5400 04eb 04       		.byte	0x4
 5401 04ec 08020000 		.4byte	0x208
 5402 04f0 07       		.uleb128 0x7
 5403 04f1 B6020000 		.4byte	0x2b6
 5404 04f5 07       		.uleb128 0x7
 5405 04f6 FA040000 		.4byte	0x4fa
 5406 04fa 06       		.uleb128 0x6
 5407 04fb 04       		.byte	0x4
 5408 04fc 00050000 		.4byte	0x500
 5409 0500 07       		.uleb128 0x7
 5410 0501 A6020000 		.4byte	0x2a6
 5411 0505 06       		.uleb128 0x6
 5412 0506 04       		.byte	0x4
 5413 0507 DF030000 		.4byte	0x3df
 5414 050b 18       		.uleb128 0x18
 5415 050c 932B0000 		.4byte	.LASF1117
 5416 0510 01       		.byte	0x1
 5417 0511 B802     		.2byte	0x2b8
 5418 0513 00000000 		.4byte	.LFB2
 5419 0517 E8000000 		.4byte	.LFE2-.LFB2
 5420 051b 01       		.uleb128 0x1
 5421 051c 9C       		.byte	0x9c
 5422 051d 40050000 		.4byte	0x540
 5423 0521 15       		.uleb128 0x15
 5424 0522 868C0000 		.4byte	.LASF1115
 5425 0526 01       		.byte	0x1
 5426 0527 B802     		.2byte	0x2b8
 5427 0529 08020000 		.4byte	0x208
 5428 052d 02       		.uleb128 0x2
 5429 052e 91       		.byte	0x91
 5430 052f 6C       		.sleb128 -20
 5431 0530 16       		.uleb128 0x16
 5432 0531 C4950000 		.4byte	.LASF1116
 5433 0535 01       		.byte	0x1
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 163


 5434 0536 BA02     		.2byte	0x2ba
 5435 0538 05050000 		.4byte	0x505
 5436 053c 02       		.uleb128 0x2
 5437 053d 91       		.byte	0x91
 5438 053e 74       		.sleb128 -12
 5439 053f 00       		.byte	0
 5440 0540 18       		.uleb128 0x18
 5441 0541 FC6A0000 		.4byte	.LASF1118
 5442 0545 01       		.byte	0x1
 5443 0546 0A03     		.2byte	0x30a
 5444 0548 00000000 		.4byte	.LFB3
 5445 054c E4000000 		.4byte	.LFE3-.LFB3
 5446 0550 01       		.uleb128 0x1
 5447 0551 9C       		.byte	0x9c
 5448 0552 BB050000 		.4byte	0x5bb
 5449 0556 15       		.uleb128 0x15
 5450 0557 806D0000 		.4byte	.LASF1119
 5451 055b 01       		.byte	0x1
 5452 055c 0A03     		.2byte	0x30a
 5453 055e BB050000 		.4byte	0x5bb
 5454 0562 02       		.uleb128 0x2
 5455 0563 91       		.byte	0x91
 5456 0564 64       		.sleb128 -28
 5457 0565 15       		.uleb128 0x15
 5458 0566 E4620000 		.4byte	.LASF1120
 5459 056a 01       		.byte	0x1
 5460 056b 0A03     		.2byte	0x30a
 5461 056d C6050000 		.4byte	0x5c6
 5462 0571 02       		.uleb128 0x2
 5463 0572 91       		.byte	0x91
 5464 0573 60       		.sleb128 -32
 5465 0574 16       		.uleb128 0x16
 5466 0575 63540000 		.4byte	.LASF1121
 5467 0579 01       		.byte	0x1
 5468 057a 0C03     		.2byte	0x30c
 5469 057c 1F010000 		.4byte	0x11f
 5470 0580 02       		.uleb128 0x2
 5471 0581 91       		.byte	0x91
 5472 0582 6C       		.sleb128 -20
 5473 0583 16       		.uleb128 0x16
 5474 0584 A06F0000 		.4byte	.LASF1122
 5475 0588 01       		.byte	0x1
 5476 0589 0D03     		.2byte	0x30d
 5477 058b FE000000 		.4byte	0xfe
 5478 058f 02       		.uleb128 0x2
 5479 0590 91       		.byte	0x91
 5480 0591 68       		.sleb128 -24
 5481 0592 16       		.uleb128 0x16
 5482 0593 695F0000 		.4byte	.LASF1123
 5483 0597 01       		.byte	0x1
 5484 0598 0D03     		.2byte	0x30d
 5485 059a FE000000 		.4byte	0xfe
 5486 059e 02       		.uleb128 0x2
 5487 059f 91       		.byte	0x91
 5488 05a0 74       		.sleb128 -12
 5489 05a1 17       		.uleb128 0x17
 5490 05a2 38000000 		.4byte	.LBB7
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 164


 5491 05a6 84000000 		.4byte	.LBE7-.LBB7
 5492 05aa 16       		.uleb128 0x16
 5493 05ab 9E5D0000 		.4byte	.LASF1124
 5494 05af 01       		.byte	0x1
 5495 05b0 1703     		.2byte	0x317
 5496 05b2 C6050000 		.4byte	0x5c6
 5497 05b6 02       		.uleb128 0x2
 5498 05b7 91       		.byte	0x91
 5499 05b8 70       		.sleb128 -16
 5500 05b9 00       		.byte	0
 5501 05ba 00       		.byte	0
 5502 05bb 07       		.uleb128 0x7
 5503 05bc C0050000 		.4byte	0x5c0
 5504 05c0 06       		.uleb128 0x6
 5505 05c1 04       		.byte	0x4
 5506 05c2 1F010000 		.4byte	0x11f
 5507 05c6 07       		.uleb128 0x7
 5508 05c7 1F010000 		.4byte	0x11f
 5509 05cb 18       		.uleb128 0x18
 5510 05cc 31630000 		.4byte	.LASF1125
 5511 05d0 01       		.byte	0x1
 5512 05d1 6A03     		.2byte	0x36a
 5513 05d3 00000000 		.4byte	.LFB4
 5514 05d7 84000000 		.4byte	.LFE4-.LFB4
 5515 05db 01       		.uleb128 0x1
 5516 05dc 9C       		.byte	0x9c
 5517 05dd 0F060000 		.4byte	0x60f
 5518 05e1 15       		.uleb128 0x15
 5519 05e2 34840000 		.4byte	.LASF1126
 5520 05e6 01       		.byte	0x1
 5521 05e7 6A03     		.2byte	0x36a
 5522 05e9 C6050000 		.4byte	0x5c6
 5523 05ed 02       		.uleb128 0x2
 5524 05ee 91       		.byte	0x91
 5525 05ef 6C       		.sleb128 -20
 5526 05f0 16       		.uleb128 0x16
 5527 05f1 63540000 		.4byte	.LASF1121
 5528 05f5 01       		.byte	0x1
 5529 05f6 6C03     		.2byte	0x36c
 5530 05f8 1F010000 		.4byte	0x11f
 5531 05fc 02       		.uleb128 0x2
 5532 05fd 91       		.byte	0x91
 5533 05fe 70       		.sleb128 -16
 5534 05ff 16       		.uleb128 0x16
 5535 0600 A06F0000 		.4byte	.LASF1122
 5536 0604 01       		.byte	0x1
 5537 0605 6D03     		.2byte	0x36d
 5538 0607 FE000000 		.4byte	0xfe
 5539 060b 02       		.uleb128 0x2
 5540 060c 91       		.byte	0x91
 5541 060d 74       		.sleb128 -12
 5542 060e 00       		.byte	0
 5543 060f 14       		.uleb128 0x14
 5544 0610 105F0000 		.4byte	.LASF1128
 5545 0614 01       		.byte	0x1
 5546 0615 F203     		.2byte	0x3f2
 5547 0617 09010000 		.4byte	0x109
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 165


 5548 061b 00000000 		.4byte	.LFB5
 5549 061f 34000000 		.4byte	.LFE5-.LFB5
 5550 0623 01       		.uleb128 0x1
 5551 0624 9C       		.byte	0x9c
 5552 0625 57060000 		.4byte	0x657
 5553 0629 15       		.uleb128 0x15
 5554 062a 4E650000 		.4byte	.LASF1129
 5555 062e 01       		.byte	0x1
 5556 062f F203     		.2byte	0x3f2
 5557 0631 08020000 		.4byte	0x208
 5558 0635 02       		.uleb128 0x2
 5559 0636 91       		.byte	0x91
 5560 0637 6C       		.sleb128 -20
 5561 0638 16       		.uleb128 0x16
 5562 0639 C4950000 		.4byte	.LASF1116
 5563 063d 01       		.byte	0x1
 5564 063e F403     		.2byte	0x3f4
 5565 0640 05050000 		.4byte	0x505
 5566 0644 02       		.uleb128 0x2
 5567 0645 91       		.byte	0x91
 5568 0646 74       		.sleb128 -12
 5569 0647 16       		.uleb128 0x16
 5570 0648 2F0F0000 		.4byte	.LASF1130
 5571 064c 01       		.byte	0x1
 5572 064d F503     		.2byte	0x3f5
 5573 064f 09010000 		.4byte	0x109
 5574 0653 02       		.uleb128 0x2
 5575 0654 91       		.byte	0x91
 5576 0655 70       		.sleb128 -16
 5577 0656 00       		.byte	0
 5578 0657 18       		.uleb128 0x18
 5579 0658 FC780000 		.4byte	.LASF1131
 5580 065c 01       		.byte	0x1
 5581 065d 0804     		.2byte	0x408
 5582 065f 00000000 		.4byte	.LFB6
 5583 0663 40010000 		.4byte	.LFE6-.LFB6
 5584 0667 01       		.uleb128 0x1
 5585 0668 9C       		.byte	0x9c
 5586 0669 C8060000 		.4byte	0x6c8
 5587 066d 15       		.uleb128 0x15
 5588 066e 4E650000 		.4byte	.LASF1129
 5589 0672 01       		.byte	0x1
 5590 0673 0804     		.2byte	0x408
 5591 0675 08020000 		.4byte	0x208
 5592 0679 02       		.uleb128 0x2
 5593 067a 91       		.byte	0x91
 5594 067b 64       		.sleb128 -28
 5595 067c 15       		.uleb128 0x15
 5596 067d A47C0000 		.4byte	.LASF1132
 5597 0681 01       		.byte	0x1
 5598 0682 0804     		.2byte	0x408
 5599 0684 09010000 		.4byte	0x109
 5600 0688 02       		.uleb128 0x2
 5601 0689 91       		.byte	0x91
 5602 068a 60       		.sleb128 -32
 5603 068b 16       		.uleb128 0x16
 5604 068c C4950000 		.4byte	.LASF1116
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 166


 5605 0690 01       		.byte	0x1
 5606 0691 0A04     		.2byte	0x40a
 5607 0693 05050000 		.4byte	0x505
 5608 0697 02       		.uleb128 0x2
 5609 0698 91       		.byte	0x91
 5610 0699 70       		.sleb128 -16
 5611 069a 16       		.uleb128 0x16
 5612 069b BD130000 		.4byte	.LASF1133
 5613 069f 01       		.byte	0x1
 5614 06a0 0B04     		.2byte	0x40b
 5615 06a2 09010000 		.4byte	0x109
 5616 06a6 02       		.uleb128 0x2
 5617 06a7 91       		.byte	0x91
 5618 06a8 6C       		.sleb128 -20
 5619 06a9 16       		.uleb128 0x16
 5620 06aa 18610000 		.4byte	.LASF1134
 5621 06ae 01       		.byte	0x1
 5622 06af 0B04     		.2byte	0x40b
 5623 06b1 09010000 		.4byte	0x109
 5624 06b5 02       		.uleb128 0x2
 5625 06b6 91       		.byte	0x91
 5626 06b7 68       		.sleb128 -24
 5627 06b8 16       		.uleb128 0x16
 5628 06b9 F1490000 		.4byte	.LASF1135
 5629 06bd 01       		.byte	0x1
 5630 06be 0C04     		.2byte	0x40c
 5631 06c0 FE000000 		.4byte	0xfe
 5632 06c4 02       		.uleb128 0x2
 5633 06c5 91       		.byte	0x91
 5634 06c6 74       		.sleb128 -12
 5635 06c7 00       		.byte	0
 5636 06c8 18       		.uleb128 0x18
 5637 06c9 C7600000 		.4byte	.LASF1136
 5638 06cd 01       		.byte	0x1
 5639 06ce AC04     		.2byte	0x4ac
 5640 06d0 00000000 		.4byte	.LFB7
 5641 06d4 F0000000 		.4byte	.LFE7-.LFB7
 5642 06d8 01       		.uleb128 0x1
 5643 06d9 9C       		.byte	0x9c
 5644 06da FD060000 		.4byte	0x6fd
 5645 06de 15       		.uleb128 0x15
 5646 06df 100E0000 		.4byte	.LASF1137
 5647 06e3 01       		.byte	0x1
 5648 06e4 AC04     		.2byte	0x4ac
 5649 06e6 08020000 		.4byte	0x208
 5650 06ea 02       		.uleb128 0x2
 5651 06eb 91       		.byte	0x91
 5652 06ec 6C       		.sleb128 -20
 5653 06ed 16       		.uleb128 0x16
 5654 06ee C4950000 		.4byte	.LASF1116
 5655 06f2 01       		.byte	0x1
 5656 06f3 AE04     		.2byte	0x4ae
 5657 06f5 05050000 		.4byte	0x505
 5658 06f9 02       		.uleb128 0x2
 5659 06fa 91       		.byte	0x91
 5660 06fb 74       		.sleb128 -12
 5661 06fc 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 167


 5662 06fd 19       		.uleb128 0x19
 5663 06fe BC570000 		.4byte	.LASF1183
 5664 0702 01       		.byte	0x1
 5665 0703 0505     		.2byte	0x505
 5666 0705 FE000000 		.4byte	0xfe
 5667 0709 00000000 		.4byte	.LFB8
 5668 070d 64000000 		.4byte	.LFE8-.LFB8
 5669 0711 01       		.uleb128 0x1
 5670 0712 9C       		.byte	0x9c
 5671 0713 45070000 		.4byte	0x745
 5672 0717 15       		.uleb128 0x15
 5673 0718 4E650000 		.4byte	.LASF1129
 5674 071c 01       		.byte	0x1
 5675 071d 0505     		.2byte	0x505
 5676 071f 45070000 		.4byte	0x745
 5677 0723 02       		.uleb128 0x2
 5678 0724 91       		.byte	0x91
 5679 0725 6C       		.sleb128 -20
 5680 0726 16       		.uleb128 0x16
 5681 0727 9E210000 		.4byte	.LASF1113
 5682 072b 01       		.byte	0x1
 5683 072c 0705     		.2byte	0x507
 5684 072e FE000000 		.4byte	0xfe
 5685 0732 02       		.uleb128 0x2
 5686 0733 91       		.byte	0x91
 5687 0734 74       		.sleb128 -12
 5688 0735 16       		.uleb128 0x16
 5689 0736 C4950000 		.4byte	.LASF1116
 5690 073a 01       		.byte	0x1
 5691 073b 0805     		.2byte	0x508
 5692 073d 4A070000 		.4byte	0x74a
 5693 0741 02       		.uleb128 0x2
 5694 0742 91       		.byte	0x91
 5695 0743 70       		.sleb128 -16
 5696 0744 00       		.byte	0
 5697 0745 07       		.uleb128 0x7
 5698 0746 08020000 		.4byte	0x208
 5699 074a 07       		.uleb128 0x7
 5700 074b 4F070000 		.4byte	0x74f
 5701 074f 06       		.uleb128 0x6
 5702 0750 04       		.byte	0x4
 5703 0751 55070000 		.4byte	0x755
 5704 0755 07       		.uleb128 0x7
 5705 0756 DF030000 		.4byte	0x3df
 5706 075a 18       		.uleb128 0x18
 5707 075b 1B6B0000 		.4byte	.LASF1138
 5708 075f 01       		.byte	0x1
 5709 0760 3305     		.2byte	0x533
 5710 0762 00000000 		.4byte	.LFB9
 5711 0766 9C000000 		.4byte	.LFE9-.LFB9
 5712 076a 01       		.uleb128 0x1
 5713 076b 9C       		.byte	0x9c
 5714 076c 8F070000 		.4byte	0x78f
 5715 0770 15       		.uleb128 0x15
 5716 0771 19360000 		.4byte	.LASF1139
 5717 0775 01       		.byte	0x1
 5718 0776 3305     		.2byte	0x533
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 168


 5719 0778 08020000 		.4byte	0x208
 5720 077c 02       		.uleb128 0x2
 5721 077d 91       		.byte	0x91
 5722 077e 6C       		.sleb128 -20
 5723 077f 16       		.uleb128 0x16
 5724 0780 C4950000 		.4byte	.LASF1116
 5725 0784 01       		.byte	0x1
 5726 0785 3505     		.2byte	0x535
 5727 0787 8F070000 		.4byte	0x78f
 5728 078b 02       		.uleb128 0x2
 5729 078c 91       		.byte	0x91
 5730 078d 74       		.sleb128 -12
 5731 078e 00       		.byte	0
 5732 078f 07       		.uleb128 0x7
 5733 0790 05050000 		.4byte	0x505
 5734 0794 14       		.uleb128 0x14
 5735 0795 7F2D0000 		.4byte	.LASF1140
 5736 0799 01       		.byte	0x1
 5737 079a 6905     		.2byte	0x569
 5738 079c FE000000 		.4byte	0xfe
 5739 07a0 00000000 		.4byte	.LFB10
 5740 07a4 BC000000 		.4byte	.LFE10-.LFB10
 5741 07a8 01       		.uleb128 0x1
 5742 07a9 9C       		.byte	0x9c
 5743 07aa EB070000 		.4byte	0x7eb
 5744 07ae 15       		.uleb128 0x15
 5745 07af 19360000 		.4byte	.LASF1139
 5746 07b3 01       		.byte	0x1
 5747 07b4 6905     		.2byte	0x569
 5748 07b6 08020000 		.4byte	0x208
 5749 07ba 02       		.uleb128 0x2
 5750 07bb 91       		.byte	0x91
 5751 07bc 64       		.sleb128 -28
 5752 07bd 16       		.uleb128 0x16
 5753 07be F1490000 		.4byte	.LASF1135
 5754 07c2 01       		.byte	0x1
 5755 07c3 6B05     		.2byte	0x56b
 5756 07c5 FE000000 		.4byte	0xfe
 5757 07c9 02       		.uleb128 0x2
 5758 07ca 91       		.byte	0x91
 5759 07cb 74       		.sleb128 -12
 5760 07cc 16       		.uleb128 0x16
 5761 07cd C4950000 		.4byte	.LASF1116
 5762 07d1 01       		.byte	0x1
 5763 07d2 6C05     		.2byte	0x56c
 5764 07d4 8F070000 		.4byte	0x78f
 5765 07d8 02       		.uleb128 0x2
 5766 07d9 91       		.byte	0x91
 5767 07da 70       		.sleb128 -16
 5768 07db 16       		.uleb128 0x16
 5769 07dc C8480000 		.4byte	.LASF1141
 5770 07e0 01       		.byte	0x1
 5771 07e1 6D05     		.2byte	0x56d
 5772 07e3 09010000 		.4byte	0x109
 5773 07e7 02       		.uleb128 0x2
 5774 07e8 91       		.byte	0x91
 5775 07e9 6C       		.sleb128 -20
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 169


 5776 07ea 00       		.byte	0
 5777 07eb 18       		.uleb128 0x18
 5778 07ec 36550000 		.4byte	.LASF1142
 5779 07f0 01       		.byte	0x1
 5780 07f1 AF05     		.2byte	0x5af
 5781 07f3 00000000 		.4byte	.LFB11
 5782 07f7 64000000 		.4byte	.LFE11-.LFB11
 5783 07fb 01       		.uleb128 0x1
 5784 07fc 9C       		.byte	0x9c
 5785 07fd 11080000 		.4byte	0x811
 5786 0801 16       		.uleb128 0x16
 5787 0802 9E210000 		.4byte	.LASF1113
 5788 0806 01       		.byte	0x1
 5789 0807 B105     		.2byte	0x5b1
 5790 0809 FE000000 		.4byte	0xfe
 5791 080d 02       		.uleb128 0x2
 5792 080e 91       		.byte	0x91
 5793 080f 74       		.sleb128 -12
 5794 0810 00       		.byte	0
 5795 0811 1A       		.uleb128 0x1a
 5796 0812 E74F0000 		.4byte	.LASF1143
 5797 0816 01       		.byte	0x1
 5798 0817 FD05     		.2byte	0x5fd
 5799 0819 00000000 		.4byte	.LFB12
 5800 081d 18000000 		.4byte	.LFE12-.LFB12
 5801 0821 01       		.uleb128 0x1
 5802 0822 9C       		.byte	0x9c
 5803 0823 1B       		.uleb128 0x1b
 5804 0824 62390000 		.4byte	.LASF1144
 5805 0828 01       		.byte	0x1
 5806 0829 0806     		.2byte	0x608
 5807 082b 00000000 		.4byte	.LFB13
 5808 082f 1C000000 		.4byte	.LFE13-.LFB13
 5809 0833 01       		.uleb128 0x1
 5810 0834 9C       		.byte	0x9c
 5811 0835 14       		.uleb128 0x14
 5812 0836 205B0000 		.4byte	.LASF1145
 5813 083a 01       		.byte	0x1
 5814 083b 2E06     		.2byte	0x62e
 5815 083d FE000000 		.4byte	0xfe
 5816 0841 00000000 		.4byte	.LFB14
 5817 0845 0C010000 		.4byte	.LFE14-.LFB14
 5818 0849 01       		.uleb128 0x1
 5819 084a 9C       		.byte	0x9c
 5820 084b 6E080000 		.4byte	0x86e
 5821 084f 16       		.uleb128 0x16
 5822 0850 C4950000 		.4byte	.LASF1116
 5823 0854 01       		.byte	0x1
 5824 0855 3006     		.2byte	0x630
 5825 0857 05050000 		.4byte	0x505
 5826 085b 02       		.uleb128 0x2
 5827 085c 91       		.byte	0x91
 5828 085d 70       		.sleb128 -16
 5829 085e 16       		.uleb128 0x16
 5830 085f A06F0000 		.4byte	.LASF1122
 5831 0863 01       		.byte	0x1
 5832 0864 3106     		.2byte	0x631
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 170


 5833 0866 FE000000 		.4byte	0xfe
 5834 086a 02       		.uleb128 0x2
 5835 086b 91       		.byte	0x91
 5836 086c 74       		.sleb128 -12
 5837 086d 00       		.byte	0
 5838 086e 14       		.uleb128 0x14
 5839 086f A8160000 		.4byte	.LASF1146
 5840 0873 01       		.byte	0x1
 5841 0874 8B06     		.2byte	0x68b
 5842 0876 1F010000 		.4byte	0x11f
 5843 087a 00000000 		.4byte	.LFB15
 5844 087e 24000000 		.4byte	.LFE15-.LFB15
 5845 0882 01       		.uleb128 0x1
 5846 0883 9C       		.byte	0x9c
 5847 0884 98080000 		.4byte	0x898
 5848 0888 16       		.uleb128 0x16
 5849 0889 DE380000 		.4byte	.LASF1147
 5850 088d 01       		.byte	0x1
 5851 088e 8D06     		.2byte	0x68d
 5852 0890 1F010000 		.4byte	0x11f
 5853 0894 02       		.uleb128 0x2
 5854 0895 91       		.byte	0x91
 5855 0896 74       		.sleb128 -12
 5856 0897 00       		.byte	0
 5857 0898 14       		.uleb128 0x14
 5858 0899 F4030000 		.4byte	.LASF1148
 5859 089d 01       		.byte	0x1
 5860 089e 9A06     		.2byte	0x69a
 5861 08a0 1F010000 		.4byte	0x11f
 5862 08a4 00000000 		.4byte	.LFB16
 5863 08a8 2C000000 		.4byte	.LFE16-.LFB16
 5864 08ac 01       		.uleb128 0x1
 5865 08ad 9C       		.byte	0x9c
 5866 08ae D1080000 		.4byte	0x8d1
 5867 08b2 16       		.uleb128 0x16
 5868 08b3 9E210000 		.4byte	.LASF1113
 5869 08b7 01       		.byte	0x1
 5870 08b8 9C06     		.2byte	0x69c
 5871 08ba 1F010000 		.4byte	0x11f
 5872 08be 02       		.uleb128 0x2
 5873 08bf 91       		.byte	0x91
 5874 08c0 70       		.sleb128 -16
 5875 08c1 16       		.uleb128 0x16
 5876 08c2 C8480000 		.4byte	.LASF1141
 5877 08c6 01       		.byte	0x1
 5878 08c7 9D06     		.2byte	0x69d
 5879 08c9 09010000 		.4byte	0x109
 5880 08cd 02       		.uleb128 0x2
 5881 08ce 91       		.byte	0x91
 5882 08cf 74       		.sleb128 -12
 5883 08d0 00       		.byte	0
 5884 08d1 1C       		.uleb128 0x1c
 5885 08d2 760A0000 		.4byte	.LASF1202
 5886 08d6 01       		.byte	0x1
 5887 08d7 B906     		.2byte	0x6b9
 5888 08d9 09010000 		.4byte	0x109
 5889 08dd 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 171


 5890 08e1 18000000 		.4byte	.LFE17-.LFB17
 5891 08e5 01       		.uleb128 0x1
 5892 08e6 9C       		.byte	0x9c
 5893 08e7 14       		.uleb128 0x14
 5894 08e8 56870000 		.4byte	.LASF1149
 5895 08ec 01       		.byte	0x1
 5896 08ed D206     		.2byte	0x6d2
 5897 08ef 09010000 		.4byte	0x109
 5898 08f3 00000000 		.4byte	.LFB18
 5899 08f7 F8000000 		.4byte	.LFE18-.LFB18
 5900 08fb 01       		.uleb128 0x1
 5901 08fc 9C       		.byte	0x9c
 5902 08fd 4D090000 		.4byte	0x94d
 5903 0901 15       		.uleb128 0x15
 5904 0902 9F640000 		.4byte	.LASF1150
 5905 0906 01       		.byte	0x1
 5906 0907 D206     		.2byte	0x6d2
 5907 0909 4D090000 		.4byte	0x94d
 5908 090d 02       		.uleb128 0x2
 5909 090e 91       		.byte	0x91
 5910 090f 6C       		.sleb128 -20
 5911 0910 15       		.uleb128 0x15
 5912 0911 38520000 		.4byte	.LASF1151
 5913 0915 01       		.byte	0x1
 5914 0916 D206     		.2byte	0x6d2
 5915 0918 58090000 		.4byte	0x958
 5916 091c 02       		.uleb128 0x2
 5917 091d 91       		.byte	0x91
 5918 091e 68       		.sleb128 -24
 5919 091f 15       		.uleb128 0x15
 5920 0920 33060000 		.4byte	.LASF1152
 5921 0924 01       		.byte	0x1
 5922 0925 D206     		.2byte	0x6d2
 5923 0927 5D090000 		.4byte	0x95d
 5924 092b 02       		.uleb128 0x2
 5925 092c 91       		.byte	0x91
 5926 092d 64       		.sleb128 -28
 5927 092e 16       		.uleb128 0x16
 5928 092f 2A860000 		.4byte	.LASF1153
 5929 0933 01       		.byte	0x1
 5930 0934 D406     		.2byte	0x6d4
 5931 0936 09010000 		.4byte	0x109
 5932 093a 02       		.uleb128 0x2
 5933 093b 91       		.byte	0x91
 5934 093c 74       		.sleb128 -12
 5935 093d 16       		.uleb128 0x16
 5936 093e DB010000 		.4byte	.LASF1154
 5937 0942 01       		.byte	0x1
 5938 0943 D406     		.2byte	0x6d4
 5939 0945 09010000 		.4byte	0x109
 5940 0949 02       		.uleb128 0x2
 5941 094a 91       		.byte	0x91
 5942 094b 70       		.sleb128 -16
 5943 094c 00       		.byte	0
 5944 094d 07       		.uleb128 0x7
 5945 094e 52090000 		.4byte	0x952
 5946 0952 06       		.uleb128 0x6
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 172


 5947 0953 04       		.byte	0x4
 5948 0954 29030000 		.4byte	0x329
 5949 0958 07       		.uleb128 0x7
 5950 0959 09010000 		.4byte	0x109
 5951 095d 07       		.uleb128 0x7
 5952 095e 62090000 		.4byte	0x962
 5953 0962 06       		.uleb128 0x6
 5954 0963 04       		.byte	0x4
 5955 0964 CC000000 		.4byte	0xcc
 5956 0968 14       		.uleb128 0x14
 5957 0969 41680000 		.4byte	.LASF1155
 5958 096d 01       		.byte	0x1
 5959 096e 3A07     		.2byte	0x73a
 5960 0970 FE000000 		.4byte	0xfe
 5961 0974 00000000 		.4byte	.LFB19
 5962 0978 80010000 		.4byte	.LFE19-.LFB19
 5963 097c 01       		.uleb128 0x1
 5964 097d 9C       		.byte	0x9c
 5965 097e E2090000 		.4byte	0x9e2
 5966 0982 16       		.uleb128 0x16
 5967 0983 C4950000 		.4byte	.LASF1116
 5968 0987 01       		.byte	0x1
 5969 0988 3C07     		.2byte	0x73c
 5970 098a 05050000 		.4byte	0x505
 5971 098e 02       		.uleb128 0x2
 5972 098f 91       		.byte	0x91
 5973 0990 68       		.sleb128 -24
 5974 0991 16       		.uleb128 0x16
 5975 0992 A5950000 		.4byte	.LASF1055
 5976 0996 01       		.byte	0x1
 5977 0997 3D07     		.2byte	0x73d
 5978 0999 1F010000 		.4byte	0x11f
 5979 099d 02       		.uleb128 0x2
 5980 099e 91       		.byte	0x91
 5981 099f 64       		.sleb128 -28
 5982 09a0 16       		.uleb128 0x16
 5983 09a1 936D0000 		.4byte	.LASF1156
 5984 09a5 01       		.byte	0x1
 5985 09a6 3E07     		.2byte	0x73e
 5986 09a8 FE000000 		.4byte	0xfe
 5987 09ac 02       		.uleb128 0x2
 5988 09ad 91       		.byte	0x91
 5989 09ae 74       		.sleb128 -12
 5990 09af 17       		.uleb128 0x17
 5991 09b0 1E000000 		.4byte	.LBB8
 5992 09b4 E8000000 		.4byte	.LBE8-.LBB8
 5993 09b8 16       		.uleb128 0x16
 5994 09b9 9E5D0000 		.4byte	.LASF1124
 5995 09bd 01       		.byte	0x1
 5996 09be 4D07     		.2byte	0x74d
 5997 09c0 C6050000 		.4byte	0x5c6
 5998 09c4 02       		.uleb128 0x2
 5999 09c5 91       		.byte	0x91
 6000 09c6 70       		.sleb128 -16
 6001 09c7 17       		.uleb128 0x17
 6002 09c8 2A000000 		.4byte	.LBB9
 6003 09cc 32000000 		.4byte	.LBE9-.LBB9
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 173


 6004 09d0 16       		.uleb128 0x16
 6005 09d1 D8270000 		.4byte	.LASF1157
 6006 09d5 01       		.byte	0x1
 6007 09d6 5107     		.2byte	0x751
 6008 09d8 E2090000 		.4byte	0x9e2
 6009 09dc 02       		.uleb128 0x2
 6010 09dd 91       		.byte	0x91
 6011 09de 6C       		.sleb128 -20
 6012 09df 00       		.byte	0
 6013 09e0 00       		.byte	0
 6014 09e1 00       		.byte	0
 6015 09e2 06       		.uleb128 0x6
 6016 09e3 04       		.byte	0x4
 6017 09e4 FD010000 		.4byte	0x1fd
 6018 09e8 18       		.uleb128 0x18
 6019 09e9 96330000 		.4byte	.LASF1158
 6020 09ed 01       		.byte	0x1
 6021 09ee 4208     		.2byte	0x842
 6022 09f0 00000000 		.4byte	.LFB20
 6023 09f4 A0000000 		.4byte	.LFE20-.LFB20
 6024 09f8 01       		.uleb128 0x1
 6025 09f9 9C       		.byte	0x9c
 6026 09fa 600A0000 		.4byte	0xa60
 6027 09fe 17       		.uleb128 0x17
 6028 09ff 1C000000 		.4byte	.LBB10
 6029 0a03 6A000000 		.4byte	.LBE10-.LBB10
 6030 0a07 16       		.uleb128 0x16
 6031 0a08 91640000 		.4byte	.LASF1159
 6032 0a0c 01       		.byte	0x1
 6033 0a0d 7008     		.2byte	0x870
 6034 0a0f 09010000 		.4byte	0x109
 6035 0a13 02       		.uleb128 0x2
 6036 0a14 91       		.byte	0x91
 6037 0a15 74       		.sleb128 -12
 6038 0a16 1D       		.uleb128 0x1d
 6039 0a17 EA030000 		.4byte	0x3ea
 6040 0a1b 22000000 		.4byte	.LBB11
 6041 0a1f 0A000000 		.4byte	.LBE11-.LBB11
 6042 0a23 01       		.byte	0x1
 6043 0a24 7008     		.2byte	0x870
 6044 0a26 450A0000 		.4byte	0xa45
 6045 0a2a 1E       		.uleb128 0x1e
 6046 0a2b FA030000 		.4byte	0x3fa
 6047 0a2f 02       		.uleb128 0x2
 6048 0a30 91       		.byte	0x91
 6049 0a31 6C       		.sleb128 -20
 6050 0a32 17       		.uleb128 0x17
 6051 0a33 22000000 		.4byte	.LBB12
 6052 0a37 0A000000 		.4byte	.LBE12-.LBB12
 6053 0a3b 1F       		.uleb128 0x1f
 6054 0a3c 05040000 		.4byte	0x405
 6055 0a40 02       		.uleb128 0x2
 6056 0a41 91       		.byte	0x91
 6057 0a42 6B       		.sleb128 -21
 6058 0a43 00       		.byte	0
 6059 0a44 00       		.byte	0
 6060 0a45 17       		.uleb128 0x17
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 174


 6061 0a46 4C000000 		.4byte	.LBB13
 6062 0a4a 3A000000 		.4byte	.LBE13-.LBB13
 6063 0a4e 16       		.uleb128 0x16
 6064 0a4f 04350000 		.4byte	.LASF1160
 6065 0a53 01       		.byte	0x1
 6066 0a54 7008     		.2byte	0x870
 6067 0a56 600A0000 		.4byte	0xa60
 6068 0a5a 02       		.uleb128 0x2
 6069 0a5b 91       		.byte	0x91
 6070 0a5c 70       		.sleb128 -16
 6071 0a5d 00       		.byte	0
 6072 0a5e 00       		.byte	0
 6073 0a5f 00       		.byte	0
 6074 0a60 07       		.uleb128 0x7
 6075 0a61 E2090000 		.4byte	0x9e2
 6076 0a65 18       		.uleb128 0x18
 6077 0a66 3A460000 		.4byte	.LASF1161
 6078 0a6a 01       		.byte	0x1
 6079 0a6b 7E08     		.2byte	0x87e
 6080 0a6d 00000000 		.4byte	.LFB21
 6081 0a71 8C000000 		.4byte	.LFE21-.LFB21
 6082 0a75 01       		.uleb128 0x1
 6083 0a76 9C       		.byte	0x9c
 6084 0a77 A90A0000 		.4byte	0xaa9
 6085 0a7b 15       		.uleb128 0x15
 6086 0a7c 633C0000 		.4byte	.LASF1162
 6087 0a80 01       		.byte	0x1
 6088 0a81 7E08     		.2byte	0x87e
 6089 0a83 600A0000 		.4byte	0xa60
 6090 0a87 02       		.uleb128 0x2
 6091 0a88 91       		.byte	0x91
 6092 0a89 6C       		.sleb128 -20
 6093 0a8a 15       		.uleb128 0x15
 6094 0a8b C05A0000 		.4byte	.LASF1163
 6095 0a8f 01       		.byte	0x1
 6096 0a90 7E08     		.2byte	0x87e
 6097 0a92 C6050000 		.4byte	0x5c6
 6098 0a96 02       		.uleb128 0x2
 6099 0a97 91       		.byte	0x91
 6100 0a98 68       		.sleb128 -24
 6101 0a99 16       		.uleb128 0x16
 6102 0a9a 63540000 		.4byte	.LASF1121
 6103 0a9e 01       		.byte	0x1
 6104 0a9f 8008     		.2byte	0x880
 6105 0aa1 1F010000 		.4byte	0x11f
 6106 0aa5 02       		.uleb128 0x2
 6107 0aa6 91       		.byte	0x91
 6108 0aa7 74       		.sleb128 -12
 6109 0aa8 00       		.byte	0
 6110 0aa9 18       		.uleb128 0x18
 6111 0aaa 7C050000 		.4byte	.LASF1164
 6112 0aae 01       		.byte	0x1
 6113 0aaf B908     		.2byte	0x8b9
 6114 0ab1 00000000 		.4byte	.LFB22
 6115 0ab5 AC000000 		.4byte	.LFE22-.LFB22
 6116 0ab9 01       		.uleb128 0x1
 6117 0aba 9C       		.byte	0x9c
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 175


 6118 0abb FC0A0000 		.4byte	0xafc
 6119 0abf 15       		.uleb128 0x15
 6120 0ac0 633C0000 		.4byte	.LASF1162
 6121 0ac4 01       		.byte	0x1
 6122 0ac5 B908     		.2byte	0x8b9
 6123 0ac7 E2090000 		.4byte	0x9e2
 6124 0acb 02       		.uleb128 0x2
 6125 0acc 91       		.byte	0x91
 6126 0acd 6C       		.sleb128 -20
 6127 0ace 15       		.uleb128 0x15
 6128 0acf A5950000 		.4byte	.LASF1055
 6129 0ad3 01       		.byte	0x1
 6130 0ad4 B908     		.2byte	0x8b9
 6131 0ad6 C6050000 		.4byte	0x5c6
 6132 0ada 02       		.uleb128 0x2
 6133 0adb 91       		.byte	0x91
 6134 0adc 68       		.sleb128 -24
 6135 0add 15       		.uleb128 0x15
 6136 0ade C05A0000 		.4byte	.LASF1163
 6137 0ae2 01       		.byte	0x1
 6138 0ae3 B908     		.2byte	0x8b9
 6139 0ae5 C6050000 		.4byte	0x5c6
 6140 0ae9 02       		.uleb128 0x2
 6141 0aea 91       		.byte	0x91
 6142 0aeb 64       		.sleb128 -28
 6143 0aec 16       		.uleb128 0x16
 6144 0aed 63540000 		.4byte	.LASF1121
 6145 0af1 01       		.byte	0x1
 6146 0af2 BB08     		.2byte	0x8bb
 6147 0af4 1F010000 		.4byte	0x11f
 6148 0af8 02       		.uleb128 0x2
 6149 0af9 91       		.byte	0x91
 6150 0afa 74       		.sleb128 -12
 6151 0afb 00       		.byte	0
 6152 0afc 14       		.uleb128 0x14
 6153 0afd 8C260000 		.4byte	.LASF1165
 6154 0b01 01       		.byte	0x1
 6155 0b02 2809     		.2byte	0x928
 6156 0b04 FE000000 		.4byte	0xfe
 6157 0b08 00000000 		.4byte	.LFB23
 6158 0b0c B8000000 		.4byte	.LFE23-.LFB23
 6159 0b10 01       		.uleb128 0x1
 6160 0b11 9C       		.byte	0x9c
 6161 0b12 440B0000 		.4byte	0xb44
 6162 0b16 15       		.uleb128 0x15
 6163 0b17 633C0000 		.4byte	.LASF1162
 6164 0b1b 01       		.byte	0x1
 6165 0b1c 2809     		.2byte	0x928
 6166 0b1e 440B0000 		.4byte	0xb44
 6167 0b22 02       		.uleb128 0x2
 6168 0b23 91       		.byte	0x91
 6169 0b24 6C       		.sleb128 -20
 6170 0b25 16       		.uleb128 0x16
 6171 0b26 89570000 		.4byte	.LASF1166
 6172 0b2a 01       		.byte	0x1
 6173 0b2b 2A09     		.2byte	0x92a
 6174 0b2d 05050000 		.4byte	0x505
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 176


 6175 0b31 02       		.uleb128 0x2
 6176 0b32 91       		.byte	0x91
 6177 0b33 70       		.sleb128 -16
 6178 0b34 16       		.uleb128 0x16
 6179 0b35 9E210000 		.4byte	.LASF1113
 6180 0b39 01       		.byte	0x1
 6181 0b3a 2B09     		.2byte	0x92b
 6182 0b3c FE000000 		.4byte	0xfe
 6183 0b40 02       		.uleb128 0x2
 6184 0b41 91       		.byte	0x91
 6185 0b42 74       		.sleb128 -12
 6186 0b43 00       		.byte	0
 6187 0b44 07       		.uleb128 0x7
 6188 0b45 490B0000 		.4byte	0xb49
 6189 0b49 06       		.uleb128 0x6
 6190 0b4a 04       		.byte	0x4
 6191 0b4b 4F0B0000 		.4byte	0xb4f
 6192 0b4f 07       		.uleb128 0x7
 6193 0b50 FD010000 		.4byte	0x1fd
 6194 0b54 14       		.uleb128 0x14
 6195 0b55 49070000 		.4byte	.LASF1167
 6196 0b59 01       		.byte	0x1
 6197 0b5a 5E09     		.2byte	0x95e
 6198 0b5c FE000000 		.4byte	0xfe
 6199 0b60 00000000 		.4byte	.LFB24
 6200 0b64 B4000000 		.4byte	.LFE24-.LFB24
 6201 0b68 01       		.uleb128 0x1
 6202 0b69 9C       		.byte	0x9c
 6203 0b6a AB0B0000 		.4byte	0xbab
 6204 0b6e 15       		.uleb128 0x15
 6205 0b6f E8650000 		.4byte	.LASF1168
 6206 0b73 01       		.byte	0x1
 6207 0b74 5E09     		.2byte	0x95e
 6208 0b76 F7010000 		.4byte	0x1f7
 6209 0b7a 02       		.uleb128 0x2
 6210 0b7b 91       		.byte	0x91
 6211 0b7c 6C       		.sleb128 -20
 6212 0b7d 15       		.uleb128 0x15
 6213 0b7e A5950000 		.4byte	.LASF1055
 6214 0b82 01       		.byte	0x1
 6215 0b83 5E09     		.2byte	0x95e
 6216 0b85 C6050000 		.4byte	0x5c6
 6217 0b89 02       		.uleb128 0x2
 6218 0b8a 91       		.byte	0x91
 6219 0b8b 68       		.sleb128 -24
 6220 0b8c 16       		.uleb128 0x16
 6221 0b8d 89570000 		.4byte	.LASF1166
 6222 0b91 01       		.byte	0x1
 6223 0b92 6009     		.2byte	0x960
 6224 0b94 05050000 		.4byte	0x505
 6225 0b98 02       		.uleb128 0x2
 6226 0b99 91       		.byte	0x91
 6227 0b9a 70       		.sleb128 -16
 6228 0b9b 16       		.uleb128 0x16
 6229 0b9c 9E210000 		.4byte	.LASF1113
 6230 0ba0 01       		.byte	0x1
 6231 0ba1 6109     		.2byte	0x961
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 177


 6232 0ba3 FE000000 		.4byte	0xfe
 6233 0ba7 02       		.uleb128 0x2
 6234 0ba8 91       		.byte	0x91
 6235 0ba9 74       		.sleb128 -12
 6236 0baa 00       		.byte	0
 6237 0bab 18       		.uleb128 0x18
 6238 0bac 973D0000 		.4byte	.LASF1169
 6239 0bb0 01       		.byte	0x1
 6240 0bb1 8B09     		.2byte	0x98b
 6241 0bb3 00000000 		.4byte	.LFB25
 6242 0bb7 34000000 		.4byte	.LFE25-.LFB25
 6243 0bbb 01       		.uleb128 0x1
 6244 0bbc 9C       		.byte	0x9c
 6245 0bbd D10B0000 		.4byte	0xbd1
 6246 0bc1 15       		.uleb128 0x15
 6247 0bc2 023B0000 		.4byte	.LASF1170
 6248 0bc6 01       		.byte	0x1
 6249 0bc7 8B09     		.2byte	0x98b
 6250 0bc9 D10B0000 		.4byte	0xbd1
 6251 0bcd 02       		.uleb128 0x2
 6252 0bce 91       		.byte	0x91
 6253 0bcf 74       		.sleb128 -12
 6254 0bd0 00       		.byte	0
 6255 0bd1 07       		.uleb128 0x7
 6256 0bd2 D60B0000 		.4byte	0xbd6
 6257 0bd6 06       		.uleb128 0x6
 6258 0bd7 04       		.byte	0x4
 6259 0bd8 6A020000 		.4byte	0x26a
 6260 0bdc 14       		.uleb128 0x14
 6261 0bdd 8D410000 		.4byte	.LASF1171
 6262 0be1 01       		.byte	0x1
 6263 0be2 9309     		.2byte	0x993
 6264 0be4 FE000000 		.4byte	0xfe
 6265 0be8 00000000 		.4byte	.LFB26
 6266 0bec A0000000 		.4byte	.LFE26-.LFB26
 6267 0bf0 01       		.uleb128 0x1
 6268 0bf1 9C       		.byte	0x9c
 6269 0bf2 3D0C0000 		.4byte	0xc3d
 6270 0bf6 15       		.uleb128 0x15
 6271 0bf7 023B0000 		.4byte	.LASF1170
 6272 0bfb 01       		.byte	0x1
 6273 0bfc 9309     		.2byte	0x993
 6274 0bfe D10B0000 		.4byte	0xbd1
 6275 0c02 02       		.uleb128 0x2
 6276 0c03 91       		.byte	0x91
 6277 0c04 6C       		.sleb128 -20
 6278 0c05 15       		.uleb128 0x15
 6279 0c06 CE190000 		.4byte	.LASF1172
 6280 0c0a 01       		.byte	0x1
 6281 0c0b 9309     		.2byte	0x993
 6282 0c0d BB050000 		.4byte	0x5bb
 6283 0c11 02       		.uleb128 0x2
 6284 0c12 91       		.byte	0x91
 6285 0c13 68       		.sleb128 -24
 6286 0c14 16       		.uleb128 0x16
 6287 0c15 9E210000 		.4byte	.LASF1113
 6288 0c19 01       		.byte	0x1
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 178


 6289 0c1a 9509     		.2byte	0x995
 6290 0c1c FE000000 		.4byte	0xfe
 6291 0c20 02       		.uleb128 0x2
 6292 0c21 91       		.byte	0x91
 6293 0c22 74       		.sleb128 -12
 6294 0c23 17       		.uleb128 0x17
 6295 0c24 26000000 		.4byte	.LBB14
 6296 0c28 64000000 		.4byte	.LBE14-.LBB14
 6297 0c2c 16       		.uleb128 0x16
 6298 0c2d 9E5D0000 		.4byte	.LASF1124
 6299 0c31 01       		.byte	0x1
 6300 0c32 9D09     		.2byte	0x99d
 6301 0c34 C6050000 		.4byte	0x5c6
 6302 0c38 02       		.uleb128 0x2
 6303 0c39 91       		.byte	0x91
 6304 0c3a 70       		.sleb128 -16
 6305 0c3b 00       		.byte	0
 6306 0c3c 00       		.byte	0
 6307 0c3d 1B       		.uleb128 0x1b
 6308 0c3e 873C0000 		.4byte	.LASF1173
 6309 0c42 01       		.byte	0x1
 6310 0c43 C409     		.2byte	0x9c4
 6311 0c45 00000000 		.4byte	.LFB27
 6312 0c49 18000000 		.4byte	.LFE27-.LFB27
 6313 0c4d 01       		.uleb128 0x1
 6314 0c4e 9C       		.byte	0x9c
 6315 0c4f 20       		.uleb128 0x20
 6316 0c50 601C0000 		.4byte	.LASF1174
 6317 0c54 01       		.byte	0x1
 6318 0c55 CC09     		.2byte	0x9cc
 6319 0c57 09010000 		.4byte	0x109
 6320 0c5b 00000000 		.4byte	.LFB28
 6321 0c5f 2C000000 		.4byte	.LFE28-.LFB28
 6322 0c63 01       		.uleb128 0x1
 6323 0c64 9C       		.byte	0x9c
 6324 0c65 970C0000 		.4byte	0xc97
 6325 0c69 15       		.uleb128 0x15
 6326 0c6a 4E650000 		.4byte	.LASF1129
 6327 0c6e 01       		.byte	0x1
 6328 0c6f CC09     		.2byte	0x9cc
 6329 0c71 08020000 		.4byte	0x208
 6330 0c75 02       		.uleb128 0x2
 6331 0c76 91       		.byte	0x91
 6332 0c77 6C       		.sleb128 -20
 6333 0c78 16       		.uleb128 0x16
 6334 0c79 2F0F0000 		.4byte	.LASF1130
 6335 0c7d 01       		.byte	0x1
 6336 0c7e CE09     		.2byte	0x9ce
 6337 0c80 09010000 		.4byte	0x109
 6338 0c84 02       		.uleb128 0x2
 6339 0c85 91       		.byte	0x91
 6340 0c86 74       		.sleb128 -12
 6341 0c87 16       		.uleb128 0x16
 6342 0c88 C4950000 		.4byte	.LASF1116
 6343 0c8c 01       		.byte	0x1
 6344 0c8d CF09     		.2byte	0x9cf
 6345 0c8f 05050000 		.4byte	0x505
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 179


 6346 0c93 02       		.uleb128 0x2
 6347 0c94 91       		.byte	0x91
 6348 0c95 70       		.sleb128 -16
 6349 0c96 00       		.byte	0
 6350 0c97 21       		.uleb128 0x21
 6351 0c98 E5460000 		.4byte	.LASF1175
 6352 0c9c 01       		.byte	0x1
 6353 0c9d E309     		.2byte	0x9e3
 6354 0c9f 00000000 		.4byte	.LFB29
 6355 0ca3 24000000 		.4byte	.LFE29-.LFB29
 6356 0ca7 01       		.uleb128 0x1
 6357 0ca8 9C       		.byte	0x9c
 6358 0ca9 DB0C0000 		.4byte	0xcdb
 6359 0cad 15       		.uleb128 0x15
 6360 0cae 4E650000 		.4byte	.LASF1129
 6361 0cb2 01       		.byte	0x1
 6362 0cb3 E309     		.2byte	0x9e3
 6363 0cb5 08020000 		.4byte	0x208
 6364 0cb9 02       		.uleb128 0x2
 6365 0cba 91       		.byte	0x91
 6366 0cbb 6C       		.sleb128 -20
 6367 0cbc 15       		.uleb128 0x15
 6368 0cbd 4E0E0000 		.4byte	.LASF1176
 6369 0cc1 01       		.byte	0x1
 6370 0cc2 E309     		.2byte	0x9e3
 6371 0cc4 58090000 		.4byte	0x958
 6372 0cc8 02       		.uleb128 0x2
 6373 0cc9 91       		.byte	0x91
 6374 0cca 68       		.sleb128 -24
 6375 0ccb 16       		.uleb128 0x16
 6376 0ccc C4950000 		.4byte	.LASF1116
 6377 0cd0 01       		.byte	0x1
 6378 0cd1 E509     		.2byte	0x9e5
 6379 0cd3 05050000 		.4byte	0x505
 6380 0cd7 02       		.uleb128 0x2
 6381 0cd8 91       		.byte	0x91
 6382 0cd9 74       		.sleb128 -12
 6383 0cda 00       		.byte	0
 6384 0cdb 22       		.uleb128 0x22
 6385 0cdc CE1F0000 		.4byte	.LASF1177
 6386 0ce0 01       		.byte	0x1
 6387 0ce1 FB09     		.2byte	0x9fb
 6388 0ce3 00000000 		.4byte	.LFB30
 6389 0ce7 0E000000 		.4byte	.LFE30-.LFB30
 6390 0ceb 01       		.uleb128 0x1
 6391 0cec 9C       		.byte	0x9c
 6392 0ced 010D0000 		.4byte	0xd01
 6393 0cf1 15       		.uleb128 0x15
 6394 0cf2 1D860000 		.4byte	.LASF1109
 6395 0cf6 01       		.byte	0x1
 6396 0cf7 FB09     		.2byte	0x9fb
 6397 0cf9 A2000000 		.4byte	0xa2
 6398 0cfd 02       		.uleb128 0x2
 6399 0cfe 91       		.byte	0x91
 6400 0cff 74       		.sleb128 -12
 6401 0d00 00       		.byte	0
 6402 0d01 22       		.uleb128 0x22
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 180


 6403 0d02 462A0000 		.4byte	.LASF1178
 6404 0d06 01       		.byte	0x1
 6405 0d07 8E0A     		.2byte	0xa8e
 6406 0d09 00000000 		.4byte	.LFB31
 6407 0d0d 96000000 		.4byte	.LFE31-.LFB31
 6408 0d11 01       		.uleb128 0x1
 6409 0d12 9C       		.byte	0x9c
 6410 0d13 700D0000 		.4byte	0xd70
 6411 0d17 15       		.uleb128 0x15
 6412 0d18 C4950000 		.4byte	.LASF1116
 6413 0d1c 01       		.byte	0x1
 6414 0d1d 8E0A     		.2byte	0xa8e
 6415 0d1f 8F070000 		.4byte	0x78f
 6416 0d23 02       		.uleb128 0x2
 6417 0d24 91       		.byte	0x91
 6418 0d25 6C       		.sleb128 -20
 6419 0d26 15       		.uleb128 0x15
 6420 0d27 261A0000 		.4byte	.LASF1107
 6421 0d2b 01       		.byte	0x1
 6422 0d2c 8E0A     		.2byte	0xa8e
 6423 0d2e B1020000 		.4byte	0x2b1
 6424 0d32 02       		.uleb128 0x2
 6425 0d33 91       		.byte	0x91
 6426 0d34 68       		.sleb128 -24
 6427 0d35 15       		.uleb128 0x15
 6428 0d36 DD950000 		.4byte	.LASF1099
 6429 0d3a 01       		.byte	0x1
 6430 0d3b 8E0A     		.2byte	0xa8e
 6431 0d3d 09010000 		.4byte	0x109
 6432 0d41 02       		.uleb128 0x2
 6433 0d42 91       		.byte	0x91
 6434 0d43 64       		.sleb128 -28
 6435 0d44 15       		.uleb128 0x15
 6436 0d45 04890000 		.4byte	.LASF1112
 6437 0d49 01       		.byte	0x1
 6438 0d4a 8E0A     		.2byte	0xa8e
 6439 0d4c F5040000 		.4byte	0x4f5
 6440 0d50 02       		.uleb128 0x2
 6441 0d51 91       		.byte	0x91
 6442 0d52 60       		.sleb128 -32
 6443 0d53 15       		.uleb128 0x15
 6444 0d54 92020000 		.4byte	.LASF1108
 6445 0d58 01       		.byte	0x1
 6446 0d59 8E0A     		.2byte	0xa8e
 6447 0d5b DB040000 		.4byte	0x4db
 6448 0d5f 02       		.uleb128 0x2
 6449 0d60 91       		.byte	0x91
 6450 0d61 00       		.sleb128 0
 6451 0d62 23       		.uleb128 0x23
 6452 0d63 7800     		.ascii	"x\000"
 6453 0d65 01       		.byte	0x1
 6454 0d66 900A     		.2byte	0xa90
 6455 0d68 09010000 		.4byte	0x109
 6456 0d6c 02       		.uleb128 0x2
 6457 0d6d 91       		.byte	0x91
 6458 0d6e 74       		.sleb128 -12
 6459 0d6f 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 181


 6460 0d70 22       		.uleb128 0x22
 6461 0d71 748E0000 		.4byte	.LASF1179
 6462 0d75 01       		.byte	0x1
 6463 0d76 FB0A     		.2byte	0xafb
 6464 0d78 00000000 		.4byte	.LFB32
 6465 0d7c 7C000000 		.4byte	.LFE32-.LFB32
 6466 0d80 01       		.uleb128 0x1
 6467 0d81 9C       		.byte	0x9c
 6468 0d82 960D0000 		.4byte	0xd96
 6469 0d86 16       		.uleb128 0x16
 6470 0d87 DD950000 		.4byte	.LASF1099
 6471 0d8b 01       		.byte	0x1
 6472 0d8c FD0A     		.2byte	0xafd
 6473 0d8e 09010000 		.4byte	0x109
 6474 0d92 02       		.uleb128 0x2
 6475 0d93 91       		.byte	0x91
 6476 0d94 74       		.sleb128 -12
 6477 0d95 00       		.byte	0
 6478 0d96 22       		.uleb128 0x22
 6479 0d97 466C0000 		.4byte	.LASF1180
 6480 0d9b 01       		.byte	0x1
 6481 0d9c 1B0B     		.2byte	0xb1b
 6482 0d9e 00000000 		.4byte	.LFB33
 6483 0da2 74000000 		.4byte	.LFE33-.LFB33
 6484 0da6 01       		.uleb128 0x1
 6485 0da7 9C       		.byte	0x9c
 6486 0da8 DF0D0000 		.4byte	0xddf
 6487 0dac 17       		.uleb128 0x17
 6488 0dad 06000000 		.4byte	.LBB15
 6489 0db1 5C000000 		.4byte	.LBE15-.LBB15
 6490 0db5 16       		.uleb128 0x16
 6491 0db6 26940000 		.4byte	.LASF1181
 6492 0dba 01       		.byte	0x1
 6493 0dbb 1F0B     		.2byte	0xb1f
 6494 0dbd FE000000 		.4byte	0xfe
 6495 0dc1 02       		.uleb128 0x2
 6496 0dc2 91       		.byte	0x91
 6497 0dc3 74       		.sleb128 -12
 6498 0dc4 17       		.uleb128 0x17
 6499 0dc5 26000000 		.4byte	.LBB16
 6500 0dc9 34000000 		.4byte	.LBE16-.LBB16
 6501 0dcd 16       		.uleb128 0x16
 6502 0dce C4950000 		.4byte	.LASF1116
 6503 0dd2 01       		.byte	0x1
 6504 0dd3 2D0B     		.2byte	0xb2d
 6505 0dd5 05050000 		.4byte	0x505
 6506 0dd9 02       		.uleb128 0x2
 6507 0dda 91       		.byte	0x91
 6508 0ddb 70       		.sleb128 -16
 6509 0ddc 00       		.byte	0
 6510 0ddd 00       		.byte	0
 6511 0dde 00       		.byte	0
 6512 0ddf 22       		.uleb128 0x22
 6513 0de0 96690000 		.4byte	.LASF1182
 6514 0de4 01       		.byte	0x1
 6515 0de5 440B     		.2byte	0xb44
 6516 0de7 00000000 		.4byte	.LFB34
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 182


 6517 0deb 6C000000 		.4byte	.LFE34-.LFB34
 6518 0def 01       		.uleb128 0x1
 6519 0df0 9C       		.byte	0x9c
 6520 0df1 050E0000 		.4byte	0xe05
 6521 0df5 15       		.uleb128 0x15
 6522 0df6 63540000 		.4byte	.LASF1121
 6523 0dfa 01       		.byte	0x1
 6524 0dfb 440B     		.2byte	0xb44
 6525 0dfd C6050000 		.4byte	0x5c6
 6526 0e01 02       		.uleb128 0x2
 6527 0e02 91       		.byte	0x91
 6528 0e03 74       		.sleb128 -12
 6529 0e04 00       		.byte	0
 6530 0e05 19       		.uleb128 0x19
 6531 0e06 F0250000 		.4byte	.LASF1184
 6532 0e0a 01       		.byte	0x1
 6533 0e0b 620B     		.2byte	0xb62
 6534 0e0d 05050000 		.4byte	0x505
 6535 0e11 00000000 		.4byte	.LFB35
 6536 0e15 64000000 		.4byte	.LFE35-.LFB35
 6537 0e19 01       		.uleb128 0x1
 6538 0e1a 9C       		.byte	0x9c
 6539 0e1b 4D0E0000 		.4byte	0xe4d
 6540 0e1f 15       		.uleb128 0x15
 6541 0e20 92020000 		.4byte	.LASF1108
 6542 0e24 01       		.byte	0x1
 6543 0e25 620B     		.2byte	0xb62
 6544 0e27 DB040000 		.4byte	0x4db
 6545 0e2b 02       		.uleb128 0x2
 6546 0e2c 91       		.byte	0x91
 6547 0e2d 6E       		.sleb128 -18
 6548 0e2e 15       		.uleb128 0x15
 6549 0e2f 0C6B0000 		.4byte	.LASF1111
 6550 0e33 01       		.byte	0x1
 6551 0e34 620B     		.2byte	0xb62
 6552 0e36 F0040000 		.4byte	0x4f0
 6553 0e3a 02       		.uleb128 0x2
 6554 0e3b 91       		.byte	0x91
 6555 0e3c 68       		.sleb128 -24
 6556 0e3d 16       		.uleb128 0x16
 6557 0e3e 9B0F0000 		.4byte	.LASF1114
 6558 0e42 01       		.byte	0x1
 6559 0e43 640B     		.2byte	0xb64
 6560 0e45 05050000 		.4byte	0x505
 6561 0e49 02       		.uleb128 0x2
 6562 0e4a 91       		.byte	0x91
 6563 0e4b 74       		.sleb128 -12
 6564 0e4c 00       		.byte	0
 6565 0e4d 19       		.uleb128 0x19
 6566 0e4e 254A0000 		.4byte	.LASF1185
 6567 0e52 01       		.byte	0x1
 6568 0e53 890B     		.2byte	0xb89
 6569 0e55 09010000 		.4byte	0x109
 6570 0e59 00000000 		.4byte	.LFB36
 6571 0e5d 16010000 		.4byte	.LFE36-.LFB36
 6572 0e61 01       		.uleb128 0x1
 6573 0e62 9C       		.byte	0x9c
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 183


 6574 0e63 F80E0000 		.4byte	0xef8
 6575 0e67 15       		.uleb128 0x15
 6576 0e68 9F640000 		.4byte	.LASF1150
 6577 0e6c 01       		.byte	0x1
 6578 0e6d 890B     		.2byte	0xb89
 6579 0e6f 52090000 		.4byte	0x952
 6580 0e73 02       		.uleb128 0x2
 6581 0e74 91       		.byte	0x91
 6582 0e75 54       		.sleb128 -44
 6583 0e76 15       		.uleb128 0x15
 6584 0e77 ED070000 		.4byte	.LASF1186
 6585 0e7b 01       		.byte	0x1
 6586 0e7c 890B     		.2byte	0xb89
 6587 0e7e E2090000 		.4byte	0x9e2
 6588 0e82 02       		.uleb128 0x2
 6589 0e83 91       		.byte	0x91
 6590 0e84 50       		.sleb128 -48
 6591 0e85 15       		.uleb128 0x15
 6592 0e86 B6320000 		.4byte	.LASF1187
 6593 0e8a 01       		.byte	0x1
 6594 0e8b 890B     		.2byte	0xb89
 6595 0e8d 3A020000 		.4byte	0x23a
 6596 0e91 02       		.uleb128 0x2
 6597 0e92 91       		.byte	0x91
 6598 0e93 4F       		.sleb128 -49
 6599 0e94 16       		.uleb128 0x16
 6600 0e95 C11C0000 		.4byte	.LASF1188
 6601 0e99 01       		.byte	0x1
 6602 0e9a 8B0B     		.2byte	0xb8b
 6603 0e9c F80E0000 		.4byte	0xef8
 6604 0ea0 02       		.uleb128 0x2
 6605 0ea1 91       		.byte	0x91
 6606 0ea2 5C       		.sleb128 -36
 6607 0ea3 16       		.uleb128 0x16
 6608 0ea4 A3450000 		.4byte	.LASF1189
 6609 0ea8 01       		.byte	0x1
 6610 0ea9 8B0B     		.2byte	0xb8b
 6611 0eab F80E0000 		.4byte	0xef8
 6612 0eaf 02       		.uleb128 0x2
 6613 0eb0 91       		.byte	0x91
 6614 0eb1 64       		.sleb128 -28
 6615 0eb2 16       		.uleb128 0x16
 6616 0eb3 2A860000 		.4byte	.LASF1153
 6617 0eb7 01       		.byte	0x1
 6618 0eb8 8C0B     		.2byte	0xb8c
 6619 0eba 09010000 		.4byte	0x109
 6620 0ebe 02       		.uleb128 0x2
 6621 0ebf 91       		.byte	0x91
 6622 0ec0 6C       		.sleb128 -20
 6623 0ec1 24       		.uleb128 0x24
 6624 0ec2 1A000000 		.4byte	.LBB17
 6625 0ec6 2C000000 		.4byte	.LBE17-.LBB17
 6626 0eca DE0E0000 		.4byte	0xede
 6627 0ece 16       		.uleb128 0x16
 6628 0ecf 04350000 		.4byte	.LASF1160
 6629 0ed3 01       		.byte	0x1
 6630 0ed4 900B     		.2byte	0xb90
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 184


 6631 0ed6 600A0000 		.4byte	0xa60
 6632 0eda 02       		.uleb128 0x2
 6633 0edb 91       		.byte	0x91
 6634 0edc 68       		.sleb128 -24
 6635 0edd 00       		.byte	0
 6636 0ede 17       		.uleb128 0x17
 6637 0edf 46000000 		.4byte	.LBB18
 6638 0ee3 2C000000 		.4byte	.LBE18-.LBB18
 6639 0ee7 16       		.uleb128 0x16
 6640 0ee8 04350000 		.4byte	.LASF1160
 6641 0eec 01       		.byte	0x1
 6642 0eed 980B     		.2byte	0xb98
 6643 0eef 600A0000 		.4byte	0xa60
 6644 0ef3 02       		.uleb128 0x2
 6645 0ef4 91       		.byte	0x91
 6646 0ef5 60       		.sleb128 -32
 6647 0ef6 00       		.byte	0
 6648 0ef7 00       		.byte	0
 6649 0ef8 06       		.uleb128 0x6
 6650 0ef9 04       		.byte	0x4
 6651 0efa FE0E0000 		.4byte	0xefe
 6652 0efe 0E       		.uleb128 0xe
 6653 0eff DF030000 		.4byte	0x3df
 6654 0f03 25       		.uleb128 0x25
 6655 0f04 53570000 		.4byte	.LASF1190
 6656 0f08 01       		.byte	0x1
 6657 0f09 DE0B     		.2byte	0xbde
 6658 0f0b C1000000 		.4byte	0xc1
 6659 0f0f 00000000 		.4byte	.LFB37
 6660 0f13 38000000 		.4byte	.LFE37-.LFB37
 6661 0f17 01       		.uleb128 0x1
 6662 0f18 9C       		.byte	0x9c
 6663 0f19 3C0F0000 		.4byte	0xf3c
 6664 0f1d 15       		.uleb128 0x15
 6665 0f1e 53740000 		.4byte	.LASF1191
 6666 0f22 01       		.byte	0x1
 6667 0f23 DE0B     		.2byte	0xbde
 6668 0f25 3C0F0000 		.4byte	0xf3c
 6669 0f29 02       		.uleb128 0x2
 6670 0f2a 91       		.byte	0x91
 6671 0f2b 6C       		.sleb128 -20
 6672 0f2c 16       		.uleb128 0x16
 6673 0f2d 9F2B0000 		.4byte	.LASF1192
 6674 0f31 01       		.byte	0x1
 6675 0f32 E00B     		.2byte	0xbe0
 6676 0f34 CC000000 		.4byte	0xcc
 6677 0f38 02       		.uleb128 0x2
 6678 0f39 91       		.byte	0x91
 6679 0f3a 74       		.sleb128 -12
 6680 0f3b 00       		.byte	0
 6681 0f3c 06       		.uleb128 0x6
 6682 0f3d 04       		.byte	0x4
 6683 0f3e 420F0000 		.4byte	0xf42
 6684 0f42 07       		.uleb128 0x7
 6685 0f43 B6000000 		.4byte	0xb6
 6686 0f47 14       		.uleb128 0x14
 6687 0f48 64580000 		.4byte	.LASF1193
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 185


 6688 0f4c 01       		.byte	0x1
 6689 0f4d F20B     		.2byte	0xbf2
 6690 0f4f 09010000 		.4byte	0x109
 6691 0f53 00000000 		.4byte	.LFB38
 6692 0f57 38000000 		.4byte	.LFE38-.LFB38
 6693 0f5b 01       		.uleb128 0x1
 6694 0f5c 9C       		.byte	0x9c
 6695 0f5d 9E0F0000 		.4byte	0xf9e
 6696 0f61 15       		.uleb128 0x15
 6697 0f62 4E650000 		.4byte	.LASF1129
 6698 0f66 01       		.byte	0x1
 6699 0f67 F20B     		.2byte	0xbf2
 6700 0f69 08020000 		.4byte	0x208
 6701 0f6d 02       		.uleb128 0x2
 6702 0f6e 91       		.byte	0x91
 6703 0f6f 64       		.sleb128 -28
 6704 0f70 16       		.uleb128 0x16
 6705 0f71 C4950000 		.4byte	.LASF1116
 6706 0f75 01       		.byte	0x1
 6707 0f76 F40B     		.2byte	0xbf4
 6708 0f78 05050000 		.4byte	0x505
 6709 0f7c 02       		.uleb128 0x2
 6710 0f7d 91       		.byte	0x91
 6711 0f7e 74       		.sleb128 -12
 6712 0f7f 16       		.uleb128 0x16
 6713 0f80 BB340000 		.4byte	.LASF1194
 6714 0f84 01       		.byte	0x1
 6715 0f85 F50B     		.2byte	0xbf5
 6716 0f87 2A010000 		.4byte	0x12a
 6717 0f8b 02       		.uleb128 0x2
 6718 0f8c 91       		.byte	0x91
 6719 0f8d 70       		.sleb128 -16
 6720 0f8e 16       		.uleb128 0x16
 6721 0f8f 2F0F0000 		.4byte	.LASF1130
 6722 0f93 01       		.byte	0x1
 6723 0f94 F60B     		.2byte	0xbf6
 6724 0f96 09010000 		.4byte	0x109
 6725 0f9a 02       		.uleb128 0x2
 6726 0f9b 91       		.byte	0x91
 6727 0f9c 6C       		.sleb128 -20
 6728 0f9d 00       		.byte	0
 6729 0f9e 22       		.uleb128 0x22
 6730 0f9f 33560000 		.4byte	.LASF1195
 6731 0fa3 01       		.byte	0x1
 6732 0fa4 0E0C     		.2byte	0xc0e
 6733 0fa6 00000000 		.4byte	.LFB39
 6734 0faa 1E000000 		.4byte	.LFE39-.LFB39
 6735 0fae 01       		.uleb128 0x1
 6736 0faf 9C       		.byte	0x9c
 6737 0fb0 C40F0000 		.4byte	0xfc4
 6738 0fb4 15       		.uleb128 0x15
 6739 0fb5 C4950000 		.4byte	.LASF1116
 6740 0fb9 01       		.byte	0x1
 6741 0fba 0E0C     		.2byte	0xc0e
 6742 0fbc 05050000 		.4byte	0x505
 6743 0fc0 02       		.uleb128 0x2
 6744 0fc1 91       		.byte	0x91
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 186


 6745 0fc2 74       		.sleb128 -12
 6746 0fc3 00       		.byte	0
 6747 0fc4 26       		.uleb128 0x26
 6748 0fc5 91220000 		.4byte	.LASF1196
 6749 0fc9 01       		.byte	0x1
 6750 0fca 230C     		.2byte	0xc23
 6751 0fcc 00000000 		.4byte	.LFB40
 6752 0fd0 48000000 		.4byte	.LFE40-.LFB40
 6753 0fd4 01       		.uleb128 0x1
 6754 0fd5 9C       		.byte	0x9c
 6755 0fd6 EA0F0000 		.4byte	0xfea
 6756 0fda 16       		.uleb128 0x16
 6757 0fdb C4950000 		.4byte	.LASF1116
 6758 0fdf 01       		.byte	0x1
 6759 0fe0 250C     		.2byte	0xc25
 6760 0fe2 05050000 		.4byte	0x505
 6761 0fe6 02       		.uleb128 0x2
 6762 0fe7 91       		.byte	0x91
 6763 0fe8 74       		.sleb128 -12
 6764 0fe9 00       		.byte	0
 6765 0fea 20       		.uleb128 0x20
 6766 0feb 4B950000 		.4byte	.LASF1197
 6767 0fef 01       		.byte	0x1
 6768 0ff0 3E0C     		.2byte	0xc3e
 6769 0ff2 08020000 		.4byte	0x208
 6770 0ff6 00000000 		.4byte	.LFB41
 6771 0ffa 20000000 		.4byte	.LFE41-.LFB41
 6772 0ffe 01       		.uleb128 0x1
 6773 0fff 9C       		.byte	0x9c
 6774 1000 14100000 		.4byte	0x1014
 6775 1004 16       		.uleb128 0x16
 6776 1005 9E210000 		.4byte	.LASF1113
 6777 1009 01       		.byte	0x1
 6778 100a 400C     		.2byte	0xc40
 6779 100c 08020000 		.4byte	0x208
 6780 1010 02       		.uleb128 0x2
 6781 1011 91       		.byte	0x91
 6782 1012 74       		.sleb128 -12
 6783 1013 00       		.byte	0
 6784 1014 18       		.uleb128 0x18
 6785 1015 46610000 		.4byte	.LASF1198
 6786 1019 01       		.byte	0x1
 6787 101a 6B0C     		.2byte	0xc6b
 6788 101c 00000000 		.4byte	.LFB42
 6789 1020 F0000000 		.4byte	.LFE42-.LFB42
 6790 1024 01       		.uleb128 0x1
 6791 1025 9C       		.byte	0x9c
 6792 1026 49100000 		.4byte	0x1049
 6793 102a 15       		.uleb128 0x15
 6794 102b D2430000 		.4byte	.LASF1199
 6795 102f 01       		.byte	0x1
 6796 1030 6B0C     		.2byte	0xc6b
 6797 1032 45070000 		.4byte	0x745
 6798 1036 02       		.uleb128 0x2
 6799 1037 91       		.byte	0x91
 6800 1038 6C       		.sleb128 -20
 6801 1039 16       		.uleb128 0x16
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 187


 6802 103a C4950000 		.4byte	.LASF1116
 6803 103e 01       		.byte	0x1
 6804 103f 6D0C     		.2byte	0xc6d
 6805 1041 8F070000 		.4byte	0x78f
 6806 1045 02       		.uleb128 0x2
 6807 1046 91       		.byte	0x91
 6808 1047 74       		.sleb128 -12
 6809 1048 00       		.byte	0
 6810 1049 14       		.uleb128 0x14
 6811 104a 320B0000 		.4byte	.LASF1200
 6812 104e 01       		.byte	0x1
 6813 104f AA0C     		.2byte	0xcaa
 6814 1051 FE000000 		.4byte	0xfe
 6815 1055 00000000 		.4byte	.LFB43
 6816 1059 DC000000 		.4byte	.LFE43-.LFB43
 6817 105d 01       		.uleb128 0x1
 6818 105e 9C       		.byte	0x9c
 6819 105f 91100000 		.4byte	0x1091
 6820 1063 15       		.uleb128 0x15
 6821 1064 D2430000 		.4byte	.LASF1199
 6822 1068 01       		.byte	0x1
 6823 1069 AA0C     		.2byte	0xcaa
 6824 106b 45070000 		.4byte	0x745
 6825 106f 02       		.uleb128 0x2
 6826 1070 91       		.byte	0x91
 6827 1071 6C       		.sleb128 -20
 6828 1072 16       		.uleb128 0x16
 6829 1073 C4950000 		.4byte	.LASF1116
 6830 1077 01       		.byte	0x1
 6831 1078 AC0C     		.2byte	0xcac
 6832 107a 8F070000 		.4byte	0x78f
 6833 107e 02       		.uleb128 0x2
 6834 107f 91       		.byte	0x91
 6835 1080 70       		.sleb128 -16
 6836 1081 16       		.uleb128 0x16
 6837 1082 9E210000 		.4byte	.LASF1113
 6838 1086 01       		.byte	0x1
 6839 1087 AD0C     		.2byte	0xcad
 6840 1089 FE000000 		.4byte	0xfe
 6841 108d 02       		.uleb128 0x2
 6842 108e 91       		.byte	0x91
 6843 108f 74       		.sleb128 -12
 6844 1090 00       		.byte	0
 6845 1091 20       		.uleb128 0x20
 6846 1092 432D0000 		.4byte	.LASF1201
 6847 1096 01       		.byte	0x1
 6848 1097 F80D     		.2byte	0xdf8
 6849 1099 1F010000 		.4byte	0x11f
 6850 109d 00000000 		.4byte	.LFB44
 6851 10a1 30000000 		.4byte	.LFE44-.LFB44
 6852 10a5 01       		.uleb128 0x1
 6853 10a6 9C       		.byte	0x9c
 6854 10a7 BB100000 		.4byte	0x10bb
 6855 10ab 16       		.uleb128 0x16
 6856 10ac 2F0F0000 		.4byte	.LASF1130
 6857 10b0 01       		.byte	0x1
 6858 10b1 FA0D     		.2byte	0xdfa
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 188


 6859 10b3 1F010000 		.4byte	0x11f
 6860 10b7 02       		.uleb128 0x2
 6861 10b8 91       		.byte	0x91
 6862 10b9 74       		.sleb128 -12
 6863 10ba 00       		.byte	0
 6864 10bb 1C       		.uleb128 0x1c
 6865 10bc EF350000 		.4byte	.LASF1203
 6866 10c0 01       		.byte	0x1
 6867 10c1 080E     		.2byte	0xe08
 6868 10c3 A2000000 		.4byte	0xa2
 6869 10c7 00000000 		.4byte	.LFB45
 6870 10cb 28000000 		.4byte	.LFE45-.LFB45
 6871 10cf 01       		.uleb128 0x1
 6872 10d0 9C       		.byte	0x9c
 6873 10d1 0F       		.uleb128 0xf
 6874 10d2 FD010000 		.4byte	0x1fd
 6875 10d6 E1100000 		.4byte	0x10e1
 6876 10da 10       		.uleb128 0x10
 6877 10db 9B000000 		.4byte	0x9b
 6878 10df 07       		.byte	0x7
 6879 10e0 00       		.byte	0
 6880 10e1 27       		.uleb128 0x27
 6881 10e2 44520000 		.4byte	.LASF1204
 6882 10e6 01       		.byte	0x1
 6883 10e7 BF       		.byte	0xbf
 6884 10e8 D1100000 		.4byte	0x10d1
 6885 10ec 05       		.uleb128 0x5
 6886 10ed 03       		.byte	0x3
 6887 10ee 00000000 		.4byte	pxReadyTasksLists
 6888 10f2 27       		.uleb128 0x27
 6889 10f3 7B8F0000 		.4byte	.LASF1205
 6890 10f7 01       		.byte	0x1
 6891 10f8 C0       		.byte	0xc0
 6892 10f9 FD010000 		.4byte	0x1fd
 6893 10fd 05       		.uleb128 0x5
 6894 10fe 03       		.byte	0x3
 6895 10ff 00000000 		.4byte	xDelayedTaskList1
 6896 1103 27       		.uleb128 0x27
 6897 1104 8D8F0000 		.4byte	.LASF1206
 6898 1108 01       		.byte	0x1
 6899 1109 C1       		.byte	0xc1
 6900 110a FD010000 		.4byte	0x1fd
 6901 110e 05       		.uleb128 0x5
 6902 110f 03       		.byte	0x3
 6903 1110 00000000 		.4byte	xDelayedTaskList2
 6904 1114 27       		.uleb128 0x27
 6905 1115 62760000 		.4byte	.LASF1207
 6906 1119 01       		.byte	0x1
 6907 111a C2       		.byte	0xc2
 6908 111b 25110000 		.4byte	0x1125
 6909 111f 05       		.uleb128 0x5
 6910 1120 03       		.byte	0x3
 6911 1121 00000000 		.4byte	pxDelayedTaskList
 6912 1125 0E       		.uleb128 0xe
 6913 1126 E2090000 		.4byte	0x9e2
 6914 112a 27       		.uleb128 0x27
 6915 112b 7C780000 		.4byte	.LASF1208
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 189


 6916 112f 01       		.byte	0x1
 6917 1130 C3       		.byte	0xc3
 6918 1131 25110000 		.4byte	0x1125
 6919 1135 05       		.uleb128 0x5
 6920 1136 03       		.byte	0x3
 6921 1137 00000000 		.4byte	pxOverflowDelayedTaskList
 6922 113b 27       		.uleb128 0x27
 6923 113c 48300000 		.4byte	.LASF1209
 6924 1140 01       		.byte	0x1
 6925 1141 C4       		.byte	0xc4
 6926 1142 FD010000 		.4byte	0x1fd
 6927 1146 05       		.uleb128 0x5
 6928 1147 03       		.byte	0x3
 6929 1148 00000000 		.4byte	xPendingReadyList
 6930 114c 27       		.uleb128 0x27
 6931 114d 2C110000 		.4byte	.LASF1210
 6932 1151 01       		.byte	0x1
 6933 1152 C8       		.byte	0xc8
 6934 1153 FD010000 		.4byte	0x1fd
 6935 1157 05       		.uleb128 0x5
 6936 1158 03       		.byte	0x3
 6937 1159 00000000 		.4byte	xTasksWaitingTermination
 6938 115d 27       		.uleb128 0x27
 6939 115e 3E370000 		.4byte	.LASF1211
 6940 1162 01       		.byte	0x1
 6941 1163 C9       		.byte	0xc9
 6942 1164 6E110000 		.4byte	0x116e
 6943 1168 05       		.uleb128 0x5
 6944 1169 03       		.byte	0x3
 6945 116a 00000000 		.4byte	uxTasksDeleted
 6946 116e 0E       		.uleb128 0xe
 6947 116f 09010000 		.4byte	0x109
 6948 1173 27       		.uleb128 0x27
 6949 1174 791B0000 		.4byte	.LASF1212
 6950 1178 01       		.byte	0x1
 6951 1179 CF       		.byte	0xcf
 6952 117a FD010000 		.4byte	0x1fd
 6953 117e 05       		.uleb128 0x5
 6954 117f 03       		.byte	0x3
 6955 1180 00000000 		.4byte	xSuspendedTaskList
 6956 1184 27       		.uleb128 0x27
 6957 1185 4B390000 		.4byte	.LASF1213
 6958 1189 01       		.byte	0x1
 6959 118a DA       		.byte	0xda
 6960 118b 6E110000 		.4byte	0x116e
 6961 118f 05       		.uleb128 0x5
 6962 1190 03       		.byte	0x3
 6963 1191 00000000 		.4byte	uxCurrentNumberOfTasks
 6964 1195 27       		.uleb128 0x27
 6965 1196 C0070000 		.4byte	.LASF1214
 6966 119a 01       		.byte	0x1
 6967 119b DB       		.byte	0xdb
 6968 119c A6110000 		.4byte	0x11a6
 6969 11a0 05       		.uleb128 0x5
 6970 11a1 03       		.byte	0x3
 6971 11a2 00000000 		.4byte	xTickCount
 6972 11a6 0E       		.uleb128 0xe
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 190


 6973 11a7 1F010000 		.4byte	0x11f
 6974 11ab 27       		.uleb128 0x27
 6975 11ac 136F0000 		.4byte	.LASF1215
 6976 11b0 01       		.byte	0x1
 6977 11b1 DC       		.byte	0xdc
 6978 11b2 6E110000 		.4byte	0x116e
 6979 11b6 05       		.uleb128 0x5
 6980 11b7 03       		.byte	0x3
 6981 11b8 00000000 		.4byte	uxTopReadyPriority
 6982 11bc 27       		.uleb128 0x27
 6983 11bd 20260000 		.4byte	.LASF1216
 6984 11c1 01       		.byte	0x1
 6985 11c2 DD       		.byte	0xdd
 6986 11c3 CD110000 		.4byte	0x11cd
 6987 11c7 05       		.uleb128 0x5
 6988 11c8 03       		.byte	0x3
 6989 11c9 00000000 		.4byte	xSchedulerRunning
 6990 11cd 0E       		.uleb128 0xe
 6991 11ce FE000000 		.4byte	0xfe
 6992 11d2 27       		.uleb128 0x27
 6993 11d3 77230000 		.4byte	.LASF1217
 6994 11d7 01       		.byte	0x1
 6995 11d8 DE       		.byte	0xde
 6996 11d9 6E110000 		.4byte	0x116e
 6997 11dd 05       		.uleb128 0x5
 6998 11de 03       		.byte	0x3
 6999 11df 00000000 		.4byte	uxPendedTicks
 7000 11e3 27       		.uleb128 0x27
 7001 11e4 76000000 		.4byte	.LASF1218
 7002 11e8 01       		.byte	0x1
 7003 11e9 DF       		.byte	0xdf
 7004 11ea CD110000 		.4byte	0x11cd
 7005 11ee 05       		.uleb128 0x5
 7006 11ef 03       		.byte	0x3
 7007 11f0 00000000 		.4byte	xYieldPending
 7008 11f4 27       		.uleb128 0x27
 7009 11f5 DA1F0000 		.4byte	.LASF1219
 7010 11f9 01       		.byte	0x1
 7011 11fa E0       		.byte	0xe0
 7012 11fb CD110000 		.4byte	0x11cd
 7013 11ff 05       		.uleb128 0x5
 7014 1200 03       		.byte	0x3
 7015 1201 00000000 		.4byte	xNumOfOverflows
 7016 1205 27       		.uleb128 0x27
 7017 1206 CB070000 		.4byte	.LASF1102
 7018 120a 01       		.byte	0x1
 7019 120b E1       		.byte	0xe1
 7020 120c 09010000 		.4byte	0x109
 7021 1210 05       		.uleb128 0x5
 7022 1211 03       		.byte	0x3
 7023 1212 00000000 		.4byte	uxTaskNumber
 7024 1216 27       		.uleb128 0x27
 7025 1217 B22E0000 		.4byte	.LASF1220
 7026 121b 01       		.byte	0x1
 7027 121c E2       		.byte	0xe2
 7028 121d A6110000 		.4byte	0x11a6
 7029 1221 05       		.uleb128 0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 191


 7030 1222 03       		.byte	0x3
 7031 1223 00000000 		.4byte	xNextTaskUnblockTime
 7032 1227 27       		.uleb128 0x27
 7033 1228 28100000 		.4byte	.LASF1221
 7034 122c 01       		.byte	0x1
 7035 122d EC       		.byte	0xec
 7036 122e 6E110000 		.4byte	0x116e
 7037 1232 05       		.uleb128 0x5
 7038 1233 03       		.byte	0x3
 7039 1234 00000000 		.4byte	uxSchedulerSuspended
 7040 1238 28       		.uleb128 0x28
 7041 1239 66140000 		.4byte	.LASF1228
 7042 123d 01       		.byte	0x1
 7043 123e BC       		.byte	0xbc
 7044 123f 49120000 		.4byte	0x1249
 7045 1243 05       		.uleb128 0x5
 7046 1244 03       		.byte	0x3
 7047 1245 00000000 		.4byte	pxCurrentTCB
 7048 1249 0E       		.uleb128 0xe
 7049 124a 05050000 		.4byte	0x505
 7050 124e 00       		.byte	0
 7051              		.section	.debug_abbrev,"",%progbits
 7052              	.Ldebug_abbrev0:
 7053 0000 01       		.uleb128 0x1
 7054 0001 11       		.uleb128 0x11
 7055 0002 01       		.byte	0x1
 7056 0003 25       		.uleb128 0x25
 7057 0004 0E       		.uleb128 0xe
 7058 0005 13       		.uleb128 0x13
 7059 0006 0B       		.uleb128 0xb
 7060 0007 03       		.uleb128 0x3
 7061 0008 0E       		.uleb128 0xe
 7062 0009 1B       		.uleb128 0x1b
 7063 000a 0E       		.uleb128 0xe
 7064 000b 55       		.uleb128 0x55
 7065 000c 17       		.uleb128 0x17
 7066 000d 11       		.uleb128 0x11
 7067 000e 01       		.uleb128 0x1
 7068 000f 10       		.uleb128 0x10
 7069 0010 17       		.uleb128 0x17
 7070 0011 9942     		.uleb128 0x2119
 7071 0013 17       		.uleb128 0x17
 7072 0014 00       		.byte	0
 7073 0015 00       		.byte	0
 7074 0016 02       		.uleb128 0x2
 7075 0017 16       		.uleb128 0x16
 7076 0018 00       		.byte	0
 7077 0019 03       		.uleb128 0x3
 7078 001a 0E       		.uleb128 0xe
 7079 001b 3A       		.uleb128 0x3a
 7080 001c 0B       		.uleb128 0xb
 7081 001d 3B       		.uleb128 0x3b
 7082 001e 0B       		.uleb128 0xb
 7083 001f 49       		.uleb128 0x49
 7084 0020 13       		.uleb128 0x13
 7085 0021 00       		.byte	0
 7086 0022 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 192


 7087 0023 03       		.uleb128 0x3
 7088 0024 24       		.uleb128 0x24
 7089 0025 00       		.byte	0
 7090 0026 0B       		.uleb128 0xb
 7091 0027 0B       		.uleb128 0xb
 7092 0028 3E       		.uleb128 0x3e
 7093 0029 0B       		.uleb128 0xb
 7094 002a 03       		.uleb128 0x3
 7095 002b 0E       		.uleb128 0xe
 7096 002c 00       		.byte	0
 7097 002d 00       		.byte	0
 7098 002e 04       		.uleb128 0x4
 7099 002f 24       		.uleb128 0x24
 7100 0030 00       		.byte	0
 7101 0031 0B       		.uleb128 0xb
 7102 0032 0B       		.uleb128 0xb
 7103 0033 3E       		.uleb128 0x3e
 7104 0034 0B       		.uleb128 0xb
 7105 0035 03       		.uleb128 0x3
 7106 0036 08       		.uleb128 0x8
 7107 0037 00       		.byte	0
 7108 0038 00       		.byte	0
 7109 0039 05       		.uleb128 0x5
 7110 003a 0F       		.uleb128 0xf
 7111 003b 00       		.byte	0
 7112 003c 0B       		.uleb128 0xb
 7113 003d 0B       		.uleb128 0xb
 7114 003e 00       		.byte	0
 7115 003f 00       		.byte	0
 7116 0040 06       		.uleb128 0x6
 7117 0041 0F       		.uleb128 0xf
 7118 0042 00       		.byte	0
 7119 0043 0B       		.uleb128 0xb
 7120 0044 0B       		.uleb128 0xb
 7121 0045 49       		.uleb128 0x49
 7122 0046 13       		.uleb128 0x13
 7123 0047 00       		.byte	0
 7124 0048 00       		.byte	0
 7125 0049 07       		.uleb128 0x7
 7126 004a 26       		.uleb128 0x26
 7127 004b 00       		.byte	0
 7128 004c 49       		.uleb128 0x49
 7129 004d 13       		.uleb128 0x13
 7130 004e 00       		.byte	0
 7131 004f 00       		.byte	0
 7132 0050 08       		.uleb128 0x8
 7133 0051 15       		.uleb128 0x15
 7134 0052 01       		.byte	0x1
 7135 0053 27       		.uleb128 0x27
 7136 0054 19       		.uleb128 0x19
 7137 0055 01       		.uleb128 0x1
 7138 0056 13       		.uleb128 0x13
 7139 0057 00       		.byte	0
 7140 0058 00       		.byte	0
 7141 0059 09       		.uleb128 0x9
 7142 005a 05       		.uleb128 0x5
 7143 005b 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 193


 7144 005c 49       		.uleb128 0x49
 7145 005d 13       		.uleb128 0x13
 7146 005e 00       		.byte	0
 7147 005f 00       		.byte	0
 7148 0060 0A       		.uleb128 0xa
 7149 0061 13       		.uleb128 0x13
 7150 0062 01       		.byte	0x1
 7151 0063 03       		.uleb128 0x3
 7152 0064 0E       		.uleb128 0xe
 7153 0065 0B       		.uleb128 0xb
 7154 0066 0B       		.uleb128 0xb
 7155 0067 3A       		.uleb128 0x3a
 7156 0068 0B       		.uleb128 0xb
 7157 0069 3B       		.uleb128 0x3b
 7158 006a 0B       		.uleb128 0xb
 7159 006b 01       		.uleb128 0x1
 7160 006c 13       		.uleb128 0x13
 7161 006d 00       		.byte	0
 7162 006e 00       		.byte	0
 7163 006f 0B       		.uleb128 0xb
 7164 0070 0D       		.uleb128 0xd
 7165 0071 00       		.byte	0
 7166 0072 03       		.uleb128 0x3
 7167 0073 0E       		.uleb128 0xe
 7168 0074 3A       		.uleb128 0x3a
 7169 0075 0B       		.uleb128 0xb
 7170 0076 3B       		.uleb128 0x3b
 7171 0077 0B       		.uleb128 0xb
 7172 0078 49       		.uleb128 0x49
 7173 0079 13       		.uleb128 0x13
 7174 007a 38       		.uleb128 0x38
 7175 007b 0B       		.uleb128 0xb
 7176 007c 00       		.byte	0
 7177 007d 00       		.byte	0
 7178 007e 0C       		.uleb128 0xc
 7179 007f 04       		.uleb128 0x4
 7180 0080 01       		.byte	0x1
 7181 0081 0B       		.uleb128 0xb
 7182 0082 0B       		.uleb128 0xb
 7183 0083 3A       		.uleb128 0x3a
 7184 0084 0B       		.uleb128 0xb
 7185 0085 3B       		.uleb128 0x3b
 7186 0086 0B       		.uleb128 0xb
 7187 0087 01       		.uleb128 0x1
 7188 0088 13       		.uleb128 0x13
 7189 0089 00       		.byte	0
 7190 008a 00       		.byte	0
 7191 008b 0D       		.uleb128 0xd
 7192 008c 28       		.uleb128 0x28
 7193 008d 00       		.byte	0
 7194 008e 03       		.uleb128 0x3
 7195 008f 0E       		.uleb128 0xe
 7196 0090 1C       		.uleb128 0x1c
 7197 0091 0D       		.uleb128 0xd
 7198 0092 00       		.byte	0
 7199 0093 00       		.byte	0
 7200 0094 0E       		.uleb128 0xe
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 194


 7201 0095 35       		.uleb128 0x35
 7202 0096 00       		.byte	0
 7203 0097 49       		.uleb128 0x49
 7204 0098 13       		.uleb128 0x13
 7205 0099 00       		.byte	0
 7206 009a 00       		.byte	0
 7207 009b 0F       		.uleb128 0xf
 7208 009c 01       		.uleb128 0x1
 7209 009d 01       		.byte	0x1
 7210 009e 49       		.uleb128 0x49
 7211 009f 13       		.uleb128 0x13
 7212 00a0 01       		.uleb128 0x1
 7213 00a1 13       		.uleb128 0x13
 7214 00a2 00       		.byte	0
 7215 00a3 00       		.byte	0
 7216 00a4 10       		.uleb128 0x10
 7217 00a5 21       		.uleb128 0x21
 7218 00a6 00       		.byte	0
 7219 00a7 49       		.uleb128 0x49
 7220 00a8 13       		.uleb128 0x13
 7221 00a9 2F       		.uleb128 0x2f
 7222 00aa 0B       		.uleb128 0xb
 7223 00ab 00       		.byte	0
 7224 00ac 00       		.byte	0
 7225 00ad 11       		.uleb128 0x11
 7226 00ae 2E       		.uleb128 0x2e
 7227 00af 01       		.byte	0x1
 7228 00b0 03       		.uleb128 0x3
 7229 00b1 0E       		.uleb128 0xe
 7230 00b2 3A       		.uleb128 0x3a
 7231 00b3 0B       		.uleb128 0xb
 7232 00b4 3B       		.uleb128 0x3b
 7233 00b5 0B       		.uleb128 0xb
 7234 00b6 27       		.uleb128 0x27
 7235 00b7 19       		.uleb128 0x19
 7236 00b8 49       		.uleb128 0x49
 7237 00b9 13       		.uleb128 0x13
 7238 00ba 20       		.uleb128 0x20
 7239 00bb 0B       		.uleb128 0xb
 7240 00bc 01       		.uleb128 0x1
 7241 00bd 13       		.uleb128 0x13
 7242 00be 00       		.byte	0
 7243 00bf 00       		.byte	0
 7244 00c0 12       		.uleb128 0x12
 7245 00c1 05       		.uleb128 0x5
 7246 00c2 00       		.byte	0
 7247 00c3 03       		.uleb128 0x3
 7248 00c4 0E       		.uleb128 0xe
 7249 00c5 3A       		.uleb128 0x3a
 7250 00c6 0B       		.uleb128 0xb
 7251 00c7 3B       		.uleb128 0x3b
 7252 00c8 0B       		.uleb128 0xb
 7253 00c9 49       		.uleb128 0x49
 7254 00ca 13       		.uleb128 0x13
 7255 00cb 00       		.byte	0
 7256 00cc 00       		.byte	0
 7257 00cd 13       		.uleb128 0x13
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 195


 7258 00ce 34       		.uleb128 0x34
 7259 00cf 00       		.byte	0
 7260 00d0 03       		.uleb128 0x3
 7261 00d1 0E       		.uleb128 0xe
 7262 00d2 3A       		.uleb128 0x3a
 7263 00d3 0B       		.uleb128 0xb
 7264 00d4 3B       		.uleb128 0x3b
 7265 00d5 0B       		.uleb128 0xb
 7266 00d6 49       		.uleb128 0x49
 7267 00d7 13       		.uleb128 0x13
 7268 00d8 00       		.byte	0
 7269 00d9 00       		.byte	0
 7270 00da 14       		.uleb128 0x14
 7271 00db 2E       		.uleb128 0x2e
 7272 00dc 01       		.byte	0x1
 7273 00dd 3F       		.uleb128 0x3f
 7274 00de 19       		.uleb128 0x19
 7275 00df 03       		.uleb128 0x3
 7276 00e0 0E       		.uleb128 0xe
 7277 00e1 3A       		.uleb128 0x3a
 7278 00e2 0B       		.uleb128 0xb
 7279 00e3 3B       		.uleb128 0x3b
 7280 00e4 05       		.uleb128 0x5
 7281 00e5 27       		.uleb128 0x27
 7282 00e6 19       		.uleb128 0x19
 7283 00e7 49       		.uleb128 0x49
 7284 00e8 13       		.uleb128 0x13
 7285 00e9 11       		.uleb128 0x11
 7286 00ea 01       		.uleb128 0x1
 7287 00eb 12       		.uleb128 0x12
 7288 00ec 06       		.uleb128 0x6
 7289 00ed 40       		.uleb128 0x40
 7290 00ee 18       		.uleb128 0x18
 7291 00ef 9642     		.uleb128 0x2116
 7292 00f1 19       		.uleb128 0x19
 7293 00f2 01       		.uleb128 0x1
 7294 00f3 13       		.uleb128 0x13
 7295 00f4 00       		.byte	0
 7296 00f5 00       		.byte	0
 7297 00f6 15       		.uleb128 0x15
 7298 00f7 05       		.uleb128 0x5
 7299 00f8 00       		.byte	0
 7300 00f9 03       		.uleb128 0x3
 7301 00fa 0E       		.uleb128 0xe
 7302 00fb 3A       		.uleb128 0x3a
 7303 00fc 0B       		.uleb128 0xb
 7304 00fd 3B       		.uleb128 0x3b
 7305 00fe 05       		.uleb128 0x5
 7306 00ff 49       		.uleb128 0x49
 7307 0100 13       		.uleb128 0x13
 7308 0101 02       		.uleb128 0x2
 7309 0102 18       		.uleb128 0x18
 7310 0103 00       		.byte	0
 7311 0104 00       		.byte	0
 7312 0105 16       		.uleb128 0x16
 7313 0106 34       		.uleb128 0x34
 7314 0107 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 196


 7315 0108 03       		.uleb128 0x3
 7316 0109 0E       		.uleb128 0xe
 7317 010a 3A       		.uleb128 0x3a
 7318 010b 0B       		.uleb128 0xb
 7319 010c 3B       		.uleb128 0x3b
 7320 010d 05       		.uleb128 0x5
 7321 010e 49       		.uleb128 0x49
 7322 010f 13       		.uleb128 0x13
 7323 0110 02       		.uleb128 0x2
 7324 0111 18       		.uleb128 0x18
 7325 0112 00       		.byte	0
 7326 0113 00       		.byte	0
 7327 0114 17       		.uleb128 0x17
 7328 0115 0B       		.uleb128 0xb
 7329 0116 01       		.byte	0x1
 7330 0117 11       		.uleb128 0x11
 7331 0118 01       		.uleb128 0x1
 7332 0119 12       		.uleb128 0x12
 7333 011a 06       		.uleb128 0x6
 7334 011b 00       		.byte	0
 7335 011c 00       		.byte	0
 7336 011d 18       		.uleb128 0x18
 7337 011e 2E       		.uleb128 0x2e
 7338 011f 01       		.byte	0x1
 7339 0120 3F       		.uleb128 0x3f
 7340 0121 19       		.uleb128 0x19
 7341 0122 03       		.uleb128 0x3
 7342 0123 0E       		.uleb128 0xe
 7343 0124 3A       		.uleb128 0x3a
 7344 0125 0B       		.uleb128 0xb
 7345 0126 3B       		.uleb128 0x3b
 7346 0127 05       		.uleb128 0x5
 7347 0128 27       		.uleb128 0x27
 7348 0129 19       		.uleb128 0x19
 7349 012a 11       		.uleb128 0x11
 7350 012b 01       		.uleb128 0x1
 7351 012c 12       		.uleb128 0x12
 7352 012d 06       		.uleb128 0x6
 7353 012e 40       		.uleb128 0x40
 7354 012f 18       		.uleb128 0x18
 7355 0130 9642     		.uleb128 0x2116
 7356 0132 19       		.uleb128 0x19
 7357 0133 01       		.uleb128 0x1
 7358 0134 13       		.uleb128 0x13
 7359 0135 00       		.byte	0
 7360 0136 00       		.byte	0
 7361 0137 19       		.uleb128 0x19
 7362 0138 2E       		.uleb128 0x2e
 7363 0139 01       		.byte	0x1
 7364 013a 03       		.uleb128 0x3
 7365 013b 0E       		.uleb128 0xe
 7366 013c 3A       		.uleb128 0x3a
 7367 013d 0B       		.uleb128 0xb
 7368 013e 3B       		.uleb128 0x3b
 7369 013f 05       		.uleb128 0x5
 7370 0140 27       		.uleb128 0x27
 7371 0141 19       		.uleb128 0x19
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 197


 7372 0142 49       		.uleb128 0x49
 7373 0143 13       		.uleb128 0x13
 7374 0144 11       		.uleb128 0x11
 7375 0145 01       		.uleb128 0x1
 7376 0146 12       		.uleb128 0x12
 7377 0147 06       		.uleb128 0x6
 7378 0148 40       		.uleb128 0x40
 7379 0149 18       		.uleb128 0x18
 7380 014a 9642     		.uleb128 0x2116
 7381 014c 19       		.uleb128 0x19
 7382 014d 01       		.uleb128 0x1
 7383 014e 13       		.uleb128 0x13
 7384 014f 00       		.byte	0
 7385 0150 00       		.byte	0
 7386 0151 1A       		.uleb128 0x1a
 7387 0152 2E       		.uleb128 0x2e
 7388 0153 00       		.byte	0
 7389 0154 3F       		.uleb128 0x3f
 7390 0155 19       		.uleb128 0x19
 7391 0156 03       		.uleb128 0x3
 7392 0157 0E       		.uleb128 0xe
 7393 0158 3A       		.uleb128 0x3a
 7394 0159 0B       		.uleb128 0xb
 7395 015a 3B       		.uleb128 0x3b
 7396 015b 05       		.uleb128 0x5
 7397 015c 27       		.uleb128 0x27
 7398 015d 19       		.uleb128 0x19
 7399 015e 11       		.uleb128 0x11
 7400 015f 01       		.uleb128 0x1
 7401 0160 12       		.uleb128 0x12
 7402 0161 06       		.uleb128 0x6
 7403 0162 40       		.uleb128 0x40
 7404 0163 18       		.uleb128 0x18
 7405 0164 9642     		.uleb128 0x2116
 7406 0166 19       		.uleb128 0x19
 7407 0167 00       		.byte	0
 7408 0168 00       		.byte	0
 7409 0169 1B       		.uleb128 0x1b
 7410 016a 2E       		.uleb128 0x2e
 7411 016b 00       		.byte	0
 7412 016c 3F       		.uleb128 0x3f
 7413 016d 19       		.uleb128 0x19
 7414 016e 03       		.uleb128 0x3
 7415 016f 0E       		.uleb128 0xe
 7416 0170 3A       		.uleb128 0x3a
 7417 0171 0B       		.uleb128 0xb
 7418 0172 3B       		.uleb128 0x3b
 7419 0173 05       		.uleb128 0x5
 7420 0174 27       		.uleb128 0x27
 7421 0175 19       		.uleb128 0x19
 7422 0176 11       		.uleb128 0x11
 7423 0177 01       		.uleb128 0x1
 7424 0178 12       		.uleb128 0x12
 7425 0179 06       		.uleb128 0x6
 7426 017a 40       		.uleb128 0x40
 7427 017b 18       		.uleb128 0x18
 7428 017c 9742     		.uleb128 0x2117
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 198


 7429 017e 19       		.uleb128 0x19
 7430 017f 00       		.byte	0
 7431 0180 00       		.byte	0
 7432 0181 1C       		.uleb128 0x1c
 7433 0182 2E       		.uleb128 0x2e
 7434 0183 00       		.byte	0
 7435 0184 3F       		.uleb128 0x3f
 7436 0185 19       		.uleb128 0x19
 7437 0186 03       		.uleb128 0x3
 7438 0187 0E       		.uleb128 0xe
 7439 0188 3A       		.uleb128 0x3a
 7440 0189 0B       		.uleb128 0xb
 7441 018a 3B       		.uleb128 0x3b
 7442 018b 05       		.uleb128 0x5
 7443 018c 27       		.uleb128 0x27
 7444 018d 19       		.uleb128 0x19
 7445 018e 49       		.uleb128 0x49
 7446 018f 13       		.uleb128 0x13
 7447 0190 11       		.uleb128 0x11
 7448 0191 01       		.uleb128 0x1
 7449 0192 12       		.uleb128 0x12
 7450 0193 06       		.uleb128 0x6
 7451 0194 40       		.uleb128 0x40
 7452 0195 18       		.uleb128 0x18
 7453 0196 9742     		.uleb128 0x2117
 7454 0198 19       		.uleb128 0x19
 7455 0199 00       		.byte	0
 7456 019a 00       		.byte	0
 7457 019b 1D       		.uleb128 0x1d
 7458 019c 1D       		.uleb128 0x1d
 7459 019d 01       		.byte	0x1
 7460 019e 31       		.uleb128 0x31
 7461 019f 13       		.uleb128 0x13
 7462 01a0 11       		.uleb128 0x11
 7463 01a1 01       		.uleb128 0x1
 7464 01a2 12       		.uleb128 0x12
 7465 01a3 06       		.uleb128 0x6
 7466 01a4 58       		.uleb128 0x58
 7467 01a5 0B       		.uleb128 0xb
 7468 01a6 59       		.uleb128 0x59
 7469 01a7 05       		.uleb128 0x5
 7470 01a8 01       		.uleb128 0x1
 7471 01a9 13       		.uleb128 0x13
 7472 01aa 00       		.byte	0
 7473 01ab 00       		.byte	0
 7474 01ac 1E       		.uleb128 0x1e
 7475 01ad 05       		.uleb128 0x5
 7476 01ae 00       		.byte	0
 7477 01af 31       		.uleb128 0x31
 7478 01b0 13       		.uleb128 0x13
 7479 01b1 02       		.uleb128 0x2
 7480 01b2 18       		.uleb128 0x18
 7481 01b3 00       		.byte	0
 7482 01b4 00       		.byte	0
 7483 01b5 1F       		.uleb128 0x1f
 7484 01b6 34       		.uleb128 0x34
 7485 01b7 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 199


 7486 01b8 31       		.uleb128 0x31
 7487 01b9 13       		.uleb128 0x13
 7488 01ba 02       		.uleb128 0x2
 7489 01bb 18       		.uleb128 0x18
 7490 01bc 00       		.byte	0
 7491 01bd 00       		.byte	0
 7492 01be 20       		.uleb128 0x20
 7493 01bf 2E       		.uleb128 0x2e
 7494 01c0 01       		.byte	0x1
 7495 01c1 3F       		.uleb128 0x3f
 7496 01c2 19       		.uleb128 0x19
 7497 01c3 03       		.uleb128 0x3
 7498 01c4 0E       		.uleb128 0xe
 7499 01c5 3A       		.uleb128 0x3a
 7500 01c6 0B       		.uleb128 0xb
 7501 01c7 3B       		.uleb128 0x3b
 7502 01c8 05       		.uleb128 0x5
 7503 01c9 27       		.uleb128 0x27
 7504 01ca 19       		.uleb128 0x19
 7505 01cb 49       		.uleb128 0x49
 7506 01cc 13       		.uleb128 0x13
 7507 01cd 11       		.uleb128 0x11
 7508 01ce 01       		.uleb128 0x1
 7509 01cf 12       		.uleb128 0x12
 7510 01d0 06       		.uleb128 0x6
 7511 01d1 40       		.uleb128 0x40
 7512 01d2 18       		.uleb128 0x18
 7513 01d3 9742     		.uleb128 0x2117
 7514 01d5 19       		.uleb128 0x19
 7515 01d6 01       		.uleb128 0x1
 7516 01d7 13       		.uleb128 0x13
 7517 01d8 00       		.byte	0
 7518 01d9 00       		.byte	0
 7519 01da 21       		.uleb128 0x21
 7520 01db 2E       		.uleb128 0x2e
 7521 01dc 01       		.byte	0x1
 7522 01dd 3F       		.uleb128 0x3f
 7523 01de 19       		.uleb128 0x19
 7524 01df 03       		.uleb128 0x3
 7525 01e0 0E       		.uleb128 0xe
 7526 01e1 3A       		.uleb128 0x3a
 7527 01e2 0B       		.uleb128 0xb
 7528 01e3 3B       		.uleb128 0x3b
 7529 01e4 05       		.uleb128 0x5
 7530 01e5 27       		.uleb128 0x27
 7531 01e6 19       		.uleb128 0x19
 7532 01e7 11       		.uleb128 0x11
 7533 01e8 01       		.uleb128 0x1
 7534 01e9 12       		.uleb128 0x12
 7535 01ea 06       		.uleb128 0x6
 7536 01eb 40       		.uleb128 0x40
 7537 01ec 18       		.uleb128 0x18
 7538 01ed 9742     		.uleb128 0x2117
 7539 01ef 19       		.uleb128 0x19
 7540 01f0 01       		.uleb128 0x1
 7541 01f1 13       		.uleb128 0x13
 7542 01f2 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 200


 7543 01f3 00       		.byte	0
 7544 01f4 22       		.uleb128 0x22
 7545 01f5 2E       		.uleb128 0x2e
 7546 01f6 01       		.byte	0x1
 7547 01f7 03       		.uleb128 0x3
 7548 01f8 0E       		.uleb128 0xe
 7549 01f9 3A       		.uleb128 0x3a
 7550 01fa 0B       		.uleb128 0xb
 7551 01fb 3B       		.uleb128 0x3b
 7552 01fc 05       		.uleb128 0x5
 7553 01fd 27       		.uleb128 0x27
 7554 01fe 19       		.uleb128 0x19
 7555 01ff 11       		.uleb128 0x11
 7556 0200 01       		.uleb128 0x1
 7557 0201 12       		.uleb128 0x12
 7558 0202 06       		.uleb128 0x6
 7559 0203 40       		.uleb128 0x40
 7560 0204 18       		.uleb128 0x18
 7561 0205 9642     		.uleb128 0x2116
 7562 0207 19       		.uleb128 0x19
 7563 0208 01       		.uleb128 0x1
 7564 0209 13       		.uleb128 0x13
 7565 020a 00       		.byte	0
 7566 020b 00       		.byte	0
 7567 020c 23       		.uleb128 0x23
 7568 020d 34       		.uleb128 0x34
 7569 020e 00       		.byte	0
 7570 020f 03       		.uleb128 0x3
 7571 0210 08       		.uleb128 0x8
 7572 0211 3A       		.uleb128 0x3a
 7573 0212 0B       		.uleb128 0xb
 7574 0213 3B       		.uleb128 0x3b
 7575 0214 05       		.uleb128 0x5
 7576 0215 49       		.uleb128 0x49
 7577 0216 13       		.uleb128 0x13
 7578 0217 02       		.uleb128 0x2
 7579 0218 18       		.uleb128 0x18
 7580 0219 00       		.byte	0
 7581 021a 00       		.byte	0
 7582 021b 24       		.uleb128 0x24
 7583 021c 0B       		.uleb128 0xb
 7584 021d 01       		.byte	0x1
 7585 021e 11       		.uleb128 0x11
 7586 021f 01       		.uleb128 0x1
 7587 0220 12       		.uleb128 0x12
 7588 0221 06       		.uleb128 0x6
 7589 0222 01       		.uleb128 0x1
 7590 0223 13       		.uleb128 0x13
 7591 0224 00       		.byte	0
 7592 0225 00       		.byte	0
 7593 0226 25       		.uleb128 0x25
 7594 0227 2E       		.uleb128 0x2e
 7595 0228 01       		.byte	0x1
 7596 0229 03       		.uleb128 0x3
 7597 022a 0E       		.uleb128 0xe
 7598 022b 3A       		.uleb128 0x3a
 7599 022c 0B       		.uleb128 0xb
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 201


 7600 022d 3B       		.uleb128 0x3b
 7601 022e 05       		.uleb128 0x5
 7602 022f 27       		.uleb128 0x27
 7603 0230 19       		.uleb128 0x19
 7604 0231 49       		.uleb128 0x49
 7605 0232 13       		.uleb128 0x13
 7606 0233 11       		.uleb128 0x11
 7607 0234 01       		.uleb128 0x1
 7608 0235 12       		.uleb128 0x12
 7609 0236 06       		.uleb128 0x6
 7610 0237 40       		.uleb128 0x40
 7611 0238 18       		.uleb128 0x18
 7612 0239 9742     		.uleb128 0x2117
 7613 023b 19       		.uleb128 0x19
 7614 023c 01       		.uleb128 0x1
 7615 023d 13       		.uleb128 0x13
 7616 023e 00       		.byte	0
 7617 023f 00       		.byte	0
 7618 0240 26       		.uleb128 0x26
 7619 0241 2E       		.uleb128 0x2e
 7620 0242 01       		.byte	0x1
 7621 0243 03       		.uleb128 0x3
 7622 0244 0E       		.uleb128 0xe
 7623 0245 3A       		.uleb128 0x3a
 7624 0246 0B       		.uleb128 0xb
 7625 0247 3B       		.uleb128 0x3b
 7626 0248 05       		.uleb128 0x5
 7627 0249 27       		.uleb128 0x27
 7628 024a 19       		.uleb128 0x19
 7629 024b 11       		.uleb128 0x11
 7630 024c 01       		.uleb128 0x1
 7631 024d 12       		.uleb128 0x12
 7632 024e 06       		.uleb128 0x6
 7633 024f 40       		.uleb128 0x40
 7634 0250 18       		.uleb128 0x18
 7635 0251 9742     		.uleb128 0x2117
 7636 0253 19       		.uleb128 0x19
 7637 0254 01       		.uleb128 0x1
 7638 0255 13       		.uleb128 0x13
 7639 0256 00       		.byte	0
 7640 0257 00       		.byte	0
 7641 0258 27       		.uleb128 0x27
 7642 0259 34       		.uleb128 0x34
 7643 025a 00       		.byte	0
 7644 025b 03       		.uleb128 0x3
 7645 025c 0E       		.uleb128 0xe
 7646 025d 3A       		.uleb128 0x3a
 7647 025e 0B       		.uleb128 0xb
 7648 025f 3B       		.uleb128 0x3b
 7649 0260 0B       		.uleb128 0xb
 7650 0261 49       		.uleb128 0x49
 7651 0262 13       		.uleb128 0x13
 7652 0263 02       		.uleb128 0x2
 7653 0264 18       		.uleb128 0x18
 7654 0265 00       		.byte	0
 7655 0266 00       		.byte	0
 7656 0267 28       		.uleb128 0x28
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 202


 7657 0268 34       		.uleb128 0x34
 7658 0269 00       		.byte	0
 7659 026a 03       		.uleb128 0x3
 7660 026b 0E       		.uleb128 0xe
 7661 026c 3A       		.uleb128 0x3a
 7662 026d 0B       		.uleb128 0xb
 7663 026e 3B       		.uleb128 0x3b
 7664 026f 0B       		.uleb128 0xb
 7665 0270 49       		.uleb128 0x49
 7666 0271 13       		.uleb128 0x13
 7667 0272 3F       		.uleb128 0x3f
 7668 0273 19       		.uleb128 0x19
 7669 0274 02       		.uleb128 0x2
 7670 0275 18       		.uleb128 0x18
 7671 0276 00       		.byte	0
 7672 0277 00       		.byte	0
 7673 0278 00       		.byte	0
 7674              		.section	.debug_aranges,"",%progbits
 7675 0000 7C010000 		.4byte	0x17c
 7676 0004 0200     		.2byte	0x2
 7677 0006 00000000 		.4byte	.Ldebug_info0
 7678 000a 04       		.byte	0x4
 7679 000b 00       		.byte	0
 7680 000c 0000     		.2byte	0
 7681 000e 0000     		.2byte	0
 7682 0010 00000000 		.4byte	.LFB1
 7683 0014 68010000 		.4byte	.LFE1-.LFB1
 7684 0018 00000000 		.4byte	.LFB2
 7685 001c E8000000 		.4byte	.LFE2-.LFB2
 7686 0020 00000000 		.4byte	.LFB3
 7687 0024 E4000000 		.4byte	.LFE3-.LFB3
 7688 0028 00000000 		.4byte	.LFB4
 7689 002c 84000000 		.4byte	.LFE4-.LFB4
 7690 0030 00000000 		.4byte	.LFB5
 7691 0034 34000000 		.4byte	.LFE5-.LFB5
 7692 0038 00000000 		.4byte	.LFB6
 7693 003c 40010000 		.4byte	.LFE6-.LFB6
 7694 0040 00000000 		.4byte	.LFB7
 7695 0044 F0000000 		.4byte	.LFE7-.LFB7
 7696 0048 00000000 		.4byte	.LFB8
 7697 004c 64000000 		.4byte	.LFE8-.LFB8
 7698 0050 00000000 		.4byte	.LFB9
 7699 0054 9C000000 		.4byte	.LFE9-.LFB9
 7700 0058 00000000 		.4byte	.LFB10
 7701 005c BC000000 		.4byte	.LFE10-.LFB10
 7702 0060 00000000 		.4byte	.LFB11
 7703 0064 64000000 		.4byte	.LFE11-.LFB11
 7704 0068 00000000 		.4byte	.LFB12
 7705 006c 18000000 		.4byte	.LFE12-.LFB12
 7706 0070 00000000 		.4byte	.LFB13
 7707 0074 1C000000 		.4byte	.LFE13-.LFB13
 7708 0078 00000000 		.4byte	.LFB14
 7709 007c 0C010000 		.4byte	.LFE14-.LFB14
 7710 0080 00000000 		.4byte	.LFB15
 7711 0084 24000000 		.4byte	.LFE15-.LFB15
 7712 0088 00000000 		.4byte	.LFB16
 7713 008c 2C000000 		.4byte	.LFE16-.LFB16
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 203


 7714 0090 00000000 		.4byte	.LFB17
 7715 0094 18000000 		.4byte	.LFE17-.LFB17
 7716 0098 00000000 		.4byte	.LFB18
 7717 009c F8000000 		.4byte	.LFE18-.LFB18
 7718 00a0 00000000 		.4byte	.LFB19
 7719 00a4 80010000 		.4byte	.LFE19-.LFB19
 7720 00a8 00000000 		.4byte	.LFB20
 7721 00ac A0000000 		.4byte	.LFE20-.LFB20
 7722 00b0 00000000 		.4byte	.LFB21
 7723 00b4 8C000000 		.4byte	.LFE21-.LFB21
 7724 00b8 00000000 		.4byte	.LFB22
 7725 00bc AC000000 		.4byte	.LFE22-.LFB22
 7726 00c0 00000000 		.4byte	.LFB23
 7727 00c4 B8000000 		.4byte	.LFE23-.LFB23
 7728 00c8 00000000 		.4byte	.LFB24
 7729 00cc B4000000 		.4byte	.LFE24-.LFB24
 7730 00d0 00000000 		.4byte	.LFB25
 7731 00d4 34000000 		.4byte	.LFE25-.LFB25
 7732 00d8 00000000 		.4byte	.LFB26
 7733 00dc A0000000 		.4byte	.LFE26-.LFB26
 7734 00e0 00000000 		.4byte	.LFB27
 7735 00e4 18000000 		.4byte	.LFE27-.LFB27
 7736 00e8 00000000 		.4byte	.LFB28
 7737 00ec 2C000000 		.4byte	.LFE28-.LFB28
 7738 00f0 00000000 		.4byte	.LFB29
 7739 00f4 24000000 		.4byte	.LFE29-.LFB29
 7740 00f8 00000000 		.4byte	.LFB30
 7741 00fc 0E000000 		.4byte	.LFE30-.LFB30
 7742 0100 00000000 		.4byte	.LFB31
 7743 0104 96000000 		.4byte	.LFE31-.LFB31
 7744 0108 00000000 		.4byte	.LFB32
 7745 010c 7C000000 		.4byte	.LFE32-.LFB32
 7746 0110 00000000 		.4byte	.LFB33
 7747 0114 74000000 		.4byte	.LFE33-.LFB33
 7748 0118 00000000 		.4byte	.LFB34
 7749 011c 6C000000 		.4byte	.LFE34-.LFB34
 7750 0120 00000000 		.4byte	.LFB35
 7751 0124 64000000 		.4byte	.LFE35-.LFB35
 7752 0128 00000000 		.4byte	.LFB36
 7753 012c 16010000 		.4byte	.LFE36-.LFB36
 7754 0130 00000000 		.4byte	.LFB37
 7755 0134 38000000 		.4byte	.LFE37-.LFB37
 7756 0138 00000000 		.4byte	.LFB38
 7757 013c 38000000 		.4byte	.LFE38-.LFB38
 7758 0140 00000000 		.4byte	.LFB39
 7759 0144 1E000000 		.4byte	.LFE39-.LFB39
 7760 0148 00000000 		.4byte	.LFB40
 7761 014c 48000000 		.4byte	.LFE40-.LFB40
 7762 0150 00000000 		.4byte	.LFB41
 7763 0154 20000000 		.4byte	.LFE41-.LFB41
 7764 0158 00000000 		.4byte	.LFB42
 7765 015c F0000000 		.4byte	.LFE42-.LFB42
 7766 0160 00000000 		.4byte	.LFB43
 7767 0164 DC000000 		.4byte	.LFE43-.LFB43
 7768 0168 00000000 		.4byte	.LFB44
 7769 016c 30000000 		.4byte	.LFE44-.LFB44
 7770 0170 00000000 		.4byte	.LFB45
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 204


 7771 0174 28000000 		.4byte	.LFE45-.LFB45
 7772 0178 00000000 		.4byte	0
 7773 017c 00000000 		.4byte	0
 7774              		.section	.debug_ranges,"",%progbits
 7775              	.Ldebug_ranges0:
 7776 0000 00000000 		.4byte	.LFB1
 7777 0004 68010000 		.4byte	.LFE1
 7778 0008 00000000 		.4byte	.LFB2
 7779 000c E8000000 		.4byte	.LFE2
 7780 0010 00000000 		.4byte	.LFB3
 7781 0014 E4000000 		.4byte	.LFE3
 7782 0018 00000000 		.4byte	.LFB4
 7783 001c 84000000 		.4byte	.LFE4
 7784 0020 00000000 		.4byte	.LFB5
 7785 0024 34000000 		.4byte	.LFE5
 7786 0028 00000000 		.4byte	.LFB6
 7787 002c 40010000 		.4byte	.LFE6
 7788 0030 00000000 		.4byte	.LFB7
 7789 0034 F0000000 		.4byte	.LFE7
 7790 0038 00000000 		.4byte	.LFB8
 7791 003c 64000000 		.4byte	.LFE8
 7792 0040 00000000 		.4byte	.LFB9
 7793 0044 9C000000 		.4byte	.LFE9
 7794 0048 00000000 		.4byte	.LFB10
 7795 004c BC000000 		.4byte	.LFE10
 7796 0050 00000000 		.4byte	.LFB11
 7797 0054 64000000 		.4byte	.LFE11
 7798 0058 00000000 		.4byte	.LFB12
 7799 005c 18000000 		.4byte	.LFE12
 7800 0060 00000000 		.4byte	.LFB13
 7801 0064 1C000000 		.4byte	.LFE13
 7802 0068 00000000 		.4byte	.LFB14
 7803 006c 0C010000 		.4byte	.LFE14
 7804 0070 00000000 		.4byte	.LFB15
 7805 0074 24000000 		.4byte	.LFE15
 7806 0078 00000000 		.4byte	.LFB16
 7807 007c 2C000000 		.4byte	.LFE16
 7808 0080 00000000 		.4byte	.LFB17
 7809 0084 18000000 		.4byte	.LFE17
 7810 0088 00000000 		.4byte	.LFB18
 7811 008c F8000000 		.4byte	.LFE18
 7812 0090 00000000 		.4byte	.LFB19
 7813 0094 80010000 		.4byte	.LFE19
 7814 0098 00000000 		.4byte	.LFB20
 7815 009c A0000000 		.4byte	.LFE20
 7816 00a0 00000000 		.4byte	.LFB21
 7817 00a4 8C000000 		.4byte	.LFE21
 7818 00a8 00000000 		.4byte	.LFB22
 7819 00ac AC000000 		.4byte	.LFE22
 7820 00b0 00000000 		.4byte	.LFB23
 7821 00b4 B8000000 		.4byte	.LFE23
 7822 00b8 00000000 		.4byte	.LFB24
 7823 00bc B4000000 		.4byte	.LFE24
 7824 00c0 00000000 		.4byte	.LFB25
 7825 00c4 34000000 		.4byte	.LFE25
 7826 00c8 00000000 		.4byte	.LFB26
 7827 00cc A0000000 		.4byte	.LFE26
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 205


 7828 00d0 00000000 		.4byte	.LFB27
 7829 00d4 18000000 		.4byte	.LFE27
 7830 00d8 00000000 		.4byte	.LFB28
 7831 00dc 2C000000 		.4byte	.LFE28
 7832 00e0 00000000 		.4byte	.LFB29
 7833 00e4 24000000 		.4byte	.LFE29
 7834 00e8 00000000 		.4byte	.LFB30
 7835 00ec 0E000000 		.4byte	.LFE30
 7836 00f0 00000000 		.4byte	.LFB31
 7837 00f4 96000000 		.4byte	.LFE31
 7838 00f8 00000000 		.4byte	.LFB32
 7839 00fc 7C000000 		.4byte	.LFE32
 7840 0100 00000000 		.4byte	.LFB33
 7841 0104 74000000 		.4byte	.LFE33
 7842 0108 00000000 		.4byte	.LFB34
 7843 010c 6C000000 		.4byte	.LFE34
 7844 0110 00000000 		.4byte	.LFB35
 7845 0114 64000000 		.4byte	.LFE35
 7846 0118 00000000 		.4byte	.LFB36
 7847 011c 16010000 		.4byte	.LFE36
 7848 0120 00000000 		.4byte	.LFB37
 7849 0124 38000000 		.4byte	.LFE37
 7850 0128 00000000 		.4byte	.LFB38
 7851 012c 38000000 		.4byte	.LFE38
 7852 0130 00000000 		.4byte	.LFB39
 7853 0134 1E000000 		.4byte	.LFE39
 7854 0138 00000000 		.4byte	.LFB40
 7855 013c 48000000 		.4byte	.LFE40
 7856 0140 00000000 		.4byte	.LFB41
 7857 0144 20000000 		.4byte	.LFE41
 7858 0148 00000000 		.4byte	.LFB42
 7859 014c F0000000 		.4byte	.LFE42
 7860 0150 00000000 		.4byte	.LFB43
 7861 0154 DC000000 		.4byte	.LFE43
 7862 0158 00000000 		.4byte	.LFB44
 7863 015c 30000000 		.4byte	.LFE44
 7864 0160 00000000 		.4byte	.LFB45
 7865 0164 28000000 		.4byte	.LFE45
 7866 0168 00000000 		.4byte	0
 7867 016c 00000000 		.4byte	0
 7868              		.section	.debug_macro,"",%progbits
 7869              	.Ldebug_macro0:
 7870 0000 0400     		.2byte	0x4
 7871 0002 02       		.byte	0x2
 7872 0003 00000000 		.4byte	.Ldebug_line0
 7873 0007 07       		.byte	0x7
 7874 0008 00000000 		.4byte	.Ldebug_macro1
 7875 000c 03       		.byte	0x3
 7876 000d 00       		.uleb128 0
 7877 000e 01       		.uleb128 0x1
 7878              		.file 9 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\stdlib.h"
 7879 000f 03       		.byte	0x3
 7880 0010 43       		.uleb128 0x43
 7881 0011 09       		.uleb128 0x9
 7882 0012 05       		.byte	0x5
 7883 0013 08       		.uleb128 0x8
 7884 0014 9C720000 		.4byte	.LASF355
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 206


 7885              		.file 10 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\machine\\ieeefp.h"
 7886 0018 03       		.byte	0x3
 7887 0019 0A       		.uleb128 0xa
 7888 001a 0A       		.uleb128 0xa
 7889 001b 05       		.byte	0x5
 7890 001c 3C       		.uleb128 0x3c
 7891 001d 015B0000 		.4byte	.LASF356
 7892 0021 04       		.byte	0x4
 7893              		.file 11 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\_ansi.h"
 7894 0022 03       		.byte	0x3
 7895 0023 0B       		.uleb128 0xb
 7896 0024 0B       		.uleb128 0xb
 7897 0025 05       		.byte	0x5
 7898 0026 0D       		.uleb128 0xd
 7899 0027 94520000 		.4byte	.LASF357
 7900              		.file 12 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\newlib.h"
 7901 002b 03       		.byte	0x3
 7902 002c 0F       		.uleb128 0xf
 7903 002d 0C       		.uleb128 0xc
 7904 002e 07       		.byte	0x7
 7905 002f 00000000 		.4byte	.Ldebug_macro2
 7906 0033 04       		.byte	0x4
 7907              		.file 13 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\config.h"
 7908 0034 03       		.byte	0x3
 7909 0035 10       		.uleb128 0x10
 7910 0036 0D       		.uleb128 0xd
 7911 0037 05       		.byte	0x5
 7912 0038 02       		.uleb128 0x2
 7913 0039 9D4D0000 		.4byte	.LASF372
 7914 003d 03       		.byte	0x3
 7915 003e 04       		.uleb128 0x4
 7916 003f 0A       		.uleb128 0xa
 7917 0040 04       		.byte	0x4
 7918              		.file 14 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\features.h"
 7919 0041 03       		.byte	0x3
 7920 0042 05       		.uleb128 0x5
 7921 0043 0E       		.uleb128 0xe
 7922 0044 07       		.byte	0x7
 7923 0045 00000000 		.4byte	.Ldebug_macro3
 7924 0049 04       		.byte	0x4
 7925 004a 07       		.byte	0x7
 7926 004b 00000000 		.4byte	.Ldebug_macro4
 7927 004f 04       		.byte	0x4
 7928 0050 07       		.byte	0x7
 7929 0051 00000000 		.4byte	.Ldebug_macro5
 7930 0055 04       		.byte	0x4
 7931 0056 07       		.byte	0x7
 7932 0057 00000000 		.4byte	.Ldebug_macro6
 7933 005b 03       		.byte	0x3
 7934 005c 10       		.uleb128 0x10
 7935 005d 03       		.uleb128 0x3
 7936 005e 07       		.byte	0x7
 7937 005f 00000000 		.4byte	.Ldebug_macro7
 7938 0063 04       		.byte	0x4
 7939              		.file 15 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\reent.h"
 7940 0064 03       		.byte	0x3
 7941 0065 12       		.uleb128 0x12
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 207


 7942 0066 0F       		.uleb128 0xf
 7943 0067 05       		.byte	0x5
 7944 0068 0B       		.uleb128 0xb
 7945 0069 79560000 		.4byte	.LASF451
 7946 006d 03       		.byte	0x3
 7947 006e 0D       		.uleb128 0xd
 7948 006f 0B       		.uleb128 0xb
 7949 0070 04       		.byte	0x4
 7950 0071 03       		.byte	0x3
 7951 0072 0E       		.uleb128 0xe
 7952 0073 03       		.uleb128 0x3
 7953 0074 07       		.byte	0x7
 7954 0075 00000000 		.4byte	.Ldebug_macro8
 7955 0079 04       		.byte	0x4
 7956              		.file 16 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\_types.h"
 7957 007a 03       		.byte	0x3
 7958 007b 0F       		.uleb128 0xf
 7959 007c 10       		.uleb128 0x10
 7960 007d 05       		.byte	0x5
 7961 007e 0A       		.uleb128 0xa
 7962 007f 46310000 		.4byte	.LASF465
 7963              		.file 17 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\machine\\_types.h"
 7964 0083 03       		.byte	0x3
 7965 0084 0C       		.uleb128 0xc
 7966 0085 11       		.uleb128 0x11
 7967 0086 05       		.byte	0x5
 7968 0087 06       		.uleb128 0x6
 7969 0088 CD5A0000 		.4byte	.LASF466
 7970 008c 03       		.byte	0x3
 7971 008d 07       		.uleb128 0x7
 7972 008e 04       		.uleb128 0x4
 7973 008f 07       		.byte	0x7
 7974 0090 00000000 		.4byte	.Ldebug_macro9
 7975 0094 04       		.byte	0x4
 7976 0095 04       		.byte	0x4
 7977              		.file 18 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\lock.h"
 7978 0096 03       		.byte	0x3
 7979 0097 0D       		.uleb128 0xd
 7980 0098 12       		.uleb128 0x12
 7981 0099 07       		.byte	0x7
 7982 009a 00000000 		.4byte	.Ldebug_macro10
 7983 009e 04       		.byte	0x4
 7984 009f 07       		.byte	0x7
 7985 00a0 00000000 		.4byte	.Ldebug_macro11
 7986 00a4 03       		.byte	0x3
 7987 00a5 43       		.uleb128 0x43
 7988 00a6 03       		.uleb128 0x3
 7989 00a7 07       		.byte	0x7
 7990 00a8 00000000 		.4byte	.Ldebug_macro12
 7991 00ac 04       		.byte	0x4
 7992 00ad 04       		.byte	0x4
 7993 00ae 07       		.byte	0x7
 7994 00af 00000000 		.4byte	.Ldebug_macro13
 7995 00b3 04       		.byte	0x4
 7996              		.file 19 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\cdefs.h"
 7997 00b4 03       		.byte	0x3
 7998 00b5 13       		.uleb128 0x13
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 208


 7999 00b6 13       		.uleb128 0x13
 8000 00b7 05       		.byte	0x5
 8001 00b8 29       		.uleb128 0x29
 8002 00b9 42840000 		.4byte	.LASF551
 8003 00bd 03       		.byte	0x3
 8004 00be 2D       		.uleb128 0x2d
 8005 00bf 03       		.uleb128 0x3
 8006 00c0 04       		.byte	0x4
 8007 00c1 07       		.byte	0x7
 8008 00c2 00000000 		.4byte	.Ldebug_macro14
 8009 00c6 04       		.byte	0x4
 8010              		.file 20 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\machine\\stdlib.h"
 8011 00c7 03       		.byte	0x3
 8012 00c8 14       		.uleb128 0x14
 8013 00c9 14       		.uleb128 0x14
 8014 00ca 05       		.byte	0x5
 8015 00cb 02       		.uleb128 0x2
 8016 00cc E2240000 		.4byte	.LASF651
 8017 00d0 04       		.byte	0x4
 8018              		.file 21 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\alloca.h"
 8019 00d1 03       		.byte	0x3
 8020 00d2 16       		.uleb128 0x16
 8021 00d3 15       		.uleb128 0x15
 8022 00d4 07       		.byte	0x7
 8023 00d5 00000000 		.4byte	.Ldebug_macro15
 8024 00d9 04       		.byte	0x4
 8025 00da 07       		.byte	0x7
 8026 00db 00000000 		.4byte	.Ldebug_macro16
 8027 00df 04       		.byte	0x4
 8028              		.file 22 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\string.h"
 8029 00e0 03       		.byte	0x3
 8030 00e1 44       		.uleb128 0x44
 8031 00e2 16       		.uleb128 0x16
 8032 00e3 07       		.byte	0x7
 8033 00e4 00000000 		.4byte	.Ldebug_macro17
 8034 00e8 03       		.byte	0x3
 8035 00e9 11       		.uleb128 0x11
 8036 00ea 03       		.uleb128 0x3
 8037 00eb 07       		.byte	0x7
 8038 00ec 00000000 		.4byte	.Ldebug_macro18
 8039 00f0 04       		.byte	0x4
 8040              		.file 23 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\string.h"
 8041 00f1 03       		.byte	0x3
 8042 00f2 A601     		.uleb128 0xa6
 8043 00f4 17       		.uleb128 0x17
 8044 00f5 04       		.byte	0x4
 8045 00f6 04       		.byte	0x4
 8046 00f7 05       		.byte	0x5
 8047 00f8 49       		.uleb128 0x49
 8048 00f9 FF7C0000 		.4byte	.LASF662
 8049              		.file 24 "FreeRTOS/include/FreeRTOS.h"
 8050 00fd 03       		.byte	0x3
 8051 00fe 4C       		.uleb128 0x4c
 8052 00ff 18       		.uleb128 0x18
 8053 0100 05       		.byte	0x5
 8054 0101 43       		.uleb128 0x43
 8055 0102 66610000 		.4byte	.LASF663
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 209


 8056 0106 03       		.byte	0x3
 8057 0107 48       		.uleb128 0x48
 8058 0108 03       		.uleb128 0x3
 8059 0109 04       		.byte	0x4
 8060              		.file 25 "c:\\gnu tools arm embedded\\4.9 2015q1\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stdint.
 8061 010a 03       		.byte	0x3
 8062 010b 57       		.uleb128 0x57
 8063 010c 19       		.uleb128 0x19
 8064 010d 03       		.byte	0x3
 8065 010e 09       		.uleb128 0x9
 8066 010f 05       		.uleb128 0x5
 8067 0110 05       		.byte	0x5
 8068 0111 0A       		.uleb128 0xa
 8069 0112 53900000 		.4byte	.LASF664
 8070              		.file 26 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\_intsup.h"
 8071 0116 03       		.byte	0x3
 8072 0117 0D       		.uleb128 0xd
 8073 0118 1A       		.uleb128 0x1a
 8074 0119 07       		.byte	0x7
 8075 011a 00000000 		.4byte	.Ldebug_macro19
 8076 011e 04       		.byte	0x4
 8077 011f 07       		.byte	0x7
 8078 0120 00000000 		.4byte	.Ldebug_macro20
 8079 0124 04       		.byte	0x4
 8080 0125 05       		.byte	0x5
 8081 0126 0D       		.uleb128 0xd
 8082 0127 C8060000 		.4byte	.LASF742
 8083 012b 04       		.byte	0x4
 8084              		.file 27 "config/FreeRTOSConfig.h"
 8085 012c 03       		.byte	0x3
 8086 012d 5E       		.uleb128 0x5e
 8087 012e 1B       		.uleb128 0x1b
 8088 012f 07       		.byte	0x7
 8089 0130 00000000 		.4byte	.Ldebug_macro21
 8090 0134 04       		.byte	0x4
 8091 0135 03       		.byte	0x3
 8092 0136 61       		.uleb128 0x61
 8093 0137 06       		.uleb128 0x6
 8094 0138 07       		.byte	0x7
 8095 0139 00000000 		.4byte	.Ldebug_macro22
 8096 013d 04       		.byte	0x4
 8097              		.file 28 "FreeRTOS/include/portable.h"
 8098 013e 03       		.byte	0x3
 8099 013f 64       		.uleb128 0x64
 8100 0140 1C       		.uleb128 0x1c
 8101 0141 05       		.byte	0x5
 8102 0142 47       		.uleb128 0x47
 8103 0143 80260000 		.4byte	.LASF796
 8104 0147 03       		.byte	0x3
 8105 0148 C401     		.uleb128 0xc4
 8106 014a 02       		.uleb128 0x2
 8107 014b 07       		.byte	0x7
 8108 014c 00000000 		.4byte	.Ldebug_macro23
 8109 0150 04       		.byte	0x4
 8110 0151 07       		.byte	0x7
 8111 0152 00000000 		.4byte	.Ldebug_macro24
 8112              		.file 29 "FreeRTOS/include/mpu_wrappers.h"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 210


 8113 0156 03       		.byte	0x3
 8114 0157 E002     		.uleb128 0x160
 8115 0159 1D       		.uleb128 0x1d
 8116 015a 07       		.byte	0x7
 8117 015b 00000000 		.4byte	.Ldebug_macro25
 8118 015f 04       		.byte	0x4
 8119 0160 04       		.byte	0x4
 8120 0161 07       		.byte	0x7
 8121 0162 00000000 		.4byte	.Ldebug_macro26
 8122 0166 04       		.byte	0x4
 8123 0167 03       		.byte	0x3
 8124 0168 4D       		.uleb128 0x4d
 8125 0169 08       		.uleb128 0x8
 8126 016a 05       		.byte	0x5
 8127 016b 44       		.uleb128 0x44
 8128 016c 38530000 		.4byte	.LASF957
 8129 0170 03       		.byte	0x3
 8130 0171 4A       		.uleb128 0x4a
 8131 0172 07       		.uleb128 0x7
 8132 0173 07       		.byte	0x7
 8133 0174 00000000 		.4byte	.Ldebug_macro27
 8134 0178 04       		.byte	0x4
 8135 0179 07       		.byte	0x7
 8136 017a 00000000 		.4byte	.Ldebug_macro28
 8137 017e 04       		.byte	0x4
 8138              		.file 30 "FreeRTOS/include/timers.h"
 8139 017f 03       		.byte	0x3
 8140 0180 4E       		.uleb128 0x4e
 8141 0181 1E       		.uleb128 0x1e
 8142 0182 05       		.byte	0x5
 8143 0183 44       		.uleb128 0x44
 8144 0184 A20C0000 		.4byte	.LASF990
 8145 0188 03       		.byte	0x3
 8146 0189 4C       		.uleb128 0x4c
 8147 018a 08       		.uleb128 0x8
 8148 018b 04       		.byte	0x4
 8149 018c 07       		.byte	0x7
 8150 018d 00000000 		.4byte	.Ldebug_macro29
 8151 0191 04       		.byte	0x4
 8152              		.file 31 "FreeRTOS/include/StackMacros.h"
 8153 0192 03       		.byte	0x3
 8154 0193 4F       		.uleb128 0x4f
 8155 0194 1F       		.uleb128 0x1f
 8156 0195 07       		.byte	0x7
 8157 0196 00000000 		.4byte	.Ldebug_macro30
 8158 019a 04       		.byte	0x4
 8159 019b 06       		.byte	0x6
 8160 019c 55       		.uleb128 0x55
 8161 019d C66D0000 		.4byte	.LASF1016
 8162 01a1 05       		.byte	0x5
 8163 01a2 69       		.uleb128 0x69
 8164 01a3 E4310000 		.4byte	.LASF1017
 8165 01a7 05       		.byte	0x5
 8166 01a8 70       		.uleb128 0x70
 8167 01a9 8F840000 		.4byte	.LASF1018
 8168 01ad 05       		.byte	0x5
 8169 01ae FD01     		.uleb128 0xfd
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 211


 8170 01b0 980D0000 		.4byte	.LASF1019
 8171 01b4 05       		.byte	0x5
 8172 01b5 8202     		.uleb128 0x102
 8173 01b7 EB170000 		.4byte	.LASF1020
 8174 01bb 05       		.byte	0x5
 8175 01bc 8302     		.uleb128 0x103
 8176 01be A0320000 		.4byte	.LASF1021
 8177 01c2 05       		.byte	0x5
 8178 01c3 8402     		.uleb128 0x104
 8179 01c5 2D1A0000 		.4byte	.LASF1022
 8180 01c9 05       		.byte	0x5
 8181 01ca 8502     		.uleb128 0x105
 8182 01cc 4B050000 		.4byte	.LASF1023
 8183 01d0 05       		.byte	0x5
 8184 01d1 B802     		.uleb128 0x138
 8185 01d3 82390000 		.4byte	.LASF1024
 8186 01d7 05       		.byte	0x5
 8187 01d8 BC02     		.uleb128 0x13c
 8188 01da CE810000 		.4byte	.LASF1025
 8189 01de 05       		.byte	0x5
 8190 01df CB02     		.uleb128 0x14b
 8191 01e1 FC3E0000 		.4byte	.LASF1026
 8192 01e5 05       		.byte	0x5
 8193 01e6 D902     		.uleb128 0x159
 8194 01e8 602A0000 		.4byte	.LASF1027
 8195 01ec 05       		.byte	0x5
 8196 01ed ED02     		.uleb128 0x16d
 8197 01ef 8E8A0000 		.4byte	.LASF1028
 8198 01f3 05       		.byte	0x5
 8199 01f4 F902     		.uleb128 0x179
 8200 01f6 4D170000 		.4byte	.LASF1029
 8201 01fa 05       		.byte	0x5
 8202 01fb 8603     		.uleb128 0x186
 8203 01fd 44430000 		.4byte	.LASF1030
 8204 0201 04       		.byte	0x4
 8205 0202 00       		.byte	0
 8206              		.section	.debug_macro,"G",%progbits,wm4.0.1834ce015d70b8127b1e5f7bc96e3d8e,comdat
 8207              	.Ldebug_macro1:
 8208 0000 0400     		.2byte	0x4
 8209 0002 00       		.byte	0
 8210 0003 05       		.byte	0x5
 8211 0004 00       		.uleb128 0
 8212 0005 28830000 		.4byte	.LASF0
 8213 0009 05       		.byte	0x5
 8214 000a 00       		.uleb128 0
 8215 000b 76090000 		.4byte	.LASF1
 8216 000f 05       		.byte	0x5
 8217 0010 00       		.uleb128 0
 8218 0011 C53C0000 		.4byte	.LASF2
 8219 0015 05       		.byte	0x5
 8220 0016 00       		.uleb128 0
 8221 0017 26710000 		.4byte	.LASF3
 8222 001b 05       		.byte	0x5
 8223 001c 00       		.uleb128 0
 8224 001d 681D0000 		.4byte	.LASF4
 8225 0021 05       		.byte	0x5
 8226 0022 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 212


 8227 0023 85930000 		.4byte	.LASF5
 8228 0027 05       		.byte	0x5
 8229 0028 00       		.uleb128 0
 8230 0029 A07A0000 		.4byte	.LASF6
 8231 002d 05       		.byte	0x5
 8232 002e 00       		.uleb128 0
 8233 002f A6210000 		.4byte	.LASF7
 8234 0033 05       		.byte	0x5
 8235 0034 00       		.uleb128 0
 8236 0035 0E390000 		.4byte	.LASF8
 8237 0039 05       		.byte	0x5
 8238 003a 00       		.uleb128 0
 8239 003b DA420000 		.4byte	.LASF9
 8240 003f 05       		.byte	0x5
 8241 0040 00       		.uleb128 0
 8242 0041 72930000 		.4byte	.LASF10
 8243 0045 05       		.byte	0x5
 8244 0046 00       		.uleb128 0
 8245 0047 CD030000 		.4byte	.LASF11
 8246 004b 05       		.byte	0x5
 8247 004c 00       		.uleb128 0
 8248 004d 896A0000 		.4byte	.LASF12
 8249 0051 05       		.byte	0x5
 8250 0052 00       		.uleb128 0
 8251 0053 9F870000 		.4byte	.LASF13
 8252 0057 05       		.byte	0x5
 8253 0058 00       		.uleb128 0
 8254 0059 D6180000 		.4byte	.LASF14
 8255 005d 05       		.byte	0x5
 8256 005e 00       		.uleb128 0
 8257 005f 34050000 		.4byte	.LASF15
 8258 0063 05       		.byte	0x5
 8259 0064 00       		.uleb128 0
 8260 0065 AA230000 		.4byte	.LASF16
 8261 0069 05       		.byte	0x5
 8262 006a 00       		.uleb128 0
 8263 006b EA1F0000 		.4byte	.LASF17
 8264 006f 05       		.byte	0x5
 8265 0070 00       		.uleb128 0
 8266 0071 FB190000 		.4byte	.LASF18
 8267 0075 05       		.byte	0x5
 8268 0076 00       		.uleb128 0
 8269 0077 07260000 		.4byte	.LASF19
 8270 007b 05       		.byte	0x5
 8271 007c 00       		.uleb128 0
 8272 007d 4E760000 		.4byte	.LASF20
 8273 0081 05       		.byte	0x5
 8274 0082 00       		.uleb128 0
 8275 0083 2D4E0000 		.4byte	.LASF21
 8276 0087 05       		.byte	0x5
 8277 0088 00       		.uleb128 0
 8278 0089 745E0000 		.4byte	.LASF22
 8279 008d 05       		.byte	0x5
 8280 008e 00       		.uleb128 0
 8281 008f 31650000 		.4byte	.LASF23
 8282 0093 05       		.byte	0x5
 8283 0094 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 213


 8284 0095 F30E0000 		.4byte	.LASF24
 8285 0099 05       		.byte	0x5
 8286 009a 00       		.uleb128 0
 8287 009b 7D060000 		.4byte	.LASF25
 8288 009f 05       		.byte	0x5
 8289 00a0 00       		.uleb128 0
 8290 00a1 11520000 		.4byte	.LASF26
 8291 00a5 05       		.byte	0x5
 8292 00a6 00       		.uleb128 0
 8293 00a7 5E590000 		.4byte	.LASF27
 8294 00ab 05       		.byte	0x5
 8295 00ac 00       		.uleb128 0
 8296 00ad 55160000 		.4byte	.LASF28
 8297 00b1 05       		.byte	0x5
 8298 00b2 00       		.uleb128 0
 8299 00b3 97060000 		.4byte	.LASF29
 8300 00b7 05       		.byte	0x5
 8301 00b8 00       		.uleb128 0
 8302 00b9 EA2E0000 		.4byte	.LASF30
 8303 00bd 05       		.byte	0x5
 8304 00be 00       		.uleb128 0
 8305 00bf 4E260000 		.4byte	.LASF31
 8306 00c3 05       		.byte	0x5
 8307 00c4 00       		.uleb128 0
 8308 00c5 210A0000 		.4byte	.LASF32
 8309 00c9 05       		.byte	0x5
 8310 00ca 00       		.uleb128 0
 8311 00cb 37710000 		.4byte	.LASF33
 8312 00cf 05       		.byte	0x5
 8313 00d0 00       		.uleb128 0
 8314 00d1 D86F0000 		.4byte	.LASF34
 8315 00d5 05       		.byte	0x5
 8316 00d6 00       		.uleb128 0
 8317 00d7 FB680000 		.4byte	.LASF35
 8318 00db 05       		.byte	0x5
 8319 00dc 00       		.uleb128 0
 8320 00dd 68180000 		.4byte	.LASF36
 8321 00e1 05       		.byte	0x5
 8322 00e2 00       		.uleb128 0
 8323 00e3 075A0000 		.4byte	.LASF37
 8324 00e7 05       		.byte	0x5
 8325 00e8 00       		.uleb128 0
 8326 00e9 F1060000 		.4byte	.LASF38
 8327 00ed 05       		.byte	0x5
 8328 00ee 00       		.uleb128 0
 8329 00ef 1C080000 		.4byte	.LASF39
 8330 00f3 05       		.byte	0x5
 8331 00f4 00       		.uleb128 0
 8332 00f5 D6930000 		.4byte	.LASF40
 8333 00f9 05       		.byte	0x5
 8334 00fa 00       		.uleb128 0
 8335 00fb FD4D0000 		.4byte	.LASF41
 8336 00ff 05       		.byte	0x5
 8337 0100 00       		.uleb128 0
 8338 0101 A92F0000 		.4byte	.LASF42
 8339 0105 05       		.byte	0x5
 8340 0106 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 214


 8341 0107 EA3C0000 		.4byte	.LASF43
 8342 010b 05       		.byte	0x5
 8343 010c 00       		.uleb128 0
 8344 010d 94850000 		.4byte	.LASF44
 8345 0111 05       		.byte	0x5
 8346 0112 00       		.uleb128 0
 8347 0113 B01B0000 		.4byte	.LASF45
 8348 0117 05       		.byte	0x5
 8349 0118 00       		.uleb128 0
 8350 0119 6A160000 		.4byte	.LASF46
 8351 011d 05       		.byte	0x5
 8352 011e 00       		.uleb128 0
 8353 011f 4A8C0000 		.4byte	.LASF47
 8354 0123 05       		.byte	0x5
 8355 0124 00       		.uleb128 0
 8356 0125 7F630000 		.4byte	.LASF48
 8357 0129 05       		.byte	0x5
 8358 012a 00       		.uleb128 0
 8359 012b F7950000 		.4byte	.LASF49
 8360 012f 05       		.byte	0x5
 8361 0130 00       		.uleb128 0
 8362 0131 9A130000 		.4byte	.LASF50
 8363 0135 05       		.byte	0x5
 8364 0136 00       		.uleb128 0
 8365 0137 6B3E0000 		.4byte	.LASF51
 8366 013b 05       		.byte	0x5
 8367 013c 00       		.uleb128 0
 8368 013d 8E700000 		.4byte	.LASF52
 8369 0141 05       		.byte	0x5
 8370 0142 00       		.uleb128 0
 8371 0143 2D410000 		.4byte	.LASF53
 8372 0147 05       		.byte	0x5
 8373 0148 00       		.uleb128 0
 8374 0149 4F150000 		.4byte	.LASF54
 8375 014d 05       		.byte	0x5
 8376 014e 00       		.uleb128 0
 8377 014f 94670000 		.4byte	.LASF55
 8378 0153 05       		.byte	0x5
 8379 0154 00       		.uleb128 0
 8380 0155 414A0000 		.4byte	.LASF56
 8381 0159 05       		.byte	0x5
 8382 015a 00       		.uleb128 0
 8383 015b FF090000 		.4byte	.LASF57
 8384 015f 05       		.byte	0x5
 8385 0160 00       		.uleb128 0
 8386 0161 0E3E0000 		.4byte	.LASF58
 8387 0165 05       		.byte	0x5
 8388 0166 00       		.uleb128 0
 8389 0167 B5890000 		.4byte	.LASF59
 8390 016b 05       		.byte	0x5
 8391 016c 00       		.uleb128 0
 8392 016d AC1F0000 		.4byte	.LASF60
 8393 0171 05       		.byte	0x5
 8394 0172 00       		.uleb128 0
 8395 0173 59270000 		.4byte	.LASF61
 8396 0177 05       		.byte	0x5
 8397 0178 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 215


 8398 0179 C8110000 		.4byte	.LASF62
 8399 017d 05       		.byte	0x5
 8400 017e 00       		.uleb128 0
 8401 017f 58750000 		.4byte	.LASF63
 8402 0183 05       		.byte	0x5
 8403 0184 00       		.uleb128 0
 8404 0185 4B3A0000 		.4byte	.LASF64
 8405 0189 05       		.byte	0x5
 8406 018a 00       		.uleb128 0
 8407 018b 922D0000 		.4byte	.LASF65
 8408 018f 05       		.byte	0x5
 8409 0190 00       		.uleb128 0
 8410 0191 37270000 		.4byte	.LASF66
 8411 0195 05       		.byte	0x5
 8412 0196 00       		.uleb128 0
 8413 0197 3D100000 		.4byte	.LASF67
 8414 019b 05       		.byte	0x5
 8415 019c 00       		.uleb128 0
 8416 019d 287E0000 		.4byte	.LASF68
 8417 01a1 05       		.byte	0x5
 8418 01a2 00       		.uleb128 0
 8419 01a3 DE400000 		.4byte	.LASF69
 8420 01a7 05       		.byte	0x5
 8421 01a8 00       		.uleb128 0
 8422 01a9 7C800000 		.4byte	.LASF70
 8423 01ad 05       		.byte	0x5
 8424 01ae 00       		.uleb128 0
 8425 01af 66010000 		.4byte	.LASF71
 8426 01b3 05       		.byte	0x5
 8427 01b4 00       		.uleb128 0
 8428 01b5 EF140000 		.4byte	.LASF72
 8429 01b9 05       		.byte	0x5
 8430 01ba 00       		.uleb128 0
 8431 01bb 29480000 		.4byte	.LASF73
 8432 01bf 05       		.byte	0x5
 8433 01c0 00       		.uleb128 0
 8434 01c1 326D0000 		.4byte	.LASF74
 8435 01c5 05       		.byte	0x5
 8436 01c6 00       		.uleb128 0
 8437 01c7 6B8B0000 		.4byte	.LASF75
 8438 01cb 05       		.byte	0x5
 8439 01cc 00       		.uleb128 0
 8440 01cd 01750000 		.4byte	.LASF76
 8441 01d1 05       		.byte	0x5
 8442 01d2 00       		.uleb128 0
 8443 01d3 0A6E0000 		.4byte	.LASF77
 8444 01d7 05       		.byte	0x5
 8445 01d8 00       		.uleb128 0
 8446 01d9 4C110000 		.4byte	.LASF78
 8447 01dd 05       		.byte	0x5
 8448 01de 00       		.uleb128 0
 8449 01df 8E010000 		.4byte	.LASF79
 8450 01e3 05       		.byte	0x5
 8451 01e4 00       		.uleb128 0
 8452 01e5 B06F0000 		.4byte	.LASF80
 8453 01e9 05       		.byte	0x5
 8454 01ea 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 216


 8455 01eb C9150000 		.4byte	.LASF81
 8456 01ef 05       		.byte	0x5
 8457 01f0 00       		.uleb128 0
 8458 01f1 36890000 		.4byte	.LASF82
 8459 01f5 05       		.byte	0x5
 8460 01f6 00       		.uleb128 0
 8461 01f7 45330000 		.4byte	.LASF83
 8462 01fb 05       		.byte	0x5
 8463 01fc 00       		.uleb128 0
 8464 01fd BE170000 		.4byte	.LASF84
 8465 0201 05       		.byte	0x5
 8466 0202 00       		.uleb128 0
 8467 0203 DB100000 		.4byte	.LASF85
 8468 0207 05       		.byte	0x5
 8469 0208 00       		.uleb128 0
 8470 0209 BD610000 		.4byte	.LASF86
 8471 020d 05       		.byte	0x5
 8472 020e 00       		.uleb128 0
 8473 020f 1B2E0000 		.4byte	.LASF87
 8474 0213 05       		.byte	0x5
 8475 0214 00       		.uleb128 0
 8476 0215 01400000 		.4byte	.LASF88
 8477 0219 05       		.byte	0x5
 8478 021a 00       		.uleb128 0
 8479 021b 0C230000 		.4byte	.LASF89
 8480 021f 05       		.byte	0x5
 8481 0220 00       		.uleb128 0
 8482 0221 3A480000 		.4byte	.LASF90
 8483 0225 05       		.byte	0x5
 8484 0226 00       		.uleb128 0
 8485 0227 6E0B0000 		.4byte	.LASF91
 8486 022b 05       		.byte	0x5
 8487 022c 00       		.uleb128 0
 8488 022d 9D5C0000 		.4byte	.LASF92
 8489 0231 05       		.byte	0x5
 8490 0232 00       		.uleb128 0
 8491 0233 D4600000 		.4byte	.LASF93
 8492 0237 05       		.byte	0x5
 8493 0238 00       		.uleb128 0
 8494 0239 0D2D0000 		.4byte	.LASF94
 8495 023d 05       		.byte	0x5
 8496 023e 00       		.uleb128 0
 8497 023f A6910000 		.4byte	.LASF95
 8498 0243 05       		.byte	0x5
 8499 0244 00       		.uleb128 0
 8500 0245 C0760000 		.4byte	.LASF96
 8501 0249 05       		.byte	0x5
 8502 024a 00       		.uleb128 0
 8503 024b CF0E0000 		.4byte	.LASF97
 8504 024f 05       		.byte	0x5
 8505 0250 00       		.uleb128 0
 8506 0251 566D0000 		.4byte	.LASF98
 8507 0255 05       		.byte	0x5
 8508 0256 00       		.uleb128 0
 8509 0257 AB760000 		.4byte	.LASF99
 8510 025b 05       		.byte	0x5
 8511 025c 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 217


 8512 025d 33950000 		.4byte	.LASF100
 8513 0261 05       		.byte	0x5
 8514 0262 00       		.uleb128 0
 8515 0263 0D080000 		.4byte	.LASF101
 8516 0267 05       		.byte	0x5
 8517 0268 00       		.uleb128 0
 8518 0269 6A690000 		.4byte	.LASF102
 8519 026d 05       		.byte	0x5
 8520 026e 00       		.uleb128 0
 8521 026f A8790000 		.4byte	.LASF103
 8522 0273 05       		.byte	0x5
 8523 0274 00       		.uleb128 0
 8524 0275 CF490000 		.4byte	.LASF104
 8525 0279 05       		.byte	0x5
 8526 027a 00       		.uleb128 0
 8527 027b EB2D0000 		.4byte	.LASF105
 8528 027f 05       		.byte	0x5
 8529 0280 00       		.uleb128 0
 8530 0281 D95F0000 		.4byte	.LASF106
 8531 0285 05       		.byte	0x5
 8532 0286 00       		.uleb128 0
 8533 0287 02630000 		.4byte	.LASF107
 8534 028b 05       		.byte	0x5
 8535 028c 00       		.uleb128 0
 8536 028d 34600000 		.4byte	.LASF108
 8537 0291 05       		.byte	0x5
 8538 0292 00       		.uleb128 0
 8539 0293 BA160000 		.4byte	.LASF109
 8540 0297 05       		.byte	0x5
 8541 0298 00       		.uleb128 0
 8542 0299 84000000 		.4byte	.LASF110
 8543 029d 05       		.byte	0x5
 8544 029e 00       		.uleb128 0
 8545 029f 9A360000 		.4byte	.LASF111
 8546 02a3 05       		.byte	0x5
 8547 02a4 00       		.uleb128 0
 8548 02a5 72220000 		.4byte	.LASF112
 8549 02a9 05       		.byte	0x5
 8550 02aa 00       		.uleb128 0
 8551 02ab 14050000 		.4byte	.LASF113
 8552 02af 05       		.byte	0x5
 8553 02b0 00       		.uleb128 0
 8554 02b1 13950000 		.4byte	.LASF114
 8555 02b5 05       		.byte	0x5
 8556 02b6 00       		.uleb128 0
 8557 02b7 15140000 		.4byte	.LASF115
 8558 02bb 05       		.byte	0x5
 8559 02bc 00       		.uleb128 0
 8560 02bd 346F0000 		.4byte	.LASF116
 8561 02c1 05       		.byte	0x5
 8562 02c2 00       		.uleb128 0
 8563 02c3 C2550000 		.4byte	.LASF117
 8564 02c7 05       		.byte	0x5
 8565 02c8 00       		.uleb128 0
 8566 02c9 9A200000 		.4byte	.LASF118
 8567 02cd 05       		.byte	0x5
 8568 02ce 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 218


 8569 02cf B4800000 		.4byte	.LASF119
 8570 02d3 05       		.byte	0x5
 8571 02d4 00       		.uleb128 0
 8572 02d5 88560000 		.4byte	.LASF120
 8573 02d9 05       		.byte	0x5
 8574 02da 00       		.uleb128 0
 8575 02db 06550000 		.4byte	.LASF121
 8576 02df 05       		.byte	0x5
 8577 02e0 00       		.uleb128 0
 8578 02e1 2E490000 		.4byte	.LASF122
 8579 02e5 05       		.byte	0x5
 8580 02e6 00       		.uleb128 0
 8581 02e7 09430000 		.4byte	.LASF123
 8582 02eb 05       		.byte	0x5
 8583 02ec 00       		.uleb128 0
 8584 02ed DE550000 		.4byte	.LASF124
 8585 02f1 05       		.byte	0x5
 8586 02f2 00       		.uleb128 0
 8587 02f3 EF540000 		.4byte	.LASF125
 8588 02f7 05       		.byte	0x5
 8589 02f8 00       		.uleb128 0
 8590 02f9 BB650000 		.4byte	.LASF126
 8591 02fd 05       		.byte	0x5
 8592 02fe 00       		.uleb128 0
 8593 02ff C2180000 		.4byte	.LASF127
 8594 0303 05       		.byte	0x5
 8595 0304 00       		.uleb128 0
 8596 0305 2F200000 		.4byte	.LASF128
 8597 0309 05       		.byte	0x5
 8598 030a 00       		.uleb128 0
 8599 030b 3C1B0000 		.4byte	.LASF129
 8600 030f 05       		.byte	0x5
 8601 0310 00       		.uleb128 0
 8602 0311 46470000 		.4byte	.LASF130
 8603 0315 05       		.byte	0x5
 8604 0316 00       		.uleb128 0
 8605 0317 6E240000 		.4byte	.LASF131
 8606 031b 05       		.byte	0x5
 8607 031c 00       		.uleb128 0
 8608 031d 4F2E0000 		.4byte	.LASF132
 8609 0321 05       		.byte	0x5
 8610 0322 00       		.uleb128 0
 8611 0323 BC2C0000 		.4byte	.LASF133
 8612 0327 05       		.byte	0x5
 8613 0328 00       		.uleb128 0
 8614 0329 DC060000 		.4byte	.LASF134
 8615 032d 05       		.byte	0x5
 8616 032e 00       		.uleb128 0
 8617 032f 6A7A0000 		.4byte	.LASF135
 8618 0333 05       		.byte	0x5
 8619 0334 00       		.uleb128 0
 8620 0335 5E000000 		.4byte	.LASF136
 8621 0339 05       		.byte	0x5
 8622 033a 00       		.uleb128 0
 8623 033b B0950000 		.4byte	.LASF137
 8624 033f 05       		.byte	0x5
 8625 0340 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 219


 8626 0341 D0750000 		.4byte	.LASF138
 8627 0345 05       		.byte	0x5
 8628 0346 00       		.uleb128 0
 8629 0347 2E610000 		.4byte	.LASF139
 8630 034b 05       		.byte	0x5
 8631 034c 00       		.uleb128 0
 8632 034d AA200000 		.4byte	.LASF140
 8633 0351 05       		.byte	0x5
 8634 0352 00       		.uleb128 0
 8635 0353 5D220000 		.4byte	.LASF141
 8636 0357 05       		.byte	0x5
 8637 0358 00       		.uleb128 0
 8638 0359 65050000 		.4byte	.LASF142
 8639 035d 05       		.byte	0x5
 8640 035e 00       		.uleb128 0
 8641 035f 4C7E0000 		.4byte	.LASF143
 8642 0363 05       		.byte	0x5
 8643 0364 00       		.uleb128 0
 8644 0365 C88C0000 		.4byte	.LASF144
 8645 0369 05       		.byte	0x5
 8646 036a 00       		.uleb128 0
 8647 036b 73140000 		.4byte	.LASF145
 8648 036f 05       		.byte	0x5
 8649 0370 00       		.uleb128 0
 8650 0371 D03A0000 		.4byte	.LASF146
 8651 0375 05       		.byte	0x5
 8652 0376 00       		.uleb128 0
 8653 0377 2D540000 		.4byte	.LASF147
 8654 037b 05       		.byte	0x5
 8655 037c 00       		.uleb128 0
 8656 037d EF340000 		.4byte	.LASF148
 8657 0381 05       		.byte	0x5
 8658 0382 00       		.uleb128 0
 8659 0383 C58F0000 		.4byte	.LASF149
 8660 0387 05       		.byte	0x5
 8661 0388 00       		.uleb128 0
 8662 0389 A8720000 		.4byte	.LASF150
 8663 038d 05       		.byte	0x5
 8664 038e 00       		.uleb128 0
 8665 038f D8070000 		.4byte	.LASF151
 8666 0393 05       		.byte	0x5
 8667 0394 00       		.uleb128 0
 8668 0395 2F8A0000 		.4byte	.LASF152
 8669 0399 05       		.byte	0x5
 8670 039a 00       		.uleb128 0
 8671 039b 25180000 		.4byte	.LASF153
 8672 039f 05       		.byte	0x5
 8673 03a0 00       		.uleb128 0
 8674 03a1 C23B0000 		.4byte	.LASF154
 8675 03a5 05       		.byte	0x5
 8676 03a6 00       		.uleb128 0
 8677 03a7 F6220000 		.4byte	.LASF155
 8678 03ab 05       		.byte	0x5
 8679 03ac 00       		.uleb128 0
 8680 03ad 70530000 		.4byte	.LASF156
 8681 03b1 05       		.byte	0x5
 8682 03b2 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 220


 8683 03b3 20000000 		.4byte	.LASF157
 8684 03b7 05       		.byte	0x5
 8685 03b8 00       		.uleb128 0
 8686 03b9 E72C0000 		.4byte	.LASF158
 8687 03bd 05       		.byte	0x5
 8688 03be 00       		.uleb128 0
 8689 03bf 06780000 		.4byte	.LASF159
 8690 03c3 05       		.byte	0x5
 8691 03c4 00       		.uleb128 0
 8692 03c5 A2410000 		.4byte	.LASF160
 8693 03c9 05       		.byte	0x5
 8694 03ca 00       		.uleb128 0
 8695 03cb C1440000 		.4byte	.LASF161
 8696 03cf 05       		.byte	0x5
 8697 03d0 00       		.uleb128 0
 8698 03d1 96620000 		.4byte	.LASF162
 8699 03d5 05       		.byte	0x5
 8700 03d6 00       		.uleb128 0
 8701 03d7 10320000 		.4byte	.LASF163
 8702 03db 05       		.byte	0x5
 8703 03dc 00       		.uleb128 0
 8704 03dd E3120000 		.4byte	.LASF164
 8705 03e1 05       		.byte	0x5
 8706 03e2 00       		.uleb128 0
 8707 03e3 8A180000 		.4byte	.LASF165
 8708 03e7 05       		.byte	0x5
 8709 03e8 00       		.uleb128 0
 8710 03e9 03840000 		.4byte	.LASF166
 8711 03ed 05       		.byte	0x5
 8712 03ee 00       		.uleb128 0
 8713 03ef 823D0000 		.4byte	.LASF167
 8714 03f3 05       		.byte	0x5
 8715 03f4 00       		.uleb128 0
 8716 03f5 97810000 		.4byte	.LASF168
 8717 03f9 05       		.byte	0x5
 8718 03fa 00       		.uleb128 0
 8719 03fb 3B320000 		.4byte	.LASF169
 8720 03ff 05       		.byte	0x5
 8721 0400 00       		.uleb128 0
 8722 0401 4F100000 		.4byte	.LASF170
 8723 0405 05       		.byte	0x5
 8724 0406 00       		.uleb128 0
 8725 0407 33030000 		.4byte	.LASF171
 8726 040b 05       		.byte	0x5
 8727 040c 00       		.uleb128 0
 8728 040d 8E650000 		.4byte	.LASF172
 8729 0411 05       		.byte	0x5
 8730 0412 00       		.uleb128 0
 8731 0413 D3570000 		.4byte	.LASF173
 8732 0417 05       		.byte	0x5
 8733 0418 00       		.uleb128 0
 8734 0419 B2060000 		.4byte	.LASF174
 8735 041d 05       		.byte	0x5
 8736 041e 00       		.uleb128 0
 8737 041f 33620000 		.4byte	.LASF175
 8738 0423 05       		.byte	0x5
 8739 0424 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 221


 8740 0425 9B1A0000 		.4byte	.LASF176
 8741 0429 05       		.byte	0x5
 8742 042a 00       		.uleb128 0
 8743 042b 8C8B0000 		.4byte	.LASF177
 8744 042f 05       		.byte	0x5
 8745 0430 00       		.uleb128 0
 8746 0431 27360000 		.4byte	.LASF178
 8747 0435 05       		.byte	0x5
 8748 0436 00       		.uleb128 0
 8749 0437 6B5A0000 		.4byte	.LASF179
 8750 043b 05       		.byte	0x5
 8751 043c 00       		.uleb128 0
 8752 043d 09150000 		.4byte	.LASF180
 8753 0441 05       		.byte	0x5
 8754 0442 00       		.uleb128 0
 8755 0443 17740000 		.4byte	.LASF181
 8756 0447 05       		.byte	0x5
 8757 0448 00       		.uleb128 0
 8758 0449 92760000 		.4byte	.LASF182
 8759 044d 05       		.byte	0x5
 8760 044e 00       		.uleb128 0
 8761 044f 3F020000 		.4byte	.LASF183
 8762 0453 05       		.byte	0x5
 8763 0454 00       		.uleb128 0
 8764 0455 5A410000 		.4byte	.LASF184
 8765 0459 05       		.byte	0x5
 8766 045a 00       		.uleb128 0
 8767 045b 8B750000 		.4byte	.LASF185
 8768 045f 05       		.byte	0x5
 8769 0460 00       		.uleb128 0
 8770 0461 4B010000 		.4byte	.LASF186
 8771 0465 05       		.byte	0x5
 8772 0466 00       		.uleb128 0
 8773 0467 9F8F0000 		.4byte	.LASF187
 8774 046b 05       		.byte	0x5
 8775 046c 00       		.uleb128 0
 8776 046d C5710000 		.4byte	.LASF188
 8777 0471 05       		.byte	0x5
 8778 0472 00       		.uleb128 0
 8779 0473 CA900000 		.4byte	.LASF189
 8780 0477 05       		.byte	0x5
 8781 0478 00       		.uleb128 0
 8782 0479 940E0000 		.4byte	.LASF190
 8783 047d 05       		.byte	0x5
 8784 047e 00       		.uleb128 0
 8785 047f 404B0000 		.4byte	.LASF191
 8786 0483 05       		.byte	0x5
 8787 0484 00       		.uleb128 0
 8788 0485 F3280000 		.4byte	.LASF192
 8789 0489 05       		.byte	0x5
 8790 048a 00       		.uleb128 0
 8791 048b 29290000 		.4byte	.LASF193
 8792 048f 05       		.byte	0x5
 8793 0490 00       		.uleb128 0
 8794 0491 75710000 		.4byte	.LASF194
 8795 0495 05       		.byte	0x5
 8796 0496 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 222


 8797 0497 58360000 		.4byte	.LASF195
 8798 049b 05       		.byte	0x5
 8799 049c 00       		.uleb128 0
 8800 049d FE1C0000 		.4byte	.LASF196
 8801 04a1 05       		.byte	0x5
 8802 04a2 00       		.uleb128 0
 8803 04a3 B1640000 		.4byte	.LASF197
 8804 04a7 05       		.byte	0x5
 8805 04a8 00       		.uleb128 0
 8806 04a9 BB050000 		.4byte	.LASF198
 8807 04ad 05       		.byte	0x5
 8808 04ae 00       		.uleb128 0
 8809 04af 80200000 		.4byte	.LASF199
 8810 04b3 05       		.byte	0x5
 8811 04b4 00       		.uleb128 0
 8812 04b5 433E0000 		.4byte	.LASF200
 8813 04b9 05       		.byte	0x5
 8814 04ba 00       		.uleb128 0
 8815 04bb 25530000 		.4byte	.LASF201
 8816 04bf 05       		.byte	0x5
 8817 04c0 00       		.uleb128 0
 8818 04c1 A1600000 		.4byte	.LASF202
 8819 04c5 05       		.byte	0x5
 8820 04c6 00       		.uleb128 0
 8821 04c7 B4120000 		.4byte	.LASF203
 8822 04cb 05       		.byte	0x5
 8823 04cc 00       		.uleb128 0
 8824 04cd 8E4F0000 		.4byte	.LASF204
 8825 04d1 05       		.byte	0x5
 8826 04d2 00       		.uleb128 0
 8827 04d3 0C480000 		.4byte	.LASF205
 8828 04d7 05       		.byte	0x5
 8829 04d8 00       		.uleb128 0
 8830 04d9 1A4E0000 		.4byte	.LASF206
 8831 04dd 05       		.byte	0x5
 8832 04de 00       		.uleb128 0
 8833 04df E2600000 		.4byte	.LASF207
 8834 04e3 05       		.byte	0x5
 8835 04e4 00       		.uleb128 0
 8836 04e5 0C3B0000 		.4byte	.LASF208
 8837 04e9 05       		.byte	0x5
 8838 04ea 00       		.uleb128 0
 8839 04eb 87580000 		.4byte	.LASF209
 8840 04ef 05       		.byte	0x5
 8841 04f0 00       		.uleb128 0
 8842 04f1 C55B0000 		.4byte	.LASF210
 8843 04f5 05       		.byte	0x5
 8844 04f6 00       		.uleb128 0
 8845 04f7 840D0000 		.4byte	.LASF211
 8846 04fb 05       		.byte	0x5
 8847 04fc 00       		.uleb128 0
 8848 04fd CA950000 		.4byte	.LASF212
 8849 0501 05       		.byte	0x5
 8850 0502 00       		.uleb128 0
 8851 0503 E36B0000 		.4byte	.LASF213
 8852 0507 05       		.byte	0x5
 8853 0508 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 223


 8854 0509 0D680000 		.4byte	.LASF214
 8855 050d 05       		.byte	0x5
 8856 050e 00       		.uleb128 0
 8857 050f DF750000 		.4byte	.LASF215
 8858 0513 05       		.byte	0x5
 8859 0514 00       		.uleb128 0
 8860 0515 038D0000 		.4byte	.LASF216
 8861 0519 05       		.byte	0x5
 8862 051a 00       		.uleb128 0
 8863 051b 7E880000 		.4byte	.LASF217
 8864 051f 05       		.byte	0x5
 8865 0520 00       		.uleb128 0
 8866 0521 7E370000 		.4byte	.LASF218
 8867 0525 05       		.byte	0x5
 8868 0526 00       		.uleb128 0
 8869 0527 ED730000 		.4byte	.LASF219
 8870 052b 05       		.byte	0x5
 8871 052c 00       		.uleb128 0
 8872 052d 83900000 		.4byte	.LASF220
 8873 0531 05       		.byte	0x5
 8874 0532 00       		.uleb128 0
 8875 0533 88090000 		.4byte	.LASF221
 8876 0537 05       		.byte	0x5
 8877 0538 00       		.uleb128 0
 8878 0539 D1450000 		.4byte	.LASF222
 8879 053d 05       		.byte	0x5
 8880 053e 00       		.uleb128 0
 8881 053f AA860000 		.4byte	.LASF223
 8882 0543 05       		.byte	0x5
 8883 0544 00       		.uleb128 0
 8884 0545 21170000 		.4byte	.LASF224
 8885 0549 05       		.byte	0x5
 8886 054a 00       		.uleb128 0
 8887 054b AD810000 		.4byte	.LASF225
 8888 054f 05       		.byte	0x5
 8889 0550 00       		.uleb128 0
 8890 0551 1A960000 		.4byte	.LASF226
 8891 0555 05       		.byte	0x5
 8892 0556 00       		.uleb128 0
 8893 0557 FD1F0000 		.4byte	.LASF227
 8894 055b 05       		.byte	0x5
 8895 055c 00       		.uleb128 0
 8896 055d EB670000 		.4byte	.LASF228
 8897 0561 05       		.byte	0x5
 8898 0562 00       		.uleb128 0
 8899 0563 1C750000 		.4byte	.LASF229
 8900 0567 05       		.byte	0x5
 8901 0568 00       		.uleb128 0
 8902 0569 DB880000 		.4byte	.LASF230
 8903 056d 05       		.byte	0x5
 8904 056e 00       		.uleb128 0
 8905 056f EC300000 		.4byte	.LASF231
 8906 0573 05       		.byte	0x5
 8907 0574 00       		.uleb128 0
 8908 0575 4A550000 		.4byte	.LASF232
 8909 0579 05       		.byte	0x5
 8910 057a 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 224


 8911 057b 8C5E0000 		.4byte	.LASF233
 8912 057f 05       		.byte	0x5
 8913 0580 00       		.uleb128 0
 8914 0581 16060000 		.4byte	.LASF234
 8915 0585 05       		.byte	0x5
 8916 0586 00       		.uleb128 0
 8917 0587 AB150000 		.4byte	.LASF235
 8918 058b 05       		.byte	0x5
 8919 058c 00       		.uleb128 0
 8920 058d D3130000 		.4byte	.LASF236
 8921 0591 05       		.byte	0x5
 8922 0592 00       		.uleb128 0
 8923 0593 4D780000 		.4byte	.LASF237
 8924 0597 05       		.byte	0x5
 8925 0598 00       		.uleb128 0
 8926 0599 0D040000 		.4byte	.LASF238
 8927 059d 05       		.byte	0x5
 8928 059e 00       		.uleb128 0
 8929 059f 7B3B0000 		.4byte	.LASF239
 8930 05a3 05       		.byte	0x5
 8931 05a4 00       		.uleb128 0
 8932 05a5 F5890000 		.4byte	.LASF240
 8933 05a9 05       		.byte	0x5
 8934 05aa 00       		.uleb128 0
 8935 05ab 82470000 		.4byte	.LASF241
 8936 05af 05       		.byte	0x5
 8937 05b0 00       		.uleb128 0
 8938 05b1 F3130000 		.4byte	.LASF242
 8939 05b5 05       		.byte	0x5
 8940 05b6 00       		.uleb128 0
 8941 05b7 72330000 		.4byte	.LASF243
 8942 05bb 05       		.byte	0x5
 8943 05bc 00       		.uleb128 0
 8944 05bd EC570000 		.4byte	.LASF244
 8945 05c1 05       		.byte	0x5
 8946 05c2 00       		.uleb128 0
 8947 05c3 EC550000 		.4byte	.LASF245
 8948 05c7 05       		.byte	0x5
 8949 05c8 00       		.uleb128 0
 8950 05c9 570E0000 		.4byte	.LASF246
 8951 05cd 05       		.byte	0x5
 8952 05ce 00       		.uleb128 0
 8953 05cf A1100000 		.4byte	.LASF247
 8954 05d3 05       		.byte	0x5
 8955 05d4 00       		.uleb128 0
 8956 05d5 61830000 		.4byte	.LASF248
 8957 05d9 05       		.byte	0x5
 8958 05da 00       		.uleb128 0
 8959 05db D3680000 		.4byte	.LASF249
 8960 05df 05       		.byte	0x5
 8961 05e0 00       		.uleb128 0
 8962 05e1 0A020000 		.4byte	.LASF250
 8963 05e5 05       		.byte	0x5
 8964 05e6 00       		.uleb128 0
 8965 05e7 E0030000 		.4byte	.LASF251
 8966 05eb 05       		.byte	0x5
 8967 05ec 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 225


 8968 05ed D4650000 		.4byte	.LASF252
 8969 05f1 05       		.byte	0x5
 8970 05f2 00       		.uleb128 0
 8971 05f3 8B480000 		.4byte	.LASF253
 8972 05f7 05       		.byte	0x5
 8973 05f8 00       		.uleb128 0
 8974 05f9 866B0000 		.4byte	.LASF254
 8975 05fd 05       		.byte	0x5
 8976 05fe 00       		.uleb128 0
 8977 05ff 108A0000 		.4byte	.LASF255
 8978 0603 05       		.byte	0x5
 8979 0604 00       		.uleb128 0
 8980 0605 E91E0000 		.4byte	.LASF256
 8981 0609 05       		.byte	0x5
 8982 060a 00       		.uleb128 0
 8983 060b 2F3E0000 		.4byte	.LASF257
 8984 060f 05       		.byte	0x5
 8985 0610 00       		.uleb128 0
 8986 0611 E3010000 		.4byte	.LASF258
 8987 0615 05       		.byte	0x5
 8988 0616 00       		.uleb128 0
 8989 0617 DE360000 		.4byte	.LASF259
 8990 061b 05       		.byte	0x5
 8991 061c 00       		.uleb128 0
 8992 061d 271D0000 		.4byte	.LASF260
 8993 0621 05       		.byte	0x5
 8994 0622 00       		.uleb128 0
 8995 0623 BD230000 		.4byte	.LASF261
 8996 0627 05       		.byte	0x5
 8997 0628 00       		.uleb128 0
 8998 0629 50810000 		.4byte	.LASF262
 8999 062d 05       		.byte	0x5
 9000 062e 00       		.uleb128 0
 9001 062f 1B840000 		.4byte	.LASF263
 9002 0633 05       		.byte	0x5
 9003 0634 00       		.uleb128 0
 9004 0635 D6050000 		.4byte	.LASF264
 9005 0639 05       		.byte	0x5
 9006 063a 00       		.uleb128 0
 9007 063b 31660000 		.4byte	.LASF265
 9008 063f 05       		.byte	0x5
 9009 0640 00       		.uleb128 0
 9010 0641 CC800000 		.4byte	.LASF266
 9011 0645 05       		.byte	0x5
 9012 0646 00       		.uleb128 0
 9013 0647 266F0000 		.4byte	.LASF267
 9014 064b 05       		.byte	0x5
 9015 064c 00       		.uleb128 0
 9016 064d 658E0000 		.4byte	.LASF268
 9017 0651 05       		.byte	0x5
 9018 0652 00       		.uleb128 0
 9019 0653 C6300000 		.4byte	.LASF269
 9020 0657 05       		.byte	0x5
 9021 0658 00       		.uleb128 0
 9022 0659 200F0000 		.4byte	.LASF270
 9023 065d 05       		.byte	0x5
 9024 065e 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 226


 9025 065f 6F060000 		.4byte	.LASF271
 9026 0663 05       		.byte	0x5
 9027 0664 00       		.uleb128 0
 9028 0665 63660000 		.4byte	.LASF272
 9029 0669 05       		.byte	0x5
 9030 066a 00       		.uleb128 0
 9031 066b FA6B0000 		.4byte	.LASF273
 9032 066f 05       		.byte	0x5
 9033 0670 00       		.uleb128 0
 9034 0671 AD220000 		.4byte	.LASF274
 9035 0675 05       		.byte	0x5
 9036 0676 00       		.uleb128 0
 9037 0677 5A030000 		.4byte	.LASF275
 9038 067b 05       		.byte	0x5
 9039 067c 00       		.uleb128 0
 9040 067d 7A570000 		.4byte	.LASF276
 9041 0681 05       		.byte	0x5
 9042 0682 00       		.uleb128 0
 9043 0683 56480000 		.4byte	.LASF277
 9044 0687 05       		.byte	0x5
 9045 0688 00       		.uleb128 0
 9046 0689 8B0F0000 		.4byte	.LASF278
 9047 068d 05       		.byte	0x5
 9048 068e 00       		.uleb128 0
 9049 068f 88660000 		.4byte	.LASF279
 9050 0693 05       		.byte	0x5
 9051 0694 00       		.uleb128 0
 9052 0695 E30E0000 		.4byte	.LASF280
 9053 0699 05       		.byte	0x5
 9054 069a 00       		.uleb128 0
 9055 069b 2F700000 		.4byte	.LASF281
 9056 069f 05       		.byte	0x5
 9057 06a0 00       		.uleb128 0
 9058 06a1 44530000 		.4byte	.LASF282
 9059 06a5 05       		.byte	0x5
 9060 06a6 00       		.uleb128 0
 9061 06a7 35430000 		.4byte	.LASF283
 9062 06ab 05       		.byte	0x5
 9063 06ac 00       		.uleb128 0
 9064 06ad 85690000 		.4byte	.LASF284
 9065 06b1 05       		.byte	0x5
 9066 06b2 00       		.uleb128 0
 9067 06b3 396E0000 		.4byte	.LASF285
 9068 06b7 05       		.byte	0x5
 9069 06b8 00       		.uleb128 0
 9070 06b9 EE270000 		.4byte	.LASF286
 9071 06bd 05       		.byte	0x5
 9072 06be 00       		.uleb128 0
 9073 06bf BE100000 		.4byte	.LASF287
 9074 06c3 05       		.byte	0x5
 9075 06c4 00       		.uleb128 0
 9076 06c5 6A6E0000 		.4byte	.LASF288
 9077 06c9 05       		.byte	0x5
 9078 06ca 00       		.uleb128 0
 9079 06cb 783C0000 		.4byte	.LASF289
 9080 06cf 05       		.byte	0x5
 9081 06d0 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 227


 9082 06d1 BF2B0000 		.4byte	.LASF290
 9083 06d5 05       		.byte	0x5
 9084 06d6 00       		.uleb128 0
 9085 06d7 750D0000 		.4byte	.LASF291
 9086 06db 05       		.byte	0x5
 9087 06dc 00       		.uleb128 0
 9088 06dd FC160000 		.4byte	.LASF292
 9089 06e1 05       		.byte	0x5
 9090 06e2 00       		.uleb128 0
 9091 06e3 EC5E0000 		.4byte	.LASF293
 9092 06e7 05       		.byte	0x5
 9093 06e8 00       		.uleb128 0
 9094 06e9 56090000 		.4byte	.LASF294
 9095 06ed 05       		.byte	0x5
 9096 06ee 00       		.uleb128 0
 9097 06ef D7890000 		.4byte	.LASF295
 9098 06f3 05       		.byte	0x5
 9099 06f4 00       		.uleb128 0
 9100 06f5 B05A0000 		.4byte	.LASF296
 9101 06f9 05       		.byte	0x5
 9102 06fa 00       		.uleb128 0
 9103 06fb A5260000 		.4byte	.LASF297
 9104 06ff 05       		.byte	0x5
 9105 0700 00       		.uleb128 0
 9106 0701 8F150000 		.4byte	.LASF298
 9107 0705 05       		.byte	0x5
 9108 0706 00       		.uleb128 0
 9109 0707 FB790000 		.4byte	.LASF299
 9110 070b 05       		.byte	0x5
 9111 070c 00       		.uleb128 0
 9112 070d F31A0000 		.4byte	.LASF300
 9113 0711 05       		.byte	0x5
 9114 0712 00       		.uleb128 0
 9115 0713 40810000 		.4byte	.LASF301
 9116 0717 05       		.byte	0x5
 9117 0718 00       		.uleb128 0
 9118 0719 76750000 		.4byte	.LASF302
 9119 071d 05       		.byte	0x5
 9120 071e 00       		.uleb128 0
 9121 071f 67370000 		.4byte	.LASF303
 9122 0723 05       		.byte	0x5
 9123 0724 00       		.uleb128 0
 9124 0725 2D8F0000 		.4byte	.LASF304
 9125 0729 05       		.byte	0x5
 9126 072a 00       		.uleb128 0
 9127 072b 380F0000 		.4byte	.LASF305
 9128 072f 05       		.byte	0x5
 9129 0730 00       		.uleb128 0
 9130 0731 EF000000 		.4byte	.LASF306
 9131 0735 05       		.byte	0x5
 9132 0736 00       		.uleb128 0
 9133 0737 31090000 		.4byte	.LASF307
 9134 073b 05       		.byte	0x5
 9135 073c 00       		.uleb128 0
 9136 073d B5260000 		.4byte	.LASF308
 9137 0741 05       		.byte	0x5
 9138 0742 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 228


 9139 0743 666C0000 		.4byte	.LASF309
 9140 0747 05       		.byte	0x5
 9141 0748 00       		.uleb128 0
 9142 0749 8A160000 		.4byte	.LASF310
 9143 074d 05       		.byte	0x5
 9144 074e 00       		.uleb128 0
 9145 074f 6A5B0000 		.4byte	.LASF311
 9146 0753 05       		.byte	0x5
 9147 0754 00       		.uleb128 0
 9148 0755 8E420000 		.4byte	.LASF312
 9149 0759 05       		.byte	0x5
 9150 075a 00       		.uleb128 0
 9151 075b 461D0000 		.4byte	.LASF313
 9152 075f 05       		.byte	0x5
 9153 0760 00       		.uleb128 0
 9154 0761 51840000 		.4byte	.LASF314
 9155 0765 05       		.byte	0x5
 9156 0766 00       		.uleb128 0
 9157 0767 29300000 		.4byte	.LASF315
 9158 076b 05       		.byte	0x5
 9159 076c 00       		.uleb128 0
 9160 076d 90710000 		.4byte	.LASF316
 9161 0771 05       		.byte	0x5
 9162 0772 00       		.uleb128 0
 9163 0773 6D480000 		.4byte	.LASF317
 9164 0777 05       		.byte	0x5
 9165 0778 00       		.uleb128 0
 9166 0779 42280000 		.4byte	.LASF318
 9167 077d 05       		.byte	0x5
 9168 077e 00       		.uleb128 0
 9169 077f 22310000 		.4byte	.LASF319
 9170 0783 05       		.byte	0x5
 9171 0784 00       		.uleb128 0
 9172 0785 7C110000 		.4byte	.LASF320
 9173 0789 05       		.byte	0x5
 9174 078a 00       		.uleb128 0
 9175 078b 333C0000 		.4byte	.LASF321
 9176 078f 05       		.byte	0x5
 9177 0790 00       		.uleb128 0
 9178 0791 32260000 		.4byte	.LASF322
 9179 0795 05       		.byte	0x5
 9180 0796 00       		.uleb128 0
 9181 0797 7F4E0000 		.4byte	.LASF323
 9182 079b 05       		.byte	0x5
 9183 079c 00       		.uleb128 0
 9184 079d FA820000 		.4byte	.LASF324
 9185 07a1 05       		.byte	0x5
 9186 07a2 00       		.uleb128 0
 9187 07a3 A7580000 		.4byte	.LASF325
 9188 07a7 05       		.byte	0x5
 9189 07a8 00       		.uleb128 0
 9190 07a9 E5380000 		.4byte	.LASF326
 9191 07ad 05       		.byte	0x5
 9192 07ae 00       		.uleb128 0
 9193 07af 8F450000 		.4byte	.LASF327
 9194 07b3 05       		.byte	0x5
 9195 07b4 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 229


 9196 07b5 0E830000 		.4byte	.LASF328
 9197 07b9 05       		.byte	0x5
 9198 07ba 00       		.uleb128 0
 9199 07bb B3600000 		.4byte	.LASF329
 9200 07bf 05       		.byte	0x5
 9201 07c0 00       		.uleb128 0
 9202 07c1 3D900000 		.4byte	.LASF330
 9203 07c5 05       		.byte	0x5
 9204 07c6 00       		.uleb128 0
 9205 07c7 FA380000 		.4byte	.LASF331
 9206 07cb 05       		.byte	0x5
 9207 07cc 00       		.uleb128 0
 9208 07cd 815C0000 		.4byte	.LASF332
 9209 07d1 05       		.byte	0x5
 9210 07d2 00       		.uleb128 0
 9211 07d3 243A0000 		.4byte	.LASF333
 9212 07d7 05       		.byte	0x5
 9213 07d8 00       		.uleb128 0
 9214 07d9 0B070000 		.4byte	.LASF334
 9215 07dd 05       		.byte	0x5
 9216 07de 00       		.uleb128 0
 9217 07df DA5C0000 		.4byte	.LASF335
 9218 07e3 05       		.byte	0x5
 9219 07e4 00       		.uleb128 0
 9220 07e5 DF480000 		.4byte	.LASF336
 9221 07e9 05       		.byte	0x5
 9222 07ea 00       		.uleb128 0
 9223 07eb 13400000 		.4byte	.LASF337
 9224 07ef 05       		.byte	0x5
 9225 07f0 00       		.uleb128 0
 9226 07f1 248D0000 		.4byte	.LASF338
 9227 07f5 05       		.byte	0x5
 9228 07f6 00       		.uleb128 0
 9229 07f7 10860000 		.4byte	.LASF339
 9230 07fb 05       		.byte	0x5
 9231 07fc 00       		.uleb128 0
 9232 07fd C25F0000 		.4byte	.LASF340
 9233 0801 05       		.byte	0x5
 9234 0802 00       		.uleb128 0
 9235 0803 7E8D0000 		.4byte	.LASF341
 9236 0807 05       		.byte	0x5
 9237 0808 00       		.uleb128 0
 9238 0809 056F0000 		.4byte	.LASF342
 9239 080d 05       		.byte	0x5
 9240 080e 00       		.uleb128 0
 9241 080f 4C3D0000 		.4byte	.LASF343
 9242 0813 05       		.byte	0x5
 9243 0814 00       		.uleb128 0
 9244 0815 FE100000 		.4byte	.LASF344
 9245 0819 05       		.byte	0x5
 9246 081a 00       		.uleb128 0
 9247 081b FE6D0000 		.4byte	.LASF345
 9248 081f 05       		.byte	0x5
 9249 0820 00       		.uleb128 0
 9250 0821 43060000 		.4byte	.LASF346
 9251 0825 05       		.byte	0x5
 9252 0826 00       		.uleb128 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 230


 9253 0827 0B170000 		.4byte	.LASF347
 9254 082b 05       		.byte	0x5
 9255 082c 00       		.uleb128 0
 9256 082d E0560000 		.4byte	.LASF348
 9257 0831 05       		.byte	0x5
 9258 0832 00       		.uleb128 0
 9259 0833 D5320000 		.4byte	.LASF349
 9260 0837 05       		.byte	0x5
 9261 0838 00       		.uleb128 0
 9262 0839 E8950000 		.4byte	.LASF350
 9263 083d 05       		.byte	0x5
 9264 083e 00       		.uleb128 0
 9265 083f BD320000 		.4byte	.LASF351
 9266 0843 05       		.byte	0x5
 9267 0844 00       		.uleb128 0
 9268 0845 DB3E0000 		.4byte	.LASF352
 9269 0849 05       		.byte	0x5
 9270 084a 00       		.uleb128 0
 9271 084b DC6E0000 		.4byte	.LASF353
 9272 084f 05       		.byte	0x5
 9273 0850 00       		.uleb128 0
 9274 0851 FC7D0000 		.4byte	.LASF354
 9275 0855 00       		.byte	0
 9276              		.section	.debug_macro,"G",%progbits,wm4.newlib.h.8.f2807fe490bc07755df529420a1a6ce0,comdat
 9277              	.Ldebug_macro2:
 9278 0000 0400     		.2byte	0x4
 9279 0002 00       		.byte	0
 9280 0003 05       		.byte	0x5
 9281 0004 08       		.uleb128 0x8
 9282 0005 CC100000 		.4byte	.LASF358
 9283 0009 05       		.byte	0x5
 9284 000a 0E       		.uleb128 0xe
 9285 000b 75410000 		.4byte	.LASF359
 9286 000f 05       		.byte	0x5
 9287 0010 15       		.uleb128 0x15
 9288 0011 33940000 		.4byte	.LASF360
 9289 0015 05       		.byte	0x5
 9290 0016 18       		.uleb128 0x18
 9291 0017 1C7F0000 		.4byte	.LASF361
 9292 001b 05       		.byte	0x5
 9293 001c 28       		.uleb128 0x28
 9294 001d 852B0000 		.4byte	.LASF362
 9295 0021 05       		.byte	0x5
 9296 0022 32       		.uleb128 0x32
 9297 0023 E0760000 		.4byte	.LASF363
 9298 0027 05       		.byte	0x5
 9299 0028 36       		.uleb128 0x36
 9300 0029 A2480000 		.4byte	.LASF364
 9301 002d 05       		.byte	0x5
 9302 002e 39       		.uleb128 0x39
 9303 002f 21230000 		.4byte	.LASF365
 9304 0033 05       		.byte	0x5
 9305 0034 3C       		.uleb128 0x3c
 9306 0035 DA4D0000 		.4byte	.LASF366
 9307 0039 05       		.byte	0x5
 9308 003a 3F       		.uleb128 0x3f
 9309 003b 9D090000 		.4byte	.LASF367
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 231


 9310 003f 05       		.byte	0x5
 9311 0040 48       		.uleb128 0x48
 9312 0041 09560000 		.4byte	.LASF368
 9313 0045 05       		.byte	0x5
 9314 0046 4B       		.uleb128 0x4b
 9315 0047 1E600000 		.4byte	.LASF369
 9316 004b 05       		.byte	0x5
 9317 004c 4E       		.uleb128 0x4e
 9318 004d A32E0000 		.4byte	.LASF370
 9319 0051 05       		.byte	0x5
 9320 0052 51       		.uleb128 0x51
 9321 0053 825A0000 		.4byte	.LASF371
 9322 0057 00       		.byte	0
 9323              		.section	.debug_macro,"G",%progbits,wm4.features.h.22.2e382148a0560adabf236cddd4e880f4,comdat
 9324              	.Ldebug_macro3:
 9325 0000 0400     		.2byte	0x4
 9326 0002 00       		.byte	0
 9327 0003 05       		.byte	0x5
 9328 0004 16       		.uleb128 0x16
 9329 0005 92240000 		.4byte	.LASF373
 9330 0009 05       		.byte	0x5
 9331 000a 1F       		.uleb128 0x1f
 9332 000b C11A0000 		.4byte	.LASF374
 9333 000f 05       		.byte	0x5
 9334 0010 20       		.uleb128 0x20
 9335 0011 DC540000 		.4byte	.LASF375
 9336 0015 05       		.byte	0x5
 9337 0016 25       		.uleb128 0x25
 9338 0017 60120000 		.4byte	.LASF376
 9339 001b 05       		.byte	0x5
 9340 001c 2C       		.uleb128 0x2c
 9341 001d 13810000 		.4byte	.LASF377
 9342 0021 00       		.byte	0
 9343              		.section	.debug_macro,"G",%progbits,wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff,comdat
 9344              	.Ldebug_macro4:
 9345 0000 0400     		.2byte	0x4
 9346 0002 00       		.byte	0
 9347 0003 05       		.byte	0x5
 9348 0004 DC01     		.uleb128 0xdc
 9349 0006 820E0000 		.4byte	.LASF378
 9350 000a 06       		.byte	0x6
 9351 000b E201     		.uleb128 0xe2
 9352 000d 71110000 		.4byte	.LASF379
 9353 0011 05       		.byte	0x5
 9354 0012 E601     		.uleb128 0xe6
 9355 0014 885D0000 		.4byte	.LASF380
 9356 0018 05       		.byte	0x5
 9357 0019 F801     		.uleb128 0xf8
 9358 001b 85450000 		.4byte	.LASF381
 9359 001f 05       		.byte	0x5
 9360 0020 FC01     		.uleb128 0xfc
 9361 0022 965A0000 		.4byte	.LASF382
 9362 0026 05       		.byte	0x5
 9363 0027 8302     		.uleb128 0x103
 9364 0029 B9210000 		.4byte	.LASF383
 9365 002d 05       		.byte	0x5
 9366 002e 8902     		.uleb128 0x109
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 232


 9367 0030 A4010000 		.4byte	.LASF384
 9368 0034 00       		.byte	0
 9369              		.section	.debug_macro,"G",%progbits,wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51,comdat
 9370              	.Ldebug_macro5:
 9371 0000 0400     		.2byte	0x4
 9372 0002 00       		.byte	0
 9373 0003 05       		.byte	0x5
 9374 0004 17       		.uleb128 0x17
 9375 0005 05770000 		.4byte	.LASF385
 9376 0009 05       		.byte	0x5
 9377 000a 2C       		.uleb128 0x2c
 9378 000b E25B0000 		.4byte	.LASF386
 9379 000f 05       		.byte	0x5
 9380 0010 2D       		.uleb128 0x2d
 9381 0011 372D0000 		.4byte	.LASF387
 9382 0015 05       		.byte	0x5
 9383 0016 2E       		.uleb128 0x2e
 9384 0017 7A520000 		.4byte	.LASF388
 9385 001b 05       		.byte	0x5
 9386 001c 32       		.uleb128 0x32
 9387 001d F78C0000 		.4byte	.LASF389
 9388 0021 05       		.byte	0x5
 9389 0022 33       		.uleb128 0x33
 9390 0023 0A920000 		.4byte	.LASF390
 9391 0027 05       		.byte	0x5
 9392 0028 34       		.uleb128 0x34
 9393 0029 00700000 		.4byte	.LASF391
 9394 002d 05       		.byte	0x5
 9395 002e 35       		.uleb128 0x35
 9396 002f 08130000 		.4byte	.LASF392
 9397 0033 05       		.byte	0x5
 9398 0034 36       		.uleb128 0x36
 9399 0035 97230000 		.4byte	.LASF393
 9400 0039 05       		.byte	0x5
 9401 003a 37       		.uleb128 0x37
 9402 003b AE450000 		.4byte	.LASF394
 9403 003f 05       		.byte	0x5
 9404 0040 38       		.uleb128 0x38
 9405 0041 22490000 		.4byte	.LASF395
 9406 0045 05       		.byte	0x5
 9407 0046 39       		.uleb128 0x39
 9408 0047 3F830000 		.4byte	.LASF396
 9409 004b 05       		.byte	0x5
 9410 004c 40       		.uleb128 0x40
 9411 004d 24570000 		.4byte	.LASF397
 9412 0051 05       		.byte	0x5
 9413 0052 41       		.uleb128 0x41
 9414 0053 2B070000 		.4byte	.LASF398
 9415 0057 05       		.byte	0x5
 9416 0058 42       		.uleb128 0x42
 9417 0059 885B0000 		.4byte	.LASF399
 9418 005d 05       		.byte	0x5
 9419 005e 43       		.uleb128 0x43
 9420 005f EF230000 		.4byte	.LASF400
 9421 0063 05       		.byte	0x5
 9422 0064 45       		.uleb128 0x45
 9423 0065 511E0000 		.4byte	.LASF401
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 233


 9424 0069 05       		.byte	0x5
 9425 006a 46       		.uleb128 0x46
 9426 006b B50D0000 		.4byte	.LASF402
 9427 006f 05       		.byte	0x5
 9428 0070 47       		.uleb128 0x47
 9429 0071 8A6E0000 		.4byte	.LASF403
 9430 0075 05       		.byte	0x5
 9431 0076 49       		.uleb128 0x49
 9432 0077 79020000 		.4byte	.LASF404
 9433 007b 05       		.byte	0x5
 9434 007c 4C       		.uleb128 0x4c
 9435 007d 50190000 		.4byte	.LASF405
 9436 0081 05       		.byte	0x5
 9437 0082 65       		.uleb128 0x65
 9438 0083 B37A0000 		.4byte	.LASF406
 9439 0087 05       		.byte	0x5
 9440 0088 7B       		.uleb128 0x7b
 9441 0089 8E940000 		.4byte	.LASF407
 9442 008d 05       		.byte	0x5
 9443 008e 8301     		.uleb128 0x83
 9444 0090 66150000 		.4byte	.LASF408
 9445 0094 05       		.byte	0x5
 9446 0095 8401     		.uleb128 0x84
 9447 0097 DC110000 		.4byte	.LASF409
 9448 009b 00       		.byte	0
 9449              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2,comdat
 9450              	.Ldebug_macro6:
 9451 0000 0400     		.2byte	0x4
 9452 0002 00       		.byte	0
 9453 0003 05       		.byte	0x5
 9454 0004 0D       		.uleb128 0xd
 9455 0005 DF270000 		.4byte	.LASF410
 9456 0009 05       		.byte	0x5
 9457 000a 0E       		.uleb128 0xe
 9458 000b F4260000 		.4byte	.LASF411
 9459 000f 05       		.byte	0x5
 9460 0010 0F       		.uleb128 0xf
 9461 0011 21400000 		.4byte	.LASF412
 9462 0015 00       		.byte	0
 9463              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635,comdat
 9464              	.Ldebug_macro7:
 9465 0000 0400     		.2byte	0x4
 9466 0002 00       		.byte	0
 9467 0003 05       		.byte	0x5
 9468 0004 B801     		.uleb128 0xb8
 9469 0006 9F150000 		.4byte	.LASF413
 9470 000a 05       		.byte	0x5
 9471 000b B901     		.uleb128 0xb9
 9472 000d A70A0000 		.4byte	.LASF414
 9473 0011 05       		.byte	0x5
 9474 0012 BA01     		.uleb128 0xba
 9475 0014 3D2A0000 		.4byte	.LASF415
 9476 0018 05       		.byte	0x5
 9477 0019 BB01     		.uleb128 0xbb
 9478 001b 53130000 		.4byte	.LASF416
 9479 001f 05       		.byte	0x5
 9480 0020 BC01     		.uleb128 0xbc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 234


 9481 0022 AC3D0000 		.4byte	.LASF417
 9482 0026 05       		.byte	0x5
 9483 0027 BD01     		.uleb128 0xbd
 9484 0029 C60E0000 		.4byte	.LASF418
 9485 002d 05       		.byte	0x5
 9486 002e BE01     		.uleb128 0xbe
 9487 0030 D04D0000 		.4byte	.LASF419
 9488 0034 05       		.byte	0x5
 9489 0035 BF01     		.uleb128 0xbf
 9490 0037 18490000 		.4byte	.LASF420
 9491 003b 05       		.byte	0x5
 9492 003c C001     		.uleb128 0xc0
 9493 003e 246D0000 		.4byte	.LASF421
 9494 0042 05       		.byte	0x5
 9495 0043 C101     		.uleb128 0xc1
 9496 0045 CA540000 		.4byte	.LASF422
 9497 0049 05       		.byte	0x5
 9498 004a C201     		.uleb128 0xc2
 9499 004c 52660000 		.4byte	.LASF423
 9500 0050 05       		.byte	0x5
 9501 0051 C301     		.uleb128 0xc3
 9502 0053 811F0000 		.4byte	.LASF424
 9503 0057 05       		.byte	0x5
 9504 0058 C401     		.uleb128 0xc4
 9505 005a 3E180000 		.4byte	.LASF425
 9506 005e 05       		.byte	0x5
 9507 005f C501     		.uleb128 0xc5
 9508 0061 775D0000 		.4byte	.LASF426
 9509 0065 05       		.byte	0x5
 9510 0066 C601     		.uleb128 0xc6
 9511 0068 52860000 		.4byte	.LASF427
 9512 006c 05       		.byte	0x5
 9513 006d C701     		.uleb128 0xc7
 9514 006f 85720000 		.4byte	.LASF428
 9515 0073 05       		.byte	0x5
 9516 0074 CE01     		.uleb128 0xce
 9517 0076 D50D0000 		.4byte	.LASF429
 9518 007a 06       		.byte	0x6
 9519 007b EA01     		.uleb128 0xea
 9520 007d BA480000 		.4byte	.LASF430
 9521 0081 05       		.byte	0x5
 9522 0082 8702     		.uleb128 0x107
 9523 0084 178D0000 		.4byte	.LASF431
 9524 0088 05       		.byte	0x5
 9525 0089 8802     		.uleb128 0x108
 9526 008b 2A590000 		.4byte	.LASF432
 9527 008f 05       		.byte	0x5
 9528 0090 8902     		.uleb128 0x109
 9529 0092 BD5D0000 		.4byte	.LASF433
 9530 0096 05       		.byte	0x5
 9531 0097 8A02     		.uleb128 0x10a
 9532 0099 C3860000 		.4byte	.LASF434
 9533 009d 05       		.byte	0x5
 9534 009e 8B02     		.uleb128 0x10b
 9535 00a0 A36D0000 		.4byte	.LASF435
 9536 00a4 05       		.byte	0x5
 9537 00a5 8C02     		.uleb128 0x10c
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 235


 9538 00a7 924D0000 		.4byte	.LASF436
 9539 00ab 05       		.byte	0x5
 9540 00ac 8D02     		.uleb128 0x10d
 9541 00ae 4B6D0000 		.4byte	.LASF437
 9542 00b2 05       		.byte	0x5
 9543 00b3 8E02     		.uleb128 0x10e
 9544 00b5 87330000 		.4byte	.LASF438
 9545 00b9 05       		.byte	0x5
 9546 00ba 8F02     		.uleb128 0x10f
 9547 00bc 13940000 		.4byte	.LASF439
 9548 00c0 05       		.byte	0x5
 9549 00c1 9002     		.uleb128 0x110
 9550 00c3 276B0000 		.4byte	.LASF440
 9551 00c7 05       		.byte	0x5
 9552 00c8 9102     		.uleb128 0x111
 9553 00ca 765F0000 		.4byte	.LASF441
 9554 00ce 05       		.byte	0x5
 9555 00cf 9202     		.uleb128 0x112
 9556 00d1 1F0E0000 		.4byte	.LASF442
 9557 00d5 05       		.byte	0x5
 9558 00d6 9302     		.uleb128 0x113
 9559 00d8 796E0000 		.4byte	.LASF443
 9560 00dc 05       		.byte	0x5
 9561 00dd 9402     		.uleb128 0x114
 9562 00df BF590000 		.4byte	.LASF444
 9563 00e3 05       		.byte	0x5
 9564 00e4 9502     		.uleb128 0x115
 9565 00e6 20560000 		.4byte	.LASF445
 9566 00ea 06       		.byte	0x6
 9567 00eb A202     		.uleb128 0x122
 9568 00ed B0870000 		.4byte	.LASF446
 9569 00f1 06       		.byte	0x6
 9570 00f2 D702     		.uleb128 0x157
 9571 00f4 AC0C0000 		.4byte	.LASF447
 9572 00f8 06       		.byte	0x6
 9573 00f9 8D03     		.uleb128 0x18d
 9574 00fb 86100000 		.4byte	.LASF448
 9575 00ff 05       		.byte	0x5
 9576 0100 9203     		.uleb128 0x192
 9577 0102 76360000 		.4byte	.LASF449
 9578 0106 06       		.byte	0x6
 9579 0107 9803     		.uleb128 0x198
 9580 0109 32370000 		.4byte	.LASF450
 9581 010d 00       		.byte	0
 9582              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734,comdat
 9583              	.Ldebug_macro8:
 9584 0000 0400     		.2byte	0x4
 9585 0002 00       		.byte	0
 9586 0003 05       		.byte	0x5
 9587 0004 27       		.uleb128 0x27
 9588 0005 03460000 		.4byte	.LASF452
 9589 0009 05       		.byte	0x5
 9590 000a 28       		.uleb128 0x28
 9591 000b 0C610000 		.4byte	.LASF453
 9592 000f 05       		.byte	0x5
 9593 0010 2A       		.uleb128 0x2a
 9594 0011 3B3A0000 		.4byte	.LASF454
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 236


 9595 0015 05       		.byte	0x5
 9596 0016 8801     		.uleb128 0x88
 9597 0018 194A0000 		.4byte	.LASF455
 9598 001c 05       		.byte	0x5
 9599 001d 8901     		.uleb128 0x89
 9600 001f 8E440000 		.4byte	.LASF456
 9601 0023 05       		.byte	0x5
 9602 0024 8A01     		.uleb128 0x8a
 9603 0026 6E570000 		.4byte	.LASF457
 9604 002a 05       		.byte	0x5
 9605 002b 8B01     		.uleb128 0x8b
 9606 002d 7B660000 		.4byte	.LASF458
 9607 0031 05       		.byte	0x5
 9608 0032 8C01     		.uleb128 0x8c
 9609 0034 7A7E0000 		.4byte	.LASF459
 9610 0038 05       		.byte	0x5
 9611 0039 8D01     		.uleb128 0x8d
 9612 003b 640D0000 		.4byte	.LASF460
 9613 003f 05       		.byte	0x5
 9614 0040 8E01     		.uleb128 0x8e
 9615 0042 EA6D0000 		.4byte	.LASF461
 9616 0046 05       		.byte	0x5
 9617 0047 8F01     		.uleb128 0x8f
 9618 0049 A35E0000 		.4byte	.LASF462
 9619 004d 06       		.byte	0x6
 9620 004e 9E01     		.uleb128 0x9e
 9621 0050 3B7E0000 		.4byte	.LASF463
 9622 0054 06       		.byte	0x6
 9623 0055 EA01     		.uleb128 0xea
 9624 0057 BA480000 		.4byte	.LASF430
 9625 005b 06       		.byte	0x6
 9626 005c D702     		.uleb128 0x157
 9627 005e AC0C0000 		.4byte	.LASF447
 9628 0062 06       		.byte	0x6
 9629 0063 8D03     		.uleb128 0x18d
 9630 0065 86100000 		.4byte	.LASF448
 9631 0069 05       		.byte	0x5
 9632 006a 9203     		.uleb128 0x192
 9633 006c 76360000 		.4byte	.LASF449
 9634 0070 06       		.byte	0x6
 9635 0071 9803     		.uleb128 0x198
 9636 0073 32370000 		.4byte	.LASF450
 9637 0077 05       		.byte	0x5
 9638 0078 9D03     		.uleb128 0x19d
 9639 007a F5400000 		.4byte	.LASF464
 9640 007e 00       		.byte	0
 9641              		.section	.debug_macro,"G",%progbits,wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382,comdat
 9642              	.Ldebug_macro9:
 9643 0000 0400     		.2byte	0x4
 9644 0002 00       		.byte	0
 9645 0003 05       		.byte	0x5
 9646 0004 06       		.uleb128 0x6
 9647 0005 595E0000 		.4byte	.LASF467
 9648 0009 05       		.byte	0x5
 9649 000a 0F       		.uleb128 0xf
 9650 000b DE0A0000 		.4byte	.LASF468
 9651 000f 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 237


 9652 0010 21       		.uleb128 0x21
 9653 0011 4F3C0000 		.4byte	.LASF469
 9654 0015 05       		.byte	0x5
 9655 0016 2F       		.uleb128 0x2f
 9656 0017 AE290000 		.4byte	.LASF470
 9657 001b 05       		.byte	0x5
 9658 001c 45       		.uleb128 0x45
 9659 001d 971F0000 		.4byte	.LASF471
 9660 0021 05       		.byte	0x5
 9661 0022 5F       		.uleb128 0x5f
 9662 0023 81620000 		.4byte	.LASF472
 9663 0027 05       		.byte	0x5
 9664 0028 7E       		.uleb128 0x7e
 9665 0029 37590000 		.4byte	.LASF473
 9666 002d 05       		.byte	0x5
 9667 002e 9801     		.uleb128 0x98
 9668 0030 D4140000 		.4byte	.LASF474
 9669 0034 05       		.byte	0x5
 9670 0035 AE01     		.uleb128 0xae
 9671 0037 C3360000 		.4byte	.LASF475
 9672 003b 05       		.byte	0x5
 9673 003c C001     		.uleb128 0xc0
 9674 003e AA4F0000 		.4byte	.LASF476
 9675 0042 06       		.byte	0x6
 9676 0043 D601     		.uleb128 0xd6
 9677 0045 7B620000 		.4byte	.LASF477
 9678 0049 00       		.byte	0
 9679              		.section	.debug_macro,"G",%progbits,wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea,comdat
 9680              	.Ldebug_macro10:
 9681 0000 0400     		.2byte	0x4
 9682 0002 00       		.byte	0
 9683 0003 05       		.byte	0x5
 9684 0004 02       		.uleb128 0x2
 9685 0005 5E940000 		.4byte	.LASF478
 9686 0009 05       		.byte	0x5
 9687 000a 0B       		.uleb128 0xb
 9688 000b 3C5F0000 		.4byte	.LASF479
 9689 000f 05       		.byte	0x5
 9690 0010 0C       		.uleb128 0xc
 9691 0011 72430000 		.4byte	.LASF480
 9692 0015 05       		.byte	0x5
 9693 0016 0D       		.uleb128 0xd
 9694 0017 E05A0000 		.4byte	.LASF481
 9695 001b 05       		.byte	0x5
 9696 001c 0E       		.uleb128 0xe
 9697 001d 8A8D0000 		.4byte	.LASF482
 9698 0021 05       		.byte	0x5
 9699 0022 0F       		.uleb128 0xf
 9700 0023 27910000 		.4byte	.LASF483
 9701 0027 05       		.byte	0x5
 9702 0028 10       		.uleb128 0x10
 9703 0029 F80C0000 		.4byte	.LASF484
 9704 002d 05       		.byte	0x5
 9705 002e 11       		.uleb128 0x11
 9706 002f 82460000 		.4byte	.LASF485
 9707 0033 05       		.byte	0x5
 9708 0034 12       		.uleb128 0x12
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 238


 9709 0035 4C340000 		.4byte	.LASF486
 9710 0039 05       		.byte	0x5
 9711 003a 13       		.uleb128 0x13
 9712 003b AE280000 		.4byte	.LASF487
 9713 003f 05       		.byte	0x5
 9714 0040 14       		.uleb128 0x14
 9715 0041 01620000 		.4byte	.LASF488
 9716 0045 05       		.byte	0x5
 9717 0046 15       		.uleb128 0x15
 9718 0047 CE4A0000 		.4byte	.LASF489
 9719 004b 05       		.byte	0x5
 9720 004c 16       		.uleb128 0x16
 9721 004d 507C0000 		.4byte	.LASF490
 9722 0051 00       		.byte	0
 9723              		.section	.debug_macro,"G",%progbits,wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08,comdat
 9724              	.Ldebug_macro11:
 9725 0000 0400     		.2byte	0x4
 9726 0002 00       		.byte	0
 9727 0003 05       		.byte	0x5
 9728 0004 36       		.uleb128 0x36
 9729 0005 72390000 		.4byte	.LASF491
 9730 0009 06       		.byte	0x6
 9731 000a 38       		.uleb128 0x38
 9732 000b 96780000 		.4byte	.LASF492
 9733 000f 05       		.byte	0x5
 9734 0010 42       		.uleb128 0x42
 9735 0011 E6890000 		.4byte	.LASF493
 9736 0015 00       		.byte	0
 9737              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6,comdat
 9738              	.Ldebug_macro12:
 9739 0000 0400     		.2byte	0x4
 9740 0002 00       		.byte	0
 9741 0003 06       		.byte	0x6
 9742 0004 9E01     		.uleb128 0x9e
 9743 0006 3B7E0000 		.4byte	.LASF463
 9744 000a 06       		.byte	0x6
 9745 000b EA01     		.uleb128 0xea
 9746 000d BA480000 		.4byte	.LASF430
 9747 0011 06       		.byte	0x6
 9748 0012 D702     		.uleb128 0x157
 9749 0014 AC0C0000 		.4byte	.LASF447
 9750 0018 05       		.byte	0x5
 9751 0019 DC02     		.uleb128 0x15c
 9752 001b B4270000 		.4byte	.LASF494
 9753 001f 06       		.byte	0x6
 9754 0020 E302     		.uleb128 0x163
 9755 0022 01220000 		.4byte	.LASF495
 9756 0026 06       		.byte	0x6
 9757 0027 8D03     		.uleb128 0x18d
 9758 0029 86100000 		.4byte	.LASF448
 9759 002d 05       		.byte	0x5
 9760 002e 9203     		.uleb128 0x192
 9761 0030 76360000 		.4byte	.LASF449
 9762 0034 06       		.byte	0x6
 9763 0035 9803     		.uleb128 0x198
 9764 0037 32370000 		.4byte	.LASF450
 9765 003b 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 239


 9766 003c 9D03     		.uleb128 0x19d
 9767 003e F5400000 		.4byte	.LASF464
 9768 0042 00       		.byte	0
 9769              		.section	.debug_macro,"G",%progbits,wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43,comdat
 9770              	.Ldebug_macro13:
 9771 0000 0400     		.2byte	0x4
 9772 0002 00       		.byte	0
 9773 0003 05       		.byte	0x5
 9774 0004 11       		.uleb128 0x11
 9775 0005 B07E0000 		.4byte	.LASF496
 9776 0009 05       		.byte	0x5
 9777 000a 15       		.uleb128 0x15
 9778 000b 79720000 		.4byte	.LASF497
 9779 000f 05       		.byte	0x5
 9780 0010 46       		.uleb128 0x46
 9781 0011 A05A0000 		.4byte	.LASF498
 9782 0015 05       		.byte	0x5
 9783 0016 62       		.uleb128 0x62
 9784 0017 C0920000 		.4byte	.LASF499
 9785 001b 05       		.byte	0x5
 9786 001c 68       		.uleb128 0x68
 9787 001d B8790000 		.4byte	.LASF500
 9788 0021 05       		.byte	0x5
 9789 0022 B001     		.uleb128 0xb0
 9790 0024 50460000 		.4byte	.LASF501
 9791 0028 05       		.byte	0x5
 9792 0029 B602     		.uleb128 0x136
 9793 002b AD710000 		.4byte	.LASF502
 9794 002f 05       		.byte	0x5
 9795 0030 B702     		.uleb128 0x137
 9796 0032 1D430000 		.4byte	.LASF503
 9797 0036 05       		.byte	0x5
 9798 0037 B802     		.uleb128 0x138
 9799 0039 7E1D0000 		.4byte	.LASF504
 9800 003d 05       		.byte	0x5
 9801 003e B902     		.uleb128 0x139
 9802 0040 D87C0000 		.4byte	.LASF505
 9803 0044 05       		.byte	0x5
 9804 0045 BA02     		.uleb128 0x13a
 9805 0047 84540000 		.4byte	.LASF506
 9806 004b 05       		.byte	0x5
 9807 004c BB02     		.uleb128 0x13b
 9808 004e 0C570000 		.4byte	.LASF507
 9809 0052 05       		.byte	0x5
 9810 0053 BC02     		.uleb128 0x13c
 9811 0055 19900000 		.4byte	.LASF508
 9812 0059 05       		.byte	0x5
 9813 005a C802     		.uleb128 0x148
 9814 005c A40F0000 		.4byte	.LASF509
 9815 0060 05       		.byte	0x5
 9816 0061 C902     		.uleb128 0x149
 9817 0063 FC940000 		.4byte	.LASF510
 9818 0067 05       		.byte	0x5
 9819 0068 CA02     		.uleb128 0x14a
 9820 006a 7E030000 		.4byte	.LASF511
 9821 006e 05       		.byte	0x5
 9822 006f F304     		.uleb128 0x273
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 240


 9823 0071 FC120000 		.4byte	.LASF512
 9824 0075 05       		.byte	0x5
 9825 0076 8905     		.uleb128 0x289
 9826 0078 59500000 		.4byte	.LASF513
 9827 007c 05       		.byte	0x5
 9828 007d B905     		.uleb128 0x2b9
 9829 007f 534B0000 		.4byte	.LASF514
 9830 0083 05       		.byte	0x5
 9831 0084 C905     		.uleb128 0x2c9
 9832 0086 6B870000 		.4byte	.LASF515
 9833 008a 05       		.byte	0x5
 9834 008b CA05     		.uleb128 0x2ca
 9835 008d 8B100000 		.4byte	.LASF516
 9836 0091 05       		.byte	0x5
 9837 0092 CB05     		.uleb128 0x2cb
 9838 0094 236E0000 		.4byte	.LASF517
 9839 0098 05       		.byte	0x5
 9840 0099 CC05     		.uleb128 0x2cc
 9841 009b 6B4A0000 		.4byte	.LASF518
 9842 009f 05       		.byte	0x5
 9843 00a0 CD05     		.uleb128 0x2cd
 9844 00a2 E4740000 		.4byte	.LASF519
 9845 00a6 05       		.byte	0x5
 9846 00a7 CE05     		.uleb128 0x2ce
 9847 00a9 19630000 		.4byte	.LASF520
 9848 00ad 05       		.byte	0x5
 9849 00ae CF05     		.uleb128 0x2cf
 9850 00b0 E5450000 		.4byte	.LASF521
 9851 00b4 05       		.byte	0x5
 9852 00b5 D105     		.uleb128 0x2d1
 9853 00b7 C62F0000 		.4byte	.LASF522
 9854 00bb 05       		.byte	0x5
 9855 00bc D205     		.uleb128 0x2d2
 9856 00be 3D3B0000 		.4byte	.LASF523
 9857 00c2 05       		.byte	0x5
 9858 00c3 D305     		.uleb128 0x2d3
 9859 00c5 62130000 		.4byte	.LASF524
 9860 00c9 05       		.byte	0x5
 9861 00ca D405     		.uleb128 0x2d4
 9862 00cc 4C490000 		.4byte	.LASF525
 9863 00d0 05       		.byte	0x5
 9864 00d1 D505     		.uleb128 0x2d5
 9865 00d3 55310000 		.4byte	.LASF526
 9866 00d7 05       		.byte	0x5
 9867 00d8 D605     		.uleb128 0x2d6
 9868 00da D8090000 		.4byte	.LASF527
 9869 00de 05       		.byte	0x5
 9870 00df D705     		.uleb128 0x2d7
 9871 00e1 33000000 		.4byte	.LASF528
 9872 00e5 05       		.byte	0x5
 9873 00e6 D805     		.uleb128 0x2d8
 9874 00e8 DB6A0000 		.4byte	.LASF529
 9875 00ec 05       		.byte	0x5
 9876 00ed D905     		.uleb128 0x2d9
 9877 00ef 770C0000 		.4byte	.LASF530
 9878 00f3 05       		.byte	0x5
 9879 00f4 DA05     		.uleb128 0x2da
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 241


 9880 00f6 B5690000 		.4byte	.LASF531
 9881 00fa 05       		.byte	0x5
 9882 00fb DB05     		.uleb128 0x2db
 9883 00fd 0D790000 		.4byte	.LASF532
 9884 0101 05       		.byte	0x5
 9885 0102 DC05     		.uleb128 0x2dc
 9886 0104 61290000 		.4byte	.LASF533
 9887 0108 05       		.byte	0x5
 9888 0109 DD05     		.uleb128 0x2dd
 9889 010b 3C0A0000 		.4byte	.LASF534
 9890 010f 05       		.byte	0x5
 9891 0110 DE05     		.uleb128 0x2de
 9892 0112 81380000 		.4byte	.LASF535
 9893 0116 05       		.byte	0x5
 9894 0117 DF05     		.uleb128 0x2df
 9895 0119 F31D0000 		.4byte	.LASF536
 9896 011d 05       		.byte	0x5
 9897 011e E005     		.uleb128 0x2e0
 9898 0120 0B670000 		.4byte	.LASF537
 9899 0124 05       		.byte	0x5
 9900 0125 E105     		.uleb128 0x2e1
 9901 0127 1E690000 		.4byte	.LASF538
 9902 012b 05       		.byte	0x5
 9903 012c E205     		.uleb128 0x2e2
 9904 012e 831C0000 		.4byte	.LASF539
 9905 0132 05       		.byte	0x5
 9906 0133 E305     		.uleb128 0x2e3
 9907 0135 4C4F0000 		.4byte	.LASF540
 9908 0139 05       		.byte	0x5
 9909 013a E405     		.uleb128 0x2e4
 9910 013c 086C0000 		.4byte	.LASF541
 9911 0140 05       		.byte	0x5
 9912 0141 E505     		.uleb128 0x2e5
 9913 0143 FD1E0000 		.4byte	.LASF542
 9914 0147 05       		.byte	0x5
 9915 0148 E605     		.uleb128 0x2e6
 9916 014a 09500000 		.4byte	.LASF543
 9917 014e 05       		.byte	0x5
 9918 014f E705     		.uleb128 0x2e7
 9919 0151 438F0000 		.4byte	.LASF544
 9920 0155 05       		.byte	0x5
 9921 0156 E805     		.uleb128 0x2e8
 9922 0158 B0000000 		.4byte	.LASF545
 9923 015c 05       		.byte	0x5
 9924 015d EF05     		.uleb128 0x2ef
 9925 015f B0030000 		.4byte	.LASF546
 9926 0163 05       		.byte	0x5
 9927 0164 F705     		.uleb128 0x2f7
 9928 0166 367C0000 		.4byte	.LASF547
 9929 016a 05       		.byte	0x5
 9930 016b 8706     		.uleb128 0x307
 9931 016d C3290000 		.4byte	.LASF548
 9932 0171 05       		.byte	0x5
 9933 0172 8A06     		.uleb128 0x30a
 9934 0174 37750000 		.4byte	.LASF549
 9935 0178 05       		.byte	0x5
 9936 0179 9006     		.uleb128 0x310
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 242


 9937 017b 0A010000 		.4byte	.LASF550
 9938 017f 00       		.byte	0
 9939              		.section	.debug_macro,"G",%progbits,wm4.cdefs.h.47.fbe724f4232069283dea9c3aea4135c7,comdat
 9940              	.Ldebug_macro14:
 9941 0000 0400     		.2byte	0x4
 9942 0002 00       		.byte	0
 9943 0003 05       		.byte	0x5
 9944 0004 2F       		.uleb128 0x2f
 9945 0005 45200000 		.4byte	.LASF552
 9946 0009 05       		.byte	0x5
 9947 000a 30       		.uleb128 0x30
 9948 000b 81650000 		.4byte	.LASF553
 9949 000f 05       		.byte	0x5
 9950 0010 31       		.uleb128 0x31
 9951 0011 DE4F0000 		.4byte	.LASF554
 9952 0015 05       		.byte	0x5
 9953 0016 34       		.uleb128 0x34
 9954 0017 031B0000 		.4byte	.LASF555
 9955 001b 05       		.byte	0x5
 9956 001c 37       		.uleb128 0x37
 9957 001d 741C0000 		.4byte	.LASF556
 9958 0021 05       		.byte	0x5
 9959 0022 38       		.uleb128 0x38
 9960 0023 A68B0000 		.4byte	.LASF557
 9961 0027 05       		.byte	0x5
 9962 0028 3A       		.uleb128 0x3a
 9963 0029 C93D0000 		.4byte	.LASF558
 9964 002d 05       		.byte	0x5
 9965 002e 3B       		.uleb128 0x3b
 9966 002f 8F2E0000 		.4byte	.LASF559
 9967 0033 05       		.byte	0x5
 9968 0034 3C       		.uleb128 0x3c
 9969 0035 5E1F0000 		.4byte	.LASF560
 9970 0039 05       		.byte	0x5
 9971 003a 3D       		.uleb128 0x3d
 9972 003b B87E0000 		.4byte	.LASF561
 9973 003f 05       		.byte	0x5
 9974 0040 40       		.uleb128 0x40
 9975 0041 DF0D0000 		.4byte	.LASF562
 9976 0045 05       		.byte	0x5
 9977 0046 41       		.uleb128 0x41
 9978 0047 02090000 		.4byte	.LASF563
 9979 004b 05       		.byte	0x5
 9980 004c 42       		.uleb128 0x42
 9981 004d FA720000 		.4byte	.LASF564
 9982 0051 05       		.byte	0x5
 9983 0052 4A       		.uleb128 0x4a
 9984 0053 68100000 		.4byte	.LASF565
 9985 0057 05       		.byte	0x5
 9986 0058 4D       		.uleb128 0x4d
 9987 0059 2A3B0000 		.4byte	.LASF566
 9988 005d 05       		.byte	0x5
 9989 005e 53       		.uleb128 0x53
 9990 005f AF780000 		.4byte	.LASF567
 9991 0063 05       		.byte	0x5
 9992 0064 5A       		.uleb128 0x5a
 9993 0065 F3620000 		.4byte	.LASF568
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 243


 9994 0069 05       		.byte	0x5
 9995 006a 5B       		.uleb128 0x5b
 9996 006b 65770000 		.4byte	.LASF569
 9997 006f 05       		.byte	0x5
 9998 0070 67       		.uleb128 0x67
 9999 0071 50830000 		.4byte	.LASF570
 10000 0075 05       		.byte	0x5
 10001 0076 68       		.uleb128 0x68
 10002 0077 6B440000 		.4byte	.LASF571
 10003 007b 05       		.byte	0x5
 10004 007c 6C       		.uleb128 0x6c
 10005 007d 58040000 		.4byte	.LASF572
 10006 0081 05       		.byte	0x5
 10007 0082 6D       		.uleb128 0x6d
 10008 0083 7A760000 		.4byte	.LASF573
 10009 0087 05       		.byte	0x5
 10010 0088 6E       		.uleb128 0x6e
 10011 0089 00000000 		.4byte	.LASF574
 10012 008d 05       		.byte	0x5
 10013 008e 71       		.uleb128 0x71
 10014 008f 8B290000 		.4byte	.LASF575
 10015 0093 05       		.byte	0x5
 10016 0094 74       		.uleb128 0x74
 10017 0095 2E120000 		.4byte	.LASF576
 10018 0099 05       		.byte	0x5
 10019 009a 7B       		.uleb128 0x7b
 10020 009b 8C2F0000 		.4byte	.LASF577
 10021 009f 05       		.byte	0x5
 10022 00a0 7C       		.uleb128 0x7c
 10023 00a1 5B5D0000 		.4byte	.LASF578
 10024 00a5 05       		.byte	0x5
 10025 00a6 7D       		.uleb128 0x7d
 10026 00a7 72840000 		.4byte	.LASF579
 10027 00ab 05       		.byte	0x5
 10028 00ac 8101     		.uleb128 0x81
 10029 00ae 3C630000 		.4byte	.LASF580
 10030 00b2 05       		.byte	0x5
 10031 00b3 8801     		.uleb128 0x88
 10032 00b5 F38D0000 		.4byte	.LASF581
 10033 00b9 05       		.byte	0x5
 10034 00ba 8C01     		.uleb128 0x8c
 10035 00bc B35E0000 		.4byte	.LASF582
 10036 00c0 05       		.byte	0x5
 10037 00c1 8D01     		.uleb128 0x8d
 10038 00c3 0F200000 		.4byte	.LASF583
 10039 00c7 05       		.byte	0x5
 10040 00c8 9001     		.uleb128 0x90
 10041 00ca 54530000 		.4byte	.LASF584
 10042 00ce 05       		.byte	0x5
 10043 00cf 9301     		.uleb128 0x93
 10044 00d1 6A650000 		.4byte	.LASF585
 10045 00d5 05       		.byte	0x5
 10046 00d6 9401     		.uleb128 0x94
 10047 00d8 6C2B0000 		.4byte	.LASF586
 10048 00dc 05       		.byte	0x5
 10049 00dd 9501     		.uleb128 0x95
 10050 00df E0790000 		.4byte	.LASF587
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 244


 10051 00e3 05       		.byte	0x5
 10052 00e4 9701     		.uleb128 0x97
 10053 00e6 0D440000 		.4byte	.LASF588
 10054 00ea 05       		.byte	0x5
 10055 00eb 9801     		.uleb128 0x98
 10056 00ed 6A860000 		.4byte	.LASF589
 10057 00f1 05       		.byte	0x5
 10058 00f2 9A01     		.uleb128 0x9a
 10059 00f4 91880000 		.4byte	.LASF590
 10060 00f8 05       		.byte	0x5
 10061 00f9 9C01     		.uleb128 0x9c
 10062 00fb 9F180000 		.4byte	.LASF591
 10063 00ff 05       		.byte	0x5
 10064 0100 AD01     		.uleb128 0xad
 10065 0102 E8180000 		.4byte	.LASF592
 10066 0106 05       		.byte	0x5
 10067 0107 AE01     		.uleb128 0xae
 10068 0109 B00E0000 		.4byte	.LASF593
 10069 010d 05       		.byte	0x5
 10070 010e AF01     		.uleb128 0xaf
 10071 0110 49910000 		.4byte	.LASF594
 10072 0114 05       		.byte	0x5
 10073 0115 B001     		.uleb128 0xb0
 10074 0117 AE5D0000 		.4byte	.LASF595
 10075 011b 05       		.byte	0x5
 10076 011c B101     		.uleb128 0xb1
 10077 011e 762E0000 		.4byte	.LASF596
 10078 0122 05       		.byte	0x5
 10079 0123 B301     		.uleb128 0xb3
 10080 0125 F8460000 		.4byte	.LASF597
 10081 0129 05       		.byte	0x5
 10082 012a B401     		.uleb128 0xb4
 10083 012c 5A690000 		.4byte	.LASF598
 10084 0130 05       		.byte	0x5
 10085 0131 B501     		.uleb128 0xb5
 10086 0133 B18F0000 		.4byte	.LASF599
 10087 0137 05       		.byte	0x5
 10088 0138 F601     		.uleb128 0xf6
 10089 013a 967D0000 		.4byte	.LASF600
 10090 013e 05       		.byte	0x5
 10091 013f F701     		.uleb128 0xf7
 10092 0141 6B420000 		.4byte	.LASF601
 10093 0145 05       		.byte	0x5
 10094 0146 F801     		.uleb128 0xf8
 10095 0148 FA4E0000 		.4byte	.LASF602
 10096 014c 05       		.byte	0x5
 10097 014d F901     		.uleb128 0xf9
 10098 014f 40290000 		.4byte	.LASF603
 10099 0153 05       		.byte	0x5
 10100 0154 FA01     		.uleb128 0xfa
 10101 0156 EE930000 		.4byte	.LASF604
 10102 015a 05       		.byte	0x5
 10103 015b FB01     		.uleb128 0xfb
 10104 015d 35080000 		.4byte	.LASF605
 10105 0161 05       		.byte	0x5
 10106 0162 FC01     		.uleb128 0xfc
 10107 0164 148C0000 		.4byte	.LASF606
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 245


 10108 0168 05       		.byte	0x5
 10109 0169 9902     		.uleb128 0x119
 10110 016b 4E230000 		.4byte	.LASF607
 10111 016f 05       		.byte	0x5
 10112 0170 A002     		.uleb128 0x120
 10113 0172 C54F0000 		.4byte	.LASF608
 10114 0176 05       		.byte	0x5
 10115 0177 A802     		.uleb128 0x128
 10116 0179 668A0000 		.4byte	.LASF609
 10117 017d 05       		.byte	0x5
 10118 017e AE02     		.uleb128 0x12e
 10119 0180 1F5A0000 		.4byte	.LASF610
 10120 0184 05       		.byte	0x5
 10121 0185 C602     		.uleb128 0x146
 10122 0187 B06B0000 		.4byte	.LASF611
 10123 018b 05       		.byte	0x5
 10124 018c D902     		.uleb128 0x159
 10125 018e 9C770000 		.4byte	.LASF612
 10126 0192 05       		.byte	0x5
 10127 0193 DF02     		.uleb128 0x15f
 10128 0195 0C5C0000 		.4byte	.LASF613
 10129 0199 05       		.byte	0x5
 10130 019a E002     		.uleb128 0x160
 10131 019c 31860000 		.4byte	.LASF614
 10132 01a0 05       		.byte	0x5
 10133 01a1 E702     		.uleb128 0x167
 10134 01a3 CB1C0000 		.4byte	.LASF615
 10135 01a7 05       		.byte	0x5
 10136 01a8 ED02     		.uleb128 0x16d
 10137 01aa B8240000 		.4byte	.LASF616
 10138 01ae 05       		.byte	0x5
 10139 01af F302     		.uleb128 0x173
 10140 01b1 E0430000 		.4byte	.LASF617
 10141 01b5 05       		.byte	0x5
 10142 01b6 F902     		.uleb128 0x179
 10143 01b8 B5400000 		.4byte	.LASF618
 10144 01bc 05       		.byte	0x5
 10145 01bd FF02     		.uleb128 0x17f
 10146 01bf C1330000 		.4byte	.LASF619
 10147 01c3 05       		.byte	0x5
 10148 01c4 9103     		.uleb128 0x191
 10149 01c6 B6550000 		.4byte	.LASF620
 10150 01ca 05       		.byte	0x5
 10151 01cb B403     		.uleb128 0x1b4
 10152 01cd 761E0000 		.4byte	.LASF621
 10153 01d1 05       		.byte	0x5
 10154 01d2 B503     		.uleb128 0x1b5
 10155 01d4 9F4E0000 		.4byte	.LASF622
 10156 01d8 05       		.byte	0x5
 10157 01d9 BC03     		.uleb128 0x1bc
 10158 01db 04270000 		.4byte	.LASF623
 10159 01df 05       		.byte	0x5
 10160 01e0 BD03     		.uleb128 0x1bd
 10161 01e2 072A0000 		.4byte	.LASF624
 10162 01e6 05       		.byte	0x5
 10163 01e7 C303     		.uleb128 0x1c3
 10164 01e9 983C0000 		.4byte	.LASF625
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 246


 10165 01ed 05       		.byte	0x5
 10166 01ee C403     		.uleb128 0x1c4
 10167 01f0 4A7D0000 		.4byte	.LASF626
 10168 01f4 05       		.byte	0x5
 10169 01f5 CE03     		.uleb128 0x1ce
 10170 01f7 06850000 		.4byte	.LASF627
 10171 01fb 05       		.byte	0x5
 10172 01fc E403     		.uleb128 0x1e4
 10173 01fe 0B7A0000 		.4byte	.LASF628
 10174 0202 05       		.byte	0x5
 10175 0203 E603     		.uleb128 0x1e6
 10176 0205 A6830000 		.4byte	.LASF629
 10177 0209 05       		.byte	0x5
 10178 020a E803     		.uleb128 0x1e8
 10179 020c B58D0000 		.4byte	.LASF630
 10180 0210 05       		.byte	0x5
 10181 0211 E903     		.uleb128 0x1e9
 10182 0213 6D190000 		.4byte	.LASF631
 10183 0217 05       		.byte	0x5
 10184 0218 EB03     		.uleb128 0x1eb
 10185 021a 5D920000 		.4byte	.LASF632
 10186 021e 05       		.byte	0x5
 10187 021f F503     		.uleb128 0x1f5
 10188 0221 9A610000 		.4byte	.LASF633
 10189 0225 05       		.byte	0x5
 10190 0226 FA03     		.uleb128 0x1fa
 10191 0228 63300000 		.4byte	.LASF634
 10192 022c 05       		.byte	0x5
 10193 022d FF03     		.uleb128 0x1ff
 10194 022f D00F0000 		.4byte	.LASF635
 10195 0233 05       		.byte	0x5
 10196 0234 8204     		.uleb128 0x202
 10197 0236 95470000 		.4byte	.LASF636
 10198 023a 05       		.byte	0x5
 10199 023b 8604     		.uleb128 0x206
 10200 023d FC7F0000 		.4byte	.LASF637
 10201 0241 05       		.byte	0x5
 10202 0242 8804     		.uleb128 0x208
 10203 0244 0F220000 		.4byte	.LASF638
 10204 0248 05       		.byte	0x5
 10205 0249 AB04     		.uleb128 0x22b
 10206 024b DD5D0000 		.4byte	.LASF639
 10207 024f 05       		.byte	0x5
 10208 0250 AF04     		.uleb128 0x22f
 10209 0252 FE750000 		.4byte	.LASF640
 10210 0256 05       		.byte	0x5
 10211 0257 B304     		.uleb128 0x233
 10212 0259 9B050000 		.4byte	.LASF641
 10213 025d 05       		.byte	0x5
 10214 025e B704     		.uleb128 0x237
 10215 0260 85870000 		.4byte	.LASF642
 10216 0264 05       		.byte	0x5
 10217 0265 BB04     		.uleb128 0x23b
 10218 0267 84600000 		.4byte	.LASF643
 10219 026b 05       		.byte	0x5
 10220 026c BF04     		.uleb128 0x23f
 10221 026e 31240000 		.4byte	.LASF644
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 247


 10222 0272 05       		.byte	0x5
 10223 0273 C304     		.uleb128 0x243
 10224 0275 327F0000 		.4byte	.LASF645
 10225 0279 05       		.byte	0x5
 10226 027a C704     		.uleb128 0x247
 10227 027c 0F930000 		.4byte	.LASF646
 10228 0280 05       		.byte	0x5
 10229 0281 BF05     		.uleb128 0x2bf
 10230 0283 EB520000 		.4byte	.LASF647
 10231 0287 05       		.byte	0x5
 10232 0288 C005     		.uleb128 0x2c0
 10233 028a FF640000 		.4byte	.LASF648
 10234 028e 05       		.byte	0x5
 10235 028f C105     		.uleb128 0x2c1
 10236 0291 21650000 		.4byte	.LASF649
 10237 0295 05       		.byte	0x5
 10238 0296 C205     		.uleb128 0x2c2
 10239 0298 77080000 		.4byte	.LASF650
 10240 029c 00       		.byte	0
 10241              		.section	.debug_macro,"G",%progbits,wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d,comdat
 10242              	.Ldebug_macro15:
 10243 0000 0400     		.2byte	0x4
 10244 0002 00       		.byte	0
 10245 0003 05       		.byte	0x5
 10246 0004 08       		.uleb128 0x8
 10247 0005 D2310000 		.4byte	.LASF652
 10248 0009 06       		.byte	0x6
 10249 000a 0D       		.uleb128 0xd
 10250 000b 80580000 		.4byte	.LASF653
 10251 000f 05       		.byte	0x5
 10252 0010 10       		.uleb128 0x10
 10253 0011 76610000 		.4byte	.LASF654
 10254 0015 00       		.byte	0
 10255              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043,comdat
 10256              	.Ldebug_macro16:
 10257 0000 0400     		.2byte	0x4
 10258 0002 00       		.byte	0
 10259 0003 05       		.byte	0x5
 10260 0004 36       		.uleb128 0x36
 10261 0005 89320000 		.4byte	.LASF655
 10262 0009 05       		.byte	0x5
 10263 000a 3A       		.uleb128 0x3a
 10264 000b 2E900000 		.4byte	.LASF656
 10265 000f 05       		.byte	0x5
 10266 0010 3B       		.uleb128 0x3b
 10267 0011 E41A0000 		.4byte	.LASF657
 10268 0015 05       		.byte	0x5
 10269 0016 3D       		.uleb128 0x3d
 10270 0017 0D3D0000 		.4byte	.LASF658
 10271 001b 05       		.byte	0x5
 10272 001c 41       		.uleb128 0x41
 10273 001d AF4D0000 		.4byte	.LASF659
 10274 0021 05       		.byte	0x5
 10275 0022 8E01     		.uleb128 0x8e
 10276 0024 F6760000 		.4byte	.LASF660
 10277 0028 00       		.byte	0
 10278              		.section	.debug_macro,"G",%progbits,wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd,comdat
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 248


 10279              	.Ldebug_macro17:
 10280 0000 0400     		.2byte	0x4
 10281 0002 00       		.byte	0
 10282 0003 05       		.byte	0x5
 10283 0004 08       		.uleb128 0x8
 10284 0005 F0780000 		.4byte	.LASF661
 10285 0009 05       		.byte	0x5
 10286 000a 0F       		.uleb128 0xf
 10287 000b DF270000 		.4byte	.LASF410
 10288 000f 05       		.byte	0x5
 10289 0010 10       		.uleb128 0x10
 10290 0011 21400000 		.4byte	.LASF412
 10291 0015 00       		.byte	0
 10292              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c,comdat
 10293              	.Ldebug_macro18:
 10294 0000 0400     		.2byte	0x4
 10295 0002 00       		.byte	0
 10296 0003 06       		.byte	0x6
 10297 0004 9E01     		.uleb128 0x9e
 10298 0006 3B7E0000 		.4byte	.LASF463
 10299 000a 06       		.byte	0x6
 10300 000b EA01     		.uleb128 0xea
 10301 000d BA480000 		.4byte	.LASF430
 10302 0011 06       		.byte	0x6
 10303 0012 D702     		.uleb128 0x157
 10304 0014 AC0C0000 		.4byte	.LASF447
 10305 0018 06       		.byte	0x6
 10306 0019 8D03     		.uleb128 0x18d
 10307 001b 86100000 		.4byte	.LASF448
 10308 001f 05       		.byte	0x5
 10309 0020 9203     		.uleb128 0x192
 10310 0022 76360000 		.4byte	.LASF449
 10311 0026 06       		.byte	0x6
 10312 0027 9803     		.uleb128 0x198
 10313 0029 32370000 		.4byte	.LASF450
 10314 002d 05       		.byte	0x5
 10315 002e 9D03     		.uleb128 0x19d
 10316 0030 F5400000 		.4byte	.LASF464
 10317 0034 00       		.byte	0
 10318              		.section	.debug_macro,"G",%progbits,wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217,comdat
 10319              	.Ldebug_macro19:
 10320 0000 0400     		.2byte	0x4
 10321 0002 00       		.byte	0
 10322 0003 05       		.byte	0x5
 10323 0004 0A       		.uleb128 0xa
 10324 0005 CB880000 		.4byte	.LASF665
 10325 0009 05       		.byte	0x5
 10326 000a 10       		.uleb128 0x10
 10327 000b 3D500000 		.4byte	.LASF666
 10328 000f 05       		.byte	0x5
 10329 0010 1A       		.uleb128 0x1a
 10330 0011 AB6A0000 		.4byte	.LASF667
 10331 0015 05       		.byte	0x5
 10332 0016 21       		.uleb128 0x21
 10333 0017 3F2E0000 		.4byte	.LASF668
 10334 001b 00       		.byte	0
 10335              		.section	.debug_macro,"G",%progbits,wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0,comdat
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 249


 10336              	.Ldebug_macro20:
 10337 0000 0400     		.2byte	0x4
 10338 0002 00       		.byte	0
 10339 0003 05       		.byte	0x5
 10340 0004 16       		.uleb128 0x16
 10341 0005 8B6C0000 		.4byte	.LASF669
 10342 0009 05       		.byte	0x5
 10343 000a 1C       		.uleb128 0x1c
 10344 000b DC8F0000 		.4byte	.LASF670
 10345 000f 05       		.byte	0x5
 10346 0010 22       		.uleb128 0x22
 10347 0011 BD450000 		.4byte	.LASF671
 10348 0015 05       		.byte	0x5
 10349 0016 28       		.uleb128 0x28
 10350 0017 2C960000 		.4byte	.LASF672
 10351 001b 05       		.byte	0x5
 10352 001c 2E       		.uleb128 0x2e
 10353 001d 593D0000 		.4byte	.LASF673
 10354 0021 05       		.byte	0x5
 10355 0022 34       		.uleb128 0x34
 10356 0023 4D370000 		.4byte	.LASF674
 10357 0027 05       		.byte	0x5
 10358 0028 3A       		.uleb128 0x3a
 10359 0029 087F0000 		.4byte	.LASF675
 10360 002d 05       		.byte	0x5
 10361 002e 40       		.uleb128 0x40
 10362 002f 93350000 		.4byte	.LASF676
 10363 0033 05       		.byte	0x5
 10364 0034 4C       		.uleb128 0x4c
 10365 0035 CD590000 		.4byte	.LASF677
 10366 0039 05       		.byte	0x5
 10367 003a 56       		.uleb128 0x56
 10368 003b 4B5A0000 		.4byte	.LASF678
 10369 003f 05       		.byte	0x5
 10370 0040 60       		.uleb128 0x60
 10371 0041 EA0D0000 		.4byte	.LASF679
 10372 0045 05       		.byte	0x5
 10373 0046 6A       		.uleb128 0x6a
 10374 0047 35230000 		.4byte	.LASF680
 10375 004b 05       		.byte	0x5
 10376 004c AD01     		.uleb128 0xad
 10377 004e 35870000 		.4byte	.LASF681
 10378 0052 05       		.byte	0x5
 10379 0053 AE01     		.uleb128 0xae
 10380 0055 B6850000 		.4byte	.LASF682
 10381 0059 05       		.byte	0x5
 10382 005a AF01     		.uleb128 0xaf
 10383 005c D71D0000 		.4byte	.LASF683
 10384 0060 05       		.byte	0x5
 10385 0061 C501     		.uleb128 0xc5
 10386 0063 480F0000 		.4byte	.LASF684
 10387 0067 05       		.byte	0x5
 10388 0068 C601     		.uleb128 0xc6
 10389 006a C75D0000 		.4byte	.LASF685
 10390 006e 05       		.byte	0x5
 10391 006f C701     		.uleb128 0xc7
 10392 0071 50180000 		.4byte	.LASF686
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 250


 10393 0075 05       		.byte	0x5
 10394 0076 CF01     		.uleb128 0xcf
 10395 0078 877E0000 		.4byte	.LASF687
 10396 007c 05       		.byte	0x5
 10397 007d D001     		.uleb128 0xd0
 10398 007f 5D2D0000 		.4byte	.LASF688
 10399 0083 05       		.byte	0x5
 10400 0084 D101     		.uleb128 0xd1
 10401 0086 D8160000 		.4byte	.LASF689
 10402 008a 05       		.byte	0x5
 10403 008b DB01     		.uleb128 0xdb
 10404 008d 561A0000 		.4byte	.LASF690
 10405 0091 05       		.byte	0x5
 10406 0092 DC01     		.uleb128 0xdc
 10407 0094 A9330000 		.4byte	.LASF691
 10408 0098 05       		.byte	0x5
 10409 0099 DD01     		.uleb128 0xdd
 10410 009b 57320000 		.4byte	.LASF692
 10411 009f 05       		.byte	0x5
 10412 00a0 E501     		.uleb128 0xe5
 10413 00a2 CF4E0000 		.4byte	.LASF693
 10414 00a6 05       		.byte	0x5
 10415 00a7 E601     		.uleb128 0xe6
 10416 00a9 B4090000 		.4byte	.LASF694
 10417 00ad 05       		.byte	0x5
 10418 00ae E701     		.uleb128 0xe7
 10419 00b0 9B440000 		.4byte	.LASF695
 10420 00b4 05       		.byte	0x5
 10421 00b5 F101     		.uleb128 0xf1
 10422 00b7 E66E0000 		.4byte	.LASF696
 10423 00bb 05       		.byte	0x5
 10424 00bc F201     		.uleb128 0xf2
 10425 00be 6A470000 		.4byte	.LASF697
 10426 00c2 05       		.byte	0x5
 10427 00c3 F301     		.uleb128 0xf3
 10428 00c5 4A0D0000 		.4byte	.LASF698
 10429 00c9 05       		.byte	0x5
 10430 00ca 8102     		.uleb128 0x101
 10431 00cc FE2F0000 		.4byte	.LASF699
 10432 00d0 05       		.byte	0x5
 10433 00d1 8202     		.uleb128 0x102
 10434 00d3 C4200000 		.4byte	.LASF700
 10435 00d7 05       		.byte	0x5
 10436 00d8 8302     		.uleb128 0x103
 10437 00da B27C0000 		.4byte	.LASF701
 10438 00de 05       		.byte	0x5
 10439 00df 9302     		.uleb128 0x113
 10440 00e1 817A0000 		.4byte	.LASF702
 10441 00e5 05       		.byte	0x5
 10442 00e6 9402     		.uleb128 0x114
 10443 00e8 27020000 		.4byte	.LASF703
 10444 00ec 05       		.byte	0x5
 10445 00ed 9502     		.uleb128 0x115
 10446 00ef 315A0000 		.4byte	.LASF704
 10447 00f3 05       		.byte	0x5
 10448 00f4 A302     		.uleb128 0x123
 10449 00f6 9D110000 		.4byte	.LASF705
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 251


 10450 00fa 05       		.byte	0x5
 10451 00fb A402     		.uleb128 0x124
 10452 00fd 97340000 		.4byte	.LASF706
 10453 0101 05       		.byte	0x5
 10454 0102 A502     		.uleb128 0x125
 10455 0104 7E7C0000 		.4byte	.LASF707
 10456 0108 05       		.byte	0x5
 10457 0109 B302     		.uleb128 0x133
 10458 010b 8F550000 		.4byte	.LASF708
 10459 010f 05       		.byte	0x5
 10460 0110 B402     		.uleb128 0x134
 10461 0112 9F370000 		.4byte	.LASF709
 10462 0116 05       		.byte	0x5
 10463 0117 B502     		.uleb128 0x135
 10464 0119 03180000 		.4byte	.LASF710
 10465 011d 05       		.byte	0x5
 10466 011e C302     		.uleb128 0x143
 10467 0120 0E380000 		.4byte	.LASF711
 10468 0124 05       		.byte	0x5
 10469 0125 C402     		.uleb128 0x144
 10470 0127 5C8D0000 		.4byte	.LASF712
 10471 012b 05       		.byte	0x5
 10472 012c C502     		.uleb128 0x145
 10473 012e 2F130000 		.4byte	.LASF713
 10474 0132 05       		.byte	0x5
 10475 0133 D302     		.uleb128 0x153
 10476 0135 A9430000 		.4byte	.LASF714
 10477 0139 05       		.byte	0x5
 10478 013a D402     		.uleb128 0x154
 10479 013c 486E0000 		.4byte	.LASF715
 10480 0140 05       		.byte	0x5
 10481 0141 D502     		.uleb128 0x155
 10482 0143 5B630000 		.4byte	.LASF716
 10483 0147 05       		.byte	0x5
 10484 0148 E302     		.uleb128 0x163
 10485 014a 175E0000 		.4byte	.LASF717
 10486 014e 05       		.byte	0x5
 10487 014f E402     		.uleb128 0x164
 10488 0151 0F090000 		.4byte	.LASF718
 10489 0155 05       		.byte	0x5
 10490 0156 E502     		.uleb128 0x165
 10491 0158 56520000 		.4byte	.LASF719
 10492 015c 05       		.byte	0x5
 10493 015d F302     		.uleb128 0x173
 10494 015f 264B0000 		.4byte	.LASF720
 10495 0163 05       		.byte	0x5
 10496 0164 F402     		.uleb128 0x174
 10497 0166 EA1B0000 		.4byte	.LASF721
 10498 016a 05       		.byte	0x5
 10499 016b FC02     		.uleb128 0x17c
 10500 016d 29330000 		.4byte	.LASF722
 10501 0171 05       		.byte	0x5
 10502 0172 8403     		.uleb128 0x184
 10503 0174 54650000 		.4byte	.LASF723
 10504 0178 05       		.byte	0x5
 10505 0179 8A03     		.uleb128 0x18a
 10506 017b F4330000 		.4byte	.LASF724
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 252


 10507 017f 05       		.byte	0x5
 10508 0180 8B03     		.uleb128 0x18b
 10509 0182 5C5C0000 		.4byte	.LASF725
 10510 0186 05       		.byte	0x5
 10511 0187 8F03     		.uleb128 0x18f
 10512 0189 BF6A0000 		.4byte	.LASF726
 10513 018d 05       		.byte	0x5
 10514 018e 9303     		.uleb128 0x193
 10515 0190 65950000 		.4byte	.LASF727
 10516 0194 05       		.byte	0x5
 10517 0195 9803     		.uleb128 0x198
 10518 0197 06600000 		.4byte	.LASF728
 10519 019b 05       		.byte	0x5
 10520 019c A303     		.uleb128 0x1a3
 10521 019e 17760000 		.4byte	.LASF729
 10522 01a2 05       		.byte	0x5
 10523 01a3 AD03     		.uleb128 0x1ad
 10524 01a5 6A260000 		.4byte	.LASF730
 10525 01a9 05       		.byte	0x5
 10526 01aa B203     		.uleb128 0x1b2
 10527 01ac 68030000 		.4byte	.LASF731
 10528 01b0 05       		.byte	0x5
 10529 01b1 B903     		.uleb128 0x1b9
 10530 01b3 F83D0000 		.4byte	.LASF732
 10531 01b7 05       		.byte	0x5
 10532 01b8 BA03     		.uleb128 0x1ba
 10533 01ba 107E0000 		.4byte	.LASF733
 10534 01be 05       		.byte	0x5
 10535 01bf C503     		.uleb128 0x1c5
 10536 01c1 6A0E0000 		.4byte	.LASF734
 10537 01c5 05       		.byte	0x5
 10538 01c6 C603     		.uleb128 0x1c6
 10539 01c8 20340000 		.4byte	.LASF735
 10540 01cc 05       		.byte	0x5
 10541 01cd D103     		.uleb128 0x1d1
 10542 01cf E2720000 		.4byte	.LASF736
 10543 01d3 05       		.byte	0x5
 10544 01d4 D203     		.uleb128 0x1d2
 10545 01d6 1C550000 		.4byte	.LASF737
 10546 01da 05       		.byte	0x5
 10547 01db DE03     		.uleb128 0x1de
 10548 01dd F6370000 		.4byte	.LASF738
 10549 01e1 05       		.byte	0x5
 10550 01e2 DF03     		.uleb128 0x1df
 10551 01e4 866F0000 		.4byte	.LASF739
 10552 01e8 05       		.byte	0x5
 10553 01e9 EE03     		.uleb128 0x1ee
 10554 01eb DA260000 		.4byte	.LASF740
 10555 01ef 05       		.byte	0x5
 10556 01f0 EF03     		.uleb128 0x1ef
 10557 01f2 5F620000 		.4byte	.LASF741
 10558 01f6 00       		.byte	0
 10559              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8,comda
 10560              	.Ldebug_macro21:
 10561 0000 0400     		.2byte	0x4
 10562 0002 00       		.byte	0
 10563 0003 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 253


 10564 0004 44       		.uleb128 0x44
 10565 0005 28320000 		.4byte	.LASF743
 10566 0009 05       		.byte	0x5
 10567 000a 5C       		.uleb128 0x5c
 10568 000b 7C350000 		.4byte	.LASF744
 10569 000f 05       		.byte	0x5
 10570 0010 5D       		.uleb128 0x5d
 10571 0011 BB380000 		.4byte	.LASF745
 10572 0015 05       		.byte	0x5
 10573 0016 5E       		.uleb128 0x5e
 10574 0017 BD270000 		.4byte	.LASF746
 10575 001b 05       		.byte	0x5
 10576 001c 5F       		.uleb128 0x5f
 10577 001d BF370000 		.4byte	.LASF747
 10578 0021 05       		.byte	0x5
 10579 0022 60       		.uleb128 0x60
 10580 0023 948C0000 		.4byte	.LASF748
 10581 0027 05       		.byte	0x5
 10582 0028 61       		.uleb128 0x61
 10583 0029 A33A0000 		.4byte	.LASF749
 10584 002d 05       		.byte	0x5
 10585 002e 62       		.uleb128 0x62
 10586 002f 8B590000 		.4byte	.LASF750
 10587 0033 05       		.byte	0x5
 10588 0034 63       		.uleb128 0x63
 10589 0035 06470000 		.4byte	.LASF751
 10590 0039 05       		.byte	0x5
 10591 003a 64       		.uleb128 0x64
 10592 003b 3F1F0000 		.4byte	.LASF752
 10593 003f 05       		.byte	0x5
 10594 0040 65       		.uleb128 0x65
 10595 0041 57930000 		.4byte	.LASF753
 10596 0045 05       		.byte	0x5
 10597 0046 66       		.uleb128 0x66
 10598 0047 004A0000 		.4byte	.LASF754
 10599 004b 05       		.byte	0x5
 10600 004c 67       		.uleb128 0x67
 10601 004d C1010000 		.4byte	.LASF755
 10602 0051 05       		.byte	0x5
 10603 0052 68       		.uleb128 0x68
 10604 0053 F4600000 		.4byte	.LASF756
 10605 0057 05       		.byte	0x5
 10606 0058 69       		.uleb128 0x69
 10607 0059 6E460000 		.4byte	.LASF757
 10608 005d 05       		.byte	0x5
 10609 005e 6B       		.uleb128 0x6b
 10610 005f 365C0000 		.4byte	.LASF758
 10611 0063 05       		.byte	0x5
 10612 0064 6D       		.uleb128 0x6d
 10613 0065 88530000 		.4byte	.LASF759
 10614 0069 05       		.byte	0x5
 10615 006a 6E       		.uleb128 0x6e
 10616 006b 94030000 		.4byte	.LASF760
 10617 006f 05       		.byte	0x5
 10618 0070 6F       		.uleb128 0x6f
 10619 0071 D5370000 		.4byte	.LASF761
 10620 0075 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 254


 10621 0076 70       		.uleb128 0x70
 10622 0077 4D440000 		.4byte	.LASF762
 10623 007b 05       		.byte	0x5
 10624 007c 71       		.uleb128 0x71
 10625 007d B2490000 		.4byte	.LASF763
 10626 0081 05       		.byte	0x5
 10627 0082 72       		.uleb128 0x72
 10628 0083 213D0000 		.4byte	.LASF764
 10629 0087 05       		.byte	0x5
 10630 0088 77       		.uleb128 0x77
 10631 0089 D15E0000 		.4byte	.LASF765
 10632 008d 05       		.byte	0x5
 10633 008e 78       		.uleb128 0x78
 10634 008f ED420000 		.4byte	.LASF766
 10635 0093 05       		.byte	0x5
 10636 0094 79       		.uleb128 0x79
 10637 0095 F8650000 		.4byte	.LASF767
 10638 0099 05       		.byte	0x5
 10639 009a 7A       		.uleb128 0x7a
 10640 009b 6E940000 		.4byte	.LASF768
 10641 009f 05       		.byte	0x5
 10642 00a0 7B       		.uleb128 0x7b
 10643 00a1 637E0000 		.4byte	.LASF769
 10644 00a5 05       		.byte	0x5
 10645 00a6 7C       		.uleb128 0x7c
 10646 00a7 012E0000 		.4byte	.LASF770
 10647 00ab 05       		.byte	0x5
 10648 00ac 7D       		.uleb128 0x7d
 10649 00ad FB5E0000 		.4byte	.LASF771
 10650 00b1 05       		.byte	0x5
 10651 00b2 7E       		.uleb128 0x7e
 10652 00b3 0D030000 		.4byte	.LASF772
 10653 00b7 05       		.byte	0x5
 10654 00b8 8101     		.uleb128 0x81
 10655 00ba 0D0F0000 		.4byte	.LASF773
 10656 00be 05       		.byte	0x5
 10657 00bf 8201     		.uleb128 0x82
 10658 00c1 B63D0000 		.4byte	.LASF774
 10659 00c5 05       		.byte	0x5
 10660 00c6 8301     		.uleb128 0x83
 10661 00c8 65090000 		.4byte	.LASF775
 10662 00cc 05       		.byte	0x5
 10663 00cd 8401     		.uleb128 0x84
 10664 00cf BD0F0000 		.4byte	.LASF776
 10665 00d3 05       		.byte	0x5
 10666 00d4 8701     		.uleb128 0x87
 10667 00d6 61280000 		.4byte	.LASF777
 10668 00da 05       		.byte	0x5
 10669 00db 8801     		.uleb128 0x88
 10670 00dd 02060000 		.4byte	.LASF778
 10671 00e1 05       		.byte	0x5
 10672 00e2 8901     		.uleb128 0x89
 10673 00e4 FB920000 		.4byte	.LASF779
 10674 00e8 05       		.byte	0x5
 10675 00e9 8A01     		.uleb128 0x8a
 10676 00eb 2F680000 		.4byte	.LASF780
 10677 00ef 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 255


 10678 00f0 9001     		.uleb128 0x90
 10679 00f2 594A0000 		.4byte	.LASF781
 10680 00f6 05       		.byte	0x5
 10681 00f7 9401     		.uleb128 0x94
 10682 00f9 66910000 		.4byte	.LASF782
 10683 00fd 05       		.byte	0x5
 10684 00fe 9601     		.uleb128 0x96
 10685 0100 8A4A0000 		.4byte	.LASF783
 10686 0104 05       		.byte	0x5
 10687 0105 9C01     		.uleb128 0x9c
 10688 0107 37380000 		.4byte	.LASF784
 10689 010b 00       		.byte	0
 10690              		.section	.debug_macro,"G",%progbits,wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066,comdat
 10691              	.Ldebug_macro22:
 10692 0000 0400     		.2byte	0x4
 10693 0002 00       		.byte	0
 10694 0003 05       		.byte	0x5
 10695 0004 43       		.uleb128 0x43
 10696 0005 0D360000 		.4byte	.LASF785
 10697 0009 05       		.byte	0x5
 10698 000a 4C       		.uleb128 0x4c
 10699 000b 52400000 		.4byte	.LASF786
 10700 000f 05       		.byte	0x5
 10701 0010 4E       		.uleb128 0x4e
 10702 0011 D03C0000 		.4byte	.LASF787
 10703 0015 05       		.byte	0x5
 10704 0016 4F       		.uleb128 0x4f
 10705 0017 405E0000 		.4byte	.LASF788
 10706 001b 05       		.byte	0x5
 10707 001c 51       		.uleb128 0x51
 10708 001d 3A340000 		.4byte	.LASF789
 10709 0021 05       		.byte	0x5
 10710 0022 52       		.uleb128 0x52
 10711 0023 A2900000 		.4byte	.LASF790
 10712 0027 05       		.byte	0x5
 10713 0028 53       		.uleb128 0x53
 10714 0029 825F0000 		.4byte	.LASF791
 10715 002d 05       		.byte	0x5
 10716 002e 54       		.uleb128 0x54
 10717 002f 0C580000 		.4byte	.LASF792
 10718 0033 05       		.byte	0x5
 10719 0034 57       		.uleb128 0x57
 10720 0035 E1320000 		.4byte	.LASF793
 10721 0039 05       		.byte	0x5
 10722 003a 58       		.uleb128 0x58
 10723 003b 6B900000 		.4byte	.LASF794
 10724 003f 05       		.byte	0x5
 10725 0040 59       		.uleb128 0x59
 10726 0041 CE1A0000 		.4byte	.LASF795
 10727 0045 00       		.byte	0
 10728              		.section	.debug_macro,"G",%progbits,wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946,comdat
 10729              	.Ldebug_macro23:
 10730 0000 0400     		.2byte	0x4
 10731 0002 00       		.byte	0
 10732 0003 05       		.byte	0x5
 10733 0004 44       		.uleb128 0x44
 10734 0005 F7880000 		.4byte	.LASF797
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 256


 10735 0009 05       		.byte	0x5
 10736 000a 55       		.uleb128 0x55
 10737 000b E5130000 		.4byte	.LASF798
 10738 000f 05       		.byte	0x5
 10739 0010 56       		.uleb128 0x56
 10740 0011 9F780000 		.4byte	.LASF799
 10741 0015 05       		.byte	0x5
 10742 0016 57       		.uleb128 0x57
 10743 0017 85230000 		.4byte	.LASF800
 10744 001b 05       		.byte	0x5
 10745 001c 58       		.uleb128 0x58
 10746 001d A0280000 		.4byte	.LASF801
 10747 0021 05       		.byte	0x5
 10748 0022 59       		.uleb128 0x59
 10749 0023 84520000 		.4byte	.LASF802
 10750 0027 05       		.byte	0x5
 10751 0028 5A       		.uleb128 0x5a
 10752 0029 A72B0000 		.4byte	.LASF803
 10753 002d 05       		.byte	0x5
 10754 002e 5B       		.uleb128 0x5b
 10755 002f 766A0000 		.4byte	.LASF804
 10756 0033 05       		.byte	0x5
 10757 0034 6A       		.uleb128 0x6a
 10758 0035 54680000 		.4byte	.LASF805
 10759 0039 05       		.byte	0x5
 10760 003a 6F       		.uleb128 0x6f
 10761 003b A2520000 		.4byte	.LASF806
 10762 003f 05       		.byte	0x5
 10763 0040 70       		.uleb128 0x70
 10764 0041 D0850000 		.4byte	.LASF807
 10765 0045 05       		.byte	0x5
 10766 0046 71       		.uleb128 0x71
 10767 0047 B6880000 		.4byte	.LASF808
 10768 004b 05       		.byte	0x5
 10769 004c 77       		.uleb128 0x77
 10770 004d 3C4E0000 		.4byte	.LASF809
 10771 0051 05       		.byte	0x5
 10772 0052 78       		.uleb128 0x78
 10773 0053 26440000 		.4byte	.LASF810
 10774 0057 05       		.byte	0x5
 10775 0058 79       		.uleb128 0x79
 10776 0059 BB0C0000 		.4byte	.LASF811
 10777 005d 05       		.byte	0x5
 10778 005e 7A       		.uleb128 0x7a
 10779 005f BE580000 		.4byte	.LASF812
 10780 0063 05       		.byte	0x5
 10781 0064 7B       		.uleb128 0x7b
 10782 0065 E38B0000 		.4byte	.LASF813
 10783 0069 05       		.byte	0x5
 10784 006a 8301     		.uleb128 0x83
 10785 006c 2F5B0000 		.4byte	.LASF814
 10786 0070 05       		.byte	0x5
 10787 0071 8401     		.uleb128 0x84
 10788 0073 BC7D0000 		.4byte	.LASF815
 10789 0077 05       		.byte	0x5
 10790 0078 8501     		.uleb128 0x85
 10791 007a 65810000 		.4byte	.LASF816
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 257


 10792 007e 05       		.byte	0x5
 10793 007f 8601     		.uleb128 0x86
 10794 0081 E43B0000 		.4byte	.LASF817
 10795 0085 05       		.byte	0x5
 10796 0086 8701     		.uleb128 0x87
 10797 0088 21390000 		.4byte	.LASF818
 10798 008c 05       		.byte	0x5
 10799 008d 8801     		.uleb128 0x88
 10800 008f BA520000 		.4byte	.LASF819
 10801 0093 05       		.byte	0x5
 10802 0094 8E01     		.uleb128 0x8e
 10803 0096 7E680000 		.4byte	.LASF820
 10804 009a 05       		.byte	0x5
 10805 009b 8F01     		.uleb128 0x8f
 10806 009d 10350000 		.4byte	.LASF821
 10807 00a1 05       		.byte	0x5
 10808 00a2 9501     		.uleb128 0x95
 10809 00a4 9A080000 		.4byte	.LASF822
 10810 00a8 05       		.byte	0x5
 10811 00a9 9B01     		.uleb128 0x9b
 10812 00ab 72770000 		.4byte	.LASF823
 10813 00af 05       		.byte	0x5
 10814 00b0 AF01     		.uleb128 0xaf
 10815 00b2 E3710000 		.4byte	.LASF824
 10816 00b6 05       		.byte	0x5
 10817 00b7 B001     		.uleb128 0xb0
 10818 00b9 C2530000 		.4byte	.LASF825
 10819 00bd 05       		.byte	0x5
 10820 00be B401     		.uleb128 0xb4
 10821 00c0 60740000 		.4byte	.LASF826
 10822 00c4 05       		.byte	0x5
 10823 00c5 BC01     		.uleb128 0xbc
 10824 00c7 11920000 		.4byte	.LASF827
 10825 00cb 05       		.byte	0x5
 10826 00cc C001     		.uleb128 0xc0
 10827 00ce 5F860000 		.4byte	.LASF828
 10828 00d2 00       		.byte	0
 10829              		.section	.debug_macro,"G",%progbits,wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5,comdat
 10830              	.Ldebug_macro24:
 10831 0000 0400     		.2byte	0x4
 10832 0002 00       		.byte	0
 10833 0003 05       		.byte	0x5
 10834 0004 C502     		.uleb128 0x145
 10835 0006 2F740000 		.4byte	.LASF829
 10836 000a 05       		.byte	0x5
 10837 000b D902     		.uleb128 0x159
 10838 000d 95270000 		.4byte	.LASF830
 10839 0011 00       		.byte	0
 10840              		.section	.debug_macro,"G",%progbits,wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168,comdat
 10841              	.Ldebug_macro25:
 10842 0000 0400     		.2byte	0x4
 10843 0002 00       		.byte	0
 10844 0003 05       		.byte	0x5
 10845 0004 43       		.uleb128 0x43
 10846 0005 11650000 		.4byte	.LASF831
 10847 0009 05       		.byte	0x5
 10848 000a 9101     		.uleb128 0x91
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 258


 10849 000c 4A620000 		.4byte	.LASF832
 10850 0010 05       		.byte	0x5
 10851 0011 9201     		.uleb128 0x92
 10852 0013 451A0000 		.4byte	.LASF833
 10853 0017 05       		.byte	0x5
 10854 0018 9301     		.uleb128 0x93
 10855 001a F4070000 		.4byte	.LASF834
 10856 001e 00       		.byte	0
 10857              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e,comdat
 10858              	.Ldebug_macro26:
 10859 0000 0400     		.2byte	0x4
 10860 0002 00       		.byte	0
 10861 0003 05       		.byte	0x5
 10862 0004 AB01     		.uleb128 0xab
 10863 0006 84950000 		.4byte	.LASF835
 10864 000a 05       		.byte	0x5
 10865 000b AF01     		.uleb128 0xaf
 10866 000d 0D890000 		.4byte	.LASF836
 10867 0011 05       		.byte	0x5
 10868 0012 B301     		.uleb128 0xb3
 10869 0014 A35F0000 		.4byte	.LASF837
 10870 0018 05       		.byte	0x5
 10871 0019 B701     		.uleb128 0xb7
 10872 001b FF2E0000 		.4byte	.LASF838
 10873 001f 05       		.byte	0x5
 10874 0020 BB01     		.uleb128 0xbb
 10875 0022 53060000 		.4byte	.LASF839
 10876 0026 05       		.byte	0x5
 10877 0027 BF01     		.uleb128 0xbf
 10878 0029 C28B0000 		.4byte	.LASF840
 10879 002d 05       		.byte	0x5
 10880 002e C701     		.uleb128 0xc7
 10881 0030 11290000 		.4byte	.LASF841
 10882 0034 05       		.byte	0x5
 10883 0035 D301     		.uleb128 0xd3
 10884 0037 A2140000 		.4byte	.LASF842
 10885 003b 05       		.byte	0x5
 10886 003c DF01     		.uleb128 0xdf
 10887 003e 13240000 		.4byte	.LASF843
 10888 0042 05       		.byte	0x5
 10889 0043 EF01     		.uleb128 0xef
 10890 0045 BF6E0000 		.4byte	.LASF844
 10891 0049 05       		.byte	0x5
 10892 004a F301     		.uleb128 0xf3
 10893 004c 46960000 		.4byte	.LASF845
 10894 0050 05       		.byte	0x5
 10895 0051 F701     		.uleb128 0xf7
 10896 0053 2C780000 		.4byte	.LASF846
 10897 0057 05       		.byte	0x5
 10898 0058 FE01     		.uleb128 0xfe
 10899 005a 005E0000 		.4byte	.LASF847
 10900 005e 05       		.byte	0x5
 10901 005f 9302     		.uleb128 0x113
 10902 0061 0B110000 		.4byte	.LASF848
 10903 0065 05       		.byte	0x5
 10904 0066 9702     		.uleb128 0x117
 10905 0068 AC620000 		.4byte	.LASF849
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 259


 10906 006c 05       		.byte	0x5
 10907 006d A402     		.uleb128 0x124
 10908 006f 521B0000 		.4byte	.LASF850
 10909 0073 05       		.byte	0x5
 10910 0074 A802     		.uleb128 0x128
 10911 0076 BD220000 		.4byte	.LASF851
 10912 007a 05       		.byte	0x5
 10913 007b AC02     		.uleb128 0x12c
 10914 007d D40C0000 		.4byte	.LASF852
 10915 0081 05       		.byte	0x5
 10916 0082 B902     		.uleb128 0x139
 10917 0084 95800000 		.4byte	.LASF853
 10918 0088 05       		.byte	0x5
 10919 0089 C002     		.uleb128 0x140
 10920 008b 8C080000 		.4byte	.LASF854
 10921 008f 05       		.byte	0x5
 10922 0090 C602     		.uleb128 0x146
 10923 0092 62080000 		.4byte	.LASF855
 10924 0096 05       		.byte	0x5
 10925 0097 CC02     		.uleb128 0x14c
 10926 0099 32010000 		.4byte	.LASF856
 10927 009d 05       		.byte	0x5
 10928 009e D202     		.uleb128 0x152
 10929 00a0 698C0000 		.4byte	.LASF857
 10930 00a4 05       		.byte	0x5
 10931 00a5 D702     		.uleb128 0x157
 10932 00a7 5F350000 		.4byte	.LASF858
 10933 00ab 05       		.byte	0x5
 10934 00ac DC02     		.uleb128 0x15c
 10935 00ae 2E040000 		.4byte	.LASF859
 10936 00b2 05       		.byte	0x5
 10937 00b3 E202     		.uleb128 0x162
 10938 00b5 F2560000 		.4byte	.LASF860
 10939 00b9 05       		.byte	0x5
 10940 00ba EB02     		.uleb128 0x16b
 10941 00bc 330C0000 		.4byte	.LASF861
 10942 00c0 05       		.byte	0x5
 10943 00c1 F302     		.uleb128 0x173
 10944 00c3 FC270000 		.4byte	.LASF862
 10945 00c7 05       		.byte	0x5
 10946 00c8 FB02     		.uleb128 0x17b
 10947 00ca FE5C0000 		.4byte	.LASF863
 10948 00ce 05       		.byte	0x5
 10949 00cf 8303     		.uleb128 0x183
 10950 00d1 DA800000 		.4byte	.LASF864
 10951 00d5 05       		.byte	0x5
 10952 00d6 8D03     		.uleb128 0x18d
 10953 00d8 5D600000 		.4byte	.LASF865
 10954 00dc 05       		.byte	0x5
 10955 00dd 9103     		.uleb128 0x191
 10956 00df E97E0000 		.4byte	.LASF866
 10957 00e3 05       		.byte	0x5
 10958 00e4 9503     		.uleb128 0x195
 10959 00e6 E0290000 		.4byte	.LASF867
 10960 00ea 05       		.byte	0x5
 10961 00eb 9903     		.uleb128 0x199
 10962 00ed 40560000 		.4byte	.LASF868
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 260


 10963 00f1 05       		.byte	0x5
 10964 00f2 9D03     		.uleb128 0x19d
 10965 00f4 48800000 		.4byte	.LASF869
 10966 00f8 05       		.byte	0x5
 10967 00f9 A103     		.uleb128 0x1a1
 10968 00fb 2E400000 		.4byte	.LASF870
 10969 00ff 05       		.byte	0x5
 10970 0100 A503     		.uleb128 0x1a5
 10971 0102 75280000 		.4byte	.LASF871
 10972 0106 05       		.byte	0x5
 10973 0107 A903     		.uleb128 0x1a9
 10974 0109 41790000 		.4byte	.LASF872
 10975 010d 05       		.byte	0x5
 10976 010e AD03     		.uleb128 0x1ad
 10977 0110 4E720000 		.4byte	.LASF873
 10978 0114 05       		.byte	0x5
 10979 0115 B103     		.uleb128 0x1b1
 10980 0117 0D700000 		.4byte	.LASF874
 10981 011b 05       		.byte	0x5
 10982 011c B503     		.uleb128 0x1b5
 10983 011e 993B0000 		.4byte	.LASF875
 10984 0122 05       		.byte	0x5
 10985 0123 B903     		.uleb128 0x1b9
 10986 0125 8D0A0000 		.4byte	.LASF876
 10987 0129 05       		.byte	0x5
 10988 012a BD03     		.uleb128 0x1bd
 10989 012c 85830000 		.4byte	.LASF877
 10990 0130 05       		.byte	0x5
 10991 0131 C103     		.uleb128 0x1c1
 10992 0133 4E6F0000 		.4byte	.LASF878
 10993 0137 05       		.byte	0x5
 10994 0138 C503     		.uleb128 0x1c5
 10995 013a C9120000 		.4byte	.LASF879
 10996 013e 05       		.byte	0x5
 10997 013f C903     		.uleb128 0x1c9
 10998 0141 C67E0000 		.4byte	.LASF880
 10999 0145 05       		.byte	0x5
 11000 0146 CD03     		.uleb128 0x1cd
 11001 0148 F58F0000 		.4byte	.LASF881
 11002 014c 05       		.byte	0x5
 11003 014d D103     		.uleb128 0x1d1
 11004 014f 0E660000 		.4byte	.LASF882
 11005 0153 05       		.byte	0x5
 11006 0154 D503     		.uleb128 0x1d5
 11007 0156 D2940000 		.4byte	.LASF883
 11008 015a 05       		.byte	0x5
 11009 015b D903     		.uleb128 0x1d9
 11010 015d B45C0000 		.4byte	.LASF884
 11011 0161 05       		.byte	0x5
 11012 0162 DD03     		.uleb128 0x1dd
 11013 0164 1F4F0000 		.4byte	.LASF885
 11014 0168 05       		.byte	0x5
 11015 0169 E103     		.uleb128 0x1e1
 11016 016b 56200000 		.4byte	.LASF886
 11017 016f 05       		.byte	0x5
 11018 0170 E503     		.uleb128 0x1e5
 11019 0172 173C0000 		.4byte	.LASF887
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 261


 11020 0176 05       		.byte	0x5
 11021 0177 E903     		.uleb128 0x1e9
 11022 0179 F05B0000 		.4byte	.LASF888
 11023 017d 05       		.byte	0x5
 11024 017e ED03     		.uleb128 0x1ed
 11025 0180 0E330000 		.4byte	.LASF889
 11026 0184 05       		.byte	0x5
 11027 0185 F103     		.uleb128 0x1f1
 11028 0187 2F1E0000 		.4byte	.LASF890
 11029 018b 05       		.byte	0x5
 11030 018c F503     		.uleb128 0x1f5
 11031 018e 8A3A0000 		.4byte	.LASF891
 11032 0192 05       		.byte	0x5
 11033 0193 F903     		.uleb128 0x1f9
 11034 0195 CA630000 		.4byte	.LASF892
 11035 0199 05       		.byte	0x5
 11036 019a FD03     		.uleb128 0x1fd
 11037 019c C2780000 		.4byte	.LASF893
 11038 01a0 05       		.byte	0x5
 11039 01a1 8104     		.uleb128 0x201
 11040 01a3 8C1B0000 		.4byte	.LASF894
 11041 01a7 05       		.byte	0x5
 11042 01a8 8504     		.uleb128 0x205
 11043 01aa 3D2F0000 		.4byte	.LASF895
 11044 01ae 05       		.byte	0x5
 11045 01af 8904     		.uleb128 0x209
 11046 01b1 305D0000 		.4byte	.LASF896
 11047 01b5 05       		.byte	0x5
 11048 01b6 8D04     		.uleb128 0x20d
 11049 01b8 240D0000 		.4byte	.LASF897
 11050 01bc 05       		.byte	0x5
 11051 01bd 9104     		.uleb128 0x211
 11052 01bf DC190000 		.4byte	.LASF898
 11053 01c3 05       		.byte	0x5
 11054 01c4 9504     		.uleb128 0x215
 11055 01c6 DD630000 		.4byte	.LASF899
 11056 01ca 05       		.byte	0x5
 11057 01cb 9904     		.uleb128 0x219
 11058 01cd 8B310000 		.4byte	.LASF900
 11059 01d1 05       		.byte	0x5
 11060 01d2 9D04     		.uleb128 0x21d
 11061 01d4 310E0000 		.4byte	.LASF901
 11062 01d8 05       		.byte	0x5
 11063 01d9 A104     		.uleb128 0x221
 11064 01db AC670000 		.4byte	.LASF902
 11065 01df 05       		.byte	0x5
 11066 01e0 A504     		.uleb128 0x225
 11067 01e2 B5140000 		.4byte	.LASF903
 11068 01e6 05       		.byte	0x5
 11069 01e7 A904     		.uleb128 0x229
 11070 01e9 D6280000 		.4byte	.LASF904
 11071 01ed 05       		.byte	0x5
 11072 01ee AD04     		.uleb128 0x22d
 11073 01f0 247D0000 		.4byte	.LASF905
 11074 01f4 05       		.byte	0x5
 11075 01f5 B104     		.uleb128 0x231
 11076 01f7 B51D0000 		.4byte	.LASF906
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 262


 11077 01fb 05       		.byte	0x5
 11078 01fc B504     		.uleb128 0x235
 11079 01fe E78E0000 		.4byte	.LASF907
 11080 0202 05       		.byte	0x5
 11081 0203 B904     		.uleb128 0x239
 11082 0205 9F020000 		.4byte	.LASF908
 11083 0209 05       		.byte	0x5
 11084 020a BD04     		.uleb128 0x23d
 11085 020c F30A0000 		.4byte	.LASF909
 11086 0210 05       		.byte	0x5
 11087 0211 C104     		.uleb128 0x241
 11088 0213 CE860000 		.4byte	.LASF910
 11089 0217 05       		.byte	0x5
 11090 0218 C504     		.uleb128 0x245
 11091 021a C93F0000 		.4byte	.LASF911
 11092 021e 05       		.byte	0x5
 11093 021f C904     		.uleb128 0x249
 11094 0221 6E040000 		.4byte	.LASF912
 11095 0225 05       		.byte	0x5
 11096 0226 CD04     		.uleb128 0x24d
 11097 0228 AD350000 		.4byte	.LASF913
 11098 022c 05       		.byte	0x5
 11099 022d D104     		.uleb128 0x251
 11100 022f C2640000 		.4byte	.LASF914
 11101 0233 05       		.byte	0x5
 11102 0234 D504     		.uleb128 0x255
 11103 0236 751A0000 		.4byte	.LASF915
 11104 023a 05       		.byte	0x5
 11105 023b D904     		.uleb128 0x259
 11106 023d E3900000 		.4byte	.LASF916
 11107 0241 05       		.byte	0x5
 11108 0242 DD04     		.uleb128 0x25d
 11109 0244 396B0000 		.4byte	.LASF917
 11110 0248 05       		.byte	0x5
 11111 0249 E104     		.uleb128 0x261
 11112 024b 5F2F0000 		.4byte	.LASF918
 11113 024f 05       		.byte	0x5
 11114 0250 F704     		.uleb128 0x277
 11115 0252 D7610000 		.4byte	.LASF919
 11116 0256 05       		.byte	0x5
 11117 0257 FB04     		.uleb128 0x27b
 11118 0259 2F760000 		.4byte	.LASF920
 11119 025d 05       		.byte	0x5
 11120 025e FF04     		.uleb128 0x27f
 11121 0260 A8560000 		.4byte	.LASF921
 11122 0264 05       		.byte	0x5
 11123 0265 8305     		.uleb128 0x283
 11124 0267 6C0F0000 		.4byte	.LASF922
 11125 026b 05       		.byte	0x5
 11126 026c 8705     		.uleb128 0x287
 11127 026e F1410000 		.4byte	.LASF923
 11128 0272 05       		.byte	0x5
 11129 0273 8B05     		.uleb128 0x28b
 11130 0275 47670000 		.4byte	.LASF924
 11131 0279 05       		.byte	0x5
 11132 027a 9305     		.uleb128 0x293
 11133 027c 66700000 		.4byte	.LASF925
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 263


 11134 0280 05       		.byte	0x5
 11135 0281 9B05     		.uleb128 0x29b
 11136 0283 5F560000 		.4byte	.LASF926
 11137 0287 05       		.byte	0x5
 11138 0288 9F05     		.uleb128 0x29f
 11139 028a 961D0000 		.4byte	.LASF927
 11140 028e 05       		.byte	0x5
 11141 028f A305     		.uleb128 0x2a3
 11142 0291 D0250000 		.4byte	.LASF928
 11143 0295 05       		.byte	0x5
 11144 0296 A705     		.uleb128 0x2a7
 11145 0298 0F1A0000 		.4byte	.LASF929
 11146 029c 05       		.byte	0x5
 11147 029d AB05     		.uleb128 0x2ab
 11148 029f 55710000 		.4byte	.LASF930
 11149 02a3 05       		.byte	0x5
 11150 02a4 AF05     		.uleb128 0x2af
 11151 02a6 AD6D0000 		.4byte	.LASF931
 11152 02aa 05       		.byte	0x5
 11153 02ab B305     		.uleb128 0x2b3
 11154 02ad 2C8E0000 		.4byte	.LASF932
 11155 02b1 05       		.byte	0x5
 11156 02b2 B705     		.uleb128 0x2b7
 11157 02b4 7A340000 		.4byte	.LASF933
 11158 02b8 05       		.byte	0x5
 11159 02b9 BB05     		.uleb128 0x2bb
 11160 02bb 3F8A0000 		.4byte	.LASF934
 11161 02bf 05       		.byte	0x5
 11162 02c0 C705     		.uleb128 0x2c7
 11163 02c2 AB5B0000 		.4byte	.LASF935
 11164 02c6 05       		.byte	0x5
 11165 02c7 CB05     		.uleb128 0x2cb
 11166 02c9 64800000 		.4byte	.LASF936
 11167 02cd 05       		.byte	0x5
 11168 02ce D505     		.uleb128 0x2d5
 11169 02d0 CB410000 		.4byte	.LASF937
 11170 02d4 05       		.byte	0x5
 11171 02d5 D905     		.uleb128 0x2d9
 11172 02d7 CF170000 		.4byte	.LASF938
 11173 02db 05       		.byte	0x5
 11174 02dc DA05     		.uleb128 0x2da
 11175 02de 6F540000 		.4byte	.LASF939
 11176 02e2 05       		.byte	0x5
 11177 02e3 DB05     		.uleb128 0x2db
 11178 02e5 DF3D0000 		.4byte	.LASF940
 11179 02e9 05       		.byte	0x5
 11180 02ea DC05     		.uleb128 0x2dc
 11181 02ec CA460000 		.4byte	.LASF941
 11182 02f0 05       		.byte	0x5
 11183 02f1 DD05     		.uleb128 0x2dd
 11184 02f3 02530000 		.4byte	.LASF942
 11185 02f7 05       		.byte	0x5
 11186 02f8 DE05     		.uleb128 0x2de
 11187 02fa 9C540000 		.4byte	.LASF943
 11188 02fe 05       		.byte	0x5
 11189 02ff DF05     		.uleb128 0x2df
 11190 0301 9D630000 		.4byte	.LASF944
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 264


 11191 0305 05       		.byte	0x5
 11192 0306 E005     		.uleb128 0x2e0
 11193 0308 101D0000 		.4byte	.LASF945
 11194 030c 05       		.byte	0x5
 11195 030d E105     		.uleb128 0x2e1
 11196 030f D2230000 		.4byte	.LASF946
 11197 0313 05       		.byte	0x5
 11198 0314 E205     		.uleb128 0x2e2
 11199 0316 E9910000 		.4byte	.LASF947
 11200 031a 05       		.byte	0x5
 11201 031b E305     		.uleb128 0x2e3
 11202 031d 5F780000 		.4byte	.LASF948
 11203 0321 05       		.byte	0x5
 11204 0322 E405     		.uleb128 0x2e4
 11205 0324 902C0000 		.4byte	.LASF949
 11206 0328 05       		.byte	0x5
 11207 0329 E505     		.uleb128 0x2e5
 11208 032b C72E0000 		.4byte	.LASF950
 11209 032f 05       		.byte	0x5
 11210 0330 E605     		.uleb128 0x2e6
 11211 0332 4A0B0000 		.4byte	.LASF951
 11212 0336 05       		.byte	0x5
 11213 0337 E705     		.uleb128 0x2e7
 11214 0339 A6460000 		.4byte	.LASF952
 11215 033d 05       		.byte	0x5
 11216 033e EB05     		.uleb128 0x2eb
 11217 0340 08370000 		.4byte	.LASF953
 11218 0344 05       		.byte	0x5
 11219 0345 EC05     		.uleb128 0x2ec
 11220 0347 6B6F0000 		.4byte	.LASF954
 11221 034b 05       		.byte	0x5
 11222 034c ED05     		.uleb128 0x2ed
 11223 034e B5900000 		.4byte	.LASF955
 11224 0352 05       		.byte	0x5
 11225 0353 EE05     		.uleb128 0x2ee
 11226 0355 D1380000 		.4byte	.LASF956
 11227 0359 00       		.byte	0
 11228              		.section	.debug_macro,"G",%progbits,wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370,comdat
 11229              	.Ldebug_macro27:
 11230 0000 0400     		.2byte	0x4
 11231 0002 00       		.byte	0
 11232 0003 05       		.byte	0x5
 11233 0004 60       		.uleb128 0x60
 11234 0005 65480000 		.4byte	.LASF958
 11235 0009 05       		.byte	0x5
 11236 000a 7F       		.uleb128 0x7f
 11237 000b 6D3D0000 		.4byte	.LASF959
 11238 000f 05       		.byte	0x5
 11239 0010 AB01     		.uleb128 0xab
 11240 0012 54890000 		.4byte	.LASF960
 11241 0016 05       		.byte	0x5
 11242 0017 B401     		.uleb128 0xb4
 11243 0019 E4390000 		.4byte	.LASF961
 11244 001d 05       		.byte	0x5
 11245 001e BD01     		.uleb128 0xbd
 11246 0020 9E6C0000 		.4byte	.LASF962
 11247 0024 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 265


 11248 0025 C701     		.uleb128 0xc7
 11249 0027 65790000 		.4byte	.LASF963
 11250 002b 05       		.byte	0x5
 11251 002c D001     		.uleb128 0xd0
 11252 002e 071C0000 		.4byte	.LASF964
 11253 0032 05       		.byte	0x5
 11254 0033 D801     		.uleb128 0xd8
 11255 0035 CA040000 		.4byte	.LASF965
 11256 0039 05       		.byte	0x5
 11257 003a E001     		.uleb128 0xe0
 11258 003c F24A0000 		.4byte	.LASF966
 11259 0040 05       		.byte	0x5
 11260 0041 E801     		.uleb128 0xe8
 11261 0043 11770000 		.4byte	.LASF967
 11262 0047 05       		.byte	0x5
 11263 0048 F101     		.uleb128 0xf1
 11264 004a 8B8E0000 		.4byte	.LASF968
 11265 004e 05       		.byte	0x5
 11266 004f F601     		.uleb128 0xf6
 11267 0051 C6840000 		.4byte	.LASF969
 11268 0055 05       		.byte	0x5
 11269 0056 8C02     		.uleb128 0x10c
 11270 0058 DB7A0000 		.4byte	.LASF970
 11271 005c 05       		.byte	0x5
 11272 005d AA02     		.uleb128 0x12a
 11273 005f 6B070000 		.4byte	.LASF971
 11274 0063 05       		.byte	0x5
 11275 0064 B502     		.uleb128 0x135
 11276 0066 E1150000 		.4byte	.LASF972
 11277 006a 05       		.byte	0x5
 11278 006b BD02     		.uleb128 0x13d
 11279 006d A51E0000 		.4byte	.LASF973
 11280 0071 05       		.byte	0x5
 11281 0072 C402     		.uleb128 0x144
 11282 0074 FB180000 		.4byte	.LASF974
 11283 0078 00       		.byte	0
 11284              		.section	.debug_macro,"G",%progbits,wm4.task.h.84.e110bc08aaffa67ce542955b890201b4,comdat
 11285              	.Ldebug_macro28:
 11286 0000 0400     		.2byte	0x4
 11287 0002 00       		.byte	0
 11288 0003 05       		.byte	0x5
 11289 0004 54       		.uleb128 0x54
 11290 0005 C0720000 		.4byte	.LASF975
 11291 0009 05       		.byte	0x5
 11292 000a 55       		.uleb128 0x55
 11293 000b A8530000 		.4byte	.LASF976
 11294 000f 05       		.byte	0x5
 11295 0010 56       		.uleb128 0x56
 11296 0011 15130000 		.4byte	.LASF977
 11297 0015 05       		.byte	0x5
 11298 0016 57       		.uleb128 0x57
 11299 0017 E45C0000 		.4byte	.LASF978
 11300 001b 05       		.byte	0x5
 11301 001c B201     		.uleb128 0xb2
 11302 001e 41140000 		.4byte	.LASF979
 11303 0022 05       		.byte	0x5
 11304 0023 BC01     		.uleb128 0xbc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 266


 11305 0025 71320000 		.4byte	.LASF980
 11306 0029 05       		.byte	0x5
 11307 002a CA01     		.uleb128 0xca
 11308 002c B0420000 		.4byte	.LASF981
 11309 0030 05       		.byte	0x5
 11310 0031 D801     		.uleb128 0xd8
 11311 0033 3E700000 		.4byte	.LASF982
 11312 0037 05       		.byte	0x5
 11313 0038 E201     		.uleb128 0xe2
 11314 003a 5D550000 		.4byte	.LASF983
 11315 003e 05       		.byte	0x5
 11316 003f EC01     		.uleb128 0xec
 11317 0041 FE110000 		.4byte	.LASF984
 11318 0045 05       		.byte	0x5
 11319 0046 F101     		.uleb128 0xf1
 11320 0048 2C580000 		.4byte	.LASF985
 11321 004c 05       		.byte	0x5
 11322 004d F201     		.uleb128 0xf2
 11323 004f 308D0000 		.4byte	.LASF986
 11324 0053 05       		.byte	0x5
 11325 0054 F301     		.uleb128 0xf3
 11326 0056 82860000 		.4byte	.LASF987
 11327 005a 05       		.byte	0x5
 11328 005b CA02     		.uleb128 0x14a
 11329 005d F2240000 		.4byte	.LASF988
 11330 0061 05       		.byte	0x5
 11331 0062 8F03     		.uleb128 0x18f
 11332 0064 19730000 		.4byte	.LASF989
 11333 0068 00       		.byte	0
 11334              		.section	.debug_macro,"G",%progbits,wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d,comdat
 11335              	.Ldebug_macro29:
 11336 0000 0400     		.2byte	0x4
 11337 0002 00       		.byte	0
 11338 0003 05       		.byte	0x5
 11339 0004 5C       		.uleb128 0x5c
 11340 0005 943E0000 		.4byte	.LASF991
 11341 0009 05       		.byte	0x5
 11342 000a 5D       		.uleb128 0x5d
 11343 000b F56C0000 		.4byte	.LASF992
 11344 000f 05       		.byte	0x5
 11345 0010 5E       		.uleb128 0x5e
 11346 0011 84490000 		.4byte	.LASF993
 11347 0015 05       		.byte	0x5
 11348 0016 5F       		.uleb128 0x5f
 11349 0017 FF300000 		.4byte	.LASF994
 11350 001b 05       		.byte	0x5
 11351 001c 60       		.uleb128 0x60
 11352 001d 9C6E0000 		.4byte	.LASF995
 11353 0021 05       		.byte	0x5
 11354 0022 61       		.uleb128 0x61
 11355 0023 E5590000 		.4byte	.LASF996
 11356 0027 05       		.byte	0x5
 11357 0028 62       		.uleb128 0x62
 11358 0029 24150000 		.4byte	.LASF997
 11359 002d 05       		.byte	0x5
 11360 002e 63       		.uleb128 0x63
 11361 002f 98570000 		.4byte	.LASF998
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 267


 11362 0033 05       		.byte	0x5
 11363 0034 65       		.uleb128 0x65
 11364 0035 0E460000 		.4byte	.LASF999
 11365 0039 05       		.byte	0x5
 11366 003a 66       		.uleb128 0x66
 11367 003b EC480000 		.4byte	.LASF1000
 11368 003f 05       		.byte	0x5
 11369 0040 67       		.uleb128 0x67
 11370 0041 D5210000 		.4byte	.LASF1001
 11371 0045 05       		.byte	0x5
 11372 0046 68       		.uleb128 0x68
 11373 0047 B30A0000 		.4byte	.LASF1002
 11374 004b 05       		.byte	0x5
 11375 004c 69       		.uleb128 0x69
 11376 004d B5910000 		.4byte	.LASF1003
 11377 0051 05       		.byte	0x5
 11378 0052 FA02     		.uleb128 0x17a
 11379 0054 EF690000 		.4byte	.LASF1004
 11380 0058 05       		.byte	0x5
 11381 0059 A403     		.uleb128 0x1a4
 11382 005b B6700000 		.4byte	.LASF1005
 11383 005f 05       		.byte	0x5
 11384 0060 F403     		.uleb128 0x1f4
 11385 0062 F9630000 		.4byte	.LASF1006
 11386 0066 05       		.byte	0x5
 11387 0067 9A04     		.uleb128 0x21a
 11388 0069 97660000 		.4byte	.LASF1007
 11389 006d 05       		.byte	0x5
 11390 006e 9605     		.uleb128 0x296
 11391 0070 757F0000 		.4byte	.LASF1008
 11392 0074 05       		.byte	0x5
 11393 0075 EC05     		.uleb128 0x2ec
 11394 0077 E8200000 		.4byte	.LASF1009
 11395 007b 05       		.byte	0x5
 11396 007c AB06     		.uleb128 0x32b
 11397 007e EE440000 		.4byte	.LASF1010
 11398 0082 05       		.byte	0x5
 11399 0083 F406     		.uleb128 0x374
 11400 0085 BE870000 		.4byte	.LASF1011
 11401 0089 05       		.byte	0x5
 11402 008a CA07     		.uleb128 0x3ca
 11403 008c DA2B0000 		.4byte	.LASF1012
 11404 0090 00       		.byte	0
 11405              		.section	.debug_macro,"G",%progbits,wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95,comdat
 11406              	.Ldebug_macro30:
 11407 0000 0400     		.2byte	0x4
 11408 0002 00       		.byte	0
 11409 0003 05       		.byte	0x5
 11410 0004 43       		.uleb128 0x43
 11411 0005 272D0000 		.4byte	.LASF1013
 11412 0009 05       		.byte	0x5
 11413 000a 58       		.uleb128 0x58
 11414 000b C9340000 		.4byte	.LASF1014
 11415 000f 05       		.byte	0x5
 11416 0010 59       		.uleb128 0x59
 11417 0011 C42D0000 		.4byte	.LASF1015
 11418 0015 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 268


 11419              		.section	.debug_line,"",%progbits
 11420              	.Ldebug_line0:
 11421 0000 CF0A0000 		.section	.debug_str,"MS",%progbits,1
 11421      0200E902 
 11421      00000201 
 11421      FB0E0D00 
 11421      01010101 
 11422              	.LASF574:
 11423 0000 5F5F474E 		.ascii	"__GNUCLIKE___SECTION 1\000"
 11423      55434C49 
 11423      4B455F5F 
 11423      5F534543 
 11423      54494F4E 
 11424              	.LASF1050:
 11425 0017 53746163 		.ascii	"StackT_t\000"
 11425      6B545F74 
 11425      00
 11426              	.LASF157:
 11427 0020 5F5F4445 		.ascii	"__DECIMAL_DIG__ 17\000"
 11427      43494D41 
 11427      4C5F4449 
 11427      475F5F20 
 11427      313700
 11428              	.LASF528:
 11429 0033 5F524545 		.ascii	"_REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)\000"
 11429      4E545F4D 
 11429      505F5245 
 11429      53554C54 
 11429      5F4B2870 
 11430              	.LASF136:
 11431 005e 5F5F464C 		.ascii	"__FLT_HAS_QUIET_NAN__ 1\000"
 11431      545F4841 
 11431      535F5155 
 11431      4945545F 
 11431      4E414E5F 
 11432              	.LASF1218:
 11433 0076 78596965 		.ascii	"xYieldPending\000"
 11433      6C645065 
 11433      6E64696E 
 11433      6700
 11434              	.LASF110:
 11435 0084 5F5F494E 		.ascii	"__INT_FAST32_MAX__ 2147483647\000"
 11435      545F4641 
 11435      53543332 
 11435      5F4D4158 
 11435      5F5F2032 
 11436              	.LASF1035:
 11437 00a2 756E7369 		.ascii	"unsigned char\000"
 11437      676E6564 
 11437      20636861 
 11437      7200
 11438              	.LASF545:
 11439 00b0 5F524545 		.ascii	"_REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._ge"
 11439      4E545F47 
 11439      45544441 
 11439      54455F45 
 11439      52525F50 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 269


 11440 00e3 74646174 		.ascii	"tdate_err))\000"
 11440      655F6572 
 11440      72292900 
 11441              	.LASF306:
 11442 00ef 5F5F4348 		.ascii	"__CHAR_UNSIGNED__ 1\000"
 11442      41525F55 
 11442      4E534947 
 11442      4E45445F 
 11442      5F203100 
 11443              	.LASF1033:
 11444 0103 73697A65 		.ascii	"size_t\000"
 11444      5F7400
 11445              	.LASF550:
 11446 010a 5F474C4F 		.ascii	"_GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)\000"
 11446      42414C5F 
 11446      41544558 
 11446      49542028 
 11446      5F474C4F 
 11447              	.LASF856:
 11448 0132 74726163 		.ascii	"traceTASK_SWITCHED_IN() \000"
 11448      65544153 
 11448      4B5F5357 
 11448      49544348 
 11448      45445F49 
 11449              	.LASF186:
 11450 014b 5F5F5346 		.ascii	"__SFRACT_FBIT__ 7\000"
 11450      52414354 
 11450      5F464249 
 11450      545F5F20 
 11450      3700
 11451              	.LASF1044:
 11452 015d 73697A65 		.ascii	"sizetype\000"
 11452      74797065 
 11452      00
 11453              	.LASF71:
 11454 0166 5F5F4C4F 		.ascii	"__LONG_LONG_MAX__ 9223372036854775807LL\000"
 11454      4E475F4C 
 11454      4F4E475F 
 11454      4D41585F 
 11454      5F203932 
 11455              	.LASF79:
 11456 018e 5F5F494E 		.ascii	"__INTMAX_C(c) c ## LL\000"
 11456      544D4158 
 11456      5F432863 
 11456      29206320 
 11456      2323204C 
 11457              	.LASF384:
 11458 01a4 5F524541 		.ascii	"_READ_WRITE_BUFSIZE_TYPE int\000"
 11458      445F5752 
 11458      4954455F 
 11458      42554653 
 11458      495A455F 
 11459              	.LASF755:
 11460 01c1 636F6E66 		.ascii	"configIDLE_SHOULD_YIELD 0\000"
 11460      69674944 
 11460      4C455F53 
 11460      484F554C 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 270


 11460      445F5949 
 11461              	.LASF1154:
 11462 01db 75785175 		.ascii	"uxQueue\000"
 11462      65756500 
 11463              	.LASF258:
 11464 01e3 5F5F4C4C 		.ascii	"__LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)\000"
 11464      41434355 
 11464      4D5F4D49 
 11464      4E5F5F20 
 11464      282D3058 
 11465              	.LASF250:
 11466 020a 5F5F4C41 		.ascii	"__LACCUM_EPSILON__ 0x1P-31LK\000"
 11466      4343554D 
 11466      5F455053 
 11466      494C4F4E 
 11466      5F5F2030 
 11467              	.LASF703:
 11468 0227 494E5436 		.ascii	"INT64_MAX __INT64_MAX__\000"
 11468      345F4D41 
 11468      58205F5F 
 11468      494E5436 
 11468      345F4D41 
 11469              	.LASF183:
 11470 023f 5F5F4445 		.ascii	"__DEC128_MAX__ 9.999999999999999999999999999999999E"
 11470      43313238 
 11470      5F4D4158 
 11470      5F5F2039 
 11470      2E393939 
 11471 0272 36313434 		.ascii	"6144DL\000"
 11471      444C00
 11472              	.LASF404:
 11473 0279 5F4C4F4E 		.ascii	"_LONG_DOUBLE long double\000"
 11473      475F444F 
 11473      55424C45 
 11473      206C6F6E 
 11473      6720646F 
 11474              	.LASF1108:
 11475 0292 75735374 		.ascii	"usStackDepth\000"
 11475      61636B44 
 11475      65707468 
 11475      00
 11476              	.LASF908:
 11477 029f 74726163 		.ascii	"traceEVENT_GROUP_SYNC_END(xEventGroup,uxBitsToSet,u"
 11477      65455645 
 11477      4E545F47 
 11477      524F5550 
 11477      5F53594E 
 11478 02d2 78426974 		.ascii	"xBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutO"
 11478      73546F57 
 11478      61697446 
 11478      6F722C78 
 11478      54696D65 
 11479 0305 63637572 		.ascii	"ccurred\000"
 11479      72656400 
 11480              	.LASF772:
 11481 030d 494E434C 		.ascii	"INCLUDE_uxTaskGetStackHighWaterMark 1\000"
 11481      5544455F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 271


 11481      75785461 
 11481      736B4765 
 11481      74537461 
 11482              	.LASF171:
 11483 0333 5F5F4445 		.ascii	"__DEC32_SUBNORMAL_MIN__ 0.000001E-95DF\000"
 11483      4333325F 
 11483      5355424E 
 11483      4F524D41 
 11483      4C5F4D49 
 11484              	.LASF275:
 11485 035a 5F5F5451 		.ascii	"__TQ_IBIT__ 0\000"
 11485      5F494249 
 11485      545F5F20 
 11485      3000
 11486              	.LASF731:
 11487 0368 57494E54 		.ascii	"WINT_MIN __WINT_MIN__\000"
 11487      5F4D494E 
 11487      205F5F57 
 11487      494E545F 
 11487      4D494E5F 
 11488              	.LASF511:
 11489 037e 5F524545 		.ascii	"_REENT_SIGNAL_SIZE 24\000"
 11489      4E545F53 
 11489      49474E41 
 11489      4C5F5349 
 11489      5A452032 
 11490              	.LASF760:
 11491 0394 636F6E66 		.ascii	"configUSE_ALTERNATIVE_API 0\000"
 11491      69675553 
 11491      455F414C 
 11491      5445524E 
 11491      41544956 
 11492              	.LASF546:
 11493 03b0 5F4B6D61 		.ascii	"_Kmax (sizeof (size_t) << 3)\000"
 11493      78202873 
 11493      697A656F 
 11493      66202873 
 11493      697A655F 
 11494              	.LASF11:
 11495 03cd 5F5F4154 		.ascii	"__ATOMIC_CONSUME 1\000"
 11495      4F4D4943 
 11495      5F434F4E 
 11495      53554D45 
 11495      203100
 11496              	.LASF251:
 11497 03e0 5F5F554C 		.ascii	"__ULACCUM_FBIT__ 32\000"
 11497      41434355 
 11497      4D5F4642 
 11497      49545F5F 
 11497      20333200 
 11498              	.LASF1148:
 11499 03f4 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11499      6B476574 
 11499      5469636B 
 11499      436F756E 
 11499      7446726F 
 11500              	.LASF238:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 272


 11501 040d 5F5F4143 		.ascii	"__ACCUM_MIN__ (-0X1P15K-0X1P15K)\000"
 11501      43554D5F 
 11501      4D494E5F 
 11501      5F20282D 
 11501      30583150 
 11502              	.LASF859:
 11503 042e 74726163 		.ascii	"traceLOW_POWER_IDLE_END() \000"
 11503      654C4F57 
 11503      5F504F57 
 11503      45525F49 
 11503      444C455F 
 11504              	.LASF1084:
 11505 0449 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11505      72795265 
 11505      67696F6E 
 11505      5F7400
 11506              	.LASF572:
 11507 0458 5F5F474E 		.ascii	"__GNUCLIKE___TYPEOF 1\000"
 11507      55434C49 
 11507      4B455F5F 
 11507      5F545950 
 11507      454F4620 
 11508              	.LASF912:
 11509 046e 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(xEventGroup,ux"
 11509      65455645 
 11509      4E545F47 
 11509      524F5550 
 11509      5F434C45 
 11510 04a1 42697473 		.ascii	"BitsToClear) \000"
 11510      546F436C 
 11510      65617229 
 11510      2000
 11511              	.LASF1098:
 11512 04af 78457665 		.ascii	"xEventListItem\000"
 11512      6E744C69 
 11512      73744974 
 11512      656D00
 11513              	.LASF1032:
 11514 04be 7369676E 		.ascii	"signed char\000"
 11514      65642063 
 11514      68617200 
 11515              	.LASF965:
 11516 04ca 6C697374 		.ascii	"listGET_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd"
 11516      4745545F 
 11516      48454144 
 11516      5F454E54 
 11516      52592870 
 11517 04fd 20292E70 		.ascii	" ).pxNext )\000"
 11517      784E6578 
 11517      74202900 
 11518              	.LASF1075:
 11519 0509 65546173 		.ascii	"eTaskState\000"
 11519      6B537461 
 11519      746500
 11520              	.LASF113:
 11521 0514 5F5F5549 		.ascii	"__UINT_FAST16_MAX__ 4294967295U\000"
 11521      4E545F46 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 273


 11521      41535431 
 11521      365F4D41 
 11521      585F5F20 
 11522              	.LASF15:
 11523 0534 5F5F5349 		.ascii	"__SIZEOF_LONG_LONG__ 8\000"
 11523      5A454F46 
 11523      5F4C4F4E 
 11523      475F4C4F 
 11523      4E475F5F 
 11524              	.LASF1023:
 11525 054b 74736B53 		.ascii	"tskSUSPENDED_CHAR ( 'S' )\000"
 11525      55535045 
 11525      4E444544 
 11525      5F434841 
 11525      52202820 
 11526              	.LASF142:
 11527 0565 5F5F4442 		.ascii	"__DBL_MAX_10_EXP__ 308\000"
 11527      4C5F4D41 
 11527      585F3130 
 11527      5F455850 
 11527      5F5F2033 
 11528              	.LASF1164:
 11529 057c 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11529      6B506C61 
 11529      63654F6E 
 11529      556E6F72 
 11529      64657265 
 11530              	.LASF641:
 11531 059b 5F5F5243 		.ascii	"__RCSID_SOURCE(s) struct __hack\000"
 11531      5349445F 
 11531      534F5552 
 11531      43452873 
 11531      29207374 
 11532              	.LASF198:
 11533 05bb 5F5F4652 		.ascii	"__FRACT_MIN__ (-0.5R-0.5R)\000"
 11533      4143545F 
 11533      4D494E5F 
 11533      5F20282D 
 11533      302E3552 
 11534              	.LASF264:
 11535 05d6 5F5F554C 		.ascii	"__ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK\000"
 11535      4C414343 
 11535      554D5F4D 
 11535      41585F5F 
 11535      20305846 
 11536              	.LASF778:
 11537 0602 636F6E66 		.ascii	"configNET_MASK1 255\000"
 11537      69674E45 
 11537      545F4D41 
 11537      534B3120 
 11537      32353500 
 11538              	.LASF234:
 11539 0616 5F5F5553 		.ascii	"__USACCUM_MAX__ 0XFFFFP-8UHK\000"
 11539      41434355 
 11539      4D5F4D41 
 11539      585F5F20 
 11539      30584646 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 274


 11540              	.LASF1152:
 11541 0633 70756C54 		.ascii	"pulTotalRunTime\000"
 11541      6F74616C 
 11541      52756E54 
 11541      696D6500 
 11542              	.LASF346:
 11543 0643 5F5F4152 		.ascii	"__ARM_NEON_FP 4\000"
 11543      4D5F4E45 
 11543      4F4E5F46 
 11543      50203400 
 11544              	.LASF839:
 11545 0653 494E434C 		.ascii	"INCLUDE_pcTaskGetTaskName 0\000"
 11545      5544455F 
 11545      70635461 
 11545      736B4765 
 11545      74546173 
 11546              	.LASF271:
 11547 066f 5F5F5351 		.ascii	"__SQ_IBIT__ 0\000"
 11547      5F494249 
 11547      545F5F20 
 11547      3000
 11548              	.LASF25:
 11549 067d 5F5F4F52 		.ascii	"__ORDER_PDP_ENDIAN__ 3412\000"
 11549      4445525F 
 11549      5044505F 
 11549      454E4449 
 11549      414E5F5F 
 11550              	.LASF29:
 11551 0697 5F5F5349 		.ascii	"__SIZE_TYPE__ unsigned int\000"
 11551      5A455F54 
 11551      5950455F 
 11551      5F20756E 
 11551      7369676E 
 11552              	.LASF174:
 11553 06b2 5F5F4445 		.ascii	"__DEC64_MAX_EXP__ 385\000"
 11553      4336345F 
 11553      4D41585F 
 11553      4558505F 
 11553      5F203338 
 11554              	.LASF742:
 11555 06c8 5F474343 		.ascii	"_GCC_WRAP_STDINT_H \000"
 11555      5F575241 
 11555      505F5354 
 11555      44494E54 
 11555      5F482000 
 11556              	.LASF134:
 11557 06dc 5F5F464C 		.ascii	"__FLT_HAS_DENORM__ 1\000"
 11557      545F4841 
 11557      535F4445 
 11557      4E4F524D 
 11557      5F5F2031 
 11558              	.LASF38:
 11559 06f1 5F5F494E 		.ascii	"__INT8_TYPE__ signed char\000"
 11559      54385F54 
 11559      5950455F 
 11559      5F207369 
 11559      676E6564 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 275


 11560              	.LASF334:
 11561 070b 5F5F4152 		.ascii	"__ARM_ARCH_PROFILE 77\000"
 11561      4D5F4152 
 11561      43485F50 
 11561      524F4649 
 11561      4C452037 
 11562              	.LASF1076:
 11563 0721 7854494D 		.ascii	"xTIME_OUT\000"
 11563      455F4F55 
 11563      5400
 11564              	.LASF398:
 11565 072b 5F455846 		.ascii	"_EXFUN(name,proto) name proto\000"
 11565      554E286E 
 11565      616D652C 
 11565      70726F74 
 11565      6F29206E 
 11566              	.LASF1167:
 11567 0749 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 11567      6B52656D 
 11567      6F766546 
 11567      726F6D55 
 11567      6E6F7264 
 11568              	.LASF971:
 11569 076b 6C697374 		.ascii	"listGET_OWNER_OF_HEAD_ENTRY(pxList) ( (&( ( pxList "
 11569      4745545F 
 11569      4F574E45 
 11569      525F4F46 
 11569      5F484541 
 11570 079e 292D3E78 		.ascii	")->xListEnd ))->pxNext->pvOwner )\000"
 11570      4C697374 
 11570      456E6420 
 11570      29292D3E 
 11570      70784E65 
 11571              	.LASF1214:
 11572 07c0 78546963 		.ascii	"xTickCount\000"
 11572      6B436F75 
 11572      6E7400
 11573              	.LASF1102:
 11574 07cb 75785461 		.ascii	"uxTaskNumber\000"
 11574      736B4E75 
 11574      6D626572 
 11574      00
 11575              	.LASF151:
 11576 07d8 5F5F4C44 		.ascii	"__LDBL_MANT_DIG__ 53\000"
 11576      424C5F4D 
 11576      414E545F 
 11576      4449475F 
 11576      5F203533 
 11577              	.LASF1186:
 11578 07ed 70784C69 		.ascii	"pxList\000"
 11578      737400
 11579              	.LASF834:
 11580 07f4 706F7274 		.ascii	"portUSING_MPU_WRAPPERS 0\000"
 11580      5553494E 
 11580      475F4D50 
 11580      555F5752 
 11580      41505045 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 276


 11581              	.LASF101:
 11582 080d 5F5F5549 		.ascii	"__UINT8_C(c) c\000"
 11582      4E54385F 
 11582      43286329 
 11582      206300
 11583              	.LASF39:
 11584 081c 5F5F494E 		.ascii	"__INT16_TYPE__ short int\000"
 11584      5431365F 
 11584      54595045 
 11584      5F5F2073 
 11584      686F7274 
 11585              	.LASF605:
 11586 0835 5F5F616C 		.ascii	"__aligned(x) __attribute__((__aligned__(x)))\000"
 11586      69676E65 
 11586      64287829 
 11586      205F5F61 
 11586      74747269 
 11587              	.LASF855:
 11588 0862 74726163 		.ascii	"traceEND() \000"
 11588      65454E44 
 11588      28292000 
 11589              	.LASF1074:
 11590 086e 6544656C 		.ascii	"eDeleted\000"
 11590      65746564 
 11590      00
 11591              	.LASF650:
 11592 0877 5F5F4953 		.ascii	"__ISO_C_VISIBLE 2011\000"
 11592      4F5F435F 
 11592      56495349 
 11592      424C4520 
 11592      32303131 
 11593              	.LASF854:
 11594 088c 74726163 		.ascii	"traceSTART() \000"
 11594      65535441 
 11594      52542829 
 11594      2000
 11595              	.LASF822:
 11596 089a 706F7274 		.ascii	"portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPo"
 11596      53555050 
 11596      52455353 
 11596      5F544943 
 11596      4B535F41 
 11597 08cd 72745375 		.ascii	"rtSuppressTicksAndSleep( xExpectedIdleTime )\000"
 11597      70707265 
 11597      73735469 
 11597      636B7341 
 11597      6E64536C 
 11598              	.LASF1100:
 11599 08fa 70785374 		.ascii	"pxStack\000"
 11599      61636B00 
 11600              	.LASF563:
 11601 0902 5F5F756E 		.ascii	"__unbounded \000"
 11601      626F756E 
 11601      64656420 
 11601      00
 11602              	.LASF718:
 11603 090f 494E545F 		.ascii	"INT_FAST64_MAX __INT_FAST64_MAX__\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 277


 11603      46415354 
 11603      36345F4D 
 11603      4158205F 
 11603      5F494E54 
 11604              	.LASF307:
 11605 0931 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1\000"
 11605      435F4841 
 11605      56455F53 
 11605      594E435F 
 11605      434F4D50 
 11606              	.LASF294:
 11607 0956 5F5F5548 		.ascii	"__UHA_FBIT__ 8\000"
 11607      415F4642 
 11607      49545F5F 
 11607      203800
 11608              	.LASF775:
 11609 0965 636F6E66 		.ascii	"configIP_ADDR2 0\000"
 11609      69674950 
 11609      5F414444 
 11609      52322030 
 11609      00
 11610              	.LASF1:
 11611 0976 5F5F5354 		.ascii	"__STDC_HOSTED__ 1\000"
 11611      44435F48 
 11611      4F535445 
 11611      445F5F20 
 11611      3100
 11612              	.LASF221:
 11613 0988 5F5F554C 		.ascii	"__ULLFRACT_FBIT__ 64\000"
 11613      4C465241 
 11613      43545F46 
 11613      4249545F 
 11613      5F203634 
 11614              	.LASF367:
 11615 099d 5F4C4442 		.ascii	"_LDBL_EQ_DBL 1\000"
 11615      4C5F4551 
 11615      5F44424C 
 11615      203100
 11616              	.LASF1086:
 11617 09ac 7848616E 		.ascii	"xHandle\000"
 11617      646C6500 
 11618              	.LASF694:
 11619 09b4 494E545F 		.ascii	"INT_LEAST16_MAX __INT_LEAST16_MAX__\000"
 11619      4C454153 
 11619      5431365F 
 11619      4D415820 
 11619      5F5F494E 
 11620              	.LASF527:
 11621 09d8 5F524545 		.ascii	"_REENT_MP_RESULT(ptr) ((ptr)->_result)\000"
 11621      4E545F4D 
 11621      505F5245 
 11621      53554C54 
 11621      28707472 
 11622              	.LASF57:
 11623 09ff 5F5F494E 		.ascii	"__INT_FAST64_TYPE__ long long int\000"
 11623      545F4641 
 11623      53543634 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 278


 11623      5F545950 
 11623      455F5F20 
 11624              	.LASF32:
 11625 0a21 5F5F5749 		.ascii	"__WINT_TYPE__ unsigned int\000"
 11625      4E545F54 
 11625      5950455F 
 11625      5F20756E 
 11625      7369676E 
 11626              	.LASF534:
 11627 0a3c 5F524545 		.ascii	"_REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok"
 11627      4E545F53 
 11627      5452544F 
 11627      4B5F4C41 
 11627      53542870 
 11628 0a6f 5F6C6173 		.ascii	"_last)\000"
 11628      742900
 11629              	.LASF1202:
 11630 0a76 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11630      736B4765 
 11630      744E756D 
 11630      6265724F 
 11630      66546173 
 11631              	.LASF876:
 11632 0a8d 74726163 		.ascii	"traceQUEUE_SEND(pxQueue) \000"
 11632      65515545 
 11632      55455F53 
 11632      454E4428 
 11632      70785175 
 11633              	.LASF414:
 11634 0aa7 5F5F5349 		.ascii	"__SIZE_T__ \000"
 11634      5A455F54 
 11634      5F5F2000 
 11635              	.LASF1002:
 11636 0ab3 746D7243 		.ascii	"tmrCOMMAND_STOP_FROM_ISR ( ( BaseT_t ) 8 )\000"
 11636      4F4D4D41 
 11636      4E445F53 
 11636      544F505F 
 11636      46524F4D 
 11637              	.LASF468:
 11638 0ade 5F5F4558 		.ascii	"__EXP(x) __ ##x ##__\000"
 11638      50287829 
 11638      205F5F20 
 11638      23237820 
 11638      23235F5F 
 11639              	.LASF909:
 11640 0af3 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_BLOCK(xEventGroup,uxBits"
 11640      65455645 
 11640      4E545F47 
 11640      524F5550 
 11640      5F574149 
 11641 0b26 546F5761 		.ascii	"ToWaitFor) \000"
 11641      6974466F 
 11641      72292000 
 11642              	.LASF1200:
 11643 0b32 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11643      6B507269 
 11643      6F726974 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 279


 11643      79446973 
 11643      696E6865 
 11644              	.LASF951:
 11645 0b4a 70645441 		.ascii	"pdTASK_HOOK_CODE TaskHookFunction_t\000"
 11645      534B5F48 
 11645      4F4F4B5F 
 11645      434F4445 
 11645      20546173 
 11646              	.LASF91:
 11647 0b6e 5F5F5549 		.ascii	"__UINT64_MAX__ 18446744073709551615ULL\000"
 11647      4E543634 
 11647      5F4D4158 
 11647      5F5F2031 
 11647      38343436 
 11648              	.LASF1222:
 11649 0b95 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 11649      4320342E 
 11649      392E3320 
 11649      32303135 
 11649      30333033 
 11650 0bc8 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -g"
 11650      20726576 
 11650      6973696F 
 11650      6E203232 
 11650      31323230 
 11651 0bfb 67646233 		.ascii	"gdb3 -O0 -std=gnu90 -ffunction-sections -fdata-sect"
 11651      202D4F30 
 11651      202D7374 
 11651      643D676E 
 11651      75393020 
 11652 0c2e 696F6E73 		.ascii	"ions\000"
 11652      00
 11653              	.LASF861:
 11654 0c33 74726163 		.ascii	"traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInh"
 11654      65544153 
 11654      4B5F5052 
 11654      494F5249 
 11654      54595F49 
 11655 0c66 65726974 		.ascii	"eritedPriority) \000"
 11655      65645072 
 11655      696F7269 
 11655      74792920 
 11655      00
 11656              	.LASF530:
 11657 0c77 5F524545 		.ascii	"_REENT_MP_FREELIST(ptr) ((ptr)->_freelist)\000"
 11657      4E545F4D 
 11657      505F4652 
 11657      45454C49 
 11657      53542870 
 11658              	.LASF990:
 11659 0ca2 54494D45 		.ascii	"TIMERS_H \000"
 11659      52535F48 
 11659      2000
 11660              	.LASF447:
 11661 0cac 5F5F6E65 		.ascii	"__need_wchar_t\000"
 11661      65645F77 
 11661      63686172 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 280


 11661      5F7400
 11662              	.LASF811:
 11663 0cbb 706F7274 		.ascii	"portYIELD() vPortYield()\000"
 11663      5949454C 
 11663      44282920 
 11663      76506F72 
 11663      74596965 
 11664              	.LASF852:
 11665 0cd4 706F7274 		.ascii	"portSETUP_TCB(pxTCB) ( void ) pxTCB\000"
 11665      53455455 
 11665      505F5443 
 11665      42287078 
 11665      54434229 
 11666              	.LASF484:
 11667 0cf8 5F5F6C6F 		.ascii	"__lock_close_recursive(lock) (_CAST_VOID 0)\000"
 11667      636B5F63 
 11667      6C6F7365 
 11667      5F726563 
 11667      75727369 
 11668              	.LASF897:
 11669 0d24 74726163 		.ascii	"traceTASK_INCREMENT_TICK(xTickCount) \000"
 11669      65544153 
 11669      4B5F494E 
 11669      4352454D 
 11669      454E545F 
 11670              	.LASF698:
 11671 0d4a 55494E54 		.ascii	"UINT32_MAX __UINT32_MAX__\000"
 11671      33325F4D 
 11671      4158205F 
 11671      5F55494E 
 11671      5433325F 
 11672              	.LASF460:
 11673 0d64 5F425344 		.ascii	"_BSD_PTRDIFF_T_ \000"
 11673      5F505452 
 11673      44494646 
 11673      5F545F20 
 11673      00
 11674              	.LASF291:
 11675 0d75 5F5F4441 		.ascii	"__DA_IBIT__ 32\000"
 11675      5F494249 
 11675      545F5F20 
 11675      333200
 11676              	.LASF211:
 11677 0d84 5F5F554C 		.ascii	"__ULFRACT_FBIT__ 32\000"
 11677      46524143 
 11677      545F4642 
 11677      49545F5F 
 11677      20333200 
 11678              	.LASF1019:
 11679 0d98 74736B53 		.ascii	"tskSTACK_FILL_BYTE ( 0xa5U )\000"
 11679      5441434B 
 11679      5F46494C 
 11679      4C5F4259 
 11679      54452028 
 11680              	.LASF402:
 11681 0db5 5F444546 		.ascii	"_DEFUN_VOID(name) name(_NOARGS)\000"
 11681      554E5F56 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 281


 11681      4F494428 
 11681      6E616D65 
 11681      29206E61 
 11682              	.LASF429:
 11683 0dd5 5F5F7369 		.ascii	"__size_t \000"
 11683      7A655F74 
 11683      2000
 11684              	.LASF562:
 11685 0ddf 5F5F626F 		.ascii	"__bounded \000"
 11685      756E6465 
 11685      642000
 11686              	.LASF679:
 11687 0dea 5F5F696E 		.ascii	"__int_fast32_t_defined 1\000"
 11687      745F6661 
 11687      73743332 
 11687      5F745F64 
 11687      6566696E 
 11688              	.LASF1094:
 11689 0e03 5461736B 		.ascii	"TaskStatus_t\000"
 11689      53746174 
 11689      75735F74 
 11689      00
 11690              	.LASF1137:
 11691 0e10 78546173 		.ascii	"xTaskToSuspend\000"
 11691      6B546F53 
 11691      75737065 
 11691      6E6400
 11692              	.LASF442:
 11693 0e1f 5F5F5F69 		.ascii	"___int_wchar_t_h \000"
 11693      6E745F77 
 11693      63686172 
 11693      5F745F68 
 11693      2000
 11694              	.LASF901:
 11695 0e31 74726163 		.ascii	"traceTIMER_EXPIRED(pxTimer) \000"
 11695      6554494D 
 11695      45525F45 
 11695      58504952 
 11695      45442870 
 11696              	.LASF1176:
 11697 0e4e 75784861 		.ascii	"uxHandle\000"
 11697      6E646C65 
 11697      00
 11698              	.LASF246:
 11699 0e57 5F5F4C41 		.ascii	"__LACCUM_FBIT__ 31\000"
 11699      4343554D 
 11699      5F464249 
 11699      545F5F20 
 11699      333100
 11700              	.LASF734:
 11701 0e6a 494E5431 		.ascii	"INT16_C(x) __INT16_C(x)\000"
 11701      365F4328 
 11701      7829205F 
 11701      5F494E54 
 11701      31365F43 
 11702              	.LASF378:
 11703 0e82 5F504F49 		.ascii	"_POINTER_INT long\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 282


 11703      4E544552 
 11703      5F494E54 
 11703      206C6F6E 
 11703      6700
 11704              	.LASF190:
 11705 0e94 5F5F5346 		.ascii	"__SFRACT_EPSILON__ 0x1P-7HR\000"
 11705      52414354 
 11705      5F455053 
 11705      494C4F4E 
 11705      5F5F2030 
 11706              	.LASF593:
 11707 0eb0 5F5F434F 		.ascii	"__CONCAT1(x,y) x ## y\000"
 11707      4E434154 
 11707      3128782C 
 11707      79292078 
 11707      20232320 
 11708              	.LASF418:
 11709 0ec6 5F545F53 		.ascii	"_T_SIZE \000"
 11709      495A4520 
 11709      00
 11710              	.LASF97:
 11711 0ecf 5F5F494E 		.ascii	"__INT32_C(c) c ## L\000"
 11711      5433325F 
 11711      43286329 
 11711      20632023 
 11711      23204C00 
 11712              	.LASF280:
 11713 0ee3 5F5F5553 		.ascii	"__USQ_FBIT__ 32\000"
 11713      515F4642 
 11713      49545F5F 
 11713      20333200 
 11714              	.LASF24:
 11715 0ef3 5F5F4F52 		.ascii	"__ORDER_BIG_ENDIAN__ 4321\000"
 11715      4445525F 
 11715      4249475F 
 11715      454E4449 
 11715      414E5F5F 
 11716              	.LASF773:
 11717 0f0d 636F6E66 		.ascii	"configIP_ADDR0 192\000"
 11717      69674950 
 11717      5F414444 
 11717      52302031 
 11717      393200
 11718              	.LASF270:
 11719 0f20 5F5F5351 		.ascii	"__SQ_FBIT__ 31\000"
 11719      5F464249 
 11719      545F5F20 
 11719      333100
 11720              	.LASF1130:
 11721 0f2f 75785265 		.ascii	"uxReturn\000"
 11721      7475726E 
 11721      00
 11722              	.LASF305:
 11723 0f38 5F5F4E4F 		.ascii	"__NO_INLINE__ 1\000"
 11723      5F494E4C 
 11723      494E455F 
 11723      5F203100 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 283


 11724              	.LASF684:
 11725 0f48 494E5438 		.ascii	"INT8_MIN (-__INT8_MAX__ - 1)\000"
 11725      5F4D494E 
 11725      20282D5F 
 11725      5F494E54 
 11725      385F4D41 
 11726              	.LASF1056:
 11727 0f65 70784E65 		.ascii	"pxNext\000"
 11727      787400
 11728              	.LASF922:
 11729 0f6c 706F7274 		.ascii	"portYIELD_WITHIN_API portYIELD\000"
 11729      5949454C 
 11729      445F5749 
 11729      5448494E 
 11729      5F415049 
 11730              	.LASF278:
 11731 0f8b 5F5F5548 		.ascii	"__UHQ_FBIT__ 16\000"
 11731      515F4642 
 11731      49545F5F 
 11731      20313600 
 11732              	.LASF1114:
 11733 0f9b 70784E65 		.ascii	"pxNewTCB\000"
 11733      77544342 
 11733      00
 11734              	.LASF509:
 11735 0fa4 5F524545 		.ascii	"_REENT_EMERGENCY_SIZE 25\000"
 11735      4E545F45 
 11735      4D455247 
 11735      454E4359 
 11735      5F53495A 
 11736              	.LASF776:
 11737 0fbd 636F6E66 		.ascii	"configIP_ADDR3 201\000"
 11737      69674950 
 11737      5F414444 
 11737      52332032 
 11737      303100
 11738              	.LASF635:
 11739 0fd0 5F5F7765 		.ascii	"__weak_reference(sym,alias) __asm__(\".weak \" #ali"
 11739      616B5F72 
 11739      65666572 
 11739      656E6365 
 11739      2873796D 
 11740 1001 6173293B 		.ascii	"as); __asm__(\".equ \" #alias \", \" #sym)\000"
 11740      205F5F61 
 11740      736D5F5F 
 11740      28222E65 
 11740      71752022 
 11741              	.LASF1221:
 11742 1028 75785363 		.ascii	"uxSchedulerSuspended\000"
 11742      68656475 
 11742      6C657253 
 11742      75737065 
 11742      6E646564 
 11743              	.LASF67:
 11744 103d 5F5F5343 		.ascii	"__SCHAR_MAX__ 127\000"
 11744      4841525F 
 11744      4D41585F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 284


 11744      5F203132 
 11744      3700
 11745              	.LASF170:
 11746 104f 5F5F4445 		.ascii	"__DEC32_EPSILON__ 1E-6DF\000"
 11746      4333325F 
 11746      45505349 
 11746      4C4F4E5F 
 11746      5F203145 
 11747              	.LASF565:
 11748 1068 5F5F6861 		.ascii	"__has_extension __has_feature\000"
 11748      735F6578 
 11748      74656E73 
 11748      696F6E20 
 11748      5F5F6861 
 11749              	.LASF448:
 11750 1086 4E554C4C 		.ascii	"NULL\000"
 11750      00
 11751              	.LASF516:
 11752 108b 5F524545 		.ascii	"_REENT_CHECK_MP(ptr) \000"
 11752      4E545F43 
 11752      4845434B 
 11752      5F4D5028 
 11752      70747229 
 11753              	.LASF247:
 11754 10a1 5F5F4C41 		.ascii	"__LACCUM_IBIT__ 32\000"
 11754      4343554D 
 11754      5F494249 
 11754      545F5F20 
 11754      333200
 11755              	.LASF1034:
 11756 10b4 5F5F7569 		.ascii	"__uint8_t\000"
 11756      6E74385F 
 11756      7400
 11757              	.LASF287:
 11758 10be 5F5F4841 		.ascii	"__HA_IBIT__ 8\000"
 11758      5F494249 
 11758      545F5F20 
 11758      3800
 11759              	.LASF358:
 11760 10cc 5F5F4E45 		.ascii	"__NEWLIB_H__ 1\000"
 11760      574C4942 
 11760      5F485F5F 
 11760      203100
 11761              	.LASF85:
 11762 10db 5F5F494E 		.ascii	"__INT16_MAX__ 32767\000"
 11762      5431365F 
 11762      4D41585F 
 11762      5F203332 
 11762      37363700 
 11763              	.LASF1091:
 11764 10ef 75784261 		.ascii	"uxBasePriority\000"
 11764      73655072 
 11764      696F7269 
 11764      747900
 11765              	.LASF344:
 11766 10fe 5F5F5646 		.ascii	"__VFP_FP__ 1\000"
 11766      505F4650 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 285


 11766      5F5F2031 
 11766      00
 11767              	.LASF848:
 11768 110b 494E434C 		.ascii	"INCLUDE_xTaskGetSchedulerState 0\000"
 11768      5544455F 
 11768      78546173 
 11768      6B476574 
 11768      53636865 
 11769              	.LASF1210:
 11770 112c 78546173 		.ascii	"xTasksWaitingTermination\000"
 11770      6B735761 
 11770      6974696E 
 11770      67546572 
 11770      6D696E61 
 11771              	.LASF1104:
 11772 1145 74736B54 		.ascii	"tskTCB\000"
 11772      434200
 11773              	.LASF78:
 11774 114c 5F5F494E 		.ascii	"__INTMAX_MAX__ 9223372036854775807LL\000"
 11774      544D4158 
 11774      5F4D4158 
 11774      5F5F2039 
 11774      32323333 
 11775              	.LASF379:
 11776 1171 5F5F5241 		.ascii	"__RAND_MAX\000"
 11776      4E445F4D 
 11776      415800
 11777              	.LASF320:
 11778 117c 5F5F4743 		.ascii	"__GCC_ATOMIC_POINTER_LOCK_FREE 2\000"
 11778      435F4154 
 11778      4F4D4943 
 11778      5F504F49 
 11778      4E544552 
 11779              	.LASF705:
 11780 119d 494E545F 		.ascii	"INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)\000"
 11780      4C454153 
 11780      5436345F 
 11780      4D494E20 
 11780      282D5F5F 
 11781              	.LASF62:
 11782 11c8 5F5F494E 		.ascii	"__INTPTR_TYPE__ int\000"
 11782      54505452 
 11782      5F545950 
 11782      455F5F20 
 11782      696E7400 
 11783              	.LASF409:
 11784 11dc 5F4E4F49 		.ascii	"_NOINLINE_STATIC _NOINLINE static\000"
 11784      4E4C494E 
 11784      455F5354 
 11784      41544943 
 11784      205F4E4F 
 11785              	.LASF984:
 11786 11fe 7461736B 		.ascii	"taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()\000"
 11786      454E4142 
 11786      4C455F49 
 11786      4E544552 
 11786      52555054 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 286


 11787              	.LASF576:
 11788 122e 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_CONSTANT_P 1\000"
 11788      55434C49 
 11788      4B455F42 
 11788      55494C54 
 11788      494E5F43 
 11789              	.LASF1090:
 11790 124e 75784375 		.ascii	"uxCurrentPriority\000"
 11790      7272656E 
 11790      74507269 
 11790      6F726974 
 11790      7900
 11791              	.LASF376:
 11792 1260 5F5F474E 		.ascii	"__GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_M"
 11792      55435F50 
 11792      52455245 
 11792      51286D61 
 11792      6A2C6D69 
 11793 1293 494E4F52 		.ascii	"INOR__ >= ((maj) << 16) + (min))\000"
 11793      5F5F203E 
 11793      3D202828 
 11793      6D616A29 
 11793      203C3C20 
 11794              	.LASF203:
 11795 12b4 5F5F5546 		.ascii	"__UFRACT_MIN__ 0.0UR\000"
 11795      52414354 
 11795      5F4D494E 
 11795      5F5F2030 
 11795      2E305552 
 11796              	.LASF879:
 11797 12c9 74726163 		.ascii	"traceQUEUE_PEEK(pxQueue) \000"
 11797      65515545 
 11797      55455F50 
 11797      45454B28 
 11797      70785175 
 11798              	.LASF164:
 11799 12e3 5F5F4C44 		.ascii	"__LDBL_HAS_QUIET_NAN__ 1\000"
 11799      424C5F48 
 11799      41535F51 
 11799      55494554 
 11799      5F4E414E 
 11800              	.LASF512:
 11801 12fc 5F4E5F4C 		.ascii	"_N_LISTS 30\000"
 11801      49535453 
 11801      20333000 
 11802              	.LASF392:
 11803 1308 5F434F4E 		.ascii	"_CONST const\000"
 11803      53542063 
 11803      6F6E7374 
 11803      00
 11804              	.LASF977:
 11805 1315 74736B4B 		.ascii	"tskKERNEL_VERSION_MINOR 1\000"
 11805      45524E45 
 11805      4C5F5645 
 11805      5253494F 
 11805      4E5F4D49 
 11806              	.LASF713:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 287


 11807 132f 55494E54 		.ascii	"UINT_FAST16_MAX __UINT_FAST16_MAX__\000"
 11807      5F464153 
 11807      5431365F 
 11807      4D415820 
 11807      5F5F5549 
 11808              	.LASF416:
 11809 1353 5F535953 		.ascii	"_SYS_SIZE_T_H \000"
 11809      5F53495A 
 11809      455F545F 
 11809      482000
 11810              	.LASF524:
 11811 1362 5F524545 		.ascii	"_REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._s"
 11811      4E545F52 
 11811      414E4434 
 11811      385F5345 
 11811      45442870 
 11812 1395 65656429 		.ascii	"eed)\000"
 11812      00
 11813              	.LASF50:
 11814 139a 5F5F5549 		.ascii	"__UINT_LEAST8_TYPE__ unsigned char\000"
 11814      4E545F4C 
 11814      45415354 
 11814      385F5459 
 11814      50455F5F 
 11815              	.LASF1133:
 11816 13bd 75784375 		.ascii	"uxCurrentBasePriority\000"
 11816      7272656E 
 11816      74426173 
 11816      65507269 
 11816      6F726974 
 11817              	.LASF236:
 11818 13d3 5F5F4143 		.ascii	"__ACCUM_FBIT__ 15\000"
 11818      43554D5F 
 11818      46424954 
 11818      5F5F2031 
 11818      3500
 11819              	.LASF798:
 11820 13e5 706F7274 		.ascii	"portCHAR char\000"
 11820      43484152 
 11820      20636861 
 11820      7200
 11821              	.LASF242:
 11822 13f3 5F5F5541 		.ascii	"__UACCUM_IBIT__ 16\000"
 11822      4343554D 
 11822      5F494249 
 11822      545F5F20 
 11822      313600
 11823              	.LASF1049:
 11824 1406 5461736B 		.ascii	"TaskFunction_t\000"
 11824      46756E63 
 11824      74696F6E 
 11824      5F7400
 11825              	.LASF115:
 11826 1415 5F5F5549 		.ascii	"__UINT_FAST64_MAX__ 18446744073709551615ULL\000"
 11826      4E545F46 
 11826      41535436 
 11826      345F4D41 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 288


 11826      585F5F20 
 11827              	.LASF979:
 11828 1441 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( UBaseT_t ) 0U )\000"
 11828      444C455F 
 11828      5052494F 
 11828      52495459 
 11828      20282028 
 11829              	.LASF1228:
 11830 1466 70784375 		.ascii	"pxCurrentTCB\000"
 11830      7272656E 
 11830      74544342 
 11830      00
 11831              	.LASF145:
 11832 1473 5F5F4442 		.ascii	"__DBL_MIN__ ((double)2.2250738585072014e-308L)\000"
 11832      4C5F4D49 
 11832      4E5F5F20 
 11832      2828646F 
 11832      75626C65 
 11833              	.LASF842:
 11834 14a2 636F6E66 		.ascii	"configUSE_TIMERS 0\000"
 11834      69675553 
 11834      455F5449 
 11834      4D455253 
 11834      203000
 11835              	.LASF903:
 11836 14b5 74726163 		.ascii	"traceMALLOC(pvAddress,uiSize) \000"
 11836      654D414C 
 11836      4C4F4328 
 11836      70764164 
 11836      64726573 
 11837              	.LASF474:
 11838 14d4 5F5F5F69 		.ascii	"___int_least16_t_defined 1\000"
 11838      6E745F6C 
 11838      65617374 
 11838      31365F74 
 11838      5F646566 
 11839              	.LASF72:
 11840 14ef 5F5F5743 		.ascii	"__WCHAR_MAX__ 4294967295U\000"
 11840      4841525F 
 11840      4D41585F 
 11840      5F203432 
 11840      39343936 
 11841              	.LASF180:
 11842 1509 5F5F4445 		.ascii	"__DEC128_MIN_EXP__ (-6142)\000"
 11842      43313238 
 11842      5F4D494E 
 11842      5F455850 
 11842      5F5F2028 
 11843              	.LASF997:
 11844 1524 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD ( ( BaseT_t ) 4 )\000"
 11844      4F4D4D41 
 11844      4E445F43 
 11844      48414E47 
 11844      455F5045 
 11845              	.LASF54:
 11846 154f 5F5F494E 		.ascii	"__INT_FAST8_TYPE__ int\000"
 11846      545F4641 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 289


 11846      5354385F 
 11846      54595045 
 11846      5F5F2069 
 11847              	.LASF408:
 11848 1566 5F4E4F49 		.ascii	"_NOINLINE __attribute__ ((__noinline__))\000"
 11848      4E4C494E 
 11848      45205F5F 
 11848      61747472 
 11848      69627574 
 11849              	.LASF298:
 11850 158f 5F5F5544 		.ascii	"__UDA_FBIT__ 32\000"
 11850      415F4642 
 11850      49545F5F 
 11850      20333200 
 11851              	.LASF413:
 11852 159f 5F5F7369 		.ascii	"__size_t__ \000"
 11852      7A655F74 
 11852      5F5F2000 
 11853              	.LASF235:
 11854 15ab 5F5F5553 		.ascii	"__USACCUM_EPSILON__ 0x1P-8UHK\000"
 11854      41434355 
 11854      4D5F4550 
 11854      53494C4F 
 11854      4E5F5F20 
 11855              	.LASF81:
 11856 15c9 5F5F5549 		.ascii	"__UINTMAX_C(c) c ## ULL\000"
 11856      4E544D41 
 11856      585F4328 
 11856      63292063 
 11856      20232320 
 11857              	.LASF972:
 11858 15e1 6C697374 		.ascii	"listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( Base"
 11858      49535F43 
 11858      4F4E5441 
 11858      494E4544 
 11858      5F574954 
 11859 1614 545F7420 		.ascii	"T_t ) ( ( pxListItem )->pvContainer == ( void * ) ("
 11859      29202820 
 11859      28207078 
 11859      4C697374 
 11859      4974656D 
 11860 1647 2070784C 		.ascii	" pxList ) ) )\000"
 11860      69737420 
 11860      29202920 
 11860      2900
 11861              	.LASF28:
 11862 1655 5F5F5349 		.ascii	"__SIZEOF_POINTER__ 4\000"
 11862      5A454F46 
 11862      5F504F49 
 11862      4E544552 
 11862      5F5F2034 
 11863              	.LASF46:
 11864 166a 5F5F494E 		.ascii	"__INT_LEAST8_TYPE__ signed char\000"
 11864      545F4C45 
 11864      41535438 
 11864      5F545950 
 11864      455F5F20 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 290


 11865              	.LASF310:
 11866 168a 5F5F4743 		.ascii	"__GCC_ATOMIC_BOOL_LOCK_FREE 2\000"
 11866      435F4154 
 11866      4F4D4943 
 11866      5F424F4F 
 11866      4C5F4C4F 
 11867              	.LASF1146:
 11868 16a8 78546173 		.ascii	"xTaskGetTickCount\000"
 11868      6B476574 
 11868      5469636B 
 11868      436F756E 
 11868      7400
 11869              	.LASF109:
 11870 16ba 5F5F494E 		.ascii	"__INT_FAST16_MAX__ 2147483647\000"
 11870      545F4641 
 11870      53543136 
 11870      5F4D4158 
 11870      5F5F2032 
 11871              	.LASF689:
 11872 16d8 55494E54 		.ascii	"UINT_LEAST8_MAX __UINT_LEAST8_MAX__\000"
 11872      5F4C4541 
 11872      5354385F 
 11872      4D415820 
 11872      5F5F5549 
 11873              	.LASF292:
 11874 16fc 5F5F5441 		.ascii	"__TA_FBIT__ 63\000"
 11874      5F464249 
 11874      545F5F20 
 11874      363300
 11875              	.LASF347:
 11876 170b 5F5F5448 		.ascii	"__THUMB_INTERWORK__ 1\000"
 11876      554D425F 
 11876      494E5445 
 11876      52574F52 
 11876      4B5F5F20 
 11877              	.LASF224:
 11878 1721 5F5F554C 		.ascii	"__ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR\000"
 11878      4C465241 
 11878      43545F4D 
 11878      41585F5F 
 11878      20305846 
 11879              	.LASF1029:
 11880 174d 70727647 		.ascii	"prvGetTCBFromHandle(pxHandle) ( ( ( pxHandle ) == N"
 11880      65745443 
 11880      4246726F 
 11880      6D48616E 
 11880      646C6528 
 11881 1780 554C4C20 		.ascii	"ULL ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( px"
 11881      29203F20 
 11881      28205443 
 11881      425F7420 
 11881      2A202920 
 11882 17b3 48616E64 		.ascii	"Handle ) )\000"
 11882      6C652029 
 11882      202900
 11883              	.LASF84:
 11884 17be 5F5F494E 		.ascii	"__INT8_MAX__ 127\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 291


 11884      54385F4D 
 11884      41585F5F 
 11884      20313237 
 11884      00
 11885              	.LASF938:
 11886 17cf 65546173 		.ascii	"eTaskStateGet eTaskGetState\000"
 11886      6B537461 
 11886      74654765 
 11886      74206554 
 11886      61736B47 
 11887              	.LASF1020:
 11888 17eb 74736B42 		.ascii	"tskBLOCKED_CHAR ( 'B' )\000"
 11888      4C4F434B 
 11888      45445F43 
 11888      48415220 
 11888      28202742 
 11889              	.LASF710:
 11890 1803 55494E54 		.ascii	"UINT_FAST8_MAX __UINT_FAST8_MAX__\000"
 11890      5F464153 
 11890      54385F4D 
 11890      4158205F 
 11890      5F55494E 
 11891              	.LASF153:
 11892 1825 5F5F4C44 		.ascii	"__LDBL_MIN_EXP__ (-1021)\000"
 11892      424C5F4D 
 11892      494E5F45 
 11892      58505F5F 
 11892      20282D31 
 11893              	.LASF425:
 11894 183e 5F53495A 		.ascii	"_SIZE_T_DECLARED \000"
 11894      455F545F 
 11894      4445434C 
 11894      41524544 
 11894      2000
 11895              	.LASF686:
 11896 1850 55494E54 		.ascii	"UINT8_MAX __UINT8_MAX__\000"
 11896      385F4D41 
 11896      58205F5F 
 11896      55494E54 
 11896      385F4D41 
 11897              	.LASF36:
 11898 1868 5F5F4348 		.ascii	"__CHAR32_TYPE__ long unsigned int\000"
 11898      41523332 
 11898      5F545950 
 11898      455F5F20 
 11898      6C6F6E67 
 11899              	.LASF165:
 11900 188a 5F5F4445 		.ascii	"__DEC32_MANT_DIG__ 7\000"
 11900      4333325F 
 11900      4D414E54 
 11900      5F444947 
 11900      5F5F2037 
 11901              	.LASF591:
 11902 189f 5F5F4343 		.ascii	"__CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1\000"
 11902      5F535550 
 11902      504F5254 
 11902      535F4459 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 292


 11902      4E414D49 
 11903              	.LASF127:
 11904 18c2 5F5F464C 		.ascii	"__FLT_MAX_EXP__ 128\000"
 11904      545F4D41 
 11904      585F4558 
 11904      505F5F20 
 11904      31323800 
 11905              	.LASF14:
 11906 18d6 5F5F5349 		.ascii	"__SIZEOF_LONG__ 4\000"
 11906      5A454F46 
 11906      5F4C4F4E 
 11906      475F5F20 
 11906      3400
 11907              	.LASF592:
 11908 18e8 5F5F5028 		.ascii	"__P(protos) protos\000"
 11908      70726F74 
 11908      6F732920 
 11908      70726F74 
 11908      6F7300
 11909              	.LASF974:
 11910 18fb 6C697374 		.ascii	"listLIST_IS_INITIALISED(pxList) ( ( pxList )->xList"
 11910      4C495354 
 11910      5F49535F 
 11910      494E4954 
 11910      49414C49 
 11911 192e 456E642E 		.ascii	"End.xItemValue == portMAX_DELAY )\000"
 11911      78497465 
 11911      6D56616C 
 11911      7565203D 
 11911      3D20706F 
 11912              	.LASF405:
 11913 1950 5F504152 		.ascii	"_PARAMS(paramlist) paramlist\000"
 11913      414D5328 
 11913      70617261 
 11913      6D6C6973 
 11913      74292070 
 11914              	.LASF631:
 11915 196d 5F5F7374 		.ascii	"__strfmonlike(fmtarg,firstvararg) __attribute__((__"
 11915      72666D6F 
 11915      6E6C696B 
 11915      6528666D 
 11915      74617267 
 11916 19a0 666F726D 		.ascii	"format__ (__strfmon__, fmtarg, firstvararg)))\000"
 11916      61745F5F 
 11916      20285F5F 
 11916      73747266 
 11916      6D6F6E5F 
 11917              	.LASF1172:
 11918 19ce 70785469 		.ascii	"pxTicksToWait\000"
 11918      636B7354 
 11918      6F576169 
 11918      7400
 11919              	.LASF898:
 11920 19dc 74726163 		.ascii	"traceTIMER_CREATE(pxNewTimer) \000"
 11920      6554494D 
 11920      45525F43 
 11920      52454154 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 293


 11920      45287078 
 11921              	.LASF18:
 11922 19fb 5F5F5349 		.ascii	"__SIZEOF_DOUBLE__ 8\000"
 11922      5A454F46 
 11922      5F444F55 
 11922      424C455F 
 11922      5F203800 
 11923              	.LASF929:
 11924 1a0f 636F6E66 		.ascii	"configUSE_QUEUE_SETS 0\000"
 11924      69675553 
 11924      455F5155 
 11924      4555455F 
 11924      53455453 
 11925              	.LASF1107:
 11926 1a26 70634E61 		.ascii	"pcName\000"
 11926      6D6500
 11927              	.LASF1022:
 11928 1a2d 74736B44 		.ascii	"tskDELETED_CHAR ( 'D' )\000"
 11928      454C4554 
 11928      45445F43 
 11928      48415220 
 11928      28202744 
 11929              	.LASF833:
 11930 1a45 50524956 		.ascii	"PRIVILEGED_DATA \000"
 11930      494C4547 
 11930      45445F44 
 11930      41544120 
 11930      00
 11931              	.LASF690:
 11932 1a56 494E5431 		.ascii	"INT16_MIN (-__INT16_MAX__ - 1)\000"
 11932      365F4D49 
 11932      4E20282D 
 11932      5F5F494E 
 11932      5431365F 
 11933              	.LASF915:
 11934 1a75 74726163 		.ascii	"traceEVENT_GROUP_DELETE(xEventGroup) \000"
 11934      65455645 
 11934      4E545F47 
 11934      524F5550 
 11934      5F44454C 
 11935              	.LASF176:
 11936 1a9b 5F5F4445 		.ascii	"__DEC64_MAX__ 9.999999999999999E384DD\000"
 11936      4336345F 
 11936      4D41585F 
 11936      5F20392E 
 11936      39393939 
 11937              	.LASF374:
 11938 1ac1 5F5F4E45 		.ascii	"__NEWLIB__ 2\000"
 11938      574C4942 
 11938      5F5F2032 
 11938      00
 11939              	.LASF795:
 11940 1ace 65727251 		.ascii	"errQUEUE_YIELD ( -5 )\000"
 11940      55455545 
 11940      5F594945 
 11940      4C442028 
 11940      202D3520 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 294


 11941              	.LASF657:
 11942 1ae4 45584954 		.ascii	"EXIT_SUCCESS 0\000"
 11942      5F535543 
 11942      43455353 
 11942      203000
 11943              	.LASF300:
 11944 1af3 5F5F5554 		.ascii	"__UTA_FBIT__ 64\000"
 11944      415F4642 
 11944      49545F5F 
 11944      20363400 
 11945              	.LASF555:
 11946 1b03 5F5F4153 		.ascii	"__ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) "
 11946      4D4E414D 
 11946      4528636E 
 11946      616D6529 
 11946      205F5F58 
 11947 1b36 636E616D 		.ascii	"cname\000"
 11947      6500
 11948              	.LASF129:
 11949 1b3c 5F5F464C 		.ascii	"__FLT_DECIMAL_DIG__ 9\000"
 11949      545F4445 
 11949      43494D41 
 11949      4C5F4449 
 11949      475F5F20 
 11950              	.LASF850:
 11951 1b52 706F7274 		.ascii	"portCLEAN_UP_TCB(pxTCB) ( void ) pxTCB\000"
 11951      434C4541 
 11951      4E5F5550 
 11951      5F544342 
 11951      28707854 
 11952              	.LASF1212:
 11953 1b79 78537573 		.ascii	"xSuspendedTaskList\000"
 11953      70656E64 
 11953      65645461 
 11953      736B4C69 
 11953      737400
 11954              	.LASF894:
 11955 1b8c 74726163 		.ascii	"traceTASK_SUSPEND(pxTaskToSuspend) \000"
 11955      65544153 
 11955      4B5F5355 
 11955      5350454E 
 11955      44287078 
 11956              	.LASF45:
 11957 1bb0 5F5F5549 		.ascii	"__UINT64_TYPE__ long long unsigned int\000"
 11957      4E543634 
 11957      5F545950 
 11957      455F5F20 
 11957      6C6F6E67 
 11958              	.LASF1073:
 11959 1bd7 65537573 		.ascii	"eSuspended\000"
 11959      70656E64 
 11959      656400
 11960              	.LASF1046:
 11961 1be2 75696E74 		.ascii	"uint8_t\000"
 11961      385F7400 
 11962              	.LASF721:
 11963 1bea 494E544D 		.ascii	"INTMAX_MIN (-INTMAX_MAX - 1)\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 295


 11963      41585F4D 
 11963      494E2028 
 11963      2D494E54 
 11963      4D41585F 
 11964              	.LASF964:
 11965 1c07 6C697374 		.ascii	"listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList) ( ( ( pxLi"
 11965      4745545F 
 11965      4954454D 
 11965      5F56414C 
 11965      55455F4F 
 11966 1c3a 73742029 		.ascii	"st )->xListEnd ).pxNext->xItemValue )\000"
 11966      2D3E784C 
 11966      69737445 
 11966      6E642029 
 11966      2E70784E 
 11967              	.LASF1174:
 11968 1c60 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 11968      736B4765 
 11968      74546173 
 11968      6B4E756D 
 11968      62657200 
 11969              	.LASF556:
 11970 1c74 5F5F7074 		.ascii	"__ptr_t void *\000"
 11970      725F7420 
 11970      766F6964 
 11970      202A00
 11971              	.LASF539:
 11972 1c83 5F524545 		.ascii	"_REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrt"
 11972      4E545F4D 
 11972      4252544F 
 11972      57435F53 
 11972      54415445 
 11973 1cb6 6F77635F 		.ascii	"owc_state)\000"
 11973      73746174 
 11973      652900
 11974              	.LASF1188:
 11975 1cc1 70784E65 		.ascii	"pxNextTCB\000"
 11975      78745443 
 11975      4200
 11976              	.LASF615:
 11977 1ccb 5F5F616C 		.ascii	"__always_inline __attribute__((__always_inline__))\000"
 11977      77617973 
 11977      5F696E6C 
 11977      696E6520 
 11977      5F5F6174 
 11978              	.LASF196:
 11979 1cfe 5F5F4652 		.ascii	"__FRACT_FBIT__ 15\000"
 11979      4143545F 
 11979      46424954 
 11979      5F5F2031 
 11979      3500
 11980              	.LASF945:
 11981 1d10 7854696D 		.ascii	"xTimeOutType TimeOut_t\000"
 11981      654F7574 
 11981      54797065 
 11981      2054696D 
 11981      654F7574 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 296


 11982              	.LASF260:
 11983 1d27 5F5F4C4C 		.ascii	"__LLACCUM_EPSILON__ 0x1P-31LLK\000"
 11983      41434355 
 11983      4D5F4550 
 11983      53494C4F 
 11983      4E5F5F20 
 11984              	.LASF313:
 11985 1d46 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR32_T_LOCK_FREE 2\000"
 11985      435F4154 
 11985      4F4D4943 
 11985      5F434841 
 11985      5233325F 
 11986              	.LASF4:
 11987 1d68 5F5F474E 		.ascii	"__GNUC_PATCHLEVEL__ 3\000"
 11987      55435F50 
 11987      41544348 
 11987      4C455645 
 11987      4C5F5F20 
 11988              	.LASF504:
 11989 1d7e 5F52414E 		.ascii	"_RAND48_SEED_2 (0x1234)\000"
 11989      4434385F 
 11989      53454544 
 11989      5F322028 
 11989      30783132 
 11990              	.LASF927:
 11991 1d96 636F6E66 		.ascii	"configPRE_SLEEP_PROCESSING(x) \000"
 11991      69675052 
 11991      455F534C 
 11991      4545505F 
 11991      50524F43 
 11992              	.LASF906:
 11993 1db5 74726163 		.ascii	"traceEVENT_GROUP_CREATE_FAILED() \000"
 11993      65455645 
 11993      4E545F47 
 11993      524F5550 
 11993      5F435245 
 11994              	.LASF683:
 11995 1dd7 55494E54 		.ascii	"UINTPTR_MAX __UINTPTR_MAX__\000"
 11995      5054525F 
 11995      4D415820 
 11995      5F5F5549 
 11995      4E545054 
 11996              	.LASF536:
 11997 1df3 5F524545 		.ascii	"_REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtow"
 11997      4E545F4D 
 11997      42544F57 
 11997      435F5354 
 11997      41544528 
 11998 1e26 635F7374 		.ascii	"c_state)\000"
 11998      61746529 
 11998      00
 11999              	.LASF890:
 12000 1e2f 74726163 		.ascii	"traceTASK_DELETE(pxTaskToDelete) \000"
 12000      65544153 
 12000      4B5F4445 
 12000      4C455445 
 12000      28707854 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 297


 12001              	.LASF401:
 12002 1e51 5F444546 		.ascii	"_DEFUN(name,arglist,args) name(args)\000"
 12002      554E286E 
 12002      616D652C 
 12002      6172676C 
 12002      6973742C 
 12003              	.LASF621:
 12004 1e76 5F5F7072 		.ascii	"__predict_true(exp) __builtin_expect((exp), 1)\000"
 12004      65646963 
 12004      745F7472 
 12004      75652865 
 12004      78702920 
 12005              	.LASF973:
 12006 1ea5 6C697374 		.ascii	"listLIST_ITEM_CONTAINER(pxListItem) ( ( pxListItem "
 12006      4C495354 
 12006      5F495445 
 12006      4D5F434F 
 12006      4E544149 
 12007 1ed8 292D3E70 		.ascii	")->pvContainer )\000"
 12007      76436F6E 
 12007      7461696E 
 12007      65722029 
 12007      00
 12008              	.LASF256:
 12009 1ee9 5F5F4C4C 		.ascii	"__LLACCUM_FBIT__ 31\000"
 12009      41434355 
 12009      4D5F4642 
 12009      49545F5F 
 12009      20333100 
 12010              	.LASF542:
 12011 1efd 5F524545 		.ascii	"_REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wc"
 12011      4E545F57 
 12011      43535254 
 12011      4F4D4253 
 12011      5F535441 
 12012 1f30 7372746F 		.ascii	"srtombs_state)\000"
 12012      6D62735F 
 12012      73746174 
 12012      652900
 12013              	.LASF752:
 12014 1f3f 636F6E66 		.ascii	"configMAX_TASK_NAME_LEN ( 12 )\000"
 12014      69674D41 
 12014      585F5441 
 12014      534B5F4E 
 12014      414D455F 
 12015              	.LASF560:
 12016 1f5e 5F5F6174 		.ascii	"__attribute_format_strfmon__(a,b) \000"
 12016      74726962 
 12016      7574655F 
 12016      666F726D 
 12016      61745F73 
 12017              	.LASF424:
 12018 1f81 5F425344 		.ascii	"_BSD_SIZE_T_DEFINED_ \000"
 12018      5F53495A 
 12018      455F545F 
 12018      44454649 
 12018      4E45445F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 298


 12019              	.LASF471:
 12020 1f97 5F5F5F69 		.ascii	"___int32_t_defined 1\000"
 12020      6E743332 
 12020      5F745F64 
 12020      6566696E 
 12020      65642031 
 12021              	.LASF60:
 12022 1fac 5F5F5549 		.ascii	"__UINT_FAST32_TYPE__ unsigned int\000"
 12022      4E545F46 
 12022      41535433 
 12022      325F5459 
 12022      50455F5F 
 12023              	.LASF1177:
 12024 1fce 70727649 		.ascii	"prvIdleTask\000"
 12024      646C6554 
 12024      61736B00 
 12025              	.LASF1219:
 12026 1fda 784E756D 		.ascii	"xNumOfOverflows\000"
 12026      4F664F76 
 12026      6572666C 
 12026      6F777300 
 12027              	.LASF17:
 12028 1fea 5F5F5349 		.ascii	"__SIZEOF_FLOAT__ 4\000"
 12028      5A454F46 
 12028      5F464C4F 
 12028      41545F5F 
 12028      203400
 12029              	.LASF227:
 12030 1ffd 5F5F5341 		.ascii	"__SACCUM_IBIT__ 8\000"
 12030      4343554D 
 12030      5F494249 
 12030      545F5F20 
 12030      3800
 12031              	.LASF583:
 12032 200f 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_RELOPS \000"
 12032      55434C49 
 12032      4B455F4D 
 12032      4154485F 
 12032      4255494C 
 12033              	.LASF128:
 12034 202f 5F5F464C 		.ascii	"__FLT_MAX_10_EXP__ 38\000"
 12034      545F4D41 
 12034      585F3130 
 12034      5F455850 
 12034      5F5F2033 
 12035              	.LASF552:
 12036 2045 5F5F504D 		.ascii	"__PMT(args) args\000"
 12036      54286172 
 12036      67732920 
 12036      61726773 
 12036      00
 12037              	.LASF886:
 12038 2056 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR_FAILED(pxQueue) \000"
 12038      65515545 
 12038      55455F50 
 12038      45454B5F 
 12038      46524F4D 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 299


 12039              	.LASF199:
 12040 2080 5F5F4652 		.ascii	"__FRACT_MAX__ 0X7FFFP-15R\000"
 12040      4143545F 
 12040      4D41585F 
 12040      5F203058 
 12040      37464646 
 12041              	.LASF118:
 12042 209a 5F5F4743 		.ascii	"__GCC_IEC_559 0\000"
 12042      435F4945 
 12042      435F3535 
 12042      39203000 
 12043              	.LASF140:
 12044 20aa 5F5F4442 		.ascii	"__DBL_MIN_10_EXP__ (-307)\000"
 12044      4C5F4D49 
 12044      4E5F3130 
 12044      5F455850 
 12044      5F5F2028 
 12045              	.LASF700:
 12046 20c4 494E545F 		.ascii	"INT_LEAST32_MAX __INT_LEAST32_MAX__\000"
 12046      4C454153 
 12046      5433325F 
 12046      4D415820 
 12046      5F5F494E 
 12047              	.LASF1009:
 12048 20e8 7854696D 		.ascii	"xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken"
 12048      65725374 
 12048      61727446 
 12048      726F6D49 
 12048      53522878 
 12049 211b 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STAR"
 12049      696D6572 
 12049      47656E65 
 12049      72696343 
 12049      6F6D6D61 
 12050 214e 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 12050      4F4D5F49 
 12050      53522C20 
 12050      28207854 
 12050      61736B47 
 12051 2181 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 12051      72696F72 
 12051      69747954 
 12051      61736B57 
 12051      6F6B656E 
 12052              	.LASF1113:
 12053 219e 78526574 		.ascii	"xReturn\000"
 12053      75726E00 
 12054              	.LASF7:
 12055 21a6 5F5F4154 		.ascii	"__ATOMIC_SEQ_CST 5\000"
 12055      4F4D4943 
 12055      5F534551 
 12055      5F435354 
 12055      203500
 12056              	.LASF383:
 12057 21b9 5F524541 		.ascii	"_READ_WRITE_RETURN_TYPE int\000"
 12057      445F5752 
 12057      4954455F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 300


 12057      52455455 
 12057      524E5F54 
 12058              	.LASF1001:
 12059 21d5 746D7243 		.ascii	"tmrCOMMAND_RESET_FROM_ISR ( ( BaseT_t ) 7 )\000"
 12059      4F4D4D41 
 12059      4E445F52 
 12059      45534554 
 12059      5F46524F 
 12060              	.LASF495:
 12061 2201 5F5F6E65 		.ascii	"__need_wint_t\000"
 12061      65645F77 
 12061      696E745F 
 12061      7400
 12062              	.LASF638:
 12063 220f 5F5F7379 		.ascii	"__sym_default(sym,impl,verid) __asm__(\".symver \" "
 12063      6D5F6465 
 12063      6661756C 
 12063      74287379 
 12063      6D2C696D 
 12064 2240 23696D70 		.ascii	"#impl \", \" #sym \"@@\" #verid)\000"
 12064      6C20222C 
 12064      20222023 
 12064      73796D20 
 12064      22404022 
 12065              	.LASF141:
 12066 225d 5F5F4442 		.ascii	"__DBL_MAX_EXP__ 1024\000"
 12066      4C5F4D41 
 12066      585F4558 
 12066      505F5F20 
 12066      31303234 
 12067              	.LASF112:
 12068 2272 5F5F5549 		.ascii	"__UINT_FAST8_MAX__ 4294967295U\000"
 12068      4E545F46 
 12068      41535438 
 12068      5F4D4158 
 12068      5F5F2034 
 12069              	.LASF1196:
 12070 2291 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 12070      65736574 
 12070      4E657874 
 12070      5461736B 
 12070      556E626C 
 12071              	.LASF274:
 12072 22ad 5F5F5451 		.ascii	"__TQ_FBIT__ 127\000"
 12072      5F464249 
 12072      545F5F20 
 12072      31323700 
 12073              	.LASF851:
 12074 22bd 706F7274 		.ascii	"portPRE_TASK_DELETE_HOOK(pvTaskToDelete,pxYieldPend"
 12074      5052455F 
 12074      5441534B 
 12074      5F44454C 
 12074      4554455F 
 12075 22f0 696E6729 		.ascii	"ing) \000"
 12075      2000
 12076              	.LASF155:
 12077 22f6 5F5F4C44 		.ascii	"__LDBL_MAX_EXP__ 1024\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 301


 12077      424C5F4D 
 12077      41585F45 
 12077      58505F5F 
 12077      20313032 
 12078              	.LASF89:
 12079 230c 5F5F5549 		.ascii	"__UINT16_MAX__ 65535\000"
 12079      4E543136 
 12079      5F4D4158 
 12079      5F5F2036 
 12079      35353335 
 12080              	.LASF365:
 12081 2321 5F484156 		.ascii	"_HAVE_LONG_DOUBLE 1\000"
 12081      455F4C4F 
 12081      4E475F44 
 12081      4F55424C 
 12081      45203100 
 12082              	.LASF680:
 12083 2335 5F5F696E 		.ascii	"__int_fast64_t_defined 1\000"
 12083      745F6661 
 12083      73743634 
 12083      5F745F64 
 12083      6566696E 
 12084              	.LASF607:
 12085 234e 5F416C69 		.ascii	"_Alignas(x) __aligned(x)\000"
 12085      676E6173 
 12085      28782920 
 12085      5F5F616C 
 12085      69676E65 
 12086              	.LASF1078:
 12087 2367 7854696D 		.ascii	"xTimeOnEntering\000"
 12087      654F6E45 
 12087      6E746572 
 12087      696E6700 
 12088              	.LASF1217:
 12089 2377 75785065 		.ascii	"uxPendedTicks\000"
 12089      6E646564 
 12089      5469636B 
 12089      7300
 12090              	.LASF800:
 12091 2385 706F7274 		.ascii	"portDOUBLE double\000"
 12091      444F5542 
 12091      4C452064 
 12091      6F75626C 
 12091      6500
 12092              	.LASF393:
 12093 2397 5F564F4C 		.ascii	"_VOLATILE volatile\000"
 12093      4154494C 
 12093      4520766F 
 12093      6C617469 
 12093      6C6500
 12094              	.LASF16:
 12095 23aa 5F5F5349 		.ascii	"__SIZEOF_SHORT__ 2\000"
 12095      5A454F46 
 12095      5F53484F 
 12095      52545F5F 
 12095      203200
 12096              	.LASF261:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 302


 12097 23bd 5F5F554C 		.ascii	"__ULLACCUM_FBIT__ 32\000"
 12097      4C414343 
 12097      554D5F46 
 12097      4249545F 
 12097      5F203332 
 12098              	.LASF946:
 12099 23d2 784D656D 		.ascii	"xMemoryRegion MemoryRegion_t\000"
 12099      6F727952 
 12099      6567696F 
 12099      6E204D65 
 12099      6D6F7279 
 12100              	.LASF400:
 12101 23ef 5F455846 		.ascii	"_EXFNPTR(name,proto) (* name) proto\000"
 12101      4E505452 
 12101      286E616D 
 12101      652C7072 
 12101      6F746F29 
 12102              	.LASF843:
 12103 2413 706F7274 		.ascii	"portCRITICAL_NESTING_IN_TCB 0\000"
 12103      43524954 
 12103      4943414C 
 12103      5F4E4553 
 12103      54494E47 
 12104              	.LASF644:
 12105 2431 5F5F4445 		.ascii	"__DECONST(type,var) ((type)(__uintptr_t)(const void"
 12105      434F4E53 
 12105      54287479 
 12105      70652C76 
 12105      61722920 
 12106 2464 202A2928 		.ascii	" *)(var))\000"
 12106      76617229 
 12106      2900
 12107              	.LASF131:
 12108 246e 5F5F464C 		.ascii	"__FLT_MIN__ 1.1754943508222875e-38F\000"
 12108      545F4D49 
 12108      4E5F5F20 
 12108      312E3137 
 12108      35343934 
 12109              	.LASF373:
 12110 2492 5F535953 		.ascii	"_SYS_FEATURES_H \000"
 12110      5F464541 
 12110      54555245 
 12110      535F4820 
 12110      00
 12111              	.LASF1066:
 12112 24a3 7078496E 		.ascii	"pxIndex\000"
 12112      64657800 
 12113              	.LASF1096:
 12114 24ab 7078546F 		.ascii	"pxTopOfStack\000"
 12114      704F6653 
 12114      7461636B 
 12114      00
 12115              	.LASF616:
 12116 24b8 5F5F6E6F 		.ascii	"__noinline __attribute__ ((__noinline__))\000"
 12116      696E6C69 
 12116      6E65205F 
 12116      5F617474 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 303


 12116      72696275 
 12117              	.LASF651:
 12118 24e2 5F4D4143 		.ascii	"_MACHSTDLIB_H_ \000"
 12118      48535444 
 12118      4C49425F 
 12118      485F2000 
 12119              	.LASF988:
 12120 24f2 78546173 		.ascii	"xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParame"
 12120      6B437265 
 12120      61746528 
 12120      70765461 
 12120      736B436F 
 12121 2525 74657273 		.ascii	"ters,uxPriority,pxCreatedTask) xTaskGenericCreate( "
 12121      2C757850 
 12121      72696F72 
 12121      6974792C 
 12121      70784372 
 12122 2558 28207076 		.ascii	"( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvP"
 12122      5461736B 
 12122      436F6465 
 12122      20292C20 
 12122      28207063 
 12123 258b 6172616D 		.ascii	"arameters ), ( uxPriority ), ( pxCreatedTask ), ( N"
 12123      65746572 
 12123      7320292C 
 12123      20282075 
 12123      78507269 
 12124 25be 554C4C20 		.ascii	"ULL ), ( NULL ) )\000"
 12124      292C2028 
 12124      204E554C 
 12124      4C202920 
 12124      2900
 12125              	.LASF928:
 12126 25d0 636F6E66 		.ascii	"configPOST_SLEEP_PROCESSING(x) \000"
 12126      6967504F 
 12126      53545F53 
 12126      4C454550 
 12126      5F50524F 
 12127              	.LASF1184:
 12128 25f0 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 12128      6C6C6F63 
 12128      61746554 
 12128      4342416E 
 12128      64537461 
 12129              	.LASF19:
 12130 2607 5F5F5349 		.ascii	"__SIZEOF_LONG_DOUBLE__ 8\000"
 12130      5A454F46 
 12130      5F4C4F4E 
 12130      475F444F 
 12130      55424C45 
 12131              	.LASF1216:
 12132 2620 78536368 		.ascii	"xSchedulerRunning\000"
 12132      6564756C 
 12132      65725275 
 12132      6E6E696E 
 12132      6700
 12133              	.LASF322:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 304


 12134 2632 5F5F5052 		.ascii	"__PRAGMA_REDEFINE_EXTNAME 1\000"
 12134      41474D41 
 12134      5F524544 
 12134      4546494E 
 12134      455F4558 
 12135              	.LASF31:
 12136 264e 5F5F5743 		.ascii	"__WCHAR_TYPE__ unsigned int\000"
 12136      4841525F 
 12136      54595045 
 12136      5F5F2075 
 12136      6E736967 
 12137              	.LASF730:
 12138 266a 57494E54 		.ascii	"WINT_MAX __WINT_MAX__\000"
 12138      5F4D4158 
 12138      205F5F57 
 12138      494E545F 
 12138      4D41585F 
 12139              	.LASF796:
 12140 2680 504F5254 		.ascii	"PORTABLE_H \000"
 12140      41424C45 
 12140      5F482000 
 12141              	.LASF1165:
 12142 268c 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 12142      6B52656D 
 12142      6F766546 
 12142      726F6D45 
 12142      76656E74 
 12143              	.LASF297:
 12144 26a5 5F5F5553 		.ascii	"__USA_IBIT__ 16\000"
 12144      415F4942 
 12144      49545F5F 
 12144      20313600 
 12145              	.LASF308:
 12146 26b5 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1\000"
 12146      435F4841 
 12146      56455F53 
 12146      594E435F 
 12146      434F4D50 
 12147              	.LASF740:
 12148 26da 494E544D 		.ascii	"INTMAX_C(x) __INTMAX_C(x)\000"
 12148      41585F43 
 12148      28782920 
 12148      5F5F494E 
 12148      544D4158 
 12149              	.LASF411:
 12150 26f4 5F5F6E65 		.ascii	"__need_wchar_t \000"
 12150      65645F77 
 12150      63686172 
 12150      5F742000 
 12151              	.LASF623:
 12152 2704 5F5F6869 		.ascii	"__hidden __attribute__((__visibility__(\"hidden\"))"
 12152      6464656E 
 12152      205F5F61 
 12152      74747269 
 12152      62757465 
 12153 2735 2900     		.ascii	")\000"
 12154              	.LASF66:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 305


 12155 2737 5F5F4758 		.ascii	"__GXX_ABI_VERSION 1002\000"
 12155      585F4142 
 12155      495F5645 
 12155      5253494F 
 12155      4E203130 
 12156              	.LASF1106:
 12157 274e 70785461 		.ascii	"pxTaskCode\000"
 12157      736B436F 
 12157      646500
 12158              	.LASF61:
 12159 2759 5F5F5549 		.ascii	"__UINT_FAST64_TYPE__ long long unsigned int\000"
 12159      4E545F46 
 12159      41535436 
 12159      345F5459 
 12159      50455F5F 
 12160              	.LASF1062:
 12161 2785 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 12161      495F4C49 
 12161      53545F49 
 12161      54454D00 
 12162              	.LASF830:
 12163 2795 706F7274 		.ascii	"portNUM_CONFIGURABLE_REGIONS 1\000"
 12163      4E554D5F 
 12163      434F4E46 
 12163      49475552 
 12163      41424C45 
 12164              	.LASF494:
 12165 27b4 5F57494E 		.ascii	"_WINT_T \000"
 12165      545F5420 
 12165      00
 12166              	.LASF746:
 12167 27bd 636F6E66 		.ascii	"configMAX_PRIORITIES ( 8 )\000"
 12167      69674D41 
 12167      585F5052 
 12167      494F5249 
 12167      54494553 
 12168              	.LASF1157:
 12169 27d8 70785465 		.ascii	"pxTemp\000"
 12169      6D7000
 12170              	.LASF410:
 12171 27df 5F5F6E65 		.ascii	"__need_size_t \000"
 12171      65645F73 
 12171      697A655F 
 12171      742000
 12172              	.LASF286:
 12173 27ee 5F5F4841 		.ascii	"__HA_FBIT__ 7\000"
 12173      5F464249 
 12173      545F5F20 
 12173      3700
 12174              	.LASF862:
 12175 27fc 74726163 		.ascii	"traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,ux"
 12175      65544153 
 12175      4B5F5052 
 12175      494F5249 
 12175      54595F44 
 12176 282f 4F726967 		.ascii	"OriginalPriority) \000"
 12176      696E616C 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 306


 12176      5072696F 
 12176      72697479 
 12176      292000
 12177              	.LASF318:
 12178 2842 5F5F4743 		.ascii	"__GCC_ATOMIC_LLONG_LOCK_FREE 1\000"
 12178      435F4154 
 12178      4F4D4943 
 12178      5F4C4C4F 
 12178      4E475F4C 
 12179              	.LASF777:
 12180 2861 636F6E66 		.ascii	"configNET_MASK0 255\000"
 12180      69674E45 
 12180      545F4D41 
 12180      534B3020 
 12180      32353500 
 12181              	.LASF871:
 12182 2875 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 12182      65474956 
 12182      455F4D55 
 12182      5445585F 
 12182      52454355 
 12183              	.LASF801:
 12184 28a0 706F7274 		.ascii	"portLONG long\000"
 12184      4C4F4E47 
 12184      206C6F6E 
 12184      6700
 12185              	.LASF487:
 12186 28ae 5F5F6C6F 		.ascii	"__lock_try_acquire(lock) (_CAST_VOID 0)\000"
 12186      636B5F74 
 12186      72795F61 
 12186      63717569 
 12186      7265286C 
 12187              	.LASF904:
 12188 28d6 74726163 		.ascii	"traceFREE(pvAddress,uiSize) \000"
 12188      65465245 
 12188      45287076 
 12188      41646472 
 12188      6573732C 
 12189              	.LASF192:
 12190 28f3 5F5F5553 		.ascii	"__USFRACT_IBIT__ 0\000"
 12190      46524143 
 12190      545F4942 
 12190      49545F5F 
 12190      203000
 12191              	.LASF1037:
 12192 2906 5F5F7569 		.ascii	"__uint16_t\000"
 12192      6E743136 
 12192      5F7400
 12193              	.LASF841:
 12194 2911 494E434C 		.ascii	"INCLUDE_eTaskGetState 0\000"
 12194      5544455F 
 12194      65546173 
 12194      6B476574 
 12194      53746174 
 12195              	.LASF193:
 12196 2929 5F5F5553 		.ascii	"__USFRACT_MIN__ 0.0UHR\000"
 12196      46524143 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 307


 12196      545F4D49 
 12196      4E5F5F20 
 12196      302E3055 
 12197              	.LASF603:
 12198 2940 5F5F7573 		.ascii	"__used __attribute__((__used__))\000"
 12198      6564205F 
 12198      5F617474 
 12198      72696275 
 12198      74655F5F 
 12199              	.LASF533:
 12200 2961 5F524545 		.ascii	"_REENT_EMERGENCY(ptr) ((ptr)->_emergency)\000"
 12200      4E545F45 
 12200      4D455247 
 12200      454E4359 
 12200      28707472 
 12201              	.LASF575:
 12202 298b 5F5F474E 		.ascii	"__GNUCLIKE_CTOR_SECTION_HANDLING 1\000"
 12202      55434C49 
 12202      4B455F43 
 12202      544F525F 
 12202      53454354 
 12203              	.LASF470:
 12204 29ae 5F5F5F69 		.ascii	"___int16_t_defined 1\000"
 12204      6E743136 
 12204      5F745F64 
 12204      6566696E 
 12204      65642031 
 12205              	.LASF548:
 12206 29c3 5F524545 		.ascii	"_REENT _impure_ptr\000"
 12206      4E54205F 
 12206      696D7075 
 12206      72655F70 
 12206      747200
 12207              	.LASF1079:
 12208 29d6 54696D65 		.ascii	"TimeOut_t\000"
 12208      4F75745F 
 12208      7400
 12209              	.LASF867:
 12210 29e0 74726163 		.ascii	"traceQUEUE_CREATE_FAILED(ucQueueType) \000"
 12210      65515545 
 12210      55455F43 
 12210      52454154 
 12210      455F4641 
 12211              	.LASF624:
 12212 2a07 5F5F6578 		.ascii	"__exported __attribute__((__visibility__(\"default\""
 12212      706F7274 
 12212      6564205F 
 12212      5F617474 
 12212      72696275 
 12213 2a39 29292900 		.ascii	")))\000"
 12214              	.LASF415:
 12215 2a3d 5F53495A 		.ascii	"_SIZE_T \000"
 12215      455F5420 
 12215      00
 12216              	.LASF1178:
 12217 2a46 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 12217      6E697469 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 308


 12217      616C6973 
 12217      65544342 
 12217      56617269 
 12218              	.LASF1027:
 12219 2a60 7461736B 		.ascii	"taskSWITCH_DELAYED_LISTS() { List_t *pxTemp; config"
 12219      53574954 
 12219      43485F44 
 12219      454C4159 
 12219      45445F4C 
 12220 2a93 41535345 		.ascii	"ASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) "
 12220      52542820 
 12220      28206C69 
 12220      73744C49 
 12220      53545F49 
 12221 2ac6 293B2070 		.ascii	"); pxTemp = pxDelayedTaskList; pxDelayedTaskList = "
 12221      7854656D 
 12221      70203D20 
 12221      70784465 
 12221      6C617965 
 12222 2af9 70784F76 		.ascii	"pxOverflowDelayedTaskList; pxOverflowDelayedTaskLis"
 12222      6572666C 
 12222      6F774465 
 12222      6C617965 
 12222      64546173 
 12223 2b2c 74203D20 		.ascii	"t = pxTemp; xNumOfOverflows++; prvResetNextTaskUnbl"
 12223      70785465 
 12223      6D703B20 
 12223      784E756D 
 12223      4F664F76 
 12224 2b5f 6F636B54 		.ascii	"ockTime(); }\000"
 12224      696D6528 
 12224      293B207D 
 12224      00
 12225              	.LASF586:
 12226 2b6c 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE 1\000"
 12226      5F535550 
 12226      504F5254 
 12226      535F5F5F 
 12226      494E4C49 
 12227              	.LASF362:
 12228 2b85 5F4D425F 		.ascii	"_MB_LEN_MAX 1\000"
 12228      4C454E5F 
 12228      4D415820 
 12228      3100
 12229              	.LASF1117:
 12230 2b93 76546173 		.ascii	"vTaskDelete\000"
 12230      6B44656C 
 12230      65746500 
 12231              	.LASF1192:
 12232 2b9f 756C436F 		.ascii	"ulCount\000"
 12232      756E7400 
 12233              	.LASF803:
 12234 2ba7 706F7274 		.ascii	"portSTACK_TYPE uint32_t\000"
 12234      53544143 
 12234      4B5F5459 
 12234      50452075 
 12234      696E7433 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 309


 12235              	.LASF290:
 12236 2bbf 5F5F4441 		.ascii	"__DA_FBIT__ 31\000"
 12236      5F464249 
 12236      545F5F20 
 12236      333100
 12237              	.LASF1059:
 12238 2bce 7076436F 		.ascii	"pvContainer\000"
 12238      6E746169 
 12238      6E657200 
 12239              	.LASF1012:
 12240 2bda 7854696D 		.ascii	"xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken"
 12240      65725265 
 12240      73657446 
 12240      726F6D49 
 12240      53522878 
 12241 2c0d 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESE"
 12241      696D6572 
 12241      47656E65 
 12241      72696343 
 12241      6F6D6D61 
 12242 2c40 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 12242      4F4D5F49 
 12242      53522C20 
 12242      28207854 
 12242      61736B47 
 12243 2c73 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 12243      72696F72 
 12243      69747954 
 12243      61736B57 
 12243      6F6B656E 
 12244              	.LASF949:
 12245 2c90 7854696D 		.ascii	"xTimerHandle TimerHandle_t\000"
 12245      65724861 
 12245      6E646C65 
 12245      2054696D 
 12245      65724861 
 12246              	.LASF1092:
 12247 2cab 756C5275 		.ascii	"ulRunTimeCounter\000"
 12247      6E54696D 
 12247      65436F75 
 12247      6E746572 
 12247      00
 12248              	.LASF133:
 12249 2cbc 5F5F464C 		.ascii	"__FLT_DENORM_MIN__ 1.4012984643248171e-45F\000"
 12249      545F4445 
 12249      4E4F524D 
 12249      5F4D494E 
 12249      5F5F2031 
 12250              	.LASF158:
 12251 2ce7 5F5F4C44 		.ascii	"__LDBL_MAX__ 1.7976931348623157e+308L\000"
 12251      424C5F4D 
 12251      41585F5F 
 12251      20312E37 
 12251      39373639 
 12252              	.LASF94:
 12253 2d0d 5F5F494E 		.ascii	"__INT_LEAST16_MAX__ 32767\000"
 12253      545F4C45 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 310


 12253      41535431 
 12253      365F4D41 
 12253      585F5F20 
 12254              	.LASF1013:
 12255 2d27 53544143 		.ascii	"STACK_MACROS_H \000"
 12255      4B5F4D41 
 12255      43524F53 
 12255      5F482000 
 12256              	.LASF387:
 12257 2d37 5F454E44 		.ascii	"_END_STD_C \000"
 12257      5F535444 
 12257      5F432000 
 12258              	.LASF1201:
 12259 2d43 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 12259      736B5265 
 12259      73657445 
 12259      76656E74 
 12259      4974656D 
 12260              	.LASF688:
 12261 2d5d 494E545F 		.ascii	"INT_LEAST8_MAX __INT_LEAST8_MAX__\000"
 12261      4C454153 
 12261      54385F4D 
 12261      4158205F 
 12261      5F494E54 
 12262              	.LASF1140:
 12263 2d7f 78546173 		.ascii	"xTaskResumeFromISR\000"
 12263      6B526573 
 12263      756D6546 
 12263      726F6D49 
 12263      535200
 12264              	.LASF65:
 12265 2d92 5F5F6861 		.ascii	"__has_include_next(STR) __has_include_next__(STR)\000"
 12265      735F696E 
 12265      636C7564 
 12265      655F6E65 
 12265      78742853 
 12266              	.LASF1015:
 12267 2dc4 7461736B 		.ascii	"taskSECOND_CHECK_FOR_STACK_OVERFLOW() \000"
 12267      5345434F 
 12267      4E445F43 
 12267      4845434B 
 12267      5F464F52 
 12268              	.LASF105:
 12269 2deb 5F5F5549 		.ascii	"__UINT32_C(c) c ## UL\000"
 12269      4E543332 
 12269      5F432863 
 12269      29206320 
 12269      23232055 
 12270              	.LASF770:
 12271 2e01 494E434C 		.ascii	"INCLUDE_vTaskDelayUntil 1\000"
 12271      5544455F 
 12271      76546173 
 12271      6B44656C 
 12271      6179556E 
 12272              	.LASF87:
 12273 2e1b 5F5F494E 		.ascii	"__INT64_MAX__ 9223372036854775807LL\000"
 12273      5436345F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 311


 12273      4D41585F 
 12273      5F203932 
 12273      32333337 
 12274              	.LASF668:
 12275 2e3f 5F5F6861 		.ascii	"__have_long32 1\000"
 12275      76655F6C 
 12275      6F6E6733 
 12275      32203100 
 12276              	.LASF132:
 12277 2e4f 5F5F464C 		.ascii	"__FLT_EPSILON__ 1.1920928955078125e-7F\000"
 12277      545F4550 
 12277      53494C4F 
 12277      4E5F5F20 
 12277      312E3139 
 12278              	.LASF596:
 12279 2e76 5F5F5853 		.ascii	"__XSTRING(x) __STRING(x)\000"
 12279      5452494E 
 12279      47287829 
 12279      205F5F53 
 12279      5452494E 
 12280              	.LASF559:
 12281 2e8f 5F5F6174 		.ascii	"__attribute_pure__ \000"
 12281      74726962 
 12281      7574655F 
 12281      70757265 
 12281      5F5F2000 
 12282              	.LASF370:
 12283 2ea3 5F574944 		.ascii	"_WIDE_ORIENT 1\000"
 12283      455F4F52 
 12283      49454E54 
 12283      203100
 12284              	.LASF1220:
 12285 2eb2 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 12285      74546173 
 12285      6B556E62 
 12285      6C6F636B 
 12285      54696D65 
 12286              	.LASF950:
 12287 2ec7 78436F52 		.ascii	"xCoRoutineHandle CoRoutineHandle_t\000"
 12287      6F757469 
 12287      6E654861 
 12287      6E646C65 
 12287      20436F52 
 12288              	.LASF30:
 12289 2eea 5F5F5054 		.ascii	"__PTRDIFF_TYPE__ int\000"
 12289      52444946 
 12289      465F5459 
 12289      50455F5F 
 12289      20696E74 
 12290              	.LASF838:
 12291 2eff 494E434C 		.ascii	"INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetM"
 12291      5544455F 
 12291      7853656D 
 12291      6170686F 
 12291      72654765 
 12292 2f32 75746578 		.ascii	"utexHolder\000"
 12292      486F6C64 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 312


 12292      657200
 12293              	.LASF895:
 12294 2f3d 74726163 		.ascii	"traceTASK_RESUME(pxTaskToResume) \000"
 12294      65544153 
 12294      4B5F5245 
 12294      53554D45 
 12294      28707854 
 12295              	.LASF918:
 12296 2f5f 74726163 		.ascii	"traceQUEUE_REGISTRY_ADD(xQueue,pcQueueName) \000"
 12296      65515545 
 12296      55455F52 
 12296      45474953 
 12296      5452595F 
 12297              	.LASF577:
 12298 2f8c 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VARARGS 1\000"
 12298      55434C49 
 12298      4B455F42 
 12298      55494C54 
 12298      494E5F56 
 12299              	.LASF42:
 12300 2fa9 5F5F5549 		.ascii	"__UINT8_TYPE__ unsigned char\000"
 12300      4E54385F 
 12300      54595045 
 12300      5F5F2075 
 12300      6E736967 
 12301              	.LASF522:
 12302 2fc6 5F524545 		.ascii	"_REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_sign"
 12302      4E545F53 
 12302      49474E47 
 12302      414D2870 
 12302      74722920 
 12303 2ff9 67616D29 		.ascii	"gam)\000"
 12303      00
 12304              	.LASF699:
 12305 2ffe 494E545F 		.ascii	"INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)\000"
 12305      4C454153 
 12305      5433325F 
 12305      4D494E20 
 12305      282D5F5F 
 12306              	.LASF315:
 12307 3029 5F5F4743 		.ascii	"__GCC_ATOMIC_SHORT_LOCK_FREE 2\000"
 12307      435F4154 
 12307      4F4D4943 
 12307      5F53484F 
 12307      52545F4C 
 12308              	.LASF1209:
 12309 3048 7850656E 		.ascii	"xPendingReadyList\000"
 12309      64696E67 
 12309      52656164 
 12309      794C6973 
 12309      7400
 12310              	.LASF1052:
 12311 305a 55426173 		.ascii	"UBaseT_t\000"
 12311      65545F74 
 12311      00
 12312              	.LASF634:
 12313 3063 5F5F7374 		.ascii	"__strong_reference(sym,aliassym) extern __typeof (s"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 313


 12313      726F6E67 
 12313      5F726566 
 12313      6572656E 
 12313      63652873 
 12314 3096 796D2920 		.ascii	"ym) aliassym __attribute__ ((__alias__ (#sym)))\000"
 12314      616C6961 
 12314      7373796D 
 12314      205F5F61 
 12314      74747269 
 12315              	.LASF269:
 12316 30c6 5F5F4851 		.ascii	"__HQ_IBIT__ 0\000"
 12316      5F494249 
 12316      545F5F20 
 12316      3000
 12317              	.LASF1225:
 12318 30d4 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 12318      7274436F 
 12318      756E744C 
 12318      65616469 
 12318      6E675A65 
 12319              	.LASF231:
 12320 30ec 5F5F5553 		.ascii	"__USACCUM_FBIT__ 8\000"
 12320      41434355 
 12320      4D5F4642 
 12320      49545F5F 
 12320      203800
 12321              	.LASF994:
 12322 30ff 746D7243 		.ascii	"tmrCOMMAND_START ( ( BaseT_t ) 1 )\000"
 12322      4F4D4D41 
 12322      4E445F53 
 12322      54415254 
 12322      20282028 
 12323              	.LASF319:
 12324 3122 5F5F4743 		.ascii	"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1\000"
 12324      435F4154 
 12324      4F4D4943 
 12324      5F544553 
 12324      545F414E 
 12325              	.LASF465:
 12326 3146 5F535953 		.ascii	"_SYS__TYPES_H \000"
 12326      5F5F5459 
 12326      5045535F 
 12326      482000
 12327              	.LASF526:
 12328 3155 5F524545 		.ascii	"_REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._ad"
 12328      4E545F52 
 12328      414E4434 
 12328      385F4144 
 12328      44287074 
 12329 3188 642900   		.ascii	"d)\000"
 12330              	.LASF900:
 12331 318b 74726163 		.ascii	"traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageV"
 12331      6554494D 
 12331      45525F43 
 12331      4F4D4D41 
 12331      4E445F53 
 12332 31be 616C7565 		.ascii	"alueValue,xReturn) \000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 314


 12332      56616C75 
 12332      652C7852 
 12332      65747572 
 12332      6E292000 
 12333              	.LASF652:
 12334 31d2 5F4E4557 		.ascii	"_NEWLIB_ALLOCA_H \000"
 12334      4C49425F 
 12334      414C4C4F 
 12334      43415F48 
 12334      2000
 12335              	.LASF1017:
 12336 31e4 74736B49 		.ascii	"tskIDLE_STACK_SIZE configMINIMAL_STACK_SIZE\000"
 12336      444C455F 
 12336      53544143 
 12336      4B5F5349 
 12336      5A452063 
 12337              	.LASF163:
 12338 3210 5F5F4C44 		.ascii	"__LDBL_HAS_INFINITY__ 1\000"
 12338      424C5F48 
 12338      41535F49 
 12338      4E46494E 
 12338      4954595F 
 12339              	.LASF743:
 12340 3228 46524545 		.ascii	"FREERTOS_CONFIG_H \000"
 12340      52544F53 
 12340      5F434F4E 
 12340      4649475F 
 12340      482000
 12341              	.LASF169:
 12342 323b 5F5F4445 		.ascii	"__DEC32_MAX__ 9.999999E96DF\000"
 12342      4333325F 
 12342      4D41585F 
 12342      5F20392E 
 12342      39393939 
 12343              	.LASF692:
 12344 3257 55494E54 		.ascii	"UINT16_MAX __UINT16_MAX__\000"
 12344      31365F4D 
 12344      4158205F 
 12344      5F55494E 
 12344      5431365F 
 12345              	.LASF980:
 12346 3271 7461736B 		.ascii	"taskYIELD() portYIELD()\000"
 12346      5949454C 
 12346      44282920 
 12346      706F7274 
 12346      5949454C 
 12347              	.LASF655:
 12348 3289 5F5F636F 		.ascii	"__compar_fn_t_defined \000"
 12348      6D706172 
 12348      5F666E5F 
 12348      745F6465 
 12348      66696E65 
 12349              	.LASF1021:
 12350 32a0 74736B52 		.ascii	"tskREADY_CHAR ( 'R' )\000"
 12350      45414459 
 12350      5F434841 
 12350      52202820 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 315


 12350      27522720 
 12351              	.LASF1187:
 12352 32b6 65537461 		.ascii	"eState\000"
 12352      746500
 12353              	.LASF351:
 12354 32bd 5F5F4152 		.ascii	"__ARM_ARCH_EXT_IDIV__ 1\000"
 12354      4D5F4152 
 12354      43485F45 
 12354      58545F49 
 12354      4449565F 
 12355              	.LASF349:
 12356 32d5 5F5F4152 		.ascii	"__ARM_PCS 1\000"
 12356      4D5F5043 
 12356      53203100 
 12357              	.LASF793:
 12358 32e1 65727243 		.ascii	"errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )\000"
 12358      4F554C44 
 12358      5F4E4F54 
 12358      5F414C4C 
 12358      4F434154 
 12359              	.LASF889:
 12360 330e 74726163 		.ascii	"traceTASK_CREATE_FAILED() \000"
 12360      65544153 
 12360      4B5F4352 
 12360      45415445 
 12360      5F464149 
 12361              	.LASF722:
 12362 3329 55494E54 		.ascii	"UINTMAX_MAX __UINTMAX_MAX__\000"
 12362      4D41585F 
 12362      4D415820 
 12362      5F5F5549 
 12362      4E544D41 
 12363              	.LASF83:
 12364 3345 5F5F5349 		.ascii	"__SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)\000"
 12364      475F4154 
 12364      4F4D4943 
 12364      5F4D494E 
 12364      5F5F2028 
 12365              	.LASF243:
 12366 3372 5F5F5541 		.ascii	"__UACCUM_MIN__ 0.0UK\000"
 12366      4343554D 
 12366      5F4D494E 
 12366      5F5F2030 
 12366      2E30554B 
 12367              	.LASF438:
 12368 3387 5F425344 		.ascii	"_BSD_WCHAR_T_ \000"
 12368      5F574348 
 12368      41525F54 
 12368      5F2000
 12369              	.LASF1158:
 12370 3396 76546173 		.ascii	"vTaskSwitchContext\000"
 12370      6B537769 
 12370      74636843 
 12370      6F6E7465 
 12370      787400
 12371              	.LASF691:
 12372 33a9 494E5431 		.ascii	"INT16_MAX __INT16_MAX__\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 316


 12372      365F4D41 
 12372      58205F5F 
 12372      494E5431 
 12372      365F4D41 
 12373              	.LASF619:
 12374 33c1 5F5F7265 		.ascii	"__returns_twice __attribute__((__returns_twice__))\000"
 12374      7475726E 
 12374      735F7477 
 12374      69636520 
 12374      5F5F6174 
 12375              	.LASF724:
 12376 33f4 5349475F 		.ascii	"SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)\000"
 12376      41544F4D 
 12376      49435F4D 
 12376      494E2028 
 12376      2D5F5F53 
 12377              	.LASF735:
 12378 3420 55494E54 		.ascii	"UINT16_C(x) __UINT16_C(x)\000"
 12378      31365F43 
 12378      28782920 
 12378      5F5F5549 
 12378      4E543136 
 12379              	.LASF789:
 12380 343a 70645041 		.ascii	"pdPASS ( pdTRUE )\000"
 12380      53532028 
 12380      20706454 
 12380      52554520 
 12380      2900
 12381              	.LASF486:
 12382 344c 5F5F6C6F 		.ascii	"__lock_acquire_recursive(lock) (_CAST_VOID 0)\000"
 12382      636B5F61 
 12382      63717569 
 12382      72655F72 
 12382      65637572 
 12383              	.LASF933:
 12384 347a 636F6E66 		.ascii	"configUSE_NEWLIB_REENTRANT 0\000"
 12384      69675553 
 12384      455F4E45 
 12384      574C4942 
 12384      5F524545 
 12385              	.LASF706:
 12386 3497 494E545F 		.ascii	"INT_LEAST64_MAX __INT_LEAST64_MAX__\000"
 12386      4C454153 
 12386      5436345F 
 12386      4D415820 
 12386      5F5F494E 
 12387              	.LASF1194:
 12388 34bb 70756345 		.ascii	"pucEndOfStack\000"
 12388      6E644F66 
 12388      53746163 
 12388      6B00
 12389              	.LASF1014:
 12390 34c9 7461736B 		.ascii	"taskFIRST_CHECK_FOR_STACK_OVERFLOW() \000"
 12390      46495253 
 12390      545F4348 
 12390      45434B5F 
 12390      464F525F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 317


 12391              	.LASF148:
 12392 34ef 5F5F4442 		.ascii	"__DBL_HAS_DENORM__ 1\000"
 12392      4C5F4841 
 12392      535F4445 
 12392      4E4F524D 
 12392      5F5F2031 
 12393              	.LASF1160:
 12394 3504 7078436F 		.ascii	"pxConstList\000"
 12394      6E73744C 
 12394      69737400 
 12395              	.LASF821:
 12396 3510 706F7274 		.ascii	"portTASK_FUNCTION(vFunction,pvParameters) void vFun"
 12396      5441534B 
 12396      5F46554E 
 12396      4354494F 
 12396      4E287646 
 12397 3543 6374696F 		.ascii	"ction( void *pvParameters )\000"
 12397      6E282076 
 12397      6F696420 
 12397      2A707650 
 12397      6172616D 
 12398              	.LASF858:
 12399 355f 74726163 		.ascii	"traceLOW_POWER_IDLE_BEGIN() \000"
 12399      654C4F57 
 12399      5F504F57 
 12399      45525F49 
 12399      444C455F 
 12400              	.LASF744:
 12401 357c 636F6E66 		.ascii	"configUSE_PREEMPTION 1\000"
 12401      69675553 
 12401      455F5052 
 12401      45454D50 
 12401      54494F4E 
 12402              	.LASF676:
 12403 3593 5F5F696E 		.ascii	"__int_least64_t_defined 1\000"
 12403      745F6C65 
 12403      61737436 
 12403      345F745F 
 12403      64656669 
 12404              	.LASF913:
 12405 35ad 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS(xEventGroup,uxBitsToSet) "
 12405      65455645 
 12405      4E545F47 
 12405      524F5550 
 12405      5F534554 
 12406 35e0 00       		.ascii	"\000"
 12407              	.LASF1110:
 12408 35e1 70784372 		.ascii	"pxCreatedTask\000"
 12408      65617465 
 12408      64546173 
 12408      6B00
 12409              	.LASF1203:
 12410 35ef 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 12410      736B496E 
 12410      6372656D 
 12410      656E744D 
 12410      75746578 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 318


 12411              	.LASF785:
 12412 360d 50524F4A 		.ascii	"PROJDEFS_H \000"
 12412      44454653 
 12412      5F482000 
 12413              	.LASF1139:
 12414 3619 78546173 		.ascii	"xTaskToResume\000"
 12414      6B546F52 
 12414      6573756D 
 12414      6500
 12415              	.LASF178:
 12416 3627 5F5F4445 		.ascii	"__DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD\000"
 12416      4336345F 
 12416      5355424E 
 12416      4F524D41 
 12416      4C5F4D49 
 12417              	.LASF195:
 12418 3658 5F5F5553 		.ascii	"__USFRACT_EPSILON__ 0x1P-8UHR\000"
 12418      46524143 
 12418      545F4550 
 12418      53494C4F 
 12418      4E5F5F20 
 12419              	.LASF449:
 12420 3676 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 12420      20282876 
 12420      6F696420 
 12420      2A293029 
 12420      00
 12421              	.LASF1038:
 12422 3687 73686F72 		.ascii	"short unsigned int\000"
 12422      7420756E 
 12422      7369676E 
 12422      65642069 
 12422      6E7400
 12423              	.LASF111:
 12424 369a 5F5F494E 		.ascii	"__INT_FAST64_MAX__ 9223372036854775807LL\000"
 12424      545F4641 
 12424      53543634 
 12424      5F4D4158 
 12424      5F5F2039 
 12425              	.LASF475:
 12426 36c3 5F5F5F69 		.ascii	"___int_least32_t_defined 1\000"
 12426      6E745F6C 
 12426      65617374 
 12426      33325F74 
 12426      5F646566 
 12427              	.LASF259:
 12428 36de 5F5F4C4C 		.ascii	"__LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK\000"
 12428      41434355 
 12428      4D5F4D41 
 12428      585F5F20 
 12428      30583746 
 12429              	.LASF953:
 12430 3708 746D7254 		.ascii	"tmrTIMER_CALLBACK TimerCallbackFunction_t\000"
 12430      494D4552 
 12430      5F43414C 
 12430      4C424143 
 12430      4B205469 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 319


 12431              	.LASF450:
 12432 3732 5F5F6E65 		.ascii	"__need_NULL\000"
 12432      65645F4E 
 12432      554C4C00 
 12433              	.LASF1211:
 12434 373e 75785461 		.ascii	"uxTasksDeleted\000"
 12434      736B7344 
 12434      656C6574 
 12434      656400
 12435              	.LASF674:
 12436 374d 5F5F696E 		.ascii	"__int_least32_t_defined 1\000"
 12436      745F6C65 
 12436      61737433 
 12436      325F745F 
 12436      64656669 
 12437              	.LASF303:
 12438 3767 5F5F5553 		.ascii	"__USER_LABEL_PREFIX__ \000"
 12438      45525F4C 
 12438      4142454C 
 12438      5F505245 
 12438      4649585F 
 12439              	.LASF218:
 12440 377e 5F5F4C4C 		.ascii	"__LLFRACT_MIN__ (-0.5LLR-0.5LLR)\000"
 12440      46524143 
 12440      545F4D49 
 12440      4E5F5F20 
 12440      282D302E 
 12441              	.LASF709:
 12442 379f 494E545F 		.ascii	"INT_FAST8_MAX __INT_FAST8_MAX__\000"
 12442      46415354 
 12442      385F4D41 
 12442      58205F5F 
 12442      494E545F 
 12443              	.LASF747:
 12444 37bf 636F6E66 		.ascii	"configUSE_TICK_HOOK 1\000"
 12444      69675553 
 12444      455F5449 
 12444      434B5F48 
 12444      4F4F4B20 
 12445              	.LASF761:
 12446 37d5 636F6E66 		.ascii	"configCHECK_FOR_STACK_OVERFLOW 0\000"
 12446      69674348 
 12446      45434B5F 
 12446      464F525F 
 12446      53544143 
 12447              	.LASF738:
 12448 37f6 494E5436 		.ascii	"INT64_C(x) __INT64_C(x)\000"
 12448      345F4328 
 12448      7829205F 
 12448      5F494E54 
 12448      36345F43 
 12449              	.LASF711:
 12450 380e 494E545F 		.ascii	"INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)\000"
 12450      46415354 
 12450      31365F4D 
 12450      494E2028 
 12450      2D5F5F49 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 320


 12451              	.LASF784:
 12452 3837 636F6E66 		.ascii	"configASSERT(x) if( ( x ) == 0 ) { taskDISABLE_INTE"
 12452      69674153 
 12452      53455254 
 12452      28782920 
 12452      69662820 
 12453 386a 52525550 		.ascii	"RRUPTS(); for( ;; ); }\000"
 12453      54532829 
 12453      3B20666F 
 12453      7228203B 
 12453      3B20293B 
 12454              	.LASF535:
 12455 3881 5F524545 		.ascii	"_REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_"
 12455      4E545F4D 
 12455      424C454E 
 12455      5F535441 
 12455      54452870 
 12456 38b4 73746174 		.ascii	"state)\000"
 12456      652900
 12457              	.LASF745:
 12458 38bb 636F6E66 		.ascii	"configUSE_IDLE_HOOK 0\000"
 12458      69675553 
 12458      455F4944 
 12458      4C455F48 
 12458      4F4F4B20 
 12459              	.LASF956:
 12460 38d1 784C6973 		.ascii	"xList List_t\000"
 12460      74204C69 
 12460      73745F74 
 12460      00
 12461              	.LASF1147:
 12462 38de 78546963 		.ascii	"xTicks\000"
 12462      6B7300
 12463              	.LASF326:
 12464 38e5 5F5F4152 		.ascii	"__ARM_FEATURE_QBIT 1\000"
 12464      4D5F4645 
 12464      41545552 
 12464      455F5142 
 12464      49542031 
 12465              	.LASF331:
 12466 38fa 5F5F4152 		.ascii	"__ARM_FEATURE_CLZ 1\000"
 12466      4D5F4645 
 12466      41545552 
 12466      455F434C 
 12466      5A203100 
 12467              	.LASF8:
 12468 390e 5F5F4154 		.ascii	"__ATOMIC_ACQUIRE 2\000"
 12468      4F4D4943 
 12468      5F414351 
 12468      55495245 
 12468      203200
 12469              	.LASF818:
 12470 3921 706F7274 		.ascii	"portENTER_CRITICAL() vPortEnterCritical()\000"
 12470      454E5445 
 12470      525F4352 
 12470      49544943 
 12470      414C2829 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 321


 12471              	.LASF1213:
 12472 394b 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 12472      7272656E 
 12472      744E756D 
 12472      6265724F 
 12472      66546173 
 12473              	.LASF1144:
 12474 3962 76546173 		.ascii	"vTaskSuspendAll\000"
 12474      6B537573 
 12474      70656E64 
 12474      416C6C00 
 12475              	.LASF491:
 12476 3972 756E7369 		.ascii	"unsigned signed\000"
 12476      676E6564 
 12476      20736967 
 12476      6E656400 
 12477              	.LASF1024:
 12478 3982 7461736B 		.ascii	"taskRECORD_READY_PRIORITY(uxPriority) portRECORD_RE"
 12478      5245434F 
 12478      52445F52 
 12478      45414459 
 12478      5F505249 
 12479 39b5 4144595F 		.ascii	"ADY_PRIORITY( uxPriority, uxTopReadyPriority )\000"
 12479      5052494F 
 12479      52495459 
 12479      28207578 
 12479      5072696F 
 12480              	.LASF961:
 12481 39e4 6C697374 		.ascii	"listGET_LIST_ITEM_OWNER(pxListItem) ( ( pxListItem "
 12481      4745545F 
 12481      4C495354 
 12481      5F495445 
 12481      4D5F4F57 
 12482 3a17 292D3E70 		.ascii	")->pvOwner )\000"
 12482      764F776E 
 12482      65722029 
 12482      00
 12483              	.LASF333:
 12484 3a24 5F5F4152 		.ascii	"__ARM_SIZEOF_WCHAR_T 4\000"
 12484      4D5F5349 
 12484      5A454F46 
 12484      5F574348 
 12484      41525F54 
 12485              	.LASF454:
 12486 3a3b 5F414E53 		.ascii	"_ANSI_STDDEF_H \000"
 12486      495F5354 
 12486      44444546 
 12486      5F482000 
 12487              	.LASF64:
 12488 3a4b 5F5F6861 		.ascii	"__has_include(STR) __has_include__(STR)\000"
 12488      735F696E 
 12488      636C7564 
 12488      65285354 
 12488      5229205F 
 12489              	.LASF1077:
 12490 3a73 784F7665 		.ascii	"xOverflowCount\000"
 12490      72666C6F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 322


 12490      77436F75 
 12490      6E7400
 12491              	.LASF1058:
 12492 3a82 70764F77 		.ascii	"pvOwner\000"
 12492      6E657200 
 12493              	.LASF891:
 12494 3a8a 74726163 		.ascii	"traceTASK_DELAY_UNTIL() \000"
 12494      65544153 
 12494      4B5F4445 
 12494      4C41595F 
 12494      554E5449 
 12495              	.LASF749:
 12496 3aa3 636F6E66 		.ascii	"configTICK_RATE_HZ ( ( portTickType ) 1200 )\000"
 12496      69675449 
 12496      434B5F52 
 12496      4154455F 
 12496      485A2028 
 12497              	.LASF146:
 12498 3ad0 5F5F4442 		.ascii	"__DBL_EPSILON__ ((double)2.2204460492503131e-16L)\000"
 12498      4C5F4550 
 12498      53494C4F 
 12498      4E5F5F20 
 12498      2828646F 
 12499              	.LASF1170:
 12500 3b02 70785469 		.ascii	"pxTimeOut\000"
 12500      6D654F75 
 12500      7400
 12501              	.LASF208:
 12502 3b0c 5F5F4C46 		.ascii	"__LFRACT_MIN__ (-0.5LR-0.5LR)\000"
 12502      52414354 
 12502      5F4D494E 
 12502      5F5F2028 
 12502      2D302E35 
 12503              	.LASF566:
 12504 3b2a 5F5F6861 		.ascii	"__has_feature(x) 0\000"
 12504      735F6665 
 12504      61747572 
 12504      65287829 
 12504      203000
 12505              	.LASF523:
 12506 3b3d 5F524545 		.ascii	"_REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_nex"
 12506      4E545F52 
 12506      414E445F 
 12506      4E455854 
 12506      28707472 
 12507 3b70 742900   		.ascii	"t)\000"
 12508              	.LASF1051:
 12509 3b73 42617365 		.ascii	"BaseT_t\000"
 12509      545F7400 
 12510              	.LASF239:
 12511 3b7b 5F5F4143 		.ascii	"__ACCUM_MAX__ 0X7FFFFFFFP-15K\000"
 12511      43554D5F 
 12511      4D41585F 
 12511      5F203058 
 12511      37464646 
 12512              	.LASF875:
 12513 3b99 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE_FAILED() \000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 323


 12513      65435245 
 12513      4154455F 
 12513      434F554E 
 12513      54494E47 
 12514              	.LASF154:
 12515 3bc2 5F5F4C44 		.ascii	"__LDBL_MIN_10_EXP__ (-307)\000"
 12515      424C5F4D 
 12515      494E5F31 
 12515      305F4558 
 12515      505F5F20 
 12516              	.LASF1071:
 12517 3bdd 65526561 		.ascii	"eReady\000"
 12517      647900
 12518              	.LASF817:
 12519 3be4 706F7274 		.ascii	"portENABLE_INTERRUPTS() vPortClearInterruptMask(0)\000"
 12519      454E4142 
 12519      4C455F49 
 12519      4E544552 
 12519      52555054 
 12520              	.LASF887:
 12521 3c17 74726163 		.ascii	"traceQUEUE_DELETE(pxQueue) \000"
 12521      65515545 
 12521      55455F44 
 12521      454C4554 
 12521      45287078 
 12522              	.LASF321:
 12523 3c33 5F5F4743 		.ascii	"__GCC_HAVE_DWARF2_CFI_ASM 1\000"
 12523      435F4841 
 12523      56455F44 
 12523      57415246 
 12523      325F4346 
 12524              	.LASF469:
 12525 3c4f 5F5F5F69 		.ascii	"___int8_t_defined 1\000"
 12525      6E74385F 
 12525      745F6465 
 12525      66696E65 
 12525      64203100 
 12526              	.LASF1162:
 12527 3c63 70784576 		.ascii	"pxEventList\000"
 12527      656E744C 
 12527      69737400 
 12528              	.LASF1227:
 12529 3c6f 75635265 		.ascii	"ucReturn\000"
 12529      7475726E 
 12529      00
 12530              	.LASF289:
 12531 3c78 5F5F5341 		.ascii	"__SA_IBIT__ 16\000"
 12531      5F494249 
 12531      545F5F20 
 12531      313600
 12532              	.LASF1173:
 12533 3c87 76546173 		.ascii	"vTaskMissedYield\000"
 12533      6B4D6973 
 12533      73656459 
 12533      69656C64 
 12533      00
 12534              	.LASF625:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 324


 12535 3c98 5F5F6F66 		.ascii	"__offsetof(type,field) offsetof(type, field)\000"
 12535      66736574 
 12535      6F662874 
 12535      7970652C 
 12535      6669656C 
 12536              	.LASF2:
 12537 3cc5 5F5F474E 		.ascii	"__GNUC__ 4\000"
 12537      55435F5F 
 12537      203400
 12538              	.LASF787:
 12539 3cd0 70644641 		.ascii	"pdFALSE ( ( BaseT_t ) 0 )\000"
 12539      4C534520 
 12539      28202820 
 12539      42617365 
 12539      545F7420 
 12540              	.LASF43:
 12541 3cea 5F5F5549 		.ascii	"__UINT16_TYPE__ short unsigned int\000"
 12541      4E543136 
 12541      5F545950 
 12541      455F5F20 
 12541      73686F72 
 12542              	.LASF658:
 12543 3d0d 52414E44 		.ascii	"RAND_MAX __RAND_MAX\000"
 12543      5F4D4158 
 12543      205F5F52 
 12543      414E445F 
 12543      4D415800 
 12544              	.LASF764:
 12545 3d21 636F6E66 		.ascii	"configGENERATE_RUN_TIME_STATS 0\000"
 12545      69674745 
 12545      4E455241 
 12545      54455F52 
 12545      554E5F54 
 12546              	.LASF1040:
 12547 3d41 5F5F7569 		.ascii	"__uint32_t\000"
 12547      6E743332 
 12547      5F7400
 12548              	.LASF343:
 12549 3d4c 5F5F534F 		.ascii	"__SOFTFP__ 1\000"
 12549      46544650 
 12549      5F5F2031 
 12549      00
 12550              	.LASF673:
 12551 3d59 5F5F696E 		.ascii	"__int32_t_defined 1\000"
 12551      7433325F 
 12551      745F6465 
 12551      66696E65 
 12551      64203100 
 12552              	.LASF959:
 12553 3d6d 636F6E66 		.ascii	"configLIST_VOLATILE \000"
 12553      69674C49 
 12553      53545F56 
 12553      4F4C4154 
 12553      494C4520 
 12554              	.LASF167:
 12555 3d82 5F5F4445 		.ascii	"__DEC32_MAX_EXP__ 97\000"
 12555      4333325F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 325


 12555      4D41585F 
 12555      4558505F 
 12555      5F203937 
 12556              	.LASF1169:
 12557 3d97 76546173 		.ascii	"vTaskSetTimeOutState\000"
 12557      6B536574 
 12557      54696D65 
 12557      4F757453 
 12557      74617465 
 12558              	.LASF417:
 12559 3dac 5F545F53 		.ascii	"_T_SIZE_ \000"
 12559      495A455F 
 12559      2000
 12560              	.LASF774:
 12561 3db6 636F6E66 		.ascii	"configIP_ADDR1 168\000"
 12561      69674950 
 12561      5F414444 
 12561      52312031 
 12561      363800
 12562              	.LASF558:
 12563 3dc9 5F5F6174 		.ascii	"__attribute_malloc__ \000"
 12563      74726962 
 12563      7574655F 
 12563      6D616C6C 
 12563      6F635F5F 
 12564              	.LASF940:
 12565 3ddf 78546173 		.ascii	"xTaskHandle TaskHandle_t\000"
 12565      6B48616E 
 12565      646C6520 
 12565      5461736B 
 12565      48616E64 
 12566              	.LASF732:
 12567 3df8 494E5438 		.ascii	"INT8_C(x) __INT8_C(x)\000"
 12567      5F432878 
 12567      29205F5F 
 12567      494E5438 
 12567      5F432878 
 12568              	.LASF58:
 12569 3e0e 5F5F5549 		.ascii	"__UINT_FAST8_TYPE__ unsigned int\000"
 12569      4E545F46 
 12569      41535438 
 12569      5F545950 
 12569      455F5F20 
 12570              	.LASF257:
 12571 3e2f 5F5F4C4C 		.ascii	"__LLACCUM_IBIT__ 32\000"
 12571      41434355 
 12571      4D5F4942 
 12571      49545F5F 
 12571      20333200 
 12572              	.LASF200:
 12573 3e43 5F5F4652 		.ascii	"__FRACT_EPSILON__ 0x1P-15R\000"
 12573      4143545F 
 12573      45505349 
 12573      4C4F4E5F 
 12573      5F203078 
 12574              	.LASF1085:
 12575 3e5e 78544153 		.ascii	"xTASK_STATUS\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 326


 12575      4B5F5354 
 12575      41545553 
 12575      00
 12576              	.LASF51:
 12577 3e6b 5F5F5549 		.ascii	"__UINT_LEAST16_TYPE__ short unsigned int\000"
 12577      4E545F4C 
 12577      45415354 
 12577      31365F54 
 12577      5950455F 
 12578              	.LASF991:
 12579 3e94 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR ( ( BaseT_t ) "
 12579      4F4D4D41 
 12579      4E445F45 
 12579      58454355 
 12579      54455F43 
 12580 3ec7 2D322029 		.ascii	"-2 )\000"
 12580      00
 12581              	.LASF1063:
 12582 3ecc 4D696E69 		.ascii	"MiniListItem_t\000"
 12582      4C697374 
 12582      4974656D 
 12582      5F7400
 12583              	.LASF352:
 12584 3edb 5F5F4758 		.ascii	"__GXX_TYPEINFO_EQUALITY_INLINE 0\000"
 12584      585F5459 
 12584      5045494E 
 12584      464F5F45 
 12584      5155414C 
 12585              	.LASF1026:
 12586 3efc 7461736B 		.ascii	"taskRESET_READY_PRIORITY(uxPriority) { if( listCURR"
 12586      52455345 
 12586      545F5245 
 12586      4144595F 
 12586      5052494F 
 12587 3f2f 454E545F 		.ascii	"ENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority"
 12587      4C495354 
 12587      5F4C454E 
 12587      47544828 
 12587      20262820 
 12588 3f62 2029205D 		.ascii	" ) ] ) ) == ( UBaseT_t ) 0 ) { portRESET_READY_PRIO"
 12588      20292029 
 12588      203D3D20 
 12588      28205542 
 12588      61736554 
 12589 3f95 52495459 		.ascii	"RITY( ( uxPriority ), ( uxTopReadyPriority ) ); } }"
 12589      28202820 
 12589      75785072 
 12589      696F7269 
 12589      74792029 
 12590 3fc8 00       		.ascii	"\000"
 12591              	.LASF911:
 12592 3fc9 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS(xEventGroup,uxBitsToCle"
 12592      65455645 
 12592      4E545F47 
 12592      524F5550 
 12592      5F434C45 
 12593 3ffc 61722920 		.ascii	"ar) \000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 327


 12593      00
 12594              	.LASF88:
 12595 4001 5F5F5549 		.ascii	"__UINT8_MAX__ 255\000"
 12595      4E54385F 
 12595      4D41585F 
 12595      5F203235 
 12595      3500
 12596              	.LASF337:
 12597 4013 5F5F4150 		.ascii	"__APCS_32__ 1\000"
 12597      43535F33 
 12597      325F5F20 
 12597      3100
 12598              	.LASF412:
 12599 4021 5F5F6E65 		.ascii	"__need_NULL \000"
 12599      65645F4E 
 12599      554C4C20 
 12599      00
 12600              	.LASF870:
 12601 402e 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE(pxMutex) \000"
 12601      65474956 
 12601      455F4D55 
 12601      5445585F 
 12601      52454355 
 12602              	.LASF786:
 12603 4052 70644D53 		.ascii	"pdMS_TO_TICKS(xTimeInMs) ( ( ( TickT_t ) ( xTimeInM"
 12603      5F544F5F 
 12603      5449434B 
 12603      53287854 
 12603      696D6549 
 12604 4085 73202920 		.ascii	"s ) * configTICK_RATE_HZ ) / ( TickT_t ) 1000 )\000"
 12604      2A20636F 
 12604      6E666967 
 12604      5449434B 
 12604      5F524154 
 12605              	.LASF618:
 12606 40b5 5F5F6661 		.ascii	"__fastcall __attribute__((__fastcall__))\000"
 12606      73746361 
 12606      6C6C205F 
 12606      5F617474 
 12606      72696275 
 12607              	.LASF69:
 12608 40de 5F5F494E 		.ascii	"__INT_MAX__ 2147483647\000"
 12608      545F4D41 
 12608      585F5F20 
 12608      32313437 
 12608      34383336 
 12609              	.LASF464:
 12610 40f5 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 12610      65746F66 
 12610      28545950 
 12610      452C4D45 
 12610      4D424552 
 12611 4128 42455229 		.ascii	"BER)\000"
 12611      00
 12612              	.LASF53:
 12613 412d 5F5F5549 		.ascii	"__UINT_LEAST64_TYPE__ long long unsigned int\000"
 12613      4E545F4C 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 328


 12613      45415354 
 12613      36345F54 
 12613      5950455F 
 12614              	.LASF184:
 12615 415a 5F5F4445 		.ascii	"__DEC128_EPSILON__ 1E-33DL\000"
 12615      43313238 
 12615      5F455053 
 12615      494C4F4E 
 12615      5F5F2031 
 12616              	.LASF359:
 12617 4175 5F4E4557 		.ascii	"_NEWLIB_VERSION \"2.2.0\"\000"
 12617      4C49425F 
 12617      56455253 
 12617      494F4E20 
 12617      22322E32 
 12618              	.LASF1171:
 12619 418d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 12619      6B436865 
 12619      636B466F 
 12619      7254696D 
 12619      654F7574 
 12620              	.LASF160:
 12621 41a2 5F5F4C44 		.ascii	"__LDBL_EPSILON__ 2.2204460492503131e-16L\000"
 12621      424C5F45 
 12621      5053494C 
 12621      4F4E5F5F 
 12621      20322E32 
 12622              	.LASF937:
 12623 41cb 636F6E66 		.ascii	"configENABLE_BACKWARD_COMPATIBILITY 1\000"
 12623      6967454E 
 12623      41424C45 
 12623      5F424143 
 12623      4B574152 
 12624              	.LASF923:
 12625 41f1 7076506F 		.ascii	"pvPortMallocAligned(x,puxStackBuffer) ( ( ( puxStac"
 12625      72744D61 
 12625      6C6C6F63 
 12625      416C6967 
 12625      6E656428 
 12626 4224 6B427566 		.ascii	"kBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ("
 12626      66657220 
 12626      29203D3D 
 12626      204E554C 
 12626      4C202920 
 12627 4257 20707578 		.ascii	" puxStackBuffer ) )\000"
 12627      53746163 
 12627      6B427566 
 12627      66657220 
 12627      29202900 
 12628              	.LASF601:
 12629 426b 5F5F7075 		.ascii	"__pure2 __attribute__((__const__))\000"
 12629      72653220 
 12629      5F5F6174 
 12629      74726962 
 12629      7574655F 
 12630              	.LASF312:
 12631 428e 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR16_T_LOCK_FREE 2\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 329


 12631      435F4154 
 12631      4F4D4943 
 12631      5F434841 
 12631      5231365F 
 12632              	.LASF981:
 12633 42b0 7461736B 		.ascii	"taskENTER_CRITICAL() portENTER_CRITICAL()\000"
 12633      454E5445 
 12633      525F4352 
 12633      49544943 
 12633      414C2829 
 12634              	.LASF9:
 12635 42da 5F5F4154 		.ascii	"__ATOMIC_RELEASE 3\000"
 12635      4F4D4943 
 12635      5F52454C 
 12635      45415345 
 12635      203300
 12636              	.LASF766:
 12637 42ed 494E434C 		.ascii	"INCLUDE_uxTaskPriorityGet 1\000"
 12637      5544455F 
 12637      75785461 
 12637      736B5072 
 12637      696F7269 
 12638              	.LASF123:
 12639 4309 5F5F464C 		.ascii	"__FLT_MANT_DIG__ 24\000"
 12639      545F4D41 
 12639      4E545F44 
 12639      49475F5F 
 12639      20323400 
 12640              	.LASF503:
 12641 431d 5F52414E 		.ascii	"_RAND48_SEED_1 (0xabcd)\000"
 12641      4434385F 
 12641      53454544 
 12641      5F312028 
 12641      30786162 
 12642              	.LASF283:
 12643 4335 5F5F5544 		.ascii	"__UDQ_IBIT__ 0\000"
 12643      515F4942 
 12643      49545F5F 
 12643      203000
 12644              	.LASF1030:
 12645 4344 7461736B 		.ascii	"taskEVENT_LIST_ITEM_VALUE_IN_USE 0x80000000UL\000"
 12645      4556454E 
 12645      545F4C49 
 12645      53545F49 
 12645      54454D5F 
 12646              	.LASF480:
 12647 4372 5F5F4C4F 		.ascii	"__LOCK_INIT_RECURSIVE(class,lock) static int lock ="
 12647      434B5F49 
 12647      4E49545F 
 12647      52454355 
 12647      52534956 
 12648 43a5 20303B00 		.ascii	" 0;\000"
 12649              	.LASF714:
 12650 43a9 494E545F 		.ascii	"INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)\000"
 12650      46415354 
 12650      33325F4D 
 12650      494E2028 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 330


 12650      2D5F5F49 
 12651              	.LASF1199:
 12652 43d2 70784D75 		.ascii	"pxMutexHolder\000"
 12652      74657848 
 12652      6F6C6465 
 12652      7200
 12653              	.LASF617:
 12654 43e0 5F5F6E6F 		.ascii	"__nonnull(x) __attribute__((__nonnull__(x)))\000"
 12654      6E6E756C 
 12654      6C287829 
 12654      205F5F61 
 12654      74747269 
 12655              	.LASF588:
 12656 440d 5F5F4343 		.ascii	"__CC_SUPPORTS___FUNC__ 1\000"
 12656      5F535550 
 12656      504F5254 
 12656      535F5F5F 
 12656      46554E43 
 12657              	.LASF810:
 12658 4426 706F7274 		.ascii	"portNVIC_PENDSVSET_BIT ( 1UL << 28UL )\000"
 12658      4E564943 
 12658      5F50454E 
 12658      44535653 
 12658      45545F42 
 12659              	.LASF762:
 12660 444d 636F6E66 		.ascii	"configUSE_RECURSIVE_MUTEXES 1\000"
 12660      69675553 
 12660      455F5245 
 12660      43555253 
 12660      4956455F 
 12661              	.LASF571:
 12662 446b 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_CONSTANTS \000"
 12662      55434C49 
 12662      4B455F4D 
 12662      4154485F 
 12662      4255494C 
 12663              	.LASF456:
 12664 448e 5F545F50 		.ascii	"_T_PTRDIFF_ \000"
 12664      54524449 
 12664      46465F20 
 12664      00
 12665              	.LASF695:
 12666 449b 55494E54 		.ascii	"UINT_LEAST16_MAX __UINT_LEAST16_MAX__\000"
 12666      5F4C4541 
 12666      53543136 
 12666      5F4D4158 
 12666      205F5F55 
 12667              	.LASF161:
 12668 44c1 5F5F4C44 		.ascii	"__LDBL_DENORM_MIN__ 4.9406564584124654e-324L\000"
 12668      424C5F44 
 12668      454E4F52 
 12668      4D5F4D49 
 12668      4E5F5F20 
 12669              	.LASF1010:
 12670 44ee 7854696D 		.ascii	"xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken)"
 12670      65725374 
 12670      6F704672 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 331


 12670      6F6D4953 
 12670      52287854 
 12671 4521 20785469 		.ascii	" xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_"
 12671      6D657247 
 12671      656E6572 
 12671      6963436F 
 12671      6D6D616E 
 12672 4554 46524F4D 		.ascii	"FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )\000"
 12672      5F495352 
 12672      2C20302C 
 12672      20282070 
 12672      78486967 
 12673              	.LASF381:
 12674 4585 5F5F4558 		.ascii	"__EXPORT \000"
 12674      504F5254 
 12674      2000
 12675              	.LASF327:
 12676 458f 5F5F4152 		.ascii	"__ARM_FEATURE_SAT 1\000"
 12676      4D5F4645 
 12676      41545552 
 12676      455F5341 
 12676      54203100 
 12677              	.LASF1189:
 12678 45a3 70784669 		.ascii	"pxFirstTCB\000"
 12678      72737454 
 12678      434200
 12679              	.LASF394:
 12680 45ae 5F534947 		.ascii	"_SIGNED signed\000"
 12680      4E454420 
 12680      7369676E 
 12680      656400
 12681              	.LASF671:
 12682 45bd 5F5F696E 		.ascii	"__int16_t_defined 1\000"
 12682      7431365F 
 12682      745F6465 
 12682      66696E65 
 12682      64203100 
 12683              	.LASF222:
 12684 45d1 5F5F554C 		.ascii	"__ULLFRACT_IBIT__ 0\000"
 12684      4C465241 
 12684      43545F49 
 12684      4249545F 
 12684      5F203000 
 12685              	.LASF521:
 12686 45e5 5F524545 		.ascii	"_REENT_CHECK_SIGNAL_BUF(ptr) \000"
 12686      4E545F43 
 12686      4845434B 
 12686      5F534947 
 12686      4E414C5F 
 12687              	.LASF452:
 12688 4603 5F535444 		.ascii	"_STDDEF_H \000"
 12688      4445465F 
 12688      482000
 12689              	.LASF999:
 12690 460e 746D7246 		.ascii	"tmrFIRST_FROM_ISR_COMMAND ( ( BaseT_t ) 6 )\000"
 12690      49525354 
 12690      5F46524F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 332


 12690      4D5F4953 
 12690      525F434F 
 12691              	.LASF1161:
 12692 463a 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 12692      6B506C61 
 12692      63654F6E 
 12692      4576656E 
 12692      744C6973 
 12693              	.LASF501:
 12694 4650 5F524545 		.ascii	"_REENT_SMALL_CHECK_INIT(ptr) \000"
 12694      4E545F53 
 12694      4D414C4C 
 12694      5F434845 
 12694      434B5F49 
 12695              	.LASF757:
 12696 466e 636F6E66 		.ascii	"configUSE_MUTEXES 1\000"
 12696      69675553 
 12696      455F4D55 
 12696      54455845 
 12696      53203100 
 12697              	.LASF485:
 12698 4682 5F5F6C6F 		.ascii	"__lock_acquire(lock) (_CAST_VOID 0)\000"
 12698      636B5F61 
 12698      63717569 
 12698      7265286C 
 12698      6F636B29 
 12699              	.LASF952:
 12700 46a6 706F7274 		.ascii	"portTICK_RATE_MS portTICK_PERIOD_MS\000"
 12700      5449434B 
 12700      5F524154 
 12700      455F4D53 
 12700      20706F72 
 12701              	.LASF941:
 12702 46ca 78517565 		.ascii	"xQueueHandle QueueHandle_t\000"
 12702      75654861 
 12702      6E646C65 
 12702      20517565 
 12702      75654861 
 12703              	.LASF1175:
 12704 46e5 76546173 		.ascii	"vTaskSetTaskNumber\000"
 12704      6B536574 
 12704      5461736B 
 12704      4E756D62 
 12704      657200
 12705              	.LASF597:
 12706 46f8 5F5F636F 		.ascii	"__const const\000"
 12706      6E737420 
 12706      636F6E73 
 12706      7400
 12707              	.LASF751:
 12708 4706 636F6E66 		.ascii	"configTOTAL_HEAP_SIZE ( ( size_t ) ( 8 * 1024 ) )\000"
 12708      6967544F 
 12708      54414C5F 
 12708      48454150 
 12708      5F53495A 
 12709              	.LASF1081:
 12710 4738 70764261 		.ascii	"pvBaseAddress\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 333


 12710      73654164 
 12710      64726573 
 12710      7300
 12711              	.LASF130:
 12712 4746 5F5F464C 		.ascii	"__FLT_MAX__ 3.4028234663852886e+38F\000"
 12712      545F4D41 
 12712      585F5F20 
 12712      332E3430 
 12712      32383233 
 12713              	.LASF697:
 12714 476a 494E5433 		.ascii	"INT32_MAX __INT32_MAX__\000"
 12714      325F4D41 
 12714      58205F5F 
 12714      494E5433 
 12714      325F4D41 
 12715              	.LASF241:
 12716 4782 5F5F5541 		.ascii	"__UACCUM_FBIT__ 16\000"
 12716      4343554D 
 12716      5F464249 
 12716      545F5F20 
 12716      313600
 12717              	.LASF636:
 12718 4795 5F5F7761 		.ascii	"__warn_references(sym,msg) __asm__(\".section .gnu."
 12718      726E5F72 
 12718      65666572 
 12718      656E6365 
 12718      73287379 
 12719 47c7 7761726E 		.ascii	"warning.\" #sym); __asm__(\".asciz \\\"\" msg \"\\\""
 12719      696E672E 
 12719      22202373 
 12719      796D293B 
 12719      205F5F61 
 12720 47f3 22293B20 		.ascii	"\"); __asm__(\".previous\")\000"
 12720      5F5F6173 
 12720      6D5F5F28 
 12720      222E7072 
 12720      6576696F 
 12721              	.LASF205:
 12722 480c 5F5F5546 		.ascii	"__UFRACT_EPSILON__ 0x1P-16UR\000"
 12722      52414354 
 12722      5F455053 
 12722      494C4F4E 
 12722      5F5F2030 
 12723              	.LASF73:
 12724 4829 5F5F5743 		.ascii	"__WCHAR_MIN__ 0U\000"
 12724      4841525F 
 12724      4D494E5F 
 12724      5F203055 
 12724      00
 12725              	.LASF90:
 12726 483a 5F5F5549 		.ascii	"__UINT32_MAX__ 4294967295UL\000"
 12726      4E543332 
 12726      5F4D4158 
 12726      5F5F2034 
 12726      32393439 
 12727              	.LASF277:
 12728 4856 5F5F5551 		.ascii	"__UQQ_IBIT__ 0\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 334


 12728      515F4942 
 12728      49545F5F 
 12728      203000
 12729              	.LASF958:
 12730 4865 4C495354 		.ascii	"LIST_H \000"
 12730      5F482000 
 12731              	.LASF317:
 12732 486d 5F5F4743 		.ascii	"__GCC_ATOMIC_LONG_LOCK_FREE 2\000"
 12732      435F4154 
 12732      4F4D4943 
 12732      5F4C4F4E 
 12732      475F4C4F 
 12733              	.LASF253:
 12734 488b 5F5F554C 		.ascii	"__ULACCUM_MIN__ 0.0ULK\000"
 12734      41434355 
 12734      4D5F4D49 
 12734      4E5F5F20 
 12734      302E3055 
 12735              	.LASF364:
 12736 48a2 5F415445 		.ascii	"_ATEXIT_DYNAMIC_ALLOC 1\000"
 12736      5849545F 
 12736      44594E41 
 12736      4D49435F 
 12736      414C4C4F 
 12737              	.LASF430:
 12738 48ba 5F5F6E65 		.ascii	"__need_size_t\000"
 12738      65645F73 
 12738      697A655F 
 12738      7400
 12739              	.LASF1141:
 12740 48c8 75785361 		.ascii	"uxSavedInterruptStatus\000"
 12740      76656449 
 12740      6E746572 
 12740      72757074 
 12740      53746174 
 12741              	.LASF336:
 12742 48df 5F5F4152 		.ascii	"__ARM_ARCH 7\000"
 12742      4D5F4152 
 12742      43482037 
 12742      00
 12743              	.LASF1000:
 12744 48ec 746D7243 		.ascii	"tmrCOMMAND_START_FROM_ISR ( ( BaseT_t ) 6 )\000"
 12744      4F4D4D41 
 12744      4E445F53 
 12744      54415254 
 12744      5F46524F 
 12745              	.LASF420:
 12746 4918 5F53495A 		.ascii	"_SIZE_T_ \000"
 12746      455F545F 
 12746      2000
 12747              	.LASF395:
 12748 4922 5F444F54 		.ascii	"_DOTS , ...\000"
 12748      53202C20 
 12748      2E2E2E00 
 12749              	.LASF122:
 12750 492e 5F5F464C 		.ascii	"__FLT_RADIX__ 2\000"
 12750      545F5241 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 335


 12750      4449585F 
 12750      5F203200 
 12751              	.LASF1042:
 12752 493e 6C6F6E67 		.ascii	"long long int\000"
 12752      206C6F6E 
 12752      6720696E 
 12752      7400
 12753              	.LASF525:
 12754 494c 5F524545 		.ascii	"_REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._m"
 12754      4E545F52 
 12754      414E4434 
 12754      385F4D55 
 12754      4C542870 
 12755 497f 756C7429 		.ascii	"ult)\000"
 12755      00
 12756              	.LASF993:
 12757 4984 746D7243 		.ascii	"tmrCOMMAND_START_DONT_TRACE ( ( BaseT_t ) 0 )\000"
 12757      4F4D4D41 
 12757      4E445F53 
 12757      54415254 
 12757      5F444F4E 
 12758              	.LASF763:
 12759 49b2 636F6E66 		.ascii	"configQUEUE_REGISTRY_SIZE 10\000"
 12759      69675155 
 12759      4555455F 
 12759      52454749 
 12759      53545259 
 12760              	.LASF104:
 12761 49cf 5F5F5549 		.ascii	"__UINT_LEAST32_MAX__ 4294967295UL\000"
 12761      4E545F4C 
 12761      45415354 
 12761      33325F4D 
 12761      41585F5F 
 12762              	.LASF1135:
 12763 49f1 78596965 		.ascii	"xYieldRequired\000"
 12763      6C645265 
 12763      71756972 
 12763      656400
 12764              	.LASF754:
 12765 4a00 636F6E66 		.ascii	"configUSE_16_BIT_TICKS 0\000"
 12765      69675553 
 12765      455F3136 
 12765      5F424954 
 12765      5F544943 
 12766              	.LASF455:
 12767 4a19 5F505452 		.ascii	"_PTRDIFF_T \000"
 12767      44494646 
 12767      5F542000 
 12768              	.LASF1185:
 12769 4a25 7072764C 		.ascii	"prvListTaskWithinSingleList\000"
 12769      69737454 
 12769      61736B57 
 12769      69746869 
 12769      6E53696E 
 12770              	.LASF56:
 12771 4a41 5F5F494E 		.ascii	"__INT_FAST32_TYPE__ int\000"
 12771      545F4641 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 336


 12771      53543332 
 12771      5F545950 
 12771      455F5F20 
 12772              	.LASF781:
 12773 4a59 636F6E66 		.ascii	"configPRIO_BITS 5\000"
 12773      69675052 
 12773      494F5F42 
 12773      49545320 
 12773      3500
 12774              	.LASF518:
 12775 4a6b 5F524545 		.ascii	"_REENT_CHECK_ASCTIME_BUF(ptr) \000"
 12775      4E545F43 
 12775      4845434B 
 12775      5F415343 
 12775      54494D45 
 12776              	.LASF783:
 12777 4a8a 636F6E66 		.ascii	"configMAX_SYSCALL_INTERRUPT_PRIORITY ( 5 << (8 - co"
 12777      69674D41 
 12777      585F5359 
 12777      5343414C 
 12777      4C5F494E 
 12778 4abd 6E666967 		.ascii	"nfigPRIO_BITS) )\000"
 12778      5052494F 
 12778      5F424954 
 12778      53292029 
 12778      00
 12779              	.LASF489:
 12780 4ace 5F5F6C6F 		.ascii	"__lock_release(lock) (_CAST_VOID 0)\000"
 12780      636B5F72 
 12780      656C6561 
 12780      7365286C 
 12780      6F636B29 
 12781              	.LASF966:
 12782 4af2 6C697374 		.ascii	"listGET_NEXT(pxListItem) ( ( pxListItem )->pxNext )"
 12782      4745545F 
 12782      4E455854 
 12782      2870784C 
 12782      69737449 
 12783 4b25 00       		.ascii	"\000"
 12784              	.LASF720:
 12785 4b26 494E544D 		.ascii	"INTMAX_MAX __INTMAX_MAX__\000"
 12785      41585F4D 
 12785      4158205F 
 12785      5F494E54 
 12785      4D41585F 
 12786              	.LASF191:
 12787 4b40 5F5F5553 		.ascii	"__USFRACT_FBIT__ 8\000"
 12787      46524143 
 12787      545F4642 
 12787      49545F5F 
 12787      203800
 12788              	.LASF514:
 12789 4b53 5F524545 		.ascii	"_REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(va"
 12789      4E545F49 
 12789      4E49545F 
 12789      50545228 
 12789      76617229 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 337


 12790 4b86 72292929 		.ascii	"r))); (var)->_stdin = &(var)->__sf[0]; (var)->_stdo"
 12790      3B202876 
 12790      6172292D 
 12790      3E5F7374 
 12790      64696E20 
 12791 4bb9 7574203D 		.ascii	"ut = &(var)->__sf[1]; (var)->_stderr = &(var)->__sf"
 12791      20262876 
 12791      6172292D 
 12791      3E5F5F73 
 12791      665B315D 
 12792 4bec 5B325D3B 		.ascii	"[2]; (var)->_current_locale = \"C\"; (var)->_new._r"
 12792      20287661 
 12792      72292D3E 
 12792      5F637572 
 12792      72656E74 
 12793 4c1d 65656E74 		.ascii	"eent._rand_next = 1; (var)->_new._reent._r48._seed["
 12793      2E5F7261 
 12793      6E645F6E 
 12793      65787420 
 12793      3D20313B 
 12794 4c50 305D203D 		.ascii	"0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed["
 12794      205F5241 
 12794      4E443438 
 12794      5F534545 
 12794      445F303B 
 12795 4c83 315D203D 		.ascii	"1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed["
 12795      205F5241 
 12795      4E443438 
 12795      5F534545 
 12795      445F313B 
 12796 4cb6 325D203D 		.ascii	"2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult["
 12796      205F5241 
 12796      4E443438 
 12796      5F534545 
 12796      445F323B 
 12797 4ce9 305D203D 		.ascii	"0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult["
 12797      205F5241 
 12797      4E443438 
 12797      5F4D554C 
 12797      545F303B 
 12798 4d1c 315D203D 		.ascii	"1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult["
 12798      205F5241 
 12798      4E443438 
 12798      5F4D554C 
 12798      545F313B 
 12799 4d4f 325D203D 		.ascii	"2] = _RAND48_MULT_2; (var)->_new._reent._r48._add ="
 12799      205F5241 
 12799      4E443438 
 12799      5F4D554C 
 12799      545F323B 
 12800 4d82 205F5241 		.ascii	" _RAND48_ADD; }\000"
 12800      4E443438 
 12800      5F414444 
 12800      3B207D00 
 12801              	.LASF436:
 12802 4d92 5F5F5743 		.ascii	"__WCHAR_T \000"
 12802      4841525F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 338


 12802      542000
 12803              	.LASF372:
 12804 4d9d 5F5F5359 		.ascii	"__SYS_CONFIG_H__ \000"
 12804      535F434F 
 12804      4E464947 
 12804      5F485F5F 
 12804      2000
 12805              	.LASF659:
 12806 4daf 4D425F43 		.ascii	"MB_CUR_MAX __locale_mb_cur_max()\000"
 12806      55525F4D 
 12806      4158205F 
 12806      5F6C6F63 
 12806      616C655F 
 12807              	.LASF419:
 12808 4dd0 5F5F5349 		.ascii	"__SIZE_T \000"
 12808      5A455F54 
 12808      2000
 12809              	.LASF366:
 12810 4dda 5F484156 		.ascii	"_HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1\000"
 12810      455F4343 
 12810      5F494E48 
 12810      49424954 
 12810      5F4C4F4F 
 12811              	.LASF41:
 12812 4dfd 5F5F494E 		.ascii	"__INT64_TYPE__ long long int\000"
 12812      5436345F 
 12812      54595045 
 12812      5F5F206C 
 12812      6F6E6720 
 12813              	.LASF206:
 12814 4e1a 5F5F4C46 		.ascii	"__LFRACT_FBIT__ 31\000"
 12814      52414354 
 12814      5F464249 
 12814      545F5F20 
 12814      333100
 12815              	.LASF21:
 12816 4e2d 5F5F4348 		.ascii	"__CHAR_BIT__ 8\000"
 12816      41525F42 
 12816      49545F5F 
 12816      203800
 12817              	.LASF809:
 12818 4e3c 706F7274 		.ascii	"portNVIC_INT_CTRL_REG ( * ( ( volatile uint32_t * )"
 12818      4E564943 
 12818      5F494E54 
 12818      5F435452 
 12818      4C5F5245 
 12819 4e6f 20307865 		.ascii	" 0xe000ed04 ) )\000"
 12819      30303065 
 12819      64303420 
 12819      29202900 
 12820              	.LASF323:
 12821 4e7f 5F5F5349 		.ascii	"__SIZEOF_WCHAR_T__ 4\000"
 12821      5A454F46 
 12821      5F574348 
 12821      41525F54 
 12821      5F5F2034 
 12822              	.LASF1061:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 339


 12823 4e94 784C4953 		.ascii	"xLIST_ITEM\000"
 12823      545F4954 
 12823      454D00
 12824              	.LASF622:
 12825 4e9f 5F5F7072 		.ascii	"__predict_false(exp) __builtin_expect((exp), 0)\000"
 12825      65646963 
 12825      745F6661 
 12825      6C736528 
 12825      65787029 
 12826              	.LASF693:
 12827 4ecf 494E545F 		.ascii	"INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)\000"
 12827      4C454153 
 12827      5431365F 
 12827      4D494E20 
 12827      282D5F5F 
 12828              	.LASF602:
 12829 4efa 5F5F756E 		.ascii	"__unused __attribute__((__unused__))\000"
 12829      75736564 
 12829      205F5F61 
 12829      74747269 
 12829      62757465 
 12830              	.LASF885:
 12831 4f1f 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) \000"
 12831      65515545 
 12831      55455F52 
 12831      45434549 
 12831      56455F46 
 12832              	.LASF540:
 12833 4f4c 5F524545 		.ascii	"_REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mb"
 12833      4E545F4D 
 12833      42535254 
 12833      4F574353 
 12833      5F535441 
 12834 4f7f 7372746F 		.ascii	"srtowcs_state)\000"
 12834      7763735F 
 12834      73746174 
 12834      652900
 12835              	.LASF204:
 12836 4f8e 5F5F5546 		.ascii	"__UFRACT_MAX__ 0XFFFFP-16UR\000"
 12836      52414354 
 12836      5F4D4158 
 12836      5F5F2030 
 12836      58464646 
 12837              	.LASF476:
 12838 4faa 5F5F5F69 		.ascii	"___int_least64_t_defined 1\000"
 12838      6E745F6C 
 12838      65617374 
 12838      36345F74 
 12838      5F646566 
 12839              	.LASF608:
 12840 4fc5 5F416C69 		.ascii	"_Alignof(x) __alignof(x)\000"
 12840      676E6F66 
 12840      28782920 
 12840      5F5F616C 
 12840      69676E6F 
 12841              	.LASF554:
 12842 4fde 5F5F5448 		.ascii	"__THROW \000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 340


 12842      524F5720 
 12842      00
 12843              	.LASF1143:
 12844 4fe7 76546173 		.ascii	"vTaskEndScheduler\000"
 12844      6B456E64 
 12844      53636865 
 12844      64756C65 
 12844      7200
 12845              	.LASF1082:
 12846 4ff9 756C4C65 		.ascii	"ulLengthInBytes\000"
 12846      6E677468 
 12846      496E4279 
 12846      74657300 
 12847              	.LASF543:
 12848 5009 5F524545 		.ascii	"_REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)"
 12848      4E545F4C 
 12848      3634415F 
 12848      42554628 
 12848      70747229 
 12849 503c 00       		.ascii	"\000"
 12850              	.LASF666:
 12851 503d 5F5F5354 		.ascii	"__STDINT_EXP(x) __ ##x ##__\000"
 12851      44494E54 
 12851      5F455850 
 12851      28782920 
 12851      5F5F2023 
 12852              	.LASF513:
 12853 5059 5F524545 		.ascii	"_REENT_INIT(var) { 0, &(var).__sf[0], &(var).__sf[1"
 12853      4E545F49 
 12853      4E495428 
 12853      76617229 
 12853      207B2030 
 12854 508c 5D2C2026 		.ascii	"], &(var).__sf[2], 0, \"\", 0, \"C\", 0, _NULL, _NU"
 12854      28766172 
 12854      292E5F5F 
 12854      73665B32 
 12854      5D2C2030 
 12855 50bb 4C4C2C20 		.ascii	"LL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, \"\", "
 12855      302C205F 
 12855      4E554C4C 
 12855      2C205F4E 
 12855      554C4C2C 
 12856 50ec 7B302C20 		.ascii	"{0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_"
 12856      302C2030 
 12856      2C20302C 
 12856      20302C20 
 12856      302C2030 
 12857 511f 302C205F 		.ascii	"0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0"
 12857      52414E44 
 12857      34385F53 
 12857      4545445F 
 12857      312C205F 
 12858 5152 2C205F52 		.ascii	", _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {"
 12858      414E4434 
 12858      385F4D55 
 12858      4C545F31 
 12858      2C205F52 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 341


 12859 5185 302C207B 		.ascii	"0, {0}}, {0, {0}}, {0, {0}}, \"\", \"\", 0, {0, {0}"
 12859      307D7D2C 
 12859      207B302C 
 12859      207B307D 
 12859      7D2C207B 
 12860 51b4 7D2C207B 		.ascii	"}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REE"
 12860      302C207B 
 12860      307D7D2C 
 12860      207B302C 
 12860      207B307D 
 12861 51e7 4E545F49 		.ascii	"NT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }\000"
 12861      4E49545F 
 12861      41544558 
 12861      4954205F 
 12861      4E554C4C 
 12862              	.LASF26:
 12863 5211 5F5F4259 		.ascii	"__BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 12863      54455F4F 
 12863      52444552 
 12863      5F5F205F 
 12863      5F4F5244 
 12864              	.LASF1151:
 12865 5238 75784172 		.ascii	"uxArraySize\000"
 12865      72617953 
 12865      697A6500 
 12866              	.LASF1204:
 12867 5244 70785265 		.ascii	"pxReadyTasksLists\000"
 12867      61647954 
 12867      61736B73 
 12867      4C697374 
 12867      7300
 12868              	.LASF719:
 12869 5256 55494E54 		.ascii	"UINT_FAST64_MAX __UINT_FAST64_MAX__\000"
 12869      5F464153 
 12869      5436345F 
 12869      4D415820 
 12869      5F5F5549 
 12870              	.LASF388:
 12871 527a 5F4E4F54 		.ascii	"_NOTHROW \000"
 12871      48524F57 
 12871      2000
 12872              	.LASF802:
 12873 5284 706F7274 		.ascii	"portSHORT short\000"
 12873      53484F52 
 12873      54207368 
 12873      6F727400 
 12874              	.LASF357:
 12875 5294 5F414E53 		.ascii	"_ANSIDECL_H_ \000"
 12875      49444543 
 12875      4C5F485F 
 12875      2000
 12876              	.LASF806:
 12877 52a2 706F7274 		.ascii	"portSTACK_GROWTH ( -1 )\000"
 12877      53544143 
 12877      4B5F4752 
 12877      4F575448 
 12877      2028202D 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 342


 12878              	.LASF819:
 12879 52ba 706F7274 		.ascii	"portEXIT_CRITICAL() vPortExitCritical()\000"
 12879      45584954 
 12879      5F435249 
 12879      54494341 
 12879      4C282920 
 12880              	.LASF1070:
 12881 52e2 6552756E 		.ascii	"eRunning\000"
 12881      6E696E67 
 12881      00
 12882              	.LASF647:
 12883 52eb 5F5F504F 		.ascii	"__POSIX_VISIBLE 200809\000"
 12883      5349585F 
 12883      56495349 
 12883      424C4520 
 12883      32303038 
 12884              	.LASF942:
 12885 5302 7853656D 		.ascii	"xSemaphoreHandle SemaphoreHandle_t\000"
 12885      6170686F 
 12885      72654861 
 12885      6E646C65 
 12885      2053656D 
 12886              	.LASF201:
 12887 5325 5F5F5546 		.ascii	"__UFRACT_FBIT__ 16\000"
 12887      52414354 
 12887      5F464249 
 12887      545F5F20 
 12887      313600
 12888              	.LASF957:
 12889 5338 494E435F 		.ascii	"INC_TASK_H \000"
 12889      5441534B 
 12889      5F482000 
 12890              	.LASF282:
 12891 5344 5F5F5544 		.ascii	"__UDQ_FBIT__ 64\000"
 12891      515F4642 
 12891      49545F5F 
 12891      20363400 
 12892              	.LASF584:
 12893 5354 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_MEMCPY 1\000"
 12893      55434C49 
 12893      4B455F42 
 12893      55494C54 
 12893      494E5F4D 
 12894              	.LASF156:
 12895 5370 5F5F4C44 		.ascii	"__LDBL_MAX_10_EXP__ 308\000"
 12895      424C5F4D 
 12895      41585F31 
 12895      305F4558 
 12895      505F5F20 
 12896              	.LASF759:
 12897 5388 636F6E66 		.ascii	"configUSE_COUNTING_SEMAPHORES 1\000"
 12897      69675553 
 12897      455F434F 
 12897      554E5449 
 12897      4E475F53 
 12898              	.LASF976:
 12899 53a8 74736B4B 		.ascii	"tskKERNEL_VERSION_MAJOR 8\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 343


 12899      45524E45 
 12899      4C5F5645 
 12899      5253494F 
 12899      4E5F4D41 
 12900              	.LASF825:
 12901 53c2 706F7274 		.ascii	"portRESET_READY_PRIORITY(uxPriority,uxReadyPrioriti"
 12901      52455345 
 12901      545F5245 
 12901      4144595F 
 12901      5052494F 
 12902 53f5 65732920 		.ascii	"es) ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority"
 12902      28207578 
 12902      52656164 
 12902      79507269 
 12902      6F726974 
 12903 5428 20292029 		.ascii	" ) )\000"
 12903      00
 12904              	.LASF147:
 12905 542d 5F5F4442 		.ascii	"__DBL_DENORM_MIN__ ((double)4.9406564584124654e-324"
 12905      4C5F4445 
 12905      4E4F524D 
 12905      5F4D494E 
 12905      5F5F2028 
 12906 5460 4C2900   		.ascii	"L)\000"
 12907              	.LASF1121:
 12908 5463 7854696D 		.ascii	"xTimeToWake\000"
 12908      65546F57 
 12908      616B6500 
 12909              	.LASF939:
 12910 546f 706F7274 		.ascii	"portTickType TickT_t\000"
 12910      5469636B 
 12910      54797065 
 12910      20546963 
 12910      6B545F74 
 12911              	.LASF506:
 12912 5484 5F52414E 		.ascii	"_RAND48_MULT_1 (0xdeec)\000"
 12912      4434385F 
 12912      4D554C54 
 12912      5F312028 
 12912      30786465 
 12913              	.LASF943:
 12914 549c 78517565 		.ascii	"xQueueSetHandle QueueSetHandle_t\000"
 12914      75655365 
 12914      7448616E 
 12914      646C6520 
 12914      51756575 
 12915              	.LASF1031:
 12916 54bd 756E7369 		.ascii	"unsigned int\000"
 12916      676E6564 
 12916      20696E74 
 12916      00
 12917              	.LASF422:
 12918 54ca 5F53495A 		.ascii	"_SIZE_T_DEFINED_ \000"
 12918      455F545F 
 12918      44454649 
 12918      4E45445F 
 12918      2000
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 344


 12919              	.LASF375:
 12920 54dc 5F5F4E45 		.ascii	"__NEWLIB_MINOR__ 2\000"
 12920      574C4942 
 12920      5F4D494E 
 12920      4F525F5F 
 12920      203200
 12921              	.LASF125:
 12922 54ef 5F5F464C 		.ascii	"__FLT_MIN_EXP__ (-125)\000"
 12922      545F4D49 
 12922      4E5F4558 
 12922      505F5F20 
 12922      282D3132 
 12923              	.LASF121:
 12924 5506 5F5F4445 		.ascii	"__DEC_EVAL_METHOD__ 2\000"
 12924      435F4556 
 12924      414C5F4D 
 12924      4554484F 
 12924      445F5F20 
 12925              	.LASF737:
 12926 551c 55494E54 		.ascii	"UINT32_C(x) __UINT32_C(x)\000"
 12926      33325F43 
 12926      28782920 
 12926      5F5F5549 
 12926      4E543332 
 12927              	.LASF1142:
 12928 5536 76546173 		.ascii	"vTaskStartScheduler\000"
 12928      6B537461 
 12928      72745363 
 12928      68656475 
 12928      6C657200 
 12929              	.LASF232:
 12930 554a 5F5F5553 		.ascii	"__USACCUM_IBIT__ 8\000"
 12930      41434355 
 12930      4D5F4942 
 12930      49545F5F 
 12930      203800
 12931              	.LASF983:
 12932 555d 7461736B 		.ascii	"taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()\000"
 12932      44495341 
 12932      424C455F 
 12932      494E5445 
 12932      52525550 
 12933              	.LASF708:
 12934 558f 494E545F 		.ascii	"INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)\000"
 12934      46415354 
 12934      385F4D49 
 12934      4E20282D 
 12934      5F5F494E 
 12935              	.LASF620:
 12936 55b6 5F5F7265 		.ascii	"__restrict \000"
 12936      73747269 
 12936      63742000 
 12937              	.LASF117:
 12938 55c2 5F5F5549 		.ascii	"__UINTPTR_MAX__ 4294967295U\000"
 12938      4E545054 
 12938      525F4D41 
 12938      585F5F20 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 345


 12938      34323934 
 12939              	.LASF124:
 12940 55de 5F5F464C 		.ascii	"__FLT_DIG__ 6\000"
 12940      545F4449 
 12940      475F5F20 
 12940      3600
 12941              	.LASF245:
 12942 55ec 5F5F5541 		.ascii	"__UACCUM_EPSILON__ 0x1P-16UK\000"
 12942      4343554D 
 12942      5F455053 
 12942      494C4F4E 
 12942      5F5F2030 
 12943              	.LASF368:
 12944 5609 5F465657 		.ascii	"_FVWRITE_IN_STREAMIO 1\000"
 12944      52495445 
 12944      5F494E5F 
 12944      53545245 
 12944      414D494F 
 12945              	.LASF445:
 12946 5620 5F574348 		.ascii	"_WCHAR_T_DECLARED \000"
 12946      41525F54 
 12946      5F444543 
 12946      4C415245 
 12946      442000
 12947              	.LASF1195:
 12948 5633 70727644 		.ascii	"prvDeleteTCB\000"
 12948      656C6574 
 12948      65544342 
 12948      00
 12949              	.LASF868:
 12950 5640 74726163 		.ascii	"traceCREATE_MUTEX(pxNewQueue) \000"
 12950      65435245 
 12950      4154455F 
 12950      4D555445 
 12950      58287078 
 12951              	.LASF926:
 12952 565f 636F6E66 		.ascii	"configUSE_TICKLESS_IDLE 0\000"
 12952      69675553 
 12952      455F5449 
 12952      434B4C45 
 12952      53535F49 
 12953              	.LASF451:
 12954 5679 5F535953 		.ascii	"_SYS_REENT_H_ \000"
 12954      5F524545 
 12954      4E545F48 
 12954      5F2000
 12955              	.LASF120:
 12956 5688 5F5F464C 		.ascii	"__FLT_EVAL_METHOD__ 0\000"
 12956      545F4556 
 12956      414C5F4D 
 12956      4554484F 
 12956      445F5F20 
 12957              	.LASF1036:
 12958 569e 73686F72 		.ascii	"short int\000"
 12958      7420696E 
 12958      7400
 12959              	.LASF921:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 346


 12960 56a8 706F7274 		.ascii	"portPRIVILEGE_BIT ( ( UBaseT_t ) 0x00 )\000"
 12960      50524956 
 12960      494C4547 
 12960      455F4249 
 12960      54202820 
 12961              	.LASF1065:
 12962 56d0 75784E75 		.ascii	"uxNumberOfItems\000"
 12962      6D626572 
 12962      4F664974 
 12962      656D7300 
 12963              	.LASF348:
 12964 56e0 5F5F4152 		.ascii	"__ARM_ARCH_7M__ 1\000"
 12964      4D5F4152 
 12964      43485F37 
 12964      4D5F5F20 
 12964      3100
 12965              	.LASF860:
 12966 56f2 74726163 		.ascii	"traceTASK_SWITCHED_OUT() \000"
 12966      65544153 
 12966      4B5F5357 
 12966      49544348 
 12966      45445F4F 
 12967              	.LASF507:
 12968 570c 5F52414E 		.ascii	"_RAND48_MULT_2 (0x0005)\000"
 12968      4434385F 
 12968      4D554C54 
 12968      5F322028 
 12968      30783030 
 12969              	.LASF397:
 12970 5724 5F455846 		.ascii	"_EXFUN_NOTHROW(name,proto) name proto _NOTHROW\000"
 12970      554E5F4E 
 12970      4F544852 
 12970      4F57286E 
 12970      616D652C 
 12971              	.LASF1190:
 12972 5753 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 12972      61736B43 
 12972      6865636B 
 12972      46726565 
 12972      53746163 
 12973              	.LASF457:
 12974 576e 5F545F50 		.ascii	"_T_PTRDIFF \000"
 12974      54524449 
 12974      46462000 
 12975              	.LASF276:
 12976 577a 5F5F5551 		.ascii	"__UQQ_FBIT__ 8\000"
 12976      515F4642 
 12976      49545F5F 
 12976      203800
 12977              	.LASF1166:
 12978 5789 7078556E 		.ascii	"pxUnblockedTCB\000"
 12978      626C6F63 
 12978      6B656454 
 12978      434200
 12979              	.LASF998:
 12980 5798 746D7243 		.ascii	"tmrCOMMAND_DELETE ( ( BaseT_t ) 5 )\000"
 12980      4F4D4D41 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 347


 12980      4E445F44 
 12980      454C4554 
 12980      45202820 
 12981              	.LASF1183:
 12982 57bc 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 12982      61736B49 
 12982      73546173 
 12982      6B537573 
 12982      70656E64 
 12983              	.LASF173:
 12984 57d3 5F5F4445 		.ascii	"__DEC64_MIN_EXP__ (-382)\000"
 12984      4336345F 
 12984      4D494E5F 
 12984      4558505F 
 12984      5F20282D 
 12985              	.LASF244:
 12986 57ec 5F5F5541 		.ascii	"__UACCUM_MAX__ 0XFFFFFFFFP-16UK\000"
 12986      4343554D 
 12986      5F4D4158 
 12986      5F5F2030 
 12986      58464646 
 12987              	.LASF792:
 12988 580c 65727251 		.ascii	"errQUEUE_FULL ( ( BaseT_t ) 0 )\000"
 12988      55455545 
 12988      5F46554C 
 12988      4C202820 
 12988      28204261 
 12989              	.LASF985:
 12990 582c 7461736B 		.ascii	"taskSCHEDULER_SUSPENDED ( ( BaseT_t ) 0 )\000"
 12990      53434845 
 12990      44554C45 
 12990      525F5355 
 12990      5350454E 
 12991              	.LASF1103:
 12992 5856 75784D75 		.ascii	"uxMutexesHeld\000"
 12992      74657865 
 12992      7348656C 
 12992      6400
 12993              	.LASF1193:
 12994 5864 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 12994      736B4765 
 12994      74537461 
 12994      636B4869 
 12994      67685761 
 12995              	.LASF653:
 12996 5880 616C6C6F 		.ascii	"alloca\000"
 12996      636100
 12997              	.LASF209:
 12998 5887 5F5F4C46 		.ascii	"__LFRACT_MAX__ 0X7FFFFFFFP-31LR\000"
 12998      52414354 
 12998      5F4D4158 
 12998      5F5F2030 
 12998      58374646 
 12999              	.LASF325:
 13000 58a7 5F5F5349 		.ascii	"__SIZEOF_PTRDIFF_T__ 4\000"
 13000      5A454F46 
 13000      5F505452 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 348


 13000      44494646 
 13000      5F545F5F 
 13001              	.LASF812:
 13002 58be 706F7274 		.ascii	"portEND_SWITCHING_ISR(xSwitchRequired) if( xSwitchR"
 13002      454E445F 
 13002      53574954 
 13002      4348494E 
 13002      475F4953 
 13003 58f1 65717569 		.ascii	"equired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSE"
 13003      72656420 
 13003      2920706F 
 13003      72744E56 
 13003      49435F49 
 13004 5924 545F4249 		.ascii	"T_BIT\000"
 13004      5400
 13005              	.LASF432:
 13006 592a 5F5F5743 		.ascii	"__WCHAR_T__ \000"
 13006      4841525F 
 13006      545F5F20 
 13006      00
 13007              	.LASF473:
 13008 5937 5F5F5F69 		.ascii	"___int_least8_t_defined 1\000"
 13008      6E745F6C 
 13008      65617374 
 13008      385F745F 
 13008      64656669 
 13009              	.LASF1069:
 13010 5951 5461736B 		.ascii	"TaskHandle_t\000"
 13010      48616E64 
 13010      6C655F74 
 13010      00
 13011              	.LASF27:
 13012 595e 5F5F464C 		.ascii	"__FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 13012      4F41545F 
 13012      574F5244 
 13012      5F4F5244 
 13012      45525F5F 
 13013              	.LASF750:
 13014 598b 636F6E66 		.ascii	"configMINIMAL_STACK_SIZE ( ( unsigned short ) 256 )"
 13014      69674D49 
 13014      4E494D41 
 13014      4C5F5354 
 13014      41434B5F 
 13015 59be 00       		.ascii	"\000"
 13016              	.LASF444:
 13017 59bf 5F474343 		.ascii	"_GCC_WCHAR_T \000"
 13017      5F574348 
 13017      41525F54 
 13017      2000
 13018              	.LASF677:
 13019 59cd 5F5F696E 		.ascii	"__int_fast8_t_defined 1\000"
 13019      745F6661 
 13019      7374385F 
 13019      745F6465 
 13019      66696E65 
 13020              	.LASF996:
 13021 59e5 746D7243 		.ascii	"tmrCOMMAND_STOP ( ( BaseT_t ) 3 )\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 349


 13021      4F4D4D41 
 13021      4E445F53 
 13021      544F5020 
 13021      28202820 
 13022              	.LASF37:
 13023 5a07 5F5F5349 		.ascii	"__SIG_ATOMIC_TYPE__ int\000"
 13023      475F4154 
 13023      4F4D4943 
 13023      5F545950 
 13023      455F5F20 
 13024              	.LASF610:
 13025 5a1f 5F4E6F72 		.ascii	"_Noreturn __dead2\000"
 13025      65747572 
 13025      6E205F5F 
 13025      64656164 
 13025      3200
 13026              	.LASF704:
 13027 5a31 55494E54 		.ascii	"UINT64_MAX __UINT64_MAX__\000"
 13027      36345F4D 
 13027      4158205F 
 13027      5F55494E 
 13027      5436345F 
 13028              	.LASF678:
 13029 5a4b 5F5F696E 		.ascii	"__int_fast16_t_defined 1\000"
 13029      745F6661 
 13029      73743136 
 13029      5F745F64 
 13029      6566696E 
 13030              	.LASF1068:
 13031 5a64 4C697374 		.ascii	"List_t\000"
 13031      5F7400
 13032              	.LASF179:
 13033 5a6b 5F5F4445 		.ascii	"__DEC128_MANT_DIG__ 34\000"
 13033      43313238 
 13033      5F4D414E 
 13033      545F4449 
 13033      475F5F20 
 13034              	.LASF371:
 13035 5a82 5F554E42 		.ascii	"_UNBUF_STREAM_OPT 1\000"
 13035      55465F53 
 13035      54524541 
 13035      4D5F4F50 
 13035      54203100 
 13036              	.LASF382:
 13037 5a96 5F5F494D 		.ascii	"__IMPORT \000"
 13037      504F5254 
 13037      2000
 13038              	.LASF498:
 13039 5aa0 5F415445 		.ascii	"_ATEXIT_SIZE 32\000"
 13039      5849545F 
 13039      53495A45 
 13039      20333200 
 13040              	.LASF296:
 13041 5ab0 5F5F5553 		.ascii	"__USA_FBIT__ 16\000"
 13041      415F4642 
 13041      49545F5F 
 13041      20313600 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 350


 13042              	.LASF1163:
 13043 5ac0 78546963 		.ascii	"xTicksToWait\000"
 13043      6B73546F 
 13043      57616974 
 13043      00
 13044              	.LASF466:
 13045 5acd 5F4D4143 		.ascii	"_MACHINE__TYPES_H \000"
 13045      48494E45 
 13045      5F5F5459 
 13045      5045535F 
 13045      482000
 13046              	.LASF481:
 13047 5ae0 5F5F6C6F 		.ascii	"__lock_init(lock) (_CAST_VOID 0)\000"
 13047      636B5F69 
 13047      6E697428 
 13047      6C6F636B 
 13047      2920285F 
 13048              	.LASF356:
 13049 5b01 5F5F4945 		.ascii	"__IEEE_LITTLE_ENDIAN \000"
 13049      45455F4C 
 13049      4954544C 
 13049      455F454E 
 13049      4449414E 
 13050              	.LASF1039:
 13051 5b17 6C6F6E67 		.ascii	"long int\000"
 13051      20696E74 
 13051      00
 13052              	.LASF1145:
 13053 5b20 78546173 		.ascii	"xTaskResumeAll\000"
 13053      6B526573 
 13053      756D6541 
 13053      6C6C00
 13054              	.LASF814:
 13055 5b2f 706F7274 		.ascii	"portSET_INTERRUPT_MASK_FROM_ISR() ulPortSetInterrup"
 13055      5345545F 
 13055      494E5445 
 13055      52525550 
 13055      545F4D41 
 13056 5b62 744D6173 		.ascii	"tMask()\000"
 13056      6B282900 
 13057              	.LASF311:
 13058 5b6a 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR_LOCK_FREE 2\000"
 13058      435F4154 
 13058      4F4D4943 
 13058      5F434841 
 13058      525F4C4F 
 13059              	.LASF399:
 13060 5b88 5F455850 		.ascii	"_EXPARM(name,proto) (* name) proto\000"
 13060      41524D28 
 13060      6E616D65 
 13060      2C70726F 
 13060      746F2920 
 13061              	.LASF935:
 13062 5bab 6D74434F 		.ascii	"mtCOVERAGE_TEST_MARKER() \000"
 13062      56455241 
 13062      47455F54 
 13062      4553545F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 351


 13062      4D41524B 
 13063              	.LASF210:
 13064 5bc5 5F5F4C46 		.ascii	"__LFRACT_EPSILON__ 0x1P-31LR\000"
 13064      52414354 
 13064      5F455053 
 13064      494C4F4E 
 13064      5F5F2030 
 13065              	.LASF386:
 13066 5be2 5F424547 		.ascii	"_BEGIN_STD_C \000"
 13066      494E5F53 
 13066      54445F43 
 13066      2000
 13067              	.LASF888:
 13068 5bf0 74726163 		.ascii	"traceTASK_CREATE(pxNewTCB) \000"
 13068      65544153 
 13068      4B5F4352 
 13068      45415445 
 13068      2870784E 
 13069              	.LASF613:
 13070 5c0c 5F5F6D61 		.ascii	"__malloc_like __attribute__((__malloc__))\000"
 13070      6C6C6F63 
 13070      5F6C696B 
 13070      65205F5F 
 13070      61747472 
 13071              	.LASF758:
 13072 5c36 636F6E66 		.ascii	"configMAX_CO_ROUTINE_PRIORITIES ( 2 )\000"
 13072      69674D41 
 13072      585F434F 
 13072      5F524F55 
 13072      54494E45 
 13073              	.LASF725:
 13074 5c5c 5349475F 		.ascii	"SIG_ATOMIC_MAX __STDINT_EXP(INT_MAX)\000"
 13074      41544F4D 
 13074      49435F4D 
 13074      4158205F 
 13074      5F535444 
 13075              	.LASF332:
 13076 5c81 5F5F4152 		.ascii	"__ARM_SIZEOF_MINIMAL_ENUM 1\000"
 13076      4D5F5349 
 13076      5A454F46 
 13076      5F4D494E 
 13076      494D414C 
 13077              	.LASF92:
 13078 5c9d 5F5F494E 		.ascii	"__INT_LEAST8_MAX__ 127\000"
 13078      545F4C45 
 13078      41535438 
 13078      5F4D4158 
 13078      5F5F2031 
 13079              	.LASF884:
 13080 5cb4 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR(pxQueue) \000"
 13080      65515545 
 13080      55455F52 
 13080      45434549 
 13080      56455F46 
 13081              	.LASF335:
 13082 5cda 5F5F6172 		.ascii	"__arm__ 1\000"
 13082      6D5F5F20 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 352


 13082      3100
 13083              	.LASF978:
 13084 5ce4 74736B4B 		.ascii	"tskKERNEL_VERSION_BUILD 2\000"
 13084      45524E45 
 13084      4C5F5645 
 13084      5253494F 
 13084      4E5F4255 
 13085              	.LASF863:
 13086 5cfe 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) \000"
 13086      65424C4F 
 13086      434B494E 
 13086      475F4F4E 
 13086      5F515545 
 13087              	.LASF1067:
 13088 5d27 784C6973 		.ascii	"xListEnd\000"
 13088      74456E64 
 13088      00
 13089              	.LASF896:
 13090 5d30 74726163 		.ascii	"traceTASK_RESUME_FROM_ISR(pxTaskToResume) \000"
 13090      65544153 
 13090      4B5F5245 
 13090      53554D45 
 13090      5F46524F 
 13091              	.LASF578:
 13092 5d5b 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_STDARG 1\000"
 13092      55434C49 
 13092      4B455F42 
 13092      55494C54 
 13092      494E5F53 
 13093              	.LASF426:
 13094 5d77 5F5F5F69 		.ascii	"___int_size_t_h \000"
 13094      6E745F73 
 13094      697A655F 
 13094      745F6820 
 13094      00
 13095              	.LASF380:
 13096 5d88 5F5F5241 		.ascii	"__RAND_MAX 0x7fffffff\000"
 13096      4E445F4D 
 13096      41582030 
 13096      78376666 
 13096      66666666 
 13097              	.LASF1124:
 13098 5d9e 78436F6E 		.ascii	"xConstTickCount\000"
 13098      73745469 
 13098      636B436F 
 13098      756E7400 
 13099              	.LASF595:
 13100 5dae 5F5F5354 		.ascii	"__STRING(x) #x\000"
 13100      52494E47 
 13100      28782920 
 13100      237800
 13101              	.LASF433:
 13102 5dbd 5F574348 		.ascii	"_WCHAR_T \000"
 13102      41525F54 
 13102      2000
 13103              	.LASF685:
 13104 5dc7 494E5438 		.ascii	"INT8_MAX __INT8_MAX__\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 353


 13104      5F4D4158 
 13104      205F5F49 
 13104      4E54385F 
 13104      4D41585F 
 13105              	.LASF639:
 13106 5ddd 5F5F4642 		.ascii	"__FBSDID(s) struct __hack\000"
 13106      53444944 
 13106      28732920 
 13106      73747275 
 13106      6374205F 
 13107              	.LASF1072:
 13108 5df7 65426C6F 		.ascii	"eBlocked\000"
 13108      636B6564 
 13108      00
 13109              	.LASF847:
 13110 5e00 636F6E66 		.ascii	"configASSERT_DEFINED 1\000"
 13110      69674153 
 13110      53455254 
 13110      5F444546 
 13110      494E4544 
 13111              	.LASF717:
 13112 5e17 494E545F 		.ascii	"INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)\000"
 13112      46415354 
 13112      36345F4D 
 13112      494E2028 
 13112      2D5F5F49 
 13113              	.LASF788:
 13114 5e40 70645452 		.ascii	"pdTRUE ( ( BaseT_t ) 1 )\000"
 13114      55452028 
 13114      20282042 
 13114      61736554 
 13114      5F742029 
 13115              	.LASF467:
 13116 5e59 5F4D4143 		.ascii	"_MACHINE__DEFAULT_TYPES_H \000"
 13116      48494E45 
 13116      5F5F4445 
 13116      4641554C 
 13116      545F5459 
 13117              	.LASF22:
 13118 5e74 5F5F4249 		.ascii	"__BIGGEST_ALIGNMENT__ 8\000"
 13118      47474553 
 13118      545F414C 
 13118      49474E4D 
 13118      454E545F 
 13119              	.LASF233:
 13120 5e8c 5F5F5553 		.ascii	"__USACCUM_MIN__ 0.0UHK\000"
 13120      41434355 
 13120      4D5F4D49 
 13120      4E5F5F20 
 13120      302E3055 
 13121              	.LASF462:
 13122 5ea3 5F474343 		.ascii	"_GCC_PTRDIFF_T \000"
 13122      5F505452 
 13122      44494646 
 13122      5F542000 
 13123              	.LASF582:
 13124 5eb3 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_NEXT_ARG 1\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 354


 13124      55434C49 
 13124      4B455F42 
 13124      55494C54 
 13124      494E5F4E 
 13125              	.LASF765:
 13126 5ed1 494E434C 		.ascii	"INCLUDE_vTaskPrioritySet 1\000"
 13126      5544455F 
 13126      76546173 
 13126      6B507269 
 13126      6F726974 
 13127              	.LASF293:
 13128 5eec 5F5F5441 		.ascii	"__TA_IBIT__ 64\000"
 13128      5F494249 
 13128      545F5F20 
 13128      363400
 13129              	.LASF771:
 13130 5efb 494E434C 		.ascii	"INCLUDE_vTaskDelay 1\000"
 13130      5544455F 
 13130      76546173 
 13130      6B44656C 
 13130      61792031 
 13131              	.LASF1128:
 13132 5f10 75785461 		.ascii	"uxTaskPriorityGet\000"
 13132      736B5072 
 13132      696F7269 
 13132      74794765 
 13132      7400
 13133              	.LASF1093:
 13134 5f22 75735374 		.ascii	"usStackHighWaterMark\000"
 13134      61636B48 
 13134      69676857 
 13134      61746572 
 13134      4D61726B 
 13135              	.LASF1045:
 13136 5f37 63686172 		.ascii	"char\000"
 13136      00
 13137              	.LASF479:
 13138 5f3c 5F5F4C4F 		.ascii	"__LOCK_INIT(class,lock) static int lock = 0;\000"
 13138      434B5F49 
 13138      4E495428 
 13138      636C6173 
 13138      732C6C6F 
 13139              	.LASF1123:
 13140 5f69 7853686F 		.ascii	"xShouldDelay\000"
 13140      756C6444 
 13140      656C6179 
 13140      00
 13141              	.LASF441:
 13142 5f76 5F574348 		.ascii	"_WCHAR_T_H \000"
 13142      41525F54 
 13142      5F482000 
 13143              	.LASF791:
 13144 5f82 65727251 		.ascii	"errQUEUE_EMPTY ( ( BaseT_t ) 0 )\000"
 13144      55455545 
 13144      5F454D50 
 13144      54592028 
 13144      20282042 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 355


 13145              	.LASF837:
 13146 5fa3 494E434C 		.ascii	"INCLUDE_xQueueGetMutexHolder 0\000"
 13146      5544455F 
 13146      78517565 
 13146      75654765 
 13146      744D7574 
 13147              	.LASF340:
 13148 5fc2 5F5F4152 		.ascii	"__ARM_ARCH_ISA_THUMB 2\000"
 13148      4D5F4152 
 13148      43485F49 
 13148      53415F54 
 13148      48554D42 
 13149              	.LASF106:
 13150 5fd9 5F5F5549 		.ascii	"__UINT_LEAST64_MAX__ 18446744073709551615ULL\000"
 13150      4E545F4C 
 13150      45415354 
 13150      36345F4D 
 13150      41585F5F 
 13151              	.LASF728:
 13152 6006 57434841 		.ascii	"WCHAR_MIN __WCHAR_MIN__\000"
 13152      525F4D49 
 13152      4E205F5F 
 13152      57434841 
 13152      525F4D49 
 13153              	.LASF369:
 13154 601e 5F465345 		.ascii	"_FSEEK_OPTIMIZATION 1\000"
 13154      454B5F4F 
 13154      5054494D 
 13154      495A4154 
 13154      494F4E20 
 13155              	.LASF108:
 13156 6034 5F5F494E 		.ascii	"__INT_FAST8_MAX__ 2147483647\000"
 13156      545F4641 
 13156      5354385F 
 13156      4D41585F 
 13156      5F203231 
 13157              	.LASF1088:
 13158 6051 78546173 		.ascii	"xTaskNumber\000"
 13158      6B4E756D 
 13158      62657200 
 13159              	.LASF865:
 13160 605d 74726163 		.ascii	"traceMOVED_TASK_TO_READY_STATE(pxTCB) \000"
 13160      654D4F56 
 13160      45445F54 
 13160      41534B5F 
 13160      544F5F52 
 13161              	.LASF643:
 13162 6084 5F5F434F 		.ascii	"__COPYRIGHT(s) struct __hack\000"
 13162      50595249 
 13162      47485428 
 13162      73292073 
 13162      74727563 
 13163              	.LASF202:
 13164 60a1 5F5F5546 		.ascii	"__UFRACT_IBIT__ 0\000"
 13164      52414354 
 13164      5F494249 
 13164      545F5F20 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 356


 13164      3000
 13165              	.LASF329:
 13166 60b3 5F5F4152 		.ascii	"__ARM_32BIT_STATE 1\000"
 13166      4D5F3332 
 13166      4249545F 
 13166      53544154 
 13166      45203100 
 13167              	.LASF1136:
 13168 60c7 76546173 		.ascii	"vTaskSuspend\000"
 13168      6B537573 
 13168      70656E64 
 13168      00
 13169              	.LASF93:
 13170 60d4 5F5F494E 		.ascii	"__INT8_C(c) c\000"
 13170      54385F43 
 13170      28632920 
 13170      6300
 13171              	.LASF207:
 13172 60e2 5F5F4C46 		.ascii	"__LFRACT_IBIT__ 0\000"
 13172      52414354 
 13172      5F494249 
 13172      545F5F20 
 13172      3000
 13173              	.LASF756:
 13174 60f4 636F6E66 		.ascii	"configUSE_CO_ROUTINES 0\000"
 13174      69675553 
 13174      455F434F 
 13174      5F524F55 
 13174      54494E45 
 13175              	.LASF453:
 13176 610c 5F535444 		.ascii	"_STDDEF_H_ \000"
 13176      4445465F 
 13176      485F2000 
 13177              	.LASF1134:
 13178 6118 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 13178      696F7269 
 13178      74795573 
 13178      65644F6E 
 13178      456E7472 
 13179              	.LASF139:
 13180 612e 5F5F4442 		.ascii	"__DBL_MIN_EXP__ (-1021)\000"
 13180      4C5F4D49 
 13180      4E5F4558 
 13180      505F5F20 
 13180      282D3130 
 13181              	.LASF1198:
 13182 6146 76546173 		.ascii	"vTaskPriorityInherit\000"
 13182      6B507269 
 13182      6F726974 
 13182      79496E68 
 13182      65726974 
 13183              	.LASF1087:
 13184 615b 70635461 		.ascii	"pcTaskName\000"
 13184      736B4E61 
 13184      6D6500
 13185              	.LASF663:
 13186 6166 494E435F 		.ascii	"INC_FREERTOS_H \000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 357


 13186      46524545 
 13186      52544F53 
 13186      5F482000 
 13187              	.LASF654:
 13188 6176 616C6C6F 		.ascii	"alloca(size) __builtin_alloca(size)\000"
 13188      63612873 
 13188      697A6529 
 13188      205F5F62 
 13188      75696C74 
 13189              	.LASF633:
 13190 619a 5F5F7072 		.ascii	"__printf0like(fmtarg,firstvararg) \000"
 13190      696E7466 
 13190      306C696B 
 13190      6528666D 
 13190      74617267 
 13191              	.LASF86:
 13192 61bd 5F5F494E 		.ascii	"__INT32_MAX__ 2147483647L\000"
 13192      5433325F 
 13192      4D41585F 
 13192      5F203231 
 13192      34373438 
 13193              	.LASF919:
 13194 61d7 706F7274 		.ascii	"portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() \000"
 13194      434F4E46 
 13194      49475552 
 13194      455F5449 
 13194      4D45525F 
 13195              	.LASF488:
 13196 6201 5F5F6C6F 		.ascii	"__lock_try_acquire_recursive(lock) (_CAST_VOID 0)\000"
 13196      636B5F74 
 13196      72795F61 
 13196      63717569 
 13196      72655F72 
 13197              	.LASF175:
 13198 6233 5F5F4445 		.ascii	"__DEC64_MIN__ 1E-383DD\000"
 13198      4336345F 
 13198      4D494E5F 
 13198      5F203145 
 13198      2D333833 
 13199              	.LASF832:
 13200 624a 50524956 		.ascii	"PRIVILEGED_FUNCTION \000"
 13200      494C4547 
 13200      45445F46 
 13200      554E4354 
 13200      494F4E20 
 13201              	.LASF741:
 13202 625f 55494E54 		.ascii	"UINTMAX_C(x) __UINTMAX_C(x)\000"
 13202      4D41585F 
 13202      43287829 
 13202      205F5F55 
 13202      494E544D 
 13203              	.LASF477:
 13204 627b 5F5F4558 		.ascii	"__EXP\000"
 13204      5000
 13205              	.LASF472:
 13206 6281 5F5F5F69 		.ascii	"___int64_t_defined 1\000"
 13206      6E743634 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 358


 13206      5F745F64 
 13206      6566696E 
 13206      65642031 
 13207              	.LASF162:
 13208 6296 5F5F4C44 		.ascii	"__LDBL_HAS_DENORM__ 1\000"
 13208      424C5F48 
 13208      41535F44 
 13208      454E4F52 
 13208      4D5F5F20 
 13209              	.LASF849:
 13210 62ac 494E434C 		.ascii	"INCLUDE_xTaskGetCurrentTaskHandle 0\000"
 13210      5544455F 
 13210      78546173 
 13210      6B476574 
 13210      43757272 
 13211              	.LASF1095:
 13212 62d0 74736B54 		.ascii	"tskTaskControlBlock\000"
 13212      61736B43 
 13212      6F6E7472 
 13212      6F6C426C 
 13212      6F636B00 
 13213              	.LASF1120:
 13214 62e4 7854696D 		.ascii	"xTimeIncrement\000"
 13214      65496E63 
 13214      72656D65 
 13214      6E7400
 13215              	.LASF568:
 13216 62f3 5F5F4245 		.ascii	"__BEGIN_DECLS \000"
 13216      47494E5F 
 13216      4445434C 
 13216      532000
 13217              	.LASF107:
 13218 6302 5F5F5549 		.ascii	"__UINT64_C(c) c ## ULL\000"
 13218      4E543634 
 13218      5F432863 
 13218      29206320 
 13218      23232055 
 13219              	.LASF520:
 13220 6319 5F524545 		.ascii	"_REENT_CHECK_MISC(ptr) \000"
 13220      4E545F43 
 13220      4845434B 
 13220      5F4D4953 
 13220      43287074 
 13221              	.LASF1125:
 13222 6331 76546173 		.ascii	"vTaskDelay\000"
 13222      6B44656C 
 13222      617900
 13223              	.LASF580:
 13224 633c 5F5F474E 		.ascii	"__GNUC_VA_LIST_COMPATIBILITY 1\000"
 13224      55435F56 
 13224      415F4C49 
 13224      53545F43 
 13224      4F4D5041 
 13225              	.LASF716:
 13226 635b 55494E54 		.ascii	"UINT_FAST32_MAX __UINT_FAST32_MAX__\000"
 13226      5F464153 
 13226      5433325F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 359


 13226      4D415820 
 13226      5F5F5549 
 13227              	.LASF48:
 13228 637f 5F5F494E 		.ascii	"__INT_LEAST32_TYPE__ long int\000"
 13228      545F4C45 
 13228      41535433 
 13228      325F5459 
 13228      50455F5F 
 13229              	.LASF944:
 13230 639d 78517565 		.ascii	"xQueueSetMemberHandle QueueSetMemberHandle_t\000"
 13230      75655365 
 13230      744D656D 
 13230      62657248 
 13230      616E646C 
 13231              	.LASF892:
 13232 63ca 74726163 		.ascii	"traceTASK_DELAY() \000"
 13232      65544153 
 13232      4B5F4445 
 13232      4C415928 
 13232      292000
 13233              	.LASF899:
 13234 63dd 74726163 		.ascii	"traceTIMER_CREATE_FAILED() \000"
 13234      6554494D 
 13234      45525F43 
 13234      52454154 
 13234      455F4641 
 13235              	.LASF1006:
 13236 63f9 7854696D 		.ascii	"xTimerChangePeriod(xTimer,xNewPeriod,xTicksToWait) "
 13236      65724368 
 13236      616E6765 
 13236      50657269 
 13236      6F642878 
 13237 642c 7854696D 		.ascii	"xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE"
 13237      65724765 
 13237      6E657269 
 13237      63436F6D 
 13237      6D616E64 
 13238 645f 5F504552 		.ascii	"_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )\000"
 13238      494F442C 
 13238      20282078 
 13238      4E657750 
 13238      6572696F 
 13239              	.LASF1159:
 13240 6491 7578546F 		.ascii	"uxTopPriority\000"
 13240      70507269 
 13240      6F726974 
 13240      7900
 13241              	.LASF1150:
 13242 649f 70785461 		.ascii	"pxTaskStatusArray\000"
 13242      736B5374 
 13242      61747573 
 13242      41727261 
 13242      7900
 13243              	.LASF197:
 13244 64b1 5F5F4652 		.ascii	"__FRACT_IBIT__ 0\000"
 13244      4143545F 
 13244      49424954 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 360


 13244      5F5F2030 
 13244      00
 13245              	.LASF914:
 13246 64c2 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup,uxBi"
 13246      65455645 
 13246      4E545F47 
 13246      524F5550 
 13246      5F534554 
 13247 64f5 7473546F 		.ascii	"tsToSet) \000"
 13247      53657429 
 13247      2000
 13248              	.LASF648:
 13249 64ff 5F5F5853 		.ascii	"__XSI_VISIBLE 700\000"
 13249      495F5649 
 13249      5349424C 
 13249      45203730 
 13249      3000
 13250              	.LASF831:
 13251 6511 4D50555F 		.ascii	"MPU_WRAPPERS_H \000"
 13251      57524150 
 13251      50455253 
 13251      5F482000 
 13252              	.LASF649:
 13253 6521 5F5F4253 		.ascii	"__BSD_VISIBLE 1\000"
 13253      445F5649 
 13253      5349424C 
 13253      45203100 
 13254              	.LASF23:
 13255 6531 5F5F4F52 		.ascii	"__ORDER_LITTLE_ENDIAN__ 1234\000"
 13255      4445525F 
 13255      4C495454 
 13255      4C455F45 
 13255      4E444941 
 13256              	.LASF1129:
 13257 654e 78546173 		.ascii	"xTask\000"
 13257      6B00
 13258              	.LASF723:
 13259 6554 53495A45 		.ascii	"SIZE_MAX __SIZE_MAX__\000"
 13259      5F4D4158 
 13259      205F5F53 
 13259      495A455F 
 13259      4D41585F 
 13260              	.LASF585:
 13261 656a 5F5F4343 		.ascii	"__CC_SUPPORTS_INLINE 1\000"
 13261      5F535550 
 13261      504F5254 
 13261      535F494E 
 13261      4C494E45 
 13262              	.LASF553:
 13263 6581 5F5F444F 		.ascii	"__DOTS , ...\000"
 13263      5453202C 
 13263      202E2E2E 
 13263      00
 13264              	.LASF172:
 13265 658e 5F5F4445 		.ascii	"__DEC64_MANT_DIG__ 16\000"
 13265      4336345F 
 13265      4D414E54 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 361


 13265      5F444947 
 13265      5F5F2031 
 13266              	.LASF1043:
 13267 65a4 6C6F6E67 		.ascii	"long long unsigned int\000"
 13267      206C6F6E 
 13267      6720756E 
 13267      7369676E 
 13267      65642069 
 13268              	.LASF126:
 13269 65bb 5F5F464C 		.ascii	"__FLT_MIN_10_EXP__ (-37)\000"
 13269      545F4D49 
 13269      4E5F3130 
 13269      5F455850 
 13269      5F5F2028 
 13270              	.LASF252:
 13271 65d4 5F5F554C 		.ascii	"__ULACCUM_IBIT__ 32\000"
 13271      41434355 
 13271      4D5F4942 
 13271      49545F5F 
 13271      20333200 
 13272              	.LASF1168:
 13273 65e8 70784576 		.ascii	"pxEventListItem\000"
 13273      656E744C 
 13273      69737449 
 13273      74656D00 
 13274              	.LASF767:
 13275 65f8 494E434C 		.ascii	"INCLUDE_vTaskDelete 1\000"
 13275      5544455F 
 13275      76546173 
 13275      6B44656C 
 13275      65746520 
 13276              	.LASF882:
 13277 660e 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR(pxQueue) \000"
 13277      65515545 
 13277      55455F53 
 13277      454E445F 
 13277      46524F4D 
 13278              	.LASF265:
 13279 6631 5F5F554C 		.ascii	"__ULLACCUM_EPSILON__ 0x1P-32ULLK\000"
 13279      4C414343 
 13279      554D5F45 
 13279      5053494C 
 13279      4F4E5F5F 
 13280              	.LASF423:
 13281 6652 5F53495A 		.ascii	"_SIZE_T_DEFINED \000"
 13281      455F545F 
 13281      44454649 
 13281      4E454420 
 13281      00
 13282              	.LASF272:
 13283 6663 5F5F4451 		.ascii	"__DQ_FBIT__ 63\000"
 13283      5F464249 
 13283      545F5F20 
 13283      363300
 13284              	.LASF1047:
 13285 6672 75696E74 		.ascii	"uint16_t\000"
 13285      31365F74 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 362


 13285      00
 13286              	.LASF458:
 13287 667b 5F5F5054 		.ascii	"__PTRDIFF_T \000"
 13287      52444946 
 13287      465F5420 
 13287      00
 13288              	.LASF279:
 13289 6688 5F5F5548 		.ascii	"__UHQ_IBIT__ 0\000"
 13289      515F4942 
 13289      49545F5F 
 13289      203000
 13290              	.LASF1007:
 13291 6697 7854696D 		.ascii	"xTimerDelete(xTimer,xTicksToWait) xTimerGenericComm"
 13291      65724465 
 13291      6C657465 
 13291      28785469 
 13291      6D65722C 
 13292 66ca 616E6428 		.ascii	"and( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTi"
 13292      20282078 
 13292      54696D65 
 13292      7220292C 
 13292      20746D72 
 13293 66fd 636B7354 		.ascii	"cksToWait ) )\000"
 13293      6F576169 
 13293      74202920 
 13293      2900
 13294              	.LASF537:
 13295 670b 5F524545 		.ascii	"_REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctom"
 13295      4E545F57 
 13295      43544F4D 
 13295      425F5354 
 13295      41544528 
 13296 673e 625F7374 		.ascii	"b_state)\000"
 13296      61746529 
 13296      00
 13297              	.LASF924:
 13298 6747 76506F72 		.ascii	"vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockT"
 13298      74467265 
 13298      65416C69 
 13298      676E6564 
 13298      28707642 
 13299 677a 6F467265 		.ascii	"oFree )\000"
 13299      65202900 
 13300              	.LASF1041:
 13301 6782 6C6F6E67 		.ascii	"long unsigned int\000"
 13301      20756E73 
 13301      69676E65 
 13301      6420696E 
 13301      7400
 13302              	.LASF55:
 13303 6794 5F5F494E 		.ascii	"__INT_FAST16_TYPE__ int\000"
 13303      545F4641 
 13303      53543136 
 13303      5F545950 
 13303      455F5F20 
 13304              	.LASF902:
 13305 67ac 74726163 		.ascii	"traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMes"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 363


 13305      6554494D 
 13305      45525F43 
 13305      4F4D4D41 
 13305      4E445F52 
 13306 67df 73616765 		.ascii	"sageValue) \000"
 13306      56616C75 
 13306      65292000 
 13307              	.LASF228:
 13308 67eb 5F5F5341 		.ascii	"__SACCUM_MIN__ (-0X1P7HK-0X1P7HK)\000"
 13308      4343554D 
 13308      5F4D494E 
 13308      5F5F2028 
 13308      2D305831 
 13309              	.LASF214:
 13310 680d 5F5F554C 		.ascii	"__ULFRACT_MAX__ 0XFFFFFFFFP-32ULR\000"
 13310      46524143 
 13310      545F4D41 
 13310      585F5F20 
 13310      30584646 
 13311              	.LASF780:
 13312 682f 636F6E66 		.ascii	"configNET_MASK3 0\000"
 13312      69674E45 
 13312      545F4D41 
 13312      534B3320 
 13312      3000
 13313              	.LASF1155:
 13314 6841 78546173 		.ascii	"xTaskIncrementTick\000"
 13314      6B496E63 
 13314      72656D65 
 13314      6E745469 
 13314      636B00
 13315              	.LASF805:
 13316 6854 706F7274 		.ascii	"portMAX_DELAY ( TickType_t ) 0xffffffffUL\000"
 13316      4D41585F 
 13316      44454C41 
 13316      59202820 
 13316      5469636B 
 13317              	.LASF820:
 13318 687e 706F7274 		.ascii	"portTASK_FUNCTION_PROTO(vFunction,pvParameters) voi"
 13318      5441534B 
 13318      5F46554E 
 13318      4354494F 
 13318      4E5F5052 
 13319 68b1 64207646 		.ascii	"d vFunction( void *pvParameters )\000"
 13319      756E6374 
 13319      696F6E28 
 13319      20766F69 
 13319      64202A70 
 13320              	.LASF249:
 13321 68d3 5F5F4C41 		.ascii	"__LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK\000"
 13321      4343554D 
 13321      5F4D4158 
 13321      5F5F2030 
 13321      58374646 
 13322              	.LASF35:
 13323 68fb 5F5F4348 		.ascii	"__CHAR16_TYPE__ short unsigned int\000"
 13323      41523136 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 364


 13323      5F545950 
 13323      455F5F20 
 13323      73686F72 
 13324              	.LASF538:
 13325 691e 5F524545 		.ascii	"_REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrle"
 13325      4E545F4D 
 13325      42524C45 
 13325      4E5F5354 
 13325      41544528 
 13326 6951 6E5F7374 		.ascii	"n_state)\000"
 13326      61746529 
 13326      00
 13327              	.LASF598:
 13328 695a 5F5F7369 		.ascii	"__signed signed\000"
 13328      676E6564 
 13328      20736967 
 13328      6E656400 
 13329              	.LASF102:
 13330 696a 5F5F5549 		.ascii	"__UINT_LEAST16_MAX__ 65535\000"
 13330      4E545F4C 
 13330      45415354 
 13330      31365F4D 
 13330      41585F5F 
 13331              	.LASF284:
 13332 6985 5F5F5554 		.ascii	"__UTQ_FBIT__ 128\000"
 13332      515F4642 
 13332      49545F5F 
 13332      20313238 
 13332      00
 13333              	.LASF1182:
 13334 6996 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 13334      64644375 
 13334      7272656E 
 13334      74546173 
 13334      6B546F44 
 13335              	.LASF531:
 13336 69b5 5F524545 		.ascii	"_REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctim"
 13336      4E545F41 
 13336      53435449 
 13336      4D455F42 
 13336      55462870 
 13337 69e8 655F6275 		.ascii	"e_buf)\000"
 13337      662900
 13338              	.LASF1004:
 13339 69ef 7854696D 		.ascii	"xTimerStart(xTimer,xTicksToWait) xTimerGenericComma"
 13339      65725374 
 13339      61727428 
 13339      7854696D 
 13339      65722C78 
 13340 6a22 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCou"
 13340      28207854 
 13340      696D6572 
 13340      20292C20 
 13340      746D7243 
 13341 6a55 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 13341      20292C20 
 13341      4E554C4C 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 365


 13341      2C202820 
 13341      78546963 
 13342              	.LASF804:
 13343 6a76 706F7274 		.ascii	"portBASE_TYPE long\000"
 13343      42415345 
 13343      5F545950 
 13343      45206C6F 
 13343      6E6700
 13344              	.LASF12:
 13345 6a89 5F5F4649 		.ascii	"__FINITE_MATH_ONLY__ 0\000"
 13345      4E495445 
 13345      5F4D4154 
 13345      485F4F4E 
 13345      4C595F5F 
 13346              	.LASF1057:
 13347 6aa0 70785072 		.ascii	"pxPrevious\000"
 13347      6576696F 
 13347      757300
 13348              	.LASF667:
 13349 6aab 5F5F6861 		.ascii	"__have_longlong64 1\000"
 13349      76655F6C 
 13349      6F6E676C 
 13349      6F6E6736 
 13349      34203100 
 13350              	.LASF726:
 13351 6abf 50545244 		.ascii	"PTRDIFF_MAX __PTRDIFF_MAX__\000"
 13351      4946465F 
 13351      4D415820 
 13351      5F5F5054 
 13351      52444946 
 13352              	.LASF529:
 13353 6adb 5F524545 		.ascii	"_REENT_MP_P5S(ptr) ((ptr)->_p5s)\000"
 13353      4E545F4D 
 13353      505F5035 
 13353      53287074 
 13353      72292028 
 13354              	.LASF1118:
 13355 6afc 76546173 		.ascii	"vTaskDelayUntil\000"
 13355      6B44656C 
 13355      6179556E 
 13355      74696C00 
 13356              	.LASF1111:
 13357 6b0c 70757853 		.ascii	"puxStackBuffer\000"
 13357      7461636B 
 13357      42756666 
 13357      657200
 13358              	.LASF1138:
 13359 6b1b 76546173 		.ascii	"vTaskResume\000"
 13359      6B526573 
 13359      756D6500 
 13360              	.LASF440:
 13361 6b27 5F574348 		.ascii	"_WCHAR_T_DEFINED \000"
 13361      41525F54 
 13361      5F444546 
 13361      494E4544 
 13361      2000
 13362              	.LASF917:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 366


 13363 6b39 74726163 		.ascii	"tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend,pvPara"
 13363      6550454E 
 13363      445F4655 
 13363      4E435F43 
 13363      414C4C5F 
 13364 6b6c 6D657465 		.ascii	"meter1,ulParameter2,ret) \000"
 13364      72312C75 
 13364      6C506172 
 13364      616D6574 
 13364      6572322C 
 13365              	.LASF254:
 13366 6b86 5F5F554C 		.ascii	"__ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK\000"
 13366      41434355 
 13366      4D5F4D41 
 13366      585F5F20 
 13366      30584646 
 13367              	.LASF611:
 13368 6bb0 5F546872 		.ascii	"_Thread_local __thread\000"
 13368      6561645F 
 13368      6C6F6361 
 13368      6C205F5F 
 13368      74687265 
 13369              	.LASF1223:
 13370 6bc7 46726565 		.ascii	"FreeRTOS/tasks.c\000"
 13370      52544F53 
 13370      2F746173 
 13370      6B732E63 
 13370      00
 13371              	.LASF1053:
 13372 6bd8 5469636B 		.ascii	"TickType_t\000"
 13372      54797065 
 13372      5F7400
 13373              	.LASF213:
 13374 6be3 5F5F554C 		.ascii	"__ULFRACT_MIN__ 0.0ULR\000"
 13374      46524143 
 13374      545F4D49 
 13374      4E5F5F20 
 13374      302E3055 
 13375              	.LASF273:
 13376 6bfa 5F5F4451 		.ascii	"__DQ_IBIT__ 0\000"
 13376      5F494249 
 13376      545F5F20 
 13376      3000
 13377              	.LASF541:
 13378 6c08 5F524545 		.ascii	"_REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrt"
 13378      4E545F57 
 13378      4352544F 
 13378      4D425F53 
 13378      54415445 
 13379 6c3b 6F6D625F 		.ascii	"omb_state)\000"
 13379      73746174 
 13379      652900
 13380              	.LASF1180:
 13381 6c46 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 13381      6865636B 
 13381      5461736B 
 13381      73576169 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 367


 13381      74696E67 
 13382              	.LASF309:
 13383 6c66 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1\000"
 13383      435F4841 
 13383      56455F53 
 13383      594E435F 
 13383      434F4D50 
 13384              	.LASF669:
 13385 6c8b 5F5F696E 		.ascii	"__int8_t_defined 1\000"
 13385      74385F74 
 13385      5F646566 
 13385      696E6564 
 13385      203100
 13386              	.LASF962:
 13387 6c9e 6C697374 		.ascii	"listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( ( pxLi"
 13387      5345545F 
 13387      4C495354 
 13387      5F495445 
 13387      4D5F5641 
 13388 6cd1 73744974 		.ascii	"stItem )->xItemValue = ( xValue ) )\000"
 13388      656D2029 
 13388      2D3E7849 
 13388      74656D56 
 13388      616C7565 
 13389              	.LASF992:
 13390 6cf5 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK ( ( BaseT_t ) -1 )\000"
 13390      4F4D4D41 
 13390      4E445F45 
 13390      58454355 
 13390      54455F43 
 13391              	.LASF421:
 13392 6d24 5F425344 		.ascii	"_BSD_SIZE_T_ \000"
 13392      5F53495A 
 13392      455F545F 
 13392      2000
 13393              	.LASF74:
 13394 6d32 5F5F5749 		.ascii	"__WINT_MAX__ 4294967295U\000"
 13394      4E545F4D 
 13394      41585F5F 
 13394      20343239 
 13394      34393637 
 13395              	.LASF437:
 13396 6d4b 5F574348 		.ascii	"_WCHAR_T_ \000"
 13396      41525F54 
 13396      5F2000
 13397              	.LASF98:
 13398 6d56 5F5F494E 		.ascii	"__INT_LEAST64_MAX__ 9223372036854775807LL\000"
 13398      545F4C45 
 13398      41535436 
 13398      345F4D41 
 13398      585F5F20 
 13399              	.LASF1119:
 13400 6d80 70785072 		.ascii	"pxPreviousWakeTime\000"
 13400      6576696F 
 13400      75735761 
 13400      6B655469 
 13400      6D6500
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 368


 13401              	.LASF1156:
 13402 6d93 78537769 		.ascii	"xSwitchRequired\000"
 13402      74636852 
 13402      65717569 
 13402      72656400 
 13403              	.LASF435:
 13404 6da3 5F545F57 		.ascii	"_T_WCHAR \000"
 13404      43484152 
 13404      2000
 13405              	.LASF931:
 13406 6dad 636F6E66 		.ascii	"configUSE_TIME_SLICING 1\000"
 13406      69675553 
 13406      455F5449 
 13406      4D455F53 
 13406      4C494349 
 13407              	.LASF1016:
 13408 6dc6 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE\000"
 13408      57524150 
 13408      50455253 
 13408      5F494E43 
 13408      4C554445 
 13409              	.LASF461:
 13410 6dea 5F5F5F69 		.ascii	"___int_ptrdiff_t_h \000"
 13410      6E745F70 
 13410      74726469 
 13410      66665F74 
 13410      5F682000 
 13411              	.LASF345:
 13412 6dfe 5F5F4152 		.ascii	"__ARM_FP 12\000"
 13412      4D5F4650 
 13412      20313200 
 13413              	.LASF77:
 13414 6e0a 5F5F5349 		.ascii	"__SIZE_MAX__ 4294967295U\000"
 13414      5A455F4D 
 13414      41585F5F 
 13414      20343239 
 13414      34393637 
 13415              	.LASF517:
 13416 6e23 5F524545 		.ascii	"_REENT_CHECK_TM(ptr) \000"
 13416      4E545F43 
 13416      4845434B 
 13416      5F544D28 
 13416      70747229 
 13417              	.LASF285:
 13418 6e39 5F5F5554 		.ascii	"__UTQ_IBIT__ 0\000"
 13418      515F4942 
 13418      49545F5F 
 13418      203000
 13419              	.LASF715:
 13420 6e48 494E545F 		.ascii	"INT_FAST32_MAX __INT_FAST32_MAX__\000"
 13420      46415354 
 13420      33325F4D 
 13420      4158205F 
 13420      5F494E54 
 13421              	.LASF288:
 13422 6e6a 5F5F5341 		.ascii	"__SA_FBIT__ 15\000"
 13422      5F464249 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 369


 13422      545F5F20 
 13422      313500
 13423              	.LASF443:
 13424 6e79 5F5F494E 		.ascii	"__INT_WCHAR_T_H \000"
 13424      545F5743 
 13424      4841525F 
 13424      545F4820 
 13424      00
 13425              	.LASF403:
 13426 6e8a 5F434153 		.ascii	"_CAST_VOID (void)\000"
 13426      545F564F 
 13426      49442028 
 13426      766F6964 
 13426      2900
 13427              	.LASF995:
 13428 6e9c 746D7243 		.ascii	"tmrCOMMAND_RESET ( ( BaseT_t ) 2 )\000"
 13428      4F4D4D41 
 13428      4E445F52 
 13428      45534554 
 13428      20282028 
 13429              	.LASF844:
 13430 6ebf 494E434C 		.ascii	"INCLUDE_xTaskResumeFromISR 1\000"
 13430      5544455F 
 13430      78546173 
 13430      6B526573 
 13430      756D6546 
 13431              	.LASF353:
 13432 6edc 5F5F454C 		.ascii	"__ELF__ 1\000"
 13432      465F5F20 
 13432      3100
 13433              	.LASF696:
 13434 6ee6 494E5433 		.ascii	"INT32_MIN (-__INT32_MAX__ - 1)\000"
 13434      325F4D49 
 13434      4E20282D 
 13434      5F5F494E 
 13434      5433325F 
 13435              	.LASF342:
 13436 6f05 5F5F5448 		.ascii	"__THUMBEL__ 1\000"
 13436      554D4245 
 13436      4C5F5F20 
 13436      3100
 13437              	.LASF1215:
 13438 6f13 7578546F 		.ascii	"uxTopReadyPriority\000"
 13438      70526561 
 13438      64795072 
 13438      696F7269 
 13438      747900
 13439              	.LASF267:
 13440 6f26 5F5F5151 		.ascii	"__QQ_IBIT__ 0\000"
 13440      5F494249 
 13440      545F5F20 
 13440      3000
 13441              	.LASF116:
 13442 6f34 5F5F494E 		.ascii	"__INTPTR_MAX__ 2147483647\000"
 13442      54505452 
 13442      5F4D4158 
 13442      5F5F2032 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 370


 13442      31343734 
 13443              	.LASF878:
 13444 6f4e 74726163 		.ascii	"traceQUEUE_RECEIVE(pxQueue) \000"
 13444      65515545 
 13444      55455F52 
 13444      45434549 
 13444      56452870 
 13445              	.LASF954:
 13446 6f6b 70645441 		.ascii	"pdTASK_CODE TaskFunction_t\000"
 13446      534B5F43 
 13446      4F444520 
 13446      5461736B 
 13446      46756E63 
 13447              	.LASF739:
 13448 6f86 55494E54 		.ascii	"UINT64_C(x) __UINT64_C(x)\000"
 13448      36345F43 
 13448      28782920 
 13448      5F5F5549 
 13448      4E543634 
 13449              	.LASF1122:
 13450 6fa0 78416C72 		.ascii	"xAlreadyYielded\000"
 13450      65616479 
 13450      5969656C 
 13450      64656400 
 13451              	.LASF80:
 13452 6fb0 5F5F5549 		.ascii	"__UINTMAX_MAX__ 18446744073709551615ULL\000"
 13452      4E544D41 
 13452      585F4D41 
 13452      585F5F20 
 13452      31383434 
 13453              	.LASF34:
 13454 6fd8 5F5F5549 		.ascii	"__UINTMAX_TYPE__ long long unsigned int\000"
 13454      4E544D41 
 13454      585F5459 
 13454      50455F5F 
 13454      206C6F6E 
 13455              	.LASF391:
 13456 7000 5F4E4F41 		.ascii	"_NOARGS void\000"
 13456      52475320 
 13456      766F6964 
 13456      00
 13457              	.LASF874:
 13458 700d 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE() \000"
 13458      65435245 
 13458      4154455F 
 13458      434F554E 
 13458      54494E47 
 13459              	.LASF281:
 13460 702f 5F5F5553 		.ascii	"__USQ_IBIT__ 0\000"
 13460      515F4942 
 13460      49545F5F 
 13460      203000
 13461              	.LASF982:
 13462 703e 7461736B 		.ascii	"taskEXIT_CRITICAL() portEXIT_CRITICAL()\000"
 13462      45584954 
 13462      5F435249 
 13462      54494341 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 371


 13462      4C282920 
 13463              	.LASF925:
 13464 7066 636F6E66 		.ascii	"configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2\000"
 13464      69674558 
 13464      50454354 
 13464      45445F49 
 13464      444C455F 
 13465              	.LASF52:
 13466 708e 5F5F5549 		.ascii	"__UINT_LEAST32_TYPE__ long unsigned int\000"
 13466      4E545F4C 
 13466      45415354 
 13466      33325F54 
 13466      5950455F 
 13467              	.LASF1005:
 13468 70b6 7854696D 		.ascii	"xTimerStop(xTimer,xTicksToWait) xTimerGenericComman"
 13468      65725374 
 13468      6F702878 
 13468      54696D65 
 13468      722C7854 
 13469 70e9 64282028 		.ascii	"d( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksT"
 13469      20785469 
 13469      6D657220 
 13469      292C2074 
 13469      6D72434F 
 13470 711c 6F576169 		.ascii	"oWait ) )\000"
 13470      74202920 
 13470      2900
 13471              	.LASF3:
 13472 7126 5F5F474E 		.ascii	"__GNUC_MINOR__ 9\000"
 13472      55435F4D 
 13472      494E4F52 
 13472      5F5F2039 
 13472      00
 13473              	.LASF33:
 13474 7137 5F5F494E 		.ascii	"__INTMAX_TYPE__ long long int\000"
 13474      544D4158 
 13474      5F545950 
 13474      455F5F20 
 13474      6C6F6E67 
 13475              	.LASF930:
 13476 7155 706F7274 		.ascii	"portTASK_USES_FLOATING_POINT() \000"
 13476      5441534B 
 13476      5F555345 
 13476      535F464C 
 13476      4F415449 
 13477              	.LASF194:
 13478 7175 5F5F5553 		.ascii	"__USFRACT_MAX__ 0XFFP-8UHR\000"
 13478      46524143 
 13478      545F4D41 
 13478      585F5F20 
 13478      30584646 
 13479              	.LASF316:
 13480 7190 5F5F4743 		.ascii	"__GCC_ATOMIC_INT_LOCK_FREE 2\000"
 13480      435F4154 
 13480      4F4D4943 
 13480      5F494E54 
 13480      5F4C4F43 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 372


 13481              	.LASF502:
 13482 71ad 5F52414E 		.ascii	"_RAND48_SEED_0 (0x330e)\000"
 13482      4434385F 
 13482      53454544 
 13482      5F302028 
 13482      30783333 
 13483              	.LASF188:
 13484 71c5 5F5F5346 		.ascii	"__SFRACT_MIN__ (-0.5HR-0.5HR)\000"
 13484      52414354 
 13484      5F4D494E 
 13484      5F5F2028 
 13484      2D302E35 
 13485              	.LASF824:
 13486 71e3 706F7274 		.ascii	"portRECORD_READY_PRIORITY(uxPriority,uxReadyPriorit"
 13486      5245434F 
 13486      52445F52 
 13486      45414459 
 13486      5F505249 
 13487 7216 69657329 		.ascii	"ies) ( uxReadyPriorities ) |= ( 1UL << ( uxPriority"
 13487      20282075 
 13487      78526561 
 13487      64795072 
 13487      696F7269 
 13488 7249 20292029 		.ascii	" ) )\000"
 13488      00
 13489              	.LASF873:
 13490 724e 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 13490      6554414B 
 13490      455F4D55 
 13490      5445585F 
 13490      52454355 
 13491              	.LASF497:
 13492 7279 5F5F4C6F 		.ascii	"__Long long\000"
 13492      6E67206C 
 13492      6F6E6700 
 13493              	.LASF428:
 13494 7285 5F53495A 		.ascii	"_SIZET_ \000"
 13494      45545F20 
 13494      00
 13495              	.LASF1089:
 13496 728e 65437572 		.ascii	"eCurrentState\000"
 13496      72656E74 
 13496      53746174 
 13496      6500
 13497              	.LASF355:
 13498 729c 5F535444 		.ascii	"_STDLIB_H_ \000"
 13498      4C49425F 
 13498      485F2000 
 13499              	.LASF150:
 13500 72a8 5F5F4442 		.ascii	"__DBL_HAS_QUIET_NAN__ 1\000"
 13500      4C5F4841 
 13500      535F5155 
 13500      4945545F 
 13500      4E414E5F 
 13501              	.LASF975:
 13502 72c0 74736B4B 		.ascii	"tskKERNEL_VERSION_NUMBER \"V8.1.2\"\000"
 13502      45524E45 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 373


 13502      4C5F5645 
 13502      5253494F 
 13502      4E5F4E55 
 13503              	.LASF736:
 13504 72e2 494E5433 		.ascii	"INT32_C(x) __INT32_C(x)\000"
 13504      325F4328 
 13504      7829205F 
 13504      5F494E54 
 13504      33325F43 
 13505              	.LASF564:
 13506 72fa 5F5F7074 		.ascii	"__ptrvalue \000"
 13506      7276616C 
 13506      75652000 
 13507              	.LASF1127:
 13508 7306 78546173 		.ascii	"xTaskGenericCreate\000"
 13508      6B47656E 
 13508      65726963 
 13508      43726561 
 13508      746500
 13509              	.LASF989:
 13510 7319 78546173 		.ascii	"xTaskCreateRestricted(x,pxCreatedTask) xTaskGeneric"
 13510      6B437265 
 13510      61746552 
 13510      65737472 
 13510      69637465 
 13511 734c 43726561 		.ascii	"Create( ((x)->pvTaskCode), ((x)->pcName), ((x)->usS"
 13511      74652820 
 13511      28287829 
 13511      2D3E7076 
 13511      5461736B 
 13512 737f 7461636B 		.ascii	"tackDepth), ((x)->pvParameters), ((x)->uxPriority),"
 13512      44657074 
 13512      68292C20 
 13512      28287829 
 13512      2D3E7076 
 13513 73b2 20287078 		.ascii	" (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xReg"
 13513      43726561 
 13513      74656454 
 13513      61736B29 
 13513      2C202828 
 13514 73e5 696F6E73 		.ascii	"ions) )\000"
 13514      29202900 
 13515              	.LASF219:
 13516 73ed 5F5F4C4C 		.ascii	"__LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR\000"
 13516      46524143 
 13516      545F4D41 
 13516      585F5F20 
 13516      30583746 
 13517              	.LASF181:
 13518 7417 5F5F4445 		.ascii	"__DEC128_MAX_EXP__ 6145\000"
 13518      43313238 
 13518      5F4D4158 
 13518      5F455850 
 13518      5F5F2036 
 13519              	.LASF829:
 13520 742f 706F7274 		.ascii	"portBYTE_ALIGNMENT_MASK ( 0x0007U )\000"
 13520      42595445 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 374


 13520      5F414C49 
 13520      474E4D45 
 13520      4E545F4D 
 13521              	.LASF1191:
 13522 7453 70756353 		.ascii	"pucStackByte\000"
 13522      7461636B 
 13522      42797465 
 13522      00
 13523              	.LASF826:
 13524 7460 706F7274 		.ascii	"portGET_HIGHEST_PRIORITY(uxTopPriority,uxReadyPrior"
 13524      4745545F 
 13524      48494748 
 13524      4553545F 
 13524      5052494F 
 13525 7493 69746965 		.ascii	"ities) uxTopPriority = ( 31 - ucPortCountLeadingZer"
 13525      73292075 
 13525      78546F70 
 13525      5072696F 
 13525      72697479 
 13526 74c6 6F732820 		.ascii	"os( ( uxReadyPriorities ) ) )\000"
 13526      28207578 
 13526      52656164 
 13526      79507269 
 13526      6F726974 
 13527              	.LASF519:
 13528 74e4 5F524545 		.ascii	"_REENT_CHECK_EMERGENCY(ptr) \000"
 13528      4E545F43 
 13528      4845434B 
 13528      5F454D45 
 13528      5247454E 
 13529              	.LASF76:
 13530 7501 5F5F5054 		.ascii	"__PTRDIFF_MAX__ 2147483647\000"
 13530      52444946 
 13530      465F4D41 
 13530      585F5F20 
 13530      32313437 
 13531              	.LASF229:
 13532 751c 5F5F5341 		.ascii	"__SACCUM_MAX__ 0X7FFFP-7HK\000"
 13532      4343554D 
 13532      5F4D4158 
 13532      5F5F2030 
 13532      58374646 
 13533              	.LASF549:
 13534 7537 5F474C4F 		.ascii	"_GLOBAL_REENT _global_impure_ptr\000"
 13534      42414C5F 
 13534      5245454E 
 13534      54205F67 
 13534      6C6F6261 
 13535              	.LASF63:
 13536 7558 5F5F5549 		.ascii	"__UINTPTR_TYPE__ unsigned int\000"
 13536      4E545054 
 13536      525F5459 
 13536      50455F5F 
 13536      20756E73 
 13537              	.LASF302:
 13538 7576 5F5F5245 		.ascii	"__REGISTER_PREFIX__ \000"
 13538      47495354 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 375


 13538      45525F50 
 13538      52454649 
 13538      585F5F20 
 13539              	.LASF185:
 13540 758b 5F5F4445 		.ascii	"__DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000"
 13540      43313238 
 13540      5F535542 
 13540      4E4F524D 
 13540      414C5F4D 
 13541 75be 30303030 		.ascii	"000000001E-6143DL\000"
 13541      30303030 
 13541      31452D36 
 13541      31343344 
 13541      4C00
 13542              	.LASF138:
 13543 75d0 5F5F4442 		.ascii	"__DBL_DIG__ 15\000"
 13543      4C5F4449 
 13543      475F5F20 
 13543      313500
 13544              	.LASF215:
 13545 75df 5F5F554C 		.ascii	"__ULFRACT_EPSILON__ 0x1P-32ULR\000"
 13545      46524143 
 13545      545F4550 
 13545      53494C4F 
 13545      4E5F5F20 
 13546              	.LASF640:
 13547 75fe 5F5F5243 		.ascii	"__RCSID(s) struct __hack\000"
 13547      53494428 
 13547      73292073 
 13547      74727563 
 13547      74205F5F 
 13548              	.LASF729:
 13549 7617 57434841 		.ascii	"WCHAR_MAX __WCHAR_MAX__\000"
 13549      525F4D41 
 13549      58205F5F 
 13549      57434841 
 13549      525F4D41 
 13550              	.LASF920:
 13551 762f 636F6E66 		.ascii	"configUSE_MALLOC_FAILED_HOOK 0\000"
 13551      69675553 
 13551      455F4D41 
 13551      4C4C4F43 
 13551      5F464149 
 13552              	.LASF20:
 13553 764e 5F5F5349 		.ascii	"__SIZEOF_SIZE_T__ 4\000"
 13553      5A454F46 
 13553      5F53495A 
 13553      455F545F 
 13553      5F203400 
 13554              	.LASF1207:
 13555 7662 70784465 		.ascii	"pxDelayedTaskList\000"
 13555      6C617965 
 13555      64546173 
 13555      6B4C6973 
 13555      7400
 13556              	.LASF1064:
 13557 7674 784C4953 		.ascii	"xLIST\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 376


 13557      5400
 13558              	.LASF573:
 13559 767a 5F5F474E 		.ascii	"__GNUCLIKE___OFFSETOF 1\000"
 13559      55434C49 
 13559      4B455F5F 
 13559      5F4F4646 
 13559      5345544F 
 13560              	.LASF182:
 13561 7692 5F5F4445 		.ascii	"__DEC128_MIN__ 1E-6143DL\000"
 13561      43313238 
 13561      5F4D494E 
 13561      5F5F2031 
 13561      452D3631 
 13562              	.LASF99:
 13563 76ab 5F5F494E 		.ascii	"__INT64_C(c) c ## LL\000"
 13563      5436345F 
 13563      43286329 
 13563      20632023 
 13563      23204C4C 
 13564              	.LASF96:
 13565 76c0 5F5F494E 		.ascii	"__INT_LEAST32_MAX__ 2147483647L\000"
 13565      545F4C45 
 13565      41535433 
 13565      325F4D41 
 13565      585F5F20 
 13566              	.LASF363:
 13567 76e0 48415645 		.ascii	"HAVE_INITFINI_ARRAY 1\000"
 13567      5F494E49 
 13567      5446494E 
 13567      495F4152 
 13567      52415920 
 13568              	.LASF660:
 13569 76f6 73747274 		.ascii	"strtodf strtof\000"
 13569      6F646620 
 13569      73747274 
 13569      6F6600
 13570              	.LASF385:
 13571 7705 5F484156 		.ascii	"_HAVE_STDC \000"
 13571      455F5354 
 13571      44432000 
 13572              	.LASF967:
 13573 7711 6C697374 		.ascii	"listGET_END_MARKER(pxList) ( ( ListItem_t const * )"
 13573      4745545F 
 13573      454E445F 
 13573      4D41524B 
 13573      45522870 
 13574 7744 20282026 		.ascii	" ( &( ( pxList )->xListEnd ) ) )\000"
 13574      28202820 
 13574      70784C69 
 13574      73742029 
 13574      2D3E784C 
 13575              	.LASF569:
 13576 7765 5F5F454E 		.ascii	"__END_DECLS \000"
 13576      445F4445 
 13576      434C5320 
 13576      00
 13577              	.LASF823:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 377


 13578 7772 636F6E66 		.ascii	"configUSE_PORT_OPTIMISED_TASK_SELECTION 1\000"
 13578      69675553 
 13578      455F504F 
 13578      52545F4F 
 13578      5054494D 
 13579              	.LASF612:
 13580 779c 5F5F6765 		.ascii	"__generic(expr,t,yes,no) __builtin_choose_expr( __b"
 13580      6E657269 
 13580      63286578 
 13580      70722C74 
 13580      2C796573 
 13581 77cf 75696C74 		.ascii	"uiltin_types_compatible_p(__typeof(expr), t), yes, "
 13581      696E5F74 
 13581      79706573 
 13581      5F636F6D 
 13581      70617469 
 13582 7802 6E6F2900 		.ascii	"no)\000"
 13583              	.LASF159:
 13584 7806 5F5F4C44 		.ascii	"__LDBL_MIN__ 2.2250738585072014e-308L\000"
 13584      424C5F4D 
 13584      494E5F5F 
 13584      20322E32 
 13584      32353037 
 13585              	.LASF846:
 13586 782c 494E434C 		.ascii	"INCLUDE_xTimerPendFunctionCall 0\000"
 13586      5544455F 
 13586      7854696D 
 13586      65725065 
 13586      6E644675 
 13587              	.LASF237:
 13588 784d 5F5F4143 		.ascii	"__ACCUM_IBIT__ 16\000"
 13588      43554D5F 
 13588      49424954 
 13588      5F5F2031 
 13588      3600
 13589              	.LASF948:
 13590 785f 78546173 		.ascii	"xTaskStatusType TaskStatus_t\000"
 13590      6B537461 
 13590      74757354 
 13590      79706520 
 13590      5461736B 
 13591              	.LASF1208:
 13592 787c 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 13592      6572666C 
 13592      6F774465 
 13592      6C617965 
 13592      64546173 
 13593              	.LASF492:
 13594 7896 756E7369 		.ascii	"unsigned\000"
 13594      676E6564 
 13594      00
 13595              	.LASF799:
 13596 789f 706F7274 		.ascii	"portFLOAT float\000"
 13596      464C4F41 
 13596      5420666C 
 13596      6F617400 
 13597              	.LASF567:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 378


 13598 78af 5F5F6861 		.ascii	"__has_builtin(x) 0\000"
 13598      735F6275 
 13598      696C7469 
 13598      6E287829 
 13598      203000
 13599              	.LASF893:
 13600 78c2 74726163 		.ascii	"traceTASK_PRIORITY_SET(pxTask,uxNewPriority) \000"
 13600      65544153 
 13600      4B5F5052 
 13600      494F5249 
 13600      54595F53 
 13601              	.LASF661:
 13602 78f0 5F535452 		.ascii	"_STRING_H_ \000"
 13602      494E475F 
 13602      485F2000 
 13603              	.LASF1131:
 13604 78fc 76546173 		.ascii	"vTaskPrioritySet\000"
 13604      6B507269 
 13604      6F726974 
 13604      79536574 
 13604      00
 13605              	.LASF532:
 13606 790d 5F524545 		.ascii	"_REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)"
 13606      4E545F54 
 13606      4D287074 
 13606      72292028 
 13606      26287074 
 13607 7940 00       		.ascii	"\000"
 13608              	.LASF872:
 13609 7941 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE(pxMutex) \000"
 13609      6554414B 
 13609      455F4D55 
 13609      5445585F 
 13609      52454355 
 13610              	.LASF963:
 13611 7965 6C697374 		.ascii	"listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem "
 13611      4745545F 
 13611      4C495354 
 13611      5F495445 
 13611      4D5F5641 
 13612 7998 292D3E78 		.ascii	")->xItemValue )\000"
 13612      4974656D 
 13612      56616C75 
 13612      65202900 
 13613              	.LASF103:
 13614 79a8 5F5F5549 		.ascii	"__UINT16_C(c) c\000"
 13614      4E543136 
 13614      5F432863 
 13614      29206300 
 13615              	.LASF500:
 13616 79b8 5F524545 		.ascii	"_REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,\000"
 13616      4E545F49 
 13616      4E49545F 
 13616      41544558 
 13616      4954205F 
 13617              	.LASF587:
 13618 79e0 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE__ 1\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 379


 13618      5F535550 
 13618      504F5254 
 13618      535F5F5F 
 13618      494E4C49 
 13619              	.LASF299:
 13620 79fb 5F5F5544 		.ascii	"__UDA_IBIT__ 32\000"
 13620      415F4942 
 13620      49545F5F 
 13620      20333200 
 13621              	.LASF628:
 13622 7a0b 5F5F7072 		.ascii	"__printflike(fmtarg,firstvararg) __attribute__((__f"
 13622      696E7466 
 13622      6C696B65 
 13622      28666D74 
 13622      6172672C 
 13623 7a3e 6F726D61 		.ascii	"ormat__ (__printf__, fmtarg, firstvararg)))\000"
 13623      745F5F20 
 13623      285F5F70 
 13623      72696E74 
 13623      665F5F2C 
 13624              	.LASF135:
 13625 7a6a 5F5F464C 		.ascii	"__FLT_HAS_INFINITY__ 1\000"
 13625      545F4841 
 13625      535F494E 
 13625      46494E49 
 13625      54595F5F 
 13626              	.LASF702:
 13627 7a81 494E5436 		.ascii	"INT64_MIN (-__INT64_MAX__ - 1)\000"
 13627      345F4D49 
 13627      4E20282D 
 13627      5F5F494E 
 13627      5436345F 
 13628              	.LASF6:
 13629 7aa0 5F5F4154 		.ascii	"__ATOMIC_RELAXED 0\000"
 13629      4F4D4943 
 13629      5F52454C 
 13629      41584544 
 13629      203000
 13630              	.LASF406:
 13631 7ab3 5F415454 		.ascii	"_ATTRIBUTE(attrs) __attribute__ (attrs)\000"
 13631      52494255 
 13631      54452861 
 13631      74747273 
 13631      29205F5F 
 13632              	.LASF970:
 13633 7adb 6C697374 		.ascii	"listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { List_t "
 13633      4745545F 
 13633      4F574E45 
 13633      525F4F46 
 13633      5F4E4558 
 13634 7b0e 2A20636F 		.ascii	"* const pxConstList = ( pxList ); ( pxConstList )->"
 13634      6E737420 
 13634      7078436F 
 13634      6E73744C 
 13634      69737420 
 13635 7b41 7078496E 		.ascii	"pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( v"
 13635      64657820 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 380


 13635      3D202820 
 13635      7078436F 
 13635      6E73744C 
 13636 7b74 6F696420 		.ascii	"oid * ) ( pxConstList )->pxIndex == ( void * ) &( ("
 13636      2A202920 
 13636      28207078 
 13636      436F6E73 
 13636      744C6973 
 13637 7ba7 20707843 		.ascii	" pxConstList )->xListEnd ) ) { ( pxConstList )->pxI"
 13637      6F6E7374 
 13637      4C697374 
 13637      20292D3E 
 13637      784C6973 
 13638 7bda 6E646578 		.ascii	"ndex = ( pxConstList )->pxIndex->pxNext; } ( pxTCB "
 13638      203D2028 
 13638      20707843 
 13638      6F6E7374 
 13638      4C697374 
 13639 7c0d 29203D20 		.ascii	") = ( pxConstList )->pxIndex->pvOwner; }\000"
 13639      28207078 
 13639      436F6E73 
 13639      744C6973 
 13639      7420292D 
 13640              	.LASF547:
 13641 7c36 5F5F4154 		.ascii	"__ATTRIBUTE_IMPURE_PTR__ \000"
 13641      54524942 
 13641      5554455F 
 13641      494D5055 
 13641      52455F50 
 13642              	.LASF490:
 13643 7c50 5F5F6C6F 		.ascii	"__lock_release_recursive(lock) (_CAST_VOID 0)\000"
 13643      636B5F72 
 13643      656C6561 
 13643      73655F72 
 13643      65637572 
 13644              	.LASF707:
 13645 7c7e 55494E54 		.ascii	"UINT_LEAST64_MAX __UINT_LEAST64_MAX__\000"
 13645      5F4C4541 
 13645      53543634 
 13645      5F4D4158 
 13645      205F5F55 
 13646              	.LASF1132:
 13647 7ca4 75784E65 		.ascii	"uxNewPriority\000"
 13647      77507269 
 13647      6F726974 
 13647      7900
 13648              	.LASF701:
 13649 7cb2 55494E54 		.ascii	"UINT_LEAST32_MAX __UINT_LEAST32_MAX__\000"
 13649      5F4C4541 
 13649      53543332 
 13649      5F4D4158 
 13649      205F5F55 
 13650              	.LASF505:
 13651 7cd8 5F52414E 		.ascii	"_RAND48_MULT_0 (0xe66d)\000"
 13651      4434385F 
 13651      4D554C54 
 13651      5F302028 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 381


 13651      30786536 
 13652              	.LASF1080:
 13653 7cf0 784D454D 		.ascii	"xMEMORY_REGION\000"
 13653      4F52595F 
 13653      52454749 
 13653      4F4E00
 13654              	.LASF662:
 13655 7cff 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE \000"
 13655      57524150 
 13655      50455253 
 13655      5F494E43 
 13655      4C554445 
 13656              	.LASF905:
 13657 7d24 74726163 		.ascii	"traceEVENT_GROUP_CREATE(xEventGroup) \000"
 13657      65455645 
 13657      4E545F47 
 13657      524F5550 
 13657      5F435245 
 13658              	.LASF626:
 13659 7d4a 5F5F7261 		.ascii	"__rangeof(type,start,end) (__offsetof(type, end) - "
 13659      6E67656F 
 13659      66287479 
 13659      70652C73 
 13659      74617274 
 13660 7d7d 5F5F6F66 		.ascii	"__offsetof(type, start))\000"
 13660      66736574 
 13660      6F662874 
 13660      7970652C 
 13660      20737461 
 13661              	.LASF600:
 13662 7d96 5F5F6465 		.ascii	"__dead2 __attribute__((__noreturn__))\000"
 13662      61643220 
 13662      5F5F6174 
 13662      74726962 
 13662      7574655F 
 13663              	.LASF815:
 13664 7dbc 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortClearInte"
 13664      434C4541 
 13664      525F494E 
 13664      54455252 
 13664      5550545F 
 13665 7def 72727570 		.ascii	"rruptMask(x)\000"
 13665      744D6173 
 13665      6B287829 
 13665      00
 13666              	.LASF354:
 13667 7dfc 5F5F5553 		.ascii	"__USES_INITFINI__ 1\000"
 13667      45535F49 
 13667      4E495446 
 13667      494E495F 
 13667      5F203100 
 13668              	.LASF733:
 13669 7e10 55494E54 		.ascii	"UINT8_C(x) __UINT8_C(x)\000"
 13669      385F4328 
 13669      7829205F 
 13669      5F55494E 
 13669      54385F43 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 382


 13670              	.LASF68:
 13671 7e28 5F5F5348 		.ascii	"__SHRT_MAX__ 32767\000"
 13671      52545F4D 
 13671      41585F5F 
 13671      20333237 
 13671      363700
 13672              	.LASF463:
 13673 7e3b 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 13673      65645F70 
 13673      74726469 
 13673      66665F74 
 13673      00
 13674              	.LASF143:
 13675 7e4c 5F5F4442 		.ascii	"__DBL_DECIMAL_DIG__ 17\000"
 13675      4C5F4445 
 13675      43494D41 
 13675      4C5F4449 
 13675      475F5F20 
 13676              	.LASF769:
 13677 7e63 494E434C 		.ascii	"INCLUDE_vTaskSuspend 1\000"
 13677      5544455F 
 13677      76546173 
 13677      6B537573 
 13677      70656E64 
 13678              	.LASF459:
 13679 7e7a 5F505452 		.ascii	"_PTRDIFF_T_ \000"
 13679      44494646 
 13679      5F545F20 
 13679      00
 13680              	.LASF687:
 13681 7e87 494E545F 		.ascii	"INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)\000"
 13681      4C454153 
 13681      54385F4D 
 13681      494E2028 
 13681      2D5F5F49 
 13682              	.LASF496:
 13683 7eb0 5F4E554C 		.ascii	"_NULL 0\000"
 13683      4C203000 
 13684              	.LASF561:
 13685 7eb8 5F5F666C 		.ascii	"__flexarr [0]\000"
 13685      65786172 
 13685      72205B30 
 13685      5D00
 13686              	.LASF880:
 13687 7ec6 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR(pxQueue) \000"
 13687      65515545 
 13687      55455F50 
 13687      45454B5F 
 13687      46524F4D 
 13688              	.LASF866:
 13689 7ee9 74726163 		.ascii	"traceQUEUE_CREATE(pxNewQueue) \000"
 13689      65515545 
 13689      55455F43 
 13689      52454154 
 13689      45287078 
 13690              	.LASF675:
 13691 7f08 5F5F696E 		.ascii	"__int64_t_defined 1\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 383


 13691      7436345F 
 13691      745F6465 
 13691      66696E65 
 13691      64203100 
 13692              	.LASF361:
 13693 7f1c 5F57414E 		.ascii	"_WANT_REGISTER_FINI 1\000"
 13693      545F5245 
 13693      47495354 
 13693      45525F46 
 13693      494E4920 
 13694              	.LASF645:
 13695 7f32 5F5F4445 		.ascii	"__DEVOLATILE(type,var) ((type)(__uintptr_t)(volatil"
 13695      564F4C41 
 13695      54494C45 
 13695      28747970 
 13695      652C7661 
 13696 7f65 6520766F 		.ascii	"e void *)(var))\000"
 13696      6964202A 
 13696      29287661 
 13696      72292900 
 13697              	.LASF1008:
 13698 7f75 7854696D 		.ascii	"xTimerReset(xTimer,xTicksToWait) xTimerGenericComma"
 13698      65725265 
 13698      73657428 
 13698      7854696D 
 13698      65722C78 
 13699 7fa8 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCou"
 13699      28207854 
 13699      696D6572 
 13699      20292C20 
 13699      746D7243 
 13700 7fdb 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 13700      20292C20 
 13700      4E554C4C 
 13700      2C202820 
 13700      78546963 
 13701              	.LASF637:
 13702 7ffc 5F5F7379 		.ascii	"__sym_compat(sym,impl,verid) __asm__(\".symver \" #"
 13702      6D5F636F 
 13702      6D706174 
 13702      2873796D 
 13702      2C696D70 
 13703 802d 696D706C 		.ascii	"impl \", \" #sym \"@\" #verid)\000"
 13703      20222C20 
 13703      22202373 
 13703      796D2022 
 13703      40222023 
 13704              	.LASF869:
 13705 8048 74726163 		.ascii	"traceCREATE_MUTEX_FAILED() \000"
 13705      65435245 
 13705      4154455F 
 13705      4D555445 
 13705      585F4641 
 13706              	.LASF936:
 13707 8064 706F7274 		.ascii	"portASSERT_IF_IN_ISR() \000"
 13707      41535345 
 13707      52545F49 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 384


 13707      465F494E 
 13707      5F495352 
 13708              	.LASF70:
 13709 807c 5F5F4C4F 		.ascii	"__LONG_MAX__ 2147483647L\000"
 13709      4E475F4D 
 13709      41585F5F 
 13709      20323134 
 13709      37343833 
 13710              	.LASF853:
 13711 8095 706F7274 		.ascii	"portPOINTER_SIZE_TYPE uint32_t\000"
 13711      504F494E 
 13711      5445525F 
 13711      53495A45 
 13711      5F545950 
 13712              	.LASF119:
 13713 80b4 5F5F4743 		.ascii	"__GCC_IEC_559_COMPLEX 0\000"
 13713      435F4945 
 13713      435F3535 
 13713      395F434F 
 13713      4D504C45 
 13714              	.LASF266:
 13715 80cc 5F5F5151 		.ascii	"__QQ_FBIT__ 7\000"
 13715      5F464249 
 13715      545F5F20 
 13715      3700
 13716              	.LASF864:
 13717 80da 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_SEND(pxQueue) \000"
 13717      65424C4F 
 13717      434B494E 
 13717      475F4F4E 
 13717      5F515545 
 13718              	.LASF1060:
 13719 8100 4C697374 		.ascii	"ListItem_t\000"
 13719      4974656D 
 13719      5F7400
 13720              	.LASF1054:
 13721 810b 5469636B 		.ascii	"TickT_t\000"
 13721      545F7400 
 13722              	.LASF377:
 13723 8113 5F5F474E 		.ascii	"__GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)\000"
 13723      55435F50 
 13723      52455245 
 13723      515F5F28 
 13723      6D612C6D 
 13724              	.LASF301:
 13725 8140 5F5F5554 		.ascii	"__UTA_IBIT__ 64\000"
 13725      415F4942 
 13725      49545F5F 
 13725      20363400 
 13726              	.LASF262:
 13727 8150 5F5F554C 		.ascii	"__ULLACCUM_IBIT__ 32\000"
 13727      4C414343 
 13727      554D5F49 
 13727      4249545F 
 13727      5F203332 
 13728              	.LASF816:
 13729 8165 706F7274 		.ascii	"portDISABLE_INTERRUPTS() ulPortSetInterruptMask()\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 385


 13729      44495341 
 13729      424C455F 
 13729      494E5445 
 13729      52525550 
 13730              	.LASF168:
 13731 8197 5F5F4445 		.ascii	"__DEC32_MIN__ 1E-95DF\000"
 13731      4333325F 
 13731      4D494E5F 
 13731      5F203145 
 13731      2D393544 
 13732              	.LASF225:
 13733 81ad 5F5F554C 		.ascii	"__ULLFRACT_EPSILON__ 0x1P-64ULLR\000"
 13733      4C465241 
 13733      43545F45 
 13733      5053494C 
 13733      4F4E5F5F 
 13734              	.LASF1025:
 13735 81ce 7461736B 		.ascii	"taskSELECT_HIGHEST_PRIORITY_TASK() { UBaseT_t uxTop"
 13735      53454C45 
 13735      43545F48 
 13735      49474845 
 13735      53545F50 
 13736 8201 5072696F 		.ascii	"Priority; portGET_HIGHEST_PRIORITY( uxTopPriority, "
 13736      72697479 
 13736      3B20706F 
 13736      72744745 
 13736      545F4849 
 13737 8234 7578546F 		.ascii	"uxTopReadyPriority ); configASSERT( listCURRENT_LIS"
 13737      70526561 
 13737      64795072 
 13737      696F7269 
 13737      74792029 
 13738 8267 545F4C45 		.ascii	"T_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) )"
 13738      4E475448 
 13738      28202628 
 13738      20707852 
 13738      65616479 
 13739 829a 203E2030 		.ascii	" > 0 ); listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, "
 13739      20293B20 
 13739      6C697374 
 13739      4745545F 
 13739      4F574E45 
 13740 82cd 26282070 		.ascii	"&( pxReadyTasksLists[ uxTopPriority ] ) ); }\000"
 13740      78526561 
 13740      64795461 
 13740      736B734C 
 13740      69737473 
 13741              	.LASF324:
 13742 82fa 5F5F5349 		.ascii	"__SIZEOF_WINT_T__ 4\000"
 13742      5A454F46 
 13742      5F57494E 
 13742      545F545F 
 13742      5F203400 
 13743              	.LASF328:
 13744 830e 5F5F4152 		.ascii	"__ARM_FEATURE_UNALIGNED 1\000"
 13744      4D5F4645 
 13744      41545552 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 386


 13744      455F554E 
 13744      414C4947 
 13745              	.LASF0:
 13746 8328 5F5F5354 		.ascii	"__STDC__ 1\000"
 13746      44435F5F 
 13746      203100
 13747              	.LASF1101:
 13748 8333 75785443 		.ascii	"uxTCBNumber\000"
 13748      424E756D 
 13748      62657200 
 13749              	.LASF396:
 13750 833f 5F564F49 		.ascii	"_VOID void\000"
 13750      4420766F 
 13750      696400
 13751              	.LASF1105:
 13752 834a 5443425F 		.ascii	"TCB_t\000"
 13752      7400
 13753              	.LASF570:
 13754 8350 5F5F474E 		.ascii	"__GNUCLIKE_ASM 3\000"
 13754      55434C49 
 13754      4B455F41 
 13754      534D2033 
 13754      00
 13755              	.LASF248:
 13756 8361 5F5F4C41 		.ascii	"__LACCUM_MIN__ (-0X1P31LK-0X1P31LK)\000"
 13756      4343554D 
 13756      5F4D494E 
 13756      5F5F2028 
 13756      2D305831 
 13757              	.LASF877:
 13758 8385 74726163 		.ascii	"traceQUEUE_SEND_FAILED(pxQueue) \000"
 13758      65515545 
 13758      55455F53 
 13758      454E445F 
 13758      4641494C 
 13759              	.LASF629:
 13760 83a6 5F5F7363 		.ascii	"__scanflike(fmtarg,firstvararg) __attribute__((__fo"
 13760      616E666C 
 13760      696B6528 
 13760      666D7461 
 13760      72672C66 
 13761 83d9 726D6174 		.ascii	"rmat__ (__scanf__, fmtarg, firstvararg)))\000"
 13761      5F5F2028 
 13761      5F5F7363 
 13761      616E665F 
 13761      5F2C2066 
 13762              	.LASF166:
 13763 8403 5F5F4445 		.ascii	"__DEC32_MIN_EXP__ (-94)\000"
 13763      4333325F 
 13763      4D494E5F 
 13763      4558505F 
 13763      5F20282D 
 13764              	.LASF263:
 13765 841b 5F5F554C 		.ascii	"__ULLACCUM_MIN__ 0.0ULLK\000"
 13765      4C414343 
 13765      554D5F4D 
 13765      494E5F5F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 387


 13765      20302E30 
 13766              	.LASF1126:
 13767 8434 78546963 		.ascii	"xTicksToDelay\000"
 13767      6B73546F 
 13767      44656C61 
 13767      7900
 13768              	.LASF551:
 13769 8442 5F535953 		.ascii	"_SYS_CDEFS_H_ \000"
 13769      5F434445 
 13769      46535F48 
 13769      5F2000
 13770              	.LASF314:
 13771 8451 5F5F4743 		.ascii	"__GCC_ATOMIC_WCHAR_T_LOCK_FREE 2\000"
 13771      435F4154 
 13771      4F4D4943 
 13771      5F574348 
 13771      41525F54 
 13772              	.LASF579:
 13773 8472 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VAALIST 1\000"
 13773      55434C49 
 13773      4B455F42 
 13773      55494C54 
 13773      494E5F56 
 13774              	.LASF1018:
 13775 848f 7461736B 		.ascii	"taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_AP"
 13775      5949454C 
 13775      445F4946 
 13775      5F555349 
 13775      4E475F50 
 13776 84c2 49282900 		.ascii	"I()\000"
 13777              	.LASF969:
 13778 84c6 6C697374 		.ascii	"listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNum"
 13778      43555252 
 13778      454E545F 
 13778      4C495354 
 13778      5F4C454E 
 13779 84f9 6265724F 		.ascii	"berOfItems )\000"
 13779      66497465 
 13779      6D732029 
 13779      00
 13780              	.LASF627:
 13781 8506 5F5F636F 		.ascii	"__containerof(x,s,m) ({ const volatile __typeof__(("
 13781      6E746169 
 13781      6E65726F 
 13781      6628782C 
 13781      732C6D29 
 13782 8539 2873202A 		.ascii	"(s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const vol"
 13782      2930292D 
 13782      3E6D2920 
 13782      2A5F5F78 
 13782      203D2028 
 13783 856c 6174696C 		.ascii	"atile char *)__x - __offsetof(s, m));})\000"
 13783      65206368 
 13783      6172202A 
 13783      295F5F78 
 13783      202D205F 
 13784              	.LASF44:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 388


 13785 8594 5F5F5549 		.ascii	"__UINT32_TYPE__ long unsigned int\000"
 13785      4E543332 
 13785      5F545950 
 13785      455F5F20 
 13785      6C6F6E67 
 13786              	.LASF682:
 13787 85b6 494E5450 		.ascii	"INTPTR_MAX __INTPTR_MAX__\000"
 13787      54525F4D 
 13787      4158205F 
 13787      5F494E54 
 13787      5054525F 
 13788              	.LASF807:
 13789 85d0 706F7274 		.ascii	"portTICK_PERIOD_MS ( ( TickType_t ) 1000 / configTI"
 13789      5449434B 
 13789      5F504552 
 13789      494F445F 
 13789      4D532028 
 13790 8603 434B5F52 		.ascii	"CK_RATE_HZ )\000"
 13790      4154455F 
 13790      485A2029 
 13790      00
 13791              	.LASF339:
 13792 8610 5F5F7468 		.ascii	"__thumb2__ 1\000"
 13792      756D6232 
 13792      5F5F2031 
 13792      00
 13793              	.LASF1109:
 13794 861d 70765061 		.ascii	"pvParameters\000"
 13794      72616D65 
 13794      74657273 
 13794      00
 13795              	.LASF1153:
 13796 862a 75785461 		.ascii	"uxTask\000"
 13796      736B00
 13797              	.LASF614:
 13798 8631 5F5F7075 		.ascii	"__pure __attribute__((__pure__))\000"
 13798      7265205F 
 13798      5F617474 
 13798      72696275 
 13798      74655F5F 
 13799              	.LASF427:
 13800 8652 5F474343 		.ascii	"_GCC_SIZE_T \000"
 13800      5F53495A 
 13800      455F5420 
 13800      00
 13801              	.LASF828:
 13802 865f 706F7274 		.ascii	"portNOP() \000"
 13802      4E4F5028 
 13802      292000
 13803              	.LASF589:
 13804 866a 5F5F4343 		.ascii	"__CC_SUPPORTS_WARNING 1\000"
 13804      5F535550 
 13804      504F5254 
 13804      535F5741 
 13804      524E494E 
 13805              	.LASF987:
 13806 8682 7461736B 		.ascii	"taskSCHEDULER_RUNNING ( ( BaseT_t ) 2 )\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 389


 13806      53434845 
 13806      44554C45 
 13806      525F5255 
 13806      4E4E494E 
 13807              	.LASF223:
 13808 86aa 5F5F554C 		.ascii	"__ULLFRACT_MIN__ 0.0ULLR\000"
 13808      4C465241 
 13808      43545F4D 
 13808      494E5F5F 
 13808      20302E30 
 13809              	.LASF434:
 13810 86c3 5F545F57 		.ascii	"_T_WCHAR_ \000"
 13810      43484152 
 13810      5F2000
 13811              	.LASF910:
 13812 86ce 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_END(xEventGroup,uxBitsTo"
 13812      65455645 
 13812      4E545F47 
 13812      524F5550 
 13812      5F574149 
 13813 8701 57616974 		.ascii	"WaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred"
 13813      466F722C 
 13813      7854696D 
 13813      656F7574 
 13813      4F636375 
 13814 8734 00       		.ascii	"\000"
 13815              	.LASF681:
 13816 8735 494E5450 		.ascii	"INTPTR_MIN (-__INTPTR_MAX__ - 1)\000"
 13816      54525F4D 
 13816      494E2028 
 13816      2D5F5F49 
 13816      4E545054 
 13817              	.LASF1149:
 13818 8756 75785461 		.ascii	"uxTaskGetSystemState\000"
 13818      736B4765 
 13818      74537973 
 13818      74656D53 
 13818      74617465 
 13819              	.LASF515:
 13820 876b 5F524545 		.ascii	"_REENT_CHECK_RAND48(ptr) \000"
 13820      4E545F43 
 13820      4845434B 
 13820      5F52414E 
 13820      44343828 
 13821              	.LASF642:
 13822 8785 5F5F5343 		.ascii	"__SCCSID(s) struct __hack\000"
 13822      43534944 
 13822      28732920 
 13822      73747275 
 13822      6374205F 
 13823              	.LASF13:
 13824 879f 5F5F5349 		.ascii	"__SIZEOF_INT__ 4\000"
 13824      5A454F46 
 13824      5F494E54 
 13824      5F5F2034 
 13824      00
 13825              	.LASF446:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 390


 13826 87b0 5F425344 		.ascii	"_BSD_WCHAR_T_\000"
 13826      5F574348 
 13826      41525F54 
 13826      5F00
 13827              	.LASF1011:
 13828 87be 7854696D 		.ascii	"xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHighe"
 13828      65724368 
 13828      616E6765 
 13828      50657269 
 13828      6F644672 
 13829 87f1 72507269 		.ascii	"rPriorityTaskWoken) xTimerGenericCommand( ( xTimer "
 13829      6F726974 
 13829      79546173 
 13829      6B576F6B 
 13829      656E2920 
 13830 8824 292C2074 		.ascii	"), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod "
 13830      6D72434F 
 13830      4D4D414E 
 13830      445F4348 
 13830      414E4745 
 13831 8857 292C2028 		.ascii	"), ( pxHigherPriorityTaskWoken ), 0U )\000"
 13831      20707848 
 13831      69676865 
 13831      72507269 
 13831      6F726974 
 13832              	.LASF217:
 13833 887e 5F5F4C4C 		.ascii	"__LLFRACT_IBIT__ 0\000"
 13833      46524143 
 13833      545F4942 
 13833      49545F5F 
 13833      203000
 13834              	.LASF590:
 13835 8891 5F5F4343 		.ascii	"__CC_SUPPORTS_VARADIC_XXX 1\000"
 13835      5F535550 
 13835      504F5254 
 13835      535F5641 
 13835      52414449 
 13836              	.LASF1048:
 13837 88ad 75696E74 		.ascii	"uint32_t\000"
 13837      33325F74 
 13837      00
 13838              	.LASF808:
 13839 88b6 706F7274 		.ascii	"portBYTE_ALIGNMENT 8\000"
 13839      42595445 
 13839      5F414C49 
 13839      474E4D45 
 13839      4E542038 
 13840              	.LASF665:
 13841 88cb 5F535953 		.ascii	"_SYS__INTSUP_H \000"
 13841      5F5F494E 
 13841      54535550 
 13841      5F482000 
 13842              	.LASF230:
 13843 88db 5F5F5341 		.ascii	"__SACCUM_EPSILON__ 0x1P-7HK\000"
 13843      4343554D 
 13843      5F455053 
 13843      494C4F4E 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 391


 13843      5F5F2030 
 13844              	.LASF797:
 13845 88f7 504F5254 		.ascii	"PORTMACRO_H \000"
 13845      4D414352 
 13845      4F5F4820 
 13845      00
 13846              	.LASF1112:
 13847 8904 78526567 		.ascii	"xRegions\000"
 13847      696F6E73 
 13847      00
 13848              	.LASF836:
 13849 890d 494E434C 		.ascii	"INCLUDE_xTimerGetTimerDaemonTaskHandle 0\000"
 13849      5544455F 
 13849      7854696D 
 13849      65724765 
 13849      7454696D 
 13850              	.LASF82:
 13851 8936 5F5F5349 		.ascii	"__SIG_ATOMIC_MAX__ 2147483647\000"
 13851      475F4154 
 13851      4F4D4943 
 13851      5F4D4158 
 13851      5F5F2032 
 13852              	.LASF960:
 13853 8954 6C697374 		.ascii	"listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( ( pxL"
 13853      5345545F 
 13853      4C495354 
 13853      5F495445 
 13853      4D5F4F57 
 13854 8987 69737449 		.ascii	"istItem )->pvOwner = ( void * ) ( pxOwner ) )\000"
 13854      74656D20 
 13854      292D3E70 
 13854      764F776E 
 13854      6572203D 
 13855              	.LASF59:
 13856 89b5 5F5F5549 		.ascii	"__UINT_FAST16_TYPE__ unsigned int\000"
 13856      4E545F46 
 13856      41535431 
 13856      365F5459 
 13856      50455F5F 
 13857              	.LASF295:
 13858 89d7 5F5F5548 		.ascii	"__UHA_IBIT__ 8\000"
 13858      415F4942 
 13858      49545F5F 
 13858      203800
 13859              	.LASF493:
 13860 89e6 5F5F6E65 		.ascii	"__need_wint_t \000"
 13860      65645F77 
 13860      696E745F 
 13860      742000
 13861              	.LASF240:
 13862 89f5 5F5F4143 		.ascii	"__ACCUM_EPSILON__ 0x1P-15K\000"
 13862      43554D5F 
 13862      45505349 
 13862      4C4F4E5F 
 13862      5F203078 
 13863              	.LASF255:
 13864 8a10 5F5F554C 		.ascii	"__ULACCUM_EPSILON__ 0x1P-32ULK\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 392


 13864      41434355 
 13864      4D5F4550 
 13864      53494C4F 
 13864      4E5F5F20 
 13865              	.LASF152:
 13866 8a2f 5F5F4C44 		.ascii	"__LDBL_DIG__ 15\000"
 13866      424C5F44 
 13866      49475F5F 
 13866      20313500 
 13867              	.LASF934:
 13868 8a3f 636F6E66 		.ascii	"configUSE_STATS_FORMATTING_FUNCTIONS 0\000"
 13868      69675553 
 13868      455F5354 
 13868      4154535F 
 13868      464F524D 
 13869              	.LASF609:
 13870 8a66 5F41746F 		.ascii	"_Atomic(T) struct { T volatile __val; }\000"
 13870      6D696328 
 13870      54292073 
 13870      74727563 
 13870      74207B20 
 13871              	.LASF1028:
 13872 8a8e 70727641 		.ascii	"prvAddTaskToReadyList(pxTCB) traceMOVED_TASK_TO_REA"
 13872      64645461 
 13872      736B546F 
 13872      52656164 
 13872      794C6973 
 13873 8ac1 44595F53 		.ascii	"DY_STATE( pxTCB ) taskRECORD_READY_PRIORITY( ( pxTC"
 13873      54415445 
 13873      28207078 
 13873      54434220 
 13873      29207461 
 13874 8af4 4220292D 		.ascii	"B )->uxPriority ); vListInsertEnd( &( pxReadyTasksL"
 13874      3E757850 
 13874      72696F72 
 13874      69747920 
 13874      293B2076 
 13875 8b27 69737473 		.ascii	"ists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGen"
 13875      5B202820 
 13875      70785443 
 13875      4220292D 
 13875      3E757850 
 13876 8b5a 65726963 		.ascii	"ericListItem ) )\000"
 13876      4C697374 
 13876      4974656D 
 13876      20292029 
 13876      00
 13877              	.LASF75:
 13878 8b6b 5F5F5749 		.ascii	"__WINT_MIN__ 0U\000"
 13878      4E545F4D 
 13878      494E5F5F 
 13878      20305500 
 13879              	.LASF1097:
 13880 8b7b 7847656E 		.ascii	"xGenericListItem\000"
 13880      65726963 
 13880      4C697374 
 13880      4974656D 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 393


 13880      00
 13881              	.LASF177:
 13882 8b8c 5F5F4445 		.ascii	"__DEC64_EPSILON__ 1E-15DD\000"
 13882      4336345F 
 13882      45505349 
 13882      4C4F4E5F 
 13882      5F203145 
 13883              	.LASF557:
 13884 8ba6 5F5F6C6F 		.ascii	"__long_double_t long double\000"
 13884      6E675F64 
 13884      6F75626C 
 13884      655F7420 
 13884      6C6F6E67 
 13885              	.LASF840:
 13886 8bc2 636F6E66 		.ascii	"configUSE_APPLICATION_TASK_TAG 0\000"
 13886      69675553 
 13886      455F4150 
 13886      504C4943 
 13886      4154494F 
 13887              	.LASF813:
 13888 8be3 706F7274 		.ascii	"portYIELD_FROM_ISR(x) portEND_SWITCHING_ISR( x )\000"
 13888      5949454C 
 13888      445F4652 
 13888      4F4D5F49 
 13888      53522878 
 13889              	.LASF606:
 13890 8c14 5F5F7365 		.ascii	"__section(x) __attribute__((__section__(x)))\000"
 13890      6374696F 
 13890      6E287829 
 13890      205F5F61 
 13890      74747269 
 13891              	.LASF1226:
 13892 8c41 756C4269 		.ascii	"ulBitmap\000"
 13892      746D6170 
 13892      00
 13893              	.LASF47:
 13894 8c4a 5F5F494E 		.ascii	"__INT_LEAST16_TYPE__ short int\000"
 13894      545F4C45 
 13894      41535431 
 13894      365F5459 
 13894      50455F5F 
 13895              	.LASF857:
 13896 8c69 74726163 		.ascii	"traceINCREASE_TICK_COUNT(x) \000"
 13896      65494E43 
 13896      52454153 
 13896      455F5449 
 13896      434B5F43 
 13897              	.LASF1115:
 13898 8c86 78546173 		.ascii	"xTaskToDelete\000"
 13898      6B546F44 
 13898      656C6574 
 13898      6500
 13899              	.LASF748:
 13900 8c94 636F6E66 		.ascii	"configCPU_CLOCK_HZ ( ( unsigned long )120000000ul )"
 13900      69674350 
 13900      555F434C 
 13900      4F434B5F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 394


 13900      485A2028 
 13901 8cc7 00       		.ascii	"\000"
 13902              	.LASF144:
 13903 8cc8 5F5F4442 		.ascii	"__DBL_MAX__ ((double)1.7976931348623157e+308L)\000"
 13903      4C5F4D41 
 13903      585F5F20 
 13903      2828646F 
 13903      75626C65 
 13904              	.LASF389:
 13905 8cf7 5F505452 		.ascii	"_PTR void *\000"
 13905      20766F69 
 13905      64202A00 
 13906              	.LASF216:
 13907 8d03 5F5F4C4C 		.ascii	"__LLFRACT_FBIT__ 63\000"
 13907      46524143 
 13907      545F4642 
 13907      49545F5F 
 13907      20363300 
 13908              	.LASF431:
 13909 8d17 5F5F7763 		.ascii	"__wchar_t__ \000"
 13909      6861725F 
 13909      745F5F20 
 13909      00
 13910              	.LASF338:
 13911 8d24 5F5F7468 		.ascii	"__thumb__ 1\000"
 13911      756D625F 
 13911      5F203100 
 13912              	.LASF986:
 13913 8d30 7461736B 		.ascii	"taskSCHEDULER_NOT_STARTED ( ( BaseT_t ) 1 )\000"
 13913      53434845 
 13913      44554C45 
 13913      525F4E4F 
 13913      545F5354 
 13914              	.LASF712:
 13915 8d5c 494E545F 		.ascii	"INT_FAST16_MAX __INT_FAST16_MAX__\000"
 13915      46415354 
 13915      31365F4D 
 13915      4158205F 
 13915      5F494E54 
 13916              	.LASF341:
 13917 8d7e 5F5F4152 		.ascii	"__ARMEL__ 1\000"
 13917      4D454C5F 
 13917      5F203100 
 13918              	.LASF482:
 13919 8d8a 5F5F6C6F 		.ascii	"__lock_init_recursive(lock) (_CAST_VOID 0)\000"
 13919      636B5F69 
 13919      6E69745F 
 13919      72656375 
 13919      72736976 
 13920              	.LASF630:
 13921 8db5 5F5F666F 		.ascii	"__format_arg(fmtarg) __attribute__((__format_arg__ "
 13921      726D6174 
 13921      5F617267 
 13921      28666D74 
 13921      61726729 
 13922 8de8 28666D74 		.ascii	"(fmtarg)))\000"
 13922      61726729 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 395


 13922      292900
 13923              	.LASF581:
 13924 8df3 5F5F636F 		.ascii	"__compiler_membar() __asm __volatile(\" \" : : : \""
 13924      6D70696C 
 13924      65725F6D 
 13924      656D6261 
 13924      72282920 
 13925 8e23 6D656D6F 		.ascii	"memory\")\000"
 13925      72792229 
 13925      00
 13926              	.LASF932:
 13927 8e2c 636F6E66 		.ascii	"configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTI"
 13927      6967494E 
 13927      434C5544 
 13927      455F4150 
 13927      504C4943 
 13928 8e5f 4F4E5320 		.ascii	"ONS 0\000"
 13928      3000
 13929              	.LASF268:
 13930 8e65 5F5F4851 		.ascii	"__HQ_FBIT__ 15\000"
 13930      5F464249 
 13930      545F5F20 
 13930      313500
 13931              	.LASF1179:
 13932 8e74 70727649 		.ascii	"prvInitialiseTaskLists\000"
 13932      6E697469 
 13932      616C6973 
 13932      65546173 
 13932      6B4C6973 
 13933              	.LASF968:
 13934 8e8b 6C697374 		.ascii	"listLIST_IS_EMPTY(pxList) ( ( BaseT_t ) ( ( pxList "
 13934      4C495354 
 13934      5F49535F 
 13934      454D5054 
 13934      59287078 
 13935 8ebe 292D3E75 		.ascii	")->uxNumberOfItems == ( UBaseT_t ) 0 ) )\000"
 13935      784E756D 
 13935      6265724F 
 13935      66497465 
 13935      6D73203D 
 13936              	.LASF907:
 13937 8ee7 74726163 		.ascii	"traceEVENT_GROUP_SYNC_BLOCK(xEventGroup,uxBitsToSet"
 13937      65455645 
 13937      4E545F47 
 13937      524F5550 
 13937      5F53594E 
 13938 8f1a 2C757842 		.ascii	",uxBitsToWaitFor) \000"
 13938      69747354 
 13938      6F576169 
 13938      74466F72 
 13938      292000
 13939              	.LASF304:
 13940 8f2d 5F5F474E 		.ascii	"__GNUC_GNU_INLINE__ 1\000"
 13940      55435F47 
 13940      4E555F49 
 13940      4E4C494E 
 13940      455F5F20 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 396


 13941              	.LASF544:
 13942 8f43 5F524545 		.ascii	"_REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_"
 13942      4E545F53 
 13942      49474E41 
 13942      4C5F4255 
 13942      46287074 
 13943 8f76 62756629 		.ascii	"buf)\000"
 13943      00
 13944              	.LASF1205:
 13945 8f7b 7844656C 		.ascii	"xDelayedTaskList1\000"
 13945      61796564 
 13945      5461736B 
 13945      4C697374 
 13945      3100
 13946              	.LASF1206:
 13947 8f8d 7844656C 		.ascii	"xDelayedTaskList2\000"
 13947      61796564 
 13947      5461736B 
 13947      4C697374 
 13947      3200
 13948              	.LASF187:
 13949 8f9f 5F5F5346 		.ascii	"__SFRACT_IBIT__ 0\000"
 13949      52414354 
 13949      5F494249 
 13949      545F5F20 
 13949      3000
 13950              	.LASF599:
 13951 8fb1 5F5F766F 		.ascii	"__volatile volatile\000"
 13951      6C617469 
 13951      6C652076 
 13951      6F6C6174 
 13951      696C6500 
 13952              	.LASF149:
 13953 8fc5 5F5F4442 		.ascii	"__DBL_HAS_INFINITY__ 1\000"
 13953      4C5F4841 
 13953      535F494E 
 13953      46494E49 
 13953      54595F5F 
 13954              	.LASF670:
 13955 8fdc 5F5F696E 		.ascii	"__int_least8_t_defined 1\000"
 13955      745F6C65 
 13955      61737438 
 13955      5F745F64 
 13955      6566696E 
 13956              	.LASF881:
 13957 8ff5 74726163 		.ascii	"traceQUEUE_RECEIVE_FAILED(pxQueue) \000"
 13957      65515545 
 13957      55455F52 
 13957      45434549 
 13957      56455F46 
 13958              	.LASF508:
 13959 9019 5F52414E 		.ascii	"_RAND48_ADD (0x000b)\000"
 13959      4434385F 
 13959      41444420 
 13959      28307830 
 13959      30306229 
 13960              	.LASF656:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 397


 13961 902e 45584954 		.ascii	"EXIT_FAILURE 1\000"
 13961      5F464149 
 13961      4C555245 
 13961      203100
 13962              	.LASF330:
 13963 903d 5F5F4152 		.ascii	"__ARM_FEATURE_LDREX 7\000"
 13963      4D5F4645 
 13963      41545552 
 13963      455F4C44 
 13963      52455820 
 13964              	.LASF664:
 13965 9053 5F535444 		.ascii	"_STDINT_H \000"
 13965      494E545F 
 13965      482000
 13966              	.LASF1083:
 13967 905e 756C5061 		.ascii	"ulParameters\000"
 13967      72616D65 
 13967      74657273 
 13967      00
 13968              	.LASF794:
 13969 906b 65727251 		.ascii	"errQUEUE_BLOCKED ( -4 )\000"
 13969      55455545 
 13969      5F424C4F 
 13969      434B4544 
 13969      2028202D 
 13970              	.LASF220:
 13971 9083 5F5F4C4C 		.ascii	"__LLFRACT_EPSILON__ 0x1P-63LLR\000"
 13971      46524143 
 13971      545F4550 
 13971      53494C4F 
 13971      4E5F5F20 
 13972              	.LASF790:
 13973 90a2 70644641 		.ascii	"pdFAIL ( pdFALSE )\000"
 13973      494C2028 
 13973      20706446 
 13973      414C5345 
 13973      202900
 13974              	.LASF955:
 13975 90b5 784C6973 		.ascii	"xListItem ListItem_t\000"
 13975      74497465 
 13975      6D204C69 
 13975      73744974 
 13975      656D5F74 
 13976              	.LASF189:
 13977 90ca 5F5F5346 		.ascii	"__SFRACT_MAX__ 0X7FP-7HR\000"
 13977      52414354 
 13977      5F4D4158 
 13977      5F5F2030 
 13977      58374650 
 13978              	.LASF916:
 13979 90e3 74726163 		.ascii	"tracePEND_FUNC_CALL(xFunctionToPend,pvParameter1,ul"
 13979      6550454E 
 13979      445F4655 
 13979      4E435F43 
 13979      414C4C28 
 13980 9116 50617261 		.ascii	"Parameter2,ret) \000"
 13980      6D657465 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 398


 13980      72322C72 
 13980      65742920 
 13980      00
 13981              	.LASF483:
 13982 9127 5F5F6C6F 		.ascii	"__lock_close(lock) (_CAST_VOID 0)\000"
 13982      636B5F63 
 13982      6C6F7365 
 13982      286C6F63 
 13982      6B292028 
 13983              	.LASF594:
 13984 9149 5F5F434F 		.ascii	"__CONCAT(x,y) __CONCAT1(x,y)\000"
 13984      4E434154 
 13984      28782C79 
 13984      29205F5F 
 13984      434F4E43 
 13985              	.LASF782:
 13986 9166 636F6E66 		.ascii	"configKERNEL_INTERRUPT_PRIORITY ( 31 << (8 - config"
 13986      69674B45 
 13986      524E454C 
 13986      5F494E54 
 13986      45525255 
 13987 9199 5052494F 		.ascii	"PRIO_BITS) )\000"
 13987      5F424954 
 13987      53292029 
 13987      00
 13988              	.LASF95:
 13989 91a6 5F5F494E 		.ascii	"__INT16_C(c) c\000"
 13989      5431365F 
 13989      43286329 
 13989      206300
 13990              	.LASF1003:
 13991 91b5 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD_FROM_ISR ( ( BaseT_t ) 9 )"
 13991      4F4D4D41 
 13991      4E445F43 
 13991      48414E47 
 13991      455F5045 
 13992 91e8 00       		.ascii	"\000"
 13993              	.LASF947:
 13994 91e9 78546173 		.ascii	"xTaskParameters TaskParameters_t\000"
 13994      6B506172 
 13994      616D6574 
 13994      65727320 
 13994      5461736B 
 13995              	.LASF390:
 13996 920a 5F414E44 		.ascii	"_AND ,\000"
 13996      202C00
 13997              	.LASF827:
 13998 9211 706F7274 		.ascii	"portASSERT_IF_INTERRUPT_PRIORITY_INVALID() vPortVal"
 13998      41535345 
 13998      52545F49 
 13998      465F494E 
 13998      54455252 
 13999 9244 69646174 		.ascii	"idateInterruptPriority()\000"
 13999      65496E74 
 13999      65727275 
 13999      70745072 
 13999      696F7269 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 399


 14000              	.LASF632:
 14001 925d 5F5F7374 		.ascii	"__strftimelike(fmtarg,firstvararg) __attribute__((_"
 14001      72667469 
 14001      6D656C69 
 14001      6B652866 
 14001      6D746172 
 14002 9290 5F666F72 		.ascii	"_format__ (__strftime__, fmtarg, firstvararg)))\000"
 14002      6D61745F 
 14002      5F20285F 
 14002      5F737472 
 14002      6674696D 
 14003              	.LASF499:
 14004 92c0 5F415445 		.ascii	"_ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL},"
 14004      5849545F 
 14004      494E4954 
 14004      207B5F4E 
 14004      554C4C2C 
 14005 92f3 20302C20 		.ascii	" 0, 0}}\000"
 14005      307D7D00 
 14006              	.LASF779:
 14007 92fb 636F6E66 		.ascii	"configNET_MASK2 255\000"
 14007      69674E45 
 14007      545F4D41 
 14007      534B3220 
 14007      32353500 
 14008              	.LASF646:
 14009 930f 5F5F4445 		.ascii	"__DEQUALIFY(type,var) ((type)(__uintptr_t)(const vo"
 14009      5155414C 
 14009      49465928 
 14009      74797065 
 14009      2C766172 
 14010 9342 6C617469 		.ascii	"latile void *)(var))\000"
 14010      6C652076 
 14010      6F696420 
 14010      2A292876 
 14010      61722929 
 14011              	.LASF753:
 14012 9357 636F6E66 		.ascii	"configUSE_TRACE_FACILITY 1\000"
 14012      69675553 
 14012      455F5452 
 14012      4143455F 
 14012      46414349 
 14013              	.LASF10:
 14014 9372 5F5F4154 		.ascii	"__ATOMIC_ACQ_REL 4\000"
 14014      4F4D4943 
 14014      5F414351 
 14014      5F52454C 
 14014      203400
 14015              	.LASF5:
 14016 9385 5F5F5645 		.ascii	"__VERSION__ \"4.9.3 20150303 (release) [ARM/embedde"
 14016      5253494F 
 14016      4E5F5F20 
 14016      22342E39 
 14016      2E332032 
 14017 93b7 642D345F 		.ascii	"d-4_9-branch revision 221220]\"\000"
 14017      392D6272 
 14017      616E6368 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 400


 14017      20726576 
 14017      6973696F 
 14018              	.LASF40:
 14019 93d6 5F5F494E 		.ascii	"__INT32_TYPE__ long int\000"
 14019      5433325F 
 14019      54595045 
 14019      5F5F206C 
 14019      6F6E6720 
 14020              	.LASF604:
 14021 93ee 5F5F7061 		.ascii	"__packed __attribute__((__packed__))\000"
 14021      636B6564 
 14021      205F5F61 
 14021      74747269 
 14021      62757465 
 14022              	.LASF439:
 14023 9413 5F574348 		.ascii	"_WCHAR_T_DEFINED_ \000"
 14023      41525F54 
 14023      5F444546 
 14023      494E4544 
 14023      5F2000
 14024              	.LASF1181:
 14025 9426 784C6973 		.ascii	"xListIsEmpty\000"
 14025      74497345 
 14025      6D707479 
 14025      00
 14026              	.LASF360:
 14027 9433 5F57414E 		.ascii	"_WANT_IO_LONG_LONG 1\000"
 14027      545F494F 
 14027      5F4C4F4E 
 14027      475F4C4F 
 14027      4E472031 
 14028              	.LASF1224:
 14029 9448 443A5C77 		.ascii	"D:\\work\\Embedded\\aoaa\000"
 14029      6F726B5C 
 14029      456D6265 
 14029      64646564 
 14029      5C616F61 
 14030              	.LASF478:
 14031 945e 5F5F5359 		.ascii	"__SYS_LOCK_H__ \000"
 14031      535F4C4F 
 14031      434B5F48 
 14031      5F5F2000 
 14032              	.LASF768:
 14033 946e 494E434C 		.ascii	"INCLUDE_vTaskCleanUpResources 0\000"
 14033      5544455F 
 14033      76546173 
 14033      6B436C65 
 14033      616E5570 
 14034              	.LASF407:
 14035 948e 5F454C49 		.ascii	"_ELIDABLE_INLINE extern __inline__ _ATTRIBUTE ((__a"
 14035      4441424C 
 14035      455F494E 
 14035      4C494E45 
 14035      20657874 
 14036 94c1 6C776179 		.ascii	"lways_inline__))\000"
 14036      735F696E 
 14036      6C696E65 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 401


 14036      5F5F2929 
 14036      00
 14037              	.LASF883:
 14038 94d2 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) \000"
 14038      65515545 
 14038      55455F53 
 14038      454E445F 
 14038      46524F4D 
 14039              	.LASF510:
 14040 94fc 5F524545 		.ascii	"_REENT_ASCTIME_SIZE 26\000"
 14040      4E545F41 
 14040      53435449 
 14040      4D455F53 
 14040      495A4520 
 14041              	.LASF114:
 14042 9513 5F5F5549 		.ascii	"__UINT_FAST32_MAX__ 4294967295U\000"
 14042      4E545F46 
 14042      41535433 
 14042      325F4D41 
 14042      585F5F20 
 14043              	.LASF100:
 14044 9533 5F5F5549 		.ascii	"__UINT_LEAST8_MAX__ 255\000"
 14044      4E545F4C 
 14044      45415354 
 14044      385F4D41 
 14044      585F5F20 
 14045              	.LASF1197:
 14046 954b 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 14046      6B476574 
 14046      43757272 
 14046      656E7454 
 14046      61736B48 
 14047              	.LASF727:
 14048 9565 50545244 		.ascii	"PTRDIFF_MIN (-PTRDIFF_MAX - 1)\000"
 14048      4946465F 
 14048      4D494E20 
 14048      282D5054 
 14048      52444946 
 14049              	.LASF835:
 14050 9584 494E434C 		.ascii	"INCLUDE_xTaskGetIdleTaskHandle 0\000"
 14050      5544455F 
 14050      78546173 
 14050      6B476574 
 14050      49646C65 
 14051              	.LASF1055:
 14052 95a5 78497465 		.ascii	"xItemValue\000"
 14052      6D56616C 
 14052      756500
 14053              	.LASF137:
 14054 95b0 5F5F4442 		.ascii	"__DBL_MANT_DIG__ 53\000"
 14054      4C5F4D41 
 14054      4E545F44 
 14054      49475F5F 
 14054      20353300 
 14055              	.LASF1116:
 14056 95c4 70785443 		.ascii	"pxTCB\000"
 14056      4200
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 402


 14057              	.LASF212:
 14058 95ca 5F5F554C 		.ascii	"__ULFRACT_IBIT__ 0\000"
 14058      46524143 
 14058      545F4942 
 14058      49545F5F 
 14058      203000
 14059              	.LASF1099:
 14060 95dd 75785072 		.ascii	"uxPriority\000"
 14060      696F7269 
 14060      747900
 14061              	.LASF350:
 14062 95e8 5F5F4152 		.ascii	"__ARM_EABI__ 1\000"
 14062      4D5F4541 
 14062      42495F5F 
 14062      203100
 14063              	.LASF49:
 14064 95f7 5F5F494E 		.ascii	"__INT_LEAST64_TYPE__ long long int\000"
 14064      545F4C45 
 14064      41535436 
 14064      345F5459 
 14064      50455F5F 
 14065              	.LASF226:
 14066 961a 5F5F5341 		.ascii	"__SACCUM_FBIT__ 7\000"
 14066      4343554D 
 14066      5F464249 
 14066      545F5F20 
 14066      3700
 14067              	.LASF672:
 14068 962c 5F5F696E 		.ascii	"__int_least16_t_defined 1\000"
 14068      745F6C65 
 14068      61737431 
 14068      365F745F 
 14068      64656669 
 14069              	.LASF845:
 14070 9646 494E434C 		.ascii	"INCLUDE_xEventGroupSetBitFromISR 0\000"
 14070      5544455F 
 14070      78457665 
 14070      6E744772 
 14070      6F757053 
 14071              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 403


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:58     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:55     .bss.pxCurrentTCB:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:61     .bss.pxReadyTasksLists:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:64     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:67     .bss.xDelayedTaskList1:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:70     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:73     .bss.xDelayedTaskList2:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:76     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:79     .bss.pxDelayedTaskList:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:82     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:85     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:88     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:91     .bss.xPendingReadyList:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:94     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:97     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:100    .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:103    .bss.uxTasksDeleted:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:106    .bss.uxTasksDeleted:00000000 uxTasksDeleted
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:109    .bss.xSuspendedTaskList:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:112    .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:115    .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:118    .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:121    .bss.xTickCount:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:124    .bss.xTickCount:00000000 xTickCount
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:127    .bss.uxTopReadyPriority:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:130    .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:133    .bss.xSchedulerRunning:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:136    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:139    .bss.uxPendedTicks:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:142    .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:145    .bss.xYieldPending:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:148    .bss.xYieldPending:00000000 xYieldPending
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:151    .bss.xNumOfOverflows:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:154    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:157    .bss.uxTaskNumber:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:160    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:163    .data.xNextTaskUnblockTime:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:166    .data.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:169    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:172    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:175    .text.xTaskGenericCreate:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:180    .text.xTaskGenericCreate:00000000 xTaskGenericCreate
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3813   .text.prvAllocateTCBAndStack:00000000 prvAllocateTCBAndStack
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3436   .text.prvInitialiseTCBVariables:00000000 prvInitialiseTCBVariables
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3552   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:401    .text.xTaskGenericCreate:00000150 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:411    .text.vTaskDelete:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:416    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4250   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:553    .text.vTaskDelete:000000c8 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:565    .text.vTaskDelayUntil:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:570    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1733   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3733   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1772   .text.xTaskResumeAll:00000000 xTaskResumeAll
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 404


C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:726    .text.vTaskDelayUntil:000000d4 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:734    .text.vTaskDelay:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:739    .text.vTaskDelay:00000000 vTaskDelay
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:826    .text.vTaskDelay:00000074 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:834    .text.uxTaskPriorityGet:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:839    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:889    .text.uxTaskPriorityGet:00000030 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:894    .text.vTaskPrioritySet:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:899    .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1109   .text.vTaskPrioritySet:00000134 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1116   .text.vTaskSuspend:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1121   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2489   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1268   .text.vTaskSuspend:000000d4 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1279   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1283   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1367   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1373   .text.vTaskResume:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1378   .text.vTaskResume:00000000 vTaskResume
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1476   .text.vTaskResume:00000090 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1483   .text.xTaskResumeFromISR:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1488   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1600   .text.xTaskResumeFromISR:000000a8 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1609   .rodata:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1613   .text.vTaskStartScheduler:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1618   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1685   .text.vTaskStartScheduler:00000054 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3408   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1693   .text.vTaskEndScheduler:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1698   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1723   .text.vTaskEndScheduler:00000014 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1728   .text.vTaskSuspendAll:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1762   .text.vTaskSuspendAll:00000018 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1767   .text.xTaskResumeAll:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2236   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1934   .text.xTaskResumeAll:000000ec $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1946   .text.xTaskGetTickCount:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1951   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1986   .text.xTaskGetTickCount:00000020 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1991   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:1996   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2035   .text.xTaskGetTickCountFromISR:00000028 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2040   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2045   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2072   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2077   .text.uxTaskGetSystemState:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2082   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3897   .text.prvListTaskWithinSingleList:00000000 prvListTaskWithinSingleList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2221   .text.uxTaskGetSystemState:000000e0 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2231   .text.xTaskIncrementTick:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2469   .text.xTaskIncrementTick:00000154 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2484   .text.vTaskSwitchContext:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2602   .text.vTaskSwitchContext:0000008c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2611   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2616   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2704   .text.vTaskPlaceOnEventList:0000007c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2712   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 405


C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2717   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2823   .text.vTaskPlaceOnUnorderedEventList:00000098 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2832   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2837   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2948   .text.xTaskRemoveFromEventList:000000a0 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2958   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:2963   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3074   .text.xTaskRemoveFromUnorderedEventList:000000a0 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3083   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3088   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3132   .text.vTaskSetTimeOutState:0000002c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3138   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3143   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3260   .text.xTaskCheckForTimeOut:00000098 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3266   .text.vTaskMissedYield:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3271   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3298   .text.vTaskMissedYield:00000014 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3303   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3308   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3357   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3362   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3404   .text.prvIdleTask:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3639   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3432   .text.prvInitialiseTCBVariables:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3548   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3623   .text.prvInitialiseTaskLists:0000005c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3635   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4212   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3722   .text.prvCheckTasksWaitingTermination:00000068 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3729   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3800   .text.prvAddCurrentTaskToDelayedList:00000058 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3809   .text.prvAllocateTCBAndStack:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:3893   .text.prvListTaskWithinSingleList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4090   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4086   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4147   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4152   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4203   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4208   .text.prvDeleteTCB:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4246   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4311   .text.prvResetNextTaskUnblockTime:00000040 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4317   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4322   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4356   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4361   .text.vTaskPriorityInherit:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4366   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4514   .text.vTaskPriorityInherit:000000e4 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4521   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4526   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4664   .text.xTaskPriorityDisinherit:000000d4 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4670   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4675   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4718   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4723   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4728   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s:4767   .text.pvTaskIncrementMutexHeldCount:00000024 $d
                     .debug_frame:00000010 $d
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccJcV6ch.s 			page 406


                           .group:00000000 wm4.0.1834ce015d70b8127b1e5f7bc96e3d8e
                           .group:00000000 wm4.newlib.h.8.f2807fe490bc07755df529420a1a6ce0
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.fbe724f4232069283dea9c3aea4135c7
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8
                           .group:00000000 wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066
                           .group:00000000 wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946
                           .group:00000000 wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e
                           .group:00000000 wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370
                           .group:00000000 wm4.task.h.84.e110bc08aaffa67ce542955b890201b4
                           .group:00000000 wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d
                           .group:00000000 wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95

UNDEFINED SYMBOLS
ulPortSetInterruptMask
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
vPortValidateInterruptPriority
vPortClearInterruptMask
xPortStartScheduler
vPortEndScheduler
vApplicationTickHook
vListInsert
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
