ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"tasks.c"
  14              	@ GNU C89 (GNU Tools for ARM Embedded Processors) version 5.4.1 20160919 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I config -I system -I core -I drivers -I FreeRTOS
  18              	@ -I FreeRTOS/include -I FreeRTOS/portable/GCC/ARM_CM3 -I FreeRTOS/portable
  19              	@ -I tasks/rc_task_leds -I modules/rc_leds -I drivers/rc_system
  20              	@ -I drivers/rc_gpio -I drivers/rc_uart -I drivers/rc_pinsel
  21              	@ -I drivers/rc_timer -I drivers/rc_adc -imultilib armv7-m
  22              	@ -iprefix c:\program files (x86)\gnu tools arm embedded\5.4 2016q3\bin\../lib/gcc/arm-none-eabi/5.
  23              	@ -isysroot c:\program files (x86)\gnu tools arm embedded\5.4 2016q3\bin\../arm-none-eabi
  24              	@ -MD out/tasks.d -MF out/tasks.d -MP -MQ out/tasks.o -D__USES_INITFINI__
  25              	@ FreeRTOS/tasks.c -mcpu=cortex-m3 -mthumb -auxbase-strip out/tasks.o -g
  26              	@ -ggdb3 -O0 -Wall -Wstrict-prototypes -Wextra -std=gnu90
  27              	@ -ffunction-sections -fdata-sections -fverbose-asm
  28              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  29              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  30              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  31              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  32              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  33              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  34              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  35              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  36              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  37              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  38              	@ -fleading-underscore -flifetime-dse -flto-odr-type-merging -fmath-errno
  39              	@ -fmerge-debug-strings -fpeephole -fprefetch-loop-arrays
  40              	@ -freg-struct-return -fsched-critical-path-heuristic
  41              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  42              	@ -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  43              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  44              	@ -fsemantic-interposition -fshow-column -fsigned-zeros
  45              	@ -fsplit-ivs-in-unroller -fstdarg-opt -fstrict-volatile-bitfields
  46              	@ -fsync-libcalls -ftrapping-math -ftree-coalesce-vars -ftree-cselim
  47              	@ -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  48              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  49              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  50              	@ -fzero-initialized-in-bss -masm-syntax-unified -mfix-cortex-m3-ldrd
  51              	@ -mlittle-endian -mpic-data-is-text-relative -msched-prolog -mthumb
  52              	@ -munaligned-access -mvectorize-with-neon-quad
  53              	
  54              		.text
  55              	.Ltext0:
  56              		.cfi_sections	.debug_frame
  57              		.global	pxCurrentTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 2


  58              		.section	.bss.pxCurrentTCB,"aw",%nobits
  59              		.align	2
  60              		.type	pxCurrentTCB, %object
  61              		.size	pxCurrentTCB, 4
  62              	pxCurrentTCB:
  63 0000 00000000 		.space	4
  64              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  65              		.align	2
  66              		.type	pxReadyTasksLists, %object
  67              		.size	pxReadyTasksLists, 160
  68              	pxReadyTasksLists:
  69 0000 00000000 		.space	160
  69      00000000 
  69      00000000 
  69      00000000 
  69      00000000 
  70              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  71              		.align	2
  72              		.type	xDelayedTaskList1, %object
  73              		.size	xDelayedTaskList1, 20
  74              	xDelayedTaskList1:
  75 0000 00000000 		.space	20
  75      00000000 
  75      00000000 
  75      00000000 
  75      00000000 
  76              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  77              		.align	2
  78              		.type	xDelayedTaskList2, %object
  79              		.size	xDelayedTaskList2, 20
  80              	xDelayedTaskList2:
  81 0000 00000000 		.space	20
  81      00000000 
  81      00000000 
  81      00000000 
  81      00000000 
  82              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  83              		.align	2
  84              		.type	pxDelayedTaskList, %object
  85              		.size	pxDelayedTaskList, 4
  86              	pxDelayedTaskList:
  87 0000 00000000 		.space	4
  88              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  89              		.align	2
  90              		.type	pxOverflowDelayedTaskList, %object
  91              		.size	pxOverflowDelayedTaskList, 4
  92              	pxOverflowDelayedTaskList:
  93 0000 00000000 		.space	4
  94              		.section	.bss.xPendingReadyList,"aw",%nobits
  95              		.align	2
  96              		.type	xPendingReadyList, %object
  97              		.size	xPendingReadyList, 20
  98              	xPendingReadyList:
  99 0000 00000000 		.space	20
  99      00000000 
  99      00000000 
  99      00000000 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 3


  99      00000000 
 100              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 101              		.align	2
 102              		.type	xTasksWaitingTermination, %object
 103              		.size	xTasksWaitingTermination, 20
 104              	xTasksWaitingTermination:
 105 0000 00000000 		.space	20
 105      00000000 
 105      00000000 
 105      00000000 
 105      00000000 
 106              		.section	.bss.uxTasksDeleted,"aw",%nobits
 107              		.align	2
 108              		.type	uxTasksDeleted, %object
 109              		.size	uxTasksDeleted, 4
 110              	uxTasksDeleted:
 111 0000 00000000 		.space	4
 112              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 113              		.align	2
 114              		.type	xSuspendedTaskList, %object
 115              		.size	xSuspendedTaskList, 20
 116              	xSuspendedTaskList:
 117 0000 00000000 		.space	20
 117      00000000 
 117      00000000 
 117      00000000 
 117      00000000 
 118              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 119              		.align	2
 120              		.type	uxCurrentNumberOfTasks, %object
 121              		.size	uxCurrentNumberOfTasks, 4
 122              	uxCurrentNumberOfTasks:
 123 0000 00000000 		.space	4
 124              		.section	.bss.xTickCount,"aw",%nobits
 125              		.align	2
 126              		.type	xTickCount, %object
 127              		.size	xTickCount, 4
 128              	xTickCount:
 129 0000 00000000 		.space	4
 130              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 131              		.align	2
 132              		.type	uxTopReadyPriority, %object
 133              		.size	uxTopReadyPriority, 4
 134              	uxTopReadyPriority:
 135 0000 00000000 		.space	4
 136              		.section	.bss.xSchedulerRunning,"aw",%nobits
 137              		.align	2
 138              		.type	xSchedulerRunning, %object
 139              		.size	xSchedulerRunning, 4
 140              	xSchedulerRunning:
 141 0000 00000000 		.space	4
 142              		.section	.bss.uxPendedTicks,"aw",%nobits
 143              		.align	2
 144              		.type	uxPendedTicks, %object
 145              		.size	uxPendedTicks, 4
 146              	uxPendedTicks:
 147 0000 00000000 		.space	4
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 4


 148              		.section	.bss.xYieldPending,"aw",%nobits
 149              		.align	2
 150              		.type	xYieldPending, %object
 151              		.size	xYieldPending, 4
 152              	xYieldPending:
 153 0000 00000000 		.space	4
 154              		.section	.bss.xNumOfOverflows,"aw",%nobits
 155              		.align	2
 156              		.type	xNumOfOverflows, %object
 157              		.size	xNumOfOverflows, 4
 158              	xNumOfOverflows:
 159 0000 00000000 		.space	4
 160              		.section	.bss.uxTaskNumber,"aw",%nobits
 161              		.align	2
 162              		.type	uxTaskNumber, %object
 163              		.size	uxTaskNumber, 4
 164              	uxTaskNumber:
 165 0000 00000000 		.space	4
 166              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 167              		.align	2
 168              		.type	xNextTaskUnblockTime, %object
 169              		.size	xNextTaskUnblockTime, 4
 170              	xNextTaskUnblockTime:
 171 0000 FFFFFFFF 		.word	-1
 172              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 173              		.align	2
 174              		.type	uxSchedulerSuspended, %object
 175              		.size	uxSchedulerSuspended, 4
 176              	uxSchedulerSuspended:
 177 0000 00000000 		.space	4
 178              		.section	.text.xTaskGenericCreate,"ax",%progbits
 179              		.align	2
 180              		.global	xTaskGenericCreate
 181              		.thumb
 182              		.thumb_func
 183              		.type	xTaskGenericCreate, %function
 184              	xTaskGenericCreate:
 185              	.LFB1:
 186              		.file 1 "FreeRTOS/tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/tasks.c ****     All rights reserved
   4:FreeRTOS/tasks.c **** 
   5:FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/tasks.c **** 
   7:FreeRTOS/tasks.c ****     ***************************************************************************
   8:FreeRTOS/tasks.c ****      *                                                                       *
   9:FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/tasks.c ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/tasks.c ****      *                                                                       *
  13:FreeRTOS/tasks.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/tasks.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/tasks.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/tasks.c ****      *                                                                       *
  17:FreeRTOS/tasks.c ****      *    Thank you!                                                         *
  18:FreeRTOS/tasks.c ****      *                                                                       *
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 5


  19:FreeRTOS/tasks.c ****     ***************************************************************************
  20:FreeRTOS/tasks.c **** 
  21:FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/tasks.c **** 
  23:FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/tasks.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/tasks.c **** 
  27:FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/tasks.c **** 
  32:FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/tasks.c **** 
  37:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  38:FreeRTOS/tasks.c **** 
  39:FreeRTOS/tasks.c ****     ***************************************************************************
  40:FreeRTOS/tasks.c ****      *                                                                       *
  41:FreeRTOS/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/tasks.c ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/tasks.c ****      *                                                                       *
  44:FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/tasks.c ****      *                                                                       *
  46:FreeRTOS/tasks.c ****     ***************************************************************************
  47:FreeRTOS/tasks.c **** 
  48:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/tasks.c ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/tasks.c **** 
  51:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/tasks.c **** 
  55:FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/tasks.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  62:FreeRTOS/tasks.c **** 
  63:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  64:FreeRTOS/tasks.c **** */
  65:FreeRTOS/tasks.c **** 
  66:FreeRTOS/tasks.c **** /* Standard includes. */
  67:FreeRTOS/tasks.c **** #include <stdlib.h>
  68:FreeRTOS/tasks.c **** #include <string.h>
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  71:FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  72:FreeRTOS/tasks.c **** task.h is included from an application file. */
  73:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  74:FreeRTOS/tasks.c **** 
  75:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 6


  76:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  77:FreeRTOS/tasks.c **** #include "task.h"
  78:FreeRTOS/tasks.c **** #include "timers.h"
  79:FreeRTOS/tasks.c **** #include "StackMacros.h"
  80:FreeRTOS/tasks.c **** 
  81:FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  82:FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  83:FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  84:FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  85:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  86:FreeRTOS/tasks.c **** 
  87:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  88:FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  89:FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  90:FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  91:FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  92:FreeRTOS/tasks.c **** 	#include <stdio.h>
  93:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  94:FreeRTOS/tasks.c **** 
  95:FreeRTOS/tasks.c **** /* Sanity check the configuration. */
  96:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
  97:FreeRTOS/tasks.c **** 	#if INCLUDE_vTaskSuspend != 1
  98:FreeRTOS/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
  99:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 100:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 101:FreeRTOS/tasks.c **** 
 102:FreeRTOS/tasks.c **** /*
 103:FreeRTOS/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 104:FreeRTOS/tasks.c ****  */
 105:FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 106:FreeRTOS/tasks.c **** 
 107:FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 108:FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 109:FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 110:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 111:FreeRTOS/tasks.c **** #else
 112:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 113:FreeRTOS/tasks.c **** #endif
 114:FreeRTOS/tasks.c **** 
 115:FreeRTOS/tasks.c **** /*
 116:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 117:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 118:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 119:FreeRTOS/tasks.c ****  */
 120:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 121:FreeRTOS/tasks.c **** {
 122:FreeRTOS/tasks.c **** 	volatile StackT_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the tasks s
 123:FreeRTOS/tasks.c **** 
 124:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 125:FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 126:FreeRTOS/tasks.c **** 	#endif
 127:FreeRTOS/tasks.c **** 
 128:FreeRTOS/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 129:FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 130:FreeRTOS/tasks.c **** 	UBaseT_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 131:FreeRTOS/tasks.c **** 	StackT_t			*pxStack;			/*< Points to the start of the stack. */
 132:FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 7


 133:FreeRTOS/tasks.c **** 
 134:FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 135:FreeRTOS/tasks.c **** 		StackT_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack gro
 136:FreeRTOS/tasks.c **** 	#endif
 137:FreeRTOS/tasks.c **** 
 138:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 139:FreeRTOS/tasks.c **** 		UBaseT_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do not 
 140:FreeRTOS/tasks.c **** 	#endif
 141:FreeRTOS/tasks.c **** 
 142:FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 143:FreeRTOS/tasks.c **** 		UBaseT_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It allow
 144:FreeRTOS/tasks.c **** 		UBaseT_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. */
 145:FreeRTOS/tasks.c **** 	#endif
 146:FreeRTOS/tasks.c **** 
 147:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 148:FreeRTOS/tasks.c **** 		UBaseT_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority inhe
 149:FreeRTOS/tasks.c **** 		UBaseT_t 	uxMutexesHeld;
 150:FreeRTOS/tasks.c **** 	#endif
 151:FreeRTOS/tasks.c **** 
 152:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 153:FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 154:FreeRTOS/tasks.c **** 	#endif
 155:FreeRTOS/tasks.c **** 
 156:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 157:FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 158:FreeRTOS/tasks.c **** 	#endif
 159:FreeRTOS/tasks.c **** 
 160:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 161:FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 162:FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 163:FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 164:FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 165:FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 166:FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 167:FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 168:FreeRTOS/tasks.c **** 		struct 	_reent xNewLib_reent;
 169:FreeRTOS/tasks.c **** 	#endif
 170:FreeRTOS/tasks.c **** 
 171:FreeRTOS/tasks.c **** } tskTCB;
 172:FreeRTOS/tasks.c **** 
 173:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 174:FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 175:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 176:FreeRTOS/tasks.c **** 
 177:FreeRTOS/tasks.c **** /*
 178:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 179:FreeRTOS/tasks.c ****  * be global, rather than file scope.
 180:FreeRTOS/tasks.c ****  */
 181:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 182:FreeRTOS/tasks.c **** 	#define static
 183:FreeRTOS/tasks.c **** #endif
 184:FreeRTOS/tasks.c **** 
 185:FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 186:FreeRTOS/tasks.c **** static variables must be declared volatile. */
 187:FreeRTOS/tasks.c **** 
 188:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 189:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 8


 190:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 191:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 192:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 193:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 194:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 195:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 196:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 197:FreeRTOS/tasks.c **** 
 198:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 199:FreeRTOS/tasks.c **** 
 200:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 201:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseT_t uxTasksDeleted = ( UBaseT_t ) 0U;
 202:FreeRTOS/tasks.c **** 
 203:FreeRTOS/tasks.c **** #endif
 204:FreeRTOS/tasks.c **** 
 205:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 206:FreeRTOS/tasks.c **** 
 207:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 208:FreeRTOS/tasks.c **** 
 209:FreeRTOS/tasks.c **** #endif
 210:FreeRTOS/tasks.c **** 
 211:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 212:FreeRTOS/tasks.c **** 
 213:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 214:FreeRTOS/tasks.c **** 
 215:FreeRTOS/tasks.c **** #endif
 216:FreeRTOS/tasks.c **** 
 217:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 218:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxCurrentNumberOfTasks 	= ( UBaseT_t ) 0U;
 219:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xTickCount 				= ( TickT_t ) 0U;
 220:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 221:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xSchedulerRunning 		= pdFALSE;
 222:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxPendedTicks 			= ( UBaseT_t ) 0U;
 223:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xYieldPending 			= pdFALSE;
 224:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xNumOfOverflows 			= ( BaseT_t ) 0;
 225:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseT_t uxTaskNumber 					= ( UBaseT_t ) 0U;
 226:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xNextTaskUnblockTime		= portMAX_DELAY;
 227:FreeRTOS/tasks.c **** 
 228:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 229:FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 230:FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 231:FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 232:FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 233:FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 234:FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 235:FreeRTOS/tasks.c **** accessed from a critical section. */
 236:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxSchedulerSuspended	= ( UBaseT_t ) pdFALSE;
 237:FreeRTOS/tasks.c **** 
 238:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 239:FreeRTOS/tasks.c **** 
 240:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 241:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 242:FreeRTOS/tasks.c **** 
 243:FreeRTOS/tasks.c **** #endif
 244:FreeRTOS/tasks.c **** 
 245:FreeRTOS/tasks.c **** /*lint +e956 */
 246:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 9


 247:FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 248:FreeRTOS/tasks.c **** 
 249:FreeRTOS/tasks.c **** /*
 250:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 251:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 252:FreeRTOS/tasks.c ****  */
 253:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 254:FreeRTOS/tasks.c **** 
 255:FreeRTOS/tasks.c **** /*
 256:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 257:FreeRTOS/tasks.c ****  */
 258:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 259:FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 260:FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 261:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 262:FreeRTOS/tasks.c **** 
 263:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 264:FreeRTOS/tasks.c **** 
 265:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 266:FreeRTOS/tasks.c **** 
 267:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 268:FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 269:FreeRTOS/tasks.c **** 	microcontroller architecture. */
 270:FreeRTOS/tasks.c **** 
 271:FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 272:FreeRTOS/tasks.c **** 	state task. */
 273:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 274:FreeRTOS/tasks.c **** 	{																									\
 275:FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 276:FreeRTOS/tasks.c **** 		{																								\
 277:FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 278:FreeRTOS/tasks.c **** 		}																								\
 279:FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 280:FreeRTOS/tasks.c **** 
 281:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 282:FreeRTOS/tasks.c **** 
 283:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 284:FreeRTOS/tasks.c **** 	{																									\
 285:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 286:FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 287:FreeRTOS/tasks.c **** 		{																								\
 288:FreeRTOS/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 289:FreeRTOS/tasks.c **** 			--uxTopReadyPriority;																		\
 290:FreeRTOS/tasks.c **** 		}																								\
 291:FreeRTOS/tasks.c **** 																										\
 292:FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 293:FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 294:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 295:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 296:FreeRTOS/tasks.c **** 
 297:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 298:FreeRTOS/tasks.c **** 
 299:FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 300:FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 301:FreeRTOS/tasks.c **** 	being used. */
 302:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 303:FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 10


 304:FreeRTOS/tasks.c **** 
 305:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 306:FreeRTOS/tasks.c **** 
 307:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 308:FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 309:FreeRTOS/tasks.c **** 	architecture being used. */
 310:FreeRTOS/tasks.c **** 
 311:FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 312:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 313:FreeRTOS/tasks.c **** 
 314:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 315:FreeRTOS/tasks.c **** 
 316:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 317:FreeRTOS/tasks.c **** 	{																								\
 318:FreeRTOS/tasks.c **** 	UBaseT_t uxTopPriority;																		\
 319:FreeRTOS/tasks.c **** 																									\
 320:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 321:FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 322:FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 323:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 324:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 325:FreeRTOS/tasks.c **** 
 326:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 327:FreeRTOS/tasks.c **** 
 328:FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 329:FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 330:FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 331:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 332:FreeRTOS/tasks.c **** 	{																									\
 333:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseT_t ) 0 )	\
 334:FreeRTOS/tasks.c **** 		{																								\
 335:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 336:FreeRTOS/tasks.c **** 		}																								\
 337:FreeRTOS/tasks.c **** 	}
 338:FreeRTOS/tasks.c **** 
 339:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 340:FreeRTOS/tasks.c **** 
 341:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 342:FreeRTOS/tasks.c **** 
 343:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 344:FreeRTOS/tasks.c **** count overflows. */
 345:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 346:FreeRTOS/tasks.c **** {																									\
 347:FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 348:FreeRTOS/tasks.c **** 																									\
 349:FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 350:FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 351:FreeRTOS/tasks.c **** 																									\
 352:FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 353:FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 354:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 355:FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 356:FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 357:FreeRTOS/tasks.c **** }
 358:FreeRTOS/tasks.c **** 
 359:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 360:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 11


 361:FreeRTOS/tasks.c **** /*
 362:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 363:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 364:FreeRTOS/tasks.c ****  */
 365:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 366:FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )															\
 367:FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 368:FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 369:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 370:FreeRTOS/tasks.c **** 
 371:FreeRTOS/tasks.c **** /*
 372:FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 373:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 374:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 375:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 376:FreeRTOS/tasks.c ****  */
 377:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 378:FreeRTOS/tasks.c **** 
 379:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 380:FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 381:FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 382:FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 383:FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 384:FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 385:FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 386:FreeRTOS/tasks.c **** to its original value when it is released. */
 387:FreeRTOS/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 388:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 389:FreeRTOS/tasks.c **** #else
 390:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 391:FreeRTOS/tasks.c **** #endif
 392:FreeRTOS/tasks.c **** 
 393:FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 394:FreeRTOS/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 395:FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 396:FreeRTOS/tasks.c **** #endif
 397:FreeRTOS/tasks.c **** 
 398:FreeRTOS/tasks.c **** #if configUSE_TICK_HOOK > 0
 399:FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 400:FreeRTOS/tasks.c **** #endif
 401:FreeRTOS/tasks.c **** 
 402:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 403:FreeRTOS/tasks.c **** 
 404:FreeRTOS/tasks.c **** /*
 405:FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 406:FreeRTOS/tasks.c ****  * into the TCB structure.
 407:FreeRTOS/tasks.c ****  */
 408:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
 409:FreeRTOS/tasks.c **** 
 410:FreeRTOS/tasks.c **** /**
 411:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 412:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 413:FreeRTOS/tasks.c ****  * is in any other state.
 414:FreeRTOS/tasks.c ****  */
 415:FreeRTOS/tasks.c **** static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 416:FreeRTOS/tasks.c **** 
 417:FreeRTOS/tasks.c **** /*
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 12


 418:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 419:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 420:FreeRTOS/tasks.c ****  */
 421:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 422:FreeRTOS/tasks.c **** 
 423:FreeRTOS/tasks.c **** /*
 424:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 425:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 426:FreeRTOS/tasks.c ****  * creation of the first user task.
 427:FreeRTOS/tasks.c ****  *
 428:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 429:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 430:FreeRTOS/tasks.c ****  *
 431:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 432:FreeRTOS/tasks.c ****  *
 433:FreeRTOS/tasks.c ****  */
 434:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 435:FreeRTOS/tasks.c **** 
 436:FreeRTOS/tasks.c **** /*
 437:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 438:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 439:FreeRTOS/tasks.c ****  *
 440:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 441:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 442:FreeRTOS/tasks.c ****  */
 443:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 444:FreeRTOS/tasks.c **** 
 445:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 446:FreeRTOS/tasks.c **** 
 447:FreeRTOS/tasks.c **** #endif
 448:FreeRTOS/tasks.c **** 
 449:FreeRTOS/tasks.c **** /*
 450:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 451:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 452:FreeRTOS/tasks.c ****  * and its TCB deleted.
 453:FreeRTOS/tasks.c ****  */
 454:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 455:FreeRTOS/tasks.c **** 
 456:FreeRTOS/tasks.c **** /*
 457:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 458:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 459:FreeRTOS/tasks.c ****  */
 460:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake ) PRIVILEGED_FUNCTION;
 461:FreeRTOS/tasks.c **** 
 462:FreeRTOS/tasks.c **** /*
 463:FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 464:FreeRTOS/tasks.c ****  * allocation was successful.
 465:FreeRTOS/tasks.c ****  */
 466:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
 467:FreeRTOS/tasks.c **** 
 468:FreeRTOS/tasks.c **** /*
 469:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 470:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 471:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 472:FreeRTOS/tasks.c ****  *
 473:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 474:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 13


 475:FreeRTOS/tasks.c ****  */
 476:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 477:FreeRTOS/tasks.c **** 
 478:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
 479:FreeRTOS/tasks.c **** 
 480:FreeRTOS/tasks.c **** #endif
 481:FreeRTOS/tasks.c **** 
 482:FreeRTOS/tasks.c **** /*
 483:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 484:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 485:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 486:FreeRTOS/tasks.c ****  */
 487:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 488:FreeRTOS/tasks.c **** 
 489:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 490:FreeRTOS/tasks.c **** 
 491:FreeRTOS/tasks.c **** #endif
 492:FreeRTOS/tasks.c **** 
 493:FreeRTOS/tasks.c **** /*
 494:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 495:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 496:FreeRTOS/tasks.c ****  *
 497:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 498:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 499:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 500:FreeRTOS/tasks.c ****  * set to a value other than 1.
 501:FreeRTOS/tasks.c ****  */
 502:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 503:FreeRTOS/tasks.c **** 
 504:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 505:FreeRTOS/tasks.c **** 
 506:FreeRTOS/tasks.c **** #endif
 507:FreeRTOS/tasks.c **** 
 508:FreeRTOS/tasks.c **** /*
 509:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 510:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 511:FreeRTOS/tasks.c ****  */
 512:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 513:FreeRTOS/tasks.c **** 
 514:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 515:FreeRTOS/tasks.c **** 
 516:FreeRTOS/tasks.c **** BaseT_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t us
 517:FreeRTOS/tasks.c **** {
 187              		.loc 1 517 0
 188              		.cfi_startproc
 189              		@ args = 16, pretend = 0, frame = 32
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}	@
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 8AB0     		sub	sp, sp, #40	@,,
 196              		.cfi_def_cfa_offset 48
 197 0004 02AF     		add	r7, sp, #8	@,,
 198              		.cfi_def_cfa 7, 40
 199 0006 F860     		str	r0, [r7, #12]	@ pxTaskCode, pxTaskCode
 200 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 14


 201 000a 3B60     		str	r3, [r7]	@ pvParameters, pvParameters
 202 000c 1346     		mov	r3, r2	@ movhi	@ tmp142, tmp141
 203 000e FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp142, usStackDepth
 518:FreeRTOS/tasks.c **** BaseT_t xReturn;
 519:FreeRTOS/tasks.c **** TCB_t * pxNewTCB;
 520:FreeRTOS/tasks.c **** 
 521:FreeRTOS/tasks.c **** 	configASSERT( pxTaskCode );
 204              		.loc 1 521 0
 205 0010 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTaskCode
 206 0012 002B     		cmp	r3, #0	@ tmp143,
 207 0014 02D1     		bne	.L2	@,
 208              		.loc 1 521 0 is_stmt 0 discriminator 1
 209 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 210              	.L3:
 211 001a FEE7     		b	.L3	@
 212              	.L2:
 522:FreeRTOS/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 213              		.loc 1 522 0 is_stmt 1
 214 001c BB6A     		ldr	r3, [r7, #40]	@ tmp144, uxPriority
 215 001e 072B     		cmp	r3, #7	@ tmp144,
 216 0020 02D9     		bls	.L4	@,
 217              		.loc 1 522 0 is_stmt 0 discriminator 1
 218 0022 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 219              	.L5:
 220              		.loc 1 522 0 discriminator 2
 221 0026 FEE7     		b	.L5	@
 222              	.L4:
 523:FreeRTOS/tasks.c **** 
 524:FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 525:FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 526:FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 223              		.loc 1 526 0 is_stmt 1
 224 0028 FB88     		ldrh	r3, [r7, #6]	@ tmp145, usStackDepth
 225 002a 396B     		ldr	r1, [r7, #48]	@, puxStackBuffer
 226 002c 1846     		mov	r0, r3	@, tmp145
 227 002e FFF7FEFF 		bl	prvAllocateTCBAndStack	@
 228 0032 B861     		str	r0, [r7, #24]	@, pxNewTCB
 527:FreeRTOS/tasks.c **** 
 528:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 229              		.loc 1 528 0
 230 0034 BB69     		ldr	r3, [r7, #24]	@ tmp146, pxNewTCB
 231 0036 002B     		cmp	r3, #0	@ tmp146,
 232 0038 71D0     		beq	.L6	@,
 233              	.LBB6:
 529:FreeRTOS/tasks.c **** 	{
 530:FreeRTOS/tasks.c **** 		StackT_t *pxTopOfStack;
 531:FreeRTOS/tasks.c **** 
 532:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 533:FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 534:FreeRTOS/tasks.c **** 			BaseT_t xRunPrivileged;
 535:FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 536:FreeRTOS/tasks.c **** 			{
 537:FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 538:FreeRTOS/tasks.c **** 			}
 539:FreeRTOS/tasks.c **** 			else
 540:FreeRTOS/tasks.c **** 			{
 541:FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 15


 542:FreeRTOS/tasks.c **** 			}
 543:FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 544:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 545:FreeRTOS/tasks.c **** 
 546:FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 547:FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 548:FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 549:FreeRTOS/tasks.c **** 		required by the port. */
 550:FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 551:FreeRTOS/tasks.c **** 		{
 552:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 234              		.loc 1 552 0
 235 003a BB69     		ldr	r3, [r7, #24]	@ tmp147, pxNewTCB
 236 003c 1A6B     		ldr	r2, [r3, #48]	@ D.6558, pxNewTCB_12->pxStack
 237 003e FB88     		ldrh	r3, [r7, #6]	@ D.6559, usStackDepth
 238 0040 03F18043 		add	r3, r3, #1073741824	@ D.6559, D.6559,
 239 0044 013B     		subs	r3, r3, #1	@ D.6559, D.6559,
 240 0046 9B00     		lsls	r3, r3, #2	@ D.6559, D.6559,
 241 0048 1344     		add	r3, r3, r2	@ tmp148, D.6558
 242 004a 7B61     		str	r3, [r7, #20]	@ tmp148, pxTopOfStack
 553:FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackT_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZ
 243              		.loc 1 553 0
 244 004c 7B69     		ldr	r3, [r7, #20]	@ D.6560, pxTopOfStack
 245 004e 23F00703 		bic	r3, r3, #7	@ D.6560, D.6560,
 246 0052 7B61     		str	r3, [r7, #20]	@ D.6560, pxTopOfStack
 554:FreeRTOS/tasks.c **** 
 555:FreeRTOS/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 556:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 247              		.loc 1 556 0
 248 0054 7B69     		ldr	r3, [r7, #20]	@ D.6560, pxTopOfStack
 249 0056 03F00703 		and	r3, r3, #7	@ D.6560, D.6560,
 250 005a 002B     		cmp	r3, #0	@ D.6560,
 251 005c 02D0     		beq	.L7	@,
 252              		.loc 1 556 0 is_stmt 0 discriminator 1
 253 005e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 254              	.L8:
 255              		.loc 1 556 0 discriminator 3
 256 0062 FEE7     		b	.L8	@
 257              	.L7:
 557:FreeRTOS/tasks.c **** 		}
 558:FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 559:FreeRTOS/tasks.c **** 		{
 560:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 561:FreeRTOS/tasks.c **** 
 562:FreeRTOS/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 563:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 564:FreeRTOS/tasks.c **** 
 565:FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 566:FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 567:FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 568:FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 569:FreeRTOS/tasks.c **** 		}
 570:FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 571:FreeRTOS/tasks.c **** 
 572:FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 573:FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 258              		.loc 1 573 0 is_stmt 1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 16


 259 0064 FB88     		ldrh	r3, [r7, #6]	@ tmp149, usStackDepth
 260 0066 0093     		str	r3, [sp]	@ tmp149,
 261 0068 7B6B     		ldr	r3, [r7, #52]	@, xRegions
 262 006a BA6A     		ldr	r2, [r7, #40]	@, uxPriority
 263 006c B968     		ldr	r1, [r7, #8]	@, pcName
 264 006e B869     		ldr	r0, [r7, #24]	@, pxNewTCB
 265 0070 FFF7FEFF 		bl	prvInitialiseTCBVariables	@
 574:FreeRTOS/tasks.c **** 
 575:FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 576:FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 577:FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 578:FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 579:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 580:FreeRTOS/tasks.c **** 		{
 581:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 582:FreeRTOS/tasks.c **** 		}
 583:FreeRTOS/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 584:FreeRTOS/tasks.c **** 		{
 585:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 266              		.loc 1 585 0
 267 0074 3A68     		ldr	r2, [r7]	@, pvParameters
 268 0076 F968     		ldr	r1, [r7, #12]	@, pxTaskCode
 269 0078 7869     		ldr	r0, [r7, #20]	@, pxTopOfStack
 270 007a FFF7FEFF 		bl	pxPortInitialiseStack	@
 271 007e 0246     		mov	r2, r0	@ D.6558,
 272 0080 BB69     		ldr	r3, [r7, #24]	@ tmp150, pxNewTCB
 273 0082 1A60     		str	r2, [r3]	@ D.6558, pxNewTCB_12->pxTopOfStack
 586:FreeRTOS/tasks.c **** 		}
 587:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 588:FreeRTOS/tasks.c **** 
 589:FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 274              		.loc 1 589 0
 275 0084 FB6A     		ldr	r3, [r7, #44]	@ tmp151, pxCreatedTask
 276 0086 002B     		cmp	r3, #0	@ tmp151,
 277 0088 02D0     		beq	.L9	@,
 590:FreeRTOS/tasks.c **** 		{
 591:FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 592:FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 593:FreeRTOS/tasks.c **** 			required.*/
 594:FreeRTOS/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 278              		.loc 1 594 0
 279 008a FB6A     		ldr	r3, [r7, #44]	@ tmp152, pxCreatedTask
 280 008c BA69     		ldr	r2, [r7, #24]	@ tmp153, pxNewTCB
 281 008e 1A60     		str	r2, [r3]	@ tmp153, *pxCreatedTask_30(D)
 282              	.L9:
 595:FreeRTOS/tasks.c **** 		}
 596:FreeRTOS/tasks.c **** 		else
 597:FreeRTOS/tasks.c **** 		{
 598:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 599:FreeRTOS/tasks.c **** 		}
 600:FreeRTOS/tasks.c **** 
 601:FreeRTOS/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 602:FreeRTOS/tasks.c **** 		updated. */
 603:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 283              		.loc 1 603 0
 284 0090 FFF7FEFF 		bl	vPortEnterCritical	@
 604:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 17


 605:FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 285              		.loc 1 605 0
 286 0094 2D4B     		ldr	r3, .L15	@ tmp154,
 287 0096 1B68     		ldr	r3, [r3]	@ D.6560, uxCurrentNumberOfTasks
 288 0098 0133     		adds	r3, r3, #1	@ D.6560, D.6560,
 289 009a 2C4A     		ldr	r2, .L15	@ tmp155,
 290 009c 1360     		str	r3, [r2]	@ D.6560, uxCurrentNumberOfTasks
 606:FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 291              		.loc 1 606 0
 292 009e 2C4B     		ldr	r3, .L15+4	@ tmp156,
 293 00a0 1B68     		ldr	r3, [r3]	@ D.6561, pxCurrentTCB
 294 00a2 002B     		cmp	r3, #0	@ D.6561,
 295 00a4 09D1     		bne	.L10	@,
 607:FreeRTOS/tasks.c **** 			{
 608:FreeRTOS/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 609:FreeRTOS/tasks.c **** 				the suspended state - make this the current task. */
 610:FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 296              		.loc 1 610 0
 297 00a6 2A4A     		ldr	r2, .L15+4	@ tmp157,
 298 00a8 BB69     		ldr	r3, [r7, #24]	@ tmp158, pxNewTCB
 299 00aa 1360     		str	r3, [r2]	@ tmp158, pxCurrentTCB
 611:FreeRTOS/tasks.c **** 
 612:FreeRTOS/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseT_t ) 1 )
 300              		.loc 1 612 0
 301 00ac 274B     		ldr	r3, .L15	@ tmp159,
 302 00ae 1B68     		ldr	r3, [r3]	@ D.6560, uxCurrentNumberOfTasks
 303 00b0 012B     		cmp	r3, #1	@ D.6560,
 304 00b2 0FD1     		bne	.L11	@,
 613:FreeRTOS/tasks.c **** 				{
 614:FreeRTOS/tasks.c **** 					/* This is the first task to be created so do the preliminary
 615:FreeRTOS/tasks.c **** 					initialisation required.  We will not recover if this call
 616:FreeRTOS/tasks.c **** 					fails, but we will report the failure. */
 617:FreeRTOS/tasks.c **** 					prvInitialiseTaskLists();
 305              		.loc 1 617 0
 306 00b4 FFF7FEFF 		bl	prvInitialiseTaskLists	@
 307 00b8 0CE0     		b	.L11	@
 308              	.L10:
 618:FreeRTOS/tasks.c **** 				}
 619:FreeRTOS/tasks.c **** 				else
 620:FreeRTOS/tasks.c **** 				{
 621:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 622:FreeRTOS/tasks.c **** 				}
 623:FreeRTOS/tasks.c **** 			}
 624:FreeRTOS/tasks.c **** 			else
 625:FreeRTOS/tasks.c **** 			{
 626:FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 627:FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
 628:FreeRTOS/tasks.c **** 				so far. */
 629:FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 309              		.loc 1 629 0
 310 00ba 264B     		ldr	r3, .L15+8	@ tmp160,
 311 00bc 1B68     		ldr	r3, [r3]	@ D.6562, xSchedulerRunning
 312 00be 002B     		cmp	r3, #0	@ D.6562,
 313 00c0 08D1     		bne	.L11	@,
 630:FreeRTOS/tasks.c **** 				{
 631:FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 314              		.loc 1 631 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 18


 315 00c2 234B     		ldr	r3, .L15+4	@ tmp161,
 316 00c4 1B68     		ldr	r3, [r3]	@ D.6561, pxCurrentTCB
 317 00c6 DA6A     		ldr	r2, [r3, #44]	@ D.6560, _41->uxPriority
 318 00c8 BB6A     		ldr	r3, [r7, #40]	@ tmp162, uxPriority
 319 00ca 9A42     		cmp	r2, r3	@ D.6560, tmp162
 320 00cc 02D8     		bhi	.L11	@,
 632:FreeRTOS/tasks.c **** 					{
 633:FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 321              		.loc 1 633 0
 322 00ce 204A     		ldr	r2, .L15+4	@ tmp163,
 323 00d0 BB69     		ldr	r3, [r7, #24]	@ tmp164, pxNewTCB
 324 00d2 1360     		str	r3, [r2]	@ tmp164, pxCurrentTCB
 325              	.L11:
 634:FreeRTOS/tasks.c **** 					}
 635:FreeRTOS/tasks.c **** 					else
 636:FreeRTOS/tasks.c **** 					{
 637:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 638:FreeRTOS/tasks.c **** 					}
 639:FreeRTOS/tasks.c **** 				}
 640:FreeRTOS/tasks.c **** 				else
 641:FreeRTOS/tasks.c **** 				{
 642:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 643:FreeRTOS/tasks.c **** 				}
 644:FreeRTOS/tasks.c **** 			}
 645:FreeRTOS/tasks.c **** 
 646:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 326              		.loc 1 646 0
 327 00d4 204B     		ldr	r3, .L15+12	@ tmp165,
 328 00d6 1B68     		ldr	r3, [r3]	@ D.6560, uxTaskNumber
 329 00d8 0133     		adds	r3, r3, #1	@ D.6560, D.6560,
 330 00da 1F4A     		ldr	r2, .L15+12	@ tmp166,
 331 00dc 1360     		str	r3, [r2]	@ D.6560, uxTaskNumber
 647:FreeRTOS/tasks.c **** 
 648:FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 649:FreeRTOS/tasks.c **** 			{
 650:FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 651:FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 332              		.loc 1 651 0
 333 00de 1E4B     		ldr	r3, .L15+12	@ tmp167,
 334 00e0 1A68     		ldr	r2, [r3]	@ D.6560, uxTaskNumber
 335 00e2 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxNewTCB
 336 00e4 1A64     		str	r2, [r3, #64]	@ D.6560, pxNewTCB_12->uxTCBNumber
 652:FreeRTOS/tasks.c **** 			}
 653:FreeRTOS/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 654:FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 655:FreeRTOS/tasks.c **** 
 656:FreeRTOS/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 337              		.loc 1 656 0
 338 00e6 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxNewTCB
 339 00e8 DB6A     		ldr	r3, [r3, #44]	@ D.6560, pxNewTCB_12->uxPriority
 340 00ea 0122     		movs	r2, #1	@ tmp170,
 341 00ec 9A40     		lsls	r2, r2, r3	@ D.6560, tmp170, D.6560
 342 00ee 1B4B     		ldr	r3, .L15+16	@ tmp171,
 343 00f0 1B68     		ldr	r3, [r3]	@ D.6560, uxTopReadyPriority
 344 00f2 1343     		orrs	r3, r3, r2	@, D.6560, D.6560, D.6560
 345 00f4 194A     		ldr	r2, .L15+16	@ tmp172,
 346 00f6 1360     		str	r3, [r2]	@ D.6560, uxTopReadyPriority
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 19


 347 00f8 BB69     		ldr	r3, [r7, #24]	@ tmp173, pxNewTCB
 348 00fa DA6A     		ldr	r2, [r3, #44]	@ D.6560, pxNewTCB_12->uxPriority
 349 00fc 1346     		mov	r3, r2	@ tmp174, D.6560
 350 00fe 9B00     		lsls	r3, r3, #2	@ tmp174, tmp174,
 351 0100 1344     		add	r3, r3, r2	@ tmp174, D.6560
 352 0102 9B00     		lsls	r3, r3, #2	@ tmp175, tmp174,
 353 0104 164A     		ldr	r2, .L15+20	@ tmp176,
 354 0106 1A44     		add	r2, r2, r3	@ D.6563, tmp174
 355 0108 BB69     		ldr	r3, [r7, #24]	@ tmp177, pxNewTCB
 356 010a 0433     		adds	r3, r3, #4	@ D.6564, tmp177,
 357 010c 1946     		mov	r1, r3	@, D.6564
 358 010e 1046     		mov	r0, r2	@, D.6563
 359 0110 FFF7FEFF 		bl	vListInsertEnd	@
 657:FreeRTOS/tasks.c **** 
 658:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 360              		.loc 1 658 0
 361 0114 0123     		movs	r3, #1	@ tmp178,
 362 0116 FB61     		str	r3, [r7, #28]	@ tmp178, xReturn
 659:FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 660:FreeRTOS/tasks.c **** 		}
 661:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 363              		.loc 1 661 0
 364 0118 FFF7FEFF 		bl	vPortExitCritical	@
 365              	.LBE6:
 366 011c 02E0     		b	.L12	@
 367              	.L6:
 662:FreeRTOS/tasks.c **** 	}
 663:FreeRTOS/tasks.c **** 	else
 664:FreeRTOS/tasks.c **** 	{
 665:FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 368              		.loc 1 665 0
 369 011e 4FF0FF33 		mov	r3, #-1	@ tmp179,
 370 0122 FB61     		str	r3, [r7, #28]	@ tmp179, xReturn
 371              	.L12:
 666:FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 667:FreeRTOS/tasks.c **** 	}
 668:FreeRTOS/tasks.c **** 
 669:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 372              		.loc 1 669 0
 373 0124 FB69     		ldr	r3, [r7, #28]	@ tmp180, xReturn
 374 0126 012B     		cmp	r3, #1	@ tmp180,
 375 0128 0BD1     		bne	.L13	@,
 670:FreeRTOS/tasks.c **** 	{
 671:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 376              		.loc 1 671 0
 377 012a 0A4B     		ldr	r3, .L15+8	@ tmp181,
 378 012c 1B68     		ldr	r3, [r3]	@ D.6562, xSchedulerRunning
 379 012e 002B     		cmp	r3, #0	@ D.6562,
 380 0130 07D0     		beq	.L13	@,
 672:FreeRTOS/tasks.c **** 		{
 673:FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 674:FreeRTOS/tasks.c **** 			then it should run now. */
 675:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 381              		.loc 1 675 0
 382 0132 074B     		ldr	r3, .L15+4	@ tmp182,
 383 0134 1B68     		ldr	r3, [r3]	@ D.6561, pxCurrentTCB
 384 0136 DA6A     		ldr	r2, [r3, #44]	@ D.6560, _63->uxPriority
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 20


 385 0138 BB6A     		ldr	r3, [r7, #40]	@ tmp183, uxPriority
 386 013a 9A42     		cmp	r2, r3	@ D.6560, tmp183
 387 013c 01D2     		bcs	.L13	@,
 676:FreeRTOS/tasks.c **** 			{
 677:FreeRTOS/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 388              		.loc 1 677 0
 389 013e FFF7FEFF 		bl	vPortYield	@
 390              	.L13:
 678:FreeRTOS/tasks.c **** 			}
 679:FreeRTOS/tasks.c **** 			else
 680:FreeRTOS/tasks.c **** 			{
 681:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 682:FreeRTOS/tasks.c **** 			}
 683:FreeRTOS/tasks.c **** 		}
 684:FreeRTOS/tasks.c **** 		else
 685:FreeRTOS/tasks.c **** 		{
 686:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 687:FreeRTOS/tasks.c **** 		}
 688:FreeRTOS/tasks.c **** 	}
 689:FreeRTOS/tasks.c **** 
 690:FreeRTOS/tasks.c **** 	return xReturn;
 391              		.loc 1 690 0
 392 0142 FB69     		ldr	r3, [r7, #28]	@ D.6565, xReturn
 691:FreeRTOS/tasks.c **** }
 393              		.loc 1 691 0
 394 0144 1846     		mov	r0, r3	@, <retval>
 395 0146 2037     		adds	r7, r7, #32	@,,
 396              		.cfi_def_cfa_offset 8
 397 0148 BD46     		mov	sp, r7	@,
 398              		.cfi_def_cfa_register 13
 399              		@ sp needed	@
 400 014a 80BD     		pop	{r7, pc}	@
 401              	.L16:
 402              		.align	2
 403              	.L15:
 404 014c 00000000 		.word	uxCurrentNumberOfTasks
 405 0150 00000000 		.word	pxCurrentTCB
 406 0154 00000000 		.word	xSchedulerRunning
 407 0158 00000000 		.word	uxTaskNumber
 408 015c 00000000 		.word	uxTopReadyPriority
 409 0160 00000000 		.word	pxReadyTasksLists
 410              		.cfi_endproc
 411              	.LFE1:
 412              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 413              		.section	.text.vTaskDelete,"ax",%progbits
 414              		.align	2
 415              		.global	vTaskDelete
 416              		.thumb
 417              		.thumb_func
 418              		.type	vTaskDelete, %function
 419              	vTaskDelete:
 420              	.LFB2:
 692:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 693:FreeRTOS/tasks.c **** 
 694:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 695:FreeRTOS/tasks.c **** 
 696:FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 21


 697:FreeRTOS/tasks.c **** 	{
 421              		.loc 1 697 0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 16
 424              		@ frame_needed = 1, uses_anonymous_args = 0
 425 0000 80B5     		push	{r7, lr}	@
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 7, -8
 428              		.cfi_offset 14, -4
 429 0002 84B0     		sub	sp, sp, #16	@,,
 430              		.cfi_def_cfa_offset 24
 431 0004 00AF     		add	r7, sp, #0	@,,
 432              		.cfi_def_cfa_register 7
 433 0006 7860     		str	r0, [r7, #4]	@ xTaskToDelete, xTaskToDelete
 698:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 699:FreeRTOS/tasks.c **** 
 700:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 434              		.loc 1 700 0
 435 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 701:FreeRTOS/tasks.c **** 		{
 702:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 703:FreeRTOS/tasks.c **** 			being deleted. */
 704:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 436              		.loc 1 704 0
 437 000c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTaskToDelete
 438 000e 002B     		cmp	r3, #0	@ tmp130,
 439 0010 02D1     		bne	.L18	@,
 440              		.loc 1 704 0 is_stmt 0 discriminator 1
 441 0012 2D4B     		ldr	r3, .L28	@ tmp131,
 442 0014 1B68     		ldr	r3, [r3]	@ D.6566, pxCurrentTCB
 443 0016 00E0     		b	.L19	@
 444              	.L18:
 445              		.loc 1 704 0 discriminator 2
 446 0018 7B68     		ldr	r3, [r7, #4]	@ D.6566, xTaskToDelete
 447              	.L19:
 448              		.loc 1 704 0 discriminator 4
 449 001a FB60     		str	r3, [r7, #12]	@ D.6566, pxTCB
 705:FreeRTOS/tasks.c **** 
 706:FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 707:FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 708:FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 709:FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 710:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 450              		.loc 1 710 0 is_stmt 1 discriminator 4
 451 001c FB68     		ldr	r3, [r7, #12]	@ tmp132, pxTCB
 452 001e 0433     		adds	r3, r3, #4	@ D.6567, tmp132,
 453 0020 1846     		mov	r0, r3	@, D.6567
 454 0022 FFF7FEFF 		bl	uxListRemove	@
 455 0026 0346     		mov	r3, r0	@ D.6568,
 456 0028 002B     		cmp	r3, #0	@ D.6568,
 457 002a 15D1     		bne	.L20	@,
 711:FreeRTOS/tasks.c **** 			{
 712:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 458              		.loc 1 712 0
 459 002c FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 460 002e DA6A     		ldr	r2, [r3, #44]	@ D.6568, pxTCB_11->uxPriority
 461 0030 2649     		ldr	r1, .L28+4	@ tmp134,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 22


 462 0032 1346     		mov	r3, r2	@ tmp135, D.6568
 463 0034 9B00     		lsls	r3, r3, #2	@ tmp135, tmp135,
 464 0036 1344     		add	r3, r3, r2	@ tmp135, D.6568
 465 0038 9B00     		lsls	r3, r3, #2	@ tmp136, tmp135,
 466 003a 0B44     		add	r3, r3, r1	@ tmp137, tmp134
 467 003c 1B68     		ldr	r3, [r3]	@ D.6568, pxReadyTasksLists[_15].uxNumberOfItems
 468 003e 002B     		cmp	r3, #0	@ D.6568,
 469 0040 0AD1     		bne	.L20	@,
 470              		.loc 1 712 0 is_stmt 0 discriminator 1
 471 0042 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 472 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6568, pxTCB_11->uxPriority
 473 0046 0122     		movs	r2, #1	@ tmp139,
 474 0048 02FA03F3 		lsl	r3, r2, r3	@ D.6568, tmp139, D.6568
 475 004c DA43     		mvns	r2, r3	@ D.6568, D.6568
 476 004e 204B     		ldr	r3, .L28+8	@ tmp140,
 477 0050 1B68     		ldr	r3, [r3]	@ D.6568, uxTopReadyPriority
 478 0052 1340     		ands	r3, r3, r2	@, D.6568, D.6568, D.6568
 479 0054 1E4A     		ldr	r2, .L28+8	@ tmp141,
 480 0056 1360     		str	r3, [r2]	@ D.6568, uxTopReadyPriority
 481              	.L20:
 713:FreeRTOS/tasks.c **** 			}
 714:FreeRTOS/tasks.c **** 			else
 715:FreeRTOS/tasks.c **** 			{
 716:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 717:FreeRTOS/tasks.c **** 			}
 718:FreeRTOS/tasks.c **** 
 719:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 720:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 482              		.loc 1 720 0 is_stmt 1
 483 0058 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 484 005a 9B6A     		ldr	r3, [r3, #40]	@ D.6569, pxTCB_11->xEventListItem.pvContainer
 485 005c 002B     		cmp	r3, #0	@ D.6569,
 486 005e 04D0     		beq	.L22	@,
 721:FreeRTOS/tasks.c **** 			{
 722:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 487              		.loc 1 722 0
 488 0060 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 489 0062 1833     		adds	r3, r3, #24	@ D.6567, tmp143,
 490 0064 1846     		mov	r0, r3	@, D.6567
 491 0066 FFF7FEFF 		bl	uxListRemove	@
 492              	.L22:
 723:FreeRTOS/tasks.c **** 			}
 724:FreeRTOS/tasks.c **** 			else
 725:FreeRTOS/tasks.c **** 			{
 726:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 727:FreeRTOS/tasks.c **** 			}
 728:FreeRTOS/tasks.c **** 
 729:FreeRTOS/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 493              		.loc 1 729 0
 494 006a FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 495 006c 0433     		adds	r3, r3, #4	@ D.6567, tmp144,
 496 006e 1946     		mov	r1, r3	@, D.6567
 497 0070 1848     		ldr	r0, .L28+12	@,
 498 0072 FFF7FEFF 		bl	vListInsertEnd	@
 730:FreeRTOS/tasks.c **** 
 731:FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 732:FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 23


 733:FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 734:FreeRTOS/tasks.c **** 			++uxTasksDeleted;
 499              		.loc 1 734 0
 500 0076 184B     		ldr	r3, .L28+16	@ tmp145,
 501 0078 1B68     		ldr	r3, [r3]	@ D.6568, uxTasksDeleted
 502 007a 0133     		adds	r3, r3, #1	@ D.6568, D.6568,
 503 007c 164A     		ldr	r2, .L28+16	@ tmp146,
 504 007e 1360     		str	r3, [r2]	@ D.6568, uxTasksDeleted
 735:FreeRTOS/tasks.c **** 
 736:FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 737:FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 738:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 505              		.loc 1 738 0
 506 0080 164B     		ldr	r3, .L28+20	@ tmp147,
 507 0082 1B68     		ldr	r3, [r3]	@ D.6568, uxTaskNumber
 508 0084 0133     		adds	r3, r3, #1	@ D.6568, D.6568,
 509 0086 154A     		ldr	r2, .L28+20	@ tmp148,
 510 0088 1360     		str	r3, [r2]	@ D.6568, uxTaskNumber
 739:FreeRTOS/tasks.c **** 
 740:FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 741:FreeRTOS/tasks.c **** 		}
 742:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 511              		.loc 1 742 0
 512 008a FFF7FEFF 		bl	vPortExitCritical	@
 743:FreeRTOS/tasks.c **** 
 744:FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 745:FreeRTOS/tasks.c **** 		been deleted. */
 746:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 513              		.loc 1 746 0
 514 008e 144B     		ldr	r3, .L28+24	@ tmp149,
 515 0090 1B68     		ldr	r3, [r3]	@ D.6570, xSchedulerRunning
 516 0092 002B     		cmp	r3, #0	@ D.6570,
 517 0094 14D0     		beq	.L27	@,
 747:FreeRTOS/tasks.c **** 		{
 748:FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 518              		.loc 1 748 0
 519 0096 0C4B     		ldr	r3, .L28	@ tmp150,
 520 0098 1B68     		ldr	r3, [r3]	@ D.6566, pxCurrentTCB
 521 009a FA68     		ldr	r2, [r7, #12]	@ tmp151, pxTCB
 522 009c 9A42     		cmp	r2, r3	@ tmp151, D.6566
 523 009e 09D1     		bne	.L24	@,
 749:FreeRTOS/tasks.c **** 			{
 750:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 524              		.loc 1 750 0
 525 00a0 104B     		ldr	r3, .L28+28	@ tmp152,
 526 00a2 1B68     		ldr	r3, [r3]	@ D.6568, uxSchedulerSuspended
 527 00a4 002B     		cmp	r3, #0	@ D.6568,
 528 00a6 02D0     		beq	.L25	@,
 529              		.loc 1 750 0 is_stmt 0 discriminator 1
 530 00a8 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 531              	.L26:
 532 00ac FEE7     		b	.L26	@
 533              	.L25:
 751:FreeRTOS/tasks.c **** 
 752:FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 753:FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
 754:FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 24


 755:FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 756:FreeRTOS/tasks.c **** 				required. */
 757:FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 758:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 534              		.loc 1 758 0 is_stmt 1
 535 00ae FFF7FEFF 		bl	vPortYield	@
 759:FreeRTOS/tasks.c **** 			}
 760:FreeRTOS/tasks.c **** 			else
 761:FreeRTOS/tasks.c **** 			{
 762:FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 763:FreeRTOS/tasks.c **** 				the task that has just been deleted. */
 764:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 765:FreeRTOS/tasks.c **** 				{
 766:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 767:FreeRTOS/tasks.c **** 				}
 768:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 769:FreeRTOS/tasks.c **** 			}
 770:FreeRTOS/tasks.c **** 		}
 771:FreeRTOS/tasks.c **** 	}
 536              		.loc 1 771 0
 537 00b2 05E0     		b	.L27	@
 538              	.L24:
 764:FreeRTOS/tasks.c **** 				{
 539              		.loc 1 764 0
 540 00b4 FFF7FEFF 		bl	vPortEnterCritical	@
 766:FreeRTOS/tasks.c **** 				}
 541              		.loc 1 766 0
 542 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 768:FreeRTOS/tasks.c **** 			}
 543              		.loc 1 768 0
 544 00bc FFF7FEFF 		bl	vPortExitCritical	@
 545              	.L27:
 546              		.loc 1 771 0
 547 00c0 00BF     		nop
 548 00c2 1037     		adds	r7, r7, #16	@,,
 549              		.cfi_def_cfa_offset 8
 550 00c4 BD46     		mov	sp, r7	@,
 551              		.cfi_def_cfa_register 13
 552              		@ sp needed	@
 553 00c6 80BD     		pop	{r7, pc}	@
 554              	.L29:
 555              		.align	2
 556              	.L28:
 557 00c8 00000000 		.word	pxCurrentTCB
 558 00cc 00000000 		.word	pxReadyTasksLists
 559 00d0 00000000 		.word	uxTopReadyPriority
 560 00d4 00000000 		.word	xTasksWaitingTermination
 561 00d8 00000000 		.word	uxTasksDeleted
 562 00dc 00000000 		.word	uxTaskNumber
 563 00e0 00000000 		.word	xSchedulerRunning
 564 00e4 00000000 		.word	uxSchedulerSuspended
 565              		.cfi_endproc
 566              	.LFE2:
 567              		.size	vTaskDelete, .-vTaskDelete
 568              		.section	.text.vTaskDelayUntil,"ax",%progbits
 569              		.align	2
 570              		.global	vTaskDelayUntil
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 25


 571              		.thumb
 572              		.thumb_func
 573              		.type	vTaskDelayUntil, %function
 574              	vTaskDelayUntil:
 575              	.LFB3:
 772:FreeRTOS/tasks.c **** 
 773:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 774:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 775:FreeRTOS/tasks.c **** 
 776:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 777:FreeRTOS/tasks.c **** 
 778:FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickT_t * const pxPreviousWakeTime, const TickT_t xTimeIncrement )
 779:FreeRTOS/tasks.c **** 	{
 576              		.loc 1 779 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 24
 579              		@ frame_needed = 1, uses_anonymous_args = 0
 580 0000 80B5     		push	{r7, lr}	@
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 7, -8
 583              		.cfi_offset 14, -4
 584 0002 86B0     		sub	sp, sp, #24	@,,
 585              		.cfi_def_cfa_offset 32
 586 0004 00AF     		add	r7, sp, #0	@,,
 587              		.cfi_def_cfa_register 7
 588 0006 7860     		str	r0, [r7, #4]	@ pxPreviousWakeTime, pxPreviousWakeTime
 589 0008 3960     		str	r1, [r7]	@ xTimeIncrement, xTimeIncrement
 780:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 781:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded, xShouldDelay = pdFALSE;
 590              		.loc 1 781 0
 591 000a 0023     		movs	r3, #0	@ tmp124,
 592 000c 7B61     		str	r3, [r7, #20]	@ tmp124, xShouldDelay
 782:FreeRTOS/tasks.c **** 
 783:FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 593              		.loc 1 783 0
 594 000e 7B68     		ldr	r3, [r7, #4]	@ tmp125, pxPreviousWakeTime
 595 0010 002B     		cmp	r3, #0	@ tmp125,
 596 0012 02D1     		bne	.L31	@,
 597              		.loc 1 783 0 is_stmt 0 discriminator 1
 598 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 599              	.L32:
 600 0018 FEE7     		b	.L32	@
 601              	.L31:
 784:FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 602              		.loc 1 784 0 is_stmt 1
 603 001a 3B68     		ldr	r3, [r7]	@ tmp126, xTimeIncrement
 604 001c 002B     		cmp	r3, #0	@ tmp126,
 605 001e 02D1     		bne	.L33	@,
 606              		.loc 1 784 0 is_stmt 0 discriminator 1
 607 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 608              	.L34:
 609              		.loc 1 784 0 discriminator 2
 610 0024 FEE7     		b	.L34	@
 611              	.L33:
 785:FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 612              		.loc 1 785 0 is_stmt 1
 613 0026 2B4B     		ldr	r3, .L44	@ tmp127,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 26


 614 0028 1B68     		ldr	r3, [r3]	@ D.6571, uxSchedulerSuspended
 615 002a 002B     		cmp	r3, #0	@ D.6571,
 616 002c 02D0     		beq	.L35	@,
 617              		.loc 1 785 0 is_stmt 0 discriminator 1
 618 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 619              	.L36:
 620              		.loc 1 785 0 discriminator 3
 621 0032 FEE7     		b	.L36	@
 622              	.L35:
 786:FreeRTOS/tasks.c **** 
 787:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 623              		.loc 1 787 0 is_stmt 1
 624 0034 FFF7FEFF 		bl	vTaskSuspendAll	@
 625              	.LBB7:
 788:FreeRTOS/tasks.c **** 		{
 789:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 790:FreeRTOS/tasks.c **** 			block. */
 791:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 626              		.loc 1 791 0
 627 0038 274B     		ldr	r3, .L44+4	@ tmp128,
 628 003a 1B68     		ldr	r3, [r3]	@ tmp129, xTickCount
 629 003c 3B61     		str	r3, [r7, #16]	@ tmp129, xConstTickCount
 792:FreeRTOS/tasks.c **** 
 793:FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 794:FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 630              		.loc 1 794 0
 631 003e 7B68     		ldr	r3, [r7, #4]	@ tmp130, pxPreviousWakeTime
 632 0040 1A68     		ldr	r2, [r3]	@ D.6571, *pxPreviousWakeTime_6(D)
 633 0042 3B68     		ldr	r3, [r7]	@ tmp132, xTimeIncrement
 634 0044 1344     		add	r3, r3, r2	@ tmp131, D.6571
 635 0046 FB60     		str	r3, [r7, #12]	@ tmp131, xTimeToWake
 795:FreeRTOS/tasks.c **** 
 796:FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 636              		.loc 1 796 0
 637 0048 7B68     		ldr	r3, [r7, #4]	@ tmp133, pxPreviousWakeTime
 638 004a 1A68     		ldr	r2, [r3]	@ D.6571, *pxPreviousWakeTime_6(D)
 639 004c 3B69     		ldr	r3, [r7, #16]	@ tmp134, xConstTickCount
 640 004e 9A42     		cmp	r2, r3	@ D.6571, tmp134
 641 0050 0BD9     		bls	.L37	@,
 797:FreeRTOS/tasks.c **** 			{
 798:FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 799:FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 800:FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 801:FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 802:FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 803:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 642              		.loc 1 803 0
 643 0052 7B68     		ldr	r3, [r7, #4]	@ tmp135, pxPreviousWakeTime
 644 0054 1A68     		ldr	r2, [r3]	@ D.6571, *pxPreviousWakeTime_6(D)
 645 0056 FB68     		ldr	r3, [r7, #12]	@ tmp136, xTimeToWake
 646 0058 9A42     		cmp	r2, r3	@ D.6571, tmp136
 647 005a 11D9     		bls	.L38	@,
 648              		.loc 1 803 0 is_stmt 0 discriminator 1
 649 005c FA68     		ldr	r2, [r7, #12]	@ tmp137, xTimeToWake
 650 005e 3B69     		ldr	r3, [r7, #16]	@ tmp138, xConstTickCount
 651 0060 9A42     		cmp	r2, r3	@ tmp137, tmp138
 652 0062 0DD9     		bls	.L38	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 27


 804:FreeRTOS/tasks.c **** 				{
 805:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 653              		.loc 1 805 0 is_stmt 1
 654 0064 0123     		movs	r3, #1	@ tmp139,
 655 0066 7B61     		str	r3, [r7, #20]	@ tmp139, xShouldDelay
 656 0068 0AE0     		b	.L38	@
 657              	.L37:
 806:FreeRTOS/tasks.c **** 				}
 807:FreeRTOS/tasks.c **** 				else
 808:FreeRTOS/tasks.c **** 				{
 809:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 810:FreeRTOS/tasks.c **** 				}
 811:FreeRTOS/tasks.c **** 			}
 812:FreeRTOS/tasks.c **** 			else
 813:FreeRTOS/tasks.c **** 			{
 814:FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 815:FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 816:FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 817:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 658              		.loc 1 817 0
 659 006a 7B68     		ldr	r3, [r7, #4]	@ tmp140, pxPreviousWakeTime
 660 006c 1A68     		ldr	r2, [r3]	@ D.6571, *pxPreviousWakeTime_6(D)
 661 006e FB68     		ldr	r3, [r7, #12]	@ tmp141, xTimeToWake
 662 0070 9A42     		cmp	r2, r3	@ D.6571, tmp141
 663 0072 03D8     		bhi	.L39	@,
 664              		.loc 1 817 0 is_stmt 0 discriminator 1
 665 0074 FA68     		ldr	r2, [r7, #12]	@ tmp142, xTimeToWake
 666 0076 3B69     		ldr	r3, [r7, #16]	@ tmp143, xConstTickCount
 667 0078 9A42     		cmp	r2, r3	@ tmp142, tmp143
 668 007a 01D9     		bls	.L38	@,
 669              	.L39:
 818:FreeRTOS/tasks.c **** 				{
 819:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 670              		.loc 1 819 0 is_stmt 1
 671 007c 0123     		movs	r3, #1	@ tmp144,
 672 007e 7B61     		str	r3, [r7, #20]	@ tmp144, xShouldDelay
 673              	.L38:
 820:FreeRTOS/tasks.c **** 				}
 821:FreeRTOS/tasks.c **** 				else
 822:FreeRTOS/tasks.c **** 				{
 823:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 824:FreeRTOS/tasks.c **** 				}
 825:FreeRTOS/tasks.c **** 			}
 826:FreeRTOS/tasks.c **** 
 827:FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 828:FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 674              		.loc 1 828 0
 675 0080 7B68     		ldr	r3, [r7, #4]	@ tmp145, pxPreviousWakeTime
 676 0082 FA68     		ldr	r2, [r7, #12]	@ tmp146, xTimeToWake
 677 0084 1A60     		str	r2, [r3]	@ tmp146, *pxPreviousWakeTime_6(D)
 829:FreeRTOS/tasks.c **** 
 830:FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 678              		.loc 1 830 0
 679 0086 7B69     		ldr	r3, [r7, #20]	@ tmp147, xShouldDelay
 680 0088 002B     		cmp	r3, #0	@ tmp147,
 681 008a 17D0     		beq	.L40	@,
 831:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 28


 832:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 833:FreeRTOS/tasks.c **** 
 834:FreeRTOS/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 835:FreeRTOS/tasks.c **** 				blocked list as the same list item is used for both lists. */
 836:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 682              		.loc 1 836 0
 683 008c 134B     		ldr	r3, .L44+8	@ tmp148,
 684 008e 1B68     		ldr	r3, [r3]	@ D.6572, pxCurrentTCB
 685 0090 0433     		adds	r3, r3, #4	@ D.6573, D.6572,
 686 0092 1846     		mov	r0, r3	@, D.6573
 687 0094 FFF7FEFF 		bl	uxListRemove	@
 688 0098 0346     		mov	r3, r0	@ D.6571,
 689 009a 002B     		cmp	r3, #0	@ D.6571,
 690 009c 0BD1     		bne	.L41	@,
 837:FreeRTOS/tasks.c **** 				{
 838:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 839:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 840:FreeRTOS/tasks.c **** 					directly. */
 841:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 691              		.loc 1 841 0
 692 009e 0F4B     		ldr	r3, .L44+8	@ tmp149,
 693 00a0 1B68     		ldr	r3, [r3]	@ D.6572, pxCurrentTCB
 694 00a2 DB6A     		ldr	r3, [r3, #44]	@ D.6571, _24->uxPriority
 695 00a4 0122     		movs	r2, #1	@ tmp150,
 696 00a6 02FA03F3 		lsl	r3, r2, r3	@ D.6571, tmp150, D.6571
 697 00aa DA43     		mvns	r2, r3	@ D.6571, D.6571
 698 00ac 0C4B     		ldr	r3, .L44+12	@ tmp151,
 699 00ae 1B68     		ldr	r3, [r3]	@ D.6571, uxTopReadyPriority
 700 00b0 1340     		ands	r3, r3, r2	@, D.6571, D.6571, D.6571
 701 00b2 0B4A     		ldr	r2, .L44+12	@ tmp152,
 702 00b4 1360     		str	r3, [r2]	@ D.6571, uxTopReadyPriority
 703              	.L41:
 842:FreeRTOS/tasks.c **** 				}
 843:FreeRTOS/tasks.c **** 				else
 844:FreeRTOS/tasks.c **** 				{
 845:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 846:FreeRTOS/tasks.c **** 				}
 847:FreeRTOS/tasks.c **** 
 848:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 704              		.loc 1 848 0
 705 00b6 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 706 00b8 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 707              	.L40:
 708              	.LBE7:
 849:FreeRTOS/tasks.c **** 			}
 850:FreeRTOS/tasks.c **** 			else
 851:FreeRTOS/tasks.c **** 			{
 852:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 853:FreeRTOS/tasks.c **** 			}
 854:FreeRTOS/tasks.c **** 		}
 855:FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 709              		.loc 1 855 0
 710 00bc FFF7FEFF 		bl	xTaskResumeAll	@
 711 00c0 B860     		str	r0, [r7, #8]	@, xAlreadyYielded
 856:FreeRTOS/tasks.c **** 
 857:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 858:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 29


 859:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 712              		.loc 1 859 0
 713 00c2 BB68     		ldr	r3, [r7, #8]	@ tmp153, xAlreadyYielded
 714 00c4 002B     		cmp	r3, #0	@ tmp153,
 715 00c6 01D1     		bne	.L43	@,
 860:FreeRTOS/tasks.c **** 		{
 861:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 716              		.loc 1 861 0
 717 00c8 FFF7FEFF 		bl	vPortYield	@
 718              	.L43:
 862:FreeRTOS/tasks.c **** 		}
 863:FreeRTOS/tasks.c **** 		else
 864:FreeRTOS/tasks.c **** 		{
 865:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 866:FreeRTOS/tasks.c **** 		}
 867:FreeRTOS/tasks.c **** 	}
 719              		.loc 1 867 0
 720 00cc 00BF     		nop
 721 00ce 1837     		adds	r7, r7, #24	@,,
 722              		.cfi_def_cfa_offset 8
 723 00d0 BD46     		mov	sp, r7	@,
 724              		.cfi_def_cfa_register 13
 725              		@ sp needed	@
 726 00d2 80BD     		pop	{r7, pc}	@
 727              	.L45:
 728              		.align	2
 729              	.L44:
 730 00d4 00000000 		.word	uxSchedulerSuspended
 731 00d8 00000000 		.word	xTickCount
 732 00dc 00000000 		.word	pxCurrentTCB
 733 00e0 00000000 		.word	uxTopReadyPriority
 734              		.cfi_endproc
 735              	.LFE3:
 736              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 737              		.section	.text.vTaskDelay,"ax",%progbits
 738              		.align	2
 739              		.global	vTaskDelay
 740              		.thumb
 741              		.thumb_func
 742              		.type	vTaskDelay, %function
 743              	vTaskDelay:
 744              	.LFB4:
 868:FreeRTOS/tasks.c **** 
 869:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 870:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 871:FreeRTOS/tasks.c **** 
 872:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 873:FreeRTOS/tasks.c **** 
 874:FreeRTOS/tasks.c **** 	void vTaskDelay( const TickT_t xTicksToDelay )
 875:FreeRTOS/tasks.c **** 	{
 745              		.loc 1 875 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 16
 748              		@ frame_needed = 1, uses_anonymous_args = 0
 749 0000 80B5     		push	{r7, lr}	@
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 7, -8
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 30


 752              		.cfi_offset 14, -4
 753 0002 84B0     		sub	sp, sp, #16	@,,
 754              		.cfi_def_cfa_offset 24
 755 0004 00AF     		add	r7, sp, #0	@,,
 756              		.cfi_def_cfa_register 7
 757 0006 7860     		str	r0, [r7, #4]	@ xTicksToDelay, xTicksToDelay
 876:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 877:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded = pdFALSE;
 758              		.loc 1 877 0
 759 0008 0023     		movs	r3, #0	@ tmp121,
 760 000a FB60     		str	r3, [r7, #12]	@ tmp121, xAlreadyYielded
 878:FreeRTOS/tasks.c **** 
 879:FreeRTOS/tasks.c **** 
 880:FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 881:FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickT_t ) 0U )
 761              		.loc 1 881 0
 762 000c 7B68     		ldr	r3, [r7, #4]	@ tmp122, xTicksToDelay
 763 000e 002B     		cmp	r3, #0	@ tmp122,
 764 0010 28D0     		beq	.L47	@,
 882:FreeRTOS/tasks.c **** 		{
 883:FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 765              		.loc 1 883 0
 766 0012 194B     		ldr	r3, .L53	@ tmp123,
 767 0014 1B68     		ldr	r3, [r3]	@ D.6574, uxSchedulerSuspended
 768 0016 002B     		cmp	r3, #0	@ D.6574,
 769 0018 02D0     		beq	.L48	@,
 770              		.loc 1 883 0 is_stmt 0 discriminator 1
 771 001a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 772              	.L49:
 773 001e FEE7     		b	.L49	@
 774              	.L48:
 884:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 775              		.loc 1 884 0 is_stmt 1
 776 0020 FFF7FEFF 		bl	vTaskSuspendAll	@
 885:FreeRTOS/tasks.c **** 			{
 886:FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 887:FreeRTOS/tasks.c **** 
 888:FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 889:FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 890:FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 891:FreeRTOS/tasks.c **** 				is resumed.
 892:FreeRTOS/tasks.c **** 
 893:FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 894:FreeRTOS/tasks.c **** 				executing task. */
 895:FreeRTOS/tasks.c **** 
 896:FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 897:FreeRTOS/tasks.c **** 				not a problem. */
 898:FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 777              		.loc 1 898 0
 778 0024 154B     		ldr	r3, .L53+4	@ tmp124,
 779 0026 1A68     		ldr	r2, [r3]	@ D.6574, xTickCount
 780 0028 7B68     		ldr	r3, [r7, #4]	@ tmp126, xTicksToDelay
 781 002a 1344     		add	r3, r3, r2	@ tmp125, D.6574
 782 002c BB60     		str	r3, [r7, #8]	@ tmp125, xTimeToWake
 899:FreeRTOS/tasks.c **** 
 900:FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 901:FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 31


 902:FreeRTOS/tasks.c **** 				both lists. */
 903:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 783              		.loc 1 903 0
 784 002e 144B     		ldr	r3, .L53+8	@ tmp127,
 785 0030 1B68     		ldr	r3, [r3]	@ D.6575, pxCurrentTCB
 786 0032 0433     		adds	r3, r3, #4	@ D.6576, D.6575,
 787 0034 1846     		mov	r0, r3	@, D.6576
 788 0036 FFF7FEFF 		bl	uxListRemove	@
 789 003a 0346     		mov	r3, r0	@ D.6574,
 790 003c 002B     		cmp	r3, #0	@ D.6574,
 791 003e 0BD1     		bne	.L50	@,
 904:FreeRTOS/tasks.c **** 				{
 905:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 906:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 907:FreeRTOS/tasks.c **** 					directly. */
 908:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 792              		.loc 1 908 0
 793 0040 0F4B     		ldr	r3, .L53+8	@ tmp128,
 794 0042 1B68     		ldr	r3, [r3]	@ D.6575, pxCurrentTCB
 795 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6574, _16->uxPriority
 796 0046 0122     		movs	r2, #1	@ tmp129,
 797 0048 02FA03F3 		lsl	r3, r2, r3	@ D.6574, tmp129, D.6574
 798 004c DA43     		mvns	r2, r3	@ D.6574, D.6574
 799 004e 0D4B     		ldr	r3, .L53+12	@ tmp130,
 800 0050 1B68     		ldr	r3, [r3]	@ D.6574, uxTopReadyPriority
 801 0052 1340     		ands	r3, r3, r2	@, D.6574, D.6574, D.6574
 802 0054 0B4A     		ldr	r2, .L53+12	@ tmp131,
 803 0056 1360     		str	r3, [r2]	@ D.6574, uxTopReadyPriority
 804              	.L50:
 909:FreeRTOS/tasks.c **** 				}
 910:FreeRTOS/tasks.c **** 				else
 911:FreeRTOS/tasks.c **** 				{
 912:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 913:FreeRTOS/tasks.c **** 				}
 914:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 805              		.loc 1 914 0
 806 0058 B868     		ldr	r0, [r7, #8]	@, xTimeToWake
 807 005a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 915:FreeRTOS/tasks.c **** 			}
 916:FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 808              		.loc 1 916 0
 809 005e FFF7FEFF 		bl	xTaskResumeAll	@
 810 0062 F860     		str	r0, [r7, #12]	@, xAlreadyYielded
 811              	.L47:
 917:FreeRTOS/tasks.c **** 		}
 918:FreeRTOS/tasks.c **** 		else
 919:FreeRTOS/tasks.c **** 		{
 920:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 921:FreeRTOS/tasks.c **** 		}
 922:FreeRTOS/tasks.c **** 
 923:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 924:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 925:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 812              		.loc 1 925 0
 813 0064 FB68     		ldr	r3, [r7, #12]	@ tmp132, xAlreadyYielded
 814 0066 002B     		cmp	r3, #0	@ tmp132,
 815 0068 01D1     		bne	.L52	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 32


 926:FreeRTOS/tasks.c **** 		{
 927:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 816              		.loc 1 927 0
 817 006a FFF7FEFF 		bl	vPortYield	@
 818              	.L52:
 928:FreeRTOS/tasks.c **** 		}
 929:FreeRTOS/tasks.c **** 		else
 930:FreeRTOS/tasks.c **** 		{
 931:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 932:FreeRTOS/tasks.c **** 		}
 933:FreeRTOS/tasks.c **** 	}
 819              		.loc 1 933 0
 820 006e 00BF     		nop
 821 0070 1037     		adds	r7, r7, #16	@,,
 822              		.cfi_def_cfa_offset 8
 823 0072 BD46     		mov	sp, r7	@,
 824              		.cfi_def_cfa_register 13
 825              		@ sp needed	@
 826 0074 80BD     		pop	{r7, pc}	@
 827              	.L54:
 828 0076 00BF     		.align	2
 829              	.L53:
 830 0078 00000000 		.word	uxSchedulerSuspended
 831 007c 00000000 		.word	xTickCount
 832 0080 00000000 		.word	pxCurrentTCB
 833 0084 00000000 		.word	uxTopReadyPriority
 834              		.cfi_endproc
 835              	.LFE4:
 836              		.size	vTaskDelay, .-vTaskDelay
 837              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 838              		.align	2
 839              		.global	uxTaskPriorityGet
 840              		.thumb
 841              		.thumb_func
 842              		.type	uxTaskPriorityGet, %function
 843              	uxTaskPriorityGet:
 844              	.LFB5:
 934:FreeRTOS/tasks.c **** 
 935:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 936:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 937:FreeRTOS/tasks.c **** 
 938:FreeRTOS/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 939:FreeRTOS/tasks.c **** 
 940:FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 941:FreeRTOS/tasks.c **** 	{
 942:FreeRTOS/tasks.c **** 	eTaskState eReturn;
 943:FreeRTOS/tasks.c **** 	List_t *pxStateList;
 944:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 945:FreeRTOS/tasks.c **** 
 946:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 947:FreeRTOS/tasks.c **** 
 948:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 949:FreeRTOS/tasks.c **** 		{
 950:FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
 951:FreeRTOS/tasks.c **** 			eReturn = eRunning;
 952:FreeRTOS/tasks.c **** 		}
 953:FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 33


 954:FreeRTOS/tasks.c **** 		{
 955:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 956:FreeRTOS/tasks.c **** 			{
 957:FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 958:FreeRTOS/tasks.c **** 			}
 959:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 960:FreeRTOS/tasks.c **** 
 961:FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 962:FreeRTOS/tasks.c **** 			{
 963:FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 964:FreeRTOS/tasks.c **** 				lists. */
 965:FreeRTOS/tasks.c **** 				eReturn = eBlocked;
 966:FreeRTOS/tasks.c **** 			}
 967:FreeRTOS/tasks.c **** 
 968:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 969:FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 970:FreeRTOS/tasks.c **** 				{
 971:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
 972:FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
 973:FreeRTOS/tasks.c **** 					indefinitely? */
 974:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 975:FreeRTOS/tasks.c **** 					{
 976:FreeRTOS/tasks.c **** 						eReturn = eSuspended;
 977:FreeRTOS/tasks.c **** 					}
 978:FreeRTOS/tasks.c **** 					else
 979:FreeRTOS/tasks.c **** 					{
 980:FreeRTOS/tasks.c **** 						eReturn = eBlocked;
 981:FreeRTOS/tasks.c **** 					}
 982:FreeRTOS/tasks.c **** 				}
 983:FreeRTOS/tasks.c **** 			#endif
 984:FreeRTOS/tasks.c **** 
 985:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 986:FreeRTOS/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 987:FreeRTOS/tasks.c **** 				{
 988:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
 989:FreeRTOS/tasks.c **** 					tasks list. */
 990:FreeRTOS/tasks.c **** 					eReturn = eDeleted;
 991:FreeRTOS/tasks.c **** 				}
 992:FreeRTOS/tasks.c **** 			#endif
 993:FreeRTOS/tasks.c **** 
 994:FreeRTOS/tasks.c **** 			else
 995:FreeRTOS/tasks.c **** 			{
 996:FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
 997:FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
 998:FreeRTOS/tasks.c **** 				eReturn = eReady;
 999:FreeRTOS/tasks.c **** 			}
1000:FreeRTOS/tasks.c **** 		}
1001:FreeRTOS/tasks.c **** 
1002:FreeRTOS/tasks.c **** 		return eReturn;
1003:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1004:FreeRTOS/tasks.c **** 
1005:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1006:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1007:FreeRTOS/tasks.c **** 
1008:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1009:FreeRTOS/tasks.c **** 
1010:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskPriorityGet( TaskHandle_t xTask )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 34


1011:FreeRTOS/tasks.c **** 	{
 845              		.loc 1 1011 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 16
 848              		@ frame_needed = 1, uses_anonymous_args = 0
 849 0000 80B5     		push	{r7, lr}	@
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 7, -8
 852              		.cfi_offset 14, -4
 853 0002 84B0     		sub	sp, sp, #16	@,,
 854              		.cfi_def_cfa_offset 24
 855 0004 00AF     		add	r7, sp, #0	@,,
 856              		.cfi_def_cfa_register 7
 857 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1012:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1013:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
1014:FreeRTOS/tasks.c **** 
1015:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 858              		.loc 1 1015 0
 859 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1016:FreeRTOS/tasks.c **** 		{
1017:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are changing the
1018:FreeRTOS/tasks.c **** 			priority of the calling function. */
1019:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 860              		.loc 1 1019 0
 861 000c 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 862 000e 002B     		cmp	r3, #0	@ tmp113,
 863 0010 02D1     		bne	.L56	@,
 864              		.loc 1 1019 0 is_stmt 0 discriminator 1
 865 0012 074B     		ldr	r3, .L59	@ tmp114,
 866 0014 1B68     		ldr	r3, [r3]	@ D.6577, pxCurrentTCB
 867 0016 00E0     		b	.L57	@
 868              	.L56:
 869              		.loc 1 1019 0 discriminator 2
 870 0018 7B68     		ldr	r3, [r7, #4]	@ D.6577, xTask
 871              	.L57:
 872              		.loc 1 1019 0 discriminator 4
 873 001a FB60     		str	r3, [r7, #12]	@ D.6577, pxTCB
1020:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 874              		.loc 1 1020 0 is_stmt 1 discriminator 4
 875 001c FB68     		ldr	r3, [r7, #12]	@ tmp115, pxTCB
 876 001e DB6A     		ldr	r3, [r3, #44]	@ tmp116, pxTCB_7->uxPriority
 877 0020 BB60     		str	r3, [r7, #8]	@ tmp116, uxReturn
1021:FreeRTOS/tasks.c **** 		}
1022:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 878              		.loc 1 1022 0 discriminator 4
 879 0022 FFF7FEFF 		bl	vPortExitCritical	@
1023:FreeRTOS/tasks.c **** 
1024:FreeRTOS/tasks.c **** 		return uxReturn;
 880              		.loc 1 1024 0 discriminator 4
 881 0026 BB68     		ldr	r3, [r7, #8]	@ D.6578, uxReturn
1025:FreeRTOS/tasks.c **** 	}
 882              		.loc 1 1025 0 discriminator 4
 883 0028 1846     		mov	r0, r3	@, <retval>
 884 002a 1037     		adds	r7, r7, #16	@,,
 885              		.cfi_def_cfa_offset 8
 886 002c BD46     		mov	sp, r7	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 35


 887              		.cfi_def_cfa_register 13
 888              		@ sp needed	@
 889 002e 80BD     		pop	{r7, pc}	@
 890              	.L60:
 891              		.align	2
 892              	.L59:
 893 0030 00000000 		.word	pxCurrentTCB
 894              		.cfi_endproc
 895              	.LFE5:
 896              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 897              		.section	.text.vTaskPrioritySet,"ax",%progbits
 898              		.align	2
 899              		.global	vTaskPrioritySet
 900              		.thumb
 901              		.thumb_func
 902              		.type	vTaskPrioritySet, %function
 903              	vTaskPrioritySet:
 904              	.LFB6:
1026:FreeRTOS/tasks.c **** 
1027:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1028:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1029:FreeRTOS/tasks.c **** 
1030:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1031:FreeRTOS/tasks.c **** 
1032:FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseT_t uxNewPriority )
1033:FreeRTOS/tasks.c **** 	{
 905              		.loc 1 1033 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 24
 908              		@ frame_needed = 1, uses_anonymous_args = 0
 909 0000 80B5     		push	{r7, lr}	@
 910              		.cfi_def_cfa_offset 8
 911              		.cfi_offset 7, -8
 912              		.cfi_offset 14, -4
 913 0002 86B0     		sub	sp, sp, #24	@,,
 914              		.cfi_def_cfa_offset 32
 915 0004 00AF     		add	r7, sp, #0	@,,
 916              		.cfi_def_cfa_register 7
 917 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 918 0008 3960     		str	r1, [r7]	@ uxNewPriority, uxNewPriority
1034:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1035:FreeRTOS/tasks.c **** 	UBaseT_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1036:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 919              		.loc 1 1036 0
 920 000a 0023     		movs	r3, #0	@ tmp136,
 921 000c 7B61     		str	r3, [r7, #20]	@ tmp136, xYieldRequired
1037:FreeRTOS/tasks.c **** 
1038:FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 922              		.loc 1 1038 0
 923 000e 3B68     		ldr	r3, [r7]	@ tmp137, uxNewPriority
 924 0010 072B     		cmp	r3, #7	@ tmp137,
 925 0012 02D9     		bls	.L62	@,
 926              		.loc 1 1038 0 is_stmt 0 discriminator 1
 927 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 928              	.L63:
 929 0018 FEE7     		b	.L63	@
 930              	.L62:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 36


1039:FreeRTOS/tasks.c **** 
1040:FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1041:FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 931              		.loc 1 1041 0 is_stmt 1
 932 001a 3B68     		ldr	r3, [r7]	@ tmp138, uxNewPriority
 933 001c 072B     		cmp	r3, #7	@ tmp138,
 934 001e 01D9     		bls	.L64	@,
1042:FreeRTOS/tasks.c **** 		{
1043:FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 935              		.loc 1 1043 0
 936 0020 0723     		movs	r3, #7	@ tmp139,
 937 0022 3B60     		str	r3, [r7]	@ tmp139, uxNewPriority
 938              	.L64:
1044:FreeRTOS/tasks.c **** 		}
1045:FreeRTOS/tasks.c **** 		else
1046:FreeRTOS/tasks.c **** 		{
1047:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1048:FreeRTOS/tasks.c **** 		}
1049:FreeRTOS/tasks.c **** 
1050:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 939              		.loc 1 1050 0
 940 0024 FFF7FEFF 		bl	vPortEnterCritical	@
1051:FreeRTOS/tasks.c **** 		{
1052:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1053:FreeRTOS/tasks.c **** 			task that is being changed. */
1054:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 941              		.loc 1 1054 0
 942 0028 7B68     		ldr	r3, [r7, #4]	@ tmp140, xTask
 943 002a 002B     		cmp	r3, #0	@ tmp140,
 944 002c 02D1     		bne	.L65	@,
 945              		.loc 1 1054 0 is_stmt 0 discriminator 1
 946 002e 404B     		ldr	r3, .L76	@ tmp141,
 947 0030 1B68     		ldr	r3, [r3]	@ D.6579, pxCurrentTCB
 948 0032 00E0     		b	.L66	@
 949              	.L65:
 950              		.loc 1 1054 0 discriminator 2
 951 0034 7B68     		ldr	r3, [r7, #4]	@ D.6579, xTask
 952              	.L66:
 953              		.loc 1 1054 0 discriminator 4
 954 0036 3B61     		str	r3, [r7, #16]	@ D.6579, pxTCB
1055:FreeRTOS/tasks.c **** 
1056:FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1057:FreeRTOS/tasks.c **** 
1058:FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1059:FreeRTOS/tasks.c **** 			{
1060:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 955              		.loc 1 1060 0 is_stmt 1 discriminator 4
 956 0038 3B69     		ldr	r3, [r7, #16]	@ tmp142, pxTCB
 957 003a 9B6C     		ldr	r3, [r3, #72]	@ tmp143, pxTCB_18->uxBasePriority
 958 003c FB60     		str	r3, [r7, #12]	@ tmp143, uxCurrentBasePriority
1061:FreeRTOS/tasks.c **** 			}
1062:FreeRTOS/tasks.c **** 			#else
1063:FreeRTOS/tasks.c **** 			{
1064:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1065:FreeRTOS/tasks.c **** 			}
1066:FreeRTOS/tasks.c **** 			#endif
1067:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 37


1068:FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 959              		.loc 1 1068 0 discriminator 4
 960 003e FA68     		ldr	r2, [r7, #12]	@ tmp144, uxCurrentBasePriority
 961 0040 3B68     		ldr	r3, [r7]	@ tmp145, uxNewPriority
 962 0042 9A42     		cmp	r2, r3	@ tmp144, tmp145
 963 0044 6ED0     		beq	.L67	@,
1069:FreeRTOS/tasks.c **** 			{
1070:FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1071:FreeRTOS/tasks.c **** 				priority than the calling task. */
1072:FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 964              		.loc 1 1072 0
 965 0046 3A68     		ldr	r2, [r7]	@ tmp146, uxNewPriority
 966 0048 FB68     		ldr	r3, [r7, #12]	@ tmp147, uxCurrentBasePriority
 967 004a 9A42     		cmp	r2, r3	@ tmp146, tmp147
 968 004c 0DD9     		bls	.L68	@,
1073:FreeRTOS/tasks.c **** 				{
1074:FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 969              		.loc 1 1074 0
 970 004e 384B     		ldr	r3, .L76	@ tmp148,
 971 0050 1B68     		ldr	r3, [r3]	@ D.6579, pxCurrentTCB
 972 0052 3A69     		ldr	r2, [r7, #16]	@ tmp149, pxTCB
 973 0054 9A42     		cmp	r2, r3	@ tmp149, D.6579
 974 0056 0FD0     		beq	.L69	@,
1075:FreeRTOS/tasks.c **** 					{
1076:FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1077:FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1078:FreeRTOS/tasks.c **** 						raised above that of the running task? */
1079:FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 975              		.loc 1 1079 0
 976 0058 354B     		ldr	r3, .L76	@ tmp150,
 977 005a 1B68     		ldr	r3, [r3]	@ D.6579, pxCurrentTCB
 978 005c DA6A     		ldr	r2, [r3, #44]	@ D.6581, _21->uxPriority
 979 005e 3B68     		ldr	r3, [r7]	@ tmp151, uxNewPriority
 980 0060 9A42     		cmp	r2, r3	@ D.6581, tmp151
 981 0062 09D8     		bhi	.L69	@,
1080:FreeRTOS/tasks.c **** 						{
1081:FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 982              		.loc 1 1081 0
 983 0064 0123     		movs	r3, #1	@ tmp152,
 984 0066 7B61     		str	r3, [r7, #20]	@ tmp152, xYieldRequired
 985 0068 06E0     		b	.L69	@
 986              	.L68:
1082:FreeRTOS/tasks.c **** 						}
1083:FreeRTOS/tasks.c **** 						else
1084:FreeRTOS/tasks.c **** 						{
1085:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1086:FreeRTOS/tasks.c **** 						}
1087:FreeRTOS/tasks.c **** 					}
1088:FreeRTOS/tasks.c **** 					else
1089:FreeRTOS/tasks.c **** 					{
1090:FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1091:FreeRTOS/tasks.c **** 						but the running task must already be the highest
1092:FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1093:FreeRTOS/tasks.c **** 					}
1094:FreeRTOS/tasks.c **** 				}
1095:FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 987              		.loc 1 1095 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 38


 988 006a 314B     		ldr	r3, .L76	@ tmp153,
 989 006c 1B68     		ldr	r3, [r3]	@ D.6579, pxCurrentTCB
 990 006e 3A69     		ldr	r2, [r7, #16]	@ tmp154, pxTCB
 991 0070 9A42     		cmp	r2, r3	@ tmp154, D.6579
 992 0072 01D1     		bne	.L69	@,
1096:FreeRTOS/tasks.c **** 				{
1097:FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1098:FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1099:FreeRTOS/tasks.c **** 					is ready to execute. */
1100:FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 993              		.loc 1 1100 0
 994 0074 0123     		movs	r3, #1	@ tmp155,
 995 0076 7B61     		str	r3, [r7, #20]	@ tmp155, xYieldRequired
 996              	.L69:
1101:FreeRTOS/tasks.c **** 				}
1102:FreeRTOS/tasks.c **** 				else
1103:FreeRTOS/tasks.c **** 				{
1104:FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1105:FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1106:FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1107:FreeRTOS/tasks.c **** 				}
1108:FreeRTOS/tasks.c **** 
1109:FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1110:FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1111:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1112:FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 997              		.loc 1 1112 0
 998 0078 3B69     		ldr	r3, [r7, #16]	@ tmp156, pxTCB
 999 007a DB6A     		ldr	r3, [r3, #44]	@ tmp157, pxTCB_18->uxPriority
 1000 007c BB60     		str	r3, [r7, #8]	@ tmp157, uxPriorityUsedOnEntry
1113:FreeRTOS/tasks.c **** 
1114:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1115:FreeRTOS/tasks.c **** 				{
1116:FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1117:FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1118:FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1001              		.loc 1 1118 0
 1002 007e 3B69     		ldr	r3, [r7, #16]	@ tmp158, pxTCB
 1003 0080 9A6C     		ldr	r2, [r3, #72]	@ D.6581, pxTCB_18->uxBasePriority
 1004 0082 3B69     		ldr	r3, [r7, #16]	@ tmp159, pxTCB
 1005 0084 DB6A     		ldr	r3, [r3, #44]	@ D.6581, pxTCB_18->uxPriority
 1006 0086 9A42     		cmp	r2, r3	@ D.6581, D.6581
 1007 0088 02D1     		bne	.L70	@,
1119:FreeRTOS/tasks.c **** 					{
1120:FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1008              		.loc 1 1120 0
 1009 008a 3B69     		ldr	r3, [r7, #16]	@ tmp160, pxTCB
 1010 008c 3A68     		ldr	r2, [r7]	@ tmp161, uxNewPriority
 1011 008e DA62     		str	r2, [r3, #44]	@ tmp161, pxTCB_18->uxPriority
 1012              	.L70:
1121:FreeRTOS/tasks.c **** 					}
1122:FreeRTOS/tasks.c **** 					else
1123:FreeRTOS/tasks.c **** 					{
1124:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1125:FreeRTOS/tasks.c **** 					}
1126:FreeRTOS/tasks.c **** 
1127:FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 39


1128:FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1013              		.loc 1 1128 0
 1014 0090 3B69     		ldr	r3, [r7, #16]	@ tmp162, pxTCB
 1015 0092 3A68     		ldr	r2, [r7]	@ tmp163, uxNewPriority
 1016 0094 9A64     		str	r2, [r3, #72]	@ tmp163, pxTCB_18->uxBasePriority
1129:FreeRTOS/tasks.c **** 				}
1130:FreeRTOS/tasks.c **** 				#else
1131:FreeRTOS/tasks.c **** 				{
1132:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1133:FreeRTOS/tasks.c **** 				}
1134:FreeRTOS/tasks.c **** 				#endif
1135:FreeRTOS/tasks.c **** 
1136:FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1137:FreeRTOS/tasks.c **** 				being used for anything else. */
1138:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1017              		.loc 1 1138 0
 1018 0096 3B69     		ldr	r3, [r7, #16]	@ tmp164, pxTCB
 1019 0098 9B69     		ldr	r3, [r3, #24]	@ D.6581, pxTCB_18->xEventListItem.xItemValue
 1020 009a 002B     		cmp	r3, #0	@ D.6582,
 1021 009c 04DB     		blt	.L71	@,
1139:FreeRTOS/tasks.c **** 				{
1140:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - ( Ti
 1022              		.loc 1 1140 0
 1023 009e 3B68     		ldr	r3, [r7]	@ tmp165, uxNewPriority
 1024 00a0 C3F10802 		rsb	r2, r3, #8	@ D.6581, tmp165,
 1025 00a4 3B69     		ldr	r3, [r7, #16]	@ tmp166, pxTCB
 1026 00a6 9A61     		str	r2, [r3, #24]	@ D.6581, pxTCB_18->xEventListItem.xItemValue
 1027              	.L71:
1141:FreeRTOS/tasks.c **** 				}
1142:FreeRTOS/tasks.c **** 				else
1143:FreeRTOS/tasks.c **** 				{
1144:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1145:FreeRTOS/tasks.c **** 				}
1146:FreeRTOS/tasks.c **** 
1147:FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1148:FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1149:FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1150:FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1151:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 1028              		.loc 1 1151 0
 1029 00a8 3B69     		ldr	r3, [r7, #16]	@ tmp167, pxTCB
 1030 00aa 5969     		ldr	r1, [r3, #20]	@ D.6583, pxTCB_18->xGenericListItem.pvContainer
 1031 00ac BA68     		ldr	r2, [r7, #8]	@ tmp168, uxPriorityUsedOnEntry
 1032 00ae 1346     		mov	r3, r2	@ tmp169, tmp168
 1033 00b0 9B00     		lsls	r3, r3, #2	@ tmp169, tmp169,
 1034 00b2 1344     		add	r3, r3, r2	@ tmp169, tmp168
 1035 00b4 9B00     		lsls	r3, r3, #2	@ tmp170, tmp169,
 1036 00b6 1F4A     		ldr	r2, .L76+4	@ tmp171,
 1037 00b8 1344     		add	r3, r3, r2	@ D.6584, tmp171
 1038 00ba 9942     		cmp	r1, r3	@ D.6583, D.6584
 1039 00bc 01D1     		bne	.L72	@,
 1040              		.loc 1 1151 0 is_stmt 0 discriminator 1
 1041 00be 0123     		movs	r3, #1	@ D.6580,
 1042 00c0 00E0     		b	.L73	@
 1043              	.L72:
 1044              		.loc 1 1151 0 discriminator 2
 1045 00c2 0023     		movs	r3, #0	@ D.6580,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 40


 1046              	.L73:
 1047              		.loc 1 1151 0 discriminator 4
 1048 00c4 002B     		cmp	r3, #0	@ D.6580,
 1049 00c6 28D0     		beq	.L74	@,
1152:FreeRTOS/tasks.c **** 				{
1153:FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1154:FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1155:FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1156:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1050              		.loc 1 1156 0 is_stmt 1
 1051 00c8 3B69     		ldr	r3, [r7, #16]	@ tmp172, pxTCB
 1052 00ca 0433     		adds	r3, r3, #4	@ D.6585, tmp172,
 1053 00cc 1846     		mov	r0, r3	@, D.6585
 1054 00ce FFF7FEFF 		bl	uxListRemove	@
 1055 00d2 0346     		mov	r3, r0	@ D.6581,
 1056 00d4 002B     		cmp	r3, #0	@ D.6581,
 1057 00d6 09D1     		bne	.L75	@,
1157:FreeRTOS/tasks.c **** 					{
1158:FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1159:FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1160:FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1161:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1058              		.loc 1 1161 0
 1059 00d8 0122     		movs	r2, #1	@ tmp173,
 1060 00da BB68     		ldr	r3, [r7, #8]	@ tmp174, uxPriorityUsedOnEntry
 1061 00dc 02FA03F3 		lsl	r3, r2, r3	@ D.6581, tmp173, tmp174
 1062 00e0 DA43     		mvns	r2, r3	@ D.6581, D.6581
 1063 00e2 154B     		ldr	r3, .L76+8	@ tmp175,
 1064 00e4 1B68     		ldr	r3, [r3]	@ D.6581, uxTopReadyPriority
 1065 00e6 1340     		ands	r3, r3, r2	@, D.6581, D.6581, D.6581
 1066 00e8 134A     		ldr	r2, .L76+8	@ tmp176,
 1067 00ea 1360     		str	r3, [r2]	@ D.6581, uxTopReadyPriority
 1068              	.L75:
1162:FreeRTOS/tasks.c **** 					}
1163:FreeRTOS/tasks.c **** 					else
1164:FreeRTOS/tasks.c **** 					{
1165:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1166:FreeRTOS/tasks.c **** 					}
1167:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1069              		.loc 1 1167 0
 1070 00ec 3B69     		ldr	r3, [r7, #16]	@ tmp177, pxTCB
 1071 00ee DB6A     		ldr	r3, [r3, #44]	@ D.6581, pxTCB_18->uxPriority
 1072 00f0 0122     		movs	r2, #1	@ tmp178,
 1073 00f2 9A40     		lsls	r2, r2, r3	@ D.6581, tmp178, D.6581
 1074 00f4 104B     		ldr	r3, .L76+8	@ tmp179,
 1075 00f6 1B68     		ldr	r3, [r3]	@ D.6581, uxTopReadyPriority
 1076 00f8 1343     		orrs	r3, r3, r2	@, D.6581, D.6581, D.6581
 1077 00fa 0F4A     		ldr	r2, .L76+8	@ tmp180,
 1078 00fc 1360     		str	r3, [r2]	@ D.6581, uxTopReadyPriority
 1079 00fe 3B69     		ldr	r3, [r7, #16]	@ tmp181, pxTCB
 1080 0100 DA6A     		ldr	r2, [r3, #44]	@ D.6581, pxTCB_18->uxPriority
 1081 0102 1346     		mov	r3, r2	@ tmp182, D.6581
 1082 0104 9B00     		lsls	r3, r3, #2	@ tmp182, tmp182,
 1083 0106 1344     		add	r3, r3, r2	@ tmp182, D.6581
 1084 0108 9B00     		lsls	r3, r3, #2	@ tmp183, tmp182,
 1085 010a 0A4A     		ldr	r2, .L76+4	@ tmp184,
 1086 010c 1A44     		add	r2, r2, r3	@ D.6584, tmp182
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 41


 1087 010e 3B69     		ldr	r3, [r7, #16]	@ tmp185, pxTCB
 1088 0110 0433     		adds	r3, r3, #4	@ D.6585, tmp185,
 1089 0112 1946     		mov	r1, r3	@, D.6585
 1090 0114 1046     		mov	r0, r2	@, D.6584
 1091 0116 FFF7FEFF 		bl	vListInsertEnd	@
 1092              	.L74:
1168:FreeRTOS/tasks.c **** 				}
1169:FreeRTOS/tasks.c **** 				else
1170:FreeRTOS/tasks.c **** 				{
1171:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:FreeRTOS/tasks.c **** 				}
1173:FreeRTOS/tasks.c **** 
1174:FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
 1093              		.loc 1 1174 0
 1094 011a 7B69     		ldr	r3, [r7, #20]	@ tmp186, xYieldRequired
 1095 011c 012B     		cmp	r3, #1	@ tmp186,
 1096 011e 01D1     		bne	.L67	@,
1175:FreeRTOS/tasks.c **** 				{
1176:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1097              		.loc 1 1176 0
 1098 0120 FFF7FEFF 		bl	vPortYield	@
 1099              	.L67:
1177:FreeRTOS/tasks.c **** 				}
1178:FreeRTOS/tasks.c **** 				else
1179:FreeRTOS/tasks.c **** 				{
1180:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1181:FreeRTOS/tasks.c **** 				}
1182:FreeRTOS/tasks.c **** 
1183:FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1184:FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1185:FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1186:FreeRTOS/tasks.c **** 			}
1187:FreeRTOS/tasks.c **** 		}
1188:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1100              		.loc 1 1188 0
 1101 0124 FFF7FEFF 		bl	vPortExitCritical	@
1189:FreeRTOS/tasks.c **** 	}
 1102              		.loc 1 1189 0
 1103 0128 00BF     		nop
 1104 012a 1837     		adds	r7, r7, #24	@,,
 1105              		.cfi_def_cfa_offset 8
 1106 012c BD46     		mov	sp, r7	@,
 1107              		.cfi_def_cfa_register 13
 1108              		@ sp needed	@
 1109 012e 80BD     		pop	{r7, pc}	@
 1110              	.L77:
 1111              		.align	2
 1112              	.L76:
 1113 0130 00000000 		.word	pxCurrentTCB
 1114 0134 00000000 		.word	pxReadyTasksLists
 1115 0138 00000000 		.word	uxTopReadyPriority
 1116              		.cfi_endproc
 1117              	.LFE6:
 1118              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1119              		.section	.text.vTaskSuspend,"ax",%progbits
 1120              		.align	2
 1121              		.global	vTaskSuspend
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 42


 1122              		.thumb
 1123              		.thumb_func
 1124              		.type	vTaskSuspend, %function
 1125              	vTaskSuspend:
 1126              	.LFB7:
1190:FreeRTOS/tasks.c **** 
1191:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1192:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1193:FreeRTOS/tasks.c **** 
1194:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1195:FreeRTOS/tasks.c **** 
1196:FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1197:FreeRTOS/tasks.c **** 	{
 1127              		.loc 1 1197 0
 1128              		.cfi_startproc
 1129              		@ args = 0, pretend = 0, frame = 16
 1130              		@ frame_needed = 1, uses_anonymous_args = 0
 1131 0000 80B5     		push	{r7, lr}	@
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 7, -8
 1134              		.cfi_offset 14, -4
 1135 0002 84B0     		sub	sp, sp, #16	@,,
 1136              		.cfi_def_cfa_offset 24
 1137 0004 00AF     		add	r7, sp, #0	@,,
 1138              		.cfi_def_cfa_register 7
 1139 0006 7860     		str	r0, [r7, #4]	@ xTaskToSuspend, xTaskToSuspend
1198:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1199:FreeRTOS/tasks.c **** 
1200:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 1140              		.loc 1 1200 0
 1141 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1201:FreeRTOS/tasks.c **** 		{
1202:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1203:FreeRTOS/tasks.c **** 			being suspended. */
1204:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1142              		.loc 1 1204 0
 1143 000c 7B68     		ldr	r3, [r7, #4]	@ tmp129, xTaskToSuspend
 1144 000e 002B     		cmp	r3, #0	@ tmp129,
 1145 0010 02D1     		bne	.L79	@,
 1146              		.loc 1 1204 0 is_stmt 0 discriminator 1
 1147 0012 314B     		ldr	r3, .L92	@ tmp130,
 1148 0014 1B68     		ldr	r3, [r3]	@ D.6586, pxCurrentTCB
 1149 0016 00E0     		b	.L80	@
 1150              	.L79:
 1151              		.loc 1 1204 0 discriminator 2
 1152 0018 7B68     		ldr	r3, [r7, #4]	@ D.6586, xTaskToSuspend
 1153              	.L80:
 1154              		.loc 1 1204 0 discriminator 4
 1155 001a FB60     		str	r3, [r7, #12]	@ D.6586, pxTCB
1205:FreeRTOS/tasks.c **** 
1206:FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1207:FreeRTOS/tasks.c **** 
1208:FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1209:FreeRTOS/tasks.c **** 			suspended list. */
1210:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1156              		.loc 1 1210 0 is_stmt 1 discriminator 4
 1157 001c FB68     		ldr	r3, [r7, #12]	@ tmp131, pxTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 43


 1158 001e 0433     		adds	r3, r3, #4	@ D.6587, tmp131,
 1159 0020 1846     		mov	r0, r3	@, D.6587
 1160 0022 FFF7FEFF 		bl	uxListRemove	@
 1161 0026 0346     		mov	r3, r0	@ D.6588,
 1162 0028 002B     		cmp	r3, #0	@ D.6588,
 1163 002a 15D1     		bne	.L81	@,
1211:FreeRTOS/tasks.c **** 			{
1212:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1164              		.loc 1 1212 0
 1165 002c FB68     		ldr	r3, [r7, #12]	@ tmp132, pxTCB
 1166 002e DA6A     		ldr	r2, [r3, #44]	@ D.6588, pxTCB_12->uxPriority
 1167 0030 2A49     		ldr	r1, .L92+4	@ tmp133,
 1168 0032 1346     		mov	r3, r2	@ tmp134, D.6588
 1169 0034 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 1170 0036 1344     		add	r3, r3, r2	@ tmp134, D.6588
 1171 0038 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 1172 003a 0B44     		add	r3, r3, r1	@ tmp136, tmp133
 1173 003c 1B68     		ldr	r3, [r3]	@ D.6588, pxReadyTasksLists[_16].uxNumberOfItems
 1174 003e 002B     		cmp	r3, #0	@ D.6588,
 1175 0040 0AD1     		bne	.L81	@,
 1176              		.loc 1 1212 0 is_stmt 0 discriminator 1
 1177 0042 FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 1178 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6588, pxTCB_12->uxPriority
 1179 0046 0122     		movs	r2, #1	@ tmp138,
 1180 0048 02FA03F3 		lsl	r3, r2, r3	@ D.6588, tmp138, D.6588
 1181 004c DA43     		mvns	r2, r3	@ D.6588, D.6588
 1182 004e 244B     		ldr	r3, .L92+8	@ tmp139,
 1183 0050 1B68     		ldr	r3, [r3]	@ D.6588, uxTopReadyPriority
 1184 0052 1340     		ands	r3, r3, r2	@, D.6588, D.6588, D.6588
 1185 0054 224A     		ldr	r2, .L92+8	@ tmp140,
 1186 0056 1360     		str	r3, [r2]	@ D.6588, uxTopReadyPriority
 1187              	.L81:
1213:FreeRTOS/tasks.c **** 			}
1214:FreeRTOS/tasks.c **** 			else
1215:FreeRTOS/tasks.c **** 			{
1216:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1217:FreeRTOS/tasks.c **** 			}
1218:FreeRTOS/tasks.c **** 
1219:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1220:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1188              		.loc 1 1220 0 is_stmt 1
 1189 0058 FB68     		ldr	r3, [r7, #12]	@ tmp141, pxTCB
 1190 005a 9B6A     		ldr	r3, [r3, #40]	@ D.6589, pxTCB_12->xEventListItem.pvContainer
 1191 005c 002B     		cmp	r3, #0	@ D.6589,
 1192 005e 04D0     		beq	.L83	@,
1221:FreeRTOS/tasks.c **** 			{
1222:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1193              		.loc 1 1222 0
 1194 0060 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 1195 0062 1833     		adds	r3, r3, #24	@ D.6587, tmp142,
 1196 0064 1846     		mov	r0, r3	@, D.6587
 1197 0066 FFF7FEFF 		bl	uxListRemove	@
 1198              	.L83:
1223:FreeRTOS/tasks.c **** 			}
1224:FreeRTOS/tasks.c **** 			else
1225:FreeRTOS/tasks.c **** 			{
1226:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 44


1227:FreeRTOS/tasks.c **** 			}
1228:FreeRTOS/tasks.c **** 
1229:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1199              		.loc 1 1229 0
 1200 006a FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 1201 006c 0433     		adds	r3, r3, #4	@ D.6587, tmp143,
 1202 006e 1946     		mov	r1, r3	@, D.6587
 1203 0070 1C48     		ldr	r0, .L92+12	@,
 1204 0072 FFF7FEFF 		bl	vListInsertEnd	@
1230:FreeRTOS/tasks.c **** 		}
1231:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1205              		.loc 1 1231 0
 1206 0076 FFF7FEFF 		bl	vPortExitCritical	@
1232:FreeRTOS/tasks.c **** 
1233:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1207              		.loc 1 1233 0
 1208 007a 174B     		ldr	r3, .L92	@ tmp144,
 1209 007c 1B68     		ldr	r3, [r3]	@ D.6586, pxCurrentTCB
 1210 007e FA68     		ldr	r2, [r7, #12]	@ tmp145, pxTCB
 1211 0080 9A42     		cmp	r2, r3	@ tmp145, D.6586
 1212 0082 1AD1     		bne	.L84	@,
1234:FreeRTOS/tasks.c **** 		{
1235:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1213              		.loc 1 1235 0
 1214 0084 184B     		ldr	r3, .L92+16	@ tmp146,
 1215 0086 1B68     		ldr	r3, [r3]	@ D.6590, xSchedulerRunning
 1216 0088 002B     		cmp	r3, #0	@ D.6590,
 1217 008a 09D0     		beq	.L85	@,
1236:FreeRTOS/tasks.c **** 			{
1237:FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1238:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1218              		.loc 1 1238 0
 1219 008c 174B     		ldr	r3, .L92+20	@ tmp147,
 1220 008e 1B68     		ldr	r3, [r3]	@ D.6588, uxSchedulerSuspended
 1221 0090 002B     		cmp	r3, #0	@ D.6588,
 1222 0092 02D0     		beq	.L86	@,
 1223              		.loc 1 1238 0 is_stmt 0 discriminator 1
 1224 0094 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1225              	.L87:
 1226 0098 FEE7     		b	.L87	@
 1227              	.L86:
1239:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1228              		.loc 1 1239 0 is_stmt 1
 1229 009a FFF7FEFF 		bl	vPortYield	@
1240:FreeRTOS/tasks.c **** 			}
1241:FreeRTOS/tasks.c **** 			else
1242:FreeRTOS/tasks.c **** 			{
1243:FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1244:FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1245:FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1246:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1247:FreeRTOS/tasks.c **** 				{
1248:FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1249:FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1250:FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1251:FreeRTOS/tasks.c **** 					is. */
1252:FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 45


1253:FreeRTOS/tasks.c **** 				}
1254:FreeRTOS/tasks.c **** 				else
1255:FreeRTOS/tasks.c **** 				{
1256:FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1257:FreeRTOS/tasks.c **** 				}
1258:FreeRTOS/tasks.c **** 			}
1259:FreeRTOS/tasks.c **** 		}
1260:FreeRTOS/tasks.c **** 		else
1261:FreeRTOS/tasks.c **** 		{
1262:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1263:FreeRTOS/tasks.c **** 			{
1264:FreeRTOS/tasks.c **** 				/* A task other than the currently running task was suspended,
1265:FreeRTOS/tasks.c **** 				reset the next expected unblock time in case it referred to the
1266:FreeRTOS/tasks.c **** 				task that is now in the Suspended state. */
1267:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
1268:FreeRTOS/tasks.c **** 				{
1269:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
1270:FreeRTOS/tasks.c **** 				}
1271:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
1272:FreeRTOS/tasks.c **** 			}
1273:FreeRTOS/tasks.c **** 			else
1274:FreeRTOS/tasks.c **** 			{
1275:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1276:FreeRTOS/tasks.c **** 			}
1277:FreeRTOS/tasks.c **** 		}
1278:FreeRTOS/tasks.c **** 	}
 1230              		.loc 1 1278 0
 1231 009e 16E0     		b	.L91	@
 1232              	.L85:
1246:FreeRTOS/tasks.c **** 				{
 1233              		.loc 1 1246 0
 1234 00a0 104B     		ldr	r3, .L92+12	@ tmp148,
 1235 00a2 1A68     		ldr	r2, [r3]	@ D.6588, xSuspendedTaskList.uxNumberOfItems
 1236 00a4 124B     		ldr	r3, .L92+24	@ tmp149,
 1237 00a6 1B68     		ldr	r3, [r3]	@ D.6588, uxCurrentNumberOfTasks
 1238 00a8 9A42     		cmp	r2, r3	@ D.6588, D.6588
 1239 00aa 03D1     		bne	.L89	@,
1252:FreeRTOS/tasks.c **** 				}
 1240              		.loc 1 1252 0
 1241 00ac 0A4B     		ldr	r3, .L92	@ tmp150,
 1242 00ae 0022     		movs	r2, #0	@ tmp151,
 1243 00b0 1A60     		str	r2, [r3]	@ tmp151, pxCurrentTCB
 1244              		.loc 1 1278 0
 1245 00b2 0CE0     		b	.L91	@
 1246              	.L89:
1256:FreeRTOS/tasks.c **** 				}
 1247              		.loc 1 1256 0
 1248 00b4 FFF7FEFF 		bl	vTaskSwitchContext	@
 1249              		.loc 1 1278 0
 1250 00b8 09E0     		b	.L91	@
 1251              	.L84:
1262:FreeRTOS/tasks.c **** 			{
 1252              		.loc 1 1262 0
 1253 00ba 0B4B     		ldr	r3, .L92+16	@ tmp152,
 1254 00bc 1B68     		ldr	r3, [r3]	@ D.6590, xSchedulerRunning
 1255 00be 002B     		cmp	r3, #0	@ D.6590,
 1256 00c0 05D0     		beq	.L91	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 46


1267:FreeRTOS/tasks.c **** 				{
 1257              		.loc 1 1267 0
 1258 00c2 FFF7FEFF 		bl	vPortEnterCritical	@
1269:FreeRTOS/tasks.c **** 				}
 1259              		.loc 1 1269 0
 1260 00c6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
1271:FreeRTOS/tasks.c **** 			}
 1261              		.loc 1 1271 0
 1262 00ca FFF7FEFF 		bl	vPortExitCritical	@
 1263              	.L91:
 1264              		.loc 1 1278 0
 1265 00ce 00BF     		nop
 1266 00d0 1037     		adds	r7, r7, #16	@,,
 1267              		.cfi_def_cfa_offset 8
 1268 00d2 BD46     		mov	sp, r7	@,
 1269              		.cfi_def_cfa_register 13
 1270              		@ sp needed	@
 1271 00d4 80BD     		pop	{r7, pc}	@
 1272              	.L93:
 1273 00d6 00BF     		.align	2
 1274              	.L92:
 1275 00d8 00000000 		.word	pxCurrentTCB
 1276 00dc 00000000 		.word	pxReadyTasksLists
 1277 00e0 00000000 		.word	uxTopReadyPriority
 1278 00e4 00000000 		.word	xSuspendedTaskList
 1279 00e8 00000000 		.word	xSchedulerRunning
 1280 00ec 00000000 		.word	uxSchedulerSuspended
 1281 00f0 00000000 		.word	uxCurrentNumberOfTasks
 1282              		.cfi_endproc
 1283              	.LFE7:
 1284              		.size	vTaskSuspend, .-vTaskSuspend
 1285              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1286              		.align	2
 1287              		.thumb
 1288              		.thumb_func
 1289              		.type	prvTaskIsTaskSuspended, %function
 1290              	prvTaskIsTaskSuspended:
 1291              	.LFB8:
1279:FreeRTOS/tasks.c **** 
1280:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1281:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1282:FreeRTOS/tasks.c **** 
1283:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1284:FreeRTOS/tasks.c **** 
1285:FreeRTOS/tasks.c **** 	static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1286:FreeRTOS/tasks.c **** 	{
 1292              		.loc 1 1286 0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 16
 1295              		@ frame_needed = 1, uses_anonymous_args = 0
 1296 0000 80B5     		push	{r7, lr}	@
 1297              		.cfi_def_cfa_offset 8
 1298              		.cfi_offset 7, -8
 1299              		.cfi_offset 14, -4
 1300 0002 84B0     		sub	sp, sp, #16	@,,
 1301              		.cfi_def_cfa_offset 24
 1302 0004 00AF     		add	r7, sp, #0	@,,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 47


 1303              		.cfi_def_cfa_register 7
 1304 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1287:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 1305              		.loc 1 1287 0
 1306 0008 0023     		movs	r3, #0	@ tmp117,
 1307 000a FB60     		str	r3, [r7, #12]	@ tmp117, xReturn
1288:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1308              		.loc 1 1288 0
 1309 000c 7B68     		ldr	r3, [r7, #4]	@ tmp118, xTask
 1310 000e BB60     		str	r3, [r7, #8]	@ tmp118, pxTCB
1289:FreeRTOS/tasks.c **** 
1290:FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1291:FreeRTOS/tasks.c **** 		section. */
1292:FreeRTOS/tasks.c **** 
1293:FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1294:FreeRTOS/tasks.c **** 		configASSERT( xTask );
 1311              		.loc 1 1294 0
 1312 0010 7B68     		ldr	r3, [r7, #4]	@ tmp119, xTask
 1313 0012 002B     		cmp	r3, #0	@ tmp119,
 1314 0014 02D1     		bne	.L95	@,
 1315              		.loc 1 1294 0 is_stmt 0 discriminator 1
 1316 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1317              	.L96:
 1318 001a FEE7     		b	.L96	@
 1319              	.L95:
1295:FreeRTOS/tasks.c **** 
1296:FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1297:FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1320              		.loc 1 1297 0 is_stmt 1
 1321 001c BB68     		ldr	r3, [r7, #8]	@ tmp120, pxTCB
 1322 001e 5B69     		ldr	r3, [r3, #20]	@ D.6592, pxTCB_6->xGenericListItem.pvContainer
 1323 0020 0E4A     		ldr	r2, .L103	@ tmp121,
 1324 0022 9342     		cmp	r3, r2	@ D.6592, tmp121
 1325 0024 01D1     		bne	.L97	@,
 1326              		.loc 1 1297 0 is_stmt 0 discriminator 1
 1327 0026 0123     		movs	r3, #1	@ D.6591,
 1328 0028 00E0     		b	.L98	@
 1329              	.L97:
 1330              		.loc 1 1297 0 discriminator 2
 1331 002a 0023     		movs	r3, #0	@ D.6591,
 1332              	.L98:
 1333              		.loc 1 1297 0 discriminator 4
 1334 002c 002B     		cmp	r3, #0	@ D.6591,
 1335 002e 0FD0     		beq	.L99	@,
1298:FreeRTOS/tasks.c **** 		{
1299:FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1300:FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1336              		.loc 1 1300 0 is_stmt 1
 1337 0030 BB68     		ldr	r3, [r7, #8]	@ tmp122, pxTCB
 1338 0032 9B6A     		ldr	r3, [r3, #40]	@ D.6592, pxTCB_6->xEventListItem.pvContainer
 1339 0034 0A4A     		ldr	r2, .L103+4	@ tmp123,
 1340 0036 9342     		cmp	r3, r2	@ D.6592, tmp123
 1341 0038 0AD0     		beq	.L99	@,
1301:FreeRTOS/tasks.c **** 			{
1302:FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1303:FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1304:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 48


 1342              		.loc 1 1304 0
 1343 003a BB68     		ldr	r3, [r7, #8]	@ tmp124, pxTCB
 1344 003c 9B6A     		ldr	r3, [r3, #40]	@ D.6592, pxTCB_6->xEventListItem.pvContainer
 1345 003e 002B     		cmp	r3, #0	@ D.6592,
 1346 0040 01D1     		bne	.L100	@,
 1347              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1348 0042 0123     		movs	r3, #1	@ D.6591,
 1349 0044 00E0     		b	.L101	@
 1350              	.L100:
 1351              		.loc 1 1304 0 discriminator 2
 1352 0046 0023     		movs	r3, #0	@ D.6591,
 1353              	.L101:
 1354              		.loc 1 1304 0 discriminator 4
 1355 0048 002B     		cmp	r3, #0	@ D.6591,
 1356 004a 01D0     		beq	.L99	@,
1305:FreeRTOS/tasks.c **** 				{
1306:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 1357              		.loc 1 1306 0 is_stmt 1
 1358 004c 0123     		movs	r3, #1	@ tmp125,
 1359 004e FB60     		str	r3, [r7, #12]	@ tmp125, xReturn
 1360              	.L99:
1307:FreeRTOS/tasks.c **** 				}
1308:FreeRTOS/tasks.c **** 				else
1309:FreeRTOS/tasks.c **** 				{
1310:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1311:FreeRTOS/tasks.c **** 				}
1312:FreeRTOS/tasks.c **** 			}
1313:FreeRTOS/tasks.c **** 			else
1314:FreeRTOS/tasks.c **** 			{
1315:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1316:FreeRTOS/tasks.c **** 			}
1317:FreeRTOS/tasks.c **** 		}
1318:FreeRTOS/tasks.c **** 		else
1319:FreeRTOS/tasks.c **** 		{
1320:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1321:FreeRTOS/tasks.c **** 		}
1322:FreeRTOS/tasks.c **** 
1323:FreeRTOS/tasks.c **** 		return xReturn;
 1361              		.loc 1 1323 0
 1362 0050 FB68     		ldr	r3, [r7, #12]	@ D.6593, xReturn
1324:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1363              		.loc 1 1324 0
 1364 0052 1846     		mov	r0, r3	@, <retval>
 1365 0054 1037     		adds	r7, r7, #16	@,,
 1366              		.cfi_def_cfa_offset 8
 1367 0056 BD46     		mov	sp, r7	@,
 1368              		.cfi_def_cfa_register 13
 1369              		@ sp needed	@
 1370 0058 80BD     		pop	{r7, pc}	@
 1371              	.L104:
 1372 005a 00BF     		.align	2
 1373              	.L103:
 1374 005c 00000000 		.word	xSuspendedTaskList
 1375 0060 00000000 		.word	xPendingReadyList
 1376              		.cfi_endproc
 1377              	.LFE8:
 1378              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 49


 1379              		.section	.text.vTaskResume,"ax",%progbits
 1380              		.align	2
 1381              		.global	vTaskResume
 1382              		.thumb
 1383              		.thumb_func
 1384              		.type	vTaskResume, %function
 1385              	vTaskResume:
 1386              	.LFB9:
1325:FreeRTOS/tasks.c **** 
1326:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1327:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1328:FreeRTOS/tasks.c **** 
1329:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1330:FreeRTOS/tasks.c **** 
1331:FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1332:FreeRTOS/tasks.c **** 	{
 1387              		.loc 1 1332 0
 1388              		.cfi_startproc
 1389              		@ args = 0, pretend = 0, frame = 16
 1390              		@ frame_needed = 1, uses_anonymous_args = 0
 1391 0000 80B5     		push	{r7, lr}	@
 1392              		.cfi_def_cfa_offset 8
 1393              		.cfi_offset 7, -8
 1394              		.cfi_offset 14, -4
 1395 0002 84B0     		sub	sp, sp, #16	@,,
 1396              		.cfi_def_cfa_offset 24
 1397 0004 00AF     		add	r7, sp, #0	@,,
 1398              		.cfi_def_cfa_register 7
 1399 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
1333:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1400              		.loc 1 1333 0
 1401 0008 7B68     		ldr	r3, [r7, #4]	@ tmp123, xTaskToResume
 1402 000a FB60     		str	r3, [r7, #12]	@ tmp123, pxTCB
1334:FreeRTOS/tasks.c **** 
1335:FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1336:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1403              		.loc 1 1336 0
 1404 000c 7B68     		ldr	r3, [r7, #4]	@ tmp124, xTaskToResume
 1405 000e 002B     		cmp	r3, #0	@ tmp124,
 1406 0010 02D1     		bne	.L106	@,
 1407              		.loc 1 1336 0 is_stmt 0 discriminator 1
 1408 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1409              	.L107:
 1410 0016 FEE7     		b	.L107	@
 1411              	.L106:
1337:FreeRTOS/tasks.c **** 
1338:FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1339:FreeRTOS/tasks.c **** 		currently executing task. */
1340:FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1412              		.loc 1 1340 0 is_stmt 1
 1413 0018 FB68     		ldr	r3, [r7, #12]	@ tmp125, pxTCB
 1414 001a 002B     		cmp	r3, #0	@ tmp125,
 1415 001c 33D0     		beq	.L110	@,
 1416              		.loc 1 1340 0 is_stmt 0 discriminator 1
 1417 001e 1C4B     		ldr	r3, .L111	@ tmp126,
 1418 0020 1B68     		ldr	r3, [r3]	@ D.6594, pxCurrentTCB
 1419 0022 FA68     		ldr	r2, [r7, #12]	@ tmp127, pxTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 50


 1420 0024 9A42     		cmp	r2, r3	@ tmp127, D.6594
 1421 0026 2ED0     		beq	.L110	@,
1341:FreeRTOS/tasks.c **** 		{
1342:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 1422              		.loc 1 1342 0 is_stmt 1
 1423 0028 FFF7FEFF 		bl	vPortEnterCritical	@
1343:FreeRTOS/tasks.c **** 			{
1344:FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1424              		.loc 1 1344 0
 1425 002c F868     		ldr	r0, [r7, #12]	@, pxTCB
 1426 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1427 0032 0346     		mov	r3, r0	@ D.6595,
 1428 0034 012B     		cmp	r3, #1	@ D.6595,
 1429 0036 24D1     		bne	.L109	@,
1345:FreeRTOS/tasks.c **** 				{
1346:FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1347:FreeRTOS/tasks.c **** 
1348:FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1349:FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1350:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1430              		.loc 1 1350 0
 1431 0038 FB68     		ldr	r3, [r7, #12]	@ tmp128, pxTCB
 1432 003a 0433     		adds	r3, r3, #4	@ D.6596, tmp128,
 1433 003c 1846     		mov	r0, r3	@, D.6596
 1434 003e FFF7FEFF 		bl	uxListRemove	@
1351:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1435              		.loc 1 1351 0
 1436 0042 FB68     		ldr	r3, [r7, #12]	@ tmp129, pxTCB
 1437 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6597, pxTCB_4->uxPriority
 1438 0046 0122     		movs	r2, #1	@ tmp130,
 1439 0048 9A40     		lsls	r2, r2, r3	@ D.6597, tmp130, D.6597
 1440 004a 124B     		ldr	r3, .L111+4	@ tmp131,
 1441 004c 1B68     		ldr	r3, [r3]	@ D.6597, uxTopReadyPriority
 1442 004e 1343     		orrs	r3, r3, r2	@, D.6597, D.6597, D.6597
 1443 0050 104A     		ldr	r2, .L111+4	@ tmp132,
 1444 0052 1360     		str	r3, [r2]	@ D.6597, uxTopReadyPriority
 1445 0054 FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 1446 0056 DA6A     		ldr	r2, [r3, #44]	@ D.6597, pxTCB_4->uxPriority
 1447 0058 1346     		mov	r3, r2	@ tmp134, D.6597
 1448 005a 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 1449 005c 1344     		add	r3, r3, r2	@ tmp134, D.6597
 1450 005e 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 1451 0060 0D4A     		ldr	r2, .L111+8	@ tmp136,
 1452 0062 1A44     		add	r2, r2, r3	@ D.6598, tmp134
 1453 0064 FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 1454 0066 0433     		adds	r3, r3, #4	@ D.6596, tmp137,
 1455 0068 1946     		mov	r1, r3	@, D.6596
 1456 006a 1046     		mov	r0, r2	@, D.6598
 1457 006c FFF7FEFF 		bl	vListInsertEnd	@
1352:FreeRTOS/tasks.c **** 
1353:FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1354:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1458              		.loc 1 1354 0
 1459 0070 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 1460 0072 DA6A     		ldr	r2, [r3, #44]	@ D.6597, pxTCB_4->uxPriority
 1461 0074 064B     		ldr	r3, .L111	@ tmp139,
 1462 0076 1B68     		ldr	r3, [r3]	@ D.6594, pxCurrentTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 51


 1463 0078 DB6A     		ldr	r3, [r3, #44]	@ D.6597, _22->uxPriority
 1464 007a 9A42     		cmp	r2, r3	@ D.6597, D.6597
 1465 007c 01D3     		bcc	.L109	@,
1355:FreeRTOS/tasks.c **** 					{
1356:FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1357:FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1358:FreeRTOS/tasks.c **** 						next yield. */
1359:FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1466              		.loc 1 1359 0
 1467 007e FFF7FEFF 		bl	vPortYield	@
 1468              	.L109:
1360:FreeRTOS/tasks.c **** 					}
1361:FreeRTOS/tasks.c **** 					else
1362:FreeRTOS/tasks.c **** 					{
1363:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1364:FreeRTOS/tasks.c **** 					}
1365:FreeRTOS/tasks.c **** 				}
1366:FreeRTOS/tasks.c **** 				else
1367:FreeRTOS/tasks.c **** 				{
1368:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1369:FreeRTOS/tasks.c **** 				}
1370:FreeRTOS/tasks.c **** 			}
1371:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1469              		.loc 1 1371 0
 1470 0082 FFF7FEFF 		bl	vPortExitCritical	@
 1471              	.L110:
1372:FreeRTOS/tasks.c **** 		}
1373:FreeRTOS/tasks.c **** 		else
1374:FreeRTOS/tasks.c **** 		{
1375:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1376:FreeRTOS/tasks.c **** 		}
1377:FreeRTOS/tasks.c **** 	}
 1472              		.loc 1 1377 0
 1473 0086 00BF     		nop
 1474 0088 1037     		adds	r7, r7, #16	@,,
 1475              		.cfi_def_cfa_offset 8
 1476 008a BD46     		mov	sp, r7	@,
 1477              		.cfi_def_cfa_register 13
 1478              		@ sp needed	@
 1479 008c 80BD     		pop	{r7, pc}	@
 1480              	.L112:
 1481 008e 00BF     		.align	2
 1482              	.L111:
 1483 0090 00000000 		.word	pxCurrentTCB
 1484 0094 00000000 		.word	uxTopReadyPriority
 1485 0098 00000000 		.word	pxReadyTasksLists
 1486              		.cfi_endproc
 1487              	.LFE9:
 1488              		.size	vTaskResume, .-vTaskResume
 1489              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1490              		.align	2
 1491              		.global	xTaskResumeFromISR
 1492              		.thumb
 1493              		.thumb_func
 1494              		.type	xTaskResumeFromISR, %function
 1495              	xTaskResumeFromISR:
 1496              	.LFB10:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 52


1378:FreeRTOS/tasks.c **** 
1379:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1380:FreeRTOS/tasks.c **** 
1381:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1382:FreeRTOS/tasks.c **** 
1383:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1384:FreeRTOS/tasks.c **** 
1385:FreeRTOS/tasks.c **** 	BaseT_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1386:FreeRTOS/tasks.c **** 	{
 1497              		.loc 1 1386 0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 24
 1500              		@ frame_needed = 1, uses_anonymous_args = 0
 1501 0000 80B5     		push	{r7, lr}	@
 1502              		.cfi_def_cfa_offset 8
 1503              		.cfi_offset 7, -8
 1504              		.cfi_offset 14, -4
 1505 0002 86B0     		sub	sp, sp, #24	@,,
 1506              		.cfi_def_cfa_offset 32
 1507 0004 00AF     		add	r7, sp, #0	@,,
 1508              		.cfi_def_cfa_register 7
 1509 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
1387:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 1510              		.loc 1 1387 0
 1511 0008 0023     		movs	r3, #0	@ tmp126,
 1512 000a 7B61     		str	r3, [r7, #20]	@ tmp126, xYieldRequired
1388:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1513              		.loc 1 1388 0
 1514 000c 7B68     		ldr	r3, [r7, #4]	@ tmp127, xTaskToResume
 1515 000e 3B61     		str	r3, [r7, #16]	@ tmp127, pxTCB
1389:FreeRTOS/tasks.c **** 	UBaseT_t uxSavedInterruptStatus;
1390:FreeRTOS/tasks.c **** 
1391:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1516              		.loc 1 1391 0
 1517 0010 7B68     		ldr	r3, [r7, #4]	@ tmp128, xTaskToResume
 1518 0012 002B     		cmp	r3, #0	@ tmp128,
 1519 0014 02D1     		bne	.L114	@,
 1520              		.loc 1 1391 0 is_stmt 0 discriminator 1
 1521 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1522              	.L115:
 1523 001a FEE7     		b	.L115	@
 1524              	.L114:
1392:FreeRTOS/tasks.c **** 
1393:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1394:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1395:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1396:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1397:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1398:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1399:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1400:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1401:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1402:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1403:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1404:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1405:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1406:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 53


1407:FreeRTOS/tasks.c **** 		provided on the following link:
1408:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1409:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1525              		.loc 1 1409 0 is_stmt 1
 1526 001c FFF7FEFF 		bl	vPortValidateInterruptPriority	@
1410:FreeRTOS/tasks.c **** 
1411:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1527              		.loc 1 1411 0
 1528 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1529 0024 F860     		str	r0, [r7, #12]	@, uxSavedInterruptStatus
1412:FreeRTOS/tasks.c **** 		{
1413:FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1530              		.loc 1 1413 0
 1531 0026 3869     		ldr	r0, [r7, #16]	@, pxTCB
 1532 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1533 002c 0346     		mov	r3, r0	@ D.6599,
 1534 002e 012B     		cmp	r3, #1	@ D.6599,
 1535 0030 2FD1     		bne	.L116	@,
1414:FreeRTOS/tasks.c **** 			{
1415:FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1416:FreeRTOS/tasks.c **** 
1417:FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1418:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1536              		.loc 1 1418 0
 1537 0032 1C4B     		ldr	r3, .L121	@ tmp129,
 1538 0034 1B68     		ldr	r3, [r3]	@ D.6600, uxSchedulerSuspended
 1539 0036 002B     		cmp	r3, #0	@ D.6600,
 1540 0038 25D1     		bne	.L117	@,
1419:FreeRTOS/tasks.c **** 				{
1420:FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1421:FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1422:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1541              		.loc 1 1422 0
 1542 003a 3B69     		ldr	r3, [r7, #16]	@ tmp130, pxTCB
 1543 003c DA6A     		ldr	r2, [r3, #44]	@ D.6600, pxTCB_8->uxPriority
 1544 003e 1A4B     		ldr	r3, .L121+4	@ tmp131,
 1545 0040 1B68     		ldr	r3, [r3]	@ D.6601, pxCurrentTCB
 1546 0042 DB6A     		ldr	r3, [r3, #44]	@ D.6600, _17->uxPriority
 1547 0044 9A42     		cmp	r2, r3	@ D.6600, D.6600
 1548 0046 01D3     		bcc	.L118	@,
1423:FreeRTOS/tasks.c **** 					{
1424:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 1549              		.loc 1 1424 0
 1550 0048 0123     		movs	r3, #1	@ tmp132,
 1551 004a 7B61     		str	r3, [r7, #20]	@ tmp132, xYieldRequired
 1552              	.L118:
1425:FreeRTOS/tasks.c **** 					}
1426:FreeRTOS/tasks.c **** 					else
1427:FreeRTOS/tasks.c **** 					{
1428:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1429:FreeRTOS/tasks.c **** 					}
1430:FreeRTOS/tasks.c **** 
1431:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1553              		.loc 1 1431 0
 1554 004c 3B69     		ldr	r3, [r7, #16]	@ tmp133, pxTCB
 1555 004e 0433     		adds	r3, r3, #4	@ D.6602, tmp133,
 1556 0050 1846     		mov	r0, r3	@, D.6602
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 54


 1557 0052 FFF7FEFF 		bl	uxListRemove	@
1432:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1558              		.loc 1 1432 0
 1559 0056 3B69     		ldr	r3, [r7, #16]	@ tmp134, pxTCB
 1560 0058 DB6A     		ldr	r3, [r3, #44]	@ D.6600, pxTCB_8->uxPriority
 1561 005a 0122     		movs	r2, #1	@ tmp135,
 1562 005c 9A40     		lsls	r2, r2, r3	@ D.6600, tmp135, D.6600
 1563 005e 134B     		ldr	r3, .L121+8	@ tmp136,
 1564 0060 1B68     		ldr	r3, [r3]	@ D.6600, uxTopReadyPriority
 1565 0062 1343     		orrs	r3, r3, r2	@, D.6600, D.6600, D.6600
 1566 0064 114A     		ldr	r2, .L121+8	@ tmp137,
 1567 0066 1360     		str	r3, [r2]	@ D.6600, uxTopReadyPriority
 1568 0068 3B69     		ldr	r3, [r7, #16]	@ tmp138, pxTCB
 1569 006a DA6A     		ldr	r2, [r3, #44]	@ D.6600, pxTCB_8->uxPriority
 1570 006c 1346     		mov	r3, r2	@ tmp139, D.6600
 1571 006e 9B00     		lsls	r3, r3, #2	@ tmp139, tmp139,
 1572 0070 1344     		add	r3, r3, r2	@ tmp139, D.6600
 1573 0072 9B00     		lsls	r3, r3, #2	@ tmp140, tmp139,
 1574 0074 0E4A     		ldr	r2, .L121+12	@ tmp141,
 1575 0076 1A44     		add	r2, r2, r3	@ D.6603, tmp139
 1576 0078 3B69     		ldr	r3, [r7, #16]	@ tmp142, pxTCB
 1577 007a 0433     		adds	r3, r3, #4	@ D.6602, tmp142,
 1578 007c 1946     		mov	r1, r3	@, D.6602
 1579 007e 1046     		mov	r0, r2	@, D.6603
 1580 0080 FFF7FEFF 		bl	vListInsertEnd	@
 1581 0084 05E0     		b	.L116	@
 1582              	.L117:
1433:FreeRTOS/tasks.c **** 				}
1434:FreeRTOS/tasks.c **** 				else
1435:FreeRTOS/tasks.c **** 				{
1436:FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1437:FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1438:FreeRTOS/tasks.c **** 					unsuspended. */
1439:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1583              		.loc 1 1439 0
 1584 0086 3B69     		ldr	r3, [r7, #16]	@ tmp143, pxTCB
 1585 0088 1833     		adds	r3, r3, #24	@ D.6602, tmp143,
 1586 008a 1946     		mov	r1, r3	@, D.6602
 1587 008c 0948     		ldr	r0, .L121+16	@,
 1588 008e FFF7FEFF 		bl	vListInsertEnd	@
 1589              	.L116:
1440:FreeRTOS/tasks.c **** 				}
1441:FreeRTOS/tasks.c **** 			}
1442:FreeRTOS/tasks.c **** 			else
1443:FreeRTOS/tasks.c **** 			{
1444:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1445:FreeRTOS/tasks.c **** 			}
1446:FreeRTOS/tasks.c **** 		}
1447:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1590              		.loc 1 1447 0
 1591 0092 F868     		ldr	r0, [r7, #12]	@, uxSavedInterruptStatus
 1592 0094 FFF7FEFF 		bl	vPortClearInterruptMask	@
1448:FreeRTOS/tasks.c **** 
1449:FreeRTOS/tasks.c **** 		return xYieldRequired;
 1593              		.loc 1 1449 0
 1594 0098 7B69     		ldr	r3, [r7, #20]	@ D.6604, xYieldRequired
1450:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 55


 1595              		.loc 1 1450 0
 1596 009a 1846     		mov	r0, r3	@, <retval>
 1597 009c 1837     		adds	r7, r7, #24	@,,
 1598              		.cfi_def_cfa_offset 8
 1599 009e BD46     		mov	sp, r7	@,
 1600              		.cfi_def_cfa_register 13
 1601              		@ sp needed	@
 1602 00a0 80BD     		pop	{r7, pc}	@
 1603              	.L122:
 1604 00a2 00BF     		.align	2
 1605              	.L121:
 1606 00a4 00000000 		.word	uxSchedulerSuspended
 1607 00a8 00000000 		.word	pxCurrentTCB
 1608 00ac 00000000 		.word	uxTopReadyPriority
 1609 00b0 00000000 		.word	pxReadyTasksLists
 1610 00b4 00000000 		.word	xPendingReadyList
 1611              		.cfi_endproc
 1612              	.LFE10:
 1613              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1614              		.section	.rodata
 1615              		.align	2
 1616              	.LC0:
 1617 0000 49444C45 		.ascii	"IDLE\000"
 1617      00
 1618              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1619              		.align	2
 1620              		.global	vTaskStartScheduler
 1621              		.thumb
 1622              		.thumb_func
 1623              		.type	vTaskStartScheduler, %function
 1624              	vTaskStartScheduler:
 1625              	.LFB11:
1451:FreeRTOS/tasks.c **** 
1452:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1453:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1454:FreeRTOS/tasks.c **** 
1455:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1456:FreeRTOS/tasks.c **** {
 1626              		.loc 1 1456 0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 8
 1629              		@ frame_needed = 1, uses_anonymous_args = 0
 1630 0000 80B5     		push	{r7, lr}	@
 1631              		.cfi_def_cfa_offset 8
 1632              		.cfi_offset 7, -8
 1633              		.cfi_offset 14, -4
 1634 0002 86B0     		sub	sp, sp, #24	@,,
 1635              		.cfi_def_cfa_offset 32
 1636 0004 04AF     		add	r7, sp, #16	@,,
 1637              		.cfi_def_cfa 7, 16
1457:FreeRTOS/tasks.c **** BaseT_t xReturn;
1458:FreeRTOS/tasks.c **** 
1459:FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1460:FreeRTOS/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1461:FreeRTOS/tasks.c **** 	{
1462:FreeRTOS/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1463:FreeRTOS/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 56


1464:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1465:FreeRTOS/tasks.c **** 	}
1466:FreeRTOS/tasks.c **** 	#else
1467:FreeRTOS/tasks.c **** 	{
1468:FreeRTOS/tasks.c **** 		/* Create the idle task without storing its handle. */
1469:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
 1638              		.loc 1 1469 0
 1639 0006 0023     		movs	r3, #0	@ tmp111,
 1640 0008 0393     		str	r3, [sp, #12]	@ tmp111,
 1641 000a 0023     		movs	r3, #0	@ tmp112,
 1642 000c 0293     		str	r3, [sp, #8]	@ tmp112,
 1643 000e 0023     		movs	r3, #0	@ tmp113,
 1644 0010 0193     		str	r3, [sp, #4]	@ tmp113,
 1645 0012 0023     		movs	r3, #0	@ tmp114,
 1646 0014 0093     		str	r3, [sp]	@ tmp114,
 1647 0016 0023     		movs	r3, #0	@,
 1648 0018 4FF48072 		mov	r2, #256	@,
 1649 001c 0E49     		ldr	r1, .L128	@,
 1650 001e 0F48     		ldr	r0, .L128+4	@,
 1651 0020 FFF7FEFF 		bl	xTaskGenericCreate	@
 1652 0024 7860     		str	r0, [r7, #4]	@, xReturn
1470:FreeRTOS/tasks.c **** 	}
1471:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1472:FreeRTOS/tasks.c **** 
1473:FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1474:FreeRTOS/tasks.c **** 	{
1475:FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1476:FreeRTOS/tasks.c **** 		{
1477:FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1478:FreeRTOS/tasks.c **** 		}
1479:FreeRTOS/tasks.c **** 		else
1480:FreeRTOS/tasks.c **** 		{
1481:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:FreeRTOS/tasks.c **** 		}
1483:FreeRTOS/tasks.c **** 	}
1484:FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1485:FreeRTOS/tasks.c **** 
1486:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 1653              		.loc 1 1486 0
 1654 0026 7B68     		ldr	r3, [r7, #4]	@ tmp115, xReturn
 1655 0028 012B     		cmp	r3, #1	@ tmp115,
 1656 002a 0AD1     		bne	.L124	@,
1487:FreeRTOS/tasks.c **** 	{
1488:FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1489:FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1490:FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1491:FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1492:FreeRTOS/tasks.c **** 		starts to run. */
1493:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
 1657              		.loc 1 1493 0
 1658 002c FFF7FEFF 		bl	ulPortSetInterruptMask	@
1494:FreeRTOS/tasks.c **** 
1495:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1496:FreeRTOS/tasks.c **** 		{
1497:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1498:FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1499:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 57


1500:FreeRTOS/tasks.c **** 		}
1501:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1502:FreeRTOS/tasks.c **** 
1503:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1659              		.loc 1 1503 0
 1660 0030 0B4B     		ldr	r3, .L128+8	@ tmp116,
 1661 0032 0122     		movs	r2, #1	@ tmp117,
 1662 0034 1A60     		str	r2, [r3]	@ tmp117, xSchedulerRunning
1504:FreeRTOS/tasks.c **** 		xTickCount = ( TickT_t ) 0U;
 1663              		.loc 1 1504 0
 1664 0036 0B4B     		ldr	r3, .L128+12	@ tmp118,
 1665 0038 0022     		movs	r2, #0	@ tmp119,
 1666 003a 1A60     		str	r2, [r3]	@ tmp119, xTickCount
1505:FreeRTOS/tasks.c **** 
1506:FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1507:FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1508:FreeRTOS/tasks.c **** 		the run time counter time base. */
1509:FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1510:FreeRTOS/tasks.c **** 
1511:FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1512:FreeRTOS/tasks.c **** 		portable interface. */
1513:FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1667              		.loc 1 1513 0
 1668 003c FFF7FEFF 		bl	xPortStartScheduler	@
1514:FreeRTOS/tasks.c **** 		{
1515:FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1516:FreeRTOS/tasks.c **** 			function will not return. */
1517:FreeRTOS/tasks.c **** 		}
1518:FreeRTOS/tasks.c **** 		else
1519:FreeRTOS/tasks.c **** 		{
1520:FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1521:FreeRTOS/tasks.c **** 		}
1522:FreeRTOS/tasks.c **** 	}
1523:FreeRTOS/tasks.c **** 	else
1524:FreeRTOS/tasks.c **** 	{
1525:FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1526:FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1527:FreeRTOS/tasks.c **** 		or the timer task. */
1528:FreeRTOS/tasks.c **** 		configASSERT( xReturn );
1529:FreeRTOS/tasks.c **** 	}
1530:FreeRTOS/tasks.c **** }
 1669              		.loc 1 1530 0
 1670 0040 05E0     		b	.L127	@
 1671              	.L124:
1528:FreeRTOS/tasks.c **** 	}
 1672              		.loc 1 1528 0
 1673 0042 7B68     		ldr	r3, [r7, #4]	@ tmp120, xReturn
 1674 0044 002B     		cmp	r3, #0	@ tmp120,
 1675 0046 02D1     		bne	.L127	@,
1528:FreeRTOS/tasks.c **** 	}
 1676              		.loc 1 1528 0 is_stmt 0 discriminator 1
 1677 0048 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1678              	.L126:
1528:FreeRTOS/tasks.c **** 	}
 1679              		.loc 1 1528 0 discriminator 2
 1680 004c FEE7     		b	.L126	@
 1681              	.L127:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 58


 1682              		.loc 1 1530 0 is_stmt 1
 1683 004e 00BF     		nop
 1684 0050 0837     		adds	r7, r7, #8	@,,
 1685              		.cfi_def_cfa_offset 8
 1686 0052 BD46     		mov	sp, r7	@,
 1687              		.cfi_def_cfa_register 13
 1688              		@ sp needed	@
 1689 0054 80BD     		pop	{r7, pc}	@
 1690              	.L129:
 1691 0056 00BF     		.align	2
 1692              	.L128:
 1693 0058 00000000 		.word	.LC0
 1694 005c 00000000 		.word	prvIdleTask
 1695 0060 00000000 		.word	xSchedulerRunning
 1696 0064 00000000 		.word	xTickCount
 1697              		.cfi_endproc
 1698              	.LFE11:
 1699              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1700              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1701              		.align	2
 1702              		.global	vTaskEndScheduler
 1703              		.thumb
 1704              		.thumb_func
 1705              		.type	vTaskEndScheduler, %function
 1706              	vTaskEndScheduler:
 1707              	.LFB12:
1531:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1532:FreeRTOS/tasks.c **** 
1533:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1534:FreeRTOS/tasks.c **** {
 1708              		.loc 1 1534 0
 1709              		.cfi_startproc
 1710              		@ args = 0, pretend = 0, frame = 0
 1711              		@ frame_needed = 1, uses_anonymous_args = 0
 1712 0000 80B5     		push	{r7, lr}	@
 1713              		.cfi_def_cfa_offset 8
 1714              		.cfi_offset 7, -8
 1715              		.cfi_offset 14, -4
 1716 0002 00AF     		add	r7, sp, #0	@,,
 1717              		.cfi_def_cfa_register 7
1535:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1536:FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1537:FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1538:FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
 1718              		.loc 1 1538 0
 1719 0004 FFF7FEFF 		bl	ulPortSetInterruptMask	@
1539:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1720              		.loc 1 1539 0
 1721 0008 034B     		ldr	r3, .L131	@ tmp110,
 1722 000a 0022     		movs	r2, #0	@ tmp111,
 1723 000c 1A60     		str	r2, [r3]	@ tmp111, xSchedulerRunning
1540:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1724              		.loc 1 1540 0
 1725 000e FFF7FEFF 		bl	vPortEndScheduler	@
1541:FreeRTOS/tasks.c **** }
 1726              		.loc 1 1541 0
 1727 0012 00BF     		nop
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 59


 1728 0014 80BD     		pop	{r7, pc}	@
 1729              	.L132:
 1730 0016 00BF     		.align	2
 1731              	.L131:
 1732 0018 00000000 		.word	xSchedulerRunning
 1733              		.cfi_endproc
 1734              	.LFE12:
 1735              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1736              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1737              		.align	2
 1738              		.global	vTaskSuspendAll
 1739              		.thumb
 1740              		.thumb_func
 1741              		.type	vTaskSuspendAll, %function
 1742              	vTaskSuspendAll:
 1743              	.LFB13:
1542:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1543:FreeRTOS/tasks.c **** 
1544:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1545:FreeRTOS/tasks.c **** {
 1744              		.loc 1 1545 0
 1745              		.cfi_startproc
 1746              		@ args = 0, pretend = 0, frame = 0
 1747              		@ frame_needed = 1, uses_anonymous_args = 0
 1748              		@ link register save eliminated.
 1749 0000 80B4     		push	{r7}	@
 1750              		.cfi_def_cfa_offset 4
 1751              		.cfi_offset 7, -4
 1752 0002 00AF     		add	r7, sp, #0	@,,
 1753              		.cfi_def_cfa_register 7
1546:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1547:FreeRTOS/tasks.c **** 	BaseT_t.  Please read Richard Barry's reply in the following link to a
1548:FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1549:FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1550:FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
 1754              		.loc 1 1550 0
 1755 0004 044B     		ldr	r3, .L134	@ tmp112,
 1756 0006 1B68     		ldr	r3, [r3]	@ D.6607, uxSchedulerSuspended
 1757 0008 0133     		adds	r3, r3, #1	@ D.6607, D.6607,
 1758 000a 034A     		ldr	r2, .L134	@ tmp113,
 1759 000c 1360     		str	r3, [r2]	@ D.6607, uxSchedulerSuspended
1551:FreeRTOS/tasks.c **** }
 1760              		.loc 1 1551 0
 1761 000e 00BF     		nop
 1762 0010 BD46     		mov	sp, r7	@,
 1763              		.cfi_def_cfa_register 13
 1764              		@ sp needed	@
 1765 0012 80BC     		pop	{r7}	@
 1766              		.cfi_restore 7
 1767              		.cfi_def_cfa_offset 0
 1768 0014 7047     		bx	lr	@
 1769              	.L135:
 1770 0016 00BF     		.align	2
 1771              	.L134:
 1772 0018 00000000 		.word	uxSchedulerSuspended
 1773              		.cfi_endproc
 1774              	.LFE13:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 60


 1775              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1776              		.section	.text.xTaskResumeAll,"ax",%progbits
 1777              		.align	2
 1778              		.global	xTaskResumeAll
 1779              		.thumb
 1780              		.thumb_func
 1781              		.type	xTaskResumeAll, %function
 1782              	xTaskResumeAll:
 1783              	.LFB14:
1552:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1553:FreeRTOS/tasks.c **** 
1554:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1555:FreeRTOS/tasks.c **** 
1556:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void )
1557:FreeRTOS/tasks.c **** 	{
1558:FreeRTOS/tasks.c **** 	TickT_t xReturn;
1559:FreeRTOS/tasks.c **** 
1560:FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1561:FreeRTOS/tasks.c **** 		{
1562:FreeRTOS/tasks.c **** 			xReturn = 0;
1563:FreeRTOS/tasks.c **** 		}
1564:FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1565:FreeRTOS/tasks.c **** 		{
1566:FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1567:FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1568:FreeRTOS/tasks.c **** 			processed. */
1569:FreeRTOS/tasks.c **** 			xReturn = 0;
1570:FreeRTOS/tasks.c **** 		}
1571:FreeRTOS/tasks.c **** 		else
1572:FreeRTOS/tasks.c **** 		{
1573:FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1574:FreeRTOS/tasks.c **** 		}
1575:FreeRTOS/tasks.c **** 
1576:FreeRTOS/tasks.c **** 		return xReturn;
1577:FreeRTOS/tasks.c **** 	}
1578:FreeRTOS/tasks.c **** 
1579:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1580:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1581:FreeRTOS/tasks.c **** 
1582:FreeRTOS/tasks.c **** BaseT_t xTaskResumeAll( void )
1583:FreeRTOS/tasks.c **** {
 1784              		.loc 1 1583 0
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 8
 1787              		@ frame_needed = 1, uses_anonymous_args = 0
 1788 0000 80B5     		push	{r7, lr}	@
 1789              		.cfi_def_cfa_offset 8
 1790              		.cfi_offset 7, -8
 1791              		.cfi_offset 14, -4
 1792 0002 82B0     		sub	sp, sp, #8	@,,
 1793              		.cfi_def_cfa_offset 16
 1794 0004 00AF     		add	r7, sp, #0	@,,
 1795              		.cfi_def_cfa_register 7
1584:FreeRTOS/tasks.c **** TCB_t *pxTCB;
1585:FreeRTOS/tasks.c **** BaseT_t xAlreadyYielded = pdFALSE;
 1796              		.loc 1 1585 0
 1797 0006 0023     		movs	r3, #0	@ tmp137,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 61


 1798 0008 7B60     		str	r3, [r7, #4]	@ tmp137, xAlreadyYielded
1586:FreeRTOS/tasks.c **** 
1587:FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1588:FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
1589:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1799              		.loc 1 1589 0
 1800 000a 374B     		ldr	r3, .L147	@ tmp138,
 1801 000c 1B68     		ldr	r3, [r3]	@ D.6608, uxSchedulerSuspended
 1802 000e 002B     		cmp	r3, #0	@ D.6608,
 1803 0010 02D1     		bne	.L137	@,
 1804              		.loc 1 1589 0 is_stmt 0 discriminator 1
 1805 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1806              	.L138:
 1807 0016 FEE7     		b	.L138	@
 1808              	.L137:
1590:FreeRTOS/tasks.c **** 
1591:FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1592:FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1593:FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1594:FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1595:FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1596:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1809              		.loc 1 1596 0 is_stmt 1
 1810 0018 FFF7FEFF 		bl	vPortEnterCritical	@
1597:FreeRTOS/tasks.c **** 	{
1598:FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
 1811              		.loc 1 1598 0
 1812 001c 324B     		ldr	r3, .L147	@ tmp139,
 1813 001e 1B68     		ldr	r3, [r3]	@ D.6608, uxSchedulerSuspended
 1814 0020 013B     		subs	r3, r3, #1	@ D.6608, D.6608,
 1815 0022 314A     		ldr	r2, .L147	@ tmp140,
 1816 0024 1360     		str	r3, [r2]	@ D.6608, uxSchedulerSuspended
1599:FreeRTOS/tasks.c **** 
1600:FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1817              		.loc 1 1600 0
 1818 0026 304B     		ldr	r3, .L147	@ tmp141,
 1819 0028 1B68     		ldr	r3, [r3]	@ D.6608, uxSchedulerSuspended
 1820 002a 002B     		cmp	r3, #0	@ D.6608,
 1821 002c 55D1     		bne	.L139	@,
1601:FreeRTOS/tasks.c **** 		{
1602:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseT_t ) 0U )
 1822              		.loc 1 1602 0
 1823 002e 2F4B     		ldr	r3, .L147+4	@ tmp142,
 1824 0030 1B68     		ldr	r3, [r3]	@ D.6608, uxCurrentNumberOfTasks
 1825 0032 002B     		cmp	r3, #0	@ D.6608,
 1826 0034 51D0     		beq	.L139	@,
1603:FreeRTOS/tasks.c **** 			{
1604:FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1605:FreeRTOS/tasks.c **** 				appropriate ready list. */
1606:FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 1827              		.loc 1 1606 0
 1828 0036 2EE0     		b	.L140	@
 1829              	.L141:
1607:FreeRTOS/tasks.c **** 				{
1608:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 1830              		.loc 1 1608 0
 1831 0038 2D4B     		ldr	r3, .L147+8	@ tmp143,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 62


 1832 003a DB68     		ldr	r3, [r3, #12]	@ D.6609, xPendingReadyList.xListEnd.pxNext
 1833 003c DB68     		ldr	r3, [r3, #12]	@ tmp144, _17->pvOwner
 1834 003e 3B60     		str	r3, [r7]	@ tmp144, pxTCB
1609:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1835              		.loc 1 1609 0
 1836 0040 3B68     		ldr	r3, [r7]	@ tmp145, pxTCB
 1837 0042 1833     		adds	r3, r3, #24	@ D.6610, tmp145,
 1838 0044 1846     		mov	r0, r3	@, D.6610
 1839 0046 FFF7FEFF 		bl	uxListRemove	@
1610:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1840              		.loc 1 1610 0
 1841 004a 3B68     		ldr	r3, [r7]	@ tmp146, pxTCB
 1842 004c 0433     		adds	r3, r3, #4	@ D.6610, tmp146,
 1843 004e 1846     		mov	r0, r3	@, D.6610
 1844 0050 FFF7FEFF 		bl	uxListRemove	@
1611:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1845              		.loc 1 1611 0
 1846 0054 3B68     		ldr	r3, [r7]	@ tmp147, pxTCB
 1847 0056 DB6A     		ldr	r3, [r3, #44]	@ D.6608, pxTCB_18->uxPriority
 1848 0058 0122     		movs	r2, #1	@ tmp148,
 1849 005a 9A40     		lsls	r2, r2, r3	@ D.6608, tmp148, D.6608
 1850 005c 254B     		ldr	r3, .L147+12	@ tmp149,
 1851 005e 1B68     		ldr	r3, [r3]	@ D.6608, uxTopReadyPriority
 1852 0060 1343     		orrs	r3, r3, r2	@, D.6608, D.6608, D.6608
 1853 0062 244A     		ldr	r2, .L147+12	@ tmp150,
 1854 0064 1360     		str	r3, [r2]	@ D.6608, uxTopReadyPriority
 1855 0066 3B68     		ldr	r3, [r7]	@ tmp151, pxTCB
 1856 0068 DA6A     		ldr	r2, [r3, #44]	@ D.6608, pxTCB_18->uxPriority
 1857 006a 1346     		mov	r3, r2	@ tmp152, D.6608
 1858 006c 9B00     		lsls	r3, r3, #2	@ tmp152, tmp152,
 1859 006e 1344     		add	r3, r3, r2	@ tmp152, D.6608
 1860 0070 9B00     		lsls	r3, r3, #2	@ tmp153, tmp152,
 1861 0072 214A     		ldr	r2, .L147+16	@ tmp154,
 1862 0074 1A44     		add	r2, r2, r3	@ D.6611, tmp152
 1863 0076 3B68     		ldr	r3, [r7]	@ tmp155, pxTCB
 1864 0078 0433     		adds	r3, r3, #4	@ D.6610, tmp155,
 1865 007a 1946     		mov	r1, r3	@, D.6610
 1866 007c 1046     		mov	r0, r2	@, D.6611
 1867 007e FFF7FEFF 		bl	vListInsertEnd	@
1612:FreeRTOS/tasks.c **** 
1613:FreeRTOS/tasks.c **** 					/* If we have moved a task that has a priority higher than
1614:FreeRTOS/tasks.c **** 					the current task then we should yield. */
1615:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1868              		.loc 1 1615 0
 1869 0082 3B68     		ldr	r3, [r7]	@ tmp156, pxTCB
 1870 0084 DA6A     		ldr	r2, [r3, #44]	@ D.6608, pxTCB_18->uxPriority
 1871 0086 1D4B     		ldr	r3, .L147+20	@ tmp157,
 1872 0088 1B68     		ldr	r3, [r3]	@ D.6612, pxCurrentTCB
 1873 008a DB6A     		ldr	r3, [r3, #44]	@ D.6608, _33->uxPriority
 1874 008c 9A42     		cmp	r2, r3	@ D.6608, D.6608
 1875 008e 02D3     		bcc	.L140	@,
1616:FreeRTOS/tasks.c **** 					{
1617:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
 1876              		.loc 1 1617 0
 1877 0090 1B4B     		ldr	r3, .L147+24	@ tmp158,
 1878 0092 0122     		movs	r2, #1	@ tmp159,
 1879 0094 1A60     		str	r2, [r3]	@ tmp159, xYieldPending
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 63


 1880              	.L140:
1606:FreeRTOS/tasks.c **** 				{
 1881              		.loc 1 1606 0
 1882 0096 164B     		ldr	r3, .L147+8	@ tmp160,
 1883 0098 1B68     		ldr	r3, [r3]	@ D.6608, xPendingReadyList.uxNumberOfItems
 1884 009a 002B     		cmp	r3, #0	@ D.6608,
 1885 009c CCD1     		bne	.L141	@,
1618:FreeRTOS/tasks.c **** 					}
1619:FreeRTOS/tasks.c **** 					else
1620:FreeRTOS/tasks.c **** 					{
1621:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1622:FreeRTOS/tasks.c **** 					}
1623:FreeRTOS/tasks.c **** 				}
1624:FreeRTOS/tasks.c **** 
1625:FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1626:FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
1627:FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1628:FreeRTOS/tasks.c **** 				time. */
1629:FreeRTOS/tasks.c **** 				if( uxPendedTicks > ( UBaseT_t ) 0U )
 1886              		.loc 1 1629 0
 1887 009e 194B     		ldr	r3, .L147+28	@ tmp161,
 1888 00a0 1B68     		ldr	r3, [r3]	@ D.6608, uxPendedTicks
 1889 00a2 002B     		cmp	r3, #0	@ D.6608,
 1890 00a4 11D0     		beq	.L142	@,
1630:FreeRTOS/tasks.c **** 				{
1631:FreeRTOS/tasks.c **** 					while( uxPendedTicks > ( UBaseT_t ) 0U )
 1891              		.loc 1 1631 0
 1892 00a6 0CE0     		b	.L143	@
 1893              	.L145:
1632:FreeRTOS/tasks.c **** 					{
1633:FreeRTOS/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 1894              		.loc 1 1633 0
 1895 00a8 FFF7FEFF 		bl	xTaskIncrementTick	@
 1896 00ac 0346     		mov	r3, r0	@ D.6613,
 1897 00ae 002B     		cmp	r3, #0	@ D.6613,
 1898 00b0 02D0     		beq	.L144	@,
1634:FreeRTOS/tasks.c **** 						{
1635:FreeRTOS/tasks.c **** 							xYieldPending = pdTRUE;
 1899              		.loc 1 1635 0
 1900 00b2 134B     		ldr	r3, .L147+24	@ tmp162,
 1901 00b4 0122     		movs	r2, #1	@ tmp163,
 1902 00b6 1A60     		str	r2, [r3]	@ tmp163, xYieldPending
 1903              	.L144:
1636:FreeRTOS/tasks.c **** 						}
1637:FreeRTOS/tasks.c **** 						else
1638:FreeRTOS/tasks.c **** 						{
1639:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1640:FreeRTOS/tasks.c **** 						}
1641:FreeRTOS/tasks.c **** 						--uxPendedTicks;
 1904              		.loc 1 1641 0
 1905 00b8 124B     		ldr	r3, .L147+28	@ tmp164,
 1906 00ba 1B68     		ldr	r3, [r3]	@ D.6608, uxPendedTicks
 1907 00bc 013B     		subs	r3, r3, #1	@ D.6608, D.6608,
 1908 00be 114A     		ldr	r2, .L147+28	@ tmp165,
 1909 00c0 1360     		str	r3, [r2]	@ D.6608, uxPendedTicks
 1910              	.L143:
1631:FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 64


 1911              		.loc 1 1631 0
 1912 00c2 104B     		ldr	r3, .L147+28	@ tmp166,
 1913 00c4 1B68     		ldr	r3, [r3]	@ D.6608, uxPendedTicks
 1914 00c6 002B     		cmp	r3, #0	@ D.6608,
 1915 00c8 EED1     		bne	.L145	@,
 1916              	.L142:
1642:FreeRTOS/tasks.c **** 					}
1643:FreeRTOS/tasks.c **** 				}
1644:FreeRTOS/tasks.c **** 				else
1645:FreeRTOS/tasks.c **** 				{
1646:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1647:FreeRTOS/tasks.c **** 				}
1648:FreeRTOS/tasks.c **** 
1649:FreeRTOS/tasks.c **** 				if( xYieldPending == pdTRUE )
 1917              		.loc 1 1649 0
 1918 00ca 0D4B     		ldr	r3, .L147+24	@ tmp167,
 1919 00cc 1B68     		ldr	r3, [r3]	@ D.6613, xYieldPending
 1920 00ce 012B     		cmp	r3, #1	@ D.6613,
 1921 00d0 03D1     		bne	.L139	@,
1650:FreeRTOS/tasks.c **** 				{
1651:FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1652:FreeRTOS/tasks.c **** 					{
1653:FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
 1922              		.loc 1 1653 0
 1923 00d2 0123     		movs	r3, #1	@ tmp168,
 1924 00d4 7B60     		str	r3, [r7, #4]	@ tmp168, xAlreadyYielded
1654:FreeRTOS/tasks.c **** 					}
1655:FreeRTOS/tasks.c **** 					#endif
1656:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1925              		.loc 1 1656 0
 1926 00d6 FFF7FEFF 		bl	vPortYield	@
 1927              	.L139:
1657:FreeRTOS/tasks.c **** 				}
1658:FreeRTOS/tasks.c **** 				else
1659:FreeRTOS/tasks.c **** 				{
1660:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1661:FreeRTOS/tasks.c **** 				}
1662:FreeRTOS/tasks.c **** 			}
1663:FreeRTOS/tasks.c **** 		}
1664:FreeRTOS/tasks.c **** 		else
1665:FreeRTOS/tasks.c **** 		{
1666:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1667:FreeRTOS/tasks.c **** 		}
1668:FreeRTOS/tasks.c **** 	}
1669:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1928              		.loc 1 1669 0
 1929 00da FFF7FEFF 		bl	vPortExitCritical	@
1670:FreeRTOS/tasks.c **** 
1671:FreeRTOS/tasks.c **** 	return xAlreadyYielded;
 1930              		.loc 1 1671 0
 1931 00de 7B68     		ldr	r3, [r7, #4]	@ D.6614, xAlreadyYielded
1672:FreeRTOS/tasks.c **** }
 1932              		.loc 1 1672 0
 1933 00e0 1846     		mov	r0, r3	@, <retval>
 1934 00e2 0837     		adds	r7, r7, #8	@,,
 1935              		.cfi_def_cfa_offset 8
 1936 00e4 BD46     		mov	sp, r7	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 65


 1937              		.cfi_def_cfa_register 13
 1938              		@ sp needed	@
 1939 00e6 80BD     		pop	{r7, pc}	@
 1940              	.L148:
 1941              		.align	2
 1942              	.L147:
 1943 00e8 00000000 		.word	uxSchedulerSuspended
 1944 00ec 00000000 		.word	uxCurrentNumberOfTasks
 1945 00f0 00000000 		.word	xPendingReadyList
 1946 00f4 00000000 		.word	uxTopReadyPriority
 1947 00f8 00000000 		.word	pxReadyTasksLists
 1948 00fc 00000000 		.word	pxCurrentTCB
 1949 0100 00000000 		.word	xYieldPending
 1950 0104 00000000 		.word	uxPendedTicks
 1951              		.cfi_endproc
 1952              	.LFE14:
 1953              		.size	xTaskResumeAll, .-xTaskResumeAll
 1954              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1955              		.align	2
 1956              		.global	xTaskGetTickCount
 1957              		.thumb
 1958              		.thumb_func
 1959              		.type	xTaskGetTickCount, %function
 1960              	xTaskGetTickCount:
 1961              	.LFB15:
1673:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1674:FreeRTOS/tasks.c **** 
1675:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCount( void )
1676:FreeRTOS/tasks.c **** {
 1962              		.loc 1 1676 0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 8
 1965              		@ frame_needed = 1, uses_anonymous_args = 0
 1966 0000 80B5     		push	{r7, lr}	@
 1967              		.cfi_def_cfa_offset 8
 1968              		.cfi_offset 7, -8
 1969              		.cfi_offset 14, -4
 1970 0002 82B0     		sub	sp, sp, #8	@,,
 1971              		.cfi_def_cfa_offset 16
 1972 0004 00AF     		add	r7, sp, #0	@,,
 1973              		.cfi_def_cfa_register 7
1677:FreeRTOS/tasks.c **** TickT_t xTicks;
1678:FreeRTOS/tasks.c **** 
1679:FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1680:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1974              		.loc 1 1680 0
 1975 0006 FFF7FEFF 		bl	vPortEnterCritical	@
1681:FreeRTOS/tasks.c **** 	{
1682:FreeRTOS/tasks.c **** 		xTicks = xTickCount;
 1976              		.loc 1 1682 0
 1977 000a 054B     		ldr	r3, .L151	@ tmp112,
 1978 000c 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 1979 000e 7B60     		str	r3, [r7, #4]	@ tmp113, xTicks
1683:FreeRTOS/tasks.c **** 	}
1684:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1980              		.loc 1 1684 0
 1981 0010 FFF7FEFF 		bl	vPortExitCritical	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 66


1685:FreeRTOS/tasks.c **** 
1686:FreeRTOS/tasks.c **** 	return xTicks;
 1982              		.loc 1 1686 0
 1983 0014 7B68     		ldr	r3, [r7, #4]	@ D.6615, xTicks
1687:FreeRTOS/tasks.c **** }
 1984              		.loc 1 1687 0
 1985 0016 1846     		mov	r0, r3	@, <retval>
 1986 0018 0837     		adds	r7, r7, #8	@,,
 1987              		.cfi_def_cfa_offset 8
 1988 001a BD46     		mov	sp, r7	@,
 1989              		.cfi_def_cfa_register 13
 1990              		@ sp needed	@
 1991 001c 80BD     		pop	{r7, pc}	@
 1992              	.L152:
 1993 001e 00BF     		.align	2
 1994              	.L151:
 1995 0020 00000000 		.word	xTickCount
 1996              		.cfi_endproc
 1997              	.LFE15:
 1998              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1999              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2000              		.align	2
 2001              		.global	xTaskGetTickCountFromISR
 2002              		.thumb
 2003              		.thumb_func
 2004              		.type	xTaskGetTickCountFromISR, %function
 2005              	xTaskGetTickCountFromISR:
 2006              	.LFB16:
1688:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1689:FreeRTOS/tasks.c **** 
1690:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCountFromISR( void )
1691:FreeRTOS/tasks.c **** {
 2007              		.loc 1 1691 0
 2008              		.cfi_startproc
 2009              		@ args = 0, pretend = 0, frame = 8
 2010              		@ frame_needed = 1, uses_anonymous_args = 0
 2011 0000 80B5     		push	{r7, lr}	@
 2012              		.cfi_def_cfa_offset 8
 2013              		.cfi_offset 7, -8
 2014              		.cfi_offset 14, -4
 2015 0002 82B0     		sub	sp, sp, #8	@,,
 2016              		.cfi_def_cfa_offset 16
 2017 0004 00AF     		add	r7, sp, #0	@,,
 2018              		.cfi_def_cfa_register 7
1692:FreeRTOS/tasks.c **** TickT_t xReturn;
1693:FreeRTOS/tasks.c **** UBaseT_t uxSavedInterruptStatus;
1694:FreeRTOS/tasks.c **** 
1695:FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1696:FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1697:FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1698:FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1699:FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1700:FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1701:FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1702:FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1703:FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1704:FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 67


1705:FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1706:FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1707:FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1708:FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1709:FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2019              		.loc 1 1709 0
 2020 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority	@
1710:FreeRTOS/tasks.c **** 
1711:FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2021              		.loc 1 1711 0
 2022 000a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2023 000e 7860     		str	r0, [r7, #4]	@, uxSavedInterruptStatus
1712:FreeRTOS/tasks.c **** 	{
1713:FreeRTOS/tasks.c **** 		xReturn = xTickCount;
 2024              		.loc 1 1713 0
 2025 0010 054B     		ldr	r3, .L155	@ tmp112,
 2026 0012 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 2027 0014 3B60     		str	r3, [r7]	@ tmp113, xReturn
1714:FreeRTOS/tasks.c **** 	}
1715:FreeRTOS/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2028              		.loc 1 1715 0
 2029 0016 7868     		ldr	r0, [r7, #4]	@, uxSavedInterruptStatus
 2030 0018 FFF7FEFF 		bl	vPortClearInterruptMask	@
1716:FreeRTOS/tasks.c **** 
1717:FreeRTOS/tasks.c **** 	return xReturn;
 2031              		.loc 1 1717 0
 2032 001c 3B68     		ldr	r3, [r7]	@ D.6616, xReturn
1718:FreeRTOS/tasks.c **** }
 2033              		.loc 1 1718 0
 2034 001e 1846     		mov	r0, r3	@, <retval>
 2035 0020 0837     		adds	r7, r7, #8	@,,
 2036              		.cfi_def_cfa_offset 8
 2037 0022 BD46     		mov	sp, r7	@,
 2038              		.cfi_def_cfa_register 13
 2039              		@ sp needed	@
 2040 0024 80BD     		pop	{r7, pc}	@
 2041              	.L156:
 2042 0026 00BF     		.align	2
 2043              	.L155:
 2044 0028 00000000 		.word	xTickCount
 2045              		.cfi_endproc
 2046              	.LFE16:
 2047              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2048              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2049              		.align	2
 2050              		.global	uxTaskGetNumberOfTasks
 2051              		.thumb
 2052              		.thumb_func
 2053              		.type	uxTaskGetNumberOfTasks, %function
 2054              	uxTaskGetNumberOfTasks:
 2055              	.LFB17:
1719:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1720:FreeRTOS/tasks.c **** 
1721:FreeRTOS/tasks.c **** UBaseT_t uxTaskGetNumberOfTasks( void )
1722:FreeRTOS/tasks.c **** {
 2056              		.loc 1 1722 0
 2057              		.cfi_startproc
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 68


 2058              		@ args = 0, pretend = 0, frame = 0
 2059              		@ frame_needed = 1, uses_anonymous_args = 0
 2060              		@ link register save eliminated.
 2061 0000 80B4     		push	{r7}	@
 2062              		.cfi_def_cfa_offset 4
 2063              		.cfi_offset 7, -4
 2064 0002 00AF     		add	r7, sp, #0	@,,
 2065              		.cfi_def_cfa_register 7
1723:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1724:FreeRTOS/tasks.c **** 	BaseT_t. */
1725:FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 2066              		.loc 1 1725 0
 2067 0004 024B     		ldr	r3, .L159	@ tmp112,
 2068 0006 1B68     		ldr	r3, [r3]	@ D.6617, uxCurrentNumberOfTasks
1726:FreeRTOS/tasks.c **** }
 2069              		.loc 1 1726 0
 2070 0008 1846     		mov	r0, r3	@, <retval>
 2071 000a BD46     		mov	sp, r7	@,
 2072              		.cfi_def_cfa_register 13
 2073              		@ sp needed	@
 2074 000c 80BC     		pop	{r7}	@
 2075              		.cfi_restore 7
 2076              		.cfi_def_cfa_offset 0
 2077 000e 7047     		bx	lr	@
 2078              	.L160:
 2079              		.align	2
 2080              	.L159:
 2081 0010 00000000 		.word	uxCurrentNumberOfTasks
 2082              		.cfi_endproc
 2083              	.LFE17:
 2084              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2085              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2086              		.align	2
 2087              		.global	uxTaskGetSystemState
 2088              		.thumb
 2089              		.thumb_func
 2090              		.type	uxTaskGetSystemState, %function
 2091              	uxTaskGetSystemState:
 2092              	.LFB18:
1727:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:FreeRTOS/tasks.c **** 
1729:FreeRTOS/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1730:FreeRTOS/tasks.c **** 
1731:FreeRTOS/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1732:FreeRTOS/tasks.c **** 	{
1733:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1734:FreeRTOS/tasks.c **** 
1735:FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1736:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1737:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1738:FreeRTOS/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1739:FreeRTOS/tasks.c **** 	}
1740:FreeRTOS/tasks.c **** 
1741:FreeRTOS/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1742:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1743:FreeRTOS/tasks.c **** 
1744:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 69


1745:FreeRTOS/tasks.c **** 
1746:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseT_t uxArraySize,
1747:FreeRTOS/tasks.c **** 	{
 2093              		.loc 1 1747 0
 2094              		.cfi_startproc
 2095              		@ args = 0, pretend = 0, frame = 24
 2096              		@ frame_needed = 1, uses_anonymous_args = 0
 2097 0000 80B5     		push	{r7, lr}	@
 2098              		.cfi_def_cfa_offset 8
 2099              		.cfi_offset 7, -8
 2100              		.cfi_offset 14, -4
 2101 0002 86B0     		sub	sp, sp, #24	@,,
 2102              		.cfi_def_cfa_offset 32
 2103 0004 00AF     		add	r7, sp, #0	@,,
 2104              		.cfi_def_cfa_register 7
 2105 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 2106 0008 B960     		str	r1, [r7, #8]	@ uxArraySize, uxArraySize
 2107 000a 7A60     		str	r2, [r7, #4]	@ pulTotalRunTime, pulTotalRunTime
1748:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2108              		.loc 1 1748 0
 2109 000c 0023     		movs	r3, #0	@ tmp131,
 2110 000e 7B61     		str	r3, [r7, #20]	@ tmp131, uxTask
 2111 0010 0823     		movs	r3, #8	@ tmp132,
 2112 0012 3B61     		str	r3, [r7, #16]	@ tmp132, uxQueue
1749:FreeRTOS/tasks.c **** 
1750:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 2113              		.loc 1 1750 0
 2114 0014 FFF7FEFF 		bl	vTaskSuspendAll	@
1751:FreeRTOS/tasks.c **** 		{
1752:FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1753:FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2115              		.loc 1 1753 0
 2116 0018 304B     		ldr	r3, .L166	@ tmp133,
 2117 001a 1B68     		ldr	r3, [r3]	@ D.6618, uxCurrentNumberOfTasks
 2118 001c BA68     		ldr	r2, [r7, #8]	@ tmp134, uxArraySize
 2119 001e 9A42     		cmp	r2, r3	@ tmp134, D.6618
 2120 0020 54D3     		bcc	.L162	@,
 2121              	.L163:
1754:FreeRTOS/tasks.c **** 			{
1755:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1756:FreeRTOS/tasks.c **** 				task in the Ready state. */
1757:FreeRTOS/tasks.c **** 				do
1758:FreeRTOS/tasks.c **** 				{
1759:FreeRTOS/tasks.c **** 					uxQueue--;
 2122              		.loc 1 1759 0 discriminator 1
 2123 0022 3B69     		ldr	r3, [r7, #16]	@ tmp136, uxQueue
 2124 0024 013B     		subs	r3, r3, #1	@ tmp135, tmp136,
 2125 0026 3B61     		str	r3, [r7, #16]	@ tmp135, uxQueue
1760:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
 2126              		.loc 1 1760 0 discriminator 1
 2127 0028 7B69     		ldr	r3, [r7, #20]	@ tmp137, uxTask
 2128 002a 5B01     		lsls	r3, r3, #5	@ D.6618, tmp137,
 2129 002c FA68     		ldr	r2, [r7, #12]	@ tmp138, pxTaskStatusArray
 2130 002e D018     		adds	r0, r2, r3	@ D.6619, tmp138, D.6618
 2131 0030 3A69     		ldr	r2, [r7, #16]	@ tmp139, uxQueue
 2132 0032 1346     		mov	r3, r2	@ tmp140, tmp139
 2133 0034 9B00     		lsls	r3, r3, #2	@ tmp140, tmp140,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 70


 2134 0036 1344     		add	r3, r3, r2	@ tmp140, tmp139
 2135 0038 9B00     		lsls	r3, r3, #2	@ tmp141, tmp140,
 2136 003a 294A     		ldr	r2, .L166+4	@ tmp142,
 2137 003c 1344     		add	r3, r3, r2	@ D.6620, tmp142
 2138 003e 0122     		movs	r2, #1	@,
 2139 0040 1946     		mov	r1, r3	@, D.6620
 2140 0042 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2141 0046 0246     		mov	r2, r0	@ D.6618,
 2142 0048 7B69     		ldr	r3, [r7, #20]	@ tmp144, uxTask
 2143 004a 1344     		add	r3, r3, r2	@ tmp143, D.6618
 2144 004c 7B61     		str	r3, [r7, #20]	@ tmp143, uxTask
1761:FreeRTOS/tasks.c **** 
1762:FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseT_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts a
 2145              		.loc 1 1762 0 discriminator 1
 2146 004e 3B69     		ldr	r3, [r7, #16]	@ tmp145, uxQueue
 2147 0050 002B     		cmp	r3, #0	@ tmp145,
 2148 0052 E6D1     		bne	.L163	@,
1763:FreeRTOS/tasks.c **** 
1764:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1765:FreeRTOS/tasks.c **** 				task in the Blocked state. */
1766:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
 2149              		.loc 1 1766 0
 2150 0054 7B69     		ldr	r3, [r7, #20]	@ tmp146, uxTask
 2151 0056 5B01     		lsls	r3, r3, #5	@ D.6618, tmp146,
 2152 0058 FA68     		ldr	r2, [r7, #12]	@ tmp147, pxTaskStatusArray
 2153 005a D018     		adds	r0, r2, r3	@ D.6619, tmp147, D.6618
 2154 005c 214B     		ldr	r3, .L166+8	@ tmp148,
 2155 005e 1B68     		ldr	r3, [r3]	@ D.6620, pxDelayedTaskList
 2156 0060 0222     		movs	r2, #2	@,
 2157 0062 1946     		mov	r1, r3	@, D.6620
 2158 0064 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2159 0068 0246     		mov	r2, r0	@ D.6618,
 2160 006a 7B69     		ldr	r3, [r7, #20]	@ tmp150, uxTask
 2161 006c 1344     		add	r3, r3, r2	@ tmp149, D.6618
 2162 006e 7B61     		str	r3, [r7, #20]	@ tmp149, uxTask
1767:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2163              		.loc 1 1767 0
 2164 0070 7B69     		ldr	r3, [r7, #20]	@ tmp151, uxTask
 2165 0072 5B01     		lsls	r3, r3, #5	@ D.6618, tmp151,
 2166 0074 FA68     		ldr	r2, [r7, #12]	@ tmp152, pxTaskStatusArray
 2167 0076 D018     		adds	r0, r2, r3	@ D.6619, tmp152, D.6618
 2168 0078 1B4B     		ldr	r3, .L166+12	@ tmp153,
 2169 007a 1B68     		ldr	r3, [r3]	@ D.6620, pxOverflowDelayedTaskList
 2170 007c 0222     		movs	r2, #2	@,
 2171 007e 1946     		mov	r1, r3	@, D.6620
 2172 0080 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2173 0084 0246     		mov	r2, r0	@ D.6618,
 2174 0086 7B69     		ldr	r3, [r7, #20]	@ tmp155, uxTask
 2175 0088 1344     		add	r3, r3, r2	@ tmp154, D.6618
 2176 008a 7B61     		str	r3, [r7, #20]	@ tmp154, uxTask
1768:FreeRTOS/tasks.c **** 
1769:FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1770:FreeRTOS/tasks.c **** 				{
1771:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1772:FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1773:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
 2177              		.loc 1 1773 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 71


 2178 008c 7B69     		ldr	r3, [r7, #20]	@ tmp156, uxTask
 2179 008e 5B01     		lsls	r3, r3, #5	@ D.6618, tmp156,
 2180 0090 FA68     		ldr	r2, [r7, #12]	@ tmp157, pxTaskStatusArray
 2181 0092 1344     		add	r3, r3, r2	@ D.6619, tmp157
 2182 0094 0422     		movs	r2, #4	@,
 2183 0096 1549     		ldr	r1, .L166+16	@,
 2184 0098 1846     		mov	r0, r3	@, D.6619
 2185 009a FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2186 009e 0246     		mov	r2, r0	@ D.6618,
 2187 00a0 7B69     		ldr	r3, [r7, #20]	@ tmp159, uxTask
 2188 00a2 1344     		add	r3, r3, r2	@ tmp158, D.6618
 2189 00a4 7B61     		str	r3, [r7, #20]	@ tmp158, uxTask
1774:FreeRTOS/tasks.c **** 				}
1775:FreeRTOS/tasks.c **** 				#endif
1776:FreeRTOS/tasks.c **** 
1777:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1778:FreeRTOS/tasks.c **** 				{
1779:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1780:FreeRTOS/tasks.c **** 					each task in the Suspended state. */
1781:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
 2190              		.loc 1 1781 0
 2191 00a6 7B69     		ldr	r3, [r7, #20]	@ tmp160, uxTask
 2192 00a8 5B01     		lsls	r3, r3, #5	@ D.6618, tmp160,
 2193 00aa FA68     		ldr	r2, [r7, #12]	@ tmp161, pxTaskStatusArray
 2194 00ac 1344     		add	r3, r3, r2	@ D.6619, tmp161
 2195 00ae 0322     		movs	r2, #3	@,
 2196 00b0 0F49     		ldr	r1, .L166+20	@,
 2197 00b2 1846     		mov	r0, r3	@, D.6619
 2198 00b4 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2199 00b8 0246     		mov	r2, r0	@ D.6618,
 2200 00ba 7B69     		ldr	r3, [r7, #20]	@ tmp163, uxTask
 2201 00bc 1344     		add	r3, r3, r2	@ tmp162, D.6618
 2202 00be 7B61     		str	r3, [r7, #20]	@ tmp162, uxTask
1782:FreeRTOS/tasks.c **** 				}
1783:FreeRTOS/tasks.c **** 				#endif
1784:FreeRTOS/tasks.c **** 
1785:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1786:FreeRTOS/tasks.c **** 				{
1787:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1788:FreeRTOS/tasks.c **** 					{
1789:FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1790:FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1791:FreeRTOS/tasks.c **** 						#else
1792:FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1793:FreeRTOS/tasks.c **** 						#endif
1794:FreeRTOS/tasks.c **** 					}
1795:FreeRTOS/tasks.c **** 				}
1796:FreeRTOS/tasks.c **** 				#else
1797:FreeRTOS/tasks.c **** 				{
1798:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
 2203              		.loc 1 1798 0
 2204 00c0 7B68     		ldr	r3, [r7, #4]	@ tmp164, pulTotalRunTime
 2205 00c2 002B     		cmp	r3, #0	@ tmp164,
 2206 00c4 02D0     		beq	.L162	@,
1799:FreeRTOS/tasks.c **** 					{
1800:FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
 2207              		.loc 1 1800 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 72


 2208 00c6 7B68     		ldr	r3, [r7, #4]	@ tmp165, pulTotalRunTime
 2209 00c8 0022     		movs	r2, #0	@ tmp166,
 2210 00ca 1A60     		str	r2, [r3]	@ tmp166, *pulTotalRunTime_43(D)
 2211              	.L162:
1801:FreeRTOS/tasks.c **** 					}
1802:FreeRTOS/tasks.c **** 				}
1803:FreeRTOS/tasks.c **** 				#endif
1804:FreeRTOS/tasks.c **** 			}
1805:FreeRTOS/tasks.c **** 			else
1806:FreeRTOS/tasks.c **** 			{
1807:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1808:FreeRTOS/tasks.c **** 			}
1809:FreeRTOS/tasks.c **** 		}
1810:FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
 2212              		.loc 1 1810 0
 2213 00cc FFF7FEFF 		bl	xTaskResumeAll	@
1811:FreeRTOS/tasks.c **** 
1812:FreeRTOS/tasks.c **** 		return uxTask;
 2214              		.loc 1 1812 0
 2215 00d0 7B69     		ldr	r3, [r7, #20]	@ D.6621, uxTask
1813:FreeRTOS/tasks.c **** 	}
 2216              		.loc 1 1813 0
 2217 00d2 1846     		mov	r0, r3	@, <retval>
 2218 00d4 1837     		adds	r7, r7, #24	@,,
 2219              		.cfi_def_cfa_offset 8
 2220 00d6 BD46     		mov	sp, r7	@,
 2221              		.cfi_def_cfa_register 13
 2222              		@ sp needed	@
 2223 00d8 80BD     		pop	{r7, pc}	@
 2224              	.L167:
 2225 00da 00BF     		.align	2
 2226              	.L166:
 2227 00dc 00000000 		.word	uxCurrentNumberOfTasks
 2228 00e0 00000000 		.word	pxReadyTasksLists
 2229 00e4 00000000 		.word	pxDelayedTaskList
 2230 00e8 00000000 		.word	pxOverflowDelayedTaskList
 2231 00ec 00000000 		.word	xTasksWaitingTermination
 2232 00f0 00000000 		.word	xSuspendedTaskList
 2233              		.cfi_endproc
 2234              	.LFE18:
 2235              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 2236              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2237              		.align	2
 2238              		.global	xTaskIncrementTick
 2239              		.thumb
 2240              		.thumb_func
 2241              		.type	xTaskIncrementTick, %function
 2242              	xTaskIncrementTick:
 2243              	.LFB19:
1814:FreeRTOS/tasks.c **** 
1815:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1816:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1817:FreeRTOS/tasks.c **** 
1818:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1821:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 73


1822:FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1823:FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1824:FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1825:FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
1826:FreeRTOS/tasks.c **** 	}
1827:FreeRTOS/tasks.c **** 
1828:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1829:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1830:FreeRTOS/tasks.c **** 
1831:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1832:FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1833:FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1834:FreeRTOS/tasks.c **** 1. */
1835:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1836:FreeRTOS/tasks.c **** 
1837:FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickT_t xTicksToJump )
1838:FreeRTOS/tasks.c **** 	{
1839:FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1840:FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1841:FreeRTOS/tasks.c **** 		each stepped tick. */
1842:FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1843:FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
1844:FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1845:FreeRTOS/tasks.c **** 	}
1846:FreeRTOS/tasks.c **** 
1847:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1848:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1849:FreeRTOS/tasks.c **** 
1850:FreeRTOS/tasks.c **** BaseT_t xTaskIncrementTick( void )
1851:FreeRTOS/tasks.c **** {
 2244              		.loc 1 1851 0
 2245              		.cfi_startproc
 2246              		@ args = 0, pretend = 0, frame = 24
 2247              		@ frame_needed = 1, uses_anonymous_args = 0
 2248 0000 80B5     		push	{r7, lr}	@
 2249              		.cfi_def_cfa_offset 8
 2250              		.cfi_offset 7, -8
 2251              		.cfi_offset 14, -4
 2252 0002 86B0     		sub	sp, sp, #24	@,,
 2253              		.cfi_def_cfa_offset 32
 2254 0004 00AF     		add	r7, sp, #0	@,,
 2255              		.cfi_def_cfa_register 7
1852:FreeRTOS/tasks.c **** TCB_t * pxTCB;
1853:FreeRTOS/tasks.c **** TickT_t xItemValue;
1854:FreeRTOS/tasks.c **** BaseT_t xSwitchRequired = pdFALSE;
 2256              		.loc 1 1854 0
 2257 0006 0023     		movs	r3, #0	@ tmp146,
 2258 0008 7B61     		str	r3, [r7, #20]	@ tmp146, xSwitchRequired
1855:FreeRTOS/tasks.c **** 
1856:FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1857:FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1858:FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1859:FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1860:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2259              		.loc 1 1860 0
 2260 000a 514B     		ldr	r3, .L185	@ tmp147,
 2261 000c 1B68     		ldr	r3, [r3]	@ D.6623, uxSchedulerSuspended
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 74


 2262 000e 002B     		cmp	r3, #0	@ D.6623,
 2263 0010 40F08C80 		bne	.L169	@,
1861:FreeRTOS/tasks.c **** 	{
1862:FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1863:FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
1864:FreeRTOS/tasks.c **** 		++xTickCount;
 2264              		.loc 1 1864 0
 2265 0014 4F4B     		ldr	r3, .L185+4	@ tmp148,
 2266 0016 1B68     		ldr	r3, [r3]	@ D.6623, xTickCount
 2267 0018 0133     		adds	r3, r3, #1	@ D.6623, D.6623,
 2268 001a 4E4A     		ldr	r2, .L185+4	@ tmp149,
 2269 001c 1360     		str	r3, [r2]	@ D.6623, xTickCount
 2270              	.LBB8:
1865:FreeRTOS/tasks.c **** 
1866:FreeRTOS/tasks.c **** 		{
1867:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1868:FreeRTOS/tasks.c **** 			block. */
1869:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 2271              		.loc 1 1869 0
 2272 001e 4D4B     		ldr	r3, .L185+4	@ tmp150,
 2273 0020 1B68     		ldr	r3, [r3]	@ tmp151, xTickCount
 2274 0022 3B61     		str	r3, [r7, #16]	@ tmp151, xConstTickCount
1870:FreeRTOS/tasks.c **** 
1871:FreeRTOS/tasks.c **** 			if( xConstTickCount == ( TickT_t ) 0U )
 2275              		.loc 1 1871 0
 2276 0024 3B69     		ldr	r3, [r7, #16]	@ tmp152, xConstTickCount
 2277 0026 002B     		cmp	r3, #0	@ tmp152,
 2278 0028 18D1     		bne	.L170	@,
 2279              	.LBB9:
1872:FreeRTOS/tasks.c **** 			{
1873:FreeRTOS/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 2280              		.loc 1 1873 0
 2281 002a 4B4B     		ldr	r3, .L185+8	@ tmp153,
 2282 002c 1B68     		ldr	r3, [r3]	@ D.6624, pxDelayedTaskList
 2283 002e 1B68     		ldr	r3, [r3]	@ D.6623, _20->uxNumberOfItems
 2284 0030 002B     		cmp	r3, #0	@ D.6623,
 2285 0032 02D0     		beq	.L171	@,
 2286              		.loc 1 1873 0 is_stmt 0 discriminator 1
 2287 0034 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2288              	.L172:
 2289 0038 FEE7     		b	.L172	@
 2290              	.L171:
 2291              		.loc 1 1873 0 discriminator 2
 2292 003a 474B     		ldr	r3, .L185+8	@ tmp154,
 2293 003c 1B68     		ldr	r3, [r3]	@ tmp155, pxDelayedTaskList
 2294 003e FB60     		str	r3, [r7, #12]	@ tmp155, pxTemp
 2295 0040 464B     		ldr	r3, .L185+12	@ tmp156,
 2296 0042 1B68     		ldr	r3, [r3]	@ D.6624, pxOverflowDelayedTaskList
 2297 0044 444A     		ldr	r2, .L185+8	@ tmp157,
 2298 0046 1360     		str	r3, [r2]	@ D.6624, pxDelayedTaskList
 2299 0048 444A     		ldr	r2, .L185+12	@ tmp158,
 2300 004a FB68     		ldr	r3, [r7, #12]	@ tmp159, pxTemp
 2301 004c 1360     		str	r3, [r2]	@ tmp159, pxOverflowDelayedTaskList
 2302 004e 444B     		ldr	r3, .L185+16	@ tmp160,
 2303 0050 1B68     		ldr	r3, [r3]	@ D.6625, xNumOfOverflows
 2304 0052 0133     		adds	r3, r3, #1	@ D.6625, D.6625,
 2305 0054 424A     		ldr	r2, .L185+16	@ tmp161,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 75


 2306 0056 1360     		str	r3, [r2]	@ D.6625, xNumOfOverflows
 2307 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 2308              	.L170:
 2309              	.LBE9:
1874:FreeRTOS/tasks.c **** 			}
1875:FreeRTOS/tasks.c **** 			else
1876:FreeRTOS/tasks.c **** 			{
1877:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1878:FreeRTOS/tasks.c **** 			}
1879:FreeRTOS/tasks.c **** 
1880:FreeRTOS/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1881:FreeRTOS/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1882:FreeRTOS/tasks.c **** 			has been found whose block time has not expired there is no need to
1883:FreeRTOS/tasks.c **** 			look any further	down the list. */
1884:FreeRTOS/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 2310              		.loc 1 1884 0 is_stmt 1
 2311 005c 414B     		ldr	r3, .L185+20	@ tmp162,
 2312 005e 1B68     		ldr	r3, [r3]	@ D.6623, xNextTaskUnblockTime
 2313 0060 3A69     		ldr	r2, [r7, #16]	@ tmp163, xConstTickCount
 2314 0062 9A42     		cmp	r2, r3	@ tmp163, D.6623
 2315 0064 4DD3     		bcc	.L173	@,
 2316              	.L180:
1885:FreeRTOS/tasks.c **** 			{
1886:FreeRTOS/tasks.c **** 				for( ;; )
1887:FreeRTOS/tasks.c **** 				{
1888:FreeRTOS/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2317              		.loc 1 1888 0
 2318 0066 3C4B     		ldr	r3, .L185+8	@ tmp164,
 2319 0068 1B68     		ldr	r3, [r3]	@ D.6624, pxDelayedTaskList
 2320 006a 1B68     		ldr	r3, [r3]	@ D.6623, _32->uxNumberOfItems
 2321 006c 002B     		cmp	r3, #0	@ D.6623,
 2322 006e 01D1     		bne	.L174	@,
 2323              		.loc 1 1888 0 is_stmt 0 discriminator 1
 2324 0070 0123     		movs	r3, #1	@ D.6622,
 2325 0072 00E0     		b	.L175	@
 2326              	.L174:
 2327              		.loc 1 1888 0 discriminator 2
 2328 0074 0023     		movs	r3, #0	@ D.6622,
 2329              	.L175:
 2330              		.loc 1 1888 0 discriminator 4
 2331 0076 002B     		cmp	r3, #0	@ D.6622,
 2332 0078 04D0     		beq	.L176	@,
1889:FreeRTOS/tasks.c **** 					{
1890:FreeRTOS/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1891:FreeRTOS/tasks.c **** 						to the maximum possible value so it is extremely
1892:FreeRTOS/tasks.c **** 						unlikely that the
1893:FreeRTOS/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1894:FreeRTOS/tasks.c **** 						next time through. */
1895:FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 2333              		.loc 1 1895 0 is_stmt 1
 2334 007a 3A4B     		ldr	r3, .L185+20	@ tmp165,
 2335 007c 4FF0FF32 		mov	r2, #-1	@ tmp166,
 2336 0080 1A60     		str	r2, [r3]	@ tmp166, xNextTaskUnblockTime
1896:FreeRTOS/tasks.c **** 						break;
 2337              		.loc 1 1896 0
 2338 0082 3EE0     		b	.L173	@
 2339              	.L176:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 76


1897:FreeRTOS/tasks.c **** 					}
1898:FreeRTOS/tasks.c **** 					else
1899:FreeRTOS/tasks.c **** 					{
1900:FreeRTOS/tasks.c **** 						/* The delayed list is not empty, get the value of the
1901:FreeRTOS/tasks.c **** 						item at the head of the delayed list.  This is the time
1902:FreeRTOS/tasks.c **** 						at which the task at the head of the delayed list must
1903:FreeRTOS/tasks.c **** 						be removed from the Blocked state. */
1904:FreeRTOS/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2340              		.loc 1 1904 0
 2341 0084 344B     		ldr	r3, .L185+8	@ tmp167,
 2342 0086 1B68     		ldr	r3, [r3]	@ D.6624, pxDelayedTaskList
 2343 0088 DB68     		ldr	r3, [r3, #12]	@ D.6626, _36->xListEnd.pxNext
 2344 008a DB68     		ldr	r3, [r3, #12]	@ tmp168, _37->pvOwner
 2345 008c BB60     		str	r3, [r7, #8]	@ tmp168, pxTCB
1905:FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2346              		.loc 1 1905 0
 2347 008e BB68     		ldr	r3, [r7, #8]	@ tmp169, pxTCB
 2348 0090 5B68     		ldr	r3, [r3, #4]	@ tmp170, pxTCB_38->xGenericListItem.xItemValue
 2349 0092 7B60     		str	r3, [r7, #4]	@ tmp170, xItemValue
1906:FreeRTOS/tasks.c **** 
1907:FreeRTOS/tasks.c **** 						if( xConstTickCount < xItemValue )
 2350              		.loc 1 1907 0
 2351 0094 3A69     		ldr	r2, [r7, #16]	@ tmp171, xConstTickCount
 2352 0096 7B68     		ldr	r3, [r7, #4]	@ tmp172, xItemValue
 2353 0098 9A42     		cmp	r2, r3	@ tmp171, tmp172
 2354 009a 03D2     		bcs	.L177	@,
1908:FreeRTOS/tasks.c **** 						{
1909:FreeRTOS/tasks.c **** 							/* It is not time to unblock this item yet, but the
1910:FreeRTOS/tasks.c **** 							item value is the time at which the task at the head
1911:FreeRTOS/tasks.c **** 							of the blocked list must be removed from the Blocked
1912:FreeRTOS/tasks.c **** 							state -	so record the item value in
1913:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime. */
1914:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
 2355              		.loc 1 1914 0
 2356 009c 314A     		ldr	r2, .L185+20	@ tmp173,
 2357 009e 7B68     		ldr	r3, [r7, #4]	@ tmp174, xItemValue
 2358 00a0 1360     		str	r3, [r2]	@ tmp174, xNextTaskUnblockTime
1915:FreeRTOS/tasks.c **** 							break;
 2359              		.loc 1 1915 0
 2360 00a2 2EE0     		b	.L173	@
 2361              	.L177:
1916:FreeRTOS/tasks.c **** 						}
1917:FreeRTOS/tasks.c **** 						else
1918:FreeRTOS/tasks.c **** 						{
1919:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1920:FreeRTOS/tasks.c **** 						}
1921:FreeRTOS/tasks.c **** 
1922:FreeRTOS/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
1923:FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2362              		.loc 1 1923 0
 2363 00a4 BB68     		ldr	r3, [r7, #8]	@ tmp175, pxTCB
 2364 00a6 0433     		adds	r3, r3, #4	@ D.6627, tmp175,
 2365 00a8 1846     		mov	r0, r3	@, D.6627
 2366 00aa FFF7FEFF 		bl	uxListRemove	@
1924:FreeRTOS/tasks.c **** 
1925:FreeRTOS/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
1926:FreeRTOS/tasks.c **** 						it from the event list. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 77


1927:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2367              		.loc 1 1927 0
 2368 00ae BB68     		ldr	r3, [r7, #8]	@ tmp176, pxTCB
 2369 00b0 9B6A     		ldr	r3, [r3, #40]	@ D.6628, pxTCB_38->xEventListItem.pvContainer
 2370 00b2 002B     		cmp	r3, #0	@ D.6628,
 2371 00b4 04D0     		beq	.L178	@,
1928:FreeRTOS/tasks.c **** 						{
1929:FreeRTOS/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2372              		.loc 1 1929 0
 2373 00b6 BB68     		ldr	r3, [r7, #8]	@ tmp177, pxTCB
 2374 00b8 1833     		adds	r3, r3, #24	@ D.6627, tmp177,
 2375 00ba 1846     		mov	r0, r3	@, D.6627
 2376 00bc FFF7FEFF 		bl	uxListRemove	@
 2377              	.L178:
1930:FreeRTOS/tasks.c **** 						}
1931:FreeRTOS/tasks.c **** 						else
1932:FreeRTOS/tasks.c **** 						{
1933:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1934:FreeRTOS/tasks.c **** 						}
1935:FreeRTOS/tasks.c **** 
1936:FreeRTOS/tasks.c **** 						/* Place the unblocked task into the appropriate ready
1937:FreeRTOS/tasks.c **** 						list. */
1938:FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 2378              		.loc 1 1938 0
 2379 00c0 BB68     		ldr	r3, [r7, #8]	@ tmp178, pxTCB
 2380 00c2 DB6A     		ldr	r3, [r3, #44]	@ D.6623, pxTCB_38->uxPriority
 2381 00c4 0122     		movs	r2, #1	@ tmp179,
 2382 00c6 9A40     		lsls	r2, r2, r3	@ D.6623, tmp179, D.6623
 2383 00c8 274B     		ldr	r3, .L185+24	@ tmp180,
 2384 00ca 1B68     		ldr	r3, [r3]	@ D.6623, uxTopReadyPriority
 2385 00cc 1343     		orrs	r3, r3, r2	@, D.6623, D.6623, D.6623
 2386 00ce 264A     		ldr	r2, .L185+24	@ tmp181,
 2387 00d0 1360     		str	r3, [r2]	@ D.6623, uxTopReadyPriority
 2388 00d2 BB68     		ldr	r3, [r7, #8]	@ tmp182, pxTCB
 2389 00d4 DA6A     		ldr	r2, [r3, #44]	@ D.6623, pxTCB_38->uxPriority
 2390 00d6 1346     		mov	r3, r2	@ tmp183, D.6623
 2391 00d8 9B00     		lsls	r3, r3, #2	@ tmp183, tmp183,
 2392 00da 1344     		add	r3, r3, r2	@ tmp183, D.6623
 2393 00dc 9B00     		lsls	r3, r3, #2	@ tmp184, tmp183,
 2394 00de 234A     		ldr	r2, .L185+28	@ tmp185,
 2395 00e0 1A44     		add	r2, r2, r3	@ D.6624, tmp183
 2396 00e2 BB68     		ldr	r3, [r7, #8]	@ tmp186, pxTCB
 2397 00e4 0433     		adds	r3, r3, #4	@ D.6627, tmp186,
 2398 00e6 1946     		mov	r1, r3	@, D.6627
 2399 00e8 1046     		mov	r0, r2	@, D.6624
 2400 00ea FFF7FEFF 		bl	vListInsertEnd	@
1939:FreeRTOS/tasks.c **** 
1940:FreeRTOS/tasks.c **** 						/* A task being unblocked cannot cause an immediate
1941:FreeRTOS/tasks.c **** 						context switch if preemption is turned off. */
1942:FreeRTOS/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
1943:FreeRTOS/tasks.c **** 						{
1944:FreeRTOS/tasks.c **** 							/* Preemption is on, but a context switch should
1945:FreeRTOS/tasks.c **** 							only be performed if the unblocked task has a
1946:FreeRTOS/tasks.c **** 							priority that is equal to or higher than the
1947:FreeRTOS/tasks.c **** 							currently executing task. */
1948:FreeRTOS/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2401              		.loc 1 1948 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 78


 2402 00ee BB68     		ldr	r3, [r7, #8]	@ tmp187, pxTCB
 2403 00f0 DA6A     		ldr	r2, [r3, #44]	@ D.6623, pxTCB_38->uxPriority
 2404 00f2 1F4B     		ldr	r3, .L185+32	@ tmp188,
 2405 00f4 1B68     		ldr	r3, [r3]	@ D.6629, pxCurrentTCB
 2406 00f6 DB6A     		ldr	r3, [r3, #44]	@ D.6623, _55->uxPriority
 2407 00f8 9A42     		cmp	r2, r3	@ D.6623, D.6623
 2408 00fa B4D3     		bcc	.L180	@,
1949:FreeRTOS/tasks.c **** 							{
1950:FreeRTOS/tasks.c **** 								xSwitchRequired = pdTRUE;
 2409              		.loc 1 1950 0
 2410 00fc 0123     		movs	r3, #1	@ tmp189,
 2411 00fe 7B61     		str	r3, [r7, #20]	@ tmp189, xSwitchRequired
1951:FreeRTOS/tasks.c **** 							}
1952:FreeRTOS/tasks.c **** 							else
1953:FreeRTOS/tasks.c **** 							{
1954:FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
1955:FreeRTOS/tasks.c **** 							}
1956:FreeRTOS/tasks.c **** 						}
1957:FreeRTOS/tasks.c **** 						#endif /* configUSE_PREEMPTION */
1958:FreeRTOS/tasks.c **** 					}
1959:FreeRTOS/tasks.c **** 				}
 2412              		.loc 1 1959 0
 2413 0100 B1E7     		b	.L180	@
 2414              	.L173:
 2415              	.LBE8:
1960:FreeRTOS/tasks.c **** 			}
1961:FreeRTOS/tasks.c **** 		}
1962:FreeRTOS/tasks.c **** 
1963:FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
1964:FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
1965:FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
1966:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
1967:FreeRTOS/tasks.c **** 		{
1968:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseT_t )
 2416              		.loc 1 1968 0
 2417 0102 1B4B     		ldr	r3, .L185+32	@ tmp190,
 2418 0104 1B68     		ldr	r3, [r3]	@ D.6629, pxCurrentTCB
 2419 0106 DA6A     		ldr	r2, [r3, #44]	@ D.6623, _60->uxPriority
 2420 0108 1849     		ldr	r1, .L185+28	@ tmp191,
 2421 010a 1346     		mov	r3, r2	@ tmp192, D.6623
 2422 010c 9B00     		lsls	r3, r3, #2	@ tmp192, tmp192,
 2423 010e 1344     		add	r3, r3, r2	@ tmp192, D.6623
 2424 0110 9B00     		lsls	r3, r3, #2	@ tmp193, tmp192,
 2425 0112 0B44     		add	r3, r3, r1	@ tmp194, tmp191
 2426 0114 1B68     		ldr	r3, [r3]	@ D.6623, pxReadyTasksLists[_61].uxNumberOfItems
 2427 0116 012B     		cmp	r3, #1	@ D.6623,
 2428 0118 01D9     		bls	.L181	@,
1969:FreeRTOS/tasks.c **** 			{
1970:FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 2429              		.loc 1 1970 0
 2430 011a 0123     		movs	r3, #1	@ tmp195,
 2431 011c 7B61     		str	r3, [r7, #20]	@ tmp195, xSwitchRequired
 2432              	.L181:
1971:FreeRTOS/tasks.c **** 			}
1972:FreeRTOS/tasks.c **** 			else
1973:FreeRTOS/tasks.c **** 			{
1974:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 79


1975:FreeRTOS/tasks.c **** 			}
1976:FreeRTOS/tasks.c **** 		}
1977:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
1978:FreeRTOS/tasks.c **** 
1979:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1980:FreeRTOS/tasks.c **** 		{
1981:FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
1982:FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
1983:FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseT_t ) 0U )
 2433              		.loc 1 1983 0
 2434 011e 154B     		ldr	r3, .L185+36	@ tmp196,
 2435 0120 1B68     		ldr	r3, [r3]	@ D.6623, uxPendedTicks
 2436 0122 002B     		cmp	r3, #0	@ D.6623,
 2437 0124 09D1     		bne	.L182	@,
1984:FreeRTOS/tasks.c **** 			{
1985:FreeRTOS/tasks.c **** 				vApplicationTickHook();
 2438              		.loc 1 1985 0
 2439 0126 FFF7FEFF 		bl	vApplicationTickHook	@
 2440 012a 06E0     		b	.L182	@
 2441              	.L169:
1986:FreeRTOS/tasks.c **** 			}
1987:FreeRTOS/tasks.c **** 			else
1988:FreeRTOS/tasks.c **** 			{
1989:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1990:FreeRTOS/tasks.c **** 			}
1991:FreeRTOS/tasks.c **** 		}
1992:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
1993:FreeRTOS/tasks.c **** 	}
1994:FreeRTOS/tasks.c **** 	else
1995:FreeRTOS/tasks.c **** 	{
1996:FreeRTOS/tasks.c **** 		++uxPendedTicks;
 2442              		.loc 1 1996 0
 2443 012c 114B     		ldr	r3, .L185+36	@ tmp197,
 2444 012e 1B68     		ldr	r3, [r3]	@ D.6623, uxPendedTicks
 2445 0130 0133     		adds	r3, r3, #1	@ D.6623, D.6623,
 2446 0132 104A     		ldr	r2, .L185+36	@ tmp198,
 2447 0134 1360     		str	r3, [r2]	@ D.6623, uxPendedTicks
1997:FreeRTOS/tasks.c **** 
1998:FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1999:FreeRTOS/tasks.c **** 		scheduler is locked. */
2000:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2001:FreeRTOS/tasks.c **** 		{
2002:FreeRTOS/tasks.c **** 			vApplicationTickHook();
 2448              		.loc 1 2002 0
 2449 0136 FFF7FEFF 		bl	vApplicationTickHook	@
 2450              	.L182:
2003:FreeRTOS/tasks.c **** 		}
2004:FreeRTOS/tasks.c **** 		#endif
2005:FreeRTOS/tasks.c **** 	}
2006:FreeRTOS/tasks.c **** 
2007:FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2008:FreeRTOS/tasks.c **** 	{
2009:FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 2451              		.loc 1 2009 0
 2452 013a 0F4B     		ldr	r3, .L185+40	@ tmp199,
 2453 013c 1B68     		ldr	r3, [r3]	@ D.6625, xYieldPending
 2454 013e 002B     		cmp	r3, #0	@ D.6625,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 80


 2455 0140 01D0     		beq	.L183	@,
2010:FreeRTOS/tasks.c **** 		{
2011:FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 2456              		.loc 1 2011 0
 2457 0142 0123     		movs	r3, #1	@ tmp200,
 2458 0144 7B61     		str	r3, [r7, #20]	@ tmp200, xSwitchRequired
 2459              	.L183:
2012:FreeRTOS/tasks.c **** 		}
2013:FreeRTOS/tasks.c **** 		else
2014:FreeRTOS/tasks.c **** 		{
2015:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2016:FreeRTOS/tasks.c **** 		}
2017:FreeRTOS/tasks.c **** 	}
2018:FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2019:FreeRTOS/tasks.c **** 
2020:FreeRTOS/tasks.c **** 	return xSwitchRequired;
 2460              		.loc 1 2020 0
 2461 0146 7B69     		ldr	r3, [r7, #20]	@ D.6630, xSwitchRequired
2021:FreeRTOS/tasks.c **** }
 2462              		.loc 1 2021 0
 2463 0148 1846     		mov	r0, r3	@, <retval>
 2464 014a 1837     		adds	r7, r7, #24	@,,
 2465              		.cfi_def_cfa_offset 8
 2466 014c BD46     		mov	sp, r7	@,
 2467              		.cfi_def_cfa_register 13
 2468              		@ sp needed	@
 2469 014e 80BD     		pop	{r7, pc}	@
 2470              	.L186:
 2471              		.align	2
 2472              	.L185:
 2473 0150 00000000 		.word	uxSchedulerSuspended
 2474 0154 00000000 		.word	xTickCount
 2475 0158 00000000 		.word	pxDelayedTaskList
 2476 015c 00000000 		.word	pxOverflowDelayedTaskList
 2477 0160 00000000 		.word	xNumOfOverflows
 2478 0164 00000000 		.word	xNextTaskUnblockTime
 2479 0168 00000000 		.word	uxTopReadyPriority
 2480 016c 00000000 		.word	pxReadyTasksLists
 2481 0170 00000000 		.word	pxCurrentTCB
 2482 0174 00000000 		.word	uxPendedTicks
 2483 0178 00000000 		.word	xYieldPending
 2484              		.cfi_endproc
 2485              	.LFE19:
 2486              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2487              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2488              		.align	2
 2489              		.global	vTaskSwitchContext
 2490              		.thumb
 2491              		.thumb_func
 2492              		.type	vTaskSwitchContext, %function
 2493              	vTaskSwitchContext:
 2494              	.LFB20:
2022:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2023:FreeRTOS/tasks.c **** 
2024:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2025:FreeRTOS/tasks.c **** 
2026:FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 81


2027:FreeRTOS/tasks.c **** 	{
2028:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2029:FreeRTOS/tasks.c **** 
2030:FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2031:FreeRTOS/tasks.c **** 		getting set. */
2032:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2033:FreeRTOS/tasks.c **** 		{
2034:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2035:FreeRTOS/tasks.c **** 		}
2036:FreeRTOS/tasks.c **** 		else
2037:FreeRTOS/tasks.c **** 		{
2038:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2039:FreeRTOS/tasks.c **** 		}
2040:FreeRTOS/tasks.c **** 
2041:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2042:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2043:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2044:FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2045:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2046:FreeRTOS/tasks.c **** 	}
2047:FreeRTOS/tasks.c **** 
2048:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2049:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2050:FreeRTOS/tasks.c **** 
2051:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2052:FreeRTOS/tasks.c **** 
2053:FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2054:FreeRTOS/tasks.c **** 	{
2055:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2056:FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2057:FreeRTOS/tasks.c **** 
2058:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2059:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2060:FreeRTOS/tasks.c **** 		{
2061:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2062:FreeRTOS/tasks.c **** 		}
2063:FreeRTOS/tasks.c **** 		else
2064:FreeRTOS/tasks.c **** 		{
2065:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2066:FreeRTOS/tasks.c **** 		}
2067:FreeRTOS/tasks.c **** 
2068:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2069:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2070:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2071:FreeRTOS/tasks.c **** 		{
2072:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2073:FreeRTOS/tasks.c **** 		}
2074:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2075:FreeRTOS/tasks.c **** 
2076:FreeRTOS/tasks.c **** 		return xReturn;
2077:FreeRTOS/tasks.c **** 	}
2078:FreeRTOS/tasks.c **** 
2079:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2080:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2081:FreeRTOS/tasks.c **** 
2082:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2083:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 82


2084:FreeRTOS/tasks.c **** 	BaseT_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2085:FreeRTOS/tasks.c **** 	{
2086:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2087:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
2088:FreeRTOS/tasks.c **** 
2089:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2090:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2091:FreeRTOS/tasks.c **** 		{
2092:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2093:FreeRTOS/tasks.c **** 		}
2094:FreeRTOS/tasks.c **** 		else
2095:FreeRTOS/tasks.c **** 		{
2096:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2097:FreeRTOS/tasks.c **** 		}
2098:FreeRTOS/tasks.c **** 
2099:FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2100:FreeRTOS/tasks.c **** 		{
2101:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2102:FreeRTOS/tasks.c **** 		}
2103:FreeRTOS/tasks.c **** 		else
2104:FreeRTOS/tasks.c **** 		{
2105:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2106:FreeRTOS/tasks.c **** 		}
2107:FreeRTOS/tasks.c **** 
2108:FreeRTOS/tasks.c **** 		return xReturn;
2109:FreeRTOS/tasks.c **** 	}
2110:FreeRTOS/tasks.c **** 
2111:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2112:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2113:FreeRTOS/tasks.c **** 
2114:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2115:FreeRTOS/tasks.c **** {
 2495              		.loc 1 2115 0
 2496              		.cfi_startproc
 2497              		@ args = 0, pretend = 0, frame = 16
 2498              		@ frame_needed = 1, uses_anonymous_args = 0
 2499 0000 80B5     		push	{r7, lr}	@
 2500              		.cfi_def_cfa_offset 8
 2501              		.cfi_offset 7, -8
 2502              		.cfi_offset 14, -4
 2503 0002 84B0     		sub	sp, sp, #16	@,,
 2504              		.cfi_def_cfa_offset 24
 2505 0004 00AF     		add	r7, sp, #0	@,,
 2506              		.cfi_def_cfa_register 7
2116:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseT_t ) pdFALSE )
 2507              		.loc 1 2116 0
 2508 0006 224B     		ldr	r3, .L195	@ tmp124,
 2509 0008 1B68     		ldr	r3, [r3]	@ D.6631, uxSchedulerSuspended
 2510 000a 002B     		cmp	r3, #0	@ D.6631,
 2511 000c 03D0     		beq	.L188	@,
2117:FreeRTOS/tasks.c **** 	{
2118:FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2119:FreeRTOS/tasks.c **** 		switch. */
2120:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2512              		.loc 1 2120 0
 2513 000e 214B     		ldr	r3, .L195+4	@ tmp125,
 2514 0010 0122     		movs	r2, #1	@ tmp126,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 83


 2515 0012 1A60     		str	r2, [r3]	@ tmp126, xYieldPending
2121:FreeRTOS/tasks.c **** 	}
2122:FreeRTOS/tasks.c **** 	else
2123:FreeRTOS/tasks.c **** 	{
2124:FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2125:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2126:FreeRTOS/tasks.c **** 
2127:FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2128:FreeRTOS/tasks.c **** 		{
2129:FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2130:FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2131:FreeRTOS/tasks.c **** 				#else
2132:FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2133:FreeRTOS/tasks.c **** 				#endif
2134:FreeRTOS/tasks.c **** 
2135:FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2136:FreeRTOS/tasks.c **** 				accumulated	time so far.  The time the task started running was
2137:FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2138:FreeRTOS/tasks.c **** 				protection here	so count values are only valid until the timer
2139:FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2140:FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2141:FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2142:FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2143:FreeRTOS/tasks.c **** 				{
2144:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2145:FreeRTOS/tasks.c **** 				}
2146:FreeRTOS/tasks.c **** 				else
2147:FreeRTOS/tasks.c **** 				{
2148:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2149:FreeRTOS/tasks.c **** 				}
2150:FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2151:FreeRTOS/tasks.c **** 		}
2152:FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2153:FreeRTOS/tasks.c **** 
2154:FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2155:FreeRTOS/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
2156:FreeRTOS/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
2157:FreeRTOS/tasks.c **** 
2158:FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2159:FreeRTOS/tasks.c **** 		optimised asm code. */
2160:FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2161:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2162:FreeRTOS/tasks.c **** 
2163:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2164:FreeRTOS/tasks.c **** 		{
2165:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2166:FreeRTOS/tasks.c **** 			structure specific to this task. */
2167:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2168:FreeRTOS/tasks.c **** 		}
2169:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2170:FreeRTOS/tasks.c **** 	}
2171:FreeRTOS/tasks.c **** }
 2516              		.loc 1 2171 0
 2517 0014 37E0     		b	.L194	@
 2518              	.L188:
2124:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2519              		.loc 1 2124 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 84


 2520 0016 1F4B     		ldr	r3, .L195+4	@ tmp127,
 2521 0018 0022     		movs	r2, #0	@ tmp128,
 2522 001a 1A60     		str	r2, [r3]	@ tmp128, xYieldPending
 2523              	.LBB10:
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2524              		.loc 1 2160 0
 2525 001c 1E4B     		ldr	r3, .L195+8	@ tmp129,
 2526 001e 1B68     		ldr	r3, [r3]	@ D.6631, uxTopReadyPriority
 2527 0020 7B60     		str	r3, [r7, #4]	@ D.6631, ulBitmap
 2528              	.LBB11:
 2529              	.LBB12:
 2530              		.file 2 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   5:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   7:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
   8:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
   9:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  13:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  17:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Thank you!                                                         *
  18:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  19:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  20:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  21:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  23:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  27:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  38:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  40:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  41:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  44:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 85


  46:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  47:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  48:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  51:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  62:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  63:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  64:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** */
  65:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  68:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  69:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  70:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  71:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  72:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
  73:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  74:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  75:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  76:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  77:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  78:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  79:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  80:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  81:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  82:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  83:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  84:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  85:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  86:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  87:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  88:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  89:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  90:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  91:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  92:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  93:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  94:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackT_t;
  95:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  96:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseT_t;
  97:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  98:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseT_t;
  99:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 100:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 101:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 102:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 86


 103:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #else
 104:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 105:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickT_t;
 106:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 108:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 111:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 112:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 113:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 114:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 115:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 116:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 118:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortYield( void );
 119:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 120:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 121:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD()					vPortYield()
 122:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 123:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 124:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 125:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 126:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 127:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 128:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 129:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 130:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 131:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 132:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 133:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
 134:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
 135:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 137:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 139:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 141:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 143:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 144:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 145:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 147:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 148:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 149:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 150:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 151:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 152:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 154:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 155:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 156:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 157:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 159:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 87


 160:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 161:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 162:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	{
 163:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 164:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2531              		.loc 2 165 0
 2532 0022 7B68     		ldr	r3, [r7, #4]	@ tmp131, ulBitmap
 2533              		.syntax unified
 2534              	@ 165 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2535 0024 B3FA83F3 		clz r3, r3	@ ucReturn, tmp131
 2536              	@ 0 "" 2
 2537              		.thumb
 2538              		.syntax unified
 2539 0028 FB70     		strb	r3, [r7, #3]	@ ucReturn, ucReturn
 166:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2540              		.loc 2 166 0
 2541 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2	@ D.6555, ucReturn
 2542              	.LBE12:
 2543              	.LBE11:
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2544              		.loc 1 2160 0
 2545 002c C3F11F03 		rsb	r3, r3, #31	@ D.6632, D.6632,
 2546 0030 FB60     		str	r3, [r7, #12]	@ D.6632, uxTopPriority
 2547 0032 1A49     		ldr	r1, .L195+12	@ tmp132,
 2548 0034 FA68     		ldr	r2, [r7, #12]	@ tmp133, uxTopPriority
 2549 0036 1346     		mov	r3, r2	@ tmp134, tmp133
 2550 0038 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 2551 003a 1344     		add	r3, r3, r2	@ tmp134, tmp133
 2552 003c 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 2553 003e 0B44     		add	r3, r3, r1	@ tmp136, tmp132
 2554 0040 1B68     		ldr	r3, [r3]	@ D.6631, pxReadyTasksLists[uxTopPriority_12].uxNumberOfItems
 2555 0042 002B     		cmp	r3, #0	@ D.6631,
 2556 0044 02D1     		bne	.L191	@,
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2557              		.loc 1 2160 0 is_stmt 0 discriminator 1
 2558 0046 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2559              	.L192:
 2560 004a FEE7     		b	.L192	@
 2561              	.L191:
 2562              	.LBB13:
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2563              		.loc 1 2160 0 discriminator 2
 2564 004c FA68     		ldr	r2, [r7, #12]	@ tmp137, uxTopPriority
 2565 004e 1346     		mov	r3, r2	@ tmp138, tmp137
 2566 0050 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 2567 0052 1344     		add	r3, r3, r2	@ tmp138, tmp137
 2568 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 2569 0056 114A     		ldr	r2, .L195+12	@ tmp141,
 2570 0058 1344     		add	r3, r3, r2	@ tmp140, tmp141
 2571 005a BB60     		str	r3, [r7, #8]	@ tmp140, pxConstList
 2572 005c BB68     		ldr	r3, [r7, #8]	@ tmp142, pxConstList
 2573 005e 5B68     		ldr	r3, [r3, #4]	@ D.6633, pxConstList_14->pxIndex
 2574 0060 5A68     		ldr	r2, [r3, #4]	@ D.6634, _15->pxNext
 2575 0062 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxConstList
 2576 0064 5A60     		str	r2, [r3, #4]	@ D.6634, pxConstList_14->pxIndex
 2577 0066 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxConstList
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 88


 2578 0068 5A68     		ldr	r2, [r3, #4]	@ D.6633, pxConstList_14->pxIndex
 2579 006a BB68     		ldr	r3, [r7, #8]	@ tmp145, pxConstList
 2580 006c 0833     		adds	r3, r3, #8	@ D.6635, tmp145,
 2581 006e 9A42     		cmp	r2, r3	@ D.6633, D.6635
 2582 0070 04D1     		bne	.L193	@,
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2583              		.loc 1 2160 0 discriminator 3
 2584 0072 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxConstList
 2585 0074 5B68     		ldr	r3, [r3, #4]	@ D.6633, pxConstList_14->pxIndex
 2586 0076 5A68     		ldr	r2, [r3, #4]	@ D.6634, _20->pxNext
 2587 0078 BB68     		ldr	r3, [r7, #8]	@ tmp147, pxConstList
 2588 007a 5A60     		str	r2, [r3, #4]	@ D.6634, pxConstList_14->pxIndex
 2589              	.L193:
2160:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2590              		.loc 1 2160 0 discriminator 5
 2591 007c BB68     		ldr	r3, [r7, #8]	@ tmp148, pxConstList
 2592 007e 5B68     		ldr	r3, [r3, #4]	@ D.6633, pxConstList_14->pxIndex
 2593 0080 DB68     		ldr	r3, [r3, #12]	@ D.6636, _23->pvOwner
 2594 0082 074A     		ldr	r2, .L195+16	@ tmp149,
 2595 0084 1360     		str	r3, [r2]	@ D.6636, pxCurrentTCB
 2596              	.L194:
 2597              	.LBE13:
 2598              	.LBE10:
 2599              		.loc 1 2171 0 is_stmt 1
 2600 0086 00BF     		nop
 2601 0088 1037     		adds	r7, r7, #16	@,,
 2602              		.cfi_def_cfa_offset 8
 2603 008a BD46     		mov	sp, r7	@,
 2604              		.cfi_def_cfa_register 13
 2605              		@ sp needed	@
 2606 008c 80BD     		pop	{r7, pc}	@
 2607              	.L196:
 2608 008e 00BF     		.align	2
 2609              	.L195:
 2610 0090 00000000 		.word	uxSchedulerSuspended
 2611 0094 00000000 		.word	xYieldPending
 2612 0098 00000000 		.word	uxTopReadyPriority
 2613 009c 00000000 		.word	pxReadyTasksLists
 2614 00a0 00000000 		.word	pxCurrentTCB
 2615              		.cfi_endproc
 2616              	.LFE20:
 2617              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2618              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2619              		.align	2
 2620              		.global	vTaskPlaceOnEventList
 2621              		.thumb
 2622              		.thumb_func
 2623              		.type	vTaskPlaceOnEventList, %function
 2624              	vTaskPlaceOnEventList:
 2625              	.LFB21:
2172:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2173:FreeRTOS/tasks.c **** 
2174:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickT_t xTicksToWait )
2175:FreeRTOS/tasks.c **** {
 2626              		.loc 1 2175 0
 2627              		.cfi_startproc
 2628              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 89


 2629              		@ frame_needed = 1, uses_anonymous_args = 0
 2630 0000 80B5     		push	{r7, lr}	@
 2631              		.cfi_def_cfa_offset 8
 2632              		.cfi_offset 7, -8
 2633              		.cfi_offset 14, -4
 2634 0002 84B0     		sub	sp, sp, #16	@,,
 2635              		.cfi_def_cfa_offset 24
 2636 0004 00AF     		add	r7, sp, #0	@,,
 2637              		.cfi_def_cfa_register 7
 2638 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
 2639 0008 3960     		str	r1, [r7]	@ xTicksToWait, xTicksToWait
2176:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2177:FreeRTOS/tasks.c **** 
2178:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2640              		.loc 1 2178 0
 2641 000a 7B68     		ldr	r3, [r7, #4]	@ tmp124, pxEventList
 2642 000c 002B     		cmp	r3, #0	@ tmp124,
 2643 000e 02D1     		bne	.L198	@,
 2644              		.loc 1 2178 0 is_stmt 0 discriminator 1
 2645 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2646              	.L199:
 2647 0014 FEE7     		b	.L199	@
 2648              	.L198:
2179:FreeRTOS/tasks.c **** 
2180:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2181:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2182:FreeRTOS/tasks.c **** 
2183:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2184:FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2185:FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2186:FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2187:FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2649              		.loc 1 2187 0 is_stmt 1
 2650 0016 1A4B     		ldr	r3, .L204	@ tmp125,
 2651 0018 1B68     		ldr	r3, [r3]	@ D.6638, pxCurrentTCB
 2652 001a 1833     		adds	r3, r3, #24	@ D.6639, D.6638,
 2653 001c 1946     		mov	r1, r3	@, D.6639
 2654 001e 7868     		ldr	r0, [r7, #4]	@, pxEventList
 2655 0020 FFF7FEFF 		bl	vListInsert	@
2188:FreeRTOS/tasks.c **** 
2189:FreeRTOS/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2190:FreeRTOS/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2191:FreeRTOS/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2192:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 2656              		.loc 1 2192 0
 2657 0024 164B     		ldr	r3, .L204	@ tmp126,
 2658 0026 1B68     		ldr	r3, [r3]	@ D.6638, pxCurrentTCB
 2659 0028 0433     		adds	r3, r3, #4	@ D.6639, D.6638,
 2660 002a 1846     		mov	r0, r3	@, D.6639
 2661 002c FFF7FEFF 		bl	uxListRemove	@
 2662 0030 0346     		mov	r3, r0	@ D.6640,
 2663 0032 002B     		cmp	r3, #0	@ D.6640,
 2664 0034 0BD1     		bne	.L200	@,
2193:FreeRTOS/tasks.c **** 	{
2194:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2195:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2196:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 90


 2665              		.loc 1 2196 0
 2666 0036 124B     		ldr	r3, .L204	@ tmp127,
 2667 0038 1B68     		ldr	r3, [r3]	@ D.6638, pxCurrentTCB
 2668 003a DB6A     		ldr	r3, [r3, #44]	@ D.6640, _12->uxPriority
 2669 003c 0122     		movs	r2, #1	@ tmp128,
 2670 003e 02FA03F3 		lsl	r3, r2, r3	@ D.6640, tmp128, D.6640
 2671 0042 DA43     		mvns	r2, r3	@ D.6640, D.6640
 2672 0044 0F4B     		ldr	r3, .L204+4	@ tmp129,
 2673 0046 1B68     		ldr	r3, [r3]	@ D.6640, uxTopReadyPriority
 2674 0048 1340     		ands	r3, r3, r2	@, D.6640, D.6640, D.6640
 2675 004a 0E4A     		ldr	r2, .L204+4	@ tmp130,
 2676 004c 1360     		str	r3, [r2]	@ D.6640, uxTopReadyPriority
 2677              	.L200:
2197:FreeRTOS/tasks.c **** 	}
2198:FreeRTOS/tasks.c **** 	else
2199:FreeRTOS/tasks.c **** 	{
2200:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2201:FreeRTOS/tasks.c **** 	}
2202:FreeRTOS/tasks.c **** 
2203:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2204:FreeRTOS/tasks.c **** 	{
2205:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2678              		.loc 1 2205 0
 2679 004e 3B68     		ldr	r3, [r7]	@ tmp131, xTicksToWait
 2680 0050 B3F1FF3F 		cmp	r3, #-1	@ tmp131,
 2681 0054 07D1     		bne	.L201	@,
2206:FreeRTOS/tasks.c **** 		{
2207:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2208:FreeRTOS/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2209:FreeRTOS/tasks.c **** 			block indefinitely. */
2210:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2682              		.loc 1 2210 0
 2683 0056 0A4B     		ldr	r3, .L204	@ tmp132,
 2684 0058 1B68     		ldr	r3, [r3]	@ D.6638, pxCurrentTCB
 2685 005a 0433     		adds	r3, r3, #4	@ D.6639, D.6638,
 2686 005c 1946     		mov	r1, r3	@, D.6639
 2687 005e 0A48     		ldr	r0, .L204+8	@,
 2688 0060 FFF7FEFF 		bl	vListInsertEnd	@
2211:FreeRTOS/tasks.c **** 		}
2212:FreeRTOS/tasks.c **** 		else
2213:FreeRTOS/tasks.c **** 		{
2214:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2215:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2216:FreeRTOS/tasks.c **** 			scheduler will handle it. */
2217:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2218:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2219:FreeRTOS/tasks.c **** 		}
2220:FreeRTOS/tasks.c **** 	}
2221:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2222:FreeRTOS/tasks.c **** 	{
2223:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2224:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2225:FreeRTOS/tasks.c **** 			will handle it. */
2226:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2227:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2228:FreeRTOS/tasks.c **** 	}
2229:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 91


2230:FreeRTOS/tasks.c **** }
 2689              		.loc 1 2230 0
 2690 0064 07E0     		b	.L203	@
 2691              	.L201:
2217:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2692              		.loc 1 2217 0
 2693 0066 094B     		ldr	r3, .L204+12	@ tmp133,
 2694 0068 1A68     		ldr	r2, [r3]	@ D.6640, xTickCount
 2695 006a 3B68     		ldr	r3, [r7]	@ tmp135, xTicksToWait
 2696 006c 1344     		add	r3, r3, r2	@ tmp134, D.6640
 2697 006e FB60     		str	r3, [r7, #12]	@ tmp134, xTimeToWake
2218:FreeRTOS/tasks.c **** 		}
 2698              		.loc 1 2218 0
 2699 0070 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 2700 0072 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2701              	.L203:
 2702              		.loc 1 2230 0
 2703 0076 00BF     		nop
 2704 0078 1037     		adds	r7, r7, #16	@,,
 2705              		.cfi_def_cfa_offset 8
 2706 007a BD46     		mov	sp, r7	@,
 2707              		.cfi_def_cfa_register 13
 2708              		@ sp needed	@
 2709 007c 80BD     		pop	{r7, pc}	@
 2710              	.L205:
 2711 007e 00BF     		.align	2
 2712              	.L204:
 2713 0080 00000000 		.word	pxCurrentTCB
 2714 0084 00000000 		.word	uxTopReadyPriority
 2715 0088 00000000 		.word	xSuspendedTaskList
 2716 008c 00000000 		.word	xTickCount
 2717              		.cfi_endproc
 2718              	.LFE21:
 2719              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2720              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2721              		.align	2
 2722              		.global	vTaskPlaceOnUnorderedEventList
 2723              		.thumb
 2724              		.thumb_func
 2725              		.type	vTaskPlaceOnUnorderedEventList, %function
 2726              	vTaskPlaceOnUnorderedEventList:
 2727              	.LFB22:
2231:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2232:FreeRTOS/tasks.c **** 
2233:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickT_t xItemValue, const TickT_t 
2234:FreeRTOS/tasks.c **** {
 2728              		.loc 1 2234 0
 2729              		.cfi_startproc
 2730              		@ args = 0, pretend = 0, frame = 24
 2731              		@ frame_needed = 1, uses_anonymous_args = 0
 2732 0000 80B5     		push	{r7, lr}	@
 2733              		.cfi_def_cfa_offset 8
 2734              		.cfi_offset 7, -8
 2735              		.cfi_offset 14, -4
 2736 0002 86B0     		sub	sp, sp, #24	@,,
 2737              		.cfi_def_cfa_offset 32
 2738 0004 00AF     		add	r7, sp, #0	@,,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 92


 2739              		.cfi_def_cfa_register 7
 2740 0006 F860     		str	r0, [r7, #12]	@ pxEventList, pxEventList
 2741 0008 B960     		str	r1, [r7, #8]	@ xItemValue, xItemValue
 2742 000a 7A60     		str	r2, [r7, #4]	@ xTicksToWait, xTicksToWait
2235:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2236:FreeRTOS/tasks.c **** 
2237:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2743              		.loc 1 2237 0
 2744 000c FB68     		ldr	r3, [r7, #12]	@ tmp127, pxEventList
 2745 000e 002B     		cmp	r3, #0	@ tmp127,
 2746 0010 02D1     		bne	.L207	@,
 2747              		.loc 1 2237 0 is_stmt 0 discriminator 1
 2748 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2749              	.L208:
 2750 0016 FEE7     		b	.L208	@
 2751              	.L207:
2238:FreeRTOS/tasks.c **** 
2239:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2240:FreeRTOS/tasks.c **** 	the event groups implementation. */
2241:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 2752              		.loc 1 2241 0 is_stmt 1
 2753 0018 204B     		ldr	r3, .L215	@ tmp128,
 2754 001a 1B68     		ldr	r3, [r3]	@ D.6641, uxSchedulerSuspended
 2755 001c 002B     		cmp	r3, #0	@ D.6641,
 2756 001e 02D1     		bne	.L209	@,
 2757              		.loc 1 2241 0 is_stmt 0 discriminator 1
 2758 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2759              	.L210:
 2760              		.loc 1 2241 0 discriminator 2
 2761 0024 FEE7     		b	.L210	@
 2762              	.L209:
2242:FreeRTOS/tasks.c **** 
2243:FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2244:FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2245:FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2246:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2763              		.loc 1 2246 0 is_stmt 1
 2764 0026 1E4B     		ldr	r3, .L215+4	@ tmp129,
 2765 0028 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2766 002a BA68     		ldr	r2, [r7, #8]	@ tmp130, xItemValue
 2767 002c 42F00042 		orr	r2, r2, #-2147483648	@ D.6641, tmp130,
 2768 0030 9A61     		str	r2, [r3, #24]	@ D.6641, _6->xEventListItem.xItemValue
2247:FreeRTOS/tasks.c **** 
2248:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2249:FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2250:FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2251:FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2252:FreeRTOS/tasks.c **** 	the task level). */
2253:FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2769              		.loc 1 2253 0
 2770 0032 1B4B     		ldr	r3, .L215+4	@ tmp131,
 2771 0034 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2772 0036 1833     		adds	r3, r3, #24	@ D.6643, D.6642,
 2773 0038 1946     		mov	r1, r3	@, D.6643
 2774 003a F868     		ldr	r0, [r7, #12]	@, pxEventList
 2775 003c FFF7FEFF 		bl	vListInsertEnd	@
2254:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 93


2255:FreeRTOS/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2256:FreeRTOS/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2257:FreeRTOS/tasks.c **** 	scheduler is locked. */
2258:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 2776              		.loc 1 2258 0
 2777 0040 174B     		ldr	r3, .L215+4	@ tmp132,
 2778 0042 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2779 0044 0433     		adds	r3, r3, #4	@ D.6643, D.6642,
 2780 0046 1846     		mov	r0, r3	@, D.6643
 2781 0048 FFF7FEFF 		bl	uxListRemove	@
 2782 004c 0346     		mov	r3, r0	@ D.6641,
 2783 004e 002B     		cmp	r3, #0	@ D.6641,
 2784 0050 0BD1     		bne	.L211	@,
2259:FreeRTOS/tasks.c **** 	{
2260:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2261:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2262:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2785              		.loc 1 2262 0
 2786 0052 134B     		ldr	r3, .L215+4	@ tmp133,
 2787 0054 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2788 0056 DB6A     		ldr	r3, [r3, #44]	@ D.6641, _17->uxPriority
 2789 0058 0122     		movs	r2, #1	@ tmp134,
 2790 005a 02FA03F3 		lsl	r3, r2, r3	@ D.6641, tmp134, D.6641
 2791 005e DA43     		mvns	r2, r3	@ D.6641, D.6641
 2792 0060 104B     		ldr	r3, .L215+8	@ tmp135,
 2793 0062 1B68     		ldr	r3, [r3]	@ D.6641, uxTopReadyPriority
 2794 0064 1340     		ands	r3, r3, r2	@, D.6641, D.6641, D.6641
 2795 0066 0F4A     		ldr	r2, .L215+8	@ tmp136,
 2796 0068 1360     		str	r3, [r2]	@ D.6641, uxTopReadyPriority
 2797              	.L211:
2263:FreeRTOS/tasks.c **** 	}
2264:FreeRTOS/tasks.c **** 	else
2265:FreeRTOS/tasks.c **** 	{
2266:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2267:FreeRTOS/tasks.c **** 	}
2268:FreeRTOS/tasks.c **** 
2269:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2270:FreeRTOS/tasks.c **** 	{
2271:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2798              		.loc 1 2271 0
 2799 006a 7B68     		ldr	r3, [r7, #4]	@ tmp137, xTicksToWait
 2800 006c B3F1FF3F 		cmp	r3, #-1	@ tmp137,
 2801 0070 07D1     		bne	.L212	@,
2272:FreeRTOS/tasks.c **** 		{
2273:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2274:FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2275:FreeRTOS/tasks.c **** 			indefinitely. */
2276:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2802              		.loc 1 2276 0
 2803 0072 0B4B     		ldr	r3, .L215+4	@ tmp138,
 2804 0074 1B68     		ldr	r3, [r3]	@ D.6642, pxCurrentTCB
 2805 0076 0433     		adds	r3, r3, #4	@ D.6643, D.6642,
 2806 0078 1946     		mov	r1, r3	@, D.6643
 2807 007a 0B48     		ldr	r0, .L215+12	@,
 2808 007c FFF7FEFF 		bl	vListInsertEnd	@
2277:FreeRTOS/tasks.c **** 		}
2278:FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 94


2279:FreeRTOS/tasks.c **** 		{
2280:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2281:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2282:FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
2283:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2284:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2285:FreeRTOS/tasks.c **** 		}
2286:FreeRTOS/tasks.c **** 	}
2287:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2288:FreeRTOS/tasks.c **** 	{
2289:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2290:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2291:FreeRTOS/tasks.c **** 			will manage it correctly. */
2292:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2293:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2294:FreeRTOS/tasks.c **** 	}
2295:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2296:FreeRTOS/tasks.c **** }
 2809              		.loc 1 2296 0
 2810 0080 07E0     		b	.L214	@
 2811              	.L212:
2283:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2812              		.loc 1 2283 0
 2813 0082 0A4B     		ldr	r3, .L215+16	@ tmp139,
 2814 0084 1A68     		ldr	r2, [r3]	@ D.6641, xTickCount
 2815 0086 7B68     		ldr	r3, [r7, #4]	@ tmp141, xTicksToWait
 2816 0088 1344     		add	r3, r3, r2	@ tmp140, D.6641
 2817 008a 7B61     		str	r3, [r7, #20]	@ tmp140, xTimeToWake
2284:FreeRTOS/tasks.c **** 		}
 2818              		.loc 1 2284 0
 2819 008c 7869     		ldr	r0, [r7, #20]	@, xTimeToWake
 2820 008e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2821              	.L214:
 2822              		.loc 1 2296 0
 2823 0092 00BF     		nop
 2824 0094 1837     		adds	r7, r7, #24	@,,
 2825              		.cfi_def_cfa_offset 8
 2826 0096 BD46     		mov	sp, r7	@,
 2827              		.cfi_def_cfa_register 13
 2828              		@ sp needed	@
 2829 0098 80BD     		pop	{r7, pc}	@
 2830              	.L216:
 2831 009a 00BF     		.align	2
 2832              	.L215:
 2833 009c 00000000 		.word	uxSchedulerSuspended
 2834 00a0 00000000 		.word	pxCurrentTCB
 2835 00a4 00000000 		.word	uxTopReadyPriority
 2836 00a8 00000000 		.word	xSuspendedTaskList
 2837 00ac 00000000 		.word	xTickCount
 2838              		.cfi_endproc
 2839              	.LFE22:
 2840              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2841              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2842              		.align	2
 2843              		.global	xTaskRemoveFromEventList
 2844              		.thumb
 2845              		.thumb_func
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 95


 2846              		.type	xTaskRemoveFromEventList, %function
 2847              	xTaskRemoveFromEventList:
 2848              	.LFB23:
2297:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2298:FreeRTOS/tasks.c **** 
2299:FreeRTOS/tasks.c **** #if configUSE_TIMERS == 1
2300:FreeRTOS/tasks.c **** 
2301:FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickT_t xTicksToWait )
2302:FreeRTOS/tasks.c **** 	{
2303:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
2304:FreeRTOS/tasks.c **** 
2305:FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2306:FreeRTOS/tasks.c **** 
2307:FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2308:FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2309:FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2310:FreeRTOS/tasks.c **** 		it should be called from a critical section. */
2311:FreeRTOS/tasks.c **** 
2312:FreeRTOS/tasks.c **** 
2313:FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2314:FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2315:FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2316:FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2317:FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2318:FreeRTOS/tasks.c **** 
2319:FreeRTOS/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2320:FreeRTOS/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2321:FreeRTOS/tasks.c **** 		function is called form a critical section. */
2322:FreeRTOS/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
2323:FreeRTOS/tasks.c **** 		{
2324:FreeRTOS/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2325:FreeRTOS/tasks.c **** 			check, and the port reset macro can be called directly. */
2326:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2327:FreeRTOS/tasks.c **** 		}
2328:FreeRTOS/tasks.c **** 		else
2329:FreeRTOS/tasks.c **** 		{
2330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2331:FreeRTOS/tasks.c **** 		}
2332:FreeRTOS/tasks.c **** 
2333:FreeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
2334:FreeRTOS/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
2335:FreeRTOS/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
2336:FreeRTOS/tasks.c **** 
2337:FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL();
2338:FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
2339:FreeRTOS/tasks.c **** 	}
2340:FreeRTOS/tasks.c **** 
2341:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2342:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2343:FreeRTOS/tasks.c **** 
2344:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2345:FreeRTOS/tasks.c **** {
 2849              		.loc 1 2345 0
 2850              		.cfi_startproc
 2851              		@ args = 0, pretend = 0, frame = 16
 2852              		@ frame_needed = 1, uses_anonymous_args = 0
 2853 0000 80B5     		push	{r7, lr}	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 96


 2854              		.cfi_def_cfa_offset 8
 2855              		.cfi_offset 7, -8
 2856              		.cfi_offset 14, -4
 2857 0002 84B0     		sub	sp, sp, #16	@,,
 2858              		.cfi_def_cfa_offset 24
 2859 0004 00AF     		add	r7, sp, #0	@,,
 2860              		.cfi_def_cfa_register 7
 2861 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
2346:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2347:FreeRTOS/tasks.c **** BaseT_t xReturn;
2348:FreeRTOS/tasks.c **** 
2349:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2350:FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2351:FreeRTOS/tasks.c **** 
2352:FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2353:FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2354:FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2355:FreeRTOS/tasks.c **** 
2356:FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2357:FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2358:FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2359:FreeRTOS/tasks.c **** 
2360:FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2361:FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2362:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2862              		.loc 1 2362 0
 2863 0008 7B68     		ldr	r3, [r7, #4]	@ tmp127, pxEventList
 2864 000a DB68     		ldr	r3, [r3, #12]	@ D.6644, pxEventList_5(D)->xListEnd.pxNext
 2865 000c DB68     		ldr	r3, [r3, #12]	@ tmp128, _6->pvOwner
 2866 000e BB60     		str	r3, [r7, #8]	@ tmp128, pxUnblockedTCB
2363:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2867              		.loc 1 2363 0
 2868 0010 BB68     		ldr	r3, [r7, #8]	@ tmp129, pxUnblockedTCB
 2869 0012 002B     		cmp	r3, #0	@ tmp129,
 2870 0014 02D1     		bne	.L218	@,
 2871              		.loc 1 2363 0 is_stmt 0 discriminator 1
 2872 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2873              	.L219:
 2874 001a FEE7     		b	.L219	@
 2875              	.L218:
2364:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2876              		.loc 1 2364 0 is_stmt 1
 2877 001c BB68     		ldr	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
 2878 001e 1833     		adds	r3, r3, #24	@ D.6645, tmp130,
 2879 0020 1846     		mov	r0, r3	@, D.6645
 2880 0022 FFF7FEFF 		bl	uxListRemove	@
2365:FreeRTOS/tasks.c **** 
2366:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2881              		.loc 1 2366 0
 2882 0026 1D4B     		ldr	r3, .L225	@ tmp131,
 2883 0028 1B68     		ldr	r3, [r3]	@ D.6646, uxSchedulerSuspended
 2884 002a 002B     		cmp	r3, #0	@ D.6646,
 2885 002c 1CD1     		bne	.L220	@,
2367:FreeRTOS/tasks.c **** 	{
2368:FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2886              		.loc 1 2368 0
 2887 002e BB68     		ldr	r3, [r7, #8]	@ tmp132, pxUnblockedTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 97


 2888 0030 0433     		adds	r3, r3, #4	@ D.6645, tmp132,
 2889 0032 1846     		mov	r0, r3	@, D.6645
 2890 0034 FFF7FEFF 		bl	uxListRemove	@
2369:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2891              		.loc 1 2369 0
 2892 0038 BB68     		ldr	r3, [r7, #8]	@ tmp133, pxUnblockedTCB
 2893 003a DB6A     		ldr	r3, [r3, #44]	@ D.6646, pxUnblockedTCB_7->uxPriority
 2894 003c 0122     		movs	r2, #1	@ tmp134,
 2895 003e 9A40     		lsls	r2, r2, r3	@ D.6646, tmp134, D.6646
 2896 0040 174B     		ldr	r3, .L225+4	@ tmp135,
 2897 0042 1B68     		ldr	r3, [r3]	@ D.6646, uxTopReadyPriority
 2898 0044 1343     		orrs	r3, r3, r2	@, D.6646, D.6646, D.6646
 2899 0046 164A     		ldr	r2, .L225+4	@ tmp136,
 2900 0048 1360     		str	r3, [r2]	@ D.6646, uxTopReadyPriority
 2901 004a BB68     		ldr	r3, [r7, #8]	@ tmp137, pxUnblockedTCB
 2902 004c DA6A     		ldr	r2, [r3, #44]	@ D.6646, pxUnblockedTCB_7->uxPriority
 2903 004e 1346     		mov	r3, r2	@ tmp138, D.6646
 2904 0050 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 2905 0052 1344     		add	r3, r3, r2	@ tmp138, D.6646
 2906 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 2907 0056 134A     		ldr	r2, .L225+8	@ tmp140,
 2908 0058 1A44     		add	r2, r2, r3	@ D.6647, tmp138
 2909 005a BB68     		ldr	r3, [r7, #8]	@ tmp141, pxUnblockedTCB
 2910 005c 0433     		adds	r3, r3, #4	@ D.6645, tmp141,
 2911 005e 1946     		mov	r1, r3	@, D.6645
 2912 0060 1046     		mov	r0, r2	@, D.6647
 2913 0062 FFF7FEFF 		bl	vListInsertEnd	@
 2914 0066 05E0     		b	.L221	@
 2915              	.L220:
2370:FreeRTOS/tasks.c **** 	}
2371:FreeRTOS/tasks.c **** 	else
2372:FreeRTOS/tasks.c **** 	{
2373:FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2374:FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2375:FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2916              		.loc 1 2375 0
 2917 0068 BB68     		ldr	r3, [r7, #8]	@ tmp142, pxUnblockedTCB
 2918 006a 1833     		adds	r3, r3, #24	@ D.6645, tmp142,
 2919 006c 1946     		mov	r1, r3	@, D.6645
 2920 006e 0E48     		ldr	r0, .L225+12	@,
 2921 0070 FFF7FEFF 		bl	vListInsertEnd	@
 2922              	.L221:
2376:FreeRTOS/tasks.c **** 	}
2377:FreeRTOS/tasks.c **** 
2378:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2923              		.loc 1 2378 0
 2924 0074 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxUnblockedTCB
 2925 0076 DA6A     		ldr	r2, [r3, #44]	@ D.6646, pxUnblockedTCB_7->uxPriority
 2926 0078 0C4B     		ldr	r3, .L225+16	@ tmp144,
 2927 007a 1B68     		ldr	r3, [r3]	@ D.6648, pxCurrentTCB
 2928 007c DB6A     		ldr	r3, [r3, #44]	@ D.6646, _25->uxPriority
 2929 007e 9A42     		cmp	r2, r3	@ D.6646, D.6646
 2930 0080 05D9     		bls	.L222	@,
2379:FreeRTOS/tasks.c **** 	{
2380:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2381:FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2382:FreeRTOS/tasks.c **** 		it should force a context switch now. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 98


2383:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 2931              		.loc 1 2383 0
 2932 0082 0123     		movs	r3, #1	@ tmp145,
 2933 0084 FB60     		str	r3, [r7, #12]	@ tmp145, xReturn
2384:FreeRTOS/tasks.c **** 
2385:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2386:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2387:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2934              		.loc 1 2387 0
 2935 0086 0A4B     		ldr	r3, .L225+20	@ tmp146,
 2936 0088 0122     		movs	r2, #1	@ tmp147,
 2937 008a 1A60     		str	r2, [r3]	@ tmp147, xYieldPending
 2938 008c 01E0     		b	.L223	@
 2939              	.L222:
2388:FreeRTOS/tasks.c **** 	}
2389:FreeRTOS/tasks.c **** 	else
2390:FreeRTOS/tasks.c **** 	{
2391:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 2940              		.loc 1 2391 0
 2941 008e 0023     		movs	r3, #0	@ tmp148,
 2942 0090 FB60     		str	r3, [r7, #12]	@ tmp148, xReturn
 2943              	.L223:
2392:FreeRTOS/tasks.c **** 	}
2393:FreeRTOS/tasks.c **** 
2394:FreeRTOS/tasks.c **** 	return xReturn;
 2944              		.loc 1 2394 0
 2945 0092 FB68     		ldr	r3, [r7, #12]	@ D.6649, xReturn
2395:FreeRTOS/tasks.c **** }
 2946              		.loc 1 2395 0
 2947 0094 1846     		mov	r0, r3	@, <retval>
 2948 0096 1037     		adds	r7, r7, #16	@,,
 2949              		.cfi_def_cfa_offset 8
 2950 0098 BD46     		mov	sp, r7	@,
 2951              		.cfi_def_cfa_register 13
 2952              		@ sp needed	@
 2953 009a 80BD     		pop	{r7, pc}	@
 2954              	.L226:
 2955              		.align	2
 2956              	.L225:
 2957 009c 00000000 		.word	uxSchedulerSuspended
 2958 00a0 00000000 		.word	uxTopReadyPriority
 2959 00a4 00000000 		.word	pxReadyTasksLists
 2960 00a8 00000000 		.word	xPendingReadyList
 2961 00ac 00000000 		.word	pxCurrentTCB
 2962 00b0 00000000 		.word	xYieldPending
 2963              		.cfi_endproc
 2964              	.LFE23:
 2965              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2966              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2967              		.align	2
 2968              		.global	xTaskRemoveFromUnorderedEventList
 2969              		.thumb
 2970              		.thumb_func
 2971              		.type	xTaskRemoveFromUnorderedEventList, %function
 2972              	xTaskRemoveFromUnorderedEventList:
 2973              	.LFB24:
2396:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 99


2397:FreeRTOS/tasks.c **** 
2398:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickT_t xItemValue )
2399:FreeRTOS/tasks.c **** {
 2974              		.loc 1 2399 0
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 16
 2977              		@ frame_needed = 1, uses_anonymous_args = 0
 2978 0000 80B5     		push	{r7, lr}	@
 2979              		.cfi_def_cfa_offset 8
 2980              		.cfi_offset 7, -8
 2981              		.cfi_offset 14, -4
 2982 0002 84B0     		sub	sp, sp, #16	@,,
 2983              		.cfi_def_cfa_offset 24
 2984 0004 00AF     		add	r7, sp, #0	@,,
 2985              		.cfi_def_cfa_register 7
 2986 0006 7860     		str	r0, [r7, #4]	@ pxEventListItem, pxEventListItem
 2987 0008 3960     		str	r1, [r7]	@ xItemValue, xItemValue
2400:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2401:FreeRTOS/tasks.c **** BaseT_t xReturn;
2402:FreeRTOS/tasks.c **** 
2403:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2404:FreeRTOS/tasks.c **** 	the event flags implementation. */
2405:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 2988              		.loc 1 2405 0
 2989 000a 244B     		ldr	r3, .L235	@ tmp125,
 2990 000c 1B68     		ldr	r3, [r3]	@ D.6650, uxSchedulerSuspended
 2991 000e 002B     		cmp	r3, #0	@ D.6650,
 2992 0010 02D1     		bne	.L228	@,
 2993              		.loc 1 2405 0 is_stmt 0 discriminator 1
 2994 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2995              	.L229:
 2996 0016 FEE7     		b	.L229	@
 2997              	.L228:
2406:FreeRTOS/tasks.c **** 
2407:FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2408:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 2998              		.loc 1 2408 0 is_stmt 1
 2999 0018 3B68     		ldr	r3, [r7]	@ tmp126, xItemValue
 3000 001a 43F00042 		orr	r2, r3, #-2147483648	@ D.6650, tmp126,
 3001 001e 7B68     		ldr	r3, [r7, #4]	@ tmp127, pxEventListItem
 3002 0020 1A60     		str	r2, [r3]	@ D.6650, pxEventListItem_7(D)->xItemValue
2409:FreeRTOS/tasks.c **** 
2410:FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2411:FreeRTOS/tasks.c **** 	event flags. */
2412:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 3003              		.loc 1 2412 0
 3004 0022 7B68     		ldr	r3, [r7, #4]	@ tmp128, pxEventListItem
 3005 0024 DB68     		ldr	r3, [r3, #12]	@ tmp129, pxEventListItem_7(D)->pvOwner
 3006 0026 BB60     		str	r3, [r7, #8]	@ tmp129, pxUnblockedTCB
2413:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3007              		.loc 1 2413 0
 3008 0028 BB68     		ldr	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
 3009 002a 002B     		cmp	r3, #0	@ tmp130,
 3010 002c 02D1     		bne	.L230	@,
 3011              		.loc 1 2413 0 is_stmt 0 discriminator 1
 3012 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3013              	.L231:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 100


 3014              		.loc 1 2413 0 discriminator 2
 3015 0032 FEE7     		b	.L231	@
 3016              	.L230:
2414:FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3017              		.loc 1 2414 0 is_stmt 1
 3018 0034 7868     		ldr	r0, [r7, #4]	@, pxEventListItem
 3019 0036 FFF7FEFF 		bl	uxListRemove	@
2415:FreeRTOS/tasks.c **** 
2416:FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2417:FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2418:FreeRTOS/tasks.c **** 	lists. */
2419:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3020              		.loc 1 2419 0
 3021 003a BB68     		ldr	r3, [r7, #8]	@ tmp131, pxUnblockedTCB
 3022 003c 0433     		adds	r3, r3, #4	@ D.6651, tmp131,
 3023 003e 1846     		mov	r0, r3	@, D.6651
 3024 0040 FFF7FEFF 		bl	uxListRemove	@
2420:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3025              		.loc 1 2420 0
 3026 0044 BB68     		ldr	r3, [r7, #8]	@ tmp132, pxUnblockedTCB
 3027 0046 DB6A     		ldr	r3, [r3, #44]	@ D.6650, pxUnblockedTCB_9->uxPriority
 3028 0048 0122     		movs	r2, #1	@ tmp133,
 3029 004a 9A40     		lsls	r2, r2, r3	@ D.6650, tmp133, D.6650
 3030 004c 144B     		ldr	r3, .L235+4	@ tmp134,
 3031 004e 1B68     		ldr	r3, [r3]	@ D.6650, uxTopReadyPriority
 3032 0050 1343     		orrs	r3, r3, r2	@, D.6650, D.6650, D.6650
 3033 0052 134A     		ldr	r2, .L235+4	@ tmp135,
 3034 0054 1360     		str	r3, [r2]	@ D.6650, uxTopReadyPriority
 3035 0056 BB68     		ldr	r3, [r7, #8]	@ tmp136, pxUnblockedTCB
 3036 0058 DA6A     		ldr	r2, [r3, #44]	@ D.6650, pxUnblockedTCB_9->uxPriority
 3037 005a 1346     		mov	r3, r2	@ tmp137, D.6650
 3038 005c 9B00     		lsls	r3, r3, #2	@ tmp137, tmp137,
 3039 005e 1344     		add	r3, r3, r2	@ tmp137, D.6650
 3040 0060 9B00     		lsls	r3, r3, #2	@ tmp138, tmp137,
 3041 0062 104A     		ldr	r2, .L235+8	@ tmp139,
 3042 0064 1A44     		add	r2, r2, r3	@ D.6652, tmp137
 3043 0066 BB68     		ldr	r3, [r7, #8]	@ tmp140, pxUnblockedTCB
 3044 0068 0433     		adds	r3, r3, #4	@ D.6651, tmp140,
 3045 006a 1946     		mov	r1, r3	@, D.6651
 3046 006c 1046     		mov	r0, r2	@, D.6652
 3047 006e FFF7FEFF 		bl	vListInsertEnd	@
2421:FreeRTOS/tasks.c **** 
2422:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3048              		.loc 1 2422 0
 3049 0072 BB68     		ldr	r3, [r7, #8]	@ tmp141, pxUnblockedTCB
 3050 0074 DA6A     		ldr	r2, [r3, #44]	@ D.6650, pxUnblockedTCB_9->uxPriority
 3051 0076 0C4B     		ldr	r3, .L235+12	@ tmp142,
 3052 0078 1B68     		ldr	r3, [r3]	@ D.6653, pxCurrentTCB
 3053 007a DB6A     		ldr	r3, [r3, #44]	@ D.6650, _23->uxPriority
 3054 007c 9A42     		cmp	r2, r3	@ D.6650, D.6650
 3055 007e 05D9     		bls	.L232	@,
2423:FreeRTOS/tasks.c **** 	{
2424:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2425:FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2426:FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2427:FreeRTOS/tasks.c **** 		switch now. */
2428:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 101


 3056              		.loc 1 2428 0
 3057 0080 0123     		movs	r3, #1	@ tmp143,
 3058 0082 FB60     		str	r3, [r7, #12]	@ tmp143, xReturn
2429:FreeRTOS/tasks.c **** 
2430:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2431:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2432:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3059              		.loc 1 2432 0
 3060 0084 094B     		ldr	r3, .L235+16	@ tmp144,
 3061 0086 0122     		movs	r2, #1	@ tmp145,
 3062 0088 1A60     		str	r2, [r3]	@ tmp145, xYieldPending
 3063 008a 01E0     		b	.L233	@
 3064              	.L232:
2433:FreeRTOS/tasks.c **** 	}
2434:FreeRTOS/tasks.c **** 	else
2435:FreeRTOS/tasks.c **** 	{
2436:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 3065              		.loc 1 2436 0
 3066 008c 0023     		movs	r3, #0	@ tmp146,
 3067 008e FB60     		str	r3, [r7, #12]	@ tmp146, xReturn
 3068              	.L233:
2437:FreeRTOS/tasks.c **** 	}
2438:FreeRTOS/tasks.c **** 
2439:FreeRTOS/tasks.c **** 	return xReturn;
 3069              		.loc 1 2439 0
 3070 0090 FB68     		ldr	r3, [r7, #12]	@ D.6654, xReturn
2440:FreeRTOS/tasks.c **** }
 3071              		.loc 1 2440 0
 3072 0092 1846     		mov	r0, r3	@, <retval>
 3073 0094 1037     		adds	r7, r7, #16	@,,
 3074              		.cfi_def_cfa_offset 8
 3075 0096 BD46     		mov	sp, r7	@,
 3076              		.cfi_def_cfa_register 13
 3077              		@ sp needed	@
 3078 0098 80BD     		pop	{r7, pc}	@
 3079              	.L236:
 3080 009a 00BF     		.align	2
 3081              	.L235:
 3082 009c 00000000 		.word	uxSchedulerSuspended
 3083 00a0 00000000 		.word	uxTopReadyPriority
 3084 00a4 00000000 		.word	pxReadyTasksLists
 3085 00a8 00000000 		.word	pxCurrentTCB
 3086 00ac 00000000 		.word	xYieldPending
 3087              		.cfi_endproc
 3088              	.LFE24:
 3089              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 3090              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3091              		.align	2
 3092              		.global	vTaskSetTimeOutState
 3093              		.thumb
 3094              		.thumb_func
 3095              		.type	vTaskSetTimeOutState, %function
 3096              	vTaskSetTimeOutState:
 3097              	.LFB25:
2441:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2442:FreeRTOS/tasks.c **** 
2443:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 102


2444:FreeRTOS/tasks.c **** {
 3098              		.loc 1 2444 0
 3099              		.cfi_startproc
 3100              		@ args = 0, pretend = 0, frame = 8
 3101              		@ frame_needed = 1, uses_anonymous_args = 0
 3102 0000 80B5     		push	{r7, lr}	@
 3103              		.cfi_def_cfa_offset 8
 3104              		.cfi_offset 7, -8
 3105              		.cfi_offset 14, -4
 3106 0002 82B0     		sub	sp, sp, #8	@,,
 3107              		.cfi_def_cfa_offset 16
 3108 0004 00AF     		add	r7, sp, #0	@,,
 3109              		.cfi_def_cfa_register 7
 3110 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
2445:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3111              		.loc 1 2445 0
 3112 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, pxTimeOut
 3113 000a 002B     		cmp	r3, #0	@ tmp112,
 3114 000c 02D1     		bne	.L238	@,
 3115              		.loc 1 2445 0 is_stmt 0 discriminator 1
 3116 000e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3117              	.L239:
 3118 0012 FEE7     		b	.L239	@
 3119              	.L238:
2446:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3120              		.loc 1 2446 0 is_stmt 1
 3121 0014 054B     		ldr	r3, .L240	@ tmp113,
 3122 0016 1A68     		ldr	r2, [r3]	@ D.6655, xNumOfOverflows
 3123 0018 7B68     		ldr	r3, [r7, #4]	@ tmp114, pxTimeOut
 3124 001a 1A60     		str	r2, [r3]	@ D.6655, pxTimeOut_1(D)->xOverflowCount
2447:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3125              		.loc 1 2447 0
 3126 001c 044B     		ldr	r3, .L240+4	@ tmp115,
 3127 001e 1A68     		ldr	r2, [r3]	@ D.6656, xTickCount
 3128 0020 7B68     		ldr	r3, [r7, #4]	@ tmp116, pxTimeOut
 3129 0022 5A60     		str	r2, [r3, #4]	@ D.6656, pxTimeOut_1(D)->xTimeOnEntering
2448:FreeRTOS/tasks.c **** }
 3130              		.loc 1 2448 0
 3131 0024 00BF     		nop
 3132 0026 0837     		adds	r7, r7, #8	@,,
 3133              		.cfi_def_cfa_offset 8
 3134 0028 BD46     		mov	sp, r7	@,
 3135              		.cfi_def_cfa_register 13
 3136              		@ sp needed	@
 3137 002a 80BD     		pop	{r7, pc}	@
 3138              	.L241:
 3139              		.align	2
 3140              	.L240:
 3141 002c 00000000 		.word	xNumOfOverflows
 3142 0030 00000000 		.word	xTickCount
 3143              		.cfi_endproc
 3144              	.LFE25:
 3145              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3146              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3147              		.align	2
 3148              		.global	xTaskCheckForTimeOut
 3149              		.thumb
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 103


 3150              		.thumb_func
 3151              		.type	xTaskCheckForTimeOut, %function
 3152              	xTaskCheckForTimeOut:
 3153              	.LFB26:
2449:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2450:FreeRTOS/tasks.c **** 
2451:FreeRTOS/tasks.c **** BaseT_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickT_t * const pxTicksToWait )
2452:FreeRTOS/tasks.c **** {
 3154              		.loc 1 2452 0
 3155              		.cfi_startproc
 3156              		@ args = 0, pretend = 0, frame = 16
 3157              		@ frame_needed = 1, uses_anonymous_args = 0
 3158 0000 80B5     		push	{r7, lr}	@
 3159              		.cfi_def_cfa_offset 8
 3160              		.cfi_offset 7, -8
 3161              		.cfi_offset 14, -4
 3162 0002 84B0     		sub	sp, sp, #16	@,,
 3163              		.cfi_def_cfa_offset 24
 3164 0004 00AF     		add	r7, sp, #0	@,,
 3165              		.cfi_def_cfa_register 7
 3166 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
 3167 0008 3960     		str	r1, [r7]	@ pxTicksToWait, pxTicksToWait
2453:FreeRTOS/tasks.c **** BaseT_t xReturn;
2454:FreeRTOS/tasks.c **** 
2455:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3168              		.loc 1 2455 0
 3169 000a 7B68     		ldr	r3, [r7, #4]	@ tmp123, pxTimeOut
 3170 000c 002B     		cmp	r3, #0	@ tmp123,
 3171 000e 02D1     		bne	.L243	@,
 3172              		.loc 1 2455 0 is_stmt 0 discriminator 1
 3173 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3174              	.L244:
 3175 0014 FEE7     		b	.L244	@
 3176              	.L243:
2456:FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 3177              		.loc 1 2456 0 is_stmt 1
 3178 0016 3B68     		ldr	r3, [r7]	@ tmp124, pxTicksToWait
 3179 0018 002B     		cmp	r3, #0	@ tmp124,
 3180 001a 02D1     		bne	.L245	@,
 3181              		.loc 1 2456 0 is_stmt 0 discriminator 1
 3182 001c FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3183              	.L246:
 3184              		.loc 1 2456 0 discriminator 2
 3185 0020 FEE7     		b	.L246	@
 3186              	.L245:
2457:FreeRTOS/tasks.c **** 
2458:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 3187              		.loc 1 2458 0 is_stmt 1
 3188 0022 FFF7FEFF 		bl	vPortEnterCritical	@
 3189              	.LBB14:
2459:FreeRTOS/tasks.c **** 	{
2460:FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2461:FreeRTOS/tasks.c **** 		const TickT_t xConstTickCount = xTickCount;
 3190              		.loc 1 2461 0
 3191 0026 1C4B     		ldr	r3, .L252	@ tmp125,
 3192 0028 1B68     		ldr	r3, [r3]	@ tmp126, xTickCount
 3193 002a BB60     		str	r3, [r7, #8]	@ tmp126, xConstTickCount
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 104


2462:FreeRTOS/tasks.c **** 
2463:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2464:FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2465:FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2466:FreeRTOS/tasks.c **** 			therefore never time out. */
2467:FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3194              		.loc 1 2467 0
 3195 002c 3B68     		ldr	r3, [r7]	@ tmp127, pxTicksToWait
 3196 002e 1B68     		ldr	r3, [r3]	@ D.6657, *pxTicksToWait_4(D)
 3197 0030 B3F1FF3F 		cmp	r3, #-1	@ D.6657,
 3198 0034 02D1     		bne	.L247	@,
2468:FreeRTOS/tasks.c **** 			{
2469:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
 3199              		.loc 1 2469 0
 3200 0036 0023     		movs	r3, #0	@ tmp128,
 3201 0038 FB60     		str	r3, [r7, #12]	@ tmp128, xReturn
 3202 003a 26E0     		b	.L248	@
 3203              	.L247:
2470:FreeRTOS/tasks.c **** 			}
2471:FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2472:FreeRTOS/tasks.c **** 		#endif
2473:FreeRTOS/tasks.c **** 
2474:FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3204              		.loc 1 2474 0
 3205 003c 7B68     		ldr	r3, [r7, #4]	@ tmp129, pxTimeOut
 3206 003e 1A68     		ldr	r2, [r3]	@ D.6658, pxTimeOut_3(D)->xOverflowCount
 3207 0040 164B     		ldr	r3, .L252+4	@ tmp130,
 3208 0042 1B68     		ldr	r3, [r3]	@ D.6658, xNumOfOverflows
 3209 0044 9A42     		cmp	r2, r3	@ D.6658, D.6658
 3210 0046 07D0     		beq	.L249	@,
 3211              		.loc 1 2474 0 is_stmt 0 discriminator 1
 3212 0048 7B68     		ldr	r3, [r7, #4]	@ tmp131, pxTimeOut
 3213 004a 5A68     		ldr	r2, [r3, #4]	@ D.6657, pxTimeOut_3(D)->xTimeOnEntering
 3214 004c BB68     		ldr	r3, [r7, #8]	@ tmp132, xConstTickCount
 3215 004e 9A42     		cmp	r2, r3	@ D.6657, tmp132
 3216 0050 02D8     		bhi	.L249	@,
2475:FreeRTOS/tasks.c **** 		{
2476:FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2477:FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2478:FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2479:FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2480:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3217              		.loc 1 2480 0 is_stmt 1
 3218 0052 0123     		movs	r3, #1	@ tmp133,
 3219 0054 FB60     		str	r3, [r7, #12]	@ tmp133, xReturn
 3220 0056 18E0     		b	.L248	@
 3221              	.L249:
2481:FreeRTOS/tasks.c **** 		}
2482:FreeRTOS/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 3222              		.loc 1 2482 0
 3223 0058 7B68     		ldr	r3, [r7, #4]	@ tmp134, pxTimeOut
 3224 005a 5B68     		ldr	r3, [r3, #4]	@ D.6657, pxTimeOut_3(D)->xTimeOnEntering
 3225 005c BA68     		ldr	r2, [r7, #8]	@ tmp135, xConstTickCount
 3226 005e D21A     		subs	r2, r2, r3	@ D.6657, tmp135, D.6657
 3227 0060 3B68     		ldr	r3, [r7]	@ tmp136, pxTicksToWait
 3228 0062 1B68     		ldr	r3, [r3]	@ D.6657, *pxTicksToWait_4(D)
 3229 0064 9A42     		cmp	r2, r3	@ D.6657, D.6657
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 105


 3230 0066 0ED2     		bcs	.L250	@,
2483:FreeRTOS/tasks.c **** 		{
2484:FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2485:FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 3231              		.loc 1 2485 0
 3232 0068 3B68     		ldr	r3, [r7]	@ tmp137, pxTicksToWait
 3233 006a 1A68     		ldr	r2, [r3]	@ D.6657, *pxTicksToWait_4(D)
 3234 006c 7B68     		ldr	r3, [r7, #4]	@ tmp138, pxTimeOut
 3235 006e 5968     		ldr	r1, [r3, #4]	@ D.6657, pxTimeOut_3(D)->xTimeOnEntering
 3236 0070 BB68     		ldr	r3, [r7, #8]	@ tmp139, xConstTickCount
 3237 0072 CB1A     		subs	r3, r1, r3	@ D.6657, D.6657, tmp139
 3238 0074 1A44     		add	r2, r2, r3	@ D.6657, D.6657
 3239 0076 3B68     		ldr	r3, [r7]	@ tmp140, pxTicksToWait
 3240 0078 1A60     		str	r2, [r3]	@ D.6657, *pxTicksToWait_4(D)
2486:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3241              		.loc 1 2486 0
 3242 007a 7868     		ldr	r0, [r7, #4]	@, pxTimeOut
 3243 007c FFF7FEFF 		bl	vTaskSetTimeOutState	@
2487:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 3244              		.loc 1 2487 0
 3245 0080 0023     		movs	r3, #0	@ tmp141,
 3246 0082 FB60     		str	r3, [r7, #12]	@ tmp141, xReturn
 3247 0084 01E0     		b	.L248	@
 3248              	.L250:
2488:FreeRTOS/tasks.c **** 		}
2489:FreeRTOS/tasks.c **** 		else
2490:FreeRTOS/tasks.c **** 		{
2491:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3249              		.loc 1 2491 0
 3250 0086 0123     		movs	r3, #1	@ tmp142,
 3251 0088 FB60     		str	r3, [r7, #12]	@ tmp142, xReturn
 3252              	.L248:
 3253              	.LBE14:
2492:FreeRTOS/tasks.c **** 		}
2493:FreeRTOS/tasks.c **** 	}
2494:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 3254              		.loc 1 2494 0
 3255 008a FFF7FEFF 		bl	vPortExitCritical	@
2495:FreeRTOS/tasks.c **** 
2496:FreeRTOS/tasks.c **** 	return xReturn;
 3256              		.loc 1 2496 0
 3257 008e FB68     		ldr	r3, [r7, #12]	@ D.6659, xReturn
2497:FreeRTOS/tasks.c **** }
 3258              		.loc 1 2497 0
 3259 0090 1846     		mov	r0, r3	@, <retval>
 3260 0092 1037     		adds	r7, r7, #16	@,,
 3261              		.cfi_def_cfa_offset 8
 3262 0094 BD46     		mov	sp, r7	@,
 3263              		.cfi_def_cfa_register 13
 3264              		@ sp needed	@
 3265 0096 80BD     		pop	{r7, pc}	@
 3266              	.L253:
 3267              		.align	2
 3268              	.L252:
 3269 0098 00000000 		.word	xTickCount
 3270 009c 00000000 		.word	xNumOfOverflows
 3271              		.cfi_endproc
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 106


 3272              	.LFE26:
 3273              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3274              		.section	.text.vTaskMissedYield,"ax",%progbits
 3275              		.align	2
 3276              		.global	vTaskMissedYield
 3277              		.thumb
 3278              		.thumb_func
 3279              		.type	vTaskMissedYield, %function
 3280              	vTaskMissedYield:
 3281              	.LFB27:
2498:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2499:FreeRTOS/tasks.c **** 
2500:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
2501:FreeRTOS/tasks.c **** {
 3282              		.loc 1 2501 0
 3283              		.cfi_startproc
 3284              		@ args = 0, pretend = 0, frame = 0
 3285              		@ frame_needed = 1, uses_anonymous_args = 0
 3286              		@ link register save eliminated.
 3287 0000 80B4     		push	{r7}	@
 3288              		.cfi_def_cfa_offset 4
 3289              		.cfi_offset 7, -4
 3290 0002 00AF     		add	r7, sp, #0	@,,
 3291              		.cfi_def_cfa_register 7
2502:FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3292              		.loc 1 2502 0
 3293 0004 034B     		ldr	r3, .L255	@ tmp110,
 3294 0006 0122     		movs	r2, #1	@ tmp111,
 3295 0008 1A60     		str	r2, [r3]	@ tmp111, xYieldPending
2503:FreeRTOS/tasks.c **** }
 3296              		.loc 1 2503 0
 3297 000a 00BF     		nop
 3298 000c BD46     		mov	sp, r7	@,
 3299              		.cfi_def_cfa_register 13
 3300              		@ sp needed	@
 3301 000e 80BC     		pop	{r7}	@
 3302              		.cfi_restore 7
 3303              		.cfi_def_cfa_offset 0
 3304 0010 7047     		bx	lr	@
 3305              	.L256:
 3306 0012 00BF     		.align	2
 3307              	.L255:
 3308 0014 00000000 		.word	xYieldPending
 3309              		.cfi_endproc
 3310              	.LFE27:
 3311              		.size	vTaskMissedYield, .-vTaskMissedYield
 3312              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3313              		.align	2
 3314              		.global	uxTaskGetTaskNumber
 3315              		.thumb
 3316              		.thumb_func
 3317              		.type	uxTaskGetTaskNumber, %function
 3318              	uxTaskGetTaskNumber:
 3319              	.LFB28:
2504:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2505:FreeRTOS/tasks.c **** 
2506:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 107


2507:FreeRTOS/tasks.c **** 
2508:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2509:FreeRTOS/tasks.c **** 	{
 3320              		.loc 1 2509 0
 3321              		.cfi_startproc
 3322              		@ args = 0, pretend = 0, frame = 16
 3323              		@ frame_needed = 1, uses_anonymous_args = 0
 3324              		@ link register save eliminated.
 3325 0000 80B4     		push	{r7}	@
 3326              		.cfi_def_cfa_offset 4
 3327              		.cfi_offset 7, -4
 3328 0002 85B0     		sub	sp, sp, #20	@,,
 3329              		.cfi_def_cfa_offset 24
 3330 0004 00AF     		add	r7, sp, #0	@,,
 3331              		.cfi_def_cfa_register 7
 3332 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
2510:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
2511:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2512:FreeRTOS/tasks.c **** 
2513:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3333              		.loc 1 2513 0
 3334 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, xTask
 3335 000a 002B     		cmp	r3, #0	@ tmp112,
 3336 000c 05D0     		beq	.L258	@,
2514:FreeRTOS/tasks.c **** 		{
2515:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3337              		.loc 1 2515 0
 3338 000e 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 3339 0010 BB60     		str	r3, [r7, #8]	@ tmp113, pxTCB
2516:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 3340              		.loc 1 2516 0
 3341 0012 BB68     		ldr	r3, [r7, #8]	@ tmp114, pxTCB
 3342 0014 5B6C     		ldr	r3, [r3, #68]	@ tmp115, pxTCB_3->uxTaskNumber
 3343 0016 FB60     		str	r3, [r7, #12]	@ tmp115, uxReturn
 3344 0018 01E0     		b	.L259	@
 3345              	.L258:
2517:FreeRTOS/tasks.c **** 		}
2518:FreeRTOS/tasks.c **** 		else
2519:FreeRTOS/tasks.c **** 		{
2520:FreeRTOS/tasks.c **** 			uxReturn = 0U;
 3346              		.loc 1 2520 0
 3347 001a 0023     		movs	r3, #0	@ tmp116,
 3348 001c FB60     		str	r3, [r7, #12]	@ tmp116, uxReturn
 3349              	.L259:
2521:FreeRTOS/tasks.c **** 		}
2522:FreeRTOS/tasks.c **** 
2523:FreeRTOS/tasks.c **** 		return uxReturn;
 3350              		.loc 1 2523 0
 3351 001e FB68     		ldr	r3, [r7, #12]	@ D.6660, uxReturn
2524:FreeRTOS/tasks.c **** 	}
 3352              		.loc 1 2524 0
 3353 0020 1846     		mov	r0, r3	@, <retval>
 3354 0022 1437     		adds	r7, r7, #20	@,,
 3355              		.cfi_def_cfa_offset 4
 3356 0024 BD46     		mov	sp, r7	@,
 3357              		.cfi_def_cfa_register 13
 3358              		@ sp needed	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 108


 3359 0026 80BC     		pop	{r7}	@
 3360              		.cfi_restore 7
 3361              		.cfi_def_cfa_offset 0
 3362 0028 7047     		bx	lr	@
 3363              		.cfi_endproc
 3364              	.LFE28:
 3365              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 3366 002a 00BF     		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3367              		.align	2
 3368              		.global	vTaskSetTaskNumber
 3369              		.thumb
 3370              		.thumb_func
 3371              		.type	vTaskSetTaskNumber, %function
 3372              	vTaskSetTaskNumber:
 3373              	.LFB29:
2525:FreeRTOS/tasks.c **** 
2526:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2527:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2528:FreeRTOS/tasks.c **** 
2529:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2530:FreeRTOS/tasks.c **** 
2531:FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseT_t uxHandle )
2532:FreeRTOS/tasks.c **** 	{
 3374              		.loc 1 2532 0
 3375              		.cfi_startproc
 3376              		@ args = 0, pretend = 0, frame = 16
 3377              		@ frame_needed = 1, uses_anonymous_args = 0
 3378              		@ link register save eliminated.
 3379 0000 80B4     		push	{r7}	@
 3380              		.cfi_def_cfa_offset 4
 3381              		.cfi_offset 7, -4
 3382 0002 85B0     		sub	sp, sp, #20	@,,
 3383              		.cfi_def_cfa_offset 24
 3384 0004 00AF     		add	r7, sp, #0	@,,
 3385              		.cfi_def_cfa_register 7
 3386 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 3387 0008 3960     		str	r1, [r7]	@ uxHandle, uxHandle
2533:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2534:FreeRTOS/tasks.c **** 
2535:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3388              		.loc 1 2535 0
 3389 000a 7B68     		ldr	r3, [r7, #4]	@ tmp110, xTask
 3390 000c 002B     		cmp	r3, #0	@ tmp110,
 3391 000e 04D0     		beq	.L263	@,
2536:FreeRTOS/tasks.c **** 		{
2537:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3392              		.loc 1 2537 0
 3393 0010 7B68     		ldr	r3, [r7, #4]	@ tmp111, xTask
 3394 0012 FB60     		str	r3, [r7, #12]	@ tmp111, pxTCB
2538:FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 3395              		.loc 1 2538 0
 3396 0014 FB68     		ldr	r3, [r7, #12]	@ tmp112, pxTCB
 3397 0016 3A68     		ldr	r2, [r7]	@ tmp113, uxHandle
 3398 0018 5A64     		str	r2, [r3, #68]	@ tmp113, pxTCB_4->uxTaskNumber
 3399              	.L263:
2539:FreeRTOS/tasks.c **** 		}
2540:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 109


 3400              		.loc 1 2540 0
 3401 001a 00BF     		nop
 3402 001c 1437     		adds	r7, r7, #20	@,,
 3403              		.cfi_def_cfa_offset 4
 3404 001e BD46     		mov	sp, r7	@,
 3405              		.cfi_def_cfa_register 13
 3406              		@ sp needed	@
 3407 0020 80BC     		pop	{r7}	@
 3408              		.cfi_restore 7
 3409              		.cfi_def_cfa_offset 0
 3410 0022 7047     		bx	lr	@
 3411              		.cfi_endproc
 3412              	.LFE29:
 3413              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 3414              		.section	.text.prvIdleTask,"ax",%progbits
 3415              		.align	2
 3416              		.thumb
 3417              		.thumb_func
 3418              		.type	prvIdleTask, %function
 3419              	prvIdleTask:
 3420              	.LFB30:
2541:FreeRTOS/tasks.c **** 
2542:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2543:FreeRTOS/tasks.c **** 
2544:FreeRTOS/tasks.c **** /*
2545:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
2546:FreeRTOS/tasks.c ****  * The Idle task.
2547:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
2548:FreeRTOS/tasks.c ****  *
2549:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2550:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2551:FreeRTOS/tasks.c ****  *
2552:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
2553:FreeRTOS/tasks.c ****  *
2554:FreeRTOS/tasks.c ****  */
2555:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
2556:FreeRTOS/tasks.c **** {
 3421              		.loc 1 2556 0
 3422              		.cfi_startproc
 3423              		@ args = 0, pretend = 0, frame = 8
 3424              		@ frame_needed = 1, uses_anonymous_args = 0
 3425 0000 80B5     		push	{r7, lr}	@
 3426              		.cfi_def_cfa_offset 8
 3427              		.cfi_offset 7, -8
 3428              		.cfi_offset 14, -4
 3429 0002 82B0     		sub	sp, sp, #8	@,,
 3430              		.cfi_def_cfa_offset 16
 3431 0004 00AF     		add	r7, sp, #0	@,,
 3432              		.cfi_def_cfa_register 7
 3433 0006 7860     		str	r0, [r7, #4]	@ pvParameters, pvParameters
 3434              	.L265:
2557:FreeRTOS/tasks.c **** 	/* Stop warnings. */
2558:FreeRTOS/tasks.c **** 	( void ) pvParameters;
2559:FreeRTOS/tasks.c **** 
2560:FreeRTOS/tasks.c **** 	for( ;; )
2561:FreeRTOS/tasks.c **** 	{
2562:FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 110


2563:FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 3435              		.loc 1 2563 0 discriminator 1
 3436 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination	@
2564:FreeRTOS/tasks.c **** 
2565:FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2566:FreeRTOS/tasks.c **** 		{
2567:FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2568:FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
2569:FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
2570:FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
2571:FreeRTOS/tasks.c **** 			taskYIELD();
2572:FreeRTOS/tasks.c **** 		}
2573:FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2574:FreeRTOS/tasks.c **** 
2575:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2576:FreeRTOS/tasks.c **** 		{
2577:FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
2578:FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2579:FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
2580:FreeRTOS/tasks.c **** 			timeslice.
2581:FreeRTOS/tasks.c **** 
2582:FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
2583:FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2584:FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
2585:FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
2586:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseT_t ) 1 )
2587:FreeRTOS/tasks.c **** 			{
2588:FreeRTOS/tasks.c **** 				taskYIELD();
2589:FreeRTOS/tasks.c **** 			}
2590:FreeRTOS/tasks.c **** 			else
2591:FreeRTOS/tasks.c **** 			{
2592:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2593:FreeRTOS/tasks.c **** 			}
2594:FreeRTOS/tasks.c **** 		}
2595:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2596:FreeRTOS/tasks.c **** 
2597:FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2598:FreeRTOS/tasks.c **** 		{
2599:FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
2600:FreeRTOS/tasks.c **** 
2601:FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2602:FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
2603:FreeRTOS/tasks.c **** 			without the overhead of a separate task.
2604:FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2605:FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2606:FreeRTOS/tasks.c **** 			vApplicationIdleHook();
2607:FreeRTOS/tasks.c **** 		}
2608:FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2609:FreeRTOS/tasks.c **** 
2610:FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2611:FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2612:FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
2613:FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2614:FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2615:FreeRTOS/tasks.c **** 		{
2616:FreeRTOS/tasks.c **** 		TickT_t xExpectedIdleTime;
2617:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 111


2618:FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2619:FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2620:FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
2621:FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2622:FreeRTOS/tasks.c **** 			valid. */
2623:FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2624:FreeRTOS/tasks.c **** 
2625:FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2626:FreeRTOS/tasks.c **** 			{
2627:FreeRTOS/tasks.c **** 				vTaskSuspendAll();
2628:FreeRTOS/tasks.c **** 				{
2629:FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2630:FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
2631:FreeRTOS/tasks.c **** 					be used. */
2632:FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2633:FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2634:FreeRTOS/tasks.c **** 
2635:FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2636:FreeRTOS/tasks.c **** 					{
2637:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2638:FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2639:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
2640:FreeRTOS/tasks.c **** 					}
2641:FreeRTOS/tasks.c **** 					else
2642:FreeRTOS/tasks.c **** 					{
2643:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2644:FreeRTOS/tasks.c **** 					}
2645:FreeRTOS/tasks.c **** 				}
2646:FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
2647:FreeRTOS/tasks.c **** 			}
2648:FreeRTOS/tasks.c **** 			else
2649:FreeRTOS/tasks.c **** 			{
2650:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2651:FreeRTOS/tasks.c **** 			}
2652:FreeRTOS/tasks.c **** 		}
2653:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
2654:FreeRTOS/tasks.c **** 	}
 3437              		.loc 1 2654 0 discriminator 1
 3438 000c FCE7     		b	.L265	@
 3439              		.cfi_endproc
 3440              	.LFE30:
 3441              		.size	prvIdleTask, .-prvIdleTask
 3442 000e 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 3443              		.align	2
 3444              		.thumb
 3445              		.thumb_func
 3446              		.type	prvInitialiseTCBVariables, %function
 3447              	prvInitialiseTCBVariables:
 3448              	.LFB31:
2655:FreeRTOS/tasks.c **** }
2656:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2657:FreeRTOS/tasks.c **** 
2658:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
2659:FreeRTOS/tasks.c **** 
2660:FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2661:FreeRTOS/tasks.c **** 	{
2662:FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 112


2663:FreeRTOS/tasks.c **** 
2664:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2665:FreeRTOS/tasks.c **** 		{
2666:FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2667:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2668:FreeRTOS/tasks.c **** 		}
2669:FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
2670:FreeRTOS/tasks.c **** 		{
2671:FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2672:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2673:FreeRTOS/tasks.c **** 		}
2674:FreeRTOS/tasks.c **** 		else
2675:FreeRTOS/tasks.c **** 		{
2676:FreeRTOS/tasks.c **** 			#if configUSE_TIMERS == 0
2677:FreeRTOS/tasks.c **** 			{
2678:FreeRTOS/tasks.c **** 				/* The idle task exists in addition to the application tasks. */
2679:FreeRTOS/tasks.c **** 				const UBaseT_t uxNonApplicationTasks = 1;
2680:FreeRTOS/tasks.c **** 
2681:FreeRTOS/tasks.c **** 				/* If timers are not being used and all the tasks are in the
2682:FreeRTOS/tasks.c **** 				suspended list (which might mean they have an infinite block
2683:FreeRTOS/tasks.c **** 				time rather than actually being suspended) then it is safe to
2684:FreeRTOS/tasks.c **** 				turn all clocks off and just wait for external interrupts. */
2685:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicati
2686:FreeRTOS/tasks.c **** 				{
2687:FreeRTOS/tasks.c **** 					eReturn = eNoTasksWaitingTimeout;
2688:FreeRTOS/tasks.c **** 				}
2689:FreeRTOS/tasks.c **** 				else
2690:FreeRTOS/tasks.c **** 				{
2691:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2692:FreeRTOS/tasks.c **** 				}
2693:FreeRTOS/tasks.c **** 			}
2694:FreeRTOS/tasks.c **** 			#endif /* configUSE_TIMERS */
2695:FreeRTOS/tasks.c **** 		}
2696:FreeRTOS/tasks.c **** 
2697:FreeRTOS/tasks.c **** 		return eReturn;
2698:FreeRTOS/tasks.c **** 	}
2699:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2700:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2701:FreeRTOS/tasks.c **** 
2702:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
2703:FreeRTOS/tasks.c **** {
 3449              		.loc 1 2703 0
 3450              		.cfi_startproc
 3451              		@ args = 4, pretend = 0, frame = 24
 3452              		@ frame_needed = 1, uses_anonymous_args = 0
 3453 0000 80B5     		push	{r7, lr}	@
 3454              		.cfi_def_cfa_offset 8
 3455              		.cfi_offset 7, -8
 3456              		.cfi_offset 14, -4
 3457 0002 86B0     		sub	sp, sp, #24	@,,
 3458              		.cfi_def_cfa_offset 32
 3459 0004 00AF     		add	r7, sp, #0	@,,
 3460              		.cfi_def_cfa_register 7
 3461 0006 F860     		str	r0, [r7, #12]	@ pxTCB, pxTCB
 3462 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 3463 000a 7A60     		str	r2, [r7, #4]	@ uxPriority, uxPriority
 3464 000c 3B60     		str	r3, [r7]	@ xRegions, xRegions
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 113


2704:FreeRTOS/tasks.c **** UBaseT_t x;
2705:FreeRTOS/tasks.c **** 
2706:FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
2707:FreeRTOS/tasks.c **** 	for( x = ( UBaseT_t ) 0; x < ( UBaseT_t ) configMAX_TASK_NAME_LEN; x++ )
 3465              		.loc 1 2707 0
 3466 000e 0023     		movs	r3, #0	@ tmp117,
 3467 0010 7B61     		str	r3, [r7, #20]	@ tmp117, x
 3468 0012 12E0     		b	.L267	@
 3469              	.L270:
2708:FreeRTOS/tasks.c **** 	{
2709:FreeRTOS/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 3470              		.loc 1 2709 0
 3471 0014 BA68     		ldr	r2, [r7, #8]	@ tmp118, pcName
 3472 0016 7B69     		ldr	r3, [r7, #20]	@ tmp119, x
 3473 0018 1344     		add	r3, r3, r2	@ D.6661, tmp118
 3474 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2	@ D.6662, *_8
 3475 001c FA68     		ldr	r2, [r7, #12]	@ tmp120, pxTCB
 3476 001e 7B69     		ldr	r3, [r7, #20]	@ tmp122, x
 3477 0020 1344     		add	r3, r3, r2	@ tmp121, tmp120
 3478 0022 3433     		adds	r3, r3, #52	@ tmp123, tmp121,
 3479 0024 0A46     		mov	r2, r1	@ tmp124, D.6662
 3480 0026 1A70     		strb	r2, [r3]	@ tmp124, pxTCB_10(D)->pcTaskName
2710:FreeRTOS/tasks.c **** 
2711:FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2712:FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2713:FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
2714:FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 3481              		.loc 1 2714 0
 3482 0028 BA68     		ldr	r2, [r7, #8]	@ tmp125, pcName
 3483 002a 7B69     		ldr	r3, [r7, #20]	@ tmp126, x
 3484 002c 1344     		add	r3, r3, r2	@ D.6661, tmp125
 3485 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ D.6662, *_12
 3486 0030 002B     		cmp	r3, #0	@ D.6662,
 3487 0032 06D0     		beq	.L272	@,
2707:FreeRTOS/tasks.c **** 	{
 3488              		.loc 1 2707 0 discriminator 2
 3489 0034 7B69     		ldr	r3, [r7, #20]	@ tmp128, x
 3490 0036 0133     		adds	r3, r3, #1	@ tmp127, tmp128,
 3491 0038 7B61     		str	r3, [r7, #20]	@ tmp127, x
 3492              	.L267:
2707:FreeRTOS/tasks.c **** 	{
 3493              		.loc 1 2707 0 is_stmt 0 discriminator 1
 3494 003a 7B69     		ldr	r3, [r7, #20]	@ tmp129, x
 3495 003c 0B2B     		cmp	r3, #11	@ tmp129,
 3496 003e E9D9     		bls	.L270	@,
 3497 0040 00E0     		b	.L269	@
 3498              	.L272:
2715:FreeRTOS/tasks.c **** 		{
2716:FreeRTOS/tasks.c **** 			break;
 3499              		.loc 1 2716 0 is_stmt 1
 3500 0042 00BF     		nop
 3501              	.L269:
2717:FreeRTOS/tasks.c **** 		}
2718:FreeRTOS/tasks.c **** 		else
2719:FreeRTOS/tasks.c **** 		{
2720:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2721:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 114


2722:FreeRTOS/tasks.c **** 	}
2723:FreeRTOS/tasks.c **** 
2724:FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2725:FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2726:FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 3502              		.loc 1 2726 0
 3503 0044 FB68     		ldr	r3, [r7, #12]	@ tmp130, pxTCB
 3504 0046 0022     		movs	r2, #0	@ tmp131,
 3505 0048 83F83F20 		strb	r2, [r3, #63]	@ tmp132, pxTCB_10(D)->pcTaskName
2727:FreeRTOS/tasks.c **** 
2728:FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2729:FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
2730:FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 3506              		.loc 1 2730 0
 3507 004c 7B68     		ldr	r3, [r7, #4]	@ tmp133, uxPriority
 3508 004e 072B     		cmp	r3, #7	@ tmp133,
 3509 0050 01D9     		bls	.L271	@,
2731:FreeRTOS/tasks.c **** 	{
2732:FreeRTOS/tasks.c **** 		uxPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 3510              		.loc 1 2732 0
 3511 0052 0723     		movs	r3, #7	@ tmp134,
 3512 0054 7B60     		str	r3, [r7, #4]	@ tmp134, uxPriority
 3513              	.L271:
2733:FreeRTOS/tasks.c **** 	}
2734:FreeRTOS/tasks.c **** 	else
2735:FreeRTOS/tasks.c **** 	{
2736:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2737:FreeRTOS/tasks.c **** 	}
2738:FreeRTOS/tasks.c **** 
2739:FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 3514              		.loc 1 2739 0
 3515 0056 FB68     		ldr	r3, [r7, #12]	@ tmp135, pxTCB
 3516 0058 7A68     		ldr	r2, [r7, #4]	@ tmp136, uxPriority
 3517 005a DA62     		str	r2, [r3, #44]	@ tmp136, pxTCB_10(D)->uxPriority
2740:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2741:FreeRTOS/tasks.c **** 	{
2742:FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 3518              		.loc 1 2742 0
 3519 005c FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 3520 005e 7A68     		ldr	r2, [r7, #4]	@ tmp138, uxPriority
 3521 0060 9A64     		str	r2, [r3, #72]	@ tmp138, pxTCB_10(D)->uxBasePriority
2743:FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 3522              		.loc 1 2743 0
 3523 0062 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 3524 0064 0022     		movs	r2, #0	@ tmp140,
 3525 0066 DA64     		str	r2, [r3, #76]	@ tmp140, pxTCB_10(D)->uxMutexesHeld
2744:FreeRTOS/tasks.c **** 	}
2745:FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
2746:FreeRTOS/tasks.c **** 
2747:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 3526              		.loc 1 2747 0
 3527 0068 FB68     		ldr	r3, [r7, #12]	@ tmp141, pxTCB
 3528 006a 0433     		adds	r3, r3, #4	@ D.6663, tmp141,
 3529 006c 1846     		mov	r0, r3	@, D.6663
 3530 006e FFF7FEFF 		bl	vListInitialiseItem	@
2748:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 3531              		.loc 1 2748 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 115


 3532 0072 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 3533 0074 1833     		adds	r3, r3, #24	@ D.6663, tmp142,
 3534 0076 1846     		mov	r0, r3	@, D.6663
 3535 0078 FFF7FEFF 		bl	vListInitialiseItem	@
2749:FreeRTOS/tasks.c **** 
2750:FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2751:FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2752:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 3536              		.loc 1 2752 0
 3537 007c FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 3538 007e FA68     		ldr	r2, [r7, #12]	@ tmp144, pxTCB
 3539 0080 1A61     		str	r2, [r3, #16]	@ tmp144, pxTCB_10(D)->xGenericListItem.pvOwner
2753:FreeRTOS/tasks.c **** 
2754:FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
2755:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( TickT_t 
 3540              		.loc 1 2755 0
 3541 0082 7B68     		ldr	r3, [r7, #4]	@ tmp145, uxPriority
 3542 0084 C3F10802 		rsb	r2, r3, #8	@ D.6664, tmp145,
 3543 0088 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 3544 008a 9A61     		str	r2, [r3, #24]	@ D.6664, pxTCB_10(D)->xEventListItem.xItemValue
2756:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3545              		.loc 1 2756 0
 3546 008c FB68     		ldr	r3, [r7, #12]	@ tmp147, pxTCB
 3547 008e FA68     		ldr	r2, [r7, #12]	@ tmp148, pxTCB
 3548 0090 5A62     		str	r2, [r3, #36]	@ tmp148, pxTCB_10(D)->xEventListItem.pvOwner
2757:FreeRTOS/tasks.c **** 
2758:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2759:FreeRTOS/tasks.c **** 	{
2760:FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseT_t ) 0U;
2761:FreeRTOS/tasks.c **** 	}
2762:FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2763:FreeRTOS/tasks.c **** 
2764:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2765:FreeRTOS/tasks.c **** 	{
2766:FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2767:FreeRTOS/tasks.c **** 	}
2768:FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
2769:FreeRTOS/tasks.c **** 
2770:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2771:FreeRTOS/tasks.c **** 	{
2772:FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2773:FreeRTOS/tasks.c **** 	}
2774:FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2775:FreeRTOS/tasks.c **** 
2776:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2777:FreeRTOS/tasks.c **** 	{
2778:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2779:FreeRTOS/tasks.c **** 	}
2780:FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2781:FreeRTOS/tasks.c **** 	{
2782:FreeRTOS/tasks.c **** 		( void ) xRegions;
2783:FreeRTOS/tasks.c **** 		( void ) usStackDepth;
2784:FreeRTOS/tasks.c **** 	}
2785:FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2786:FreeRTOS/tasks.c **** 
2787:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2788:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 116


2789:FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2790:FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2791:FreeRTOS/tasks.c **** 	}
2792:FreeRTOS/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2793:FreeRTOS/tasks.c **** }
 3549              		.loc 1 2793 0
 3550 0092 00BF     		nop
 3551 0094 1837     		adds	r7, r7, #24	@,,
 3552              		.cfi_def_cfa_offset 8
 3553 0096 BD46     		mov	sp, r7	@,
 3554              		.cfi_def_cfa_register 13
 3555              		@ sp needed	@
 3556 0098 80BD     		pop	{r7, pc}	@
 3557              		.cfi_endproc
 3558              	.LFE31:
 3559              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 3560 009a 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3561              		.align	2
 3562              		.thumb
 3563              		.thumb_func
 3564              		.type	prvInitialiseTaskLists, %function
 3565              	prvInitialiseTaskLists:
 3566              	.LFB32:
2794:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2795:FreeRTOS/tasks.c **** 
2796:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2797:FreeRTOS/tasks.c **** 
2798:FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2799:FreeRTOS/tasks.c **** 	{
2800:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2801:FreeRTOS/tasks.c **** 
2802:FreeRTOS/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2803:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2804:FreeRTOS/tasks.c **** 
2805:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2806:FreeRTOS/tasks.c **** 	}
2807:FreeRTOS/tasks.c **** 
2808:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
2809:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2810:FreeRTOS/tasks.c **** 
2811:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
2812:FreeRTOS/tasks.c **** {
 3567              		.loc 1 2812 0
 3568              		.cfi_startproc
 3569              		@ args = 0, pretend = 0, frame = 8
 3570              		@ frame_needed = 1, uses_anonymous_args = 0
 3571 0000 80B5     		push	{r7, lr}	@
 3572              		.cfi_def_cfa_offset 8
 3573              		.cfi_offset 7, -8
 3574              		.cfi_offset 14, -4
 3575 0002 82B0     		sub	sp, sp, #8	@,,
 3576              		.cfi_def_cfa_offset 16
 3577 0004 00AF     		add	r7, sp, #0	@,,
 3578              		.cfi_def_cfa_register 7
2813:FreeRTOS/tasks.c **** UBaseT_t uxPriority;
2814:FreeRTOS/tasks.c **** 
2815:FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseT_t ) 0U; uxPriority < ( UBaseT_t ) configMAX_PRIORITIES; uxPriority++ )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 117


 3579              		.loc 1 2815 0
 3580 0006 0023     		movs	r3, #0	@ tmp111,
 3581 0008 7B60     		str	r3, [r7, #4]	@ tmp111, uxPriority
 3582 000a 0CE0     		b	.L274	@
 3583              	.L275:
2816:FreeRTOS/tasks.c **** 	{
2817:FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3584              		.loc 1 2817 0 discriminator 3
 3585 000c 7A68     		ldr	r2, [r7, #4]	@ tmp112, uxPriority
 3586 000e 1346     		mov	r3, r2	@ tmp113, tmp112
 3587 0010 9B00     		lsls	r3, r3, #2	@ tmp113, tmp113,
 3588 0012 1344     		add	r3, r3, r2	@ tmp113, tmp112
 3589 0014 9B00     		lsls	r3, r3, #2	@ tmp114, tmp113,
 3590 0016 124A     		ldr	r2, .L276	@ tmp115,
 3591 0018 1344     		add	r3, r3, r2	@ D.6665, tmp115
 3592 001a 1846     		mov	r0, r3	@, D.6665
 3593 001c FFF7FEFF 		bl	vListInitialise	@
2815:FreeRTOS/tasks.c **** 	{
 3594              		.loc 1 2815 0 discriminator 3
 3595 0020 7B68     		ldr	r3, [r7, #4]	@ tmp117, uxPriority
 3596 0022 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 3597 0024 7B60     		str	r3, [r7, #4]	@ tmp116, uxPriority
 3598              	.L274:
2815:FreeRTOS/tasks.c **** 	{
 3599              		.loc 1 2815 0 is_stmt 0 discriminator 1
 3600 0026 7B68     		ldr	r3, [r7, #4]	@ tmp118, uxPriority
 3601 0028 072B     		cmp	r3, #7	@ tmp118,
 3602 002a EFD9     		bls	.L275	@,
2818:FreeRTOS/tasks.c **** 	}
2819:FreeRTOS/tasks.c **** 
2820:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3603              		.loc 1 2820 0 is_stmt 1
 3604 002c 0D48     		ldr	r0, .L276+4	@,
 3605 002e FFF7FEFF 		bl	vListInitialise	@
2821:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3606              		.loc 1 2821 0
 3607 0032 0D48     		ldr	r0, .L276+8	@,
 3608 0034 FFF7FEFF 		bl	vListInitialise	@
2822:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3609              		.loc 1 2822 0
 3610 0038 0C48     		ldr	r0, .L276+12	@,
 3611 003a FFF7FEFF 		bl	vListInitialise	@
2823:FreeRTOS/tasks.c **** 
2824:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2825:FreeRTOS/tasks.c **** 	{
2826:FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3612              		.loc 1 2826 0
 3613 003e 0C48     		ldr	r0, .L276+16	@,
 3614 0040 FFF7FEFF 		bl	vListInitialise	@
2827:FreeRTOS/tasks.c **** 	}
2828:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
2829:FreeRTOS/tasks.c **** 
2830:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2831:FreeRTOS/tasks.c **** 	{
2832:FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3615              		.loc 1 2832 0
 3616 0044 0B48     		ldr	r0, .L276+20	@,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 118


 3617 0046 FFF7FEFF 		bl	vListInitialise	@
2833:FreeRTOS/tasks.c **** 	}
2834:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2835:FreeRTOS/tasks.c **** 
2836:FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2837:FreeRTOS/tasks.c **** 	using list2. */
2838:FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3618              		.loc 1 2838 0
 3619 004a 0B4B     		ldr	r3, .L276+24	@ tmp119,
 3620 004c 054A     		ldr	r2, .L276+4	@ tmp120,
 3621 004e 1A60     		str	r2, [r3]	@ tmp120, pxDelayedTaskList
2839:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3622              		.loc 1 2839 0
 3623 0050 0A4B     		ldr	r3, .L276+28	@ tmp121,
 3624 0052 054A     		ldr	r2, .L276+8	@ tmp122,
 3625 0054 1A60     		str	r2, [r3]	@ tmp122, pxOverflowDelayedTaskList
2840:FreeRTOS/tasks.c **** }
 3626              		.loc 1 2840 0
 3627 0056 00BF     		nop
 3628 0058 0837     		adds	r7, r7, #8	@,,
 3629              		.cfi_def_cfa_offset 8
 3630 005a BD46     		mov	sp, r7	@,
 3631              		.cfi_def_cfa_register 13
 3632              		@ sp needed	@
 3633 005c 80BD     		pop	{r7, pc}	@
 3634              	.L277:
 3635 005e 00BF     		.align	2
 3636              	.L276:
 3637 0060 00000000 		.word	pxReadyTasksLists
 3638 0064 00000000 		.word	xDelayedTaskList1
 3639 0068 00000000 		.word	xDelayedTaskList2
 3640 006c 00000000 		.word	xPendingReadyList
 3641 0070 00000000 		.word	xTasksWaitingTermination
 3642 0074 00000000 		.word	xSuspendedTaskList
 3643 0078 00000000 		.word	pxDelayedTaskList
 3644 007c 00000000 		.word	pxOverflowDelayedTaskList
 3645              		.cfi_endproc
 3646              	.LFE32:
 3647              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3648              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3649              		.align	2
 3650              		.thumb
 3651              		.thumb_func
 3652              		.type	prvCheckTasksWaitingTermination, %function
 3653              	prvCheckTasksWaitingTermination:
 3654              	.LFB33:
2841:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2842:FreeRTOS/tasks.c **** 
2843:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2844:FreeRTOS/tasks.c **** {
 3655              		.loc 1 2844 0
 3656              		.cfi_startproc
 3657              		@ args = 0, pretend = 0, frame = 8
 3658              		@ frame_needed = 1, uses_anonymous_args = 0
 3659 0000 80B5     		push	{r7, lr}	@
 3660              		.cfi_def_cfa_offset 8
 3661              		.cfi_offset 7, -8
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 119


 3662              		.cfi_offset 14, -4
 3663 0002 82B0     		sub	sp, sp, #8	@,,
 3664              		.cfi_def_cfa_offset 16
 3665 0004 00AF     		add	r7, sp, #0	@,,
 3666              		.cfi_def_cfa_register 7
 3667              	.LBB15:
2845:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2846:FreeRTOS/tasks.c **** 	{
2847:FreeRTOS/tasks.c **** 		BaseT_t xListIsEmpty;
2848:FreeRTOS/tasks.c **** 
2849:FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2850:FreeRTOS/tasks.c **** 		too often in the idle task. */
2851:FreeRTOS/tasks.c **** 		while( uxTasksDeleted > ( UBaseT_t ) 0U )
 3668              		.loc 1 2851 0
 3669 0006 28E0     		b	.L279	@
 3670              	.L280:
2852:FreeRTOS/tasks.c **** 		{
2853:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3671              		.loc 1 2853 0
 3672 0008 FFF7FEFF 		bl	vTaskSuspendAll	@
2854:FreeRTOS/tasks.c **** 			{
2855:FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3673              		.loc 1 2855 0
 3674 000c 174B     		ldr	r3, .L281	@ tmp119,
 3675 000e 1B68     		ldr	r3, [r3]	@ D.6666, xTasksWaitingTermination.uxNumberOfItems
 3676 0010 002B     		cmp	r3, #0	@ D.6666,
 3677 0012 0CBF     		ite	eq
 3678 0014 0123     		moveq	r3, #1	@ tmp121,
 3679 0016 0023     		movne	r3, #0	@ tmp121,
 3680 0018 DBB2     		uxtb	r3, r3	@ D.6667, tmp120
 3681 001a 7B60     		str	r3, [r7, #4]	@ D.6667, xListIsEmpty
2856:FreeRTOS/tasks.c **** 			}
2857:FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
 3682              		.loc 1 2857 0
 3683 001c FFF7FEFF 		bl	xTaskResumeAll	@
2858:FreeRTOS/tasks.c **** 
2859:FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3684              		.loc 1 2859 0
 3685 0020 7B68     		ldr	r3, [r7, #4]	@ tmp122, xListIsEmpty
 3686 0022 002B     		cmp	r3, #0	@ tmp122,
 3687 0024 19D1     		bne	.L279	@,
 3688              	.LBB16:
2860:FreeRTOS/tasks.c **** 			{
2861:FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
2862:FreeRTOS/tasks.c **** 
2863:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 3689              		.loc 1 2863 0
 3690 0026 FFF7FEFF 		bl	vPortEnterCritical	@
2864:FreeRTOS/tasks.c **** 				{
2865:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 3691              		.loc 1 2865 0
 3692 002a 104B     		ldr	r3, .L281	@ tmp123,
 3693 002c DB68     		ldr	r3, [r3, #12]	@ D.6668, xTasksWaitingTermination.xListEnd.pxNext
 3694 002e DB68     		ldr	r3, [r3, #12]	@ tmp124, _10->pvOwner
 3695 0030 3B60     		str	r3, [r7]	@ tmp124, pxTCB
2866:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3696              		.loc 1 2866 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 120


 3697 0032 3B68     		ldr	r3, [r7]	@ tmp125, pxTCB
 3698 0034 0433     		adds	r3, r3, #4	@ D.6669, tmp125,
 3699 0036 1846     		mov	r0, r3	@, D.6669
 3700 0038 FFF7FEFF 		bl	uxListRemove	@
2867:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 3701              		.loc 1 2867 0
 3702 003c 0C4B     		ldr	r3, .L281+4	@ tmp126,
 3703 003e 1B68     		ldr	r3, [r3]	@ D.6666, uxCurrentNumberOfTasks
 3704 0040 013B     		subs	r3, r3, #1	@ D.6666, D.6666,
 3705 0042 0B4A     		ldr	r2, .L281+4	@ tmp127,
 3706 0044 1360     		str	r3, [r2]	@ D.6666, uxCurrentNumberOfTasks
2868:FreeRTOS/tasks.c **** 					--uxTasksDeleted;
 3707              		.loc 1 2868 0
 3708 0046 0B4B     		ldr	r3, .L281+8	@ tmp128,
 3709 0048 1B68     		ldr	r3, [r3]	@ D.6666, uxTasksDeleted
 3710 004a 013B     		subs	r3, r3, #1	@ D.6666, D.6666,
 3711 004c 094A     		ldr	r2, .L281+8	@ tmp129,
 3712 004e 1360     		str	r3, [r2]	@ D.6666, uxTasksDeleted
2869:FreeRTOS/tasks.c **** 				}
2870:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 3713              		.loc 1 2870 0
 3714 0050 FFF7FEFF 		bl	vPortExitCritical	@
2871:FreeRTOS/tasks.c **** 
2872:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 3715              		.loc 1 2872 0
 3716 0054 3868     		ldr	r0, [r7]	@, pxTCB
 3717 0056 FFF7FEFF 		bl	prvDeleteTCB	@
 3718              	.L279:
 3719              	.LBE16:
2851:FreeRTOS/tasks.c **** 		{
 3720              		.loc 1 2851 0
 3721 005a 064B     		ldr	r3, .L281+8	@ tmp130,
 3722 005c 1B68     		ldr	r3, [r3]	@ D.6666, uxTasksDeleted
 3723 005e 002B     		cmp	r3, #0	@ D.6666,
 3724 0060 D2D1     		bne	.L280	@,
 3725              	.LBE15:
2873:FreeRTOS/tasks.c **** 			}
2874:FreeRTOS/tasks.c **** 			else
2875:FreeRTOS/tasks.c **** 			{
2876:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2877:FreeRTOS/tasks.c **** 			}
2878:FreeRTOS/tasks.c **** 		}
2879:FreeRTOS/tasks.c **** 	}
2880:FreeRTOS/tasks.c **** 	#endif /* vTaskDelete */
2881:FreeRTOS/tasks.c **** }
 3726              		.loc 1 2881 0
 3727 0062 00BF     		nop
 3728 0064 0837     		adds	r7, r7, #8	@,,
 3729              		.cfi_def_cfa_offset 8
 3730 0066 BD46     		mov	sp, r7	@,
 3731              		.cfi_def_cfa_register 13
 3732              		@ sp needed	@
 3733 0068 80BD     		pop	{r7, pc}	@
 3734              	.L282:
 3735 006a 00BF     		.align	2
 3736              	.L281:
 3737 006c 00000000 		.word	xTasksWaitingTermination
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 121


 3738 0070 00000000 		.word	uxCurrentNumberOfTasks
 3739 0074 00000000 		.word	uxTasksDeleted
 3740              		.cfi_endproc
 3741              	.LFE33:
 3742              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3743              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 3744              		.align	2
 3745              		.thumb
 3746              		.thumb_func
 3747              		.type	prvAddCurrentTaskToDelayedList, %function
 3748              	prvAddCurrentTaskToDelayedList:
 3749              	.LFB34:
2882:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2883:FreeRTOS/tasks.c **** 
2884:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake )
2885:FreeRTOS/tasks.c **** {
 3750              		.loc 1 2885 0
 3751              		.cfi_startproc
 3752              		@ args = 0, pretend = 0, frame = 8
 3753              		@ frame_needed = 1, uses_anonymous_args = 0
 3754 0000 80B5     		push	{r7, lr}	@
 3755              		.cfi_def_cfa_offset 8
 3756              		.cfi_offset 7, -8
 3757              		.cfi_offset 14, -4
 3758 0002 82B0     		sub	sp, sp, #8	@,,
 3759              		.cfi_def_cfa_offset 16
 3760 0004 00AF     		add	r7, sp, #0	@,,
 3761              		.cfi_def_cfa_register 7
 3762 0006 7860     		str	r0, [r7, #4]	@ xTimeToWake, xTimeToWake
2886:FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
2887:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3763              		.loc 1 2887 0
 3764 0008 134B     		ldr	r3, .L287	@ tmp119,
 3765 000a 1B68     		ldr	r3, [r3]	@ D.6670, pxCurrentTCB
 3766 000c 7A68     		ldr	r2, [r7, #4]	@ tmp120, xTimeToWake
 3767 000e 5A60     		str	r2, [r3, #4]	@ tmp120, _3->xGenericListItem.xItemValue
2888:FreeRTOS/tasks.c **** 
2889:FreeRTOS/tasks.c **** 	if( xTimeToWake < xTickCount )
 3768              		.loc 1 2889 0
 3769 0010 124B     		ldr	r3, .L287+4	@ tmp121,
 3770 0012 1B68     		ldr	r3, [r3]	@ D.6671, xTickCount
 3771 0014 7A68     		ldr	r2, [r7, #4]	@ tmp122, xTimeToWake
 3772 0016 9A42     		cmp	r2, r3	@ tmp122, D.6671
 3773 0018 09D2     		bcs	.L284	@,
2890:FreeRTOS/tasks.c **** 	{
2891:FreeRTOS/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2892:FreeRTOS/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3774              		.loc 1 2892 0
 3775 001a 114B     		ldr	r3, .L287+8	@ tmp123,
 3776 001c 1A68     		ldr	r2, [r3]	@ D.6672, pxOverflowDelayedTaskList
 3777 001e 0E4B     		ldr	r3, .L287	@ tmp124,
 3778 0020 1B68     		ldr	r3, [r3]	@ D.6670, pxCurrentTCB
 3779 0022 0433     		adds	r3, r3, #4	@ D.6673, D.6670,
 3780 0024 1946     		mov	r1, r3	@, D.6673
 3781 0026 1046     		mov	r0, r2	@, D.6672
 3782 0028 FFF7FEFF 		bl	vListInsert	@
2893:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 122


2894:FreeRTOS/tasks.c **** 	else
2895:FreeRTOS/tasks.c **** 	{
2896:FreeRTOS/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
2897:FreeRTOS/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
2898:FreeRTOS/tasks.c **** 
2899:FreeRTOS/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2900:FreeRTOS/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2901:FreeRTOS/tasks.c **** 		too. */
2902:FreeRTOS/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
2903:FreeRTOS/tasks.c **** 		{
2904:FreeRTOS/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
2905:FreeRTOS/tasks.c **** 		}
2906:FreeRTOS/tasks.c **** 		else
2907:FreeRTOS/tasks.c **** 		{
2908:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2909:FreeRTOS/tasks.c **** 		}
2910:FreeRTOS/tasks.c **** 	}
2911:FreeRTOS/tasks.c **** }
 3783              		.loc 1 2911 0
 3784 002c 10E0     		b	.L286	@
 3785              	.L284:
2897:FreeRTOS/tasks.c **** 
 3786              		.loc 1 2897 0
 3787 002e 0D4B     		ldr	r3, .L287+12	@ tmp125,
 3788 0030 1A68     		ldr	r2, [r3]	@ D.6672, pxDelayedTaskList
 3789 0032 094B     		ldr	r3, .L287	@ tmp126,
 3790 0034 1B68     		ldr	r3, [r3]	@ D.6670, pxCurrentTCB
 3791 0036 0433     		adds	r3, r3, #4	@ D.6673, D.6670,
 3792 0038 1946     		mov	r1, r3	@, D.6673
 3793 003a 1046     		mov	r0, r2	@, D.6672
 3794 003c FFF7FEFF 		bl	vListInsert	@
2902:FreeRTOS/tasks.c **** 		{
 3795              		.loc 1 2902 0
 3796 0040 094B     		ldr	r3, .L287+16	@ tmp127,
 3797 0042 1B68     		ldr	r3, [r3]	@ D.6671, xNextTaskUnblockTime
 3798 0044 7A68     		ldr	r2, [r7, #4]	@ tmp128, xTimeToWake
 3799 0046 9A42     		cmp	r2, r3	@ tmp128, D.6671
 3800 0048 02D2     		bcs	.L286	@,
2904:FreeRTOS/tasks.c **** 		}
 3801              		.loc 1 2904 0
 3802 004a 074A     		ldr	r2, .L287+16	@ tmp129,
 3803 004c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTimeToWake
 3804 004e 1360     		str	r3, [r2]	@ tmp130, xNextTaskUnblockTime
 3805              	.L286:
 3806              		.loc 1 2911 0
 3807 0050 00BF     		nop
 3808 0052 0837     		adds	r7, r7, #8	@,,
 3809              		.cfi_def_cfa_offset 8
 3810 0054 BD46     		mov	sp, r7	@,
 3811              		.cfi_def_cfa_register 13
 3812              		@ sp needed	@
 3813 0056 80BD     		pop	{r7, pc}	@
 3814              	.L288:
 3815              		.align	2
 3816              	.L287:
 3817 0058 00000000 		.word	pxCurrentTCB
 3818 005c 00000000 		.word	xTickCount
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 123


 3819 0060 00000000 		.word	pxOverflowDelayedTaskList
 3820 0064 00000000 		.word	pxDelayedTaskList
 3821 0068 00000000 		.word	xNextTaskUnblockTime
 3822              		.cfi_endproc
 3823              	.LFE34:
 3824              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 3825              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 3826              		.align	2
 3827              		.thumb
 3828              		.thumb_func
 3829              		.type	prvAllocateTCBAndStack, %function
 3830              	prvAllocateTCBAndStack:
 3831              	.LFB35:
2912:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2913:FreeRTOS/tasks.c **** 
2914:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
2915:FreeRTOS/tasks.c **** {
 3832              		.loc 1 2915 0
 3833              		.cfi_startproc
 3834              		@ args = 0, pretend = 0, frame = 16
 3835              		@ frame_needed = 1, uses_anonymous_args = 0
 3836 0000 80B5     		push	{r7, lr}	@
 3837              		.cfi_def_cfa_offset 8
 3838              		.cfi_offset 7, -8
 3839              		.cfi_offset 14, -4
 3840 0002 84B0     		sub	sp, sp, #16	@,,
 3841              		.cfi_def_cfa_offset 24
 3842 0004 00AF     		add	r7, sp, #0	@,,
 3843              		.cfi_def_cfa_register 7
 3844 0006 0346     		mov	r3, r0	@ tmp119, usStackDepth
 3845 0008 3960     		str	r1, [r7]	@ puxStackBuffer, puxStackBuffer
 3846 000a FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp120, usStackDepth
2916:FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
2917:FreeRTOS/tasks.c **** 
2918:FreeRTOS/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2919:FreeRTOS/tasks.c **** 	the implementation of the port malloc function. */
2920:FreeRTOS/tasks.c **** 	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 3847              		.loc 1 2920 0
 3848 000c 5020     		movs	r0, #80	@,
 3849 000e FFF7FEFF 		bl	pvPortMalloc	@
 3850 0012 F860     		str	r0, [r7, #12]	@, pxNewTCB
2921:FreeRTOS/tasks.c **** 
2922:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 3851              		.loc 1 2922 0
 3852 0014 FB68     		ldr	r3, [r7, #12]	@ tmp121, pxNewTCB
 3853 0016 002B     		cmp	r3, #0	@ tmp121,
 3854 0018 1ED0     		beq	.L290	@,
2923:FreeRTOS/tasks.c **** 	{
2924:FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2925:FreeRTOS/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2926:FreeRTOS/tasks.c **** 		be deleted later if required. */
2927:FreeRTOS/tasks.c **** 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( S
 3855              		.loc 1 2927 0
 3856 001a 3B68     		ldr	r3, [r7]	@ tmp122, puxStackBuffer
 3857 001c 002B     		cmp	r3, #0	@ tmp122,
 3858 001e 06D1     		bne	.L291	@,
 3859              		.loc 1 2927 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 124


 3860 0020 FB88     		ldrh	r3, [r7, #6]	@ D.6675, usStackDepth
 3861 0022 9B00     		lsls	r3, r3, #2	@ D.6675, D.6675,
 3862 0024 1846     		mov	r0, r3	@, D.6675
 3863 0026 FFF7FEFF 		bl	pvPortMalloc	@
 3864 002a 0346     		mov	r3, r0	@ D.6674,
 3865 002c 00E0     		b	.L292	@
 3866              	.L291:
 3867              		.loc 1 2927 0 discriminator 2
 3868 002e 3B68     		ldr	r3, [r7]	@ D.6674, puxStackBuffer
 3869              	.L292:
 3870              		.loc 1 2927 0 discriminator 4
 3871 0030 FA68     		ldr	r2, [r7, #12]	@ tmp123, pxNewTCB
 3872 0032 1363     		str	r3, [r2, #48]	@ D.6674, pxNewTCB_7->pxStack
2928:FreeRTOS/tasks.c **** 
2929:FreeRTOS/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3873              		.loc 1 2929 0 is_stmt 1 discriminator 4
 3874 0034 FB68     		ldr	r3, [r7, #12]	@ tmp124, pxNewTCB
 3875 0036 1B6B     		ldr	r3, [r3, #48]	@ D.6674, pxNewTCB_7->pxStack
 3876 0038 002B     		cmp	r3, #0	@ D.6674,
 3877 003a 05D1     		bne	.L293	@,
2930:FreeRTOS/tasks.c **** 		{
2931:FreeRTOS/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2932:FreeRTOS/tasks.c **** 			vPortFree( pxNewTCB );
 3878              		.loc 1 2932 0
 3879 003c F868     		ldr	r0, [r7, #12]	@, pxNewTCB
 3880 003e FFF7FEFF 		bl	vPortFree	@
2933:FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
 3881              		.loc 1 2933 0
 3882 0042 0023     		movs	r3, #0	@ tmp125,
 3883 0044 FB60     		str	r3, [r7, #12]	@ tmp125, pxNewTCB
 3884 0046 07E0     		b	.L290	@
 3885              	.L293:
2934:FreeRTOS/tasks.c **** 		}
2935:FreeRTOS/tasks.c **** 		else
2936:FreeRTOS/tasks.c **** 		{
2937:FreeRTOS/tasks.c **** 			/* Avoid dependency on memset() if it is not required. */
2938:FreeRTOS/tasks.c **** 			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_ux
2939:FreeRTOS/tasks.c **** 			{
2940:FreeRTOS/tasks.c **** 				/* Just to help debugging. */
2941:FreeRTOS/tasks.c **** 				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeo
 3886              		.loc 1 2941 0
 3887 0048 FB68     		ldr	r3, [r7, #12]	@ tmp126, pxNewTCB
 3888 004a 186B     		ldr	r0, [r3, #48]	@ D.6674, pxNewTCB_7->pxStack
 3889 004c FB88     		ldrh	r3, [r7, #6]	@ D.6675, usStackDepth
 3890 004e 9B00     		lsls	r3, r3, #2	@ D.6675, D.6675,
 3891 0050 1A46     		mov	r2, r3	@, D.6675
 3892 0052 A521     		movs	r1, #165	@,
 3893 0054 FFF7FEFF 		bl	memset	@
 3894              	.L290:
2942:FreeRTOS/tasks.c **** 			}
2943:FreeRTOS/tasks.c **** 			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( I
2944:FreeRTOS/tasks.c **** 		}
2945:FreeRTOS/tasks.c **** 	}
2946:FreeRTOS/tasks.c **** 
2947:FreeRTOS/tasks.c **** 	return pxNewTCB;
 3895              		.loc 1 2947 0
 3896 0058 FB68     		ldr	r3, [r7, #12]	@ D.6676, pxNewTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 125


2948:FreeRTOS/tasks.c **** }
 3897              		.loc 1 2948 0
 3898 005a 1846     		mov	r0, r3	@, <retval>
 3899 005c 1037     		adds	r7, r7, #16	@,,
 3900              		.cfi_def_cfa_offset 8
 3901 005e BD46     		mov	sp, r7	@,
 3902              		.cfi_def_cfa_register 13
 3903              		@ sp needed	@
 3904 0060 80BD     		pop	{r7, pc}	@
 3905              		.cfi_endproc
 3906              	.LFE35:
 3907              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 3908 0062 00BF     		.section	.text.prvListTaskWithinSingleList,"ax",%progbits
 3909              		.align	2
 3910              		.thumb
 3911              		.thumb_func
 3912              		.type	prvListTaskWithinSingleList, %function
 3913              	prvListTaskWithinSingleList:
 3914              	.LFB36:
2949:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:FreeRTOS/tasks.c **** 
2951:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2952:FreeRTOS/tasks.c **** 
2953:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
2954:FreeRTOS/tasks.c **** 	{
 3915              		.loc 1 2954 0
 3916              		.cfi_startproc
 3917              		@ args = 0, pretend = 0, frame = 40
 3918              		@ frame_needed = 1, uses_anonymous_args = 0
 3919 0000 90B5     		push	{r4, r7, lr}	@
 3920              		.cfi_def_cfa_offset 12
 3921              		.cfi_offset 4, -12
 3922              		.cfi_offset 7, -8
 3923              		.cfi_offset 14, -4
 3924 0002 8BB0     		sub	sp, sp, #44	@,,
 3925              		.cfi_def_cfa_offset 56
 3926 0004 00AF     		add	r7, sp, #0	@,,
 3927              		.cfi_def_cfa_register 7
 3928 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 3929 0008 B960     		str	r1, [r7, #8]	@ pxList, pxList
 3930 000a 1346     		mov	r3, r2	@ tmp152, eState
 3931 000c FB71     		strb	r3, [r7, #7]	@ tmp153, eState
2955:FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
2956:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0;
 3932              		.loc 1 2956 0
 3933 000e 0023     		movs	r3, #0	@ tmp154,
 3934 0010 7B62     		str	r3, [r7, #36]	@ tmp154, uxTask
2957:FreeRTOS/tasks.c **** 
2958:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseT_t ) 0 )
 3935              		.loc 1 2958 0
 3936 0012 BB68     		ldr	r3, [r7, #8]	@ tmp155, pxList
 3937 0014 1B68     		ldr	r3, [r3]	@ D.6677, pxList_10(D)->uxNumberOfItems
 3938 0016 002B     		cmp	r3, #0	@ D.6677,
 3939 0018 78D0     		beq	.L296	@,
 3940              	.LBB17:
2959:FreeRTOS/tasks.c **** 		{
2960:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 126


 3941              		.loc 1 2960 0
 3942 001a BB68     		ldr	r3, [r7, #8]	@ tmp156, pxList
 3943 001c 3B62     		str	r3, [r7, #32]	@ tmp156, pxConstList
 3944 001e 3B6A     		ldr	r3, [r7, #32]	@ tmp157, pxConstList
 3945 0020 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_12->pxIndex
 3946 0022 5A68     		ldr	r2, [r3, #4]	@ D.6679, _13->pxNext
 3947 0024 3B6A     		ldr	r3, [r7, #32]	@ tmp158, pxConstList
 3948 0026 5A60     		str	r2, [r3, #4]	@ D.6679, pxConstList_12->pxIndex
 3949 0028 3B6A     		ldr	r3, [r7, #32]	@ tmp159, pxConstList
 3950 002a 5A68     		ldr	r2, [r3, #4]	@ D.6678, pxConstList_12->pxIndex
 3951 002c 3B6A     		ldr	r3, [r7, #32]	@ tmp160, pxConstList
 3952 002e 0833     		adds	r3, r3, #8	@ D.6680, tmp160,
 3953 0030 9A42     		cmp	r2, r3	@ D.6678, D.6680
 3954 0032 04D1     		bne	.L297	@,
 3955              		.loc 1 2960 0 is_stmt 0 discriminator 1
 3956 0034 3B6A     		ldr	r3, [r7, #32]	@ tmp161, pxConstList
 3957 0036 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_12->pxIndex
 3958 0038 5A68     		ldr	r2, [r3, #4]	@ D.6679, _18->pxNext
 3959 003a 3B6A     		ldr	r3, [r7, #32]	@ tmp162, pxConstList
 3960 003c 5A60     		str	r2, [r3, #4]	@ D.6679, pxConstList_12->pxIndex
 3961              	.L297:
 3962              		.loc 1 2960 0 discriminator 3
 3963 003e 3B6A     		ldr	r3, [r7, #32]	@ tmp163, pxConstList
 3964 0040 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_12->pxIndex
 3965 0042 DB68     		ldr	r3, [r3, #12]	@ tmp164, _21->pvOwner
 3966 0044 FB61     		str	r3, [r7, #28]	@ tmp164, pxFirstTCB
 3967              	.L300:
 3968              	.LBE17:
 3969              	.LBB18:
2961:FreeRTOS/tasks.c **** 
2962:FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
2963:FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
2964:FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
2965:FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
2966:FreeRTOS/tasks.c **** 			do
2967:FreeRTOS/tasks.c **** 			{
2968:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3970              		.loc 1 2968 0 is_stmt 1
 3971 0046 BB68     		ldr	r3, [r7, #8]	@ tmp165, pxList
 3972 0048 BB61     		str	r3, [r7, #24]	@ tmp165, pxConstList
 3973 004a BB69     		ldr	r3, [r7, #24]	@ tmp166, pxConstList
 3974 004c 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_23->pxIndex
 3975 004e 5A68     		ldr	r2, [r3, #4]	@ D.6679, _24->pxNext
 3976 0050 BB69     		ldr	r3, [r7, #24]	@ tmp167, pxConstList
 3977 0052 5A60     		str	r2, [r3, #4]	@ D.6679, pxConstList_23->pxIndex
 3978 0054 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxConstList
 3979 0056 5A68     		ldr	r2, [r3, #4]	@ D.6678, pxConstList_23->pxIndex
 3980 0058 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxConstList
 3981 005a 0833     		adds	r3, r3, #8	@ D.6680, tmp169,
 3982 005c 9A42     		cmp	r2, r3	@ D.6678, D.6680
 3983 005e 04D1     		bne	.L298	@,
 3984              		.loc 1 2968 0 is_stmt 0 discriminator 1
 3985 0060 BB69     		ldr	r3, [r7, #24]	@ tmp170, pxConstList
 3986 0062 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_23->pxIndex
 3987 0064 5A68     		ldr	r2, [r3, #4]	@ D.6679, _29->pxNext
 3988 0066 BB69     		ldr	r3, [r7, #24]	@ tmp171, pxConstList
 3989 0068 5A60     		str	r2, [r3, #4]	@ D.6679, pxConstList_23->pxIndex
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 127


 3990              	.L298:
 3991              		.loc 1 2968 0 discriminator 3
 3992 006a BB69     		ldr	r3, [r7, #24]	@ tmp172, pxConstList
 3993 006c 5B68     		ldr	r3, [r3, #4]	@ D.6678, pxConstList_23->pxIndex
 3994 006e DB68     		ldr	r3, [r3, #12]	@ tmp173, _32->pvOwner
 3995 0070 7B61     		str	r3, [r7, #20]	@ tmp173, pxNextTCB
 3996              	.LBE18:
2969:FreeRTOS/tasks.c **** 
2970:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 3997              		.loc 1 2970 0 is_stmt 1 discriminator 3
 3998 0072 7B6A     		ldr	r3, [r7, #36]	@ tmp174, uxTask
 3999 0074 5B01     		lsls	r3, r3, #5	@ D.6677, tmp174,
 4000 0076 FA68     		ldr	r2, [r7, #12]	@ tmp175, pxTaskStatusArray
 4001 0078 1344     		add	r3, r3, r2	@ D.6681, tmp175
 4002 007a 7A69     		ldr	r2, [r7, #20]	@ tmp176, pxNextTCB
 4003 007c 1A60     		str	r2, [r3]	@ tmp176, _36->xHandle
2971:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 4004              		.loc 1 2971 0 discriminator 3
 4005 007e 7B6A     		ldr	r3, [r7, #36]	@ tmp177, uxTask
 4006 0080 5B01     		lsls	r3, r3, #5	@ D.6677, tmp177,
 4007 0082 FA68     		ldr	r2, [r7, #12]	@ tmp178, pxTaskStatusArray
 4008 0084 1344     		add	r3, r3, r2	@ D.6681, tmp178
 4009 0086 7A69     		ldr	r2, [r7, #20]	@ tmp179, pxNextTCB
 4010 0088 3432     		adds	r2, r2, #52	@ D.6682, tmp179,
 4011 008a 5A60     		str	r2, [r3, #4]	@ D.6682, _39->pcTaskName
2972:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 4012              		.loc 1 2972 0 discriminator 3
 4013 008c 7B6A     		ldr	r3, [r7, #36]	@ tmp180, uxTask
 4014 008e 5B01     		lsls	r3, r3, #5	@ D.6677, tmp180,
 4015 0090 FA68     		ldr	r2, [r7, #12]	@ tmp181, pxTaskStatusArray
 4016 0092 1344     		add	r3, r3, r2	@ D.6681, tmp181
 4017 0094 7A69     		ldr	r2, [r7, #20]	@ tmp182, pxNextTCB
 4018 0096 126C     		ldr	r2, [r2, #64]	@ D.6677, pxNextTCB_33->uxTCBNumber
 4019 0098 9A60     		str	r2, [r3, #8]	@ D.6677, _43->xTaskNumber
2973:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 4020              		.loc 1 2973 0 discriminator 3
 4021 009a 7B6A     		ldr	r3, [r7, #36]	@ tmp183, uxTask
 4022 009c 5B01     		lsls	r3, r3, #5	@ D.6677, tmp183,
 4023 009e FA68     		ldr	r2, [r7, #12]	@ tmp184, pxTaskStatusArray
 4024 00a0 1344     		add	r3, r3, r2	@ D.6681, tmp184
 4025 00a2 FA79     		ldrb	r2, [r7, #7]	@ tmp185, eState
 4026 00a4 1A73     		strb	r2, [r3, #12]	@ tmp185, _47->eCurrentState
2974:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 4027              		.loc 1 2974 0 discriminator 3
 4028 00a6 7B6A     		ldr	r3, [r7, #36]	@ tmp186, uxTask
 4029 00a8 5B01     		lsls	r3, r3, #5	@ D.6677, tmp186,
 4030 00aa FA68     		ldr	r2, [r7, #12]	@ tmp187, pxTaskStatusArray
 4031 00ac 1344     		add	r3, r3, r2	@ D.6681, tmp187
 4032 00ae 7A69     		ldr	r2, [r7, #20]	@ tmp188, pxNextTCB
 4033 00b0 D26A     		ldr	r2, [r2, #44]	@ D.6677, pxNextTCB_33->uxPriority
 4034 00b2 1A61     		str	r2, [r3, #16]	@ D.6677, _51->uxCurrentPriority
2975:FreeRTOS/tasks.c **** 
2976:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2977:FreeRTOS/tasks.c **** 				{
2978:FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a chance
2979:FreeRTOS/tasks.c **** 					it is actually just blocked indefinitely - so really it should
2980:FreeRTOS/tasks.c **** 					be reported as being in the Blocked state. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 128


2981:FreeRTOS/tasks.c **** 					if( eState == eSuspended )
 4035              		.loc 1 2981 0 discriminator 3
 4036 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2	@ tmp189, eState
 4037 00b6 032B     		cmp	r3, #3	@ tmp189,
 4038 00b8 09D1     		bne	.L299	@,
2982:FreeRTOS/tasks.c **** 					{
2983:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 4039              		.loc 1 2983 0
 4040 00ba 7B69     		ldr	r3, [r7, #20]	@ tmp190, pxNextTCB
 4041 00bc 9B6A     		ldr	r3, [r3, #40]	@ D.6683, pxNextTCB_33->xEventListItem.pvContainer
 4042 00be 002B     		cmp	r3, #0	@ D.6683,
 4043 00c0 05D0     		beq	.L299	@,
2984:FreeRTOS/tasks.c **** 						{
2985:FreeRTOS/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 4044              		.loc 1 2985 0
 4045 00c2 7B6A     		ldr	r3, [r7, #36]	@ tmp191, uxTask
 4046 00c4 5B01     		lsls	r3, r3, #5	@ D.6677, tmp191,
 4047 00c6 FA68     		ldr	r2, [r7, #12]	@ tmp192, pxTaskStatusArray
 4048 00c8 1344     		add	r3, r3, r2	@ D.6681, tmp192
 4049 00ca 0222     		movs	r2, #2	@ tmp193,
 4050 00cc 1A73     		strb	r2, [r3, #12]	@ tmp194, _56->eCurrentState
 4051              	.L299:
2986:FreeRTOS/tasks.c **** 						}
2987:FreeRTOS/tasks.c **** 					}
2988:FreeRTOS/tasks.c **** 				}
2989:FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
2990:FreeRTOS/tasks.c **** 
2991:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
2992:FreeRTOS/tasks.c **** 				{
2993:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 4052              		.loc 1 2993 0
 4053 00ce 7B6A     		ldr	r3, [r7, #36]	@ tmp195, uxTask
 4054 00d0 5B01     		lsls	r3, r3, #5	@ D.6677, tmp195,
 4055 00d2 FA68     		ldr	r2, [r7, #12]	@ tmp196, pxTaskStatusArray
 4056 00d4 1344     		add	r3, r3, r2	@ D.6681, tmp196
 4057 00d6 7A69     		ldr	r2, [r7, #20]	@ tmp197, pxNextTCB
 4058 00d8 926C     		ldr	r2, [r2, #72]	@ D.6677, pxNextTCB_33->uxBasePriority
 4059 00da 5A61     		str	r2, [r3, #20]	@ D.6677, _59->uxBasePriority
2994:FreeRTOS/tasks.c **** 				}
2995:FreeRTOS/tasks.c **** 				#else
2996:FreeRTOS/tasks.c **** 				{
2997:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
2998:FreeRTOS/tasks.c **** 				}
2999:FreeRTOS/tasks.c **** 				#endif
3000:FreeRTOS/tasks.c **** 
3001:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3002:FreeRTOS/tasks.c **** 				{
3003:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3004:FreeRTOS/tasks.c **** 				}
3005:FreeRTOS/tasks.c **** 				#else
3006:FreeRTOS/tasks.c **** 				{
3007:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 4060              		.loc 1 3007 0
 4061 00dc 7B6A     		ldr	r3, [r7, #36]	@ tmp198, uxTask
 4062 00de 5B01     		lsls	r3, r3, #5	@ D.6677, tmp198,
 4063 00e0 FA68     		ldr	r2, [r7, #12]	@ tmp199, pxTaskStatusArray
 4064 00e2 1344     		add	r3, r3, r2	@ D.6681, tmp199
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 129


 4065 00e4 0022     		movs	r2, #0	@ tmp200,
 4066 00e6 9A61     		str	r2, [r3, #24]	@ tmp200, _63->ulRunTimeCounter
3008:FreeRTOS/tasks.c **** 				}
3009:FreeRTOS/tasks.c **** 				#endif
3010:FreeRTOS/tasks.c **** 
3011:FreeRTOS/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3012:FreeRTOS/tasks.c **** 				{
3013:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3014:FreeRTOS/tasks.c **** 				}
3015:FreeRTOS/tasks.c **** 				#else
3016:FreeRTOS/tasks.c **** 				{
3017:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
 4067              		.loc 1 3017 0
 4068 00e8 7B6A     		ldr	r3, [r7, #36]	@ tmp201, uxTask
 4069 00ea 5B01     		lsls	r3, r3, #5	@ D.6677, tmp201,
 4070 00ec FA68     		ldr	r2, [r7, #12]	@ tmp202, pxTaskStatusArray
 4071 00ee D418     		adds	r4, r2, r3	@ D.6681, tmp202, D.6677
 4072 00f0 7B69     		ldr	r3, [r7, #20]	@ tmp203, pxNextTCB
 4073 00f2 1B6B     		ldr	r3, [r3, #48]	@ D.6684, pxNextTCB_33->pxStack
 4074 00f4 1846     		mov	r0, r3	@, D.6684
 4075 00f6 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4076 00fa 0346     		mov	r3, r0	@ tmp204,
 4077 00fc A383     		strh	r3, [r4, #28]	@ movhi	@ tmp205, _66->usStackHighWaterMark
3018:FreeRTOS/tasks.c **** 				}
3019:FreeRTOS/tasks.c **** 				#endif
3020:FreeRTOS/tasks.c **** 
3021:FreeRTOS/tasks.c **** 				uxTask++;
 4078              		.loc 1 3021 0
 4079 00fe 7B6A     		ldr	r3, [r7, #36]	@ tmp207, uxTask
 4080 0100 0133     		adds	r3, r3, #1	@ tmp206, tmp207,
 4081 0102 7B62     		str	r3, [r7, #36]	@ tmp206, uxTask
3022:FreeRTOS/tasks.c **** 
3023:FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4082              		.loc 1 3023 0
 4083 0104 7A69     		ldr	r2, [r7, #20]	@ tmp208, pxNextTCB
 4084 0106 FB69     		ldr	r3, [r7, #28]	@ tmp209, pxFirstTCB
 4085 0108 9A42     		cmp	r2, r3	@ tmp208, tmp209
 4086 010a 9CD1     		bne	.L300	@,
 4087              	.L296:
3024:FreeRTOS/tasks.c **** 		}
3025:FreeRTOS/tasks.c **** 		else
3026:FreeRTOS/tasks.c **** 		{
3027:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3028:FreeRTOS/tasks.c **** 		}
3029:FreeRTOS/tasks.c **** 
3030:FreeRTOS/tasks.c **** 		return uxTask;
 4088              		.loc 1 3030 0
 4089 010c 7B6A     		ldr	r3, [r7, #36]	@ D.6686, uxTask
3031:FreeRTOS/tasks.c **** 	}
 4090              		.loc 1 3031 0
 4091 010e 1846     		mov	r0, r3	@, <retval>
 4092 0110 2C37     		adds	r7, r7, #44	@,,
 4093              		.cfi_def_cfa_offset 12
 4094 0112 BD46     		mov	sp, r7	@,
 4095              		.cfi_def_cfa_register 13
 4096              		@ sp needed	@
 4097 0114 90BD     		pop	{r4, r7, pc}	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 130


 4098              		.cfi_endproc
 4099              	.LFE36:
 4100              		.size	prvListTaskWithinSingleList, .-prvListTaskWithinSingleList
 4101 0116 00BF     		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4102              		.align	2
 4103              		.thumb
 4104              		.thumb_func
 4105              		.type	prvTaskCheckFreeStackSpace, %function
 4106              	prvTaskCheckFreeStackSpace:
 4107              	.LFB37:
3032:FreeRTOS/tasks.c **** 
3033:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3034:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3035:FreeRTOS/tasks.c **** 
3036:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3037:FreeRTOS/tasks.c **** 
3038:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3039:FreeRTOS/tasks.c **** 	{
 4108              		.loc 1 3039 0
 4109              		.cfi_startproc
 4110              		@ args = 0, pretend = 0, frame = 16
 4111              		@ frame_needed = 1, uses_anonymous_args = 0
 4112              		@ link register save eliminated.
 4113 0000 80B4     		push	{r7}	@
 4114              		.cfi_def_cfa_offset 4
 4115              		.cfi_offset 7, -4
 4116 0002 85B0     		sub	sp, sp, #20	@,,
 4117              		.cfi_def_cfa_offset 24
 4118 0004 00AF     		add	r7, sp, #0	@,,
 4119              		.cfi_def_cfa_register 7
 4120 0006 7860     		str	r0, [r7, #4]	@ pucStackByte, pucStackByte
3040:FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 4121              		.loc 1 3040 0
 4122 0008 0023     		movs	r3, #0	@ tmp113,
 4123 000a FB60     		str	r3, [r7, #12]	@ tmp113, ulCount
3041:FreeRTOS/tasks.c **** 
3042:FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4124              		.loc 1 3042 0
 4125 000c 05E0     		b	.L303	@
 4126              	.L304:
3043:FreeRTOS/tasks.c **** 		{
3044:FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4127              		.loc 1 3044 0
 4128 000e 7B68     		ldr	r3, [r7, #4]	@ tmp115, pucStackByte
 4129 0010 0133     		adds	r3, r3, #1	@ tmp114, tmp115,
 4130 0012 7B60     		str	r3, [r7, #4]	@ tmp114, pucStackByte
3045:FreeRTOS/tasks.c **** 			ulCount++;
 4131              		.loc 1 3045 0
 4132 0014 FB68     		ldr	r3, [r7, #12]	@ tmp117, ulCount
 4133 0016 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 4134 0018 FB60     		str	r3, [r7, #12]	@ tmp116, ulCount
 4135              	.L303:
3042:FreeRTOS/tasks.c **** 		{
 4136              		.loc 1 3042 0
 4137 001a 7B68     		ldr	r3, [r7, #4]	@ tmp118, pucStackByte
 4138 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ D.6687, *pucStackByte_1
 4139 001e A52B     		cmp	r3, #165	@ D.6687,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 131


 4140 0020 F5D0     		beq	.L304	@,
3046:FreeRTOS/tasks.c **** 		}
3047:FreeRTOS/tasks.c **** 
3048:FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackT_t ); /*lint !e961 Casting is not redundant on smaller arch
 4141              		.loc 1 3048 0
 4142 0022 FB68     		ldr	r3, [r7, #12]	@ tmp120, ulCount
 4143 0024 9B08     		lsrs	r3, r3, #2	@ tmp119, tmp120,
 4144 0026 FB60     		str	r3, [r7, #12]	@ tmp119, ulCount
3049:FreeRTOS/tasks.c **** 
3050:FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 4145              		.loc 1 3050 0
 4146 0028 FB68     		ldr	r3, [r7, #12]	@ tmp121, ulCount
 4147 002a 9BB2     		uxth	r3, r3	@ D.6688, tmp121
3051:FreeRTOS/tasks.c **** 	}
 4148              		.loc 1 3051 0
 4149 002c 1846     		mov	r0, r3	@, <retval>
 4150 002e 1437     		adds	r7, r7, #20	@,,
 4151              		.cfi_def_cfa_offset 4
 4152 0030 BD46     		mov	sp, r7	@,
 4153              		.cfi_def_cfa_register 13
 4154              		@ sp needed	@
 4155 0032 80BC     		pop	{r7}	@
 4156              		.cfi_restore 7
 4157              		.cfi_def_cfa_offset 0
 4158 0034 7047     		bx	lr	@
 4159              		.cfi_endproc
 4160              	.LFE37:
 4161              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 4162 0036 00BF     		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4163              		.align	2
 4164              		.global	uxTaskGetStackHighWaterMark
 4165              		.thumb
 4166              		.thumb_func
 4167              		.type	uxTaskGetStackHighWaterMark, %function
 4168              	uxTaskGetStackHighWaterMark:
 4169              	.LFB38:
3052:FreeRTOS/tasks.c **** 
3053:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3054:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3055:FreeRTOS/tasks.c **** 
3056:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3057:FreeRTOS/tasks.c **** 
3058:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3059:FreeRTOS/tasks.c **** 	{
 4170              		.loc 1 3059 0
 4171              		.cfi_startproc
 4172              		@ args = 0, pretend = 0, frame = 24
 4173              		@ frame_needed = 1, uses_anonymous_args = 0
 4174 0000 80B5     		push	{r7, lr}	@
 4175              		.cfi_def_cfa_offset 8
 4176              		.cfi_offset 7, -8
 4177              		.cfi_offset 14, -4
 4178 0002 86B0     		sub	sp, sp, #24	@,,
 4179              		.cfi_def_cfa_offset 32
 4180 0004 00AF     		add	r7, sp, #0	@,,
 4181              		.cfi_def_cfa_register 7
 4182 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 132


3060:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3061:FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3062:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
3063:FreeRTOS/tasks.c **** 
3064:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4183              		.loc 1 3064 0
 4184 0008 7B68     		ldr	r3, [r7, #4]	@ tmp114, xTask
 4185 000a 002B     		cmp	r3, #0	@ tmp114,
 4186 000c 02D1     		bne	.L307	@,
 4187              		.loc 1 3064 0 is_stmt 0 discriminator 1
 4188 000e 094B     		ldr	r3, .L310	@ tmp115,
 4189 0010 1B68     		ldr	r3, [r3]	@ D.6689, pxCurrentTCB
 4190 0012 00E0     		b	.L308	@
 4191              	.L307:
 4192              		.loc 1 3064 0 discriminator 2
 4193 0014 7B68     		ldr	r3, [r7, #4]	@ D.6689, xTask
 4194              	.L308:
 4195              		.loc 1 3064 0 discriminator 4
 4196 0016 7B61     		str	r3, [r7, #20]	@ D.6689, pxTCB
3065:FreeRTOS/tasks.c **** 
3066:FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3067:FreeRTOS/tasks.c **** 		{
3068:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 4197              		.loc 1 3068 0 is_stmt 1 discriminator 4
 4198 0018 7B69     		ldr	r3, [r7, #20]	@ tmp116, pxTCB
 4199 001a 1B6B     		ldr	r3, [r3, #48]	@ tmp117, pxTCB_6->pxStack
 4200 001c 3B61     		str	r3, [r7, #16]	@ tmp117, pucEndOfStack
3069:FreeRTOS/tasks.c **** 		}
3070:FreeRTOS/tasks.c **** 		#else
3071:FreeRTOS/tasks.c **** 		{
3072:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3073:FreeRTOS/tasks.c **** 		}
3074:FreeRTOS/tasks.c **** 		#endif
3075:FreeRTOS/tasks.c **** 
3076:FreeRTOS/tasks.c **** 		uxReturn = ( UBaseT_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 4201              		.loc 1 3076 0 discriminator 4
 4202 001e 3869     		ldr	r0, [r7, #16]	@, pucEndOfStack
 4203 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4204 0024 0346     		mov	r3, r0	@ tmp118,
 4205 0026 FB60     		str	r3, [r7, #12]	@ D.6690, uxReturn
3077:FreeRTOS/tasks.c **** 
3078:FreeRTOS/tasks.c **** 		return uxReturn;
 4206              		.loc 1 3078 0 discriminator 4
 4207 0028 FB68     		ldr	r3, [r7, #12]	@ D.6691, uxReturn
3079:FreeRTOS/tasks.c **** 	}
 4208              		.loc 1 3079 0 discriminator 4
 4209 002a 1846     		mov	r0, r3	@, <retval>
 4210 002c 1837     		adds	r7, r7, #24	@,,
 4211              		.cfi_def_cfa_offset 8
 4212 002e BD46     		mov	sp, r7	@,
 4213              		.cfi_def_cfa_register 13
 4214              		@ sp needed	@
 4215 0030 80BD     		pop	{r7, pc}	@
 4216              	.L311:
 4217 0032 00BF     		.align	2
 4218              	.L310:
 4219 0034 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 133


 4220              		.cfi_endproc
 4221              	.LFE38:
 4222              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 4223              		.section	.text.prvDeleteTCB,"ax",%progbits
 4224              		.align	2
 4225              		.thumb
 4226              		.thumb_func
 4227              		.type	prvDeleteTCB, %function
 4228              	prvDeleteTCB:
 4229              	.LFB39:
3080:FreeRTOS/tasks.c **** 
3081:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3082:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3083:FreeRTOS/tasks.c **** 
3084:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3085:FreeRTOS/tasks.c **** 
3086:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3087:FreeRTOS/tasks.c **** 	{
 4230              		.loc 1 3087 0
 4231              		.cfi_startproc
 4232              		@ args = 0, pretend = 0, frame = 8
 4233              		@ frame_needed = 1, uses_anonymous_args = 0
 4234 0000 80B5     		push	{r7, lr}	@
 4235              		.cfi_def_cfa_offset 8
 4236              		.cfi_offset 7, -8
 4237              		.cfi_offset 14, -4
 4238 0002 82B0     		sub	sp, sp, #8	@,,
 4239              		.cfi_def_cfa_offset 16
 4240 0004 00AF     		add	r7, sp, #0	@,,
 4241              		.cfi_def_cfa_register 7
 4242 0006 7860     		str	r0, [r7, #4]	@ pxTCB, pxTCB
3088:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3089:FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3090:FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3091:FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3092:FreeRTOS/tasks.c **** 
3093:FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3094:FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3095:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3096:FreeRTOS/tasks.c **** 		{
3097:FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3098:FreeRTOS/tasks.c **** 		}
3099:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3100:FreeRTOS/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 4243              		.loc 1 3100 0
 4244 0008 7B68     		ldr	r3, [r7, #4]	@ tmp111, pxTCB
 4245 000a 1B6B     		ldr	r3, [r3, #48]	@ D.6692, pxTCB_2(D)->pxStack
 4246 000c 1846     		mov	r0, r3	@, D.6692
 4247 000e FFF7FEFF 		bl	vPortFree	@
3101:FreeRTOS/tasks.c **** 		vPortFree( pxTCB );
 4248              		.loc 1 3101 0
 4249 0012 7868     		ldr	r0, [r7, #4]	@, pxTCB
 4250 0014 FFF7FEFF 		bl	vPortFree	@
3102:FreeRTOS/tasks.c **** 	}
 4251              		.loc 1 3102 0
 4252 0018 00BF     		nop
 4253 001a 0837     		adds	r7, r7, #8	@,,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 134


 4254              		.cfi_def_cfa_offset 8
 4255 001c BD46     		mov	sp, r7	@,
 4256              		.cfi_def_cfa_register 13
 4257              		@ sp needed	@
 4258 001e 80BD     		pop	{r7, pc}	@
 4259              		.cfi_endproc
 4260              	.LFE39:
 4261              		.size	prvDeleteTCB, .-prvDeleteTCB
 4262              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4263              		.align	2
 4264              		.thumb
 4265              		.thumb_func
 4266              		.type	prvResetNextTaskUnblockTime, %function
 4267              	prvResetNextTaskUnblockTime:
 4268              	.LFB40:
3103:FreeRTOS/tasks.c **** 
3104:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3105:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3106:FreeRTOS/tasks.c **** 
3107:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3108:FreeRTOS/tasks.c **** {
 4269              		.loc 1 3108 0
 4270              		.cfi_startproc
 4271              		@ args = 0, pretend = 0, frame = 8
 4272              		@ frame_needed = 1, uses_anonymous_args = 0
 4273              		@ link register save eliminated.
 4274 0000 80B4     		push	{r7}	@
 4275              		.cfi_def_cfa_offset 4
 4276              		.cfi_offset 7, -4
 4277 0002 83B0     		sub	sp, sp, #12	@,,
 4278              		.cfi_def_cfa_offset 16
 4279 0004 00AF     		add	r7, sp, #0	@,,
 4280              		.cfi_def_cfa_register 7
3109:FreeRTOS/tasks.c **** TCB_t *pxTCB;
3110:FreeRTOS/tasks.c **** 
3111:FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4281              		.loc 1 3111 0
 4282 0006 0E4B     		ldr	r3, .L319	@ tmp116,
 4283 0008 1B68     		ldr	r3, [r3]	@ D.6694, pxDelayedTaskList
 4284 000a 1B68     		ldr	r3, [r3]	@ D.6695, _4->uxNumberOfItems
 4285 000c 002B     		cmp	r3, #0	@ D.6695,
 4286 000e 01D1     		bne	.L314	@,
 4287              		.loc 1 3111 0 is_stmt 0 discriminator 1
 4288 0010 0123     		movs	r3, #1	@ D.6693,
 4289 0012 00E0     		b	.L315	@
 4290              	.L314:
 4291              		.loc 1 3111 0 discriminator 2
 4292 0014 0023     		movs	r3, #0	@ D.6693,
 4293              	.L315:
 4294              		.loc 1 3111 0 discriminator 4
 4295 0016 002B     		cmp	r3, #0	@ D.6693,
 4296 0018 04D0     		beq	.L316	@,
3112:FreeRTOS/tasks.c **** 	{
3113:FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set
3114:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime to the maximum possible value so it is
3115:FreeRTOS/tasks.c **** 		extremely unlikely that the
3116:FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 135


3117:FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3118:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4297              		.loc 1 3118 0 is_stmt 1
 4298 001a 0A4B     		ldr	r3, .L319+4	@ tmp117,
 4299 001c 4FF0FF32 		mov	r2, #-1	@ tmp118,
 4300 0020 1A60     		str	r2, [r3]	@ tmp118, xNextTaskUnblockTime
3119:FreeRTOS/tasks.c **** 	}
3120:FreeRTOS/tasks.c **** 	else
3121:FreeRTOS/tasks.c **** 	{
3122:FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3123:FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3124:FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3125:FreeRTOS/tasks.c **** 		from the Blocked state. */
3126:FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3127:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
3128:FreeRTOS/tasks.c **** 	}
3129:FreeRTOS/tasks.c **** }
 4301              		.loc 1 3129 0
 4302 0022 08E0     		b	.L318	@
 4303              	.L316:
3126:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 4304              		.loc 1 3126 0
 4305 0024 064B     		ldr	r3, .L319	@ tmp119,
 4306 0026 1B68     		ldr	r3, [r3]	@ D.6694, pxDelayedTaskList
 4307 0028 DB68     		ldr	r3, [r3, #12]	@ D.6696, _9->xListEnd.pxNext
 4308 002a DB68     		ldr	r3, [r3, #12]	@ tmp120, _10->pvOwner
 4309 002c 7B60     		str	r3, [r7, #4]	@ tmp120, pxTCB
3127:FreeRTOS/tasks.c **** 	}
 4310              		.loc 1 3127 0
 4311 002e 7B68     		ldr	r3, [r7, #4]	@ tmp121, pxTCB
 4312 0030 5B68     		ldr	r3, [r3, #4]	@ D.6695, pxTCB_11->xGenericListItem.xItemValue
 4313 0032 044A     		ldr	r2, .L319+4	@ tmp122,
 4314 0034 1360     		str	r3, [r2]	@ D.6695, xNextTaskUnblockTime
 4315              	.L318:
 4316              		.loc 1 3129 0
 4317 0036 00BF     		nop
 4318 0038 0C37     		adds	r7, r7, #12	@,,
 4319              		.cfi_def_cfa_offset 4
 4320 003a BD46     		mov	sp, r7	@,
 4321              		.cfi_def_cfa_register 13
 4322              		@ sp needed	@
 4323 003c 80BC     		pop	{r7}	@
 4324              		.cfi_restore 7
 4325              		.cfi_def_cfa_offset 0
 4326 003e 7047     		bx	lr	@
 4327              	.L320:
 4328              		.align	2
 4329              	.L319:
 4330 0040 00000000 		.word	pxDelayedTaskList
 4331 0044 00000000 		.word	xNextTaskUnblockTime
 4332              		.cfi_endproc
 4333              	.LFE40:
 4334              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4335              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4336              		.align	2
 4337              		.global	xTaskGetCurrentTaskHandle
 4338              		.thumb
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 136


 4339              		.thumb_func
 4340              		.type	xTaskGetCurrentTaskHandle, %function
 4341              	xTaskGetCurrentTaskHandle:
 4342              	.LFB41:
3130:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3131:FreeRTOS/tasks.c **** 
3132:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3133:FreeRTOS/tasks.c **** 
3134:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3135:FreeRTOS/tasks.c **** 	{
 4343              		.loc 1 3135 0
 4344              		.cfi_startproc
 4345              		@ args = 0, pretend = 0, frame = 8
 4346              		@ frame_needed = 1, uses_anonymous_args = 0
 4347              		@ link register save eliminated.
 4348 0000 80B4     		push	{r7}	@
 4349              		.cfi_def_cfa_offset 4
 4350              		.cfi_offset 7, -4
 4351 0002 83B0     		sub	sp, sp, #12	@,,
 4352              		.cfi_def_cfa_offset 16
 4353 0004 00AF     		add	r7, sp, #0	@,,
 4354              		.cfi_def_cfa_register 7
3136:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3137:FreeRTOS/tasks.c **** 
3138:FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3139:FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3140:FreeRTOS/tasks.c **** 		individual execution thread. */
3141:FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 4355              		.loc 1 3141 0
 4356 0006 044B     		ldr	r3, .L323	@ tmp112,
 4357 0008 1B68     		ldr	r3, [r3]	@ tmp113, pxCurrentTCB
 4358 000a 7B60     		str	r3, [r7, #4]	@ tmp113, xReturn
3142:FreeRTOS/tasks.c **** 
3143:FreeRTOS/tasks.c **** 		return xReturn;
 4359              		.loc 1 3143 0
 4360 000c 7B68     		ldr	r3, [r7, #4]	@ D.6697, xReturn
3144:FreeRTOS/tasks.c **** 	}
 4361              		.loc 1 3144 0
 4362 000e 1846     		mov	r0, r3	@, <retval>
 4363 0010 0C37     		adds	r7, r7, #12	@,,
 4364              		.cfi_def_cfa_offset 4
 4365 0012 BD46     		mov	sp, r7	@,
 4366              		.cfi_def_cfa_register 13
 4367              		@ sp needed	@
 4368 0014 80BC     		pop	{r7}	@
 4369              		.cfi_restore 7
 4370              		.cfi_def_cfa_offset 0
 4371 0016 7047     		bx	lr	@
 4372              	.L324:
 4373              		.align	2
 4374              	.L323:
 4375 0018 00000000 		.word	pxCurrentTCB
 4376              		.cfi_endproc
 4377              	.LFE41:
 4378              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4379              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4380              		.align	2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 137


 4381              		.global	vTaskPriorityInherit
 4382              		.thumb
 4383              		.thumb_func
 4384              		.type	vTaskPriorityInherit, %function
 4385              	vTaskPriorityInherit:
 4386              	.LFB42:
3145:FreeRTOS/tasks.c **** 
3146:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3147:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3148:FreeRTOS/tasks.c **** 
3149:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3150:FreeRTOS/tasks.c **** 
3151:FreeRTOS/tasks.c **** 	BaseT_t xTaskGetSchedulerState( void )
3152:FreeRTOS/tasks.c **** 	{
3153:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
3154:FreeRTOS/tasks.c **** 
3155:FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3156:FreeRTOS/tasks.c **** 		{
3157:FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3158:FreeRTOS/tasks.c **** 		}
3159:FreeRTOS/tasks.c **** 		else
3160:FreeRTOS/tasks.c **** 		{
3161:FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
3162:FreeRTOS/tasks.c **** 			{
3163:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3164:FreeRTOS/tasks.c **** 			}
3165:FreeRTOS/tasks.c **** 			else
3166:FreeRTOS/tasks.c **** 			{
3167:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3168:FreeRTOS/tasks.c **** 			}
3169:FreeRTOS/tasks.c **** 		}
3170:FreeRTOS/tasks.c **** 
3171:FreeRTOS/tasks.c **** 		return xReturn;
3172:FreeRTOS/tasks.c **** 	}
3173:FreeRTOS/tasks.c **** 
3174:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3175:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3176:FreeRTOS/tasks.c **** 
3177:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3178:FreeRTOS/tasks.c **** 
3179:FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3180:FreeRTOS/tasks.c **** 	{
 4387              		.loc 1 3180 0
 4388              		.cfi_startproc
 4389              		@ args = 0, pretend = 0, frame = 16
 4390              		@ frame_needed = 1, uses_anonymous_args = 0
 4391 0000 80B5     		push	{r7, lr}	@
 4392              		.cfi_def_cfa_offset 8
 4393              		.cfi_offset 7, -8
 4394              		.cfi_offset 14, -4
 4395 0002 84B0     		sub	sp, sp, #16	@,,
 4396              		.cfi_def_cfa_offset 24
 4397 0004 00AF     		add	r7, sp, #0	@,,
 4398              		.cfi_def_cfa_register 7
 4399 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
3181:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4400              		.loc 1 3181 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 138


 4401 0008 7B68     		ldr	r3, [r7, #4]	@ tmp142, pxMutexHolder
 4402 000a FB60     		str	r3, [r7, #12]	@ tmp142, pxTCB
3182:FreeRTOS/tasks.c **** 
3183:FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3184:FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3185:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 4403              		.loc 1 3185 0
 4404 000c 7B68     		ldr	r3, [r7, #4]	@ tmp143, pxMutexHolder
 4405 000e 002B     		cmp	r3, #0	@ tmp143,
 4406 0010 62D0     		beq	.L334	@,
3186:FreeRTOS/tasks.c **** 		{
3187:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4407              		.loc 1 3187 0
 4408 0012 FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 4409 0014 DA6A     		ldr	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4410 0016 324B     		ldr	r3, .L335	@ tmp145,
 4411 0018 1B68     		ldr	r3, [r3]	@ D.6700, pxCurrentTCB
 4412 001a DB6A     		ldr	r3, [r3, #44]	@ D.6699, _11->uxPriority
 4413 001c 9A42     		cmp	r2, r3	@ D.6699, D.6699
 4414 001e 5BD2     		bcs	.L334	@,
3188:FreeRTOS/tasks.c **** 			{
3189:FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3190:FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3191:FreeRTOS/tasks.c **** 				not	being used for anything else. */
3192:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4415              		.loc 1 3192 0
 4416 0020 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 4417 0022 9B69     		ldr	r3, [r3, #24]	@ D.6699, pxTCB_8->xEventListItem.xItemValue
 4418 0024 002B     		cmp	r3, #0	@ D.6701,
 4419 0026 06DB     		blt	.L327	@,
3193:FreeRTOS/tasks.c **** 				{
3194:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 4420              		.loc 1 3194 0
 4421 0028 2D4B     		ldr	r3, .L335	@ tmp147,
 4422 002a 1B68     		ldr	r3, [r3]	@ D.6700, pxCurrentTCB
 4423 002c DB6A     		ldr	r3, [r3, #44]	@ D.6699, _15->uxPriority
 4424 002e C3F10802 		rsb	r2, r3, #8	@ D.6699, D.6699,
 4425 0032 FB68     		ldr	r3, [r7, #12]	@ tmp148, pxTCB
 4426 0034 9A61     		str	r2, [r3, #24]	@ D.6699, pxTCB_8->xEventListItem.xItemValue
 4427              	.L327:
3195:FreeRTOS/tasks.c **** 				}
3196:FreeRTOS/tasks.c **** 				else
3197:FreeRTOS/tasks.c **** 				{
3198:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3199:FreeRTOS/tasks.c **** 				}
3200:FreeRTOS/tasks.c **** 
3201:FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need to
3202:FreeRTOS/tasks.c **** 				be moved into a new list. */
3203:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
 4428              		.loc 1 3203 0
 4429 0036 FB68     		ldr	r3, [r7, #12]	@ tmp149, pxTCB
 4430 0038 5969     		ldr	r1, [r3, #20]	@ D.6702, pxTCB_8->xGenericListItem.pvContainer
 4431 003a FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 4432 003c DA6A     		ldr	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4433 003e 1346     		mov	r3, r2	@ tmp151, D.6699
 4434 0040 9B00     		lsls	r3, r3, #2	@ tmp151, tmp151,
 4435 0042 1344     		add	r3, r3, r2	@ tmp151, D.6699
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 139


 4436 0044 9B00     		lsls	r3, r3, #2	@ tmp152, tmp151,
 4437 0046 274A     		ldr	r2, .L335+4	@ tmp153,
 4438 0048 1344     		add	r3, r3, r2	@ D.6703, tmp153
 4439 004a 9942     		cmp	r1, r3	@ D.6702, D.6703
 4440 004c 01D1     		bne	.L328	@,
 4441              		.loc 1 3203 0 is_stmt 0 discriminator 1
 4442 004e 0123     		movs	r3, #1	@ D.6698,
 4443 0050 00E0     		b	.L329	@
 4444              	.L328:
 4445              		.loc 1 3203 0 discriminator 2
 4446 0052 0023     		movs	r3, #0	@ D.6698,
 4447              	.L329:
 4448              		.loc 1 3203 0 discriminator 4
 4449 0054 002B     		cmp	r3, #0	@ D.6698,
 4450 0056 3AD0     		beq	.L330	@,
3204:FreeRTOS/tasks.c **** 				{
3205:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 4451              		.loc 1 3205 0 is_stmt 1
 4452 0058 FB68     		ldr	r3, [r7, #12]	@ tmp154, pxTCB
 4453 005a 0433     		adds	r3, r3, #4	@ D.6704, tmp154,
 4454 005c 1846     		mov	r0, r3	@, D.6704
 4455 005e FFF7FEFF 		bl	uxListRemove	@
 4456 0062 0346     		mov	r3, r0	@ D.6699,
 4457 0064 002B     		cmp	r3, #0	@ D.6699,
 4458 0066 15D1     		bne	.L331	@,
3206:FreeRTOS/tasks.c **** 					{
3207:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4459              		.loc 1 3207 0
 4460 0068 FB68     		ldr	r3, [r7, #12]	@ tmp155, pxTCB
 4461 006a DA6A     		ldr	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4462 006c 1D49     		ldr	r1, .L335+4	@ tmp156,
 4463 006e 1346     		mov	r3, r2	@ tmp157, D.6699
 4464 0070 9B00     		lsls	r3, r3, #2	@ tmp157, tmp157,
 4465 0072 1344     		add	r3, r3, r2	@ tmp157, D.6699
 4466 0074 9B00     		lsls	r3, r3, #2	@ tmp158, tmp157,
 4467 0076 0B44     		add	r3, r3, r1	@ tmp159, tmp156
 4468 0078 1B68     		ldr	r3, [r3]	@ D.6699, pxReadyTasksLists[_27].uxNumberOfItems
 4469 007a 002B     		cmp	r3, #0	@ D.6699,
 4470 007c 0AD1     		bne	.L331	@,
 4471              		.loc 1 3207 0 is_stmt 0 discriminator 1
 4472 007e FB68     		ldr	r3, [r7, #12]	@ tmp160, pxTCB
 4473 0080 DB6A     		ldr	r3, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4474 0082 0122     		movs	r2, #1	@ tmp161,
 4475 0084 02FA03F3 		lsl	r3, r2, r3	@ D.6699, tmp161, D.6699
 4476 0088 DA43     		mvns	r2, r3	@ D.6699, D.6699
 4477 008a 174B     		ldr	r3, .L335+8	@ tmp162,
 4478 008c 1B68     		ldr	r3, [r3]	@ D.6699, uxTopReadyPriority
 4479 008e 1340     		ands	r3, r3, r2	@, D.6699, D.6699, D.6699
 4480 0090 154A     		ldr	r2, .L335+8	@ tmp163,
 4481 0092 1360     		str	r3, [r2]	@ D.6699, uxTopReadyPriority
 4482              	.L331:
3208:FreeRTOS/tasks.c **** 					}
3209:FreeRTOS/tasks.c **** 					else
3210:FreeRTOS/tasks.c **** 					{
3211:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3212:FreeRTOS/tasks.c **** 					}
3213:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 140


3214:FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3215:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4483              		.loc 1 3215 0 is_stmt 1
 4484 0094 124B     		ldr	r3, .L335	@ tmp164,
 4485 0096 1B68     		ldr	r3, [r3]	@ D.6700, pxCurrentTCB
 4486 0098 DA6A     		ldr	r2, [r3, #44]	@ D.6699, _35->uxPriority
 4487 009a FB68     		ldr	r3, [r7, #12]	@ tmp165, pxTCB
 4488 009c DA62     		str	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
3216:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4489              		.loc 1 3216 0
 4490 009e FB68     		ldr	r3, [r7, #12]	@ tmp166, pxTCB
 4491 00a0 DB6A     		ldr	r3, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4492 00a2 0122     		movs	r2, #1	@ tmp167,
 4493 00a4 9A40     		lsls	r2, r2, r3	@ D.6699, tmp167, D.6699
 4494 00a6 104B     		ldr	r3, .L335+8	@ tmp168,
 4495 00a8 1B68     		ldr	r3, [r3]	@ D.6699, uxTopReadyPriority
 4496 00aa 1343     		orrs	r3, r3, r2	@, D.6699, D.6699, D.6699
 4497 00ac 0E4A     		ldr	r2, .L335+8	@ tmp169,
 4498 00ae 1360     		str	r3, [r2]	@ D.6699, uxTopReadyPriority
 4499 00b0 FB68     		ldr	r3, [r7, #12]	@ tmp170, pxTCB
 4500 00b2 DA6A     		ldr	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4501 00b4 1346     		mov	r3, r2	@ tmp171, D.6699
 4502 00b6 9B00     		lsls	r3, r3, #2	@ tmp171, tmp171,
 4503 00b8 1344     		add	r3, r3, r2	@ tmp171, D.6699
 4504 00ba 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 4505 00bc 094A     		ldr	r2, .L335+4	@ tmp173,
 4506 00be 1A44     		add	r2, r2, r3	@ D.6703, tmp171
 4507 00c0 FB68     		ldr	r3, [r7, #12]	@ tmp174, pxTCB
 4508 00c2 0433     		adds	r3, r3, #4	@ D.6704, tmp174,
 4509 00c4 1946     		mov	r1, r3	@, D.6704
 4510 00c6 1046     		mov	r0, r2	@, D.6703
 4511 00c8 FFF7FEFF 		bl	vListInsertEnd	@
3217:FreeRTOS/tasks.c **** 				}
3218:FreeRTOS/tasks.c **** 				else
3219:FreeRTOS/tasks.c **** 				{
3220:FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3221:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3222:FreeRTOS/tasks.c **** 				}
3223:FreeRTOS/tasks.c **** 
3224:FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3225:FreeRTOS/tasks.c **** 			}
3226:FreeRTOS/tasks.c **** 			else
3227:FreeRTOS/tasks.c **** 			{
3228:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3229:FreeRTOS/tasks.c **** 			}
3230:FreeRTOS/tasks.c **** 		}
3231:FreeRTOS/tasks.c **** 		else
3232:FreeRTOS/tasks.c **** 		{
3233:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3234:FreeRTOS/tasks.c **** 		}
3235:FreeRTOS/tasks.c **** 	}
 4512              		.loc 1 3235 0
 4513 00cc 04E0     		b	.L334	@
 4514              	.L330:
3221:FreeRTOS/tasks.c **** 				}
 4515              		.loc 1 3221 0
 4516 00ce 044B     		ldr	r3, .L335	@ tmp175,
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 141


 4517 00d0 1B68     		ldr	r3, [r3]	@ D.6700, pxCurrentTCB
 4518 00d2 DA6A     		ldr	r2, [r3, #44]	@ D.6699, _47->uxPriority
 4519 00d4 FB68     		ldr	r3, [r7, #12]	@ tmp176, pxTCB
 4520 00d6 DA62     		str	r2, [r3, #44]	@ D.6699, pxTCB_8->uxPriority
 4521              	.L334:
 4522              		.loc 1 3235 0
 4523 00d8 00BF     		nop
 4524 00da 1037     		adds	r7, r7, #16	@,,
 4525              		.cfi_def_cfa_offset 8
 4526 00dc BD46     		mov	sp, r7	@,
 4527              		.cfi_def_cfa_register 13
 4528              		@ sp needed	@
 4529 00de 80BD     		pop	{r7, pc}	@
 4530              	.L336:
 4531              		.align	2
 4532              	.L335:
 4533 00e0 00000000 		.word	pxCurrentTCB
 4534 00e4 00000000 		.word	pxReadyTasksLists
 4535 00e8 00000000 		.word	uxTopReadyPriority
 4536              		.cfi_endproc
 4537              	.LFE42:
 4538              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 4539              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4540              		.align	2
 4541              		.global	xTaskPriorityDisinherit
 4542              		.thumb
 4543              		.thumb_func
 4544              		.type	xTaskPriorityDisinherit, %function
 4545              	xTaskPriorityDisinherit:
 4546              	.LFB43:
3236:FreeRTOS/tasks.c **** 
3237:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3238:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3239:FreeRTOS/tasks.c **** 
3240:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3241:FreeRTOS/tasks.c **** 
3242:FreeRTOS/tasks.c **** 	BaseT_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3243:FreeRTOS/tasks.c **** 	{
 4547              		.loc 1 3243 0
 4548              		.cfi_startproc
 4549              		@ args = 0, pretend = 0, frame = 16
 4550              		@ frame_needed = 1, uses_anonymous_args = 0
 4551 0000 80B5     		push	{r7, lr}	@
 4552              		.cfi_def_cfa_offset 8
 4553              		.cfi_offset 7, -8
 4554              		.cfi_offset 14, -4
 4555 0002 84B0     		sub	sp, sp, #16	@,,
 4556              		.cfi_def_cfa_offset 24
 4557 0004 00AF     		add	r7, sp, #0	@,,
 4558              		.cfi_def_cfa_register 7
 4559 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
3244:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4560              		.loc 1 3244 0
 4561 0008 7B68     		ldr	r3, [r7, #4]	@ tmp137, pxMutexHolder
 4562 000a BB60     		str	r3, [r7, #8]	@ tmp137, pxTCB
3245:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 4563              		.loc 1 3245 0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 142


 4564 000c 0023     		movs	r3, #0	@ tmp138,
 4565 000e FB60     		str	r3, [r7, #12]	@ tmp138, xReturn
3246:FreeRTOS/tasks.c **** 
3247:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 4566              		.loc 1 3247 0
 4567 0010 7B68     		ldr	r3, [r7, #4]	@ tmp139, pxMutexHolder
 4568 0012 002B     		cmp	r3, #0	@ tmp139,
 4569 0014 56D0     		beq	.L338	@,
3248:FreeRTOS/tasks.c **** 		{
3249:FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4570              		.loc 1 3249 0
 4571 0016 BB68     		ldr	r3, [r7, #8]	@ tmp140, pxTCB
 4572 0018 DB6C     		ldr	r3, [r3, #76]	@ D.6705, pxTCB_6->uxMutexesHeld
 4573 001a 002B     		cmp	r3, #0	@ D.6705,
 4574 001c 02D1     		bne	.L339	@,
 4575              		.loc 1 3249 0 is_stmt 0 discriminator 1
 4576 001e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 4577              	.L340:
 4578 0022 FEE7     		b	.L340	@
 4579              	.L339:
3250:FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4580              		.loc 1 3250 0 is_stmt 1
 4581 0024 BB68     		ldr	r3, [r7, #8]	@ tmp141, pxTCB
 4582 0026 DB6C     		ldr	r3, [r3, #76]	@ D.6705, pxTCB_6->uxMutexesHeld
 4583 0028 5A1E     		subs	r2, r3, #1	@ D.6705, D.6705,
 4584 002a BB68     		ldr	r3, [r7, #8]	@ tmp142, pxTCB
 4585 002c DA64     		str	r2, [r3, #76]	@ D.6705, pxTCB_6->uxMutexesHeld
3251:FreeRTOS/tasks.c **** 
3252:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4586              		.loc 1 3252 0
 4587 002e BB68     		ldr	r3, [r7, #8]	@ tmp143, pxTCB
 4588 0030 DA6A     		ldr	r2, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4589 0032 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxTCB
 4590 0034 9B6C     		ldr	r3, [r3, #72]	@ D.6705, pxTCB_6->uxBasePriority
 4591 0036 9A42     		cmp	r2, r3	@ D.6705, D.6705
 4592 0038 44D0     		beq	.L338	@,
3253:FreeRTOS/tasks.c **** 			{
3254:FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3255:FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseT_t ) 0 )
 4593              		.loc 1 3255 0
 4594 003a BB68     		ldr	r3, [r7, #8]	@ tmp145, pxTCB
 4595 003c DB6C     		ldr	r3, [r3, #76]	@ D.6705, pxTCB_6->uxMutexesHeld
 4596 003e 002B     		cmp	r3, #0	@ D.6705,
 4597 0040 40D1     		bne	.L338	@,
3256:FreeRTOS/tasks.c **** 				{
3257:FreeRTOS/tasks.c **** 					/* The holding task must be the running task to be able to give
3258:FreeRTOS/tasks.c **** 					the mutex back.  Remove the holding task from the ready list. */
3259:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 4598              		.loc 1 3259 0
 4599 0042 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxTCB
 4600 0044 0433     		adds	r3, r3, #4	@ D.6706, tmp146,
 4601 0046 1846     		mov	r0, r3	@, D.6706
 4602 0048 FFF7FEFF 		bl	uxListRemove	@
 4603 004c 0346     		mov	r3, r0	@ D.6705,
 4604 004e 002B     		cmp	r3, #0	@ D.6705,
 4605 0050 15D1     		bne	.L341	@,
3260:FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 143


3261:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4606              		.loc 1 3261 0
 4607 0052 BB68     		ldr	r3, [r7, #8]	@ tmp147, pxTCB
 4608 0054 DA6A     		ldr	r2, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4609 0056 1E49     		ldr	r1, .L344	@ tmp148,
 4610 0058 1346     		mov	r3, r2	@ tmp149, D.6705
 4611 005a 9B00     		lsls	r3, r3, #2	@ tmp149, tmp149,
 4612 005c 1344     		add	r3, r3, r2	@ tmp149, D.6705
 4613 005e 9B00     		lsls	r3, r3, #2	@ tmp150, tmp149,
 4614 0060 0B44     		add	r3, r3, r1	@ tmp151, tmp148
 4615 0062 1B68     		ldr	r3, [r3]	@ D.6705, pxReadyTasksLists[_19].uxNumberOfItems
 4616 0064 002B     		cmp	r3, #0	@ D.6705,
 4617 0066 0AD1     		bne	.L341	@,
 4618              		.loc 1 3261 0 is_stmt 0 discriminator 1
 4619 0068 BB68     		ldr	r3, [r7, #8]	@ tmp152, pxTCB
 4620 006a DB6A     		ldr	r3, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4621 006c 0122     		movs	r2, #1	@ tmp153,
 4622 006e 02FA03F3 		lsl	r3, r2, r3	@ D.6705, tmp153, D.6705
 4623 0072 DA43     		mvns	r2, r3	@ D.6705, D.6705
 4624 0074 174B     		ldr	r3, .L344+4	@ tmp154,
 4625 0076 1B68     		ldr	r3, [r3]	@ D.6705, uxTopReadyPriority
 4626 0078 1340     		ands	r3, r3, r2	@, D.6705, D.6705, D.6705
 4627 007a 164A     		ldr	r2, .L344+4	@ tmp155,
 4628 007c 1360     		str	r3, [r2]	@ D.6705, uxTopReadyPriority
 4629              	.L341:
3262:FreeRTOS/tasks.c **** 					}
3263:FreeRTOS/tasks.c **** 					else
3264:FreeRTOS/tasks.c **** 					{
3265:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3266:FreeRTOS/tasks.c **** 					}
3267:FreeRTOS/tasks.c **** 
3268:FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the new
3269:FreeRTOS/tasks.c **** 					ready list. */
3270:FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3271:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4630              		.loc 1 3271 0 is_stmt 1
 4631 007e BB68     		ldr	r3, [r7, #8]	@ tmp156, pxTCB
 4632 0080 9A6C     		ldr	r2, [r3, #72]	@ D.6705, pxTCB_6->uxBasePriority
 4633 0082 BB68     		ldr	r3, [r7, #8]	@ tmp157, pxTCB
 4634 0084 DA62     		str	r2, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
3272:FreeRTOS/tasks.c **** 
3273:FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3274:FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3275:FreeRTOS/tasks.c **** 					running to give back the mutex. */
3276:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 4635              		.loc 1 3276 0
 4636 0086 BB68     		ldr	r3, [r7, #8]	@ tmp158, pxTCB
 4637 0088 DB6A     		ldr	r3, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4638 008a C3F10802 		rsb	r2, r3, #8	@ D.6705, D.6705,
 4639 008e BB68     		ldr	r3, [r7, #8]	@ tmp159, pxTCB
 4640 0090 9A61     		str	r2, [r3, #24]	@ D.6705, pxTCB_6->xEventListItem.xItemValue
3277:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4641              		.loc 1 3277 0
 4642 0092 BB68     		ldr	r3, [r7, #8]	@ tmp160, pxTCB
 4643 0094 DB6A     		ldr	r3, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4644 0096 0122     		movs	r2, #1	@ tmp161,
 4645 0098 9A40     		lsls	r2, r2, r3	@ D.6705, tmp161, D.6705
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 144


 4646 009a 0E4B     		ldr	r3, .L344+4	@ tmp162,
 4647 009c 1B68     		ldr	r3, [r3]	@ D.6705, uxTopReadyPriority
 4648 009e 1343     		orrs	r3, r3, r2	@, D.6705, D.6705, D.6705
 4649 00a0 0C4A     		ldr	r2, .L344+4	@ tmp163,
 4650 00a2 1360     		str	r3, [r2]	@ D.6705, uxTopReadyPriority
 4651 00a4 BB68     		ldr	r3, [r7, #8]	@ tmp164, pxTCB
 4652 00a6 DA6A     		ldr	r2, [r3, #44]	@ D.6705, pxTCB_6->uxPriority
 4653 00a8 1346     		mov	r3, r2	@ tmp165, D.6705
 4654 00aa 9B00     		lsls	r3, r3, #2	@ tmp165, tmp165,
 4655 00ac 1344     		add	r3, r3, r2	@ tmp165, D.6705
 4656 00ae 9B00     		lsls	r3, r3, #2	@ tmp166, tmp165,
 4657 00b0 074A     		ldr	r2, .L344	@ tmp167,
 4658 00b2 1A44     		add	r2, r2, r3	@ D.6707, tmp165
 4659 00b4 BB68     		ldr	r3, [r7, #8]	@ tmp168, pxTCB
 4660 00b6 0433     		adds	r3, r3, #4	@ D.6706, tmp168,
 4661 00b8 1946     		mov	r1, r3	@, D.6706
 4662 00ba 1046     		mov	r0, r2	@, D.6707
 4663 00bc FFF7FEFF 		bl	vListInsertEnd	@
3278:FreeRTOS/tasks.c **** 
3279:FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3280:FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3281:FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3282:FreeRTOS/tasks.c **** 					in an order different to that in which they were taken. */
3283:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 4664              		.loc 1 3283 0
 4665 00c0 0123     		movs	r3, #1	@ tmp169,
 4666 00c2 FB60     		str	r3, [r7, #12]	@ tmp169, xReturn
 4667              	.L338:
3284:FreeRTOS/tasks.c **** 				}
3285:FreeRTOS/tasks.c **** 				else
3286:FreeRTOS/tasks.c **** 				{
3287:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3288:FreeRTOS/tasks.c **** 				}
3289:FreeRTOS/tasks.c **** 			}
3290:FreeRTOS/tasks.c **** 			else
3291:FreeRTOS/tasks.c **** 			{
3292:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3293:FreeRTOS/tasks.c **** 			}
3294:FreeRTOS/tasks.c **** 		}
3295:FreeRTOS/tasks.c **** 		else
3296:FreeRTOS/tasks.c **** 		{
3297:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3298:FreeRTOS/tasks.c **** 		}
3299:FreeRTOS/tasks.c **** 
3300:FreeRTOS/tasks.c **** 		return xReturn;
 4668              		.loc 1 3300 0
 4669 00c4 FB68     		ldr	r3, [r7, #12]	@ D.6708, xReturn
3301:FreeRTOS/tasks.c **** 	}
 4670              		.loc 1 3301 0
 4671 00c6 1846     		mov	r0, r3	@, <retval>
 4672 00c8 1037     		adds	r7, r7, #16	@,,
 4673              		.cfi_def_cfa_offset 8
 4674 00ca BD46     		mov	sp, r7	@,
 4675              		.cfi_def_cfa_register 13
 4676              		@ sp needed	@
 4677 00cc 80BD     		pop	{r7, pc}	@
 4678              	.L345:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 145


 4679 00ce 00BF     		.align	2
 4680              	.L344:
 4681 00d0 00000000 		.word	pxReadyTasksLists
 4682 00d4 00000000 		.word	uxTopReadyPriority
 4683              		.cfi_endproc
 4684              	.LFE43:
 4685              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 4686              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4687              		.align	2
 4688              		.global	uxTaskResetEventItemValue
 4689              		.thumb
 4690              		.thumb_func
 4691              		.type	uxTaskResetEventItemValue, %function
 4692              	uxTaskResetEventItemValue:
 4693              	.LFB44:
3302:FreeRTOS/tasks.c **** 
3303:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3304:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3305:FreeRTOS/tasks.c **** 
3306:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3307:FreeRTOS/tasks.c **** 
3308:FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3309:FreeRTOS/tasks.c **** 	{
3310:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3311:FreeRTOS/tasks.c **** 
3312:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3313:FreeRTOS/tasks.c **** 		{
3314:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3315:FreeRTOS/tasks.c **** 
3316:FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3317:FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3318:FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3319:FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3320:FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3321:FreeRTOS/tasks.c **** 			critical section. */
3322:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3323:FreeRTOS/tasks.c **** 			{
3324:FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3325:FreeRTOS/tasks.c **** 			}
3326:FreeRTOS/tasks.c **** 
3327:FreeRTOS/tasks.c **** 		}
3328:FreeRTOS/tasks.c **** 		else
3329:FreeRTOS/tasks.c **** 		{
3330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3331:FreeRTOS/tasks.c **** 		}
3332:FreeRTOS/tasks.c **** 	}
3333:FreeRTOS/tasks.c **** 
3334:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3335:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3336:FreeRTOS/tasks.c **** 
3337:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3338:FreeRTOS/tasks.c **** 
3339:FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3340:FreeRTOS/tasks.c **** 	{
3341:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3342:FreeRTOS/tasks.c **** 		{
3343:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 146


3344:FreeRTOS/tasks.c **** 			{
3345:FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3346:FreeRTOS/tasks.c **** 
3347:FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3348:FreeRTOS/tasks.c **** 				{
3349:FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3350:FreeRTOS/tasks.c **** 				}
3351:FreeRTOS/tasks.c **** 				else
3352:FreeRTOS/tasks.c **** 				{
3353:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3354:FreeRTOS/tasks.c **** 				}
3355:FreeRTOS/tasks.c **** 			}
3356:FreeRTOS/tasks.c **** 			else
3357:FreeRTOS/tasks.c **** 			{
3358:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3359:FreeRTOS/tasks.c **** 			}
3360:FreeRTOS/tasks.c **** 		}
3361:FreeRTOS/tasks.c **** 		else
3362:FreeRTOS/tasks.c **** 		{
3363:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3364:FreeRTOS/tasks.c **** 		}
3365:FreeRTOS/tasks.c **** 	}
3366:FreeRTOS/tasks.c **** 
3367:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3368:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3369:FreeRTOS/tasks.c **** 
3370:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3371:FreeRTOS/tasks.c **** 
3372:FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3373:FreeRTOS/tasks.c **** 	{
3374:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3375:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3376:FreeRTOS/tasks.c **** 	char cStatus;
3377:FreeRTOS/tasks.c **** 
3378:FreeRTOS/tasks.c **** 		/*
3379:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3380:FreeRTOS/tasks.c **** 		 *
3381:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3382:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3383:FreeRTOS/tasks.c **** 		 * scheduler.
3384:FreeRTOS/tasks.c **** 		 *
3385:FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3386:FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3387:FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3388:FreeRTOS/tasks.c **** 		 *
3389:FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3390:FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3391:FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3392:FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3393:FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3394:FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3395:FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3396:FreeRTOS/tasks.c **** 		 *
3397:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3398:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3399:FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
3400:FreeRTOS/tasks.c **** 		 */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 147


3401:FreeRTOS/tasks.c **** 
3402:FreeRTOS/tasks.c **** 
3403:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3404:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3405:FreeRTOS/tasks.c **** 
3406:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3407:FreeRTOS/tasks.c **** 		function is executing. */
3408:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3409:FreeRTOS/tasks.c **** 
3410:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3411:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3412:FreeRTOS/tasks.c **** 
3413:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3414:FreeRTOS/tasks.c **** 		{
3415:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3416:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3417:FreeRTOS/tasks.c **** 
3418:FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3419:FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3420:FreeRTOS/tasks.c **** 			{
3421:FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3422:FreeRTOS/tasks.c **** 				{
3423:FreeRTOS/tasks.c **** 				case eReady:		cStatus = tskREADY_CHAR;
3424:FreeRTOS/tasks.c **** 									break;
3425:FreeRTOS/tasks.c **** 
3426:FreeRTOS/tasks.c **** 				case eBlocked:		cStatus = tskBLOCKED_CHAR;
3427:FreeRTOS/tasks.c **** 									break;
3428:FreeRTOS/tasks.c **** 
3429:FreeRTOS/tasks.c **** 				case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3430:FreeRTOS/tasks.c **** 									break;
3431:FreeRTOS/tasks.c **** 
3432:FreeRTOS/tasks.c **** 				case eDeleted:		cStatus = tskDELETED_CHAR;
3433:FreeRTOS/tasks.c **** 									break;
3434:FreeRTOS/tasks.c **** 
3435:FreeRTOS/tasks.c **** 				default:			/* Should not get here, but it is included
3436:FreeRTOS/tasks.c **** 									to prevent static checking errors. */
3437:FreeRTOS/tasks.c **** 									cStatus = 0x00;
3438:FreeRTOS/tasks.c **** 									break;
3439:FreeRTOS/tasks.c **** 				}
3440:FreeRTOS/tasks.c **** 
3441:FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus,
3442:FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3443:FreeRTOS/tasks.c **** 			}
3444:FreeRTOS/tasks.c **** 
3445:FreeRTOS/tasks.c **** 			/* Free the array again. */
3446:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3447:FreeRTOS/tasks.c **** 		}
3448:FreeRTOS/tasks.c **** 		else
3449:FreeRTOS/tasks.c **** 		{
3450:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3451:FreeRTOS/tasks.c **** 		}
3452:FreeRTOS/tasks.c **** 	}
3453:FreeRTOS/tasks.c **** 
3454:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) ) */
3455:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
3456:FreeRTOS/tasks.c **** 
3457:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 148


3458:FreeRTOS/tasks.c **** 
3459:FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3460:FreeRTOS/tasks.c **** 	{
3461:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3462:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3463:FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3464:FreeRTOS/tasks.c **** 
3465:FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3466:FreeRTOS/tasks.c **** 		{
3467:FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3468:FreeRTOS/tasks.c **** 		}
3469:FreeRTOS/tasks.c **** 		#endif
3470:FreeRTOS/tasks.c **** 
3471:FreeRTOS/tasks.c **** 		/*
3472:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3473:FreeRTOS/tasks.c **** 		 *
3474:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3475:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3476:FreeRTOS/tasks.c **** 		 * scheduler.
3477:FreeRTOS/tasks.c **** 		 *
3478:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3479:FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3480:FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3481:FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
3482:FreeRTOS/tasks.c **** 		 *
3483:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3484:FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3485:FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3486:FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3487:FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3488:FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3489:FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
3490:FreeRTOS/tasks.c **** 		 *
3491:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3492:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3493:FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3494:FreeRTOS/tasks.c **** 		 */
3495:FreeRTOS/tasks.c **** 
3496:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3497:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3498:FreeRTOS/tasks.c **** 
3499:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3500:FreeRTOS/tasks.c **** 		function is executing. */
3501:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3502:FreeRTOS/tasks.c **** 
3503:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3504:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3505:FreeRTOS/tasks.c **** 
3506:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3507:FreeRTOS/tasks.c **** 		{
3508:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3509:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3510:FreeRTOS/tasks.c **** 
3511:FreeRTOS/tasks.c **** 			/* For percentage calculations. */
3512:FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
3513:FreeRTOS/tasks.c **** 
3514:FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 149


3515:FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
3516:FreeRTOS/tasks.c **** 			{
3517:FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
3518:FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3519:FreeRTOS/tasks.c **** 				{
3520:FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
3521:FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
3522:FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3523:FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3524:FreeRTOS/tasks.c **** 
3525:FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3526:FreeRTOS/tasks.c **** 					{
3527:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3528:FreeRTOS/tasks.c **** 						{
3529:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskS
3530:FreeRTOS/tasks.c **** 						}
3531:FreeRTOS/tasks.c **** 						#else
3532:FreeRTOS/tasks.c **** 						{
3533:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3534:FreeRTOS/tasks.c **** 							printf() library can be used. */
3535:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t%u%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3536:FreeRTOS/tasks.c **** 						}
3537:FreeRTOS/tasks.c **** 						#endif
3538:FreeRTOS/tasks.c **** 					}
3539:FreeRTOS/tasks.c **** 					else
3540:FreeRTOS/tasks.c **** 					{
3541:FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
3542:FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
3543:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3544:FreeRTOS/tasks.c **** 						{
3545:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskSt
3546:FreeRTOS/tasks.c **** 						}
3547:FreeRTOS/tasks.c **** 						#else
3548:FreeRTOS/tasks.c **** 						{
3549:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3550:FreeRTOS/tasks.c **** 							printf() library can be used. */
3551:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3552:FreeRTOS/tasks.c **** 						}
3553:FreeRTOS/tasks.c **** 						#endif
3554:FreeRTOS/tasks.c **** 					}
3555:FreeRTOS/tasks.c **** 
3556:FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3557:FreeRTOS/tasks.c **** 				}
3558:FreeRTOS/tasks.c **** 			}
3559:FreeRTOS/tasks.c **** 			else
3560:FreeRTOS/tasks.c **** 			{
3561:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3562:FreeRTOS/tasks.c **** 			}
3563:FreeRTOS/tasks.c **** 
3564:FreeRTOS/tasks.c **** 			/* Free the array again. */
3565:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3566:FreeRTOS/tasks.c **** 		}
3567:FreeRTOS/tasks.c **** 		else
3568:FreeRTOS/tasks.c **** 		{
3569:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3570:FreeRTOS/tasks.c **** 		}
3571:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 150


3572:FreeRTOS/tasks.c **** 
3573:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
3574:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3575:FreeRTOS/tasks.c **** 
3576:FreeRTOS/tasks.c **** TickT_t uxTaskResetEventItemValue( void )
3577:FreeRTOS/tasks.c **** {
 4694              		.loc 1 3577 0
 4695              		.cfi_startproc
 4696              		@ args = 0, pretend = 0, frame = 8
 4697              		@ frame_needed = 1, uses_anonymous_args = 0
 4698              		@ link register save eliminated.
 4699 0000 80B4     		push	{r7}	@
 4700              		.cfi_def_cfa_offset 4
 4701              		.cfi_offset 7, -4
 4702 0002 83B0     		sub	sp, sp, #12	@,,
 4703              		.cfi_def_cfa_offset 16
 4704 0004 00AF     		add	r7, sp, #0	@,,
 4705              		.cfi_def_cfa_register 7
3578:FreeRTOS/tasks.c **** TickT_t uxReturn;
3579:FreeRTOS/tasks.c **** 
3580:FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4706              		.loc 1 3580 0
 4707 0006 094B     		ldr	r3, .L348	@ tmp117,
 4708 0008 1B68     		ldr	r3, [r3]	@ D.6709, pxCurrentTCB
 4709 000a 9B69     		ldr	r3, [r3, #24]	@ tmp118, _2->xEventListItem.xItemValue
 4710 000c 7B60     		str	r3, [r7, #4]	@ tmp118, uxReturn
3581:FreeRTOS/tasks.c **** 
3582:FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3583:FreeRTOS/tasks.c **** 	queues and semaphores. */
3584:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - (
 4711              		.loc 1 3584 0
 4712 000e 074B     		ldr	r3, .L348	@ tmp119,
 4713 0010 1B68     		ldr	r3, [r3]	@ D.6709, pxCurrentTCB
 4714 0012 064A     		ldr	r2, .L348	@ tmp120,
 4715 0014 1268     		ldr	r2, [r2]	@ D.6709, pxCurrentTCB
 4716 0016 D26A     		ldr	r2, [r2, #44]	@ D.6710, _5->uxPriority
 4717 0018 C2F10802 		rsb	r2, r2, #8	@ D.6710, D.6710,
 4718 001c 9A61     		str	r2, [r3, #24]	@ D.6710, _4->xEventListItem.xItemValue
3585:FreeRTOS/tasks.c **** 
3586:FreeRTOS/tasks.c **** 	return uxReturn;
 4719              		.loc 1 3586 0
 4720 001e 7B68     		ldr	r3, [r7, #4]	@ D.6711, uxReturn
3587:FreeRTOS/tasks.c **** }
 4721              		.loc 1 3587 0
 4722 0020 1846     		mov	r0, r3	@, <retval>
 4723 0022 0C37     		adds	r7, r7, #12	@,,
 4724              		.cfi_def_cfa_offset 4
 4725 0024 BD46     		mov	sp, r7	@,
 4726              		.cfi_def_cfa_register 13
 4727              		@ sp needed	@
 4728 0026 80BC     		pop	{r7}	@
 4729              		.cfi_restore 7
 4730              		.cfi_def_cfa_offset 0
 4731 0028 7047     		bx	lr	@
 4732              	.L349:
 4733 002a 00BF     		.align	2
 4734              	.L348:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 151


 4735 002c 00000000 		.word	pxCurrentTCB
 4736              		.cfi_endproc
 4737              	.LFE44:
 4738              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4739              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4740              		.align	2
 4741              		.global	pvTaskIncrementMutexHeldCount
 4742              		.thumb
 4743              		.thumb_func
 4744              		.type	pvTaskIncrementMutexHeldCount, %function
 4745              	pvTaskIncrementMutexHeldCount:
 4746              	.LFB45:
3588:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3589:FreeRTOS/tasks.c **** 
3590:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3591:FreeRTOS/tasks.c **** 
3592:FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3593:FreeRTOS/tasks.c **** 	{
 4747              		.loc 1 3593 0
 4748              		.cfi_startproc
 4749              		@ args = 0, pretend = 0, frame = 0
 4750              		@ frame_needed = 1, uses_anonymous_args = 0
 4751              		@ link register save eliminated.
 4752 0000 80B4     		push	{r7}	@
 4753              		.cfi_def_cfa_offset 4
 4754              		.cfi_offset 7, -4
 4755 0002 00AF     		add	r7, sp, #0	@,,
 4756              		.cfi_def_cfa_register 7
3594:FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3595:FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
3596:FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 4757              		.loc 1 3596 0
 4758 0004 074B     		ldr	r3, .L353	@ tmp116,
 4759 0006 1B68     		ldr	r3, [r3]	@ D.6712, pxCurrentTCB
 4760 0008 002B     		cmp	r3, #0	@ D.6712,
 4761 000a 04D0     		beq	.L351	@,
3597:FreeRTOS/tasks.c **** 		{
3598:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4762              		.loc 1 3598 0
 4763 000c 054B     		ldr	r3, .L353	@ tmp117,
 4764 000e 1B68     		ldr	r3, [r3]	@ D.6712, pxCurrentTCB
 4765 0010 DA6C     		ldr	r2, [r3, #76]	@ D.6713, _4->uxMutexesHeld
 4766 0012 0132     		adds	r2, r2, #1	@ D.6713, D.6713,
 4767 0014 DA64     		str	r2, [r3, #76]	@ D.6713, _4->uxMutexesHeld
 4768              	.L351:
3599:FreeRTOS/tasks.c **** 		}
3600:FreeRTOS/tasks.c **** 
3601:FreeRTOS/tasks.c **** 		return pxCurrentTCB;
 4769              		.loc 1 3601 0
 4770 0016 034B     		ldr	r3, .L353	@ tmp118,
 4771 0018 1B68     		ldr	r3, [r3]	@ D.6714, pxCurrentTCB
3602:FreeRTOS/tasks.c **** 	}
 4772              		.loc 1 3602 0
 4773 001a 1846     		mov	r0, r3	@, <retval>
 4774 001c BD46     		mov	sp, r7	@,
 4775              		.cfi_def_cfa_register 13
 4776              		@ sp needed	@
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 152


 4777 001e 80BC     		pop	{r7}	@
 4778              		.cfi_restore 7
 4779              		.cfi_def_cfa_offset 0
 4780 0020 7047     		bx	lr	@
 4781              	.L354:
 4782 0022 00BF     		.align	2
 4783              	.L353:
 4784 0024 00000000 		.word	pxCurrentTCB
 4785              		.cfi_endproc
 4786              	.LFE45:
 4787              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4788              		.text
 4789              	.Letext0:
 4790              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\lib\\gcc\\arm-none-eabi\\5.4
 4791              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mach
 4792              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys\
 4793              		.file 6 "FreeRTOS/include/projdefs.h"
 4794              		.file 7 "FreeRTOS/include/list.h"
 4795              		.file 8 "FreeRTOS/include/task.h"
 4796              		.section	.debug_info,"",%progbits
 4797              	.Ldebug_info0:
 4798 0000 4F120000 		.4byte	0x124f
 4799 0004 0400     		.2byte	0x4
 4800 0006 00000000 		.4byte	.Ldebug_abbrev0
 4801 000a 04       		.byte	0x4
 4802 000b 01       		.uleb128 0x1
 4803 000c 39960000 		.4byte	.LASF1306
 4804 0010 01       		.byte	0x1
 4805 0011 26710000 		.4byte	.LASF1307
 4806 0015 DA130000 		.4byte	.LASF1308
 4807 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4808 001d 00000000 		.4byte	0
 4809 0021 00000000 		.4byte	.Ldebug_line0
 4810 0025 00000000 		.4byte	.Ldebug_macro0
 4811 0029 02       		.uleb128 0x2
 4812 002a 03010000 		.4byte	.LASF1118
 4813 002e 03       		.byte	0x3
 4814 002f D8       		.byte	0xd8
 4815 0030 34000000 		.4byte	0x34
 4816 0034 03       		.uleb128 0x3
 4817 0035 04       		.byte	0x4
 4818 0036 07       		.byte	0x7
 4819 0037 71550000 		.4byte	.LASF1116
 4820 003b 04       		.uleb128 0x4
 4821 003c 04       		.byte	0x4
 4822 003d 05       		.byte	0x5
 4823 003e 696E7400 		.ascii	"int\000"
 4824 0042 03       		.uleb128 0x3
 4825 0043 01       		.byte	0x1
 4826 0044 06       		.byte	0x6
 4827 0045 94040000 		.4byte	.LASF1117
 4828 0049 02       		.uleb128 0x2
 4829 004a 35110000 		.4byte	.LASF1119
 4830 004e 04       		.byte	0x4
 4831 004f 1D       		.byte	0x1d
 4832 0050 54000000 		.4byte	0x54
 4833 0054 03       		.uleb128 0x3
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 153


 4834 0055 01       		.byte	0x1
 4835 0056 08       		.byte	0x8
 4836 0057 C0000000 		.4byte	.LASF1120
 4837 005b 03       		.uleb128 0x3
 4838 005c 02       		.byte	0x2
 4839 005d 05       		.byte	0x5
 4840 005e 54570000 		.4byte	.LASF1121
 4841 0062 02       		.uleb128 0x2
 4842 0063 392B0000 		.4byte	.LASF1122
 4843 0067 04       		.byte	0x4
 4844 0068 2B       		.byte	0x2b
 4845 0069 6D000000 		.4byte	0x6d
 4846 006d 03       		.uleb128 0x3
 4847 006e 02       		.byte	0x2
 4848 006f 07       		.byte	0x7
 4849 0070 24180000 		.4byte	.LASF1123
 4850 0074 03       		.uleb128 0x3
 4851 0075 04       		.byte	0x4
 4852 0076 05       		.byte	0x5
 4853 0077 305E0000 		.4byte	.LASF1124
 4854 007b 02       		.uleb128 0x2
 4855 007c BD400000 		.4byte	.LASF1125
 4856 0080 04       		.byte	0x4
 4857 0081 41       		.byte	0x41
 4858 0082 86000000 		.4byte	0x86
 4859 0086 03       		.uleb128 0x3
 4860 0087 04       		.byte	0x4
 4861 0088 07       		.byte	0x7
 4862 0089 DD6C0000 		.4byte	.LASF1126
 4863 008d 03       		.uleb128 0x3
 4864 008e 08       		.byte	0x8
 4865 008f 05       		.byte	0x5
 4866 0090 4F4D0000 		.4byte	.LASF1127
 4867 0094 03       		.uleb128 0x3
 4868 0095 08       		.byte	0x8
 4869 0096 07       		.byte	0x7
 4870 0097 816A0000 		.4byte	.LASF1128
 4871 009b 03       		.uleb128 0x3
 4872 009c 04       		.byte	0x4
 4873 009d 07       		.byte	0x7
 4874 009e B4010000 		.4byte	.LASF1129
 4875 00a2 05       		.uleb128 0x5
 4876 00a3 04       		.byte	0x4
 4877 00a4 03       		.uleb128 0x3
 4878 00a5 01       		.byte	0x1
 4879 00a6 08       		.byte	0x8
 4880 00a7 7A620000 		.4byte	.LASF718
 4881 00ab 06       		.uleb128 0x6
 4882 00ac 04       		.byte	0x4
 4883 00ad B1000000 		.4byte	0xb1
 4884 00b1 07       		.uleb128 0x7
 4885 00b2 A4000000 		.4byte	0xa4
 4886 00b6 02       		.uleb128 0x2
 4887 00b7 AB1C0000 		.4byte	.LASF1130
 4888 00bb 05       		.byte	0x5
 4889 00bc 18       		.byte	0x18
 4890 00bd 49000000 		.4byte	0x49
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 154


 4891 00c1 02       		.uleb128 0x2
 4892 00c2 886B0000 		.4byte	.LASF1131
 4893 00c6 05       		.byte	0x5
 4894 00c7 24       		.byte	0x24
 4895 00c8 62000000 		.4byte	0x62
 4896 00cc 02       		.uleb128 0x2
 4897 00cd 91900000 		.4byte	.LASF1132
 4898 00d1 05       		.byte	0x5
 4899 00d2 30       		.byte	0x30
 4900 00d3 7B000000 		.4byte	0x7b
 4901 00d7 02       		.uleb128 0x2
 4902 00d8 30150000 		.4byte	.LASF1133
 4903 00dc 06       		.byte	0x6
 4904 00dd 49       		.byte	0x49
 4905 00de E2000000 		.4byte	0xe2
 4906 00e2 06       		.uleb128 0x6
 4907 00e3 04       		.byte	0x4
 4908 00e4 E8000000 		.4byte	0xe8
 4909 00e8 08       		.uleb128 0x8
 4910 00e9 F3000000 		.4byte	0xf3
 4911 00ed 09       		.uleb128 0x9
 4912 00ee A2000000 		.4byte	0xa2
 4913 00f2 00       		.byte	0
 4914 00f3 02       		.uleb128 0x2
 4915 00f4 4D950000 		.4byte	.LASF1134
 4916 00f8 02       		.byte	0x2
 4917 00f9 5E       		.byte	0x5e
 4918 00fa CC000000 		.4byte	0xcc
 4919 00fe 02       		.uleb128 0x2
 4920 00ff C13E0000 		.4byte	.LASF1135
 4921 0103 02       		.byte	0x2
 4922 0104 60       		.byte	0x60
 4923 0105 74000000 		.4byte	0x74
 4924 0109 02       		.uleb128 0x2
 4925 010a D5330000 		.4byte	.LASF1136
 4926 010e 02       		.byte	0x2
 4927 010f 62       		.byte	0x62
 4928 0110 86000000 		.4byte	0x86
 4929 0114 02       		.uleb128 0x2
 4930 0115 37710000 		.4byte	.LASF1137
 4931 0119 02       		.byte	0x2
 4932 011a 68       		.byte	0x68
 4933 011b CC000000 		.4byte	0xcc
 4934 011f 02       		.uleb128 0x2
 4935 0120 FF880000 		.4byte	.LASF1138
 4936 0124 02       		.byte	0x2
 4937 0125 69       		.byte	0x69
 4938 0126 CC000000 		.4byte	0xcc
 4939 012a 06       		.uleb128 0x6
 4940 012b 04       		.byte	0x4
 4941 012c B6000000 		.4byte	0xb6
 4942 0130 0A       		.uleb128 0xa
 4943 0131 26510000 		.4byte	.LASF1145
 4944 0135 14       		.byte	0x14
 4945 0136 07       		.byte	0x7
 4946 0137 88       		.byte	0x88
 4947 0138 79010000 		.4byte	0x179
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 155


 4948 013c 0B       		.uleb128 0xb
 4949 013d BB9E0000 		.4byte	.LASF1139
 4950 0141 07       		.byte	0x7
 4951 0142 8A       		.byte	0x8a
 4952 0143 1F010000 		.4byte	0x11f
 4953 0147 00       		.byte	0
 4954 0148 0B       		.uleb128 0xb
 4955 0149 220F0000 		.4byte	.LASF1140
 4956 014d 07       		.byte	0x7
 4957 014e 8B       		.byte	0x8b
 4958 014f 79010000 		.4byte	0x179
 4959 0153 04       		.byte	0x4
 4960 0154 0B       		.uleb128 0xb
 4961 0155 B06F0000 		.4byte	.LASF1141
 4962 0159 07       		.byte	0x7
 4963 015a 8C       		.byte	0x8c
 4964 015b 79010000 		.4byte	0x179
 4965 015f 08       		.byte	0x8
 4966 0160 0B       		.uleb128 0xb
 4967 0161 314C0000 		.4byte	.LASF1142
 4968 0165 07       		.byte	0x7
 4969 0166 8D       		.byte	0x8d
 4970 0167 A2000000 		.4byte	0xa2
 4971 016b 0C       		.byte	0xc
 4972 016c 0B       		.uleb128 0xb
 4973 016d 6F2E0000 		.4byte	.LASF1143
 4974 0171 07       		.byte	0x7
 4975 0172 8E       		.byte	0x8e
 4976 0173 A2000000 		.4byte	0xa2
 4977 0177 10       		.byte	0x10
 4978 0178 00       		.byte	0
 4979 0179 06       		.uleb128 0x6
 4980 017a 04       		.byte	0x4
 4981 017b 30010000 		.4byte	0x130
 4982 017f 02       		.uleb128 0x2
 4983 0180 F4880000 		.4byte	.LASF1144
 4984 0184 07       		.byte	0x7
 4985 0185 90       		.byte	0x90
 4986 0186 30010000 		.4byte	0x130
 4987 018a 0A       		.uleb128 0xa
 4988 018b 30290000 		.4byte	.LASF1146
 4989 018f 0C       		.byte	0xc
 4990 0190 07       		.byte	0x7
 4991 0191 92       		.byte	0x92
 4992 0192 BB010000 		.4byte	0x1bb
 4993 0196 0B       		.uleb128 0xb
 4994 0197 BB9E0000 		.4byte	.LASF1139
 4995 019b 07       		.byte	0x7
 4996 019c 94       		.byte	0x94
 4997 019d 1F010000 		.4byte	0x11f
 4998 01a1 00       		.byte	0
 4999 01a2 0B       		.uleb128 0xb
 5000 01a3 220F0000 		.4byte	.LASF1140
 5001 01a7 07       		.byte	0x7
 5002 01a8 95       		.byte	0x95
 5003 01a9 79010000 		.4byte	0x179
 5004 01ad 04       		.byte	0x4
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 156


 5005 01ae 0B       		.uleb128 0xb
 5006 01af B06F0000 		.4byte	.LASF1141
 5007 01b3 07       		.byte	0x7
 5008 01b4 96       		.byte	0x96
 5009 01b5 79010000 		.4byte	0x179
 5010 01b9 08       		.byte	0x8
 5011 01ba 00       		.byte	0
 5012 01bb 02       		.uleb128 0x2
 5013 01bc 5E420000 		.4byte	.LASF1147
 5014 01c0 07       		.byte	0x7
 5015 01c1 98       		.byte	0x98
 5016 01c2 8A010000 		.4byte	0x18a
 5017 01c6 0A       		.uleb128 0xa
 5018 01c7 CA7C0000 		.4byte	.LASF1148
 5019 01cb 14       		.byte	0x14
 5020 01cc 07       		.byte	0x7
 5021 01cd 9D       		.byte	0x9d
 5022 01ce F7010000 		.4byte	0x1f7
 5023 01d2 0B       		.uleb128 0xb
 5024 01d3 AA570000 		.4byte	.LASF1149
 5025 01d7 07       		.byte	0x7
 5026 01d8 9F       		.byte	0x9f
 5027 01d9 09010000 		.4byte	0x109
 5028 01dd 00       		.byte	0
 5029 01de 0B       		.uleb128 0xb
 5030 01df AC250000 		.4byte	.LASF1150
 5031 01e3 07       		.byte	0x7
 5032 01e4 A0       		.byte	0xa0
 5033 01e5 F7010000 		.4byte	0x1f7
 5034 01e9 04       		.byte	0x4
 5035 01ea 0B       		.uleb128 0xb
 5036 01eb 5C600000 		.4byte	.LASF1151
 5037 01ef 07       		.byte	0x7
 5038 01f0 A1       		.byte	0xa1
 5039 01f1 BB010000 		.4byte	0x1bb
 5040 01f5 08       		.byte	0x8
 5041 01f6 00       		.byte	0
 5042 01f7 06       		.uleb128 0x6
 5043 01f8 04       		.byte	0x4
 5044 01f9 7F010000 		.4byte	0x17f
 5045 01fd 02       		.uleb128 0x2
 5046 01fe 535D0000 		.4byte	.LASF1152
 5047 0202 07       		.byte	0x7
 5048 0203 A2       		.byte	0xa2
 5049 0204 C6010000 		.4byte	0x1c6
 5050 0208 02       		.uleb128 0x2
 5051 0209 295A0000 		.4byte	.LASF1153
 5052 020d 08       		.byte	0x8
 5053 020e 63       		.byte	0x63
 5054 020f A2000000 		.4byte	0xa2
 5055 0213 0C       		.uleb128 0xc
 5056 0214 01       		.byte	0x1
 5057 0215 54000000 		.4byte	0x54
 5058 0219 08       		.byte	0x8
 5059 021a 6D       		.byte	0x6d
 5060 021b 3E020000 		.4byte	0x23e
 5061 021f 0D       		.uleb128 0xd
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 157


 5062 0220 BD530000 		.4byte	.LASF1154
 5063 0224 00       		.byte	0
 5064 0225 0D       		.uleb128 0xd
 5065 0226 223F0000 		.4byte	.LASF1155
 5066 022a 01       		.byte	0x1
 5067 022b 0D       		.uleb128 0xd
 5068 022c 3A610000 		.4byte	.LASF1156
 5069 0230 02       		.byte	0x2
 5070 0231 0D       		.uleb128 0xd
 5071 0232 A01C0000 		.4byte	.LASF1157
 5072 0236 03       		.byte	0x3
 5073 0237 0D       		.uleb128 0xd
 5074 0238 7E080000 		.4byte	.LASF1158
 5075 023c 04       		.byte	0x4
 5076 023d 00       		.byte	0
 5077 023e 02       		.uleb128 0x2
 5078 023f DF040000 		.4byte	.LASF1159
 5079 0243 08       		.byte	0x8
 5080 0244 73       		.byte	0x73
 5081 0245 13020000 		.4byte	0x213
 5082 0249 0A       		.uleb128 0xa
 5083 024a C7060000 		.4byte	.LASF1160
 5084 024e 08       		.byte	0x8
 5085 024f 08       		.byte	0x8
 5086 0250 78       		.byte	0x78
 5087 0251 6E020000 		.4byte	0x26e
 5088 0255 0B       		.uleb128 0xb
 5089 0256 AE3D0000 		.4byte	.LASF1161
 5090 025a 08       		.byte	0x8
 5091 025b 7A       		.byte	0x7a
 5092 025c FE000000 		.4byte	0xfe
 5093 0260 00       		.byte	0
 5094 0261 0B       		.uleb128 0xb
 5095 0262 65240000 		.4byte	.LASF1162
 5096 0266 08       		.byte	0x8
 5097 0267 7B       		.byte	0x7b
 5098 0268 1F010000 		.4byte	0x11f
 5099 026c 04       		.byte	0x4
 5100 026d 00       		.byte	0
 5101 026e 02       		.uleb128 0x2
 5102 026f 442C0000 		.4byte	.LASF1163
 5103 0273 08       		.byte	0x8
 5104 0274 7C       		.byte	0x7c
 5105 0275 49020000 		.4byte	0x249
 5106 0279 0A       		.uleb128 0xa
 5107 027a 7A850000 		.4byte	.LASF1164
 5108 027e 0C       		.byte	0xc
 5109 027f 08       		.byte	0x8
 5110 0280 81       		.byte	0x81
 5111 0281 AA020000 		.4byte	0x2aa
 5112 0285 0B       		.uleb128 0xb
 5113 0286 474B0000 		.4byte	.LASF1165
 5114 028a 08       		.byte	0x8
 5115 028b 83       		.byte	0x83
 5116 028c A2000000 		.4byte	0xa2
 5117 0290 00       		.byte	0
 5118 0291 0B       		.uleb128 0xb
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 158


 5119 0292 68520000 		.4byte	.LASF1166
 5120 0296 08       		.byte	0x8
 5121 0297 84       		.byte	0x84
 5122 0298 CC000000 		.4byte	0xcc
 5123 029c 04       		.byte	0x4
 5124 029d 0B       		.uleb128 0xb
 5125 029e 2C990000 		.4byte	.LASF1167
 5126 02a2 08       		.byte	0x8
 5127 02a3 85       		.byte	0x85
 5128 02a4 CC000000 		.4byte	0xcc
 5129 02a8 08       		.byte	0x8
 5130 02a9 00       		.byte	0
 5131 02aa 02       		.uleb128 0x2
 5132 02ab 1F040000 		.4byte	.LASF1168
 5133 02af 08       		.byte	0x8
 5134 02b0 86       		.byte	0x86
 5135 02b1 79020000 		.4byte	0x279
 5136 02b5 07       		.uleb128 0x7
 5137 02b6 AB000000 		.4byte	0xab
 5138 02ba 06       		.uleb128 0x6
 5139 02bb 04       		.byte	0x4
 5140 02bc F3000000 		.4byte	0xf3
 5141 02c0 0A       		.uleb128 0xa
 5142 02c1 C8410000 		.4byte	.LASF1169
 5143 02c5 20       		.byte	0x20
 5144 02c6 08       		.byte	0x8
 5145 02c7 98       		.byte	0x98
 5146 02c8 2D030000 		.4byte	0x32d
 5147 02cc 0B       		.uleb128 0xb
 5148 02cd C8090000 		.4byte	.LASF1170
 5149 02d1 08       		.byte	0x8
 5150 02d2 9A       		.byte	0x9a
 5151 02d3 08020000 		.4byte	0x208
 5152 02d7 00       		.byte	0
 5153 02d8 0B       		.uleb128 0xb
 5154 02d9 BF650000 		.4byte	.LASF1171
 5155 02dd 08       		.byte	0x8
 5156 02de 9B       		.byte	0x9b
 5157 02df AB000000 		.4byte	0xab
 5158 02e3 04       		.byte	0x4
 5159 02e4 0B       		.uleb128 0xb
 5160 02e5 34640000 		.4byte	.LASF1172
 5161 02e9 08       		.byte	0x8
 5162 02ea 9C       		.byte	0x9c
 5163 02eb 09010000 		.4byte	0x109
 5164 02ef 08       		.byte	0x8
 5165 02f0 0B       		.uleb128 0xb
 5166 02f1 A1780000 		.4byte	.LASF1173
 5167 02f5 08       		.byte	0x8
 5168 02f6 9D       		.byte	0x9d
 5169 02f7 3E020000 		.4byte	0x23e
 5170 02fb 0C       		.byte	0xc
 5171 02fc 0B       		.uleb128 0xb
 5172 02fd C5120000 		.4byte	.LASF1174
 5173 0301 08       		.byte	0x8
 5174 0302 9E       		.byte	0x9e
 5175 0303 09010000 		.4byte	0x109
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 159


 5176 0307 10       		.byte	0x10
 5177 0308 0B       		.uleb128 0xb
 5178 0309 5C110000 		.4byte	.LASF1175
 5179 030d 08       		.byte	0x8
 5180 030e 9F       		.byte	0x9f
 5181 030f 09010000 		.4byte	0x109
 5182 0313 14       		.byte	0x14
 5183 0314 0B       		.uleb128 0xb
 5184 0315 C9160000 		.4byte	.LASF1176
 5185 0319 08       		.byte	0x8
 5186 031a A0       		.byte	0xa0
 5187 031b CC000000 		.4byte	0xcc
 5188 031f 18       		.byte	0x18
 5189 0320 0B       		.uleb128 0xb
 5190 0321 65620000 		.4byte	.LASF1177
 5191 0325 08       		.byte	0x8
 5192 0326 A1       		.byte	0xa1
 5193 0327 C1000000 		.4byte	0xc1
 5194 032b 1C       		.byte	0x1c
 5195 032c 00       		.byte	0
 5196 032d 02       		.uleb128 0x2
 5197 032e F70D0000 		.4byte	.LASF1178
 5198 0332 08       		.byte	0x8
 5199 0333 A2       		.byte	0xa2
 5200 0334 C0020000 		.4byte	0x2c0
 5201 0338 0A       		.uleb128 0xa
 5202 0339 85670000 		.4byte	.LASF1179
 5203 033d 50       		.byte	0x50
 5204 033e 01       		.byte	0x1
 5205 033f 78       		.byte	0x78
 5206 0340 BD030000 		.4byte	0x3bd
 5207 0344 0B       		.uleb128 0xb
 5208 0345 B4250000 		.4byte	.LASF1180
 5209 0349 01       		.byte	0x1
 5210 034a 7A       		.byte	0x7a
 5211 034b BD030000 		.4byte	0x3bd
 5212 034f 00       		.byte	0
 5213 0350 0B       		.uleb128 0xb
 5214 0351 5D930000 		.4byte	.LASF1181
 5215 0355 01       		.byte	0x1
 5216 0356 80       		.byte	0x80
 5217 0357 7F010000 		.4byte	0x17f
 5218 035b 04       		.byte	0x4
 5219 035c 0B       		.uleb128 0xb
 5220 035d 85040000 		.4byte	.LASF1182
 5221 0361 01       		.byte	0x1
 5222 0362 81       		.byte	0x81
 5223 0363 7F010000 		.4byte	0x17f
 5224 0367 18       		.byte	0x18
 5225 0368 0B       		.uleb128 0xb
 5226 0369 F39E0000 		.4byte	.LASF1183
 5227 036d 01       		.byte	0x1
 5228 036e 82       		.byte	0x82
 5229 036f 09010000 		.4byte	0x109
 5230 0373 2C       		.byte	0x2c
 5231 0374 0B       		.uleb128 0xb
 5232 0375 E3080000 		.4byte	.LASF1184
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 160


 5233 0379 01       		.byte	0x1
 5234 037a 83       		.byte	0x83
 5235 037b BA020000 		.4byte	0x2ba
 5236 037f 30       		.byte	0x30
 5237 0380 0B       		.uleb128 0xb
 5238 0381 BF650000 		.4byte	.LASF1171
 5239 0385 01       		.byte	0x1
 5240 0386 84       		.byte	0x84
 5241 0387 C8030000 		.4byte	0x3c8
 5242 038b 34       		.byte	0x34
 5243 038c 0B       		.uleb128 0xb
 5244 038d 918B0000 		.4byte	.LASF1185
 5245 0391 01       		.byte	0x1
 5246 0392 8F       		.byte	0x8f
 5247 0393 09010000 		.4byte	0x109
 5248 0397 40       		.byte	0x40
 5249 0398 0B       		.uleb128 0xb
 5250 0399 71070000 		.4byte	.LASF1186
 5251 039d 01       		.byte	0x1
 5252 039e 90       		.byte	0x90
 5253 039f 09010000 		.4byte	0x109
 5254 03a3 44       		.byte	0x44
 5255 03a4 0B       		.uleb128 0xb
 5256 03a5 5C110000 		.4byte	.LASF1175
 5257 03a9 01       		.byte	0x1
 5258 03aa 94       		.byte	0x94
 5259 03ab 09010000 		.4byte	0x109
 5260 03af 48       		.byte	0x48
 5261 03b0 0B       		.uleb128 0xb
 5262 03b1 11590000 		.4byte	.LASF1187
 5263 03b5 01       		.byte	0x1
 5264 03b6 95       		.byte	0x95
 5265 03b7 09010000 		.4byte	0x109
 5266 03bb 4C       		.byte	0x4c
 5267 03bc 00       		.byte	0
 5268 03bd 06       		.uleb128 0x6
 5269 03be 04       		.byte	0x4
 5270 03bf C3030000 		.4byte	0x3c3
 5271 03c3 0E       		.uleb128 0xe
 5272 03c4 F3000000 		.4byte	0xf3
 5273 03c8 0F       		.uleb128 0xf
 5274 03c9 A4000000 		.4byte	0xa4
 5275 03cd D8030000 		.4byte	0x3d8
 5276 03d1 10       		.uleb128 0x10
 5277 03d2 9B000000 		.4byte	0x9b
 5278 03d6 0B       		.byte	0xb
 5279 03d7 00       		.byte	0
 5280 03d8 02       		.uleb128 0x2
 5281 03d9 A7110000 		.4byte	.LASF1188
 5282 03dd 01       		.byte	0x1
 5283 03de AB       		.byte	0xab
 5284 03df 38030000 		.4byte	0x338
 5285 03e3 02       		.uleb128 0x2
 5286 03e4 A88B0000 		.4byte	.LASF1189
 5287 03e8 01       		.byte	0x1
 5288 03e9 AF       		.byte	0xaf
 5289 03ea D8030000 		.4byte	0x3d8
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 161


 5290 03ee 11       		.uleb128 0x11
 5291 03ef 4F340000 		.4byte	.LASF1309
 5292 03f3 02       		.byte	0x2
 5293 03f4 A1       		.byte	0xa1
 5294 03f5 B6000000 		.4byte	0xb6
 5295 03f9 03       		.byte	0x3
 5296 03fa 15040000 		.4byte	0x415
 5297 03fe 12       		.uleb128 0x12
 5298 03ff 53940000 		.4byte	.LASF1310
 5299 0403 02       		.byte	0x2
 5300 0404 A1       		.byte	0xa1
 5301 0405 CC000000 		.4byte	0xcc
 5302 0409 13       		.uleb128 0x13
 5303 040a B43F0000 		.4byte	.LASF1311
 5304 040e 02       		.byte	0x2
 5305 040f A3       		.byte	0xa3
 5306 0410 B6000000 		.4byte	0xb6
 5307 0414 00       		.byte	0
 5308 0415 14       		.uleb128 0x14
 5309 0416 2E790000 		.4byte	.LASF1211
 5310 041a 01       		.byte	0x1
 5311 041b 0402     		.2byte	0x204
 5312 041d FE000000 		.4byte	0xfe
 5313 0421 00000000 		.4byte	.LFB1
 5314 0425 64010000 		.4byte	.LFE1-.LFB1
 5315 0429 01       		.uleb128 0x1
 5316 042a 9C       		.byte	0x9c
 5317 042b DF040000 		.4byte	0x4df
 5318 042f 15       		.uleb128 0x15
 5319 0430 F9280000 		.4byte	.LASF1190
 5320 0434 01       		.byte	0x1
 5321 0435 0402     		.2byte	0x204
 5322 0437 D7000000 		.4byte	0xd7
 5323 043b 02       		.uleb128 0x2
 5324 043c 91       		.byte	0x91
 5325 043d 64       		.sleb128 -28
 5326 043e 15       		.uleb128 0x15
 5327 043f C91A0000 		.4byte	.LASF1191
 5328 0443 01       		.byte	0x1
 5329 0444 0402     		.2byte	0x204
 5330 0446 B5020000 		.4byte	0x2b5
 5331 044a 02       		.uleb128 0x2
 5332 044b 91       		.byte	0x91
 5333 044c 60       		.sleb128 -32
 5334 044d 15       		.uleb128 0x15
 5335 044e A1020000 		.4byte	.LASF1192
 5336 0452 01       		.byte	0x1
 5337 0453 0402     		.2byte	0x204
 5338 0455 DF040000 		.4byte	0x4df
 5339 0459 02       		.uleb128 0x2
 5340 045a 91       		.byte	0x91
 5341 045b 5E       		.sleb128 -34
 5342 045c 15       		.uleb128 0x15
 5343 045d 308E0000 		.4byte	.LASF1193
 5344 0461 01       		.byte	0x1
 5345 0462 0402     		.2byte	0x204
 5346 0464 E4040000 		.4byte	0x4e4
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 162


 5347 0468 02       		.uleb128 0x2
 5348 0469 91       		.byte	0x91
 5349 046a 58       		.sleb128 -40
 5350 046b 15       		.uleb128 0x15
 5351 046c F39E0000 		.4byte	.LASF1183
 5352 0470 01       		.byte	0x1
 5353 0471 0402     		.2byte	0x204
 5354 0473 09010000 		.4byte	0x109
 5355 0477 02       		.uleb128 0x2
 5356 0478 91       		.byte	0x91
 5357 0479 00       		.sleb128 0
 5358 047a 15       		.uleb128 0x15
 5359 047b 22390000 		.4byte	.LASF1194
 5360 047f 01       		.byte	0x1
 5361 0480 0402     		.2byte	0x204
 5362 0482 EF040000 		.4byte	0x4ef
 5363 0486 02       		.uleb128 0x2
 5364 0487 91       		.byte	0x91
 5365 0488 04       		.sleb128 4
 5366 0489 15       		.uleb128 0x15
 5367 048a 1F790000 		.4byte	.LASF1195
 5368 048e 01       		.byte	0x1
 5369 048f 0402     		.2byte	0x204
 5370 0491 F4040000 		.4byte	0x4f4
 5371 0495 02       		.uleb128 0x2
 5372 0496 91       		.byte	0x91
 5373 0497 08       		.sleb128 8
 5374 0498 15       		.uleb128 0x15
 5375 0499 0C910000 		.4byte	.LASF1196
 5376 049d 01       		.byte	0x1
 5377 049e 0402     		.2byte	0x204
 5378 04a0 04050000 		.4byte	0x504
 5379 04a4 02       		.uleb128 0x2
 5380 04a5 91       		.byte	0x91
 5381 04a6 0C       		.sleb128 12
 5382 04a7 16       		.uleb128 0x16
 5383 04a8 27210000 		.4byte	.LASF1197
 5384 04ac 01       		.byte	0x1
 5385 04ad 0602     		.2byte	0x206
 5386 04af FE000000 		.4byte	0xfe
 5387 04b3 02       		.uleb128 0x2
 5388 04b4 91       		.byte	0x91
 5389 04b5 74       		.sleb128 -12
 5390 04b6 16       		.uleb128 0x16
 5391 04b7 DD0F0000 		.4byte	.LASF1198
 5392 04bb 01       		.byte	0x1
 5393 04bc 0702     		.2byte	0x207
 5394 04be 09050000 		.4byte	0x509
 5395 04c2 02       		.uleb128 0x2
 5396 04c3 91       		.byte	0x91
 5397 04c4 70       		.sleb128 -16
 5398 04c5 17       		.uleb128 0x17
 5399 04c6 3A000000 		.4byte	.LBB6
 5400 04ca E2000000 		.4byte	.LBE6-.LBB6
 5401 04ce 16       		.uleb128 0x16
 5402 04cf B4250000 		.4byte	.LASF1180
 5403 04d3 01       		.byte	0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 163


 5404 04d4 1202     		.2byte	0x212
 5405 04d6 BA020000 		.4byte	0x2ba
 5406 04da 02       		.uleb128 0x2
 5407 04db 91       		.byte	0x91
 5408 04dc 6C       		.sleb128 -20
 5409 04dd 00       		.byte	0
 5410 04de 00       		.byte	0
 5411 04df 07       		.uleb128 0x7
 5412 04e0 C1000000 		.4byte	0xc1
 5413 04e4 07       		.uleb128 0x7
 5414 04e5 A2000000 		.4byte	0xa2
 5415 04e9 06       		.uleb128 0x6
 5416 04ea 04       		.byte	0x4
 5417 04eb 08020000 		.4byte	0x208
 5418 04ef 07       		.uleb128 0x7
 5419 04f0 E9040000 		.4byte	0x4e9
 5420 04f4 07       		.uleb128 0x7
 5421 04f5 BA020000 		.4byte	0x2ba
 5422 04f9 06       		.uleb128 0x6
 5423 04fa 04       		.byte	0x4
 5424 04fb FF040000 		.4byte	0x4ff
 5425 04ff 07       		.uleb128 0x7
 5426 0500 AA020000 		.4byte	0x2aa
 5427 0504 07       		.uleb128 0x7
 5428 0505 F9040000 		.4byte	0x4f9
 5429 0509 06       		.uleb128 0x6
 5430 050a 04       		.byte	0x4
 5431 050b E3030000 		.4byte	0x3e3
 5432 050f 18       		.uleb128 0x18
 5433 0510 322E0000 		.4byte	.LASF1201
 5434 0514 01       		.byte	0x1
 5435 0515 B802     		.2byte	0x2b8
 5436 0517 00000000 		.4byte	.LFB2
 5437 051b E8000000 		.4byte	.LFE2-.LFB2
 5438 051f 01       		.uleb128 0x1
 5439 0520 9C       		.byte	0x9c
 5440 0521 44050000 		.4byte	0x544
 5441 0525 15       		.uleb128 0x15
 5442 0526 98940000 		.4byte	.LASF1199
 5443 052a 01       		.byte	0x1
 5444 052b B802     		.2byte	0x2b8
 5445 052d 08020000 		.4byte	0x208
 5446 0531 02       		.uleb128 0x2
 5447 0532 91       		.byte	0x91
 5448 0533 6C       		.sleb128 -20
 5449 0534 16       		.uleb128 0x16
 5450 0535 DA9E0000 		.4byte	.LASF1200
 5451 0539 01       		.byte	0x1
 5452 053a BA02     		.2byte	0x2ba
 5453 053c 09050000 		.4byte	0x509
 5454 0540 02       		.uleb128 0x2
 5455 0541 91       		.byte	0x91
 5456 0542 74       		.sleb128 -12
 5457 0543 00       		.byte	0
 5458 0544 18       		.uleb128 0x18
 5459 0545 21700000 		.4byte	.LASF1202
 5460 0549 01       		.byte	0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 164


 5461 054a 0A03     		.2byte	0x30a
 5462 054c 00000000 		.4byte	.LFB3
 5463 0550 E4000000 		.4byte	.LFE3-.LFB3
 5464 0554 01       		.uleb128 0x1
 5465 0555 9C       		.byte	0x9c
 5466 0556 BF050000 		.4byte	0x5bf
 5467 055a 15       		.uleb128 0x15
 5468 055b 3A730000 		.4byte	.LASF1203
 5469 055f 01       		.byte	0x1
 5470 0560 0A03     		.2byte	0x30a
 5471 0562 C5050000 		.4byte	0x5c5
 5472 0566 02       		.uleb128 0x2
 5473 0567 91       		.byte	0x91
 5474 0568 64       		.sleb128 -28
 5475 0569 15       		.uleb128 0x15
 5476 056a 99670000 		.4byte	.LASF1204
 5477 056e 01       		.byte	0x1
 5478 056f 0A03     		.2byte	0x30a
 5479 0571 CA050000 		.4byte	0x5ca
 5480 0575 02       		.uleb128 0x2
 5481 0576 91       		.byte	0x91
 5482 0577 60       		.sleb128 -32
 5483 0578 16       		.uleb128 0x16
 5484 0579 24550000 		.4byte	.LASF1205
 5485 057d 01       		.byte	0x1
 5486 057e 0C03     		.2byte	0x30c
 5487 0580 1F010000 		.4byte	0x11f
 5488 0584 02       		.uleb128 0x2
 5489 0585 91       		.byte	0x91
 5490 0586 6C       		.sleb128 -20
 5491 0587 16       		.uleb128 0x16
 5492 0588 00760000 		.4byte	.LASF1206
 5493 058c 01       		.byte	0x1
 5494 058d 0D03     		.2byte	0x30d
 5495 058f FE000000 		.4byte	0xfe
 5496 0593 02       		.uleb128 0x2
 5497 0594 91       		.byte	0x91
 5498 0595 68       		.sleb128 -24
 5499 0596 16       		.uleb128 0x16
 5500 0597 AC620000 		.4byte	.LASF1207
 5501 059b 01       		.byte	0x1
 5502 059c 0D03     		.2byte	0x30d
 5503 059e FE000000 		.4byte	0xfe
 5504 05a2 02       		.uleb128 0x2
 5505 05a3 91       		.byte	0x91
 5506 05a4 74       		.sleb128 -12
 5507 05a5 17       		.uleb128 0x17
 5508 05a6 38000000 		.4byte	.LBB7
 5509 05aa 84000000 		.4byte	.LBE7-.LBB7
 5510 05ae 16       		.uleb128 0x16
 5511 05af D3600000 		.4byte	.LASF1208
 5512 05b3 01       		.byte	0x1
 5513 05b4 1703     		.2byte	0x317
 5514 05b6 CA050000 		.4byte	0x5ca
 5515 05ba 02       		.uleb128 0x2
 5516 05bb 91       		.byte	0x91
 5517 05bc 70       		.sleb128 -16
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 165


 5518 05bd 00       		.byte	0
 5519 05be 00       		.byte	0
 5520 05bf 06       		.uleb128 0x6
 5521 05c0 04       		.byte	0x4
 5522 05c1 1F010000 		.4byte	0x11f
 5523 05c5 07       		.uleb128 0x7
 5524 05c6 BF050000 		.4byte	0x5bf
 5525 05ca 07       		.uleb128 0x7
 5526 05cb 1F010000 		.4byte	0x11f
 5527 05cf 18       		.uleb128 0x18
 5528 05d0 E6670000 		.4byte	.LASF1209
 5529 05d4 01       		.byte	0x1
 5530 05d5 6A03     		.2byte	0x36a
 5531 05d7 00000000 		.4byte	.LFB4
 5532 05db 88000000 		.4byte	.LFE4-.LFB4
 5533 05df 01       		.uleb128 0x1
 5534 05e0 9C       		.byte	0x9c
 5535 05e1 13060000 		.4byte	0x613
 5536 05e5 15       		.uleb128 0x15
 5537 05e6 B78C0000 		.4byte	.LASF1210
 5538 05ea 01       		.byte	0x1
 5539 05eb 6A03     		.2byte	0x36a
 5540 05ed CA050000 		.4byte	0x5ca
 5541 05f1 02       		.uleb128 0x2
 5542 05f2 91       		.byte	0x91
 5543 05f3 6C       		.sleb128 -20
 5544 05f4 16       		.uleb128 0x16
 5545 05f5 24550000 		.4byte	.LASF1205
 5546 05f9 01       		.byte	0x1
 5547 05fa 6C03     		.2byte	0x36c
 5548 05fc 1F010000 		.4byte	0x11f
 5549 0600 02       		.uleb128 0x2
 5550 0601 91       		.byte	0x91
 5551 0602 70       		.sleb128 -16
 5552 0603 16       		.uleb128 0x16
 5553 0604 00760000 		.4byte	.LASF1206
 5554 0608 01       		.byte	0x1
 5555 0609 6D03     		.2byte	0x36d
 5556 060b FE000000 		.4byte	0xfe
 5557 060f 02       		.uleb128 0x2
 5558 0610 91       		.byte	0x91
 5559 0611 74       		.sleb128 -12
 5560 0612 00       		.byte	0
 5561 0613 14       		.uleb128 0x14
 5562 0614 53620000 		.4byte	.LASF1212
 5563 0618 01       		.byte	0x1
 5564 0619 F203     		.2byte	0x3f2
 5565 061b 09010000 		.4byte	0x109
 5566 061f 00000000 		.4byte	.LFB5
 5567 0623 34000000 		.4byte	.LFE5-.LFB5
 5568 0627 01       		.uleb128 0x1
 5569 0628 9C       		.byte	0x9c
 5570 0629 5B060000 		.4byte	0x65b
 5571 062d 15       		.uleb128 0x15
 5572 062e BB4A0000 		.4byte	.LASF1213
 5573 0632 01       		.byte	0x1
 5574 0633 F203     		.2byte	0x3f2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 166


 5575 0635 08020000 		.4byte	0x208
 5576 0639 02       		.uleb128 0x2
 5577 063a 91       		.byte	0x91
 5578 063b 6C       		.sleb128 -20
 5579 063c 16       		.uleb128 0x16
 5580 063d DA9E0000 		.4byte	.LASF1200
 5581 0641 01       		.byte	0x1
 5582 0642 F403     		.2byte	0x3f4
 5583 0644 09050000 		.4byte	0x509
 5584 0648 02       		.uleb128 0x2
 5585 0649 91       		.byte	0x91
 5586 064a 74       		.sleb128 -12
 5587 064b 16       		.uleb128 0x16
 5588 064c EC0E0000 		.4byte	.LASF1214
 5589 0650 01       		.byte	0x1
 5590 0651 F503     		.2byte	0x3f5
 5591 0653 09010000 		.4byte	0x109
 5592 0657 02       		.uleb128 0x2
 5593 0658 91       		.byte	0x91
 5594 0659 70       		.sleb128 -16
 5595 065a 00       		.byte	0
 5596 065b 18       		.uleb128 0x18
 5597 065c 1F7F0000 		.4byte	.LASF1215
 5598 0660 01       		.byte	0x1
 5599 0661 0804     		.2byte	0x408
 5600 0663 00000000 		.4byte	.LFB6
 5601 0667 3C010000 		.4byte	.LFE6-.LFB6
 5602 066b 01       		.uleb128 0x1
 5603 066c 9C       		.byte	0x9c
 5604 066d CC060000 		.4byte	0x6cc
 5605 0671 15       		.uleb128 0x15
 5606 0672 BB4A0000 		.4byte	.LASF1213
 5607 0676 01       		.byte	0x1
 5608 0677 0804     		.2byte	0x408
 5609 0679 08020000 		.4byte	0x208
 5610 067d 02       		.uleb128 0x2
 5611 067e 91       		.byte	0x91
 5612 067f 64       		.sleb128 -28
 5613 0680 15       		.uleb128 0x15
 5614 0681 9E6B0000 		.4byte	.LASF1216
 5615 0685 01       		.byte	0x1
 5616 0686 0804     		.2byte	0x408
 5617 0688 09010000 		.4byte	0x109
 5618 068c 02       		.uleb128 0x2
 5619 068d 91       		.byte	0x91
 5620 068e 60       		.sleb128 -32
 5621 068f 16       		.uleb128 0x16
 5622 0690 DA9E0000 		.4byte	.LASF1200
 5623 0694 01       		.byte	0x1
 5624 0695 0A04     		.2byte	0x40a
 5625 0697 09050000 		.4byte	0x509
 5626 069b 02       		.uleb128 0x2
 5627 069c 91       		.byte	0x91
 5628 069d 70       		.sleb128 -16
 5629 069e 16       		.uleb128 0x16
 5630 069f 138C0000 		.4byte	.LASF1217
 5631 06a3 01       		.byte	0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 167


 5632 06a4 0B04     		.2byte	0x40b
 5633 06a6 09010000 		.4byte	0x109
 5634 06aa 02       		.uleb128 0x2
 5635 06ab 91       		.byte	0x91
 5636 06ac 6C       		.sleb128 -20
 5637 06ad 16       		.uleb128 0x16
 5638 06ae 5B650000 		.4byte	.LASF1218
 5639 06b2 01       		.byte	0x1
 5640 06b3 0B04     		.2byte	0x40b
 5641 06b5 09010000 		.4byte	0x109
 5642 06b9 02       		.uleb128 0x2
 5643 06ba 91       		.byte	0x91
 5644 06bb 68       		.sleb128 -24
 5645 06bc 16       		.uleb128 0x16
 5646 06bd 224E0000 		.4byte	.LASF1219
 5647 06c1 01       		.byte	0x1
 5648 06c2 0C04     		.2byte	0x40c
 5649 06c4 FE000000 		.4byte	0xfe
 5650 06c8 02       		.uleb128 0x2
 5651 06c9 91       		.byte	0x91
 5652 06ca 74       		.sleb128 -12
 5653 06cb 00       		.byte	0
 5654 06cc 18       		.uleb128 0x18
 5655 06cd E1640000 		.4byte	.LASF1220
 5656 06d1 01       		.byte	0x1
 5657 06d2 AC04     		.2byte	0x4ac
 5658 06d4 00000000 		.4byte	.LFB7
 5659 06d8 F4000000 		.4byte	.LFE7-.LFB7
 5660 06dc 01       		.uleb128 0x1
 5661 06dd 9C       		.byte	0x9c
 5662 06de 01070000 		.4byte	0x701
 5663 06e2 15       		.uleb128 0x15
 5664 06e3 040E0000 		.4byte	.LASF1221
 5665 06e7 01       		.byte	0x1
 5666 06e8 AC04     		.2byte	0x4ac
 5667 06ea 08020000 		.4byte	0x208
 5668 06ee 02       		.uleb128 0x2
 5669 06ef 91       		.byte	0x91
 5670 06f0 6C       		.sleb128 -20
 5671 06f1 16       		.uleb128 0x16
 5672 06f2 DA9E0000 		.4byte	.LASF1200
 5673 06f6 01       		.byte	0x1
 5674 06f7 AE04     		.2byte	0x4ae
 5675 06f9 09050000 		.4byte	0x509
 5676 06fd 02       		.uleb128 0x2
 5677 06fe 91       		.byte	0x91
 5678 06ff 74       		.sleb128 -12
 5679 0700 00       		.byte	0
 5680 0701 19       		.uleb128 0x19
 5681 0702 89580000 		.4byte	.LASF1267
 5682 0706 01       		.byte	0x1
 5683 0707 0505     		.2byte	0x505
 5684 0709 FE000000 		.4byte	0xfe
 5685 070d 00000000 		.4byte	.LFB8
 5686 0711 64000000 		.4byte	.LFE8-.LFB8
 5687 0715 01       		.uleb128 0x1
 5688 0716 9C       		.byte	0x9c
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 168


 5689 0717 49070000 		.4byte	0x749
 5690 071b 15       		.uleb128 0x15
 5691 071c BB4A0000 		.4byte	.LASF1213
 5692 0720 01       		.byte	0x1
 5693 0721 0505     		.2byte	0x505
 5694 0723 49070000 		.4byte	0x749
 5695 0727 02       		.uleb128 0x2
 5696 0728 91       		.byte	0x91
 5697 0729 6C       		.sleb128 -20
 5698 072a 16       		.uleb128 0x16
 5699 072b 27210000 		.4byte	.LASF1197
 5700 072f 01       		.byte	0x1
 5701 0730 0705     		.2byte	0x507
 5702 0732 FE000000 		.4byte	0xfe
 5703 0736 02       		.uleb128 0x2
 5704 0737 91       		.byte	0x91
 5705 0738 74       		.sleb128 -12
 5706 0739 16       		.uleb128 0x16
 5707 073a DA9E0000 		.4byte	.LASF1200
 5708 073e 01       		.byte	0x1
 5709 073f 0805     		.2byte	0x508
 5710 0741 59070000 		.4byte	0x759
 5711 0745 02       		.uleb128 0x2
 5712 0746 91       		.byte	0x91
 5713 0747 70       		.sleb128 -16
 5714 0748 00       		.byte	0
 5715 0749 07       		.uleb128 0x7
 5716 074a 08020000 		.4byte	0x208
 5717 074e 06       		.uleb128 0x6
 5718 074f 04       		.byte	0x4
 5719 0750 54070000 		.4byte	0x754
 5720 0754 07       		.uleb128 0x7
 5721 0755 E3030000 		.4byte	0x3e3
 5722 0759 07       		.uleb128 0x7
 5723 075a 4E070000 		.4byte	0x74e
 5724 075e 18       		.uleb128 0x18
 5725 075f 46700000 		.4byte	.LASF1222
 5726 0763 01       		.byte	0x1
 5727 0764 3305     		.2byte	0x533
 5728 0766 00000000 		.4byte	.LFB9
 5729 076a 9C000000 		.4byte	.LFE9-.LFB9
 5730 076e 01       		.uleb128 0x1
 5731 076f 9C       		.byte	0x9c
 5732 0770 93070000 		.4byte	0x793
 5733 0774 15       		.uleb128 0x15
 5734 0775 6C390000 		.4byte	.LASF1223
 5735 0779 01       		.byte	0x1
 5736 077a 3305     		.2byte	0x533
 5737 077c 08020000 		.4byte	0x208
 5738 0780 02       		.uleb128 0x2
 5739 0781 91       		.byte	0x91
 5740 0782 6C       		.sleb128 -20
 5741 0783 16       		.uleb128 0x16
 5742 0784 DA9E0000 		.4byte	.LASF1200
 5743 0788 01       		.byte	0x1
 5744 0789 3505     		.2byte	0x535
 5745 078b 93070000 		.4byte	0x793
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 169


 5746 078f 02       		.uleb128 0x2
 5747 0790 91       		.byte	0x91
 5748 0791 74       		.sleb128 -12
 5749 0792 00       		.byte	0
 5750 0793 07       		.uleb128 0x7
 5751 0794 09050000 		.4byte	0x509
 5752 0798 14       		.uleb128 0x14
 5753 0799 76300000 		.4byte	.LASF1224
 5754 079d 01       		.byte	0x1
 5755 079e 6905     		.2byte	0x569
 5756 07a0 FE000000 		.4byte	0xfe
 5757 07a4 00000000 		.4byte	.LFB10
 5758 07a8 B8000000 		.4byte	.LFE10-.LFB10
 5759 07ac 01       		.uleb128 0x1
 5760 07ad 9C       		.byte	0x9c
 5761 07ae EF070000 		.4byte	0x7ef
 5762 07b2 15       		.uleb128 0x15
 5763 07b3 6C390000 		.4byte	.LASF1223
 5764 07b7 01       		.byte	0x1
 5765 07b8 6905     		.2byte	0x569
 5766 07ba 08020000 		.4byte	0x208
 5767 07be 02       		.uleb128 0x2
 5768 07bf 91       		.byte	0x91
 5769 07c0 64       		.sleb128 -28
 5770 07c1 16       		.uleb128 0x16
 5771 07c2 224E0000 		.4byte	.LASF1219
 5772 07c6 01       		.byte	0x1
 5773 07c7 6B05     		.2byte	0x56b
 5774 07c9 FE000000 		.4byte	0xfe
 5775 07cd 02       		.uleb128 0x2
 5776 07ce 91       		.byte	0x91
 5777 07cf 74       		.sleb128 -12
 5778 07d0 16       		.uleb128 0x16
 5779 07d1 DA9E0000 		.4byte	.LASF1200
 5780 07d5 01       		.byte	0x1
 5781 07d6 6C05     		.2byte	0x56c
 5782 07d8 93070000 		.4byte	0x793
 5783 07dc 02       		.uleb128 0x2
 5784 07dd 91       		.byte	0x91
 5785 07de 70       		.sleb128 -16
 5786 07df 16       		.uleb128 0x16
 5787 07e0 D94C0000 		.4byte	.LASF1225
 5788 07e4 01       		.byte	0x1
 5789 07e5 6D05     		.2byte	0x56d
 5790 07e7 09010000 		.4byte	0x109
 5791 07eb 02       		.uleb128 0x2
 5792 07ec 91       		.byte	0x91
 5793 07ed 6C       		.sleb128 -20
 5794 07ee 00       		.byte	0
 5795 07ef 18       		.uleb128 0x18
 5796 07f0 94170000 		.4byte	.LASF1226
 5797 07f4 01       		.byte	0x1
 5798 07f5 AF05     		.2byte	0x5af
 5799 07f7 00000000 		.4byte	.LFB11
 5800 07fb 68000000 		.4byte	.LFE11-.LFB11
 5801 07ff 01       		.uleb128 0x1
 5802 0800 9C       		.byte	0x9c
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 170


 5803 0801 15080000 		.4byte	0x815
 5804 0805 16       		.uleb128 0x16
 5805 0806 27210000 		.4byte	.LASF1197
 5806 080a 01       		.byte	0x1
 5807 080b B105     		.2byte	0x5b1
 5808 080d FE000000 		.4byte	0xfe
 5809 0811 02       		.uleb128 0x2
 5810 0812 91       		.byte	0x91
 5811 0813 74       		.sleb128 -12
 5812 0814 00       		.byte	0
 5813 0815 1A       		.uleb128 0x1a
 5814 0816 B1700000 		.4byte	.LASF1227
 5815 081a 01       		.byte	0x1
 5816 081b FD05     		.2byte	0x5fd
 5817 081d 00000000 		.4byte	.LFB12
 5818 0821 1C000000 		.4byte	.LFE12-.LFB12
 5819 0825 01       		.uleb128 0x1
 5820 0826 9C       		.byte	0x9c
 5821 0827 1B       		.uleb128 0x1b
 5822 0828 173D0000 		.4byte	.LASF1228
 5823 082c 01       		.byte	0x1
 5824 082d 0806     		.2byte	0x608
 5825 082f 00000000 		.4byte	.LFB13
 5826 0833 1C000000 		.4byte	.LFE13-.LFB13
 5827 0837 01       		.uleb128 0x1
 5828 0838 9C       		.byte	0x9c
 5829 0839 14       		.uleb128 0x14
 5830 083a 395E0000 		.4byte	.LASF1229
 5831 083e 01       		.byte	0x1
 5832 083f 2E06     		.2byte	0x62e
 5833 0841 FE000000 		.4byte	0xfe
 5834 0845 00000000 		.4byte	.LFB14
 5835 0849 08010000 		.4byte	.LFE14-.LFB14
 5836 084d 01       		.uleb128 0x1
 5837 084e 9C       		.byte	0x9c
 5838 084f 72080000 		.4byte	0x872
 5839 0853 16       		.uleb128 0x16
 5840 0854 DA9E0000 		.4byte	.LASF1200
 5841 0858 01       		.byte	0x1
 5842 0859 3006     		.2byte	0x630
 5843 085b 09050000 		.4byte	0x509
 5844 085f 02       		.uleb128 0x2
 5845 0860 91       		.byte	0x91
 5846 0861 70       		.sleb128 -16
 5847 0862 16       		.uleb128 0x16
 5848 0863 00760000 		.4byte	.LASF1206
 5849 0867 01       		.byte	0x1
 5850 0868 3106     		.2byte	0x631
 5851 086a FE000000 		.4byte	0xfe
 5852 086e 02       		.uleb128 0x2
 5853 086f 91       		.byte	0x91
 5854 0870 74       		.sleb128 -12
 5855 0871 00       		.byte	0
 5856 0872 14       		.uleb128 0x14
 5857 0873 64170000 		.4byte	.LASF1230
 5858 0877 01       		.byte	0x1
 5859 0878 8B06     		.2byte	0x68b
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 171


 5860 087a 1F010000 		.4byte	0x11f
 5861 087e 00000000 		.4byte	.LFB15
 5862 0882 24000000 		.4byte	.LFE15-.LFB15
 5863 0886 01       		.uleb128 0x1
 5864 0887 9C       		.byte	0x9c
 5865 0888 9C080000 		.4byte	0x89c
 5866 088c 16       		.uleb128 0x16
 5867 088d 10760000 		.4byte	.LASF1231
 5868 0891 01       		.byte	0x1
 5869 0892 8D06     		.2byte	0x68d
 5870 0894 1F010000 		.4byte	0x11f
 5871 0898 02       		.uleb128 0x2
 5872 0899 91       		.byte	0x91
 5873 089a 74       		.sleb128 -12
 5874 089b 00       		.byte	0
 5875 089c 14       		.uleb128 0x14
 5876 089d CA030000 		.4byte	.LASF1232
 5877 08a1 01       		.byte	0x1
 5878 08a2 9A06     		.2byte	0x69a
 5879 08a4 1F010000 		.4byte	0x11f
 5880 08a8 00000000 		.4byte	.LFB16
 5881 08ac 2C000000 		.4byte	.LFE16-.LFB16
 5882 08b0 01       		.uleb128 0x1
 5883 08b1 9C       		.byte	0x9c
 5884 08b2 D5080000 		.4byte	0x8d5
 5885 08b6 16       		.uleb128 0x16
 5886 08b7 27210000 		.4byte	.LASF1197
 5887 08bb 01       		.byte	0x1
 5888 08bc 9C06     		.2byte	0x69c
 5889 08be 1F010000 		.4byte	0x11f
 5890 08c2 02       		.uleb128 0x2
 5891 08c3 91       		.byte	0x91
 5892 08c4 70       		.sleb128 -16
 5893 08c5 16       		.uleb128 0x16
 5894 08c6 D94C0000 		.4byte	.LASF1225
 5895 08ca 01       		.byte	0x1
 5896 08cb 9D06     		.2byte	0x69d
 5897 08cd 09010000 		.4byte	0x109
 5898 08d1 02       		.uleb128 0x2
 5899 08d2 91       		.byte	0x91
 5900 08d3 74       		.sleb128 -12
 5901 08d4 00       		.byte	0
 5902 08d5 1C       		.uleb128 0x1c
 5903 08d6 910A0000 		.4byte	.LASF1286
 5904 08da 01       		.byte	0x1
 5905 08db B906     		.2byte	0x6b9
 5906 08dd 09010000 		.4byte	0x109
 5907 08e1 00000000 		.4byte	.LFB17
 5908 08e5 14000000 		.4byte	.LFE17-.LFB17
 5909 08e9 01       		.uleb128 0x1
 5910 08ea 9C       		.byte	0x9c
 5911 08eb 14       		.uleb128 0x14
 5912 08ec 458F0000 		.4byte	.LASF1233
 5913 08f0 01       		.byte	0x1
 5914 08f1 D206     		.2byte	0x6d2
 5915 08f3 09010000 		.4byte	0x109
 5916 08f7 00000000 		.4byte	.LFB18
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 172


 5917 08fb F4000000 		.4byte	.LFE18-.LFB18
 5918 08ff 01       		.uleb128 0x1
 5919 0900 9C       		.byte	0x9c
 5920 0901 51090000 		.4byte	0x951
 5921 0905 15       		.uleb128 0x15
 5922 0906 7F690000 		.4byte	.LASF1234
 5923 090a 01       		.byte	0x1
 5924 090b D206     		.2byte	0x6d2
 5925 090d 57090000 		.4byte	0x957
 5926 0911 02       		.uleb128 0x2
 5927 0912 91       		.byte	0x91
 5928 0913 6C       		.sleb128 -20
 5929 0914 15       		.uleb128 0x15
 5930 0915 47530000 		.4byte	.LASF1235
 5931 0919 01       		.byte	0x1
 5932 091a D206     		.2byte	0x6d2
 5933 091c 5C090000 		.4byte	0x95c
 5934 0920 02       		.uleb128 0x2
 5935 0921 91       		.byte	0x91
 5936 0922 68       		.sleb128 -24
 5937 0923 15       		.uleb128 0x15
 5938 0924 E9050000 		.4byte	.LASF1236
 5939 0928 01       		.byte	0x1
 5940 0929 D206     		.2byte	0x6d2
 5941 092b 67090000 		.4byte	0x967
 5942 092f 02       		.uleb128 0x2
 5943 0930 91       		.byte	0x91
 5944 0931 64       		.sleb128 -28
 5945 0932 16       		.uleb128 0x16
 5946 0933 3D8E0000 		.4byte	.LASF1237
 5947 0937 01       		.byte	0x1
 5948 0938 D406     		.2byte	0x6d4
 5949 093a 09010000 		.4byte	0x109
 5950 093e 02       		.uleb128 0x2
 5951 093f 91       		.byte	0x91
 5952 0940 74       		.sleb128 -12
 5953 0941 16       		.uleb128 0x16
 5954 0942 EC860000 		.4byte	.LASF1238
 5955 0946 01       		.byte	0x1
 5956 0947 D406     		.2byte	0x6d4
 5957 0949 09010000 		.4byte	0x109
 5958 094d 02       		.uleb128 0x2
 5959 094e 91       		.byte	0x91
 5960 094f 70       		.sleb128 -16
 5961 0950 00       		.byte	0
 5962 0951 06       		.uleb128 0x6
 5963 0952 04       		.byte	0x4
 5964 0953 2D030000 		.4byte	0x32d
 5965 0957 07       		.uleb128 0x7
 5966 0958 51090000 		.4byte	0x951
 5967 095c 07       		.uleb128 0x7
 5968 095d 09010000 		.4byte	0x109
 5969 0961 06       		.uleb128 0x6
 5970 0962 04       		.byte	0x4
 5971 0963 CC000000 		.4byte	0xcc
 5972 0967 07       		.uleb128 0x7
 5973 0968 61090000 		.4byte	0x961
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 173


 5974 096c 14       		.uleb128 0x14
 5975 096d BC6D0000 		.4byte	.LASF1239
 5976 0971 01       		.byte	0x1
 5977 0972 3A07     		.2byte	0x73a
 5978 0974 FE000000 		.4byte	0xfe
 5979 0978 00000000 		.4byte	.LFB19
 5980 097c 7C010000 		.4byte	.LFE19-.LFB19
 5981 0980 01       		.uleb128 0x1
 5982 0981 9C       		.byte	0x9c
 5983 0982 E6090000 		.4byte	0x9e6
 5984 0986 16       		.uleb128 0x16
 5985 0987 DA9E0000 		.4byte	.LASF1200
 5986 098b 01       		.byte	0x1
 5987 098c 3C07     		.2byte	0x73c
 5988 098e 09050000 		.4byte	0x509
 5989 0992 02       		.uleb128 0x2
 5990 0993 91       		.byte	0x91
 5991 0994 68       		.sleb128 -24
 5992 0995 16       		.uleb128 0x16
 5993 0996 BB9E0000 		.4byte	.LASF1139
 5994 099a 01       		.byte	0x1
 5995 099b 3D07     		.2byte	0x73d
 5996 099d 1F010000 		.4byte	0x11f
 5997 09a1 02       		.uleb128 0x2
 5998 09a2 91       		.byte	0x91
 5999 09a3 64       		.sleb128 -28
 6000 09a4 16       		.uleb128 0x16
 6001 09a5 64730000 		.4byte	.LASF1240
 6002 09a9 01       		.byte	0x1
 6003 09aa 3E07     		.2byte	0x73e
 6004 09ac FE000000 		.4byte	0xfe
 6005 09b0 02       		.uleb128 0x2
 6006 09b1 91       		.byte	0x91
 6007 09b2 74       		.sleb128 -12
 6008 09b3 17       		.uleb128 0x17
 6009 09b4 1E000000 		.4byte	.LBB8
 6010 09b8 E4000000 		.4byte	.LBE8-.LBB8
 6011 09bc 16       		.uleb128 0x16
 6012 09bd D3600000 		.4byte	.LASF1208
 6013 09c1 01       		.byte	0x1
 6014 09c2 4D07     		.2byte	0x74d
 6015 09c4 CA050000 		.4byte	0x5ca
 6016 09c8 02       		.uleb128 0x2
 6017 09c9 91       		.byte	0x91
 6018 09ca 70       		.sleb128 -16
 6019 09cb 17       		.uleb128 0x17
 6020 09cc 2A000000 		.4byte	.LBB9
 6021 09d0 32000000 		.4byte	.LBE9-.LBB9
 6022 09d4 16       		.uleb128 0x16
 6023 09d5 E5290000 		.4byte	.LASF1241
 6024 09d9 01       		.byte	0x1
 6025 09da 5107     		.2byte	0x751
 6026 09dc E6090000 		.4byte	0x9e6
 6027 09e0 02       		.uleb128 0x2
 6028 09e1 91       		.byte	0x91
 6029 09e2 6C       		.sleb128 -20
 6030 09e3 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 174


 6031 09e4 00       		.byte	0
 6032 09e5 00       		.byte	0
 6033 09e6 06       		.uleb128 0x6
 6034 09e7 04       		.byte	0x4
 6035 09e8 FD010000 		.4byte	0x1fd
 6036 09ec 18       		.uleb128 0x18
 6037 09ed 31370000 		.4byte	.LASF1242
 6038 09f1 01       		.byte	0x1
 6039 09f2 4208     		.2byte	0x842
 6040 09f4 00000000 		.4byte	.LFB20
 6041 09f8 A4000000 		.4byte	.LFE20-.LFB20
 6042 09fc 01       		.uleb128 0x1
 6043 09fd 9C       		.byte	0x9c
 6044 09fe 640A0000 		.4byte	0xa64
 6045 0a02 17       		.uleb128 0x17
 6046 0a03 1C000000 		.4byte	.LBB10
 6047 0a07 6A000000 		.4byte	.LBE10-.LBB10
 6048 0a0b 16       		.uleb128 0x16
 6049 0a0c 46690000 		.4byte	.LASF1243
 6050 0a10 01       		.byte	0x1
 6051 0a11 7008     		.2byte	0x870
 6052 0a13 09010000 		.4byte	0x109
 6053 0a17 02       		.uleb128 0x2
 6054 0a18 91       		.byte	0x91
 6055 0a19 74       		.sleb128 -12
 6056 0a1a 1D       		.uleb128 0x1d
 6057 0a1b EE030000 		.4byte	0x3ee
 6058 0a1f 22000000 		.4byte	.LBB11
 6059 0a23 0A000000 		.4byte	.LBE11-.LBB11
 6060 0a27 01       		.byte	0x1
 6061 0a28 7008     		.2byte	0x870
 6062 0a2a 490A0000 		.4byte	0xa49
 6063 0a2e 1E       		.uleb128 0x1e
 6064 0a2f FE030000 		.4byte	0x3fe
 6065 0a33 02       		.uleb128 0x2
 6066 0a34 91       		.byte	0x91
 6067 0a35 6C       		.sleb128 -20
 6068 0a36 17       		.uleb128 0x17
 6069 0a37 22000000 		.4byte	.LBB12
 6070 0a3b 0A000000 		.4byte	.LBE12-.LBB12
 6071 0a3f 1F       		.uleb128 0x1f
 6072 0a40 09040000 		.4byte	0x409
 6073 0a44 02       		.uleb128 0x2
 6074 0a45 91       		.byte	0x91
 6075 0a46 6B       		.sleb128 -21
 6076 0a47 00       		.byte	0
 6077 0a48 00       		.byte	0
 6078 0a49 17       		.uleb128 0x17
 6079 0a4a 4C000000 		.4byte	.LBB13
 6080 0a4e 3A000000 		.4byte	.LBE13-.LBB13
 6081 0a52 16       		.uleb128 0x16
 6082 0a53 7A380000 		.4byte	.LASF1244
 6083 0a57 01       		.byte	0x1
 6084 0a58 7008     		.2byte	0x870
 6085 0a5a 640A0000 		.4byte	0xa64
 6086 0a5e 02       		.uleb128 0x2
 6087 0a5f 91       		.byte	0x91
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 175


 6088 0a60 70       		.sleb128 -16
 6089 0a61 00       		.byte	0
 6090 0a62 00       		.byte	0
 6091 0a63 00       		.byte	0
 6092 0a64 07       		.uleb128 0x7
 6093 0a65 E6090000 		.4byte	0x9e6
 6094 0a69 18       		.uleb128 0x18
 6095 0a6a 214A0000 		.4byte	.LASF1245
 6096 0a6e 01       		.byte	0x1
 6097 0a6f 7E08     		.2byte	0x87e
 6098 0a71 00000000 		.4byte	.LFB21
 6099 0a75 90000000 		.4byte	.LFE21-.LFB21
 6100 0a79 01       		.uleb128 0x1
 6101 0a7a 9C       		.byte	0x9c
 6102 0a7b AD0A0000 		.4byte	0xaad
 6103 0a7f 15       		.uleb128 0x15
 6104 0a80 A83F0000 		.4byte	.LASF1246
 6105 0a84 01       		.byte	0x1
 6106 0a85 7E08     		.2byte	0x87e
 6107 0a87 640A0000 		.4byte	0xa64
 6108 0a8b 02       		.uleb128 0x2
 6109 0a8c 91       		.byte	0x91
 6110 0a8d 6C       		.sleb128 -20
 6111 0a8e 15       		.uleb128 0x15
 6112 0a8f D15D0000 		.4byte	.LASF1247
 6113 0a93 01       		.byte	0x1
 6114 0a94 7E08     		.2byte	0x87e
 6115 0a96 CA050000 		.4byte	0x5ca
 6116 0a9a 02       		.uleb128 0x2
 6117 0a9b 91       		.byte	0x91
 6118 0a9c 68       		.sleb128 -24
 6119 0a9d 16       		.uleb128 0x16
 6120 0a9e 24550000 		.4byte	.LASF1205
 6121 0aa2 01       		.byte	0x1
 6122 0aa3 8008     		.2byte	0x880
 6123 0aa5 1F010000 		.4byte	0x11f
 6124 0aa9 02       		.uleb128 0x2
 6125 0aaa 91       		.byte	0x91
 6126 0aab 74       		.sleb128 -12
 6127 0aac 00       		.byte	0
 6128 0aad 18       		.uleb128 0x18
 6129 0aae 32050000 		.4byte	.LASF1248
 6130 0ab2 01       		.byte	0x1
 6131 0ab3 B908     		.2byte	0x8b9
 6132 0ab5 00000000 		.4byte	.LFB22
 6133 0ab9 B0000000 		.4byte	.LFE22-.LFB22
 6134 0abd 01       		.uleb128 0x1
 6135 0abe 9C       		.byte	0x9c
 6136 0abf 000B0000 		.4byte	0xb00
 6137 0ac3 15       		.uleb128 0x15
 6138 0ac4 A83F0000 		.4byte	.LASF1246
 6139 0ac8 01       		.byte	0x1
 6140 0ac9 B908     		.2byte	0x8b9
 6141 0acb E6090000 		.4byte	0x9e6
 6142 0acf 02       		.uleb128 0x2
 6143 0ad0 91       		.byte	0x91
 6144 0ad1 6C       		.sleb128 -20
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 176


 6145 0ad2 15       		.uleb128 0x15
 6146 0ad3 BB9E0000 		.4byte	.LASF1139
 6147 0ad7 01       		.byte	0x1
 6148 0ad8 B908     		.2byte	0x8b9
 6149 0ada CA050000 		.4byte	0x5ca
 6150 0ade 02       		.uleb128 0x2
 6151 0adf 91       		.byte	0x91
 6152 0ae0 68       		.sleb128 -24
 6153 0ae1 15       		.uleb128 0x15
 6154 0ae2 D15D0000 		.4byte	.LASF1247
 6155 0ae6 01       		.byte	0x1
 6156 0ae7 B908     		.2byte	0x8b9
 6157 0ae9 CA050000 		.4byte	0x5ca
 6158 0aed 02       		.uleb128 0x2
 6159 0aee 91       		.byte	0x91
 6160 0aef 64       		.sleb128 -28
 6161 0af0 16       		.uleb128 0x16
 6162 0af1 24550000 		.4byte	.LASF1205
 6163 0af5 01       		.byte	0x1
 6164 0af6 BB08     		.2byte	0x8bb
 6165 0af8 1F010000 		.4byte	0x11f
 6166 0afc 02       		.uleb128 0x2
 6167 0afd 91       		.byte	0x91
 6168 0afe 74       		.sleb128 -12
 6169 0aff 00       		.byte	0
 6170 0b00 14       		.uleb128 0x14
 6171 0b01 9C270000 		.4byte	.LASF1249
 6172 0b05 01       		.byte	0x1
 6173 0b06 2809     		.2byte	0x928
 6174 0b08 FE000000 		.4byte	0xfe
 6175 0b0c 00000000 		.4byte	.LFB23
 6176 0b10 B4000000 		.4byte	.LFE23-.LFB23
 6177 0b14 01       		.uleb128 0x1
 6178 0b15 9C       		.byte	0x9c
 6179 0b16 480B0000 		.4byte	0xb48
 6180 0b1a 15       		.uleb128 0x15
 6181 0b1b A83F0000 		.4byte	.LASF1246
 6182 0b1f 01       		.byte	0x1
 6183 0b20 2809     		.2byte	0x928
 6184 0b22 530B0000 		.4byte	0xb53
 6185 0b26 02       		.uleb128 0x2
 6186 0b27 91       		.byte	0x91
 6187 0b28 6C       		.sleb128 -20
 6188 0b29 16       		.uleb128 0x16
 6189 0b2a 56580000 		.4byte	.LASF1250
 6190 0b2e 01       		.byte	0x1
 6191 0b2f 2A09     		.2byte	0x92a
 6192 0b31 09050000 		.4byte	0x509
 6193 0b35 02       		.uleb128 0x2
 6194 0b36 91       		.byte	0x91
 6195 0b37 70       		.sleb128 -16
 6196 0b38 16       		.uleb128 0x16
 6197 0b39 27210000 		.4byte	.LASF1197
 6198 0b3d 01       		.byte	0x1
 6199 0b3e 2B09     		.2byte	0x92b
 6200 0b40 FE000000 		.4byte	0xfe
 6201 0b44 02       		.uleb128 0x2
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 177


 6202 0b45 91       		.byte	0x91
 6203 0b46 74       		.sleb128 -12
 6204 0b47 00       		.byte	0
 6205 0b48 06       		.uleb128 0x6
 6206 0b49 04       		.byte	0x4
 6207 0b4a 4E0B0000 		.4byte	0xb4e
 6208 0b4e 07       		.uleb128 0x7
 6209 0b4f FD010000 		.4byte	0x1fd
 6210 0b53 07       		.uleb128 0x7
 6211 0b54 480B0000 		.4byte	0xb48
 6212 0b58 14       		.uleb128 0x14
 6213 0b59 EF060000 		.4byte	.LASF1251
 6214 0b5d 01       		.byte	0x1
 6215 0b5e 5E09     		.2byte	0x95e
 6216 0b60 FE000000 		.4byte	0xfe
 6217 0b64 00000000 		.4byte	.LFB24
 6218 0b68 B0000000 		.4byte	.LFE24-.LFB24
 6219 0b6c 01       		.uleb128 0x1
 6220 0b6d 9C       		.byte	0x9c
 6221 0b6e AF0B0000 		.4byte	0xbaf
 6222 0b72 15       		.uleb128 0x15
 6223 0b73 ED6A0000 		.4byte	.LASF1252
 6224 0b77 01       		.byte	0x1
 6225 0b78 5E09     		.2byte	0x95e
 6226 0b7a F7010000 		.4byte	0x1f7
 6227 0b7e 02       		.uleb128 0x2
 6228 0b7f 91       		.byte	0x91
 6229 0b80 6C       		.sleb128 -20
 6230 0b81 15       		.uleb128 0x15
 6231 0b82 BB9E0000 		.4byte	.LASF1139
 6232 0b86 01       		.byte	0x1
 6233 0b87 5E09     		.2byte	0x95e
 6234 0b89 CA050000 		.4byte	0x5ca
 6235 0b8d 02       		.uleb128 0x2
 6236 0b8e 91       		.byte	0x91
 6237 0b8f 68       		.sleb128 -24
 6238 0b90 16       		.uleb128 0x16
 6239 0b91 56580000 		.4byte	.LASF1250
 6240 0b95 01       		.byte	0x1
 6241 0b96 6009     		.2byte	0x960
 6242 0b98 09050000 		.4byte	0x509
 6243 0b9c 02       		.uleb128 0x2
 6244 0b9d 91       		.byte	0x91
 6245 0b9e 70       		.sleb128 -16
 6246 0b9f 16       		.uleb128 0x16
 6247 0ba0 27210000 		.4byte	.LASF1197
 6248 0ba4 01       		.byte	0x1
 6249 0ba5 6109     		.2byte	0x961
 6250 0ba7 FE000000 		.4byte	0xfe
 6251 0bab 02       		.uleb128 0x2
 6252 0bac 91       		.byte	0x91
 6253 0bad 74       		.sleb128 -12
 6254 0bae 00       		.byte	0
 6255 0baf 18       		.uleb128 0x18
 6256 0bb0 13410000 		.4byte	.LASF1253
 6257 0bb4 01       		.byte	0x1
 6258 0bb5 8B09     		.2byte	0x98b
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 178


 6259 0bb7 00000000 		.4byte	.LFB25
 6260 0bbb 34000000 		.4byte	.LFE25-.LFB25
 6261 0bbf 01       		.uleb128 0x1
 6262 0bc0 9C       		.byte	0x9c
 6263 0bc1 D50B0000 		.4byte	0xbd5
 6264 0bc5 15       		.uleb128 0x15
 6265 0bc6 503E0000 		.4byte	.LASF1254
 6266 0bca 01       		.byte	0x1
 6267 0bcb 8B09     		.2byte	0x98b
 6268 0bcd DB0B0000 		.4byte	0xbdb
 6269 0bd1 02       		.uleb128 0x2
 6270 0bd2 91       		.byte	0x91
 6271 0bd3 74       		.sleb128 -12
 6272 0bd4 00       		.byte	0
 6273 0bd5 06       		.uleb128 0x6
 6274 0bd6 04       		.byte	0x4
 6275 0bd7 6E020000 		.4byte	0x26e
 6276 0bdb 07       		.uleb128 0x7
 6277 0bdc D50B0000 		.4byte	0xbd5
 6278 0be0 14       		.uleb128 0x14
 6279 0be1 13450000 		.4byte	.LASF1255
 6280 0be5 01       		.byte	0x1
 6281 0be6 9309     		.2byte	0x993
 6282 0be8 FE000000 		.4byte	0xfe
 6283 0bec 00000000 		.4byte	.LFB26
 6284 0bf0 A0000000 		.4byte	.LFE26-.LFB26
 6285 0bf4 01       		.uleb128 0x1
 6286 0bf5 9C       		.byte	0x9c
 6287 0bf6 410C0000 		.4byte	0xc41
 6288 0bfa 15       		.uleb128 0x15
 6289 0bfb 503E0000 		.4byte	.LASF1254
 6290 0bff 01       		.byte	0x1
 6291 0c00 9309     		.2byte	0x993
 6292 0c02 DB0B0000 		.4byte	0xbdb
 6293 0c06 02       		.uleb128 0x2
 6294 0c07 91       		.byte	0x91
 6295 0c08 6C       		.sleb128 -20
 6296 0c09 15       		.uleb128 0x15
 6297 0c0a 591A0000 		.4byte	.LASF1256
 6298 0c0e 01       		.byte	0x1
 6299 0c0f 9309     		.2byte	0x993
 6300 0c11 C5050000 		.4byte	0x5c5
 6301 0c15 02       		.uleb128 0x2
 6302 0c16 91       		.byte	0x91
 6303 0c17 68       		.sleb128 -24
 6304 0c18 16       		.uleb128 0x16
 6305 0c19 27210000 		.4byte	.LASF1197
 6306 0c1d 01       		.byte	0x1
 6307 0c1e 9509     		.2byte	0x995
 6308 0c20 FE000000 		.4byte	0xfe
 6309 0c24 02       		.uleb128 0x2
 6310 0c25 91       		.byte	0x91
 6311 0c26 74       		.sleb128 -12
 6312 0c27 17       		.uleb128 0x17
 6313 0c28 26000000 		.4byte	.LBB14
 6314 0c2c 64000000 		.4byte	.LBE14-.LBB14
 6315 0c30 16       		.uleb128 0x16
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 179


 6316 0c31 D3600000 		.4byte	.LASF1208
 6317 0c35 01       		.byte	0x1
 6318 0c36 9D09     		.2byte	0x99d
 6319 0c38 CA050000 		.4byte	0x5ca
 6320 0c3c 02       		.uleb128 0x2
 6321 0c3d 91       		.byte	0x91
 6322 0c3e 70       		.sleb128 -16
 6323 0c3f 00       		.byte	0
 6324 0c40 00       		.byte	0
 6325 0c41 1B       		.uleb128 0x1b
 6326 0c42 CC3F0000 		.4byte	.LASF1257
 6327 0c46 01       		.byte	0x1
 6328 0c47 C409     		.2byte	0x9c4
 6329 0c49 00000000 		.4byte	.LFB27
 6330 0c4d 18000000 		.4byte	.LFE27-.LFB27
 6331 0c51 01       		.uleb128 0x1
 6332 0c52 9C       		.byte	0x9c
 6333 0c53 20       		.uleb128 0x20
 6334 0c54 291D0000 		.4byte	.LASF1258
 6335 0c58 01       		.byte	0x1
 6336 0c59 CC09     		.2byte	0x9cc
 6337 0c5b 09010000 		.4byte	0x109
 6338 0c5f 00000000 		.4byte	.LFB28
 6339 0c63 2A000000 		.4byte	.LFE28-.LFB28
 6340 0c67 01       		.uleb128 0x1
 6341 0c68 9C       		.byte	0x9c
 6342 0c69 9B0C0000 		.4byte	0xc9b
 6343 0c6d 15       		.uleb128 0x15
 6344 0c6e BB4A0000 		.4byte	.LASF1213
 6345 0c72 01       		.byte	0x1
 6346 0c73 CC09     		.2byte	0x9cc
 6347 0c75 08020000 		.4byte	0x208
 6348 0c79 02       		.uleb128 0x2
 6349 0c7a 91       		.byte	0x91
 6350 0c7b 6C       		.sleb128 -20
 6351 0c7c 16       		.uleb128 0x16
 6352 0c7d EC0E0000 		.4byte	.LASF1214
 6353 0c81 01       		.byte	0x1
 6354 0c82 CE09     		.2byte	0x9ce
 6355 0c84 09010000 		.4byte	0x109
 6356 0c88 02       		.uleb128 0x2
 6357 0c89 91       		.byte	0x91
 6358 0c8a 74       		.sleb128 -12
 6359 0c8b 16       		.uleb128 0x16
 6360 0c8c DA9E0000 		.4byte	.LASF1200
 6361 0c90 01       		.byte	0x1
 6362 0c91 CF09     		.2byte	0x9cf
 6363 0c93 09050000 		.4byte	0x509
 6364 0c97 02       		.uleb128 0x2
 6365 0c98 91       		.byte	0x91
 6366 0c99 70       		.sleb128 -16
 6367 0c9a 00       		.byte	0
 6368 0c9b 21       		.uleb128 0x21
 6369 0c9c C14A0000 		.4byte	.LASF1259
 6370 0ca0 01       		.byte	0x1
 6371 0ca1 E309     		.2byte	0x9e3
 6372 0ca3 00000000 		.4byte	.LFB29
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 180


 6373 0ca7 24000000 		.4byte	.LFE29-.LFB29
 6374 0cab 01       		.uleb128 0x1
 6375 0cac 9C       		.byte	0x9c
 6376 0cad DF0C0000 		.4byte	0xcdf
 6377 0cb1 15       		.uleb128 0x15
 6378 0cb2 BB4A0000 		.4byte	.LASF1213
 6379 0cb6 01       		.byte	0x1
 6380 0cb7 E309     		.2byte	0x9e3
 6381 0cb9 08020000 		.4byte	0x208
 6382 0cbd 02       		.uleb128 0x2
 6383 0cbe 91       		.byte	0x91
 6384 0cbf 6C       		.sleb128 -20
 6385 0cc0 15       		.uleb128 0x15
 6386 0cc1 300E0000 		.4byte	.LASF1260
 6387 0cc5 01       		.byte	0x1
 6388 0cc6 E309     		.2byte	0x9e3
 6389 0cc8 5C090000 		.4byte	0x95c
 6390 0ccc 02       		.uleb128 0x2
 6391 0ccd 91       		.byte	0x91
 6392 0cce 68       		.sleb128 -24
 6393 0ccf 16       		.uleb128 0x16
 6394 0cd0 DA9E0000 		.4byte	.LASF1200
 6395 0cd4 01       		.byte	0x1
 6396 0cd5 E509     		.2byte	0x9e5
 6397 0cd7 09050000 		.4byte	0x509
 6398 0cdb 02       		.uleb128 0x2
 6399 0cdc 91       		.byte	0x91
 6400 0cdd 74       		.sleb128 -12
 6401 0cde 00       		.byte	0
 6402 0cdf 22       		.uleb128 0x22
 6403 0ce0 B0200000 		.4byte	.LASF1261
 6404 0ce4 01       		.byte	0x1
 6405 0ce5 FB09     		.2byte	0x9fb
 6406 0ce7 00000000 		.4byte	.LFB30
 6407 0ceb 0E000000 		.4byte	.LFE30-.LFB30
 6408 0cef 01       		.uleb128 0x1
 6409 0cf0 9C       		.byte	0x9c
 6410 0cf1 050D0000 		.4byte	0xd05
 6411 0cf5 15       		.uleb128 0x15
 6412 0cf6 308E0000 		.4byte	.LASF1193
 6413 0cfa 01       		.byte	0x1
 6414 0cfb FB09     		.2byte	0x9fb
 6415 0cfd A2000000 		.4byte	0xa2
 6416 0d01 02       		.uleb128 0x2
 6417 0d02 91       		.byte	0x91
 6418 0d03 74       		.sleb128 -12
 6419 0d04 00       		.byte	0
 6420 0d05 22       		.uleb128 0x22
 6421 0d06 D4380000 		.4byte	.LASF1262
 6422 0d0a 01       		.byte	0x1
 6423 0d0b 8E0A     		.2byte	0xa8e
 6424 0d0d 00000000 		.4byte	.LFB31
 6425 0d11 9A000000 		.4byte	.LFE31-.LFB31
 6426 0d15 01       		.uleb128 0x1
 6427 0d16 9C       		.byte	0x9c
 6428 0d17 740D0000 		.4byte	0xd74
 6429 0d1b 15       		.uleb128 0x15
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 181


 6430 0d1c DA9E0000 		.4byte	.LASF1200
 6431 0d20 01       		.byte	0x1
 6432 0d21 8E0A     		.2byte	0xa8e
 6433 0d23 93070000 		.4byte	0x793
 6434 0d27 02       		.uleb128 0x2
 6435 0d28 91       		.byte	0x91
 6436 0d29 6C       		.sleb128 -20
 6437 0d2a 15       		.uleb128 0x15
 6438 0d2b C91A0000 		.4byte	.LASF1191
 6439 0d2f 01       		.byte	0x1
 6440 0d30 8E0A     		.2byte	0xa8e
 6441 0d32 B5020000 		.4byte	0x2b5
 6442 0d36 02       		.uleb128 0x2
 6443 0d37 91       		.byte	0x91
 6444 0d38 68       		.sleb128 -24
 6445 0d39 15       		.uleb128 0x15
 6446 0d3a F39E0000 		.4byte	.LASF1183
 6447 0d3e 01       		.byte	0x1
 6448 0d3f 8E0A     		.2byte	0xa8e
 6449 0d41 09010000 		.4byte	0x109
 6450 0d45 02       		.uleb128 0x2
 6451 0d46 91       		.byte	0x91
 6452 0d47 64       		.sleb128 -28
 6453 0d48 15       		.uleb128 0x15
 6454 0d49 0C910000 		.4byte	.LASF1196
 6455 0d4d 01       		.byte	0x1
 6456 0d4e 8E0A     		.2byte	0xa8e
 6457 0d50 04050000 		.4byte	0x504
 6458 0d54 02       		.uleb128 0x2
 6459 0d55 91       		.byte	0x91
 6460 0d56 60       		.sleb128 -32
 6461 0d57 15       		.uleb128 0x15
 6462 0d58 A1020000 		.4byte	.LASF1192
 6463 0d5c 01       		.byte	0x1
 6464 0d5d 8E0A     		.2byte	0xa8e
 6465 0d5f DF040000 		.4byte	0x4df
 6466 0d63 02       		.uleb128 0x2
 6467 0d64 91       		.byte	0x91
 6468 0d65 00       		.sleb128 0
 6469 0d66 23       		.uleb128 0x23
 6470 0d67 7800     		.ascii	"x\000"
 6471 0d69 01       		.byte	0x1
 6472 0d6a 900A     		.2byte	0xa90
 6473 0d6c 09010000 		.4byte	0x109
 6474 0d70 02       		.uleb128 0x2
 6475 0d71 91       		.byte	0x91
 6476 0d72 74       		.sleb128 -12
 6477 0d73 00       		.byte	0
 6478 0d74 22       		.uleb128 0x22
 6479 0d75 1F970000 		.4byte	.LASF1263
 6480 0d79 01       		.byte	0x1
 6481 0d7a FB0A     		.2byte	0xafb
 6482 0d7c 00000000 		.4byte	.LFB32
 6483 0d80 80000000 		.4byte	.LFE32-.LFB32
 6484 0d84 01       		.uleb128 0x1
 6485 0d85 9C       		.byte	0x9c
 6486 0d86 9A0D0000 		.4byte	0xd9a
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 182


 6487 0d8a 16       		.uleb128 0x16
 6488 0d8b F39E0000 		.4byte	.LASF1183
 6489 0d8f 01       		.byte	0x1
 6490 0d90 FD0A     		.2byte	0xafd
 6491 0d92 09010000 		.4byte	0x109
 6492 0d96 02       		.uleb128 0x2
 6493 0d97 91       		.byte	0x91
 6494 0d98 74       		.sleb128 -12
 6495 0d99 00       		.byte	0
 6496 0d9a 22       		.uleb128 0x22
 6497 0d9b BD710000 		.4byte	.LASF1264
 6498 0d9f 01       		.byte	0x1
 6499 0da0 1B0B     		.2byte	0xb1b
 6500 0da2 00000000 		.4byte	.LFB33
 6501 0da6 78000000 		.4byte	.LFE33-.LFB33
 6502 0daa 01       		.uleb128 0x1
 6503 0dab 9C       		.byte	0x9c
 6504 0dac E30D0000 		.4byte	0xde3
 6505 0db0 17       		.uleb128 0x17
 6506 0db1 06000000 		.4byte	.LBB15
 6507 0db5 5C000000 		.4byte	.LBE15-.LBB15
 6508 0db9 16       		.uleb128 0x16
 6509 0dba AF9C0000 		.4byte	.LASF1265
 6510 0dbe 01       		.byte	0x1
 6511 0dbf 1F0B     		.2byte	0xb1f
 6512 0dc1 FE000000 		.4byte	0xfe
 6513 0dc5 02       		.uleb128 0x2
 6514 0dc6 91       		.byte	0x91
 6515 0dc7 74       		.sleb128 -12
 6516 0dc8 17       		.uleb128 0x17
 6517 0dc9 26000000 		.4byte	.LBB16
 6518 0dcd 34000000 		.4byte	.LBE16-.LBB16
 6519 0dd1 16       		.uleb128 0x16
 6520 0dd2 DA9E0000 		.4byte	.LASF1200
 6521 0dd6 01       		.byte	0x1
 6522 0dd7 2D0B     		.2byte	0xb2d
 6523 0dd9 09050000 		.4byte	0x509
 6524 0ddd 02       		.uleb128 0x2
 6525 0dde 91       		.byte	0x91
 6526 0ddf 70       		.sleb128 -16
 6527 0de0 00       		.byte	0
 6528 0de1 00       		.byte	0
 6529 0de2 00       		.byte	0
 6530 0de3 22       		.uleb128 0x22
 6531 0de4 A66E0000 		.4byte	.LASF1266
 6532 0de8 01       		.byte	0x1
 6533 0de9 440B     		.2byte	0xb44
 6534 0deb 00000000 		.4byte	.LFB34
 6535 0def 6C000000 		.4byte	.LFE34-.LFB34
 6536 0df3 01       		.uleb128 0x1
 6537 0df4 9C       		.byte	0x9c
 6538 0df5 090E0000 		.4byte	0xe09
 6539 0df9 15       		.uleb128 0x15
 6540 0dfa 24550000 		.4byte	.LASF1205
 6541 0dfe 01       		.byte	0x1
 6542 0dff 440B     		.2byte	0xb44
 6543 0e01 CA050000 		.4byte	0x5ca
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 183


 6544 0e05 02       		.uleb128 0x2
 6545 0e06 91       		.byte	0x91
 6546 0e07 74       		.sleb128 -12
 6547 0e08 00       		.byte	0
 6548 0e09 19       		.uleb128 0x19
 6549 0e0a F9260000 		.4byte	.LASF1268
 6550 0e0e 01       		.byte	0x1
 6551 0e0f 620B     		.2byte	0xb62
 6552 0e11 09050000 		.4byte	0x509
 6553 0e15 00000000 		.4byte	.LFB35
 6554 0e19 62000000 		.4byte	.LFE35-.LFB35
 6555 0e1d 01       		.uleb128 0x1
 6556 0e1e 9C       		.byte	0x9c
 6557 0e1f 510E0000 		.4byte	0xe51
 6558 0e23 15       		.uleb128 0x15
 6559 0e24 A1020000 		.4byte	.LASF1192
 6560 0e28 01       		.byte	0x1
 6561 0e29 620B     		.2byte	0xb62
 6562 0e2b DF040000 		.4byte	0x4df
 6563 0e2f 02       		.uleb128 0x2
 6564 0e30 91       		.byte	0x91
 6565 0e31 6E       		.sleb128 -18
 6566 0e32 15       		.uleb128 0x15
 6567 0e33 1F790000 		.4byte	.LASF1195
 6568 0e37 01       		.byte	0x1
 6569 0e38 620B     		.2byte	0xb62
 6570 0e3a F4040000 		.4byte	0x4f4
 6571 0e3e 02       		.uleb128 0x2
 6572 0e3f 91       		.byte	0x91
 6573 0e40 68       		.sleb128 -24
 6574 0e41 16       		.uleb128 0x16
 6575 0e42 DD0F0000 		.4byte	.LASF1198
 6576 0e46 01       		.byte	0x1
 6577 0e47 640B     		.2byte	0xb64
 6578 0e49 09050000 		.4byte	0x509
 6579 0e4d 02       		.uleb128 0x2
 6580 0e4e 91       		.byte	0x91
 6581 0e4f 74       		.sleb128 -12
 6582 0e50 00       		.byte	0
 6583 0e51 19       		.uleb128 0x19
 6584 0e52 564E0000 		.4byte	.LASF1269
 6585 0e56 01       		.byte	0x1
 6586 0e57 890B     		.2byte	0xb89
 6587 0e59 09010000 		.4byte	0x109
 6588 0e5d 00000000 		.4byte	.LFB36
 6589 0e61 16010000 		.4byte	.LFE36-.LFB36
 6590 0e65 01       		.uleb128 0x1
 6591 0e66 9C       		.byte	0x9c
 6592 0e67 FC0E0000 		.4byte	0xefc
 6593 0e6b 15       		.uleb128 0x15
 6594 0e6c 7F690000 		.4byte	.LASF1234
 6595 0e70 01       		.byte	0x1
 6596 0e71 890B     		.2byte	0xb89
 6597 0e73 51090000 		.4byte	0x951
 6598 0e77 02       		.uleb128 0x2
 6599 0e78 91       		.byte	0x91
 6600 0e79 54       		.sleb128 -44
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 184


 6601 0e7a 15       		.uleb128 0x15
 6602 0e7b BC070000 		.4byte	.LASF1270
 6603 0e7f 01       		.byte	0x1
 6604 0e80 890B     		.2byte	0xb89
 6605 0e82 E6090000 		.4byte	0x9e6
 6606 0e86 02       		.uleb128 0x2
 6607 0e87 91       		.byte	0x91
 6608 0e88 50       		.sleb128 -48
 6609 0e89 15       		.uleb128 0x15
 6610 0e8a 48360000 		.4byte	.LASF1271
 6611 0e8e 01       		.byte	0x1
 6612 0e8f 890B     		.2byte	0xb89
 6613 0e91 3E020000 		.4byte	0x23e
 6614 0e95 02       		.uleb128 0x2
 6615 0e96 91       		.byte	0x91
 6616 0e97 4F       		.sleb128 -49
 6617 0e98 16       		.uleb128 0x16
 6618 0e99 601D0000 		.4byte	.LASF1272
 6619 0e9d 01       		.byte	0x1
 6620 0e9e 8B0B     		.2byte	0xb8b
 6621 0ea0 FC0E0000 		.4byte	0xefc
 6622 0ea4 02       		.uleb128 0x2
 6623 0ea5 91       		.byte	0x91
 6624 0ea6 5C       		.sleb128 -36
 6625 0ea7 16       		.uleb128 0x16
 6626 0ea8 37490000 		.4byte	.LASF1273
 6627 0eac 01       		.byte	0x1
 6628 0ead 8B0B     		.2byte	0xb8b
 6629 0eaf FC0E0000 		.4byte	0xefc
 6630 0eb3 02       		.uleb128 0x2
 6631 0eb4 91       		.byte	0x91
 6632 0eb5 64       		.sleb128 -28
 6633 0eb6 16       		.uleb128 0x16
 6634 0eb7 3D8E0000 		.4byte	.LASF1237
 6635 0ebb 01       		.byte	0x1
 6636 0ebc 8C0B     		.2byte	0xb8c
 6637 0ebe 09010000 		.4byte	0x109
 6638 0ec2 02       		.uleb128 0x2
 6639 0ec3 91       		.byte	0x91
 6640 0ec4 6C       		.sleb128 -20
 6641 0ec5 24       		.uleb128 0x24
 6642 0ec6 1A000000 		.4byte	.LBB17
 6643 0eca 2C000000 		.4byte	.LBE17-.LBB17
 6644 0ece E20E0000 		.4byte	0xee2
 6645 0ed2 16       		.uleb128 0x16
 6646 0ed3 7A380000 		.4byte	.LASF1244
 6647 0ed7 01       		.byte	0x1
 6648 0ed8 900B     		.2byte	0xb90
 6649 0eda 640A0000 		.4byte	0xa64
 6650 0ede 02       		.uleb128 0x2
 6651 0edf 91       		.byte	0x91
 6652 0ee0 68       		.sleb128 -24
 6653 0ee1 00       		.byte	0
 6654 0ee2 17       		.uleb128 0x17
 6655 0ee3 46000000 		.4byte	.LBB18
 6656 0ee7 2C000000 		.4byte	.LBE18-.LBB18
 6657 0eeb 16       		.uleb128 0x16
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 185


 6658 0eec 7A380000 		.4byte	.LASF1244
 6659 0ef0 01       		.byte	0x1
 6660 0ef1 980B     		.2byte	0xb98
 6661 0ef3 640A0000 		.4byte	0xa64
 6662 0ef7 02       		.uleb128 0x2
 6663 0ef8 91       		.byte	0x91
 6664 0ef9 60       		.sleb128 -32
 6665 0efa 00       		.byte	0
 6666 0efb 00       		.byte	0
 6667 0efc 06       		.uleb128 0x6
 6668 0efd 04       		.byte	0x4
 6669 0efe 020F0000 		.4byte	0xf02
 6670 0f02 0E       		.uleb128 0xe
 6671 0f03 E3030000 		.4byte	0x3e3
 6672 0f07 25       		.uleb128 0x25
 6673 0f08 20580000 		.4byte	.LASF1274
 6674 0f0c 01       		.byte	0x1
 6675 0f0d DE0B     		.2byte	0xbde
 6676 0f0f C1000000 		.4byte	0xc1
 6677 0f13 00000000 		.4byte	.LFB37
 6678 0f17 36000000 		.4byte	.LFE37-.LFB37
 6679 0f1b 01       		.uleb128 0x1
 6680 0f1c 9C       		.byte	0x9c
 6681 0f1d 400F0000 		.4byte	0xf40
 6682 0f21 15       		.uleb128 0x15
 6683 0f22 9A7A0000 		.4byte	.LASF1275
 6684 0f26 01       		.byte	0x1
 6685 0f27 DE0B     		.2byte	0xbde
 6686 0f29 400F0000 		.4byte	0xf40
 6687 0f2d 02       		.uleb128 0x2
 6688 0f2e 91       		.byte	0x91
 6689 0f2f 6C       		.sleb128 -20
 6690 0f30 16       		.uleb128 0x16
 6691 0f31 3E2E0000 		.4byte	.LASF1276
 6692 0f35 01       		.byte	0x1
 6693 0f36 E00B     		.2byte	0xbe0
 6694 0f38 CC000000 		.4byte	0xcc
 6695 0f3c 02       		.uleb128 0x2
 6696 0f3d 91       		.byte	0x91
 6697 0f3e 74       		.sleb128 -12
 6698 0f3f 00       		.byte	0
 6699 0f40 06       		.uleb128 0x6
 6700 0f41 04       		.byte	0x4
 6701 0f42 460F0000 		.4byte	0xf46
 6702 0f46 07       		.uleb128 0x7
 6703 0f47 B6000000 		.4byte	0xb6
 6704 0f4b 14       		.uleb128 0x14
 6705 0f4c 1F590000 		.4byte	.LASF1277
 6706 0f50 01       		.byte	0x1
 6707 0f51 F20B     		.2byte	0xbf2
 6708 0f53 09010000 		.4byte	0x109
 6709 0f57 00000000 		.4byte	.LFB38
 6710 0f5b 38000000 		.4byte	.LFE38-.LFB38
 6711 0f5f 01       		.uleb128 0x1
 6712 0f60 9C       		.byte	0x9c
 6713 0f61 A20F0000 		.4byte	0xfa2
 6714 0f65 15       		.uleb128 0x15
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 186


 6715 0f66 BB4A0000 		.4byte	.LASF1213
 6716 0f6a 01       		.byte	0x1
 6717 0f6b F20B     		.2byte	0xbf2
 6718 0f6d 08020000 		.4byte	0x208
 6719 0f71 02       		.uleb128 0x2
 6720 0f72 91       		.byte	0x91
 6721 0f73 64       		.sleb128 -28
 6722 0f74 16       		.uleb128 0x16
 6723 0f75 DA9E0000 		.4byte	.LASF1200
 6724 0f79 01       		.byte	0x1
 6725 0f7a F40B     		.2byte	0xbf4
 6726 0f7c 09050000 		.4byte	0x509
 6727 0f80 02       		.uleb128 0x2
 6728 0f81 91       		.byte	0x91
 6729 0f82 74       		.sleb128 -12
 6730 0f83 16       		.uleb128 0x16
 6731 0f84 46380000 		.4byte	.LASF1278
 6732 0f88 01       		.byte	0x1
 6733 0f89 F50B     		.2byte	0xbf5
 6734 0f8b 2A010000 		.4byte	0x12a
 6735 0f8f 02       		.uleb128 0x2
 6736 0f90 91       		.byte	0x91
 6737 0f91 70       		.sleb128 -16
 6738 0f92 16       		.uleb128 0x16
 6739 0f93 EC0E0000 		.4byte	.LASF1214
 6740 0f97 01       		.byte	0x1
 6741 0f98 F60B     		.2byte	0xbf6
 6742 0f9a 09010000 		.4byte	0x109
 6743 0f9e 02       		.uleb128 0x2
 6744 0f9f 91       		.byte	0x91
 6745 0fa0 6C       		.sleb128 -20
 6746 0fa1 00       		.byte	0
 6747 0fa2 22       		.uleb128 0x22
 6748 0fa3 FF560000 		.4byte	.LASF1279
 6749 0fa7 01       		.byte	0x1
 6750 0fa8 0E0C     		.2byte	0xc0e
 6751 0faa 00000000 		.4byte	.LFB39
 6752 0fae 20000000 		.4byte	.LFE39-.LFB39
 6753 0fb2 01       		.uleb128 0x1
 6754 0fb3 9C       		.byte	0x9c
 6755 0fb4 C80F0000 		.4byte	0xfc8
 6756 0fb8 15       		.uleb128 0x15
 6757 0fb9 DA9E0000 		.4byte	.LASF1200
 6758 0fbd 01       		.byte	0x1
 6759 0fbe 0E0C     		.2byte	0xc0e
 6760 0fc0 09050000 		.4byte	0x509
 6761 0fc4 02       		.uleb128 0x2
 6762 0fc5 91       		.byte	0x91
 6763 0fc6 74       		.sleb128 -12
 6764 0fc7 00       		.byte	0
 6765 0fc8 26       		.uleb128 0x26
 6766 0fc9 B8230000 		.4byte	.LASF1280
 6767 0fcd 01       		.byte	0x1
 6768 0fce 230C     		.2byte	0xc23
 6769 0fd0 00000000 		.4byte	.LFB40
 6770 0fd4 48000000 		.4byte	.LFE40-.LFB40
 6771 0fd8 01       		.uleb128 0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 187


 6772 0fd9 9C       		.byte	0x9c
 6773 0fda EE0F0000 		.4byte	0xfee
 6774 0fde 16       		.uleb128 0x16
 6775 0fdf DA9E0000 		.4byte	.LASF1200
 6776 0fe3 01       		.byte	0x1
 6777 0fe4 250C     		.2byte	0xc25
 6778 0fe6 09050000 		.4byte	0x509
 6779 0fea 02       		.uleb128 0x2
 6780 0feb 91       		.byte	0x91
 6781 0fec 74       		.sleb128 -12
 6782 0fed 00       		.byte	0
 6783 0fee 20       		.uleb128 0x20
 6784 0fef 4C9E0000 		.4byte	.LASF1281
 6785 0ff3 01       		.byte	0x1
 6786 0ff4 3E0C     		.2byte	0xc3e
 6787 0ff6 08020000 		.4byte	0x208
 6788 0ffa 00000000 		.4byte	.LFB41
 6789 0ffe 1C000000 		.4byte	.LFE41-.LFB41
 6790 1002 01       		.uleb128 0x1
 6791 1003 9C       		.byte	0x9c
 6792 1004 18100000 		.4byte	0x1018
 6793 1008 16       		.uleb128 0x16
 6794 1009 27210000 		.4byte	.LASF1197
 6795 100d 01       		.byte	0x1
 6796 100e 400C     		.2byte	0xc40
 6797 1010 08020000 		.4byte	0x208
 6798 1014 02       		.uleb128 0x2
 6799 1015 91       		.byte	0x91
 6800 1016 74       		.sleb128 -12
 6801 1017 00       		.byte	0
 6802 1018 18       		.uleb128 0x18
 6803 1019 89650000 		.4byte	.LASF1282
 6804 101d 01       		.byte	0x1
 6805 101e 6B0C     		.2byte	0xc6b
 6806 1020 00000000 		.4byte	.LFB42
 6807 1024 EC000000 		.4byte	.LFE42-.LFB42
 6808 1028 01       		.uleb128 0x1
 6809 1029 9C       		.byte	0x9c
 6810 102a 4D100000 		.4byte	0x104d
 6811 102e 15       		.uleb128 0x15
 6812 102f 2E470000 		.4byte	.LASF1283
 6813 1033 01       		.byte	0x1
 6814 1034 6B0C     		.2byte	0xc6b
 6815 1036 49070000 		.4byte	0x749
 6816 103a 02       		.uleb128 0x2
 6817 103b 91       		.byte	0x91
 6818 103c 6C       		.sleb128 -20
 6819 103d 16       		.uleb128 0x16
 6820 103e DA9E0000 		.4byte	.LASF1200
 6821 1042 01       		.byte	0x1
 6822 1043 6D0C     		.2byte	0xc6d
 6823 1045 93070000 		.4byte	0x793
 6824 1049 02       		.uleb128 0x2
 6825 104a 91       		.byte	0x91
 6826 104b 74       		.sleb128 -12
 6827 104c 00       		.byte	0
 6828 104d 14       		.uleb128 0x14
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 188


 6829 104e 560B0000 		.4byte	.LASF1284
 6830 1052 01       		.byte	0x1
 6831 1053 AA0C     		.2byte	0xcaa
 6832 1055 FE000000 		.4byte	0xfe
 6833 1059 00000000 		.4byte	.LFB43
 6834 105d D8000000 		.4byte	.LFE43-.LFB43
 6835 1061 01       		.uleb128 0x1
 6836 1062 9C       		.byte	0x9c
 6837 1063 95100000 		.4byte	0x1095
 6838 1067 15       		.uleb128 0x15
 6839 1068 2E470000 		.4byte	.LASF1283
 6840 106c 01       		.byte	0x1
 6841 106d AA0C     		.2byte	0xcaa
 6842 106f 49070000 		.4byte	0x749
 6843 1073 02       		.uleb128 0x2
 6844 1074 91       		.byte	0x91
 6845 1075 6C       		.sleb128 -20
 6846 1076 16       		.uleb128 0x16
 6847 1077 DA9E0000 		.4byte	.LASF1200
 6848 107b 01       		.byte	0x1
 6849 107c AC0C     		.2byte	0xcac
 6850 107e 93070000 		.4byte	0x793
 6851 1082 02       		.uleb128 0x2
 6852 1083 91       		.byte	0x91
 6853 1084 70       		.sleb128 -16
 6854 1085 16       		.uleb128 0x16
 6855 1086 27210000 		.4byte	.LASF1197
 6856 108a 01       		.byte	0x1
 6857 108b AD0C     		.2byte	0xcad
 6858 108d FE000000 		.4byte	0xfe
 6859 1091 02       		.uleb128 0x2
 6860 1092 91       		.byte	0x91
 6861 1093 74       		.sleb128 -12
 6862 1094 00       		.byte	0
 6863 1095 20       		.uleb128 0x20
 6864 1096 5C300000 		.4byte	.LASF1285
 6865 109a 01       		.byte	0x1
 6866 109b F80D     		.2byte	0xdf8
 6867 109d 1F010000 		.4byte	0x11f
 6868 10a1 00000000 		.4byte	.LFB44
 6869 10a5 30000000 		.4byte	.LFE44-.LFB44
 6870 10a9 01       		.uleb128 0x1
 6871 10aa 9C       		.byte	0x9c
 6872 10ab BF100000 		.4byte	0x10bf
 6873 10af 16       		.uleb128 0x16
 6874 10b0 EC0E0000 		.4byte	.LASF1214
 6875 10b4 01       		.byte	0x1
 6876 10b5 FA0D     		.2byte	0xdfa
 6877 10b7 1F010000 		.4byte	0x11f
 6878 10bb 02       		.uleb128 0x2
 6879 10bc 91       		.byte	0x91
 6880 10bd 74       		.sleb128 -12
 6881 10be 00       		.byte	0
 6882 10bf 1C       		.uleb128 0x1c
 6883 10c0 3C390000 		.4byte	.LASF1287
 6884 10c4 01       		.byte	0x1
 6885 10c5 080E     		.2byte	0xe08
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 189


 6886 10c7 A2000000 		.4byte	0xa2
 6887 10cb 00000000 		.4byte	.LFB45
 6888 10cf 28000000 		.4byte	.LFE45-.LFB45
 6889 10d3 01       		.uleb128 0x1
 6890 10d4 9C       		.byte	0x9c
 6891 10d5 0F       		.uleb128 0xf
 6892 10d6 FD010000 		.4byte	0x1fd
 6893 10da E5100000 		.4byte	0x10e5
 6894 10de 10       		.uleb128 0x10
 6895 10df 9B000000 		.4byte	0x9b
 6896 10e3 07       		.byte	0x7
 6897 10e4 00       		.byte	0
 6898 10e5 27       		.uleb128 0x27
 6899 10e6 53530000 		.4byte	.LASF1288
 6900 10ea 01       		.byte	0x1
 6901 10eb BF       		.byte	0xbf
 6902 10ec D5100000 		.4byte	0x10d5
 6903 10f0 05       		.uleb128 0x5
 6904 10f1 03       		.byte	0x3
 6905 10f2 00000000 		.4byte	pxReadyTasksLists
 6906 10f6 27       		.uleb128 0x27
 6907 10f7 03980000 		.4byte	.LASF1289
 6908 10fb 01       		.byte	0x1
 6909 10fc C0       		.byte	0xc0
 6910 10fd FD010000 		.4byte	0x1fd
 6911 1101 05       		.uleb128 0x5
 6912 1102 03       		.byte	0x3
 6913 1103 00000000 		.4byte	xDelayedTaskList1
 6914 1107 27       		.uleb128 0x27
 6915 1108 15980000 		.4byte	.LASF1290
 6916 110c 01       		.byte	0x1
 6917 110d C1       		.byte	0xc1
 6918 110e FD010000 		.4byte	0x1fd
 6919 1112 05       		.uleb128 0x5
 6920 1113 03       		.byte	0x3
 6921 1114 00000000 		.4byte	xDelayedTaskList2
 6922 1118 27       		.uleb128 0x27
 6923 1119 B87C0000 		.4byte	.LASF1291
 6924 111d 01       		.byte	0x1
 6925 111e C2       		.byte	0xc2
 6926 111f 29110000 		.4byte	0x1129
 6927 1123 05       		.uleb128 0x5
 6928 1124 03       		.byte	0x3
 6929 1125 00000000 		.4byte	pxDelayedTaskList
 6930 1129 0E       		.uleb128 0xe
 6931 112a E6090000 		.4byte	0x9e6
 6932 112e 27       		.uleb128 0x27
 6933 112f 9F7E0000 		.4byte	.LASF1292
 6934 1133 01       		.byte	0x1
 6935 1134 C3       		.byte	0xc3
 6936 1135 29110000 		.4byte	0x1129
 6937 1139 05       		.uleb128 0x5
 6938 113a 03       		.byte	0x3
 6939 113b 00000000 		.4byte	pxOverflowDelayedTaskList
 6940 113f 27       		.uleb128 0x27
 6941 1140 C3330000 		.4byte	.LASF1293
 6942 1144 01       		.byte	0x1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 190


 6943 1145 C4       		.byte	0xc4
 6944 1146 FD010000 		.4byte	0x1fd
 6945 114a 05       		.uleb128 0x5
 6946 114b 03       		.byte	0x3
 6947 114c 00000000 		.4byte	xPendingReadyList
 6948 1150 27       		.uleb128 0x27
 6949 1151 81880000 		.4byte	.LASF1294
 6950 1155 01       		.byte	0x1
 6951 1156 C8       		.byte	0xc8
 6952 1157 FD010000 		.4byte	0x1fd
 6953 115b 05       		.uleb128 0x5
 6954 115c 03       		.byte	0x3
 6955 115d 00000000 		.4byte	xTasksWaitingTermination
 6956 1161 27       		.uleb128 0x27
 6957 1162 753A0000 		.4byte	.LASF1295
 6958 1166 01       		.byte	0x1
 6959 1167 C9       		.byte	0xc9
 6960 1168 72110000 		.4byte	0x1172
 6961 116c 05       		.uleb128 0x5
 6962 116d 03       		.byte	0x3
 6963 116e 00000000 		.4byte	uxTasksDeleted
 6964 1172 0E       		.uleb128 0xe
 6965 1173 09010000 		.4byte	0x109
 6966 1177 27       		.uleb128 0x27
 6967 1178 421C0000 		.4byte	.LASF1296
 6968 117c 01       		.byte	0x1
 6969 117d CF       		.byte	0xcf
 6970 117e FD010000 		.4byte	0x1fd
 6971 1182 05       		.uleb128 0x5
 6972 1183 03       		.byte	0x3
 6973 1184 00000000 		.4byte	xSuspendedTaskList
 6974 1188 27       		.uleb128 0x27
 6975 1189 003D0000 		.4byte	.LASF1297
 6976 118d 01       		.byte	0x1
 6977 118e DA       		.byte	0xda
 6978 118f 72110000 		.4byte	0x1172
 6979 1193 05       		.uleb128 0x5
 6980 1194 03       		.byte	0x3
 6981 1195 00000000 		.4byte	uxCurrentNumberOfTasks
 6982 1199 27       		.uleb128 0x27
 6983 119a 66070000 		.4byte	.LASF1298
 6984 119e 01       		.byte	0x1
 6985 119f DB       		.byte	0xdb
 6986 11a0 AA110000 		.4byte	0x11aa
 6987 11a4 05       		.uleb128 0x5
 6988 11a5 03       		.byte	0x3
 6989 11a6 00000000 		.4byte	xTickCount
 6990 11aa 0E       		.uleb128 0xe
 6991 11ab 1F010000 		.4byte	0x11f
 6992 11af 27       		.uleb128 0x27
 6993 11b0 8D750000 		.4byte	.LASF1299
 6994 11b4 01       		.byte	0x1
 6995 11b5 DC       		.byte	0xdc
 6996 11b6 72110000 		.4byte	0x1172
 6997 11ba 05       		.uleb128 0x5
 6998 11bb 03       		.byte	0x3
 6999 11bc 00000000 		.4byte	uxTopReadyPriority
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 191


 7000 11c0 27       		.uleb128 0x27
 7001 11c1 29270000 		.4byte	.LASF1300
 7002 11c5 01       		.byte	0x1
 7003 11c6 DD       		.byte	0xdd
 7004 11c7 D1110000 		.4byte	0x11d1
 7005 11cb 05       		.uleb128 0x5
 7006 11cc 03       		.byte	0x3
 7007 11cd 00000000 		.4byte	xSchedulerRunning
 7008 11d1 0E       		.uleb128 0xe
 7009 11d2 FE000000 		.4byte	0xfe
 7010 11d6 27       		.uleb128 0x27
 7011 11d7 75240000 		.4byte	.LASF1301
 7012 11db 01       		.byte	0x1
 7013 11dc DE       		.byte	0xde
 7014 11dd 72110000 		.4byte	0x1172
 7015 11e1 05       		.uleb128 0x5
 7016 11e2 03       		.byte	0x3
 7017 11e3 00000000 		.4byte	uxPendedTicks
 7018 11e7 27       		.uleb128 0x27
 7019 11e8 97000000 		.4byte	.LASF1302
 7020 11ec 01       		.byte	0x1
 7021 11ed DF       		.byte	0xdf
 7022 11ee D1110000 		.4byte	0x11d1
 7023 11f2 05       		.uleb128 0x5
 7024 11f3 03       		.byte	0x3
 7025 11f4 00000000 		.4byte	xYieldPending
 7026 11f8 27       		.uleb128 0x27
 7027 11f9 BC200000 		.4byte	.LASF1303
 7028 11fd 01       		.byte	0x1
 7029 11fe E0       		.byte	0xe0
 7030 11ff D1110000 		.4byte	0x11d1
 7031 1203 05       		.uleb128 0x5
 7032 1204 03       		.byte	0x3
 7033 1205 00000000 		.4byte	xNumOfOverflows
 7034 1209 27       		.uleb128 0x27
 7035 120a 71070000 		.4byte	.LASF1186
 7036 120e 01       		.byte	0x1
 7037 120f E1       		.byte	0xe1
 7038 1210 09010000 		.4byte	0x109
 7039 1214 05       		.uleb128 0x5
 7040 1215 03       		.byte	0x3
 7041 1216 00000000 		.4byte	uxTaskNumber
 7042 121a 27       		.uleb128 0x27
 7043 121b 2E320000 		.4byte	.LASF1304
 7044 121f 01       		.byte	0x1
 7045 1220 E2       		.byte	0xe2
 7046 1221 AA110000 		.4byte	0x11aa
 7047 1225 05       		.uleb128 0x5
 7048 1226 03       		.byte	0x3
 7049 1227 00000000 		.4byte	xNextTaskUnblockTime
 7050 122b 27       		.uleb128 0x27
 7051 122c 8B100000 		.4byte	.LASF1305
 7052 1230 01       		.byte	0x1
 7053 1231 EC       		.byte	0xec
 7054 1232 72110000 		.4byte	0x1172
 7055 1236 05       		.uleb128 0x5
 7056 1237 03       		.byte	0x3
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 192


 7057 1238 00000000 		.4byte	uxSchedulerSuspended
 7058 123c 28       		.uleb128 0x28
 7059 123d 64150000 		.4byte	.LASF1312
 7060 1241 01       		.byte	0x1
 7061 1242 BC       		.byte	0xbc
 7062 1243 4D120000 		.4byte	0x124d
 7063 1247 05       		.uleb128 0x5
 7064 1248 03       		.byte	0x3
 7065 1249 00000000 		.4byte	pxCurrentTCB
 7066 124d 0E       		.uleb128 0xe
 7067 124e 09050000 		.4byte	0x509
 7068 1252 00       		.byte	0
 7069              		.section	.debug_abbrev,"",%progbits
 7070              	.Ldebug_abbrev0:
 7071 0000 01       		.uleb128 0x1
 7072 0001 11       		.uleb128 0x11
 7073 0002 01       		.byte	0x1
 7074 0003 25       		.uleb128 0x25
 7075 0004 0E       		.uleb128 0xe
 7076 0005 13       		.uleb128 0x13
 7077 0006 0B       		.uleb128 0xb
 7078 0007 03       		.uleb128 0x3
 7079 0008 0E       		.uleb128 0xe
 7080 0009 1B       		.uleb128 0x1b
 7081 000a 0E       		.uleb128 0xe
 7082 000b 55       		.uleb128 0x55
 7083 000c 17       		.uleb128 0x17
 7084 000d 11       		.uleb128 0x11
 7085 000e 01       		.uleb128 0x1
 7086 000f 10       		.uleb128 0x10
 7087 0010 17       		.uleb128 0x17
 7088 0011 9942     		.uleb128 0x2119
 7089 0013 17       		.uleb128 0x17
 7090 0014 00       		.byte	0
 7091 0015 00       		.byte	0
 7092 0016 02       		.uleb128 0x2
 7093 0017 16       		.uleb128 0x16
 7094 0018 00       		.byte	0
 7095 0019 03       		.uleb128 0x3
 7096 001a 0E       		.uleb128 0xe
 7097 001b 3A       		.uleb128 0x3a
 7098 001c 0B       		.uleb128 0xb
 7099 001d 3B       		.uleb128 0x3b
 7100 001e 0B       		.uleb128 0xb
 7101 001f 49       		.uleb128 0x49
 7102 0020 13       		.uleb128 0x13
 7103 0021 00       		.byte	0
 7104 0022 00       		.byte	0
 7105 0023 03       		.uleb128 0x3
 7106 0024 24       		.uleb128 0x24
 7107 0025 00       		.byte	0
 7108 0026 0B       		.uleb128 0xb
 7109 0027 0B       		.uleb128 0xb
 7110 0028 3E       		.uleb128 0x3e
 7111 0029 0B       		.uleb128 0xb
 7112 002a 03       		.uleb128 0x3
 7113 002b 0E       		.uleb128 0xe
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 193


 7114 002c 00       		.byte	0
 7115 002d 00       		.byte	0
 7116 002e 04       		.uleb128 0x4
 7117 002f 24       		.uleb128 0x24
 7118 0030 00       		.byte	0
 7119 0031 0B       		.uleb128 0xb
 7120 0032 0B       		.uleb128 0xb
 7121 0033 3E       		.uleb128 0x3e
 7122 0034 0B       		.uleb128 0xb
 7123 0035 03       		.uleb128 0x3
 7124 0036 08       		.uleb128 0x8
 7125 0037 00       		.byte	0
 7126 0038 00       		.byte	0
 7127 0039 05       		.uleb128 0x5
 7128 003a 0F       		.uleb128 0xf
 7129 003b 00       		.byte	0
 7130 003c 0B       		.uleb128 0xb
 7131 003d 0B       		.uleb128 0xb
 7132 003e 00       		.byte	0
 7133 003f 00       		.byte	0
 7134 0040 06       		.uleb128 0x6
 7135 0041 0F       		.uleb128 0xf
 7136 0042 00       		.byte	0
 7137 0043 0B       		.uleb128 0xb
 7138 0044 0B       		.uleb128 0xb
 7139 0045 49       		.uleb128 0x49
 7140 0046 13       		.uleb128 0x13
 7141 0047 00       		.byte	0
 7142 0048 00       		.byte	0
 7143 0049 07       		.uleb128 0x7
 7144 004a 26       		.uleb128 0x26
 7145 004b 00       		.byte	0
 7146 004c 49       		.uleb128 0x49
 7147 004d 13       		.uleb128 0x13
 7148 004e 00       		.byte	0
 7149 004f 00       		.byte	0
 7150 0050 08       		.uleb128 0x8
 7151 0051 15       		.uleb128 0x15
 7152 0052 01       		.byte	0x1
 7153 0053 27       		.uleb128 0x27
 7154 0054 19       		.uleb128 0x19
 7155 0055 01       		.uleb128 0x1
 7156 0056 13       		.uleb128 0x13
 7157 0057 00       		.byte	0
 7158 0058 00       		.byte	0
 7159 0059 09       		.uleb128 0x9
 7160 005a 05       		.uleb128 0x5
 7161 005b 00       		.byte	0
 7162 005c 49       		.uleb128 0x49
 7163 005d 13       		.uleb128 0x13
 7164 005e 00       		.byte	0
 7165 005f 00       		.byte	0
 7166 0060 0A       		.uleb128 0xa
 7167 0061 13       		.uleb128 0x13
 7168 0062 01       		.byte	0x1
 7169 0063 03       		.uleb128 0x3
 7170 0064 0E       		.uleb128 0xe
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 194


 7171 0065 0B       		.uleb128 0xb
 7172 0066 0B       		.uleb128 0xb
 7173 0067 3A       		.uleb128 0x3a
 7174 0068 0B       		.uleb128 0xb
 7175 0069 3B       		.uleb128 0x3b
 7176 006a 0B       		.uleb128 0xb
 7177 006b 01       		.uleb128 0x1
 7178 006c 13       		.uleb128 0x13
 7179 006d 00       		.byte	0
 7180 006e 00       		.byte	0
 7181 006f 0B       		.uleb128 0xb
 7182 0070 0D       		.uleb128 0xd
 7183 0071 00       		.byte	0
 7184 0072 03       		.uleb128 0x3
 7185 0073 0E       		.uleb128 0xe
 7186 0074 3A       		.uleb128 0x3a
 7187 0075 0B       		.uleb128 0xb
 7188 0076 3B       		.uleb128 0x3b
 7189 0077 0B       		.uleb128 0xb
 7190 0078 49       		.uleb128 0x49
 7191 0079 13       		.uleb128 0x13
 7192 007a 38       		.uleb128 0x38
 7193 007b 0B       		.uleb128 0xb
 7194 007c 00       		.byte	0
 7195 007d 00       		.byte	0
 7196 007e 0C       		.uleb128 0xc
 7197 007f 04       		.uleb128 0x4
 7198 0080 01       		.byte	0x1
 7199 0081 0B       		.uleb128 0xb
 7200 0082 0B       		.uleb128 0xb
 7201 0083 49       		.uleb128 0x49
 7202 0084 13       		.uleb128 0x13
 7203 0085 3A       		.uleb128 0x3a
 7204 0086 0B       		.uleb128 0xb
 7205 0087 3B       		.uleb128 0x3b
 7206 0088 0B       		.uleb128 0xb
 7207 0089 01       		.uleb128 0x1
 7208 008a 13       		.uleb128 0x13
 7209 008b 00       		.byte	0
 7210 008c 00       		.byte	0
 7211 008d 0D       		.uleb128 0xd
 7212 008e 28       		.uleb128 0x28
 7213 008f 00       		.byte	0
 7214 0090 03       		.uleb128 0x3
 7215 0091 0E       		.uleb128 0xe
 7216 0092 1C       		.uleb128 0x1c
 7217 0093 0B       		.uleb128 0xb
 7218 0094 00       		.byte	0
 7219 0095 00       		.byte	0
 7220 0096 0E       		.uleb128 0xe
 7221 0097 35       		.uleb128 0x35
 7222 0098 00       		.byte	0
 7223 0099 49       		.uleb128 0x49
 7224 009a 13       		.uleb128 0x13
 7225 009b 00       		.byte	0
 7226 009c 00       		.byte	0
 7227 009d 0F       		.uleb128 0xf
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 195


 7228 009e 01       		.uleb128 0x1
 7229 009f 01       		.byte	0x1
 7230 00a0 49       		.uleb128 0x49
 7231 00a1 13       		.uleb128 0x13
 7232 00a2 01       		.uleb128 0x1
 7233 00a3 13       		.uleb128 0x13
 7234 00a4 00       		.byte	0
 7235 00a5 00       		.byte	0
 7236 00a6 10       		.uleb128 0x10
 7237 00a7 21       		.uleb128 0x21
 7238 00a8 00       		.byte	0
 7239 00a9 49       		.uleb128 0x49
 7240 00aa 13       		.uleb128 0x13
 7241 00ab 2F       		.uleb128 0x2f
 7242 00ac 0B       		.uleb128 0xb
 7243 00ad 00       		.byte	0
 7244 00ae 00       		.byte	0
 7245 00af 11       		.uleb128 0x11
 7246 00b0 2E       		.uleb128 0x2e
 7247 00b1 01       		.byte	0x1
 7248 00b2 03       		.uleb128 0x3
 7249 00b3 0E       		.uleb128 0xe
 7250 00b4 3A       		.uleb128 0x3a
 7251 00b5 0B       		.uleb128 0xb
 7252 00b6 3B       		.uleb128 0x3b
 7253 00b7 0B       		.uleb128 0xb
 7254 00b8 27       		.uleb128 0x27
 7255 00b9 19       		.uleb128 0x19
 7256 00ba 49       		.uleb128 0x49
 7257 00bb 13       		.uleb128 0x13
 7258 00bc 20       		.uleb128 0x20
 7259 00bd 0B       		.uleb128 0xb
 7260 00be 01       		.uleb128 0x1
 7261 00bf 13       		.uleb128 0x13
 7262 00c0 00       		.byte	0
 7263 00c1 00       		.byte	0
 7264 00c2 12       		.uleb128 0x12
 7265 00c3 05       		.uleb128 0x5
 7266 00c4 00       		.byte	0
 7267 00c5 03       		.uleb128 0x3
 7268 00c6 0E       		.uleb128 0xe
 7269 00c7 3A       		.uleb128 0x3a
 7270 00c8 0B       		.uleb128 0xb
 7271 00c9 3B       		.uleb128 0x3b
 7272 00ca 0B       		.uleb128 0xb
 7273 00cb 49       		.uleb128 0x49
 7274 00cc 13       		.uleb128 0x13
 7275 00cd 00       		.byte	0
 7276 00ce 00       		.byte	0
 7277 00cf 13       		.uleb128 0x13
 7278 00d0 34       		.uleb128 0x34
 7279 00d1 00       		.byte	0
 7280 00d2 03       		.uleb128 0x3
 7281 00d3 0E       		.uleb128 0xe
 7282 00d4 3A       		.uleb128 0x3a
 7283 00d5 0B       		.uleb128 0xb
 7284 00d6 3B       		.uleb128 0x3b
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 196


 7285 00d7 0B       		.uleb128 0xb
 7286 00d8 49       		.uleb128 0x49
 7287 00d9 13       		.uleb128 0x13
 7288 00da 00       		.byte	0
 7289 00db 00       		.byte	0
 7290 00dc 14       		.uleb128 0x14
 7291 00dd 2E       		.uleb128 0x2e
 7292 00de 01       		.byte	0x1
 7293 00df 3F       		.uleb128 0x3f
 7294 00e0 19       		.uleb128 0x19
 7295 00e1 03       		.uleb128 0x3
 7296 00e2 0E       		.uleb128 0xe
 7297 00e3 3A       		.uleb128 0x3a
 7298 00e4 0B       		.uleb128 0xb
 7299 00e5 3B       		.uleb128 0x3b
 7300 00e6 05       		.uleb128 0x5
 7301 00e7 27       		.uleb128 0x27
 7302 00e8 19       		.uleb128 0x19
 7303 00e9 49       		.uleb128 0x49
 7304 00ea 13       		.uleb128 0x13
 7305 00eb 11       		.uleb128 0x11
 7306 00ec 01       		.uleb128 0x1
 7307 00ed 12       		.uleb128 0x12
 7308 00ee 06       		.uleb128 0x6
 7309 00ef 40       		.uleb128 0x40
 7310 00f0 18       		.uleb128 0x18
 7311 00f1 9642     		.uleb128 0x2116
 7312 00f3 19       		.uleb128 0x19
 7313 00f4 01       		.uleb128 0x1
 7314 00f5 13       		.uleb128 0x13
 7315 00f6 00       		.byte	0
 7316 00f7 00       		.byte	0
 7317 00f8 15       		.uleb128 0x15
 7318 00f9 05       		.uleb128 0x5
 7319 00fa 00       		.byte	0
 7320 00fb 03       		.uleb128 0x3
 7321 00fc 0E       		.uleb128 0xe
 7322 00fd 3A       		.uleb128 0x3a
 7323 00fe 0B       		.uleb128 0xb
 7324 00ff 3B       		.uleb128 0x3b
 7325 0100 05       		.uleb128 0x5
 7326 0101 49       		.uleb128 0x49
 7327 0102 13       		.uleb128 0x13
 7328 0103 02       		.uleb128 0x2
 7329 0104 18       		.uleb128 0x18
 7330 0105 00       		.byte	0
 7331 0106 00       		.byte	0
 7332 0107 16       		.uleb128 0x16
 7333 0108 34       		.uleb128 0x34
 7334 0109 00       		.byte	0
 7335 010a 03       		.uleb128 0x3
 7336 010b 0E       		.uleb128 0xe
 7337 010c 3A       		.uleb128 0x3a
 7338 010d 0B       		.uleb128 0xb
 7339 010e 3B       		.uleb128 0x3b
 7340 010f 05       		.uleb128 0x5
 7341 0110 49       		.uleb128 0x49
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 197


 7342 0111 13       		.uleb128 0x13
 7343 0112 02       		.uleb128 0x2
 7344 0113 18       		.uleb128 0x18
 7345 0114 00       		.byte	0
 7346 0115 00       		.byte	0
 7347 0116 17       		.uleb128 0x17
 7348 0117 0B       		.uleb128 0xb
 7349 0118 01       		.byte	0x1
 7350 0119 11       		.uleb128 0x11
 7351 011a 01       		.uleb128 0x1
 7352 011b 12       		.uleb128 0x12
 7353 011c 06       		.uleb128 0x6
 7354 011d 00       		.byte	0
 7355 011e 00       		.byte	0
 7356 011f 18       		.uleb128 0x18
 7357 0120 2E       		.uleb128 0x2e
 7358 0121 01       		.byte	0x1
 7359 0122 3F       		.uleb128 0x3f
 7360 0123 19       		.uleb128 0x19
 7361 0124 03       		.uleb128 0x3
 7362 0125 0E       		.uleb128 0xe
 7363 0126 3A       		.uleb128 0x3a
 7364 0127 0B       		.uleb128 0xb
 7365 0128 3B       		.uleb128 0x3b
 7366 0129 05       		.uleb128 0x5
 7367 012a 27       		.uleb128 0x27
 7368 012b 19       		.uleb128 0x19
 7369 012c 11       		.uleb128 0x11
 7370 012d 01       		.uleb128 0x1
 7371 012e 12       		.uleb128 0x12
 7372 012f 06       		.uleb128 0x6
 7373 0130 40       		.uleb128 0x40
 7374 0131 18       		.uleb128 0x18
 7375 0132 9642     		.uleb128 0x2116
 7376 0134 19       		.uleb128 0x19
 7377 0135 01       		.uleb128 0x1
 7378 0136 13       		.uleb128 0x13
 7379 0137 00       		.byte	0
 7380 0138 00       		.byte	0
 7381 0139 19       		.uleb128 0x19
 7382 013a 2E       		.uleb128 0x2e
 7383 013b 01       		.byte	0x1
 7384 013c 03       		.uleb128 0x3
 7385 013d 0E       		.uleb128 0xe
 7386 013e 3A       		.uleb128 0x3a
 7387 013f 0B       		.uleb128 0xb
 7388 0140 3B       		.uleb128 0x3b
 7389 0141 05       		.uleb128 0x5
 7390 0142 27       		.uleb128 0x27
 7391 0143 19       		.uleb128 0x19
 7392 0144 49       		.uleb128 0x49
 7393 0145 13       		.uleb128 0x13
 7394 0146 11       		.uleb128 0x11
 7395 0147 01       		.uleb128 0x1
 7396 0148 12       		.uleb128 0x12
 7397 0149 06       		.uleb128 0x6
 7398 014a 40       		.uleb128 0x40
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 198


 7399 014b 18       		.uleb128 0x18
 7400 014c 9642     		.uleb128 0x2116
 7401 014e 19       		.uleb128 0x19
 7402 014f 01       		.uleb128 0x1
 7403 0150 13       		.uleb128 0x13
 7404 0151 00       		.byte	0
 7405 0152 00       		.byte	0
 7406 0153 1A       		.uleb128 0x1a
 7407 0154 2E       		.uleb128 0x2e
 7408 0155 00       		.byte	0
 7409 0156 3F       		.uleb128 0x3f
 7410 0157 19       		.uleb128 0x19
 7411 0158 03       		.uleb128 0x3
 7412 0159 0E       		.uleb128 0xe
 7413 015a 3A       		.uleb128 0x3a
 7414 015b 0B       		.uleb128 0xb
 7415 015c 3B       		.uleb128 0x3b
 7416 015d 05       		.uleb128 0x5
 7417 015e 27       		.uleb128 0x27
 7418 015f 19       		.uleb128 0x19
 7419 0160 11       		.uleb128 0x11
 7420 0161 01       		.uleb128 0x1
 7421 0162 12       		.uleb128 0x12
 7422 0163 06       		.uleb128 0x6
 7423 0164 40       		.uleb128 0x40
 7424 0165 18       		.uleb128 0x18
 7425 0166 9642     		.uleb128 0x2116
 7426 0168 19       		.uleb128 0x19
 7427 0169 00       		.byte	0
 7428 016a 00       		.byte	0
 7429 016b 1B       		.uleb128 0x1b
 7430 016c 2E       		.uleb128 0x2e
 7431 016d 00       		.byte	0
 7432 016e 3F       		.uleb128 0x3f
 7433 016f 19       		.uleb128 0x19
 7434 0170 03       		.uleb128 0x3
 7435 0171 0E       		.uleb128 0xe
 7436 0172 3A       		.uleb128 0x3a
 7437 0173 0B       		.uleb128 0xb
 7438 0174 3B       		.uleb128 0x3b
 7439 0175 05       		.uleb128 0x5
 7440 0176 27       		.uleb128 0x27
 7441 0177 19       		.uleb128 0x19
 7442 0178 11       		.uleb128 0x11
 7443 0179 01       		.uleb128 0x1
 7444 017a 12       		.uleb128 0x12
 7445 017b 06       		.uleb128 0x6
 7446 017c 40       		.uleb128 0x40
 7447 017d 18       		.uleb128 0x18
 7448 017e 9742     		.uleb128 0x2117
 7449 0180 19       		.uleb128 0x19
 7450 0181 00       		.byte	0
 7451 0182 00       		.byte	0
 7452 0183 1C       		.uleb128 0x1c
 7453 0184 2E       		.uleb128 0x2e
 7454 0185 00       		.byte	0
 7455 0186 3F       		.uleb128 0x3f
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 199


 7456 0187 19       		.uleb128 0x19
 7457 0188 03       		.uleb128 0x3
 7458 0189 0E       		.uleb128 0xe
 7459 018a 3A       		.uleb128 0x3a
 7460 018b 0B       		.uleb128 0xb
 7461 018c 3B       		.uleb128 0x3b
 7462 018d 05       		.uleb128 0x5
 7463 018e 27       		.uleb128 0x27
 7464 018f 19       		.uleb128 0x19
 7465 0190 49       		.uleb128 0x49
 7466 0191 13       		.uleb128 0x13
 7467 0192 11       		.uleb128 0x11
 7468 0193 01       		.uleb128 0x1
 7469 0194 12       		.uleb128 0x12
 7470 0195 06       		.uleb128 0x6
 7471 0196 40       		.uleb128 0x40
 7472 0197 18       		.uleb128 0x18
 7473 0198 9742     		.uleb128 0x2117
 7474 019a 19       		.uleb128 0x19
 7475 019b 00       		.byte	0
 7476 019c 00       		.byte	0
 7477 019d 1D       		.uleb128 0x1d
 7478 019e 1D       		.uleb128 0x1d
 7479 019f 01       		.byte	0x1
 7480 01a0 31       		.uleb128 0x31
 7481 01a1 13       		.uleb128 0x13
 7482 01a2 11       		.uleb128 0x11
 7483 01a3 01       		.uleb128 0x1
 7484 01a4 12       		.uleb128 0x12
 7485 01a5 06       		.uleb128 0x6
 7486 01a6 58       		.uleb128 0x58
 7487 01a7 0B       		.uleb128 0xb
 7488 01a8 59       		.uleb128 0x59
 7489 01a9 05       		.uleb128 0x5
 7490 01aa 01       		.uleb128 0x1
 7491 01ab 13       		.uleb128 0x13
 7492 01ac 00       		.byte	0
 7493 01ad 00       		.byte	0
 7494 01ae 1E       		.uleb128 0x1e
 7495 01af 05       		.uleb128 0x5
 7496 01b0 00       		.byte	0
 7497 01b1 31       		.uleb128 0x31
 7498 01b2 13       		.uleb128 0x13
 7499 01b3 02       		.uleb128 0x2
 7500 01b4 18       		.uleb128 0x18
 7501 01b5 00       		.byte	0
 7502 01b6 00       		.byte	0
 7503 01b7 1F       		.uleb128 0x1f
 7504 01b8 34       		.uleb128 0x34
 7505 01b9 00       		.byte	0
 7506 01ba 31       		.uleb128 0x31
 7507 01bb 13       		.uleb128 0x13
 7508 01bc 02       		.uleb128 0x2
 7509 01bd 18       		.uleb128 0x18
 7510 01be 00       		.byte	0
 7511 01bf 00       		.byte	0
 7512 01c0 20       		.uleb128 0x20
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 200


 7513 01c1 2E       		.uleb128 0x2e
 7514 01c2 01       		.byte	0x1
 7515 01c3 3F       		.uleb128 0x3f
 7516 01c4 19       		.uleb128 0x19
 7517 01c5 03       		.uleb128 0x3
 7518 01c6 0E       		.uleb128 0xe
 7519 01c7 3A       		.uleb128 0x3a
 7520 01c8 0B       		.uleb128 0xb
 7521 01c9 3B       		.uleb128 0x3b
 7522 01ca 05       		.uleb128 0x5
 7523 01cb 27       		.uleb128 0x27
 7524 01cc 19       		.uleb128 0x19
 7525 01cd 49       		.uleb128 0x49
 7526 01ce 13       		.uleb128 0x13
 7527 01cf 11       		.uleb128 0x11
 7528 01d0 01       		.uleb128 0x1
 7529 01d1 12       		.uleb128 0x12
 7530 01d2 06       		.uleb128 0x6
 7531 01d3 40       		.uleb128 0x40
 7532 01d4 18       		.uleb128 0x18
 7533 01d5 9742     		.uleb128 0x2117
 7534 01d7 19       		.uleb128 0x19
 7535 01d8 01       		.uleb128 0x1
 7536 01d9 13       		.uleb128 0x13
 7537 01da 00       		.byte	0
 7538 01db 00       		.byte	0
 7539 01dc 21       		.uleb128 0x21
 7540 01dd 2E       		.uleb128 0x2e
 7541 01de 01       		.byte	0x1
 7542 01df 3F       		.uleb128 0x3f
 7543 01e0 19       		.uleb128 0x19
 7544 01e1 03       		.uleb128 0x3
 7545 01e2 0E       		.uleb128 0xe
 7546 01e3 3A       		.uleb128 0x3a
 7547 01e4 0B       		.uleb128 0xb
 7548 01e5 3B       		.uleb128 0x3b
 7549 01e6 05       		.uleb128 0x5
 7550 01e7 27       		.uleb128 0x27
 7551 01e8 19       		.uleb128 0x19
 7552 01e9 11       		.uleb128 0x11
 7553 01ea 01       		.uleb128 0x1
 7554 01eb 12       		.uleb128 0x12
 7555 01ec 06       		.uleb128 0x6
 7556 01ed 40       		.uleb128 0x40
 7557 01ee 18       		.uleb128 0x18
 7558 01ef 9742     		.uleb128 0x2117
 7559 01f1 19       		.uleb128 0x19
 7560 01f2 01       		.uleb128 0x1
 7561 01f3 13       		.uleb128 0x13
 7562 01f4 00       		.byte	0
 7563 01f5 00       		.byte	0
 7564 01f6 22       		.uleb128 0x22
 7565 01f7 2E       		.uleb128 0x2e
 7566 01f8 01       		.byte	0x1
 7567 01f9 03       		.uleb128 0x3
 7568 01fa 0E       		.uleb128 0xe
 7569 01fb 3A       		.uleb128 0x3a
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 201


 7570 01fc 0B       		.uleb128 0xb
 7571 01fd 3B       		.uleb128 0x3b
 7572 01fe 05       		.uleb128 0x5
 7573 01ff 27       		.uleb128 0x27
 7574 0200 19       		.uleb128 0x19
 7575 0201 11       		.uleb128 0x11
 7576 0202 01       		.uleb128 0x1
 7577 0203 12       		.uleb128 0x12
 7578 0204 06       		.uleb128 0x6
 7579 0205 40       		.uleb128 0x40
 7580 0206 18       		.uleb128 0x18
 7581 0207 9642     		.uleb128 0x2116
 7582 0209 19       		.uleb128 0x19
 7583 020a 01       		.uleb128 0x1
 7584 020b 13       		.uleb128 0x13
 7585 020c 00       		.byte	0
 7586 020d 00       		.byte	0
 7587 020e 23       		.uleb128 0x23
 7588 020f 34       		.uleb128 0x34
 7589 0210 00       		.byte	0
 7590 0211 03       		.uleb128 0x3
 7591 0212 08       		.uleb128 0x8
 7592 0213 3A       		.uleb128 0x3a
 7593 0214 0B       		.uleb128 0xb
 7594 0215 3B       		.uleb128 0x3b
 7595 0216 05       		.uleb128 0x5
 7596 0217 49       		.uleb128 0x49
 7597 0218 13       		.uleb128 0x13
 7598 0219 02       		.uleb128 0x2
 7599 021a 18       		.uleb128 0x18
 7600 021b 00       		.byte	0
 7601 021c 00       		.byte	0
 7602 021d 24       		.uleb128 0x24
 7603 021e 0B       		.uleb128 0xb
 7604 021f 01       		.byte	0x1
 7605 0220 11       		.uleb128 0x11
 7606 0221 01       		.uleb128 0x1
 7607 0222 12       		.uleb128 0x12
 7608 0223 06       		.uleb128 0x6
 7609 0224 01       		.uleb128 0x1
 7610 0225 13       		.uleb128 0x13
 7611 0226 00       		.byte	0
 7612 0227 00       		.byte	0
 7613 0228 25       		.uleb128 0x25
 7614 0229 2E       		.uleb128 0x2e
 7615 022a 01       		.byte	0x1
 7616 022b 03       		.uleb128 0x3
 7617 022c 0E       		.uleb128 0xe
 7618 022d 3A       		.uleb128 0x3a
 7619 022e 0B       		.uleb128 0xb
 7620 022f 3B       		.uleb128 0x3b
 7621 0230 05       		.uleb128 0x5
 7622 0231 27       		.uleb128 0x27
 7623 0232 19       		.uleb128 0x19
 7624 0233 49       		.uleb128 0x49
 7625 0234 13       		.uleb128 0x13
 7626 0235 11       		.uleb128 0x11
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 202


 7627 0236 01       		.uleb128 0x1
 7628 0237 12       		.uleb128 0x12
 7629 0238 06       		.uleb128 0x6
 7630 0239 40       		.uleb128 0x40
 7631 023a 18       		.uleb128 0x18
 7632 023b 9742     		.uleb128 0x2117
 7633 023d 19       		.uleb128 0x19
 7634 023e 01       		.uleb128 0x1
 7635 023f 13       		.uleb128 0x13
 7636 0240 00       		.byte	0
 7637 0241 00       		.byte	0
 7638 0242 26       		.uleb128 0x26
 7639 0243 2E       		.uleb128 0x2e
 7640 0244 01       		.byte	0x1
 7641 0245 03       		.uleb128 0x3
 7642 0246 0E       		.uleb128 0xe
 7643 0247 3A       		.uleb128 0x3a
 7644 0248 0B       		.uleb128 0xb
 7645 0249 3B       		.uleb128 0x3b
 7646 024a 05       		.uleb128 0x5
 7647 024b 27       		.uleb128 0x27
 7648 024c 19       		.uleb128 0x19
 7649 024d 11       		.uleb128 0x11
 7650 024e 01       		.uleb128 0x1
 7651 024f 12       		.uleb128 0x12
 7652 0250 06       		.uleb128 0x6
 7653 0251 40       		.uleb128 0x40
 7654 0252 18       		.uleb128 0x18
 7655 0253 9742     		.uleb128 0x2117
 7656 0255 19       		.uleb128 0x19
 7657 0256 01       		.uleb128 0x1
 7658 0257 13       		.uleb128 0x13
 7659 0258 00       		.byte	0
 7660 0259 00       		.byte	0
 7661 025a 27       		.uleb128 0x27
 7662 025b 34       		.uleb128 0x34
 7663 025c 00       		.byte	0
 7664 025d 03       		.uleb128 0x3
 7665 025e 0E       		.uleb128 0xe
 7666 025f 3A       		.uleb128 0x3a
 7667 0260 0B       		.uleb128 0xb
 7668 0261 3B       		.uleb128 0x3b
 7669 0262 0B       		.uleb128 0xb
 7670 0263 49       		.uleb128 0x49
 7671 0264 13       		.uleb128 0x13
 7672 0265 02       		.uleb128 0x2
 7673 0266 18       		.uleb128 0x18
 7674 0267 00       		.byte	0
 7675 0268 00       		.byte	0
 7676 0269 28       		.uleb128 0x28
 7677 026a 34       		.uleb128 0x34
 7678 026b 00       		.byte	0
 7679 026c 03       		.uleb128 0x3
 7680 026d 0E       		.uleb128 0xe
 7681 026e 3A       		.uleb128 0x3a
 7682 026f 0B       		.uleb128 0xb
 7683 0270 3B       		.uleb128 0x3b
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 203


 7684 0271 0B       		.uleb128 0xb
 7685 0272 49       		.uleb128 0x49
 7686 0273 13       		.uleb128 0x13
 7687 0274 3F       		.uleb128 0x3f
 7688 0275 19       		.uleb128 0x19
 7689 0276 02       		.uleb128 0x2
 7690 0277 18       		.uleb128 0x18
 7691 0278 00       		.byte	0
 7692 0279 00       		.byte	0
 7693 027a 00       		.byte	0
 7694              		.section	.debug_aranges,"",%progbits
 7695 0000 7C010000 		.4byte	0x17c
 7696 0004 0200     		.2byte	0x2
 7697 0006 00000000 		.4byte	.Ldebug_info0
 7698 000a 04       		.byte	0x4
 7699 000b 00       		.byte	0
 7700 000c 0000     		.2byte	0
 7701 000e 0000     		.2byte	0
 7702 0010 00000000 		.4byte	.LFB1
 7703 0014 64010000 		.4byte	.LFE1-.LFB1
 7704 0018 00000000 		.4byte	.LFB2
 7705 001c E8000000 		.4byte	.LFE2-.LFB2
 7706 0020 00000000 		.4byte	.LFB3
 7707 0024 E4000000 		.4byte	.LFE3-.LFB3
 7708 0028 00000000 		.4byte	.LFB4
 7709 002c 88000000 		.4byte	.LFE4-.LFB4
 7710 0030 00000000 		.4byte	.LFB5
 7711 0034 34000000 		.4byte	.LFE5-.LFB5
 7712 0038 00000000 		.4byte	.LFB6
 7713 003c 3C010000 		.4byte	.LFE6-.LFB6
 7714 0040 00000000 		.4byte	.LFB7
 7715 0044 F4000000 		.4byte	.LFE7-.LFB7
 7716 0048 00000000 		.4byte	.LFB8
 7717 004c 64000000 		.4byte	.LFE8-.LFB8
 7718 0050 00000000 		.4byte	.LFB9
 7719 0054 9C000000 		.4byte	.LFE9-.LFB9
 7720 0058 00000000 		.4byte	.LFB10
 7721 005c B8000000 		.4byte	.LFE10-.LFB10
 7722 0060 00000000 		.4byte	.LFB11
 7723 0064 68000000 		.4byte	.LFE11-.LFB11
 7724 0068 00000000 		.4byte	.LFB12
 7725 006c 1C000000 		.4byte	.LFE12-.LFB12
 7726 0070 00000000 		.4byte	.LFB13
 7727 0074 1C000000 		.4byte	.LFE13-.LFB13
 7728 0078 00000000 		.4byte	.LFB14
 7729 007c 08010000 		.4byte	.LFE14-.LFB14
 7730 0080 00000000 		.4byte	.LFB15
 7731 0084 24000000 		.4byte	.LFE15-.LFB15
 7732 0088 00000000 		.4byte	.LFB16
 7733 008c 2C000000 		.4byte	.LFE16-.LFB16
 7734 0090 00000000 		.4byte	.LFB17
 7735 0094 14000000 		.4byte	.LFE17-.LFB17
 7736 0098 00000000 		.4byte	.LFB18
 7737 009c F4000000 		.4byte	.LFE18-.LFB18
 7738 00a0 00000000 		.4byte	.LFB19
 7739 00a4 7C010000 		.4byte	.LFE19-.LFB19
 7740 00a8 00000000 		.4byte	.LFB20
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 204


 7741 00ac A4000000 		.4byte	.LFE20-.LFB20
 7742 00b0 00000000 		.4byte	.LFB21
 7743 00b4 90000000 		.4byte	.LFE21-.LFB21
 7744 00b8 00000000 		.4byte	.LFB22
 7745 00bc B0000000 		.4byte	.LFE22-.LFB22
 7746 00c0 00000000 		.4byte	.LFB23
 7747 00c4 B4000000 		.4byte	.LFE23-.LFB23
 7748 00c8 00000000 		.4byte	.LFB24
 7749 00cc B0000000 		.4byte	.LFE24-.LFB24
 7750 00d0 00000000 		.4byte	.LFB25
 7751 00d4 34000000 		.4byte	.LFE25-.LFB25
 7752 00d8 00000000 		.4byte	.LFB26
 7753 00dc A0000000 		.4byte	.LFE26-.LFB26
 7754 00e0 00000000 		.4byte	.LFB27
 7755 00e4 18000000 		.4byte	.LFE27-.LFB27
 7756 00e8 00000000 		.4byte	.LFB28
 7757 00ec 2A000000 		.4byte	.LFE28-.LFB28
 7758 00f0 00000000 		.4byte	.LFB29
 7759 00f4 24000000 		.4byte	.LFE29-.LFB29
 7760 00f8 00000000 		.4byte	.LFB30
 7761 00fc 0E000000 		.4byte	.LFE30-.LFB30
 7762 0100 00000000 		.4byte	.LFB31
 7763 0104 9A000000 		.4byte	.LFE31-.LFB31
 7764 0108 00000000 		.4byte	.LFB32
 7765 010c 80000000 		.4byte	.LFE32-.LFB32
 7766 0110 00000000 		.4byte	.LFB33
 7767 0114 78000000 		.4byte	.LFE33-.LFB33
 7768 0118 00000000 		.4byte	.LFB34
 7769 011c 6C000000 		.4byte	.LFE34-.LFB34
 7770 0120 00000000 		.4byte	.LFB35
 7771 0124 62000000 		.4byte	.LFE35-.LFB35
 7772 0128 00000000 		.4byte	.LFB36
 7773 012c 16010000 		.4byte	.LFE36-.LFB36
 7774 0130 00000000 		.4byte	.LFB37
 7775 0134 36000000 		.4byte	.LFE37-.LFB37
 7776 0138 00000000 		.4byte	.LFB38
 7777 013c 38000000 		.4byte	.LFE38-.LFB38
 7778 0140 00000000 		.4byte	.LFB39
 7779 0144 20000000 		.4byte	.LFE39-.LFB39
 7780 0148 00000000 		.4byte	.LFB40
 7781 014c 48000000 		.4byte	.LFE40-.LFB40
 7782 0150 00000000 		.4byte	.LFB41
 7783 0154 1C000000 		.4byte	.LFE41-.LFB41
 7784 0158 00000000 		.4byte	.LFB42
 7785 015c EC000000 		.4byte	.LFE42-.LFB42
 7786 0160 00000000 		.4byte	.LFB43
 7787 0164 D8000000 		.4byte	.LFE43-.LFB43
 7788 0168 00000000 		.4byte	.LFB44
 7789 016c 30000000 		.4byte	.LFE44-.LFB44
 7790 0170 00000000 		.4byte	.LFB45
 7791 0174 28000000 		.4byte	.LFE45-.LFB45
 7792 0178 00000000 		.4byte	0
 7793 017c 00000000 		.4byte	0
 7794              		.section	.debug_ranges,"",%progbits
 7795              	.Ldebug_ranges0:
 7796 0000 00000000 		.4byte	.LFB1
 7797 0004 64010000 		.4byte	.LFE1
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 205


 7798 0008 00000000 		.4byte	.LFB2
 7799 000c E8000000 		.4byte	.LFE2
 7800 0010 00000000 		.4byte	.LFB3
 7801 0014 E4000000 		.4byte	.LFE3
 7802 0018 00000000 		.4byte	.LFB4
 7803 001c 88000000 		.4byte	.LFE4
 7804 0020 00000000 		.4byte	.LFB5
 7805 0024 34000000 		.4byte	.LFE5
 7806 0028 00000000 		.4byte	.LFB6
 7807 002c 3C010000 		.4byte	.LFE6
 7808 0030 00000000 		.4byte	.LFB7
 7809 0034 F4000000 		.4byte	.LFE7
 7810 0038 00000000 		.4byte	.LFB8
 7811 003c 64000000 		.4byte	.LFE8
 7812 0040 00000000 		.4byte	.LFB9
 7813 0044 9C000000 		.4byte	.LFE9
 7814 0048 00000000 		.4byte	.LFB10
 7815 004c B8000000 		.4byte	.LFE10
 7816 0050 00000000 		.4byte	.LFB11
 7817 0054 68000000 		.4byte	.LFE11
 7818 0058 00000000 		.4byte	.LFB12
 7819 005c 1C000000 		.4byte	.LFE12
 7820 0060 00000000 		.4byte	.LFB13
 7821 0064 1C000000 		.4byte	.LFE13
 7822 0068 00000000 		.4byte	.LFB14
 7823 006c 08010000 		.4byte	.LFE14
 7824 0070 00000000 		.4byte	.LFB15
 7825 0074 24000000 		.4byte	.LFE15
 7826 0078 00000000 		.4byte	.LFB16
 7827 007c 2C000000 		.4byte	.LFE16
 7828 0080 00000000 		.4byte	.LFB17
 7829 0084 14000000 		.4byte	.LFE17
 7830 0088 00000000 		.4byte	.LFB18
 7831 008c F4000000 		.4byte	.LFE18
 7832 0090 00000000 		.4byte	.LFB19
 7833 0094 7C010000 		.4byte	.LFE19
 7834 0098 00000000 		.4byte	.LFB20
 7835 009c A4000000 		.4byte	.LFE20
 7836 00a0 00000000 		.4byte	.LFB21
 7837 00a4 90000000 		.4byte	.LFE21
 7838 00a8 00000000 		.4byte	.LFB22
 7839 00ac B0000000 		.4byte	.LFE22
 7840 00b0 00000000 		.4byte	.LFB23
 7841 00b4 B4000000 		.4byte	.LFE23
 7842 00b8 00000000 		.4byte	.LFB24
 7843 00bc B0000000 		.4byte	.LFE24
 7844 00c0 00000000 		.4byte	.LFB25
 7845 00c4 34000000 		.4byte	.LFE25
 7846 00c8 00000000 		.4byte	.LFB26
 7847 00cc A0000000 		.4byte	.LFE26
 7848 00d0 00000000 		.4byte	.LFB27
 7849 00d4 18000000 		.4byte	.LFE27
 7850 00d8 00000000 		.4byte	.LFB28
 7851 00dc 2A000000 		.4byte	.LFE28
 7852 00e0 00000000 		.4byte	.LFB29
 7853 00e4 24000000 		.4byte	.LFE29
 7854 00e8 00000000 		.4byte	.LFB30
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 206


 7855 00ec 0E000000 		.4byte	.LFE30
 7856 00f0 00000000 		.4byte	.LFB31
 7857 00f4 9A000000 		.4byte	.LFE31
 7858 00f8 00000000 		.4byte	.LFB32
 7859 00fc 80000000 		.4byte	.LFE32
 7860 0100 00000000 		.4byte	.LFB33
 7861 0104 78000000 		.4byte	.LFE33
 7862 0108 00000000 		.4byte	.LFB34
 7863 010c 6C000000 		.4byte	.LFE34
 7864 0110 00000000 		.4byte	.LFB35
 7865 0114 62000000 		.4byte	.LFE35
 7866 0118 00000000 		.4byte	.LFB36
 7867 011c 16010000 		.4byte	.LFE36
 7868 0120 00000000 		.4byte	.LFB37
 7869 0124 36000000 		.4byte	.LFE37
 7870 0128 00000000 		.4byte	.LFB38
 7871 012c 38000000 		.4byte	.LFE38
 7872 0130 00000000 		.4byte	.LFB39
 7873 0134 20000000 		.4byte	.LFE39
 7874 0138 00000000 		.4byte	.LFB40
 7875 013c 48000000 		.4byte	.LFE40
 7876 0140 00000000 		.4byte	.LFB41
 7877 0144 1C000000 		.4byte	.LFE41
 7878 0148 00000000 		.4byte	.LFB42
 7879 014c EC000000 		.4byte	.LFE42
 7880 0150 00000000 		.4byte	.LFB43
 7881 0154 D8000000 		.4byte	.LFE43
 7882 0158 00000000 		.4byte	.LFB44
 7883 015c 30000000 		.4byte	.LFE44
 7884 0160 00000000 		.4byte	.LFB45
 7885 0164 28000000 		.4byte	.LFE45
 7886 0168 00000000 		.4byte	0
 7887 016c 00000000 		.4byte	0
 7888              		.section	.debug_macro,"",%progbits
 7889              	.Ldebug_macro0:
 7890 0000 0400     		.2byte	0x4
 7891 0002 02       		.byte	0x2
 7892 0003 00000000 		.4byte	.Ldebug_line0
 7893 0007 07       		.byte	0x7
 7894 0008 00000000 		.4byte	.Ldebug_macro1
 7895 000c 03       		.byte	0x3
 7896 000d 00       		.uleb128 0
 7897 000e 01       		.uleb128 0x1
 7898              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\stdl
 7899 000f 03       		.byte	0x3
 7900 0010 43       		.uleb128 0x43
 7901 0011 09       		.uleb128 0x9
 7902 0012 05       		.byte	0x5
 7903 0013 08       		.uleb128 0x8
 7904 0014 9A880000 		.4byte	.LASF355
 7905              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mac
 7906 0018 03       		.byte	0x3
 7907 0019 0A       		.uleb128 0xa
 7908 001a 0A       		.uleb128 0xa
 7909 001b 05       		.byte	0x5
 7910 001c 3C       		.uleb128 0x3c
 7911 001d FF5D0000 		.4byte	.LASF356
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 207


 7912 0021 04       		.byte	0x4
 7913              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\_an
 7914 0022 03       		.byte	0x3
 7915 0023 0B       		.uleb128 0xb
 7916 0024 0B       		.uleb128 0xb
 7917 0025 05       		.byte	0x5
 7918 0026 0D       		.uleb128 0xd
 7919 0027 6F530000 		.4byte	.LASF357
 7920              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\new
 7921 002b 03       		.byte	0x3
 7922 002c 0F       		.uleb128 0xf
 7923 002d 0C       		.uleb128 0xc
 7924 002e 05       		.byte	0x5
 7925 002f 08       		.uleb128 0x8
 7926 0030 4D110000 		.4byte	.LASF358
 7927              		.file 13 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\_ne
 7928 0034 03       		.byte	0x3
 7929 0035 0E       		.uleb128 0xe
 7930 0036 0D       		.uleb128 0xd
 7931 0037 07       		.byte	0x7
 7932 0038 00000000 		.4byte	.Ldebug_macro2
 7933 003c 04       		.byte	0x4
 7934 003d 07       		.byte	0x7
 7935 003e 00000000 		.4byte	.Ldebug_macro3
 7936 0042 04       		.byte	0x4
 7937              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 7938 0043 03       		.byte	0x3
 7939 0044 10       		.uleb128 0x10
 7940 0045 0E       		.uleb128 0xe
 7941 0046 05       		.byte	0x5
 7942 0047 02       		.uleb128 0x2
 7943 0048 0C500000 		.4byte	.LASF376
 7944 004c 03       		.byte	0x3
 7945 004d 04       		.uleb128 0x4
 7946 004e 0A       		.uleb128 0xa
 7947 004f 04       		.byte	0x4
 7948              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 7949 0050 03       		.byte	0x3
 7950 0051 05       		.uleb128 0x5
 7951 0052 0F       		.uleb128 0xf
 7952 0053 07       		.byte	0x7
 7953 0054 00000000 		.4byte	.Ldebug_macro4
 7954 0058 04       		.byte	0x4
 7955 0059 07       		.byte	0x7
 7956 005a 00000000 		.4byte	.Ldebug_macro5
 7957 005e 04       		.byte	0x4
 7958 005f 07       		.byte	0x7
 7959 0060 00000000 		.4byte	.Ldebug_macro6
 7960 0064 04       		.byte	0x4
 7961 0065 07       		.byte	0x7
 7962 0066 00000000 		.4byte	.Ldebug_macro7
 7963 006a 03       		.byte	0x3
 7964 006b 10       		.uleb128 0x10
 7965 006c 03       		.uleb128 0x3
 7966 006d 07       		.byte	0x7
 7967 006e 00000000 		.4byte	.Ldebug_macro8
 7968 0072 04       		.byte	0x4
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 208


 7969              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 7970 0073 03       		.byte	0x3
 7971 0074 12       		.uleb128 0x12
 7972 0075 10       		.uleb128 0x10
 7973 0076 05       		.byte	0x5
 7974 0077 0B       		.uleb128 0xb
 7975 0078 2F570000 		.4byte	.LASF470
 7976 007c 03       		.byte	0x3
 7977 007d 0D       		.uleb128 0xd
 7978 007e 0B       		.uleb128 0xb
 7979 007f 04       		.byte	0x4
 7980 0080 03       		.byte	0x3
 7981 0081 0E       		.uleb128 0xe
 7982 0082 03       		.uleb128 0x3
 7983 0083 07       		.byte	0x7
 7984 0084 00000000 		.4byte	.Ldebug_macro9
 7985 0088 04       		.byte	0x4
 7986              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 7987 0089 03       		.byte	0x3
 7988 008a 0F       		.uleb128 0xf
 7989 008b 11       		.uleb128 0x11
 7990 008c 05       		.byte	0x5
 7991 008d 14       		.uleb128 0x14
 7992 008e B6340000 		.4byte	.LASF485
 7993              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mac
 7994 0092 03       		.byte	0x3
 7995 0093 18       		.uleb128 0x18
 7996 0094 12       		.uleb128 0x12
 7997 0095 05       		.byte	0x5
 7998 0096 06       		.uleb128 0x6
 7999 0097 566B0000 		.4byte	.LASF486
 8000 009b 03       		.byte	0x3
 8001 009c 07       		.uleb128 0x7
 8002 009d 04       		.uleb128 0x4
 8003 009e 07       		.byte	0x7
 8004 009f 00000000 		.4byte	.Ldebug_macro10
 8005 00a3 04       		.byte	0x4
 8006 00a4 04       		.byte	0x4
 8007              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8008 00a5 03       		.byte	0x3
 8009 00a6 19       		.uleb128 0x19
 8010 00a7 13       		.uleb128 0x13
 8011 00a8 07       		.byte	0x7
 8012 00a9 00000000 		.4byte	.Ldebug_macro11
 8013 00ad 04       		.byte	0x4
 8014 00ae 07       		.byte	0x7
 8015 00af 00000000 		.4byte	.Ldebug_macro12
 8016 00b3 03       		.byte	0x3
 8017 00b4 9F01     		.uleb128 0x9f
 8018 00b6 03       		.uleb128 0x3
 8019 00b7 07       		.byte	0x7
 8020 00b8 00000000 		.4byte	.Ldebug_macro13
 8021 00bc 04       		.byte	0x4
 8022 00bd 07       		.byte	0x7
 8023 00be 00000000 		.4byte	.Ldebug_macro14
 8024 00c2 04       		.byte	0x4
 8025 00c3 07       		.byte	0x7
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 209


 8026 00c4 00000000 		.4byte	.Ldebug_macro15
 8027 00c8 04       		.byte	0x4
 8028              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8029 00c9 03       		.byte	0x3
 8030 00ca 13       		.uleb128 0x13
 8031 00cb 14       		.uleb128 0x14
 8032 00cc 05       		.byte	0x5
 8033 00cd 29       		.uleb128 0x29
 8034 00ce 2F0D0000 		.4byte	.LASF577
 8035 00d2 03       		.byte	0x3
 8036 00d3 2D       		.uleb128 0x2d
 8037 00d4 03       		.uleb128 0x3
 8038 00d5 04       		.byte	0x4
 8039 00d6 07       		.byte	0x7
 8040 00d7 00000000 		.4byte	.Ldebug_macro16
 8041 00db 04       		.byte	0x4
 8042              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mac
 8043 00dc 03       		.byte	0x3
 8044 00dd 14       		.uleb128 0x14
 8045 00de 15       		.uleb128 0x15
 8046 00df 05       		.byte	0x5
 8047 00e0 02       		.uleb128 0x2
 8048 00e1 EB250000 		.4byte	.LASF698
 8049 00e5 04       		.byte	0x4
 8050              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\all
 8051 00e6 03       		.byte	0x3
 8052 00e7 16       		.uleb128 0x16
 8053 00e8 16       		.uleb128 0x16
 8054 00e9 07       		.byte	0x7
 8055 00ea 00000000 		.4byte	.Ldebug_macro17
 8056 00ee 04       		.byte	0x4
 8057 00ef 07       		.byte	0x7
 8058 00f0 00000000 		.4byte	.Ldebug_macro18
 8059 00f4 04       		.byte	0x4
 8060              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\str
 8061 00f5 03       		.byte	0x3
 8062 00f6 44       		.uleb128 0x44
 8063 00f7 17       		.uleb128 0x17
 8064 00f8 07       		.byte	0x7
 8065 00f9 00000000 		.4byte	.Ldebug_macro19
 8066 00fd 03       		.byte	0x3
 8067 00fe 11       		.uleb128 0x11
 8068 00ff 03       		.uleb128 0x3
 8069 0100 07       		.byte	0x7
 8070 0101 00000000 		.4byte	.Ldebug_macro20
 8071 0105 04       		.byte	0x4
 8072              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8073 0106 03       		.byte	0x3
 8074 0107 14       		.uleb128 0x14
 8075 0108 18       		.uleb128 0x18
 8076 0109 05       		.byte	0x5
 8077 010a 04       		.uleb128 0x4
 8078 010b A8170000 		.4byte	.LASF709
 8079 010f 04       		.byte	0x4
 8080              		.file 25 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8081 0110 03       		.byte	0x3
 8082 0111 C001     		.uleb128 0xc0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 210


 8083 0113 19       		.uleb128 0x19
 8084 0114 04       		.byte	0x4
 8085 0115 04       		.byte	0x4
 8086 0116 05       		.byte	0x5
 8087 0117 49       		.uleb128 0x49
 8088 0118 89850000 		.4byte	.LASF710
 8089              		.file 26 "FreeRTOS/include/FreeRTOS.h"
 8090 011c 03       		.byte	0x3
 8091 011d 4C       		.uleb128 0x4c
 8092 011e 1A       		.uleb128 0x1a
 8093 011f 05       		.byte	0x5
 8094 0120 43       		.uleb128 0x43
 8095 0121 CA650000 		.4byte	.LASF711
 8096 0125 03       		.byte	0x3
 8097 0126 48       		.uleb128 0x48
 8098 0127 03       		.uleb128 0x3
 8099 0128 04       		.byte	0x4
 8100              		.file 27 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\lib\\gcc\\arm-none-eabi\\5.
 8101 0129 03       		.byte	0x3
 8102 012a 57       		.uleb128 0x57
 8103 012b 1B       		.uleb128 0x1b
 8104              		.file 28 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\std
 8105 012c 03       		.byte	0x3
 8106 012d 09       		.uleb128 0x9
 8107 012e 1C       		.uleb128 0x1c
 8108 012f 05       		.byte	0x5
 8109 0130 0A       		.uleb128 0xa
 8110 0131 11990000 		.4byte	.LASF712
 8111              		.file 29 "c:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys
 8112 0135 03       		.byte	0x3
 8113 0136 0D       		.uleb128 0xd
 8114 0137 1D       		.uleb128 0x1d
 8115 0138 07       		.byte	0x7
 8116 0139 00000000 		.4byte	.Ldebug_macro21
 8117 013d 04       		.byte	0x4
 8118 013e 03       		.byte	0x3
 8119 013f 0E       		.uleb128 0xe
 8120 0140 05       		.uleb128 0x5
 8121 0141 07       		.byte	0x7
 8122 0142 00000000 		.4byte	.Ldebug_macro22
 8123 0146 04       		.byte	0x4
 8124 0147 07       		.byte	0x7
 8125 0148 00000000 		.4byte	.Ldebug_macro23
 8126 014c 04       		.byte	0x4
 8127 014d 05       		.byte	0x5
 8128 014e 0D       		.uleb128 0xd
 8129 014f 6E060000 		.4byte	.LASF827
 8130 0153 04       		.byte	0x4
 8131              		.file 30 "config/FreeRTOSConfig.h"
 8132 0154 03       		.byte	0x3
 8133 0155 5E       		.uleb128 0x5e
 8134 0156 1E       		.uleb128 0x1e
 8135 0157 07       		.byte	0x7
 8136 0158 00000000 		.4byte	.Ldebug_macro24
 8137 015c 04       		.byte	0x4
 8138 015d 03       		.byte	0x3
 8139 015e 61       		.uleb128 0x61
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 211


 8140 015f 06       		.uleb128 0x6
 8141 0160 07       		.byte	0x7
 8142 0161 00000000 		.4byte	.Ldebug_macro25
 8143 0165 04       		.byte	0x4
 8144              		.file 31 "FreeRTOS/include/portable.h"
 8145 0166 03       		.byte	0x3
 8146 0167 64       		.uleb128 0x64
 8147 0168 1F       		.uleb128 0x1f
 8148 0169 05       		.byte	0x5
 8149 016a 47       		.uleb128 0x47
 8150 016b 90270000 		.4byte	.LASF881
 8151 016f 03       		.byte	0x3
 8152 0170 C401     		.uleb128 0xc4
 8153 0172 02       		.uleb128 0x2
 8154 0173 07       		.byte	0x7
 8155 0174 00000000 		.4byte	.Ldebug_macro26
 8156 0178 04       		.byte	0x4
 8157 0179 07       		.byte	0x7
 8158 017a 00000000 		.4byte	.Ldebug_macro27
 8159              		.file 32 "FreeRTOS/include/mpu_wrappers.h"
 8160 017e 03       		.byte	0x3
 8161 017f E002     		.uleb128 0x160
 8162 0181 20       		.uleb128 0x20
 8163 0182 07       		.byte	0x7
 8164 0183 00000000 		.4byte	.Ldebug_macro28
 8165 0187 04       		.byte	0x4
 8166 0188 04       		.byte	0x4
 8167 0189 07       		.byte	0x7
 8168 018a 00000000 		.4byte	.Ldebug_macro29
 8169 018e 04       		.byte	0x4
 8170 018f 03       		.byte	0x3
 8171 0190 4D       		.uleb128 0x4d
 8172 0191 08       		.uleb128 0x8
 8173 0192 05       		.byte	0x5
 8174 0193 44       		.uleb128 0x44
 8175 0194 13540000 		.4byte	.LASF1042
 8176 0198 03       		.byte	0x3
 8177 0199 4A       		.uleb128 0x4a
 8178 019a 07       		.uleb128 0x7
 8179 019b 07       		.byte	0x7
 8180 019c 00000000 		.4byte	.Ldebug_macro30
 8181 01a0 04       		.byte	0x4
 8182 01a1 07       		.byte	0x7
 8183 01a2 00000000 		.4byte	.Ldebug_macro31
 8184 01a6 04       		.byte	0x4
 8185              		.file 33 "FreeRTOS/include/timers.h"
 8186 01a7 03       		.byte	0x3
 8187 01a8 4E       		.uleb128 0x4e
 8188 01a9 21       		.uleb128 0x21
 8189 01aa 05       		.byte	0x5
 8190 01ab 44       		.uleb128 0x44
 8191 01ac 2C0C0000 		.4byte	.LASF1075
 8192 01b0 03       		.byte	0x3
 8193 01b1 4C       		.uleb128 0x4c
 8194 01b2 08       		.uleb128 0x8
 8195 01b3 04       		.byte	0x4
 8196 01b4 07       		.byte	0x7
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 212


 8197 01b5 00000000 		.4byte	.Ldebug_macro32
 8198 01b9 04       		.byte	0x4
 8199              		.file 34 "FreeRTOS/include/StackMacros.h"
 8200 01ba 03       		.byte	0x3
 8201 01bb 4F       		.uleb128 0x4f
 8202 01bc 22       		.uleb128 0x22
 8203 01bd 07       		.byte	0x7
 8204 01be 00000000 		.4byte	.Ldebug_macro33
 8205 01c2 04       		.byte	0x4
 8206 01c3 06       		.byte	0x6
 8207 01c4 55       		.uleb128 0x55
 8208 01c5 97730000 		.4byte	.LASF1101
 8209 01c9 05       		.byte	0x5
 8210 01ca 69       		.uleb128 0x69
 8211 01cb B1630000 		.4byte	.LASF1102
 8212 01cf 05       		.byte	0x5
 8213 01d0 70       		.uleb128 0x70
 8214 01d1 068D0000 		.4byte	.LASF1103
 8215 01d5 05       		.byte	0x5
 8216 01d6 FD01     		.uleb128 0xfd
 8217 01d8 8C0D0000 		.4byte	.LASF1104
 8218 01dc 05       		.byte	0x5
 8219 01dd 8202     		.uleb128 0x102
 8220 01df 53180000 		.4byte	.LASF1105
 8221 01e3 05       		.byte	0x5
 8222 01e4 8302     		.uleb128 0x103
 8223 01e6 32360000 		.4byte	.LASF1106
 8224 01ea 05       		.byte	0x5
 8225 01eb 8402     		.uleb128 0x104
 8226 01ed D01A0000 		.4byte	.LASF1107
 8227 01f1 05       		.byte	0x5
 8228 01f2 8502     		.uleb128 0x105
 8229 01f4 01050000 		.4byte	.LASF1108
 8230 01f8 05       		.byte	0x5
 8231 01f9 B802     		.uleb128 0x138
 8232 01fb 6A490000 		.4byte	.LASF1109
 8233 01ff 05       		.byte	0x5
 8234 0200 BC02     		.uleb128 0x13c
 8235 0202 E5890000 		.4byte	.LASF1110
 8236 0206 05       		.byte	0x5
 8237 0207 CB02     		.uleb128 0x14b
 8238 0209 85420000 		.4byte	.LASF1111
 8239 020d 05       		.byte	0x5
 8240 020e D902     		.uleb128 0x159
 8241 0210 C92C0000 		.4byte	.LASF1112
 8242 0214 05       		.byte	0x5
 8243 0215 ED02     		.uleb128 0x16d
 8244 0217 70920000 		.4byte	.LASF1113
 8245 021b 05       		.byte	0x5
 8246 021c F902     		.uleb128 0x179
 8247 021e 3D0F0000 		.4byte	.LASF1114
 8248 0222 05       		.byte	0x5
 8249 0223 8603     		.uleb128 0x186
 8250 0225 C9460000 		.4byte	.LASF1115
 8251 0229 04       		.byte	0x4
 8252 022a 00       		.byte	0
 8253              		.section	.debug_macro,"G",%progbits,wm4.0.c0d9c46791312c607b68c96c4ad07fb1,comdat
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 213


 8254              	.Ldebug_macro1:
 8255 0000 0400     		.2byte	0x4
 8256 0002 00       		.byte	0
 8257 0003 05       		.byte	0x5
 8258 0004 00       		.uleb128 0
 8259 0005 3F8B0000 		.4byte	.LASF0
 8260 0009 05       		.byte	0x5
 8261 000a 00       		.uleb128 0
 8262 000b 92090000 		.4byte	.LASF1
 8263 000f 05       		.byte	0x5
 8264 0010 00       		.uleb128 0
 8265 0011 22400000 		.4byte	.LASF2
 8266 0015 05       		.byte	0x5
 8267 0016 00       		.uleb128 0
 8268 0017 A9760000 		.4byte	.LASF3
 8269 001b 05       		.byte	0x5
 8270 001c 00       		.uleb128 0
 8271 001d FB1D0000 		.4byte	.LASF4
 8272 0021 05       		.byte	0x5
 8273 0022 00       		.uleb128 0
 8274 0023 B4350000 		.4byte	.LASF5
 8275 0027 05       		.byte	0x5
 8276 0028 00       		.uleb128 0
 8277 0029 11830000 		.4byte	.LASF6
 8278 002d 05       		.byte	0x5
 8279 002e 00       		.uleb128 0
 8280 002f A5220000 		.4byte	.LASF7
 8281 0033 05       		.byte	0x5
 8282 0034 00       		.uleb128 0
 8283 0035 C33C0000 		.4byte	.LASF8
 8284 0039 05       		.byte	0x5
 8285 003a 00       		.uleb128 0
 8286 003b 4D460000 		.4byte	.LASF9
 8287 003f 05       		.byte	0x5
 8288 0040 00       		.uleb128 0
 8289 0041 369C0000 		.4byte	.LASF10
 8290 0045 05       		.byte	0x5
 8291 0046 00       		.uleb128 0
 8292 0047 A3030000 		.4byte	.LASF11
 8293 004b 05       		.byte	0x5
 8294 004c 00       		.uleb128 0
 8295 004d 996F0000 		.4byte	.LASF12
 8296 0051 05       		.byte	0x5
 8297 0052 00       		.uleb128 0
 8298 0053 838F0000 		.4byte	.LASF13
 8299 0057 05       		.byte	0x5
 8300 0058 00       		.uleb128 0
 8301 0059 90190000 		.4byte	.LASF14
 8302 005d 05       		.byte	0x5
 8303 005e 00       		.uleb128 0
 8304 005f EA040000 		.4byte	.LASF15
 8305 0063 05       		.byte	0x5
 8306 0064 00       		.uleb128 0
 8307 0065 A8240000 		.4byte	.LASF16
 8308 0069 05       		.byte	0x5
 8309 006a 00       		.uleb128 0
 8310 006b CC200000 		.4byte	.LASF17
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 214


 8311 006f 05       		.byte	0x5
 8312 0070 00       		.uleb128 0
 8313 0071 861A0000 		.4byte	.LASF18
 8314 0075 05       		.byte	0x5
 8315 0076 00       		.uleb128 0
 8316 0077 10270000 		.4byte	.LASF19
 8317 007b 05       		.byte	0x5
 8318 007c 00       		.uleb128 0
 8319 007d A47C0000 		.4byte	.LASF20
 8320 0081 05       		.byte	0x5
 8321 0082 00       		.uleb128 0
 8322 0083 BF500000 		.4byte	.LASF21
 8323 0087 05       		.byte	0x5
 8324 0088 00       		.uleb128 0
 8325 0089 B7610000 		.4byte	.LASF22
 8326 008d 05       		.byte	0x5
 8327 008e 00       		.uleb128 0
 8328 008f 216A0000 		.4byte	.LASF23
 8329 0093 05       		.byte	0x5
 8330 0094 00       		.uleb128 0
 8331 0095 B00E0000 		.4byte	.LASF24
 8332 0099 05       		.byte	0x5
 8333 009a 00       		.uleb128 0
 8334 009b 23060000 		.4byte	.LASF25
 8335 009f 05       		.byte	0x5
 8336 00a0 00       		.uleb128 0
 8337 00a1 20530000 		.4byte	.LASF26
 8338 00a5 05       		.byte	0x5
 8339 00a6 00       		.uleb128 0
 8340 00a7 365A0000 		.4byte	.LASF27
 8341 00ab 05       		.byte	0x5
 8342 00ac 00       		.uleb128 0
 8343 00ad 11170000 		.4byte	.LASF28
 8344 00b1 05       		.byte	0x5
 8345 00b2 00       		.uleb128 0
 8346 00b3 3D060000 		.4byte	.LASF29
 8347 00b7 05       		.byte	0x5
 8348 00b8 00       		.uleb128 0
 8349 00b9 66320000 		.4byte	.LASF30
 8350 00bd 05       		.byte	0x5
 8351 00be 00       		.uleb128 0
 8352 00bf 57270000 		.4byte	.LASF31
 8353 00c3 05       		.byte	0x5
 8354 00c4 00       		.uleb128 0
 8355 00c5 3C0A0000 		.4byte	.LASF32
 8356 00c9 05       		.byte	0x5
 8357 00ca 00       		.uleb128 0
 8358 00cb 5A770000 		.4byte	.LASF33
 8359 00cf 05       		.byte	0x5
 8360 00d0 00       		.uleb128 0
 8361 00d1 17760000 		.4byte	.LASF34
 8362 00d5 05       		.byte	0x5
 8363 00d6 00       		.uleb128 0
 8364 00d7 216E0000 		.4byte	.LASF35
 8365 00db 05       		.byte	0x5
 8366 00dc 00       		.uleb128 0
 8367 00dd 9E180000 		.4byte	.LASF36
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 215


 8368 00e1 05       		.byte	0x5
 8369 00e2 00       		.uleb128 0
 8370 00e3 BE5C0000 		.4byte	.LASF37
 8371 00e7 05       		.byte	0x5
 8372 00e8 00       		.uleb128 0
 8373 00e9 97060000 		.4byte	.LASF38
 8374 00ed 05       		.byte	0x5
 8375 00ee 00       		.uleb128 0
 8376 00ef EB070000 		.4byte	.LASF39
 8377 00f3 05       		.byte	0x5
 8378 00f4 00       		.uleb128 0
 8379 00f5 499C0000 		.4byte	.LASF40
 8380 00f9 05       		.byte	0x5
 8381 00fa 00       		.uleb128 0
 8382 00fb 8F500000 		.4byte	.LASF41
 8383 00ff 05       		.byte	0x5
 8384 0100 00       		.uleb128 0
 8385 0101 25330000 		.4byte	.LASF42
 8386 0105 05       		.byte	0x5
 8387 0106 00       		.uleb128 0
 8388 0107 58400000 		.4byte	.LASF43
 8389 010b 05       		.byte	0x5
 8390 010c 00       		.uleb128 0
 8391 010d C18D0000 		.4byte	.LASF44
 8392 0111 05       		.byte	0x5
 8393 0112 00       		.uleb128 0
 8394 0113 791C0000 		.4byte	.LASF45
 8395 0117 05       		.byte	0x5
 8396 0118 00       		.uleb128 0
 8397 0119 26170000 		.4byte	.LASF46
 8398 011d 05       		.byte	0x5
 8399 011e 00       		.uleb128 0
 8400 011f 5C940000 		.4byte	.LASF47
 8401 0123 05       		.byte	0x5
 8402 0124 00       		.uleb128 0
 8403 0125 1D680000 		.4byte	.LASF48
 8404 0129 05       		.byte	0x5
 8405 012a 00       		.uleb128 0
 8406 012b 159F0000 		.4byte	.LASF49
 8407 012f 05       		.byte	0x5
 8408 0130 00       		.uleb128 0
 8409 0131 C7140000 		.4byte	.LASF50
 8410 0135 05       		.byte	0x5
 8411 0136 00       		.uleb128 0
 8412 0137 1B420000 		.4byte	.LASF51
 8413 013b 05       		.byte	0x5
 8414 013c 00       		.uleb128 0
 8415 013d BA760000 		.4byte	.LASF52
 8416 0141 05       		.byte	0x5
 8417 0142 00       		.uleb128 0
 8418 0143 A7440000 		.4byte	.LASF53
 8419 0147 05       		.byte	0x5
 8420 0148 00       		.uleb128 0
 8421 0149 6D160000 		.4byte	.LASF54
 8422 014d 05       		.byte	0x5
 8423 014e 00       		.uleb128 0
 8424 014f EF6C0000 		.4byte	.LASF55
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 216


 8425 0153 05       		.byte	0x5
 8426 0154 00       		.uleb128 0
 8427 0155 724E0000 		.4byte	.LASF56
 8428 0159 05       		.byte	0x5
 8429 015a 00       		.uleb128 0
 8430 015b 1A0A0000 		.4byte	.LASF57
 8431 015f 05       		.byte	0x5
 8432 0160 00       		.uleb128 0
 8433 0161 78410000 		.4byte	.LASF58
 8434 0165 05       		.byte	0x5
 8435 0166 00       		.uleb128 0
 8436 0167 AF910000 		.4byte	.LASF59
 8437 016b 05       		.byte	0x5
 8438 016c 00       		.uleb128 0
 8439 016d 8E200000 		.4byte	.LASF60
 8440 0171 05       		.byte	0x5
 8441 0172 00       		.uleb128 0
 8442 0173 04290000 		.4byte	.LASF61
 8443 0177 05       		.byte	0x5
 8444 0178 00       		.uleb128 0
 8445 0179 837B0000 		.4byte	.LASF62
 8446 017d 05       		.byte	0x5
 8447 017e 00       		.uleb128 0
 8448 017f 977B0000 		.4byte	.LASF63
 8449 0183 05       		.byte	0x5
 8450 0184 00       		.uleb128 0
 8451 0185 863D0000 		.4byte	.LASF64
 8452 0189 05       		.byte	0x5
 8453 018a 00       		.uleb128 0
 8454 018b 89300000 		.4byte	.LASF65
 8455 018f 05       		.byte	0x5
 8456 0190 00       		.uleb128 0
 8457 0191 4D730000 		.4byte	.LASF66
 8458 0195 05       		.byte	0x5
 8459 0196 00       		.uleb128 0
 8460 0197 BA570000 		.4byte	.LASF67
 8461 019b 05       		.byte	0x5
 8462 019c 00       		.uleb128 0
 8463 019d FD6A0000 		.4byte	.LASF68
 8464 01a1 05       		.byte	0x5
 8465 01a2 00       		.uleb128 0
 8466 01a3 FE9E0000 		.4byte	.LASF69
 8467 01a7 05       		.byte	0x5
 8468 01a8 00       		.uleb128 0
 8469 01a9 4E980000 		.4byte	.LASF70
 8470 01ad 05       		.byte	0x5
 8471 01ae 00       		.uleb128 0
 8472 01af 58630000 		.4byte	.LASF71
 8473 01b3 05       		.byte	0x5
 8474 01b4 00       		.uleb128 0
 8475 01b5 F5990000 		.4byte	.LASF72
 8476 01b9 05       		.byte	0x5
 8477 01ba 00       		.uleb128 0
 8478 01bb 204C0000 		.4byte	.LASF73
 8479 01bf 05       		.byte	0x5
 8480 01c0 00       		.uleb128 0
 8481 01c1 A4930000 		.4byte	.LASF74
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 217


 8482 01c5 05       		.byte	0x5
 8483 01c6 00       		.uleb128 0
 8484 01c7 4D930000 		.4byte	.LASF75
 8485 01cb 05       		.byte	0x5
 8486 01cc 00       		.uleb128 0
 8487 01cd 6D020000 		.4byte	.LASF76
 8488 01d1 05       		.byte	0x5
 8489 01d2 00       		.uleb128 0
 8490 01d3 EA970000 		.4byte	.LASF77
 8491 01d7 05       		.byte	0x5
 8492 01d8 00       		.uleb128 0
 8493 01d9 C2020000 		.4byte	.LASF78
 8494 01dd 05       		.byte	0x5
 8495 01de 00       		.uleb128 0
 8496 01df BD010000 		.4byte	.LASF79
 8497 01e3 05       		.byte	0x5
 8498 01e4 00       		.uleb128 0
 8499 01e5 959E0000 		.4byte	.LASF80
 8500 01e9 05       		.byte	0x5
 8501 01ea 00       		.uleb128 0
 8502 01eb F9160000 		.4byte	.LASF81
 8503 01ef 05       		.byte	0x5
 8504 01f0 00       		.uleb128 0
 8505 01f1 44850000 		.4byte	.LASF82
 8506 01f5 05       		.byte	0x5
 8507 01f6 00       		.uleb128 0
 8508 01f7 DC360000 		.4byte	.LASF83
 8509 01fb 05       		.byte	0x5
 8510 01fc 00       		.uleb128 0
 8511 01fd 103F0000 		.4byte	.LASF84
 8512 0201 05       		.byte	0x5
 8513 0202 00       		.uleb128 0
 8514 0203 4A870000 		.4byte	.LASF85
 8515 0207 05       		.byte	0x5
 8516 0208 00       		.uleb128 0
 8517 0209 44420000 		.4byte	.LASF86
 8518 020d 05       		.byte	0x5
 8519 020e 00       		.uleb128 0
 8520 020f 0C570000 		.4byte	.LASF87
 8521 0213 05       		.byte	0x5
 8522 0214 00       		.uleb128 0
 8523 0215 092C0000 		.4byte	.LASF88
 8524 0219 05       		.byte	0x5
 8525 021a 00       		.uleb128 0
 8526 021b A2230000 		.4byte	.LASF89
 8527 021f 05       		.byte	0x5
 8528 0220 00       		.uleb128 0
 8529 0221 113B0000 		.4byte	.LASF90
 8530 0225 05       		.byte	0x5
 8531 0226 00       		.uleb128 0
 8532 0227 B53A0000 		.4byte	.LASF91
 8533 022b 05       		.byte	0x5
 8534 022c 00       		.uleb128 0
 8535 022d 613C0000 		.4byte	.LASF92
 8536 0231 05       		.byte	0x5
 8537 0232 00       		.uleb128 0
 8538 0233 17650000 		.4byte	.LASF93
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 218


 8539 0237 05       		.byte	0x5
 8540 0238 00       		.uleb128 0
 8541 0239 312F0000 		.4byte	.LASF94
 8542 023d 05       		.byte	0x5
 8543 023e 00       		.uleb128 0
 8544 023f 8E9A0000 		.4byte	.LASF95
 8545 0243 05       		.byte	0x5
 8546 0244 00       		.uleb128 0
 8547 0245 78520000 		.4byte	.LASF96
 8548 0249 05       		.byte	0x5
 8549 024a 00       		.uleb128 0
 8550 024b 8C0E0000 		.4byte	.LASF97
 8551 024f 05       		.byte	0x5
 8552 0250 00       		.uleb128 0
 8553 0251 8A430000 		.4byte	.LASF98
 8554 0255 05       		.byte	0x5
 8555 0256 00       		.uleb128 0
 8556 0257 017D0000 		.4byte	.LASF99
 8557 025b 05       		.byte	0x5
 8558 025c 00       		.uleb128 0
 8559 025d 09370000 		.4byte	.LASF100
 8560 0261 05       		.byte	0x5
 8561 0262 00       		.uleb128 0
 8562 0263 DC070000 		.4byte	.LASF101
 8563 0267 05       		.byte	0x5
 8564 0268 00       		.uleb128 0
 8565 0269 76090000 		.4byte	.LASF102
 8566 026d 05       		.byte	0x5
 8567 026e 00       		.uleb128 0
 8568 026f CE810000 		.4byte	.LASF103
 8569 0273 05       		.byte	0x5
 8570 0274 00       		.uleb128 0
 8571 0275 FC3D0000 		.4byte	.LASF104
 8572 0279 05       		.byte	0x5
 8573 027a 00       		.uleb128 0
 8574 027b 27310000 		.4byte	.LASF105
 8575 027f 05       		.byte	0x5
 8576 0280 00       		.uleb128 0
 8577 0281 54690000 		.4byte	.LASF106
 8578 0285 05       		.byte	0x5
 8579 0286 00       		.uleb128 0
 8580 0287 B7670000 		.4byte	.LASF107
 8581 028b 05       		.byte	0x5
 8582 028c 00       		.uleb128 0
 8583 028d 2E1B0000 		.4byte	.LASF108
 8584 0291 05       		.byte	0x5
 8585 0292 00       		.uleb128 0
 8586 0293 BB6F0000 		.4byte	.LASF109
 8587 0297 05       		.byte	0x5
 8588 0298 00       		.uleb128 0
 8589 0299 87220000 		.4byte	.LASF110
 8590 029d 05       		.byte	0x5
 8591 029e 00       		.uleb128 0
 8592 029f 71150000 		.4byte	.LASF111
 8593 02a3 05       		.byte	0x5
 8594 02a4 00       		.uleb128 0
 8595 02a5 A0100000 		.4byte	.LASF112
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 219


 8596 02a9 05       		.byte	0x5
 8597 02aa 00       		.uleb128 0
 8598 02ab D3110000 		.4byte	.LASF113
 8599 02af 05       		.byte	0x5
 8600 02b0 00       		.uleb128 0
 8601 02b1 5C190000 		.4byte	.LASF114
 8602 02b5 05       		.byte	0x5
 8603 02b6 00       		.uleb128 0
 8604 02b7 7A330000 		.4byte	.LASF115
 8605 02bb 05       		.byte	0x5
 8606 02bc 00       		.uleb128 0
 8607 02bd 40120000 		.4byte	.LASF116
 8608 02c1 05       		.byte	0x5
 8609 02c2 00       		.uleb128 0
 8610 02c3 53440000 		.4byte	.LASF117
 8611 02c7 05       		.byte	0x5
 8612 02c8 00       		.uleb128 0
 8613 02c9 83210000 		.4byte	.LASF118
 8614 02cd 05       		.byte	0x5
 8615 02ce 00       		.uleb128 0
 8616 02cf 0A400000 		.4byte	.LASF119
 8617 02d3 05       		.byte	0x5
 8618 02d4 00       		.uleb128 0
 8619 02d5 3E570000 		.4byte	.LASF120
 8620 02d9 05       		.byte	0x5
 8621 02da 00       		.uleb128 0
 8622 02db B1550000 		.4byte	.LASF121
 8623 02df 05       		.byte	0x5
 8624 02e0 00       		.uleb128 0
 8625 02e1 3F4D0000 		.4byte	.LASF122
 8626 02e5 05       		.byte	0x5
 8627 02e6 00       		.uleb128 0
 8628 02e7 6C460000 		.4byte	.LASF123
 8629 02eb 05       		.byte	0x5
 8630 02ec 00       		.uleb128 0
 8631 02ed F11F0000 		.4byte	.LASF124
 8632 02f1 05       		.byte	0x5
 8633 02f2 00       		.uleb128 0
 8634 02f3 78500000 		.4byte	.LASF125
 8635 02f7 05       		.byte	0x5
 8636 02f8 00       		.uleb128 0
 8637 02f9 C06A0000 		.4byte	.LASF126
 8638 02fd 05       		.byte	0x5
 8639 02fe 00       		.uleb128 0
 8640 02ff 7C190000 		.4byte	.LASF127
 8641 0303 05       		.byte	0x5
 8642 0304 00       		.uleb128 0
 8643 0305 11210000 		.4byte	.LASF128
 8644 0309 05       		.byte	0x5
 8645 030a 00       		.uleb128 0
 8646 030b 051C0000 		.4byte	.LASF129
 8647 030f 05       		.byte	0x5
 8648 0310 00       		.uleb128 0
 8649 0311 554B0000 		.4byte	.LASF130
 8650 0315 05       		.byte	0x5
 8651 0316 00       		.uleb128 0
 8652 0317 77250000 		.4byte	.LASF131
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 220


 8653 031b 05       		.byte	0x5
 8654 031c 00       		.uleb128 0
 8655 031d CB310000 		.4byte	.LASF132
 8656 0321 05       		.byte	0x5
 8657 0322 00       		.uleb128 0
 8658 0323 5B2F0000 		.4byte	.LASF133
 8659 0327 05       		.byte	0x5
 8660 0328 00       		.uleb128 0
 8661 0329 82060000 		.4byte	.LASF134
 8662 032d 05       		.byte	0x5
 8663 032e 00       		.uleb128 0
 8664 032f 9E820000 		.4byte	.LASF135
 8665 0333 05       		.byte	0x5
 8666 0334 00       		.uleb128 0
 8667 0335 7F000000 		.4byte	.LASF136
 8668 0339 05       		.byte	0x5
 8669 033a 00       		.uleb128 0
 8670 033b C69E0000 		.4byte	.LASF137
 8671 033f 05       		.byte	0x5
 8672 0340 00       		.uleb128 0
 8673 0341 327C0000 		.4byte	.LASF138
 8674 0345 05       		.byte	0x5
 8675 0346 00       		.uleb128 0
 8676 0347 71650000 		.4byte	.LASF139
 8677 034b 05       		.byte	0x5
 8678 034c 00       		.uleb128 0
 8679 034d 93210000 		.4byte	.LASF140
 8680 0351 05       		.byte	0x5
 8681 0352 00       		.uleb128 0
 8682 0353 2A460000 		.4byte	.LASF141
 8683 0357 05       		.byte	0x5
 8684 0358 00       		.uleb128 0
 8685 0359 1B050000 		.4byte	.LASF142
 8686 035d 05       		.byte	0x5
 8687 035e 00       		.uleb128 0
 8688 035f 76860000 		.4byte	.LASF143
 8689 0363 05       		.byte	0x5
 8690 0364 00       		.uleb128 0
 8691 0365 B9940000 		.4byte	.LASF144
 8692 0369 05       		.byte	0x5
 8693 036a 00       		.uleb128 0
 8694 036b 99150000 		.4byte	.LASF145
 8695 036f 05       		.byte	0x5
 8696 0370 00       		.uleb128 0
 8697 0371 1E3E0000 		.4byte	.LASF146
 8698 0375 05       		.byte	0x5
 8699 0376 00       		.uleb128 0
 8700 0377 848E0000 		.4byte	.LASF147
 8701 037b 05       		.byte	0x5
 8702 037c 00       		.uleb128 0
 8703 037d B42C0000 		.4byte	.LASF148
 8704 0381 05       		.byte	0x5
 8705 0382 00       		.uleb128 0
 8706 0383 7B980000 		.4byte	.LASF149
 8707 0387 05       		.byte	0x5
 8708 0388 00       		.uleb128 0
 8709 0389 CD780000 		.4byte	.LASF150
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 221


 8710 038d 05       		.byte	0x5
 8711 038e 00       		.uleb128 0
 8712 038f 7E070000 		.4byte	.LASF151
 8713 0393 05       		.byte	0x5
 8714 0394 00       		.uleb128 0
 8715 0395 29920000 		.4byte	.LASF152
 8716 0399 05       		.byte	0x5
 8717 039a 00       		.uleb128 0
 8718 039b 6B180000 		.4byte	.LASF153
 8719 039f 05       		.byte	0x5
 8720 03a0 00       		.uleb128 0
 8721 03a1 155E0000 		.4byte	.LASF154
 8722 03a5 05       		.byte	0x5
 8723 03a6 00       		.uleb128 0
 8724 03a7 1D240000 		.4byte	.LASF155
 8725 03ab 05       		.byte	0x5
 8726 03ac 00       		.uleb128 0
 8727 03ad 4B540000 		.4byte	.LASF156
 8728 03b1 05       		.byte	0x5
 8729 03b2 00       		.uleb128 0
 8730 03b3 50000000 		.4byte	.LASF157
 8731 03b7 05       		.byte	0x5
 8732 03b8 00       		.uleb128 0
 8733 03b9 862F0000 		.4byte	.LASF158
 8734 03bd 05       		.byte	0x5
 8735 03be 00       		.uleb128 0
 8736 03bf 297E0000 		.4byte	.LASF159
 8737 03c3 05       		.byte	0x5
 8738 03c4 00       		.uleb128 0
 8739 03c5 28450000 		.4byte	.LASF160
 8740 03c9 05       		.byte	0x5
 8741 03ca 00       		.uleb128 0
 8742 03cb 55480000 		.4byte	.LASF161
 8743 03cf 05       		.byte	0x5
 8744 03d0 00       		.uleb128 0
 8745 03d1 3B670000 		.4byte	.LASF162
 8746 03d5 05       		.byte	0x5
 8747 03d6 00       		.uleb128 0
 8748 03d7 54350000 		.4byte	.LASF163
 8749 03db 05       		.byte	0x5
 8750 03dc 00       		.uleb128 0
 8751 03dd 094E0000 		.4byte	.LASF164
 8752 03e1 05       		.byte	0x5
 8753 03e2 00       		.uleb128 0
 8754 03e3 C0180000 		.4byte	.LASF165
 8755 03e7 05       		.byte	0x5
 8756 03e8 00       		.uleb128 0
 8757 03e9 868C0000 		.4byte	.LASF166
 8758 03ed 05       		.byte	0x5
 8759 03ee 00       		.uleb128 0
 8760 03ef FE400000 		.4byte	.LASF167
 8761 03f3 05       		.byte	0x5
 8762 03f4 00       		.uleb128 0
 8763 03f5 76890000 		.4byte	.LASF168
 8764 03f9 05       		.byte	0x5
 8765 03fa 00       		.uleb128 0
 8766 03fb 08550000 		.4byte	.LASF169
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 222


 8767 03ff 05       		.byte	0x5
 8768 0400 00       		.uleb128 0
 8769 0401 BF100000 		.4byte	.LASF170
 8770 0405 05       		.byte	0x5
 8771 0406 00       		.uleb128 0
 8772 0407 E6020000 		.4byte	.LASF171
 8773 040b 05       		.byte	0x5
 8774 040c 00       		.uleb128 0
 8775 040d 6B6A0000 		.4byte	.LASF172
 8776 0411 05       		.byte	0x5
 8777 0412 00       		.uleb128 0
 8778 0413 A0580000 		.4byte	.LASF173
 8779 0417 05       		.byte	0x5
 8780 0418 00       		.uleb128 0
 8781 0419 58060000 		.4byte	.LASF174
 8782 041d 05       		.byte	0x5
 8783 041e 00       		.uleb128 0
 8784 041f 4E860000 		.4byte	.LASF175
 8785 0423 05       		.byte	0x5
 8786 0424 00       		.uleb128 0
 8787 0425 7D1B0000 		.4byte	.LASF176
 8788 0429 05       		.byte	0x5
 8789 042a 00       		.uleb128 0
 8790 042b 6E930000 		.4byte	.LASF177
 8791 042f 05       		.byte	0x5
 8792 0430 00       		.uleb128 0
 8793 0431 7A390000 		.4byte	.LASF178
 8794 0435 05       		.byte	0x5
 8795 0436 00       		.uleb128 0
 8796 0437 7C5D0000 		.4byte	.LASF179
 8797 043b 05       		.byte	0x5
 8798 043c 00       		.uleb128 0
 8799 043d 27160000 		.4byte	.LASF180
 8800 0441 05       		.byte	0x5
 8801 0442 00       		.uleb128 0
 8802 0443 3F7A0000 		.4byte	.LASF181
 8803 0447 05       		.byte	0x5
 8804 0448 00       		.uleb128 0
 8805 0449 E87C0000 		.4byte	.LASF182
 8806 044d 05       		.byte	0x5
 8807 044e 00       		.uleb128 0
 8808 044f 2F210000 		.4byte	.LASF183
 8809 0453 05       		.byte	0x5
 8810 0454 00       		.uleb128 0
 8811 0455 A5000000 		.4byte	.LASF184
 8812 0459 05       		.byte	0x5
 8813 045a 00       		.uleb128 0
 8814 045b ED7B0000 		.4byte	.LASF185
 8815 045f 05       		.byte	0x5
 8816 0460 00       		.uleb128 0
 8817 0461 A2010000 		.4byte	.LASF186
 8818 0465 05       		.byte	0x5
 8819 0466 00       		.uleb128 0
 8820 0467 98520000 		.4byte	.LASF187
 8821 046b 05       		.byte	0x5
 8822 046c 00       		.uleb128 0
 8823 046d E8770000 		.4byte	.LASF188
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 223


 8824 0471 05       		.byte	0x5
 8825 0472 00       		.uleb128 0
 8826 0473 98990000 		.4byte	.LASF189
 8827 0477 05       		.byte	0x5
 8828 0478 00       		.uleb128 0
 8829 0479 510E0000 		.4byte	.LASF190
 8830 047d 05       		.byte	0x5
 8831 047e 00       		.uleb128 0
 8832 047f 183A0000 		.4byte	.LASF191
 8833 0483 05       		.byte	0x5
 8834 0484 00       		.uleb128 0
 8835 0485 D22A0000 		.4byte	.LASF192
 8836 0489 05       		.byte	0x5
 8837 048a 00       		.uleb128 0
 8838 048b 842B0000 		.4byte	.LASF193
 8839 048f 05       		.byte	0x5
 8840 0490 00       		.uleb128 0
 8841 0491 98770000 		.4byte	.LASF194
 8842 0495 05       		.byte	0x5
 8843 0496 00       		.uleb128 0
 8844 0497 AB390000 		.4byte	.LASF195
 8845 049b 05       		.byte	0x5
 8846 049c 00       		.uleb128 0
 8847 049d 9D1D0000 		.4byte	.LASF196
 8848 04a1 05       		.byte	0x5
 8849 04a2 00       		.uleb128 0
 8850 04a3 91690000 		.4byte	.LASF197
 8851 04a7 05       		.byte	0x5
 8852 04a8 00       		.uleb128 0
 8853 04a9 71050000 		.4byte	.LASF198
 8854 04ad 05       		.byte	0x5
 8855 04ae 00       		.uleb128 0
 8856 04af 69210000 		.4byte	.LASF199
 8857 04b3 05       		.byte	0x5
 8858 04b4 00       		.uleb128 0
 8859 04b5 AD410000 		.4byte	.LASF200
 8860 04b9 05       		.byte	0x5
 8861 04ba 00       		.uleb128 0
 8862 04bb 00540000 		.4byte	.LASF201
 8863 04bf 05       		.byte	0x5
 8864 04c0 00       		.uleb128 0
 8865 04c1 BB640000 		.4byte	.LASF202
 8866 04c5 05       		.byte	0x5
 8867 04c6 00       		.uleb128 0
 8868 04c7 2B130000 		.4byte	.LASF203
 8869 04cb 05       		.byte	0x5
 8870 04cc 00       		.uleb128 0
 8871 04cd 00520000 		.4byte	.LASF204
 8872 04d1 05       		.byte	0x5
 8873 04d2 00       		.uleb128 0
 8874 04d3 034C0000 		.4byte	.LASF205
 8875 04d7 05       		.byte	0x5
 8876 04d8 00       		.uleb128 0
 8877 04d9 AC500000 		.4byte	.LASF206
 8878 04dd 05       		.byte	0x5
 8879 04de 00       		.uleb128 0
 8880 04df 25650000 		.4byte	.LASF207
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 224


 8881 04e3 05       		.byte	0x5
 8882 04e4 00       		.uleb128 0
 8883 04e5 5A3E0000 		.4byte	.LASF208
 8884 04e9 05       		.byte	0x5
 8885 04ea 00       		.uleb128 0
 8886 04eb 42590000 		.4byte	.LASF209
 8887 04ef 05       		.byte	0x5
 8888 04f0 00       		.uleb128 0
 8889 04f1 C45E0000 		.4byte	.LASF210
 8890 04f5 05       		.byte	0x5
 8891 04f6 00       		.uleb128 0
 8892 04f7 780D0000 		.4byte	.LASF211
 8893 04fb 05       		.byte	0x5
 8894 04fc 00       		.uleb128 0
 8895 04fd E09E0000 		.4byte	.LASF212
 8896 0501 05       		.byte	0x5
 8897 0502 00       		.uleb128 0
 8898 0503 42710000 		.4byte	.LASF213
 8899 0507 05       		.byte	0x5
 8900 0508 00       		.uleb128 0
 8901 0509 886D0000 		.4byte	.LASF214
 8902 050d 05       		.byte	0x5
 8903 050e 00       		.uleb128 0
 8904 050f 417C0000 		.4byte	.LASF215
 8905 0513 05       		.byte	0x5
 8906 0514 00       		.uleb128 0
 8907 0515 F4940000 		.4byte	.LASF216
 8908 0519 05       		.byte	0x5
 8909 051a 00       		.uleb128 0
 8910 051b 62900000 		.4byte	.LASF217
 8911 051f 05       		.byte	0x5
 8912 0520 00       		.uleb128 0
 8913 0521 86110000 		.4byte	.LASF218
 8914 0525 05       		.byte	0x5
 8915 0526 00       		.uleb128 0
 8916 0527 157A0000 		.4byte	.LASF219
 8917 052b 05       		.byte	0x5
 8918 052c 00       		.uleb128 0
 8919 052d 51990000 		.4byte	.LASF220
 8920 0531 05       		.byte	0x5
 8921 0532 00       		.uleb128 0
 8922 0533 A4090000 		.4byte	.LASF221
 8923 0537 05       		.byte	0x5
 8924 0538 00       		.uleb128 0
 8925 0539 56490000 		.4byte	.LASF222
 8926 053d 05       		.byte	0x5
 8927 053e 00       		.uleb128 0
 8928 053f BA8E0000 		.4byte	.LASF223
 8929 0543 05       		.byte	0x5
 8930 0544 00       		.uleb128 0
 8931 0545 CE170000 		.4byte	.LASF224
 8932 0549 05       		.byte	0x5
 8933 054a 00       		.uleb128 0
 8934 054b 8C890000 		.4byte	.LASF225
 8935 054f 05       		.byte	0x5
 8936 0550 00       		.uleb128 0
 8937 0551 699F0000 		.4byte	.LASF226
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 225


 8938 0555 05       		.byte	0x5
 8939 0556 00       		.uleb128 0
 8940 0557 DF200000 		.4byte	.LASF227
 8941 055b 05       		.byte	0x5
 8942 055c 00       		.uleb128 0
 8943 055d 666D0000 		.4byte	.LASF228
 8944 0561 05       		.byte	0x5
 8945 0562 00       		.uleb128 0
 8946 0563 687B0000 		.4byte	.LASF229
 8947 0567 05       		.byte	0x5
 8948 0568 00       		.uleb128 0
 8949 0569 BF900000 		.4byte	.LASF230
 8950 056d 05       		.byte	0x5
 8951 056e 00       		.uleb128 0
 8952 056f 67340000 		.4byte	.LASF231
 8953 0573 05       		.byte	0x5
 8954 0574 00       		.uleb128 0
 8955 0575 E1550000 		.4byte	.LASF232
 8956 0579 05       		.byte	0x5
 8957 057a 00       		.uleb128 0
 8958 057b CF610000 		.4byte	.LASF233
 8959 057f 05       		.byte	0x5
 8960 0580 00       		.uleb128 0
 8961 0581 CC050000 		.4byte	.LASF234
 8962 0585 05       		.byte	0x5
 8963 0586 00       		.uleb128 0
 8964 0587 AF780000 		.4byte	.LASF235
 8965 058b 05       		.byte	0x5
 8966 058c 00       		.uleb128 0
 8967 058d FD140000 		.4byte	.LASF236
 8968 0591 05       		.byte	0x5
 8969 0592 00       		.uleb128 0
 8970 0593 707E0000 		.4byte	.LASF237
 8971 0597 05       		.byte	0x5
 8972 0598 00       		.uleb128 0
 8973 0599 E3030000 		.4byte	.LASF238
 8974 059d 05       		.byte	0x5
 8975 059e 00       		.uleb128 0
 8976 059f C93E0000 		.4byte	.LASF239
 8977 05a3 05       		.byte	0x5
 8978 05a4 00       		.uleb128 0
 8979 05a5 EF910000 		.4byte	.LASF240
 8980 05a9 05       		.byte	0x5
 8981 05aa 00       		.uleb128 0
 8982 05ab 794B0000 		.4byte	.LASF241
 8983 05af 05       		.byte	0x5
 8984 05b0 00       		.uleb128 0
 8985 05b1 1D150000 		.4byte	.LASF242
 8986 05b5 05       		.byte	0x5
 8987 05b6 00       		.uleb128 0
 8988 05b7 57310000 		.4byte	.LASF243
 8989 05bb 05       		.byte	0x5
 8990 05bc 00       		.uleb128 0
 8991 05bd B9580000 		.4byte	.LASF244
 8992 05c1 05       		.byte	0x5
 8993 05c2 00       		.uleb128 0
 8994 05c3 B8560000 		.4byte	.LASF245
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 226


 8995 05c7 05       		.byte	0x5
 8996 05c8 00       		.uleb128 0
 8997 05c9 98460000 		.4byte	.LASF246
 8998 05cd 05       		.byte	0x5
 8999 05ce 00       		.uleb128 0
 9000 05cf 11110000 		.4byte	.LASF247
 9001 05d3 05       		.byte	0x5
 9002 05d4 00       		.uleb128 0
 9003 05d5 BF8B0000 		.4byte	.LASF248
 9004 05d9 05       		.byte	0x5
 9005 05da 00       		.uleb128 0
 9006 05db F96D0000 		.4byte	.LASF249
 9007 05df 05       		.byte	0x5
 9008 05e0 00       		.uleb128 0
 9009 05e1 50020000 		.4byte	.LASF250
 9010 05e5 05       		.byte	0x5
 9011 05e6 00       		.uleb128 0
 9012 05e7 B6030000 		.4byte	.LASF251
 9013 05eb 05       		.byte	0x5
 9014 05ec 00       		.uleb128 0
 9015 05ed D96A0000 		.4byte	.LASF252
 9016 05f1 05       		.byte	0x5
 9017 05f2 00       		.uleb128 0
 9018 05f3 9C4C0000 		.4byte	.LASF253
 9019 05f7 05       		.byte	0x5
 9020 05f8 00       		.uleb128 0
 9021 05f9 B9080000 		.4byte	.LASF254
 9022 05fd 05       		.byte	0x5
 9023 05fe 00       		.uleb128 0
 9024 05ff 0A920000 		.4byte	.LASF255
 9025 0603 05       		.byte	0x5
 9026 0604 00       		.uleb128 0
 9027 0605 9B1F0000 		.4byte	.LASF256
 9028 0609 05       		.byte	0x5
 9029 060a 00       		.uleb128 0
 9030 060b 99410000 		.4byte	.LASF257
 9031 060f 05       		.byte	0x5
 9032 0610 00       		.uleb128 0
 9033 0611 29020000 		.4byte	.LASF258
 9034 0615 05       		.byte	0x5
 9035 0616 00       		.uleb128 0
 9036 0617 2B3A0000 		.4byte	.LASF259
 9037 061b 05       		.byte	0x5
 9038 061c 00       		.uleb128 0
 9039 061d DC1D0000 		.4byte	.LASF260
 9040 0621 05       		.byte	0x5
 9041 0622 00       		.uleb128 0
 9042 0623 BB240000 		.4byte	.LASF261
 9043 0627 05       		.byte	0x5
 9044 0628 00       		.uleb128 0
 9045 0629 A3560000 		.4byte	.LASF262
 9046 062d 05       		.byte	0x5
 9047 062e 00       		.uleb128 0
 9048 062f 9E8C0000 		.4byte	.LASF263
 9049 0633 05       		.byte	0x5
 9050 0634 00       		.uleb128 0
 9051 0635 8C050000 		.4byte	.LASF264
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 227


 9052 0639 05       		.byte	0x5
 9053 063a 00       		.uleb128 0
 9054 063b 356B0000 		.4byte	.LASF265
 9055 063f 05       		.byte	0x5
 9056 0640 00       		.uleb128 0
 9057 0641 C5880000 		.4byte	.LASF266
 9058 0645 05       		.byte	0x5
 9059 0646 00       		.uleb128 0
 9060 0647 A0750000 		.4byte	.LASF267
 9061 064b 05       		.byte	0x5
 9062 064c 00       		.uleb128 0
 9063 064d 10970000 		.4byte	.LASF268
 9064 0651 05       		.byte	0x5
 9065 0652 00       		.uleb128 0
 9066 0653 41340000 		.4byte	.LASF269
 9067 0657 05       		.byte	0x5
 9068 0658 00       		.uleb128 0
 9069 0659 DD0E0000 		.4byte	.LASF270
 9070 065d 05       		.byte	0x5
 9071 065e 00       		.uleb128 0
 9072 065f 15060000 		.4byte	.LASF271
 9073 0663 05       		.byte	0x5
 9074 0664 00       		.uleb128 0
 9075 0665 696B0000 		.4byte	.LASF272
 9076 0669 05       		.byte	0x5
 9077 066a 00       		.uleb128 0
 9078 066b 71710000 		.4byte	.LASF273
 9079 066f 05       		.byte	0x5
 9080 0670 00       		.uleb128 0
 9081 0671 D4230000 		.4byte	.LASF274
 9082 0675 05       		.byte	0x5
 9083 0676 00       		.uleb128 0
 9084 0677 0D030000 		.4byte	.LASF275
 9085 067b 05       		.byte	0x5
 9086 067c 00       		.uleb128 0
 9087 067d 47580000 		.4byte	.LASF276
 9088 0681 05       		.byte	0x5
 9089 0682 00       		.uleb128 0
 9090 0683 394C0000 		.4byte	.LASF277
 9091 0687 05       		.byte	0x5
 9092 0688 00       		.uleb128 0
 9093 0689 CD0F0000 		.4byte	.LASF278
 9094 068d 05       		.byte	0x5
 9095 068e 00       		.uleb128 0
 9096 068f E2760000 		.4byte	.LASF279
 9097 0693 05       		.byte	0x5
 9098 0694 00       		.uleb128 0
 9099 0695 A00E0000 		.4byte	.LASF280
 9100 0699 05       		.byte	0x5
 9101 069a 00       		.uleb128 0
 9102 069b 72760000 		.4byte	.LASF281
 9103 069f 05       		.byte	0x5
 9104 06a0 00       		.uleb128 0
 9105 06a1 1F540000 		.4byte	.LASF282
 9106 06a5 05       		.byte	0x5
 9107 06a6 00       		.uleb128 0
 9108 06a7 748F0000 		.4byte	.LASF283
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 228


 9109 06ab 05       		.byte	0x5
 9110 06ac 00       		.uleb128 0
 9111 06ad 956E0000 		.4byte	.LASF284
 9112 06b1 05       		.byte	0x5
 9113 06b2 00       		.uleb128 0
 9114 06b3 B8740000 		.4byte	.LASF285
 9115 06b7 05       		.byte	0x5
 9116 06b8 00       		.uleb128 0
 9117 06b9 FB290000 		.4byte	.LASF286
 9118 06bd 05       		.byte	0x5
 9119 06be 00       		.uleb128 0
 9120 06bf 3F110000 		.4byte	.LASF287
 9121 06c3 05       		.byte	0x5
 9122 06c4 00       		.uleb128 0
 9123 06c5 C7740000 		.4byte	.LASF288
 9124 06c9 05       		.byte	0x5
 9125 06ca 00       		.uleb128 0
 9126 06cb BD3F0000 		.4byte	.LASF289
 9127 06cf 05       		.byte	0x5
 9128 06d0 00       		.uleb128 0
 9129 06d1 602E0000 		.4byte	.LASF290
 9130 06d5 05       		.byte	0x5
 9131 06d6 00       		.uleb128 0
 9132 06d7 690D0000 		.4byte	.LASF291
 9133 06db 05       		.byte	0x5
 9134 06dc 00       		.uleb128 0
 9135 06dd A5350000 		.4byte	.LASF292
 9136 06e1 05       		.byte	0x5
 9137 06e2 00       		.uleb128 0
 9138 06e3 2F620000 		.4byte	.LASF293
 9139 06e7 05       		.byte	0x5
 9140 06e8 00       		.uleb128 0
 9141 06e9 59520000 		.4byte	.LASF294
 9142 06ed 05       		.byte	0x5
 9143 06ee 00       		.uleb128 0
 9144 06ef D1910000 		.4byte	.LASF295
 9145 06f3 05       		.byte	0x5
 9146 06f4 00       		.uleb128 0
 9147 06f5 C15D0000 		.4byte	.LASF296
 9148 06f9 05       		.byte	0x5
 9149 06fa 00       		.uleb128 0
 9150 06fb B5270000 		.4byte	.LASF297
 9151 06ff 05       		.byte	0x5
 9152 0700 00       		.uleb128 0
 9153 0701 AD160000 		.4byte	.LASF298
 9154 0705 05       		.byte	0x5
 9155 0706 00       		.uleb128 0
 9156 0707 21820000 		.4byte	.LASF299
 9157 070b 05       		.byte	0x5
 9158 070c 00       		.uleb128 0
 9159 070d E01B0000 		.4byte	.LASF300
 9160 0711 05       		.byte	0x5
 9161 0712 00       		.uleb128 0
 9162 0713 34890000 		.4byte	.LASF301
 9163 0717 05       		.byte	0x5
 9164 0718 00       		.uleb128 0
 9165 0719 D87B0000 		.4byte	.LASF302
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 229


 9166 071d 05       		.byte	0x5
 9167 071e 00       		.uleb128 0
 9168 071f 9E3A0000 		.4byte	.LASF303
 9169 0723 05       		.byte	0x5
 9170 0724 00       		.uleb128 0
 9171 0725 920B0000 		.4byte	.LASF304
 9172 0729 05       		.byte	0x5
 9173 072a 00       		.uleb128 0
 9174 072b F50E0000 		.4byte	.LASF305
 9175 072f 05       		.byte	0x5
 9176 0730 00       		.uleb128 0
 9177 0731 EF000000 		.4byte	.LASF306
 9178 0735 05       		.byte	0x5
 9179 0736 00       		.uleb128 0
 9180 0737 1A090000 		.4byte	.LASF307
 9181 073b 05       		.byte	0x5
 9182 073c 00       		.uleb128 0
 9183 073d C5270000 		.4byte	.LASF308
 9184 0741 05       		.byte	0x5
 9185 0742 00       		.uleb128 0
 9186 0743 DD710000 		.4byte	.LASF309
 9187 0747 05       		.byte	0x5
 9188 0748 00       		.uleb128 0
 9189 0749 46170000 		.4byte	.LASF310
 9190 074d 05       		.byte	0x5
 9191 074e 00       		.uleb128 0
 9192 074f 835E0000 		.4byte	.LASF311
 9193 0753 05       		.byte	0x5
 9194 0754 00       		.uleb128 0
 9195 0755 EE450000 		.4byte	.LASF312
 9196 0759 05       		.byte	0x5
 9197 075a 00       		.uleb128 0
 9198 075b 111E0000 		.4byte	.LASF313
 9199 075f 05       		.byte	0x5
 9200 0760 00       		.uleb128 0
 9201 0761 CE000000 		.4byte	.LASF314
 9202 0765 05       		.byte	0x5
 9203 0766 00       		.uleb128 0
 9204 0767 A4330000 		.4byte	.LASF315
 9205 076b 05       		.byte	0x5
 9206 076c 00       		.uleb128 0
 9207 076d B3770000 		.4byte	.LASF316
 9208 0771 05       		.byte	0x5
 9209 0772 00       		.uleb128 0
 9210 0773 7E4C0000 		.4byte	.LASF317
 9211 0777 05       		.byte	0x5
 9212 0778 00       		.uleb128 0
 9213 0779 132A0000 		.4byte	.LASF318
 9214 077d 05       		.byte	0x5
 9215 077e 00       		.uleb128 0
 9216 077f 92340000 		.4byte	.LASF319
 9217 0783 05       		.byte	0x5
 9218 0784 00       		.uleb128 0
 9219 0785 793C0000 		.4byte	.LASF320
 9220 0789 05       		.byte	0x5
 9221 078a 00       		.uleb128 0
 9222 078b 783F0000 		.4byte	.LASF321
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 230


 9223 078f 05       		.byte	0x5
 9224 0790 00       		.uleb128 0
 9225 0791 3B270000 		.4byte	.LASF322
 9226 0795 05       		.byte	0x5
 9227 0796 00       		.uleb128 0
 9228 0797 11510000 		.4byte	.LASF323
 9229 079b 05       		.byte	0x5
 9230 079c 00       		.uleb128 0
 9231 079d 118B0000 		.4byte	.LASF324
 9232 07a1 05       		.byte	0x5
 9233 07a2 00       		.uleb128 0
 9234 07a3 62590000 		.4byte	.LASF325
 9235 07a7 05       		.byte	0x5
 9236 07a8 00       		.uleb128 0
 9237 07a9 9A3C0000 		.4byte	.LASF326
 9238 07ad 05       		.byte	0x5
 9239 07ae 00       		.uleb128 0
 9240 07af 23490000 		.4byte	.LASF327
 9241 07b3 05       		.byte	0x5
 9242 07b4 00       		.uleb128 0
 9243 07b5 258B0000 		.4byte	.LASF328
 9244 07b9 05       		.byte	0x5
 9245 07ba 00       		.uleb128 0
 9246 07bb CD640000 		.4byte	.LASF329
 9247 07bf 05       		.byte	0x5
 9248 07c0 00       		.uleb128 0
 9249 07c1 FB980000 		.4byte	.LASF330
 9250 07c5 05       		.byte	0x5
 9251 07c6 00       		.uleb128 0
 9252 07c7 AF3C0000 		.4byte	.LASF331
 9253 07cb 05       		.byte	0x5
 9254 07cc 00       		.uleb128 0
 9255 07cd BB5F0000 		.4byte	.LASF332
 9256 07d1 05       		.byte	0x5
 9257 07d2 00       		.uleb128 0
 9258 07d3 5F3D0000 		.4byte	.LASF333
 9259 07d7 05       		.byte	0x5
 9260 07d8 00       		.uleb128 0
 9261 07d9 B1060000 		.4byte	.LASF334
 9262 07dd 05       		.byte	0x5
 9263 07de 00       		.uleb128 0
 9264 07df 0F600000 		.4byte	.LASF335
 9265 07e3 05       		.byte	0x5
 9266 07e4 00       		.uleb128 0
 9267 07e5 F04C0000 		.4byte	.LASF336
 9268 07e9 05       		.byte	0x5
 9269 07ea 00       		.uleb128 0
 9270 07eb B3430000 		.4byte	.LASF337
 9271 07ef 05       		.byte	0x5
 9272 07f0 00       		.uleb128 0
 9273 07f1 15950000 		.4byte	.LASF338
 9274 07f5 05       		.byte	0x5
 9275 07f6 00       		.uleb128 0
 9276 07f7 238E0000 		.4byte	.LASF339
 9277 07fb 05       		.byte	0x5
 9278 07fc 00       		.uleb128 0
 9279 07fd 41630000 		.4byte	.LASF340
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 231


 9280 0801 05       		.byte	0x5
 9281 0802 00       		.uleb128 0
 9282 0803 56950000 		.4byte	.LASF341
 9283 0807 05       		.byte	0x5
 9284 0808 00       		.uleb128 0
 9285 0809 7F750000 		.4byte	.LASF342
 9286 080d 05       		.byte	0x5
 9287 080e 00       		.uleb128 0
 9288 080f C8400000 		.4byte	.LASF343
 9289 0813 05       		.byte	0x5
 9290 0814 00       		.uleb128 0
 9291 0815 6B110000 		.4byte	.LASF344
 9292 0819 05       		.byte	0x5
 9293 081a 00       		.uleb128 0
 9294 081b B8170000 		.4byte	.LASF345
 9295 081f 05       		.byte	0x5
 9296 0820 00       		.uleb128 0
 9297 0821 15160000 		.4byte	.LASF346
 9298 0825 05       		.byte	0x5
 9299 0826 00       		.uleb128 0
 9300 0827 67360000 		.4byte	.LASF347
 9301 082b 05       		.byte	0x5
 9302 082c 00       		.uleb128 0
 9303 082d 048C0000 		.4byte	.LASF348
 9304 0831 05       		.byte	0x5
 9305 0832 00       		.uleb128 0
 9306 0833 4F360000 		.4byte	.LASF349
 9307 0837 05       		.byte	0x5
 9308 0838 00       		.uleb128 0
 9309 0839 145A0000 		.4byte	.LASF350
 9310 083d 05       		.byte	0x5
 9311 083e 00       		.uleb128 0
 9312 083f 958D0000 		.4byte	.LASF351
 9313 0843 05       		.byte	0x5
 9314 0844 00       		.uleb128 0
 9315 0845 17000000 		.4byte	.LASF352
 9316 0849 05       		.byte	0x5
 9317 084a 00       		.uleb128 0
 9318 084b 56750000 		.4byte	.LASF353
 9319 084f 05       		.byte	0x5
 9320 0850 00       		.uleb128 0
 9321 0851 22860000 		.4byte	.LASF354
 9322 0855 00       		.byte	0
 9323              		.section	.debug_macro,"G",%progbits,wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b,comda
 9324              	.Ldebug_macro2:
 9325 0000 0400     		.2byte	0x4
 9326 0002 00       		.byte	0
 9327 0003 05       		.byte	0x5
 9328 0004 04       		.uleb128 0x4
 9329 0005 684C0000 		.4byte	.LASF359
 9330 0009 05       		.byte	0x5
 9331 000a 06       		.uleb128 0x6
 9332 000b 504C0000 		.4byte	.LASF360
 9333 000f 05       		.byte	0x5
 9334 0010 07       		.uleb128 0x7
 9335 0011 A31B0000 		.4byte	.LASF361
 9336 0015 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 232


 9337 0016 08       		.uleb128 0x8
 9338 0017 9E550000 		.4byte	.LASF362
 9339 001b 05       		.byte	0x5
 9340 001c 09       		.uleb128 0x9
 9341 001d 096A0000 		.4byte	.LASF363
 9342 0021 00       		.byte	0
 9343              		.section	.debug_macro,"G",%progbits,wm4.newlib.h.21.0b9fc973bddc8b940a18de2b6ea6adc7,comdat
 9344              	.Ldebug_macro3:
 9345 0000 0400     		.2byte	0x4
 9346 0002 00       		.byte	0
 9347 0003 05       		.byte	0x5
 9348 0004 15       		.uleb128 0x15
 9349 0005 BC9C0000 		.4byte	.LASF364
 9350 0009 05       		.byte	0x5
 9351 000a 18       		.uleb128 0x18
 9352 000b 5F870000 		.4byte	.LASF365
 9353 000f 05       		.byte	0x5
 9354 0010 28       		.uleb128 0x28
 9355 0011 EE2D0000 		.4byte	.LASF366
 9356 0015 05       		.byte	0x5
 9357 0016 32       		.uleb128 0x32
 9358 0017 167D0000 		.4byte	.LASF367
 9359 001b 05       		.byte	0x5
 9360 001c 36       		.uleb128 0x36
 9361 001d B34C0000 		.4byte	.LASF368
 9362 0021 05       		.byte	0x5
 9363 0022 39       		.uleb128 0x39
 9364 0023 4C1D0000 		.4byte	.LASF369
 9365 0027 05       		.byte	0x5
 9366 0028 3C       		.uleb128 0x3c
 9367 0029 55500000 		.4byte	.LASF370
 9368 002d 05       		.byte	0x5
 9369 002e 3F       		.uleb128 0x3f
 9370 002f B9090000 		.4byte	.LASF371
 9371 0033 05       		.byte	0x5
 9372 0034 42       		.uleb128 0x42
 9373 0035 D5560000 		.4byte	.LASF372
 9374 0039 05       		.byte	0x5
 9375 003a 45       		.uleb128 0x45
 9376 003b 7F630000 		.4byte	.LASF373
 9377 003f 05       		.byte	0x5
 9378 0040 48       		.uleb128 0x48
 9379 0041 1F320000 		.4byte	.LASF374
 9380 0045 05       		.byte	0x5
 9381 0046 4B       		.uleb128 0x4b
 9382 0047 935D0000 		.4byte	.LASF375
 9383 004b 00       		.byte	0
 9384              		.section	.debug_macro,"G",%progbits,wm4.features.h.22.692cd1f2e947ca7b8fea300222f5f1f2,comdat
 9385              	.Ldebug_macro4:
 9386 0000 0400     		.2byte	0x4
 9387 0002 00       		.byte	0
 9388 0003 05       		.byte	0x5
 9389 0004 16       		.uleb128 0x16
 9390 0005 9B250000 		.4byte	.LASF377
 9391 0009 05       		.byte	0x5
 9392 000a 21       		.uleb128 0x21
 9393 000b D7120000 		.4byte	.LASF378
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 233


 9394 000f 05       		.byte	0x5
 9395 0010 28       		.uleb128 0x28
 9396 0011 07890000 		.4byte	.LASF379
 9397 0015 06       		.byte	0x6
 9398 0016 8001     		.uleb128 0x80
 9399 0018 448E0000 		.4byte	.LASF380
 9400 001c 05       		.byte	0x5
 9401 001d 8101     		.uleb128 0x81
 9402 001f DE430000 		.4byte	.LASF381
 9403 0023 06       		.byte	0x6
 9404 0024 8501     		.uleb128 0x85
 9405 0026 7B400000 		.4byte	.LASF382
 9406 002a 05       		.byte	0x5
 9407 002b 8601     		.uleb128 0x86
 9408 002d 3E910000 		.4byte	.LASF383
 9409 0031 06       		.byte	0x6
 9410 0032 8701     		.uleb128 0x87
 9411 0034 859E0000 		.4byte	.LASF384
 9412 0038 05       		.byte	0x5
 9413 0039 8801     		.uleb128 0x88
 9414 003b 21190000 		.4byte	.LASF385
 9415 003f 06       		.byte	0x6
 9416 0040 9B01     		.uleb128 0x9b
 9417 0042 453B0000 		.4byte	.LASF386
 9418 0046 05       		.byte	0x5
 9419 0047 9C01     		.uleb128 0x9c
 9420 0049 DE520000 		.4byte	.LASF387
 9421 004d 05       		.byte	0x5
 9422 004e F201     		.uleb128 0xf2
 9423 0050 EA140000 		.4byte	.LASF388
 9424 0054 05       		.byte	0x5
 9425 0055 F801     		.uleb128 0xf8
 9426 0057 31510000 		.4byte	.LASF389
 9427 005b 05       		.byte	0x5
 9428 005c 8002     		.uleb128 0x100
 9429 005e 786B0000 		.4byte	.LASF390
 9430 0062 05       		.byte	0x5
 9431 0063 8802     		.uleb128 0x108
 9432 0065 F01B0000 		.4byte	.LASF391
 9433 0069 05       		.byte	0x5
 9434 006a 9002     		.uleb128 0x110
 9435 006c 671B0000 		.4byte	.LASF392
 9436 0070 05       		.byte	0x5
 9437 0071 9402     		.uleb128 0x114
 9438 0073 CC660000 		.4byte	.LASF393
 9439 0077 05       		.byte	0x5
 9440 0078 9A02     		.uleb128 0x11a
 9441 007a C6530000 		.4byte	.LASF394
 9442 007e 05       		.byte	0x5
 9443 007f AA02     		.uleb128 0x12a
 9444 0081 63000000 		.4byte	.LASF395
 9445 0085 05       		.byte	0x5
 9446 0086 BA02     		.uleb128 0x13a
 9447 0088 71880000 		.4byte	.LASF396
 9448 008c 00       		.byte	0
 9449              		.section	.debug_macro,"G",%progbits,wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e,comdat
 9450              	.Ldebug_macro5:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 234


 9451 0000 0400     		.2byte	0x4
 9452 0002 00       		.byte	0
 9453 0003 05       		.byte	0x5
 9454 0004 DB01     		.uleb128 0xdb
 9455 0006 D75F0000 		.4byte	.LASF397
 9456 000a 06       		.byte	0x6
 9457 000b E101     		.uleb128 0xe1
 9458 000d AE110000 		.4byte	.LASF398
 9459 0011 05       		.byte	0x5
 9460 0012 E501     		.uleb128 0xe5
 9461 0014 BD600000 		.4byte	.LASF399
 9462 0018 05       		.byte	0x5
 9463 0019 F401     		.uleb128 0xf4
 9464 001b 19490000 		.4byte	.LASF400
 9465 001f 05       		.byte	0x5
 9466 0020 F801     		.uleb128 0xf8
 9467 0022 A75D0000 		.4byte	.LASF401
 9468 0026 05       		.byte	0x5
 9469 0027 FF01     		.uleb128 0xff
 9470 0029 B8220000 		.4byte	.LASF402
 9471 002d 05       		.byte	0x5
 9472 002e 8502     		.uleb128 0x105
 9473 0030 D3010000 		.4byte	.LASF403
 9474 0034 00       		.byte	0
 9475              		.section	.debug_macro,"G",%progbits,wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51,comdat
 9476              	.Ldebug_macro6:
 9477 0000 0400     		.2byte	0x4
 9478 0002 00       		.byte	0
 9479 0003 05       		.byte	0x5
 9480 0004 17       		.uleb128 0x17
 9481 0005 517D0000 		.4byte	.LASF404
 9482 0009 05       		.byte	0x5
 9483 000a 2C       		.uleb128 0x2c
 9484 000b E15E0000 		.4byte	.LASF405
 9485 000f 05       		.byte	0x5
 9486 0010 2D       		.uleb128 0x2d
 9487 0011 50300000 		.4byte	.LASF406
 9488 0015 05       		.byte	0x5
 9489 0016 2E       		.uleb128 0x2e
 9490 0017 65530000 		.4byte	.LASF407
 9491 001b 05       		.byte	0x5
 9492 001c 32       		.uleb128 0x32
 9493 001d E8940000 		.4byte	.LASF408
 9494 0021 05       		.byte	0x5
 9495 0022 33       		.uleb128 0x33
 9496 0023 F29A0000 		.4byte	.LASF409
 9497 0027 05       		.byte	0x5
 9498 0028 34       		.uleb128 0x34
 9499 0029 3F760000 		.4byte	.LASF410
 9500 002d 05       		.byte	0x5
 9501 002e 35       		.uleb128 0x35
 9502 002f 0A140000 		.4byte	.LASF411
 9503 0033 05       		.byte	0x5
 9504 0034 36       		.uleb128 0x36
 9505 0035 95240000 		.4byte	.LASF412
 9506 0039 05       		.byte	0x5
 9507 003a 37       		.uleb128 0x37
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 235


 9508 003b 4C2F0000 		.4byte	.LASF413
 9509 003f 05       		.byte	0x5
 9510 0040 38       		.uleb128 0x38
 9511 0041 334D0000 		.4byte	.LASF414
 9512 0045 05       		.byte	0x5
 9513 0046 39       		.uleb128 0x39
 9514 0047 9D8B0000 		.4byte	.LASF415
 9515 004b 05       		.byte	0x5
 9516 004c 40       		.uleb128 0x40
 9517 004d F1570000 		.4byte	.LASF416
 9518 0051 05       		.byte	0x5
 9519 0052 41       		.uleb128 0x41
 9520 0053 D1060000 		.4byte	.LASF417
 9521 0057 05       		.byte	0x5
 9522 0058 42       		.uleb128 0x42
 9523 0059 A15E0000 		.4byte	.LASF418
 9524 005d 05       		.byte	0x5
 9525 005e 43       		.uleb128 0x43
 9526 005f D0240000 		.4byte	.LASF419
 9527 0063 05       		.byte	0x5
 9528 0064 45       		.uleb128 0x45
 9529 0065 201F0000 		.4byte	.LASF420
 9530 0069 05       		.byte	0x5
 9531 006a 46       		.uleb128 0x46
 9532 006b A90D0000 		.4byte	.LASF421
 9533 006f 05       		.byte	0x5
 9534 0070 47       		.uleb128 0x47
 9535 0071 0D750000 		.4byte	.LASF422
 9536 0075 05       		.byte	0x5
 9537 0076 49       		.uleb128 0x49
 9538 0077 88020000 		.4byte	.LASF423
 9539 007b 05       		.byte	0x5
 9540 007c 4C       		.uleb128 0x4c
 9541 007d DB190000 		.4byte	.LASF424
 9542 0081 05       		.byte	0x5
 9543 0082 65       		.uleb128 0x65
 9544 0083 24830000 		.4byte	.LASF425
 9545 0087 05       		.byte	0x5
 9546 0088 7B       		.uleb128 0x7b
 9547 0089 729D0000 		.4byte	.LASF426
 9548 008d 05       		.byte	0x5
 9549 008e 8301     		.uleb128 0x83
 9550 0090 84160000 		.4byte	.LASF427
 9551 0094 05       		.byte	0x5
 9552 0095 8401     		.uleb128 0x84
 9553 0097 1E120000 		.4byte	.LASF428
 9554 009b 00       		.byte	0
 9555              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2,comdat
 9556              	.Ldebug_macro7:
 9557 0000 0400     		.2byte	0x4
 9558 0002 00       		.byte	0
 9559 0003 05       		.byte	0x5
 9560 0004 0D       		.uleb128 0xd
 9561 0005 EC290000 		.4byte	.LASF429
 9562 0009 05       		.byte	0x5
 9563 000a 0E       		.uleb128 0xe
 9564 000b 04280000 		.4byte	.LASF430
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 236


 9565 000f 05       		.byte	0x5
 9566 0010 0F       		.uleb128 0xf
 9567 0011 D1430000 		.4byte	.LASF431
 9568 0015 00       		.byte	0
 9569              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1,comdat
 9570              	.Ldebug_macro8:
 9571 0000 0400     		.2byte	0x4
 9572 0002 00       		.byte	0
 9573 0003 05       		.byte	0x5
 9574 0004 BB01     		.uleb128 0xbb
 9575 0006 BD160000 		.4byte	.LASF432
 9576 000a 05       		.byte	0x5
 9577 000b BC01     		.uleb128 0xbc
 9578 000d C20A0000 		.4byte	.LASF433
 9579 0011 05       		.byte	0x5
 9580 0012 BD01     		.uleb128 0xbd
 9581 0014 AB2C0000 		.4byte	.LASF434
 9582 0018 05       		.byte	0x5
 9583 0019 BE01     		.uleb128 0xbe
 9584 001b 80140000 		.4byte	.LASF435
 9585 001f 05       		.byte	0x5
 9586 0020 BF01     		.uleb128 0xbf
 9587 0022 28410000 		.4byte	.LASF436
 9588 0026 05       		.byte	0x5
 9589 0027 C001     		.uleb128 0xc0
 9590 0029 830E0000 		.4byte	.LASF437
 9591 002d 05       		.byte	0x5
 9592 002e C101     		.uleb128 0xc1
 9593 0030 4B500000 		.4byte	.LASF438
 9594 0034 05       		.byte	0x5
 9595 0035 C201     		.uleb128 0xc2
 9596 0037 294D0000 		.4byte	.LASF439
 9597 003b 05       		.byte	0x5
 9598 003c C301     		.uleb128 0xc3
 9599 003e D0720000 		.4byte	.LASF440
 9600 0042 05       		.byte	0x5
 9601 0043 C401     		.uleb128 0xc4
 9602 0045 7E550000 		.4byte	.LASF441
 9603 0049 05       		.byte	0x5
 9604 004a C501     		.uleb128 0xc5
 9605 004c 24110000 		.4byte	.LASF442
 9606 0050 05       		.byte	0x5
 9607 0051 C601     		.uleb128 0xc6
 9608 0053 63200000 		.4byte	.LASF443
 9609 0057 05       		.byte	0x5
 9610 0058 C701     		.uleb128 0xc7
 9611 005a 84180000 		.4byte	.LASF444
 9612 005e 05       		.byte	0x5
 9613 005f C801     		.uleb128 0xc8
 9614 0061 AC600000 		.4byte	.LASF445
 9615 0065 05       		.byte	0x5
 9616 0066 C901     		.uleb128 0xc9
 9617 0068 548E0000 		.4byte	.LASF446
 9618 006c 05       		.byte	0x5
 9619 006d CA01     		.uleb128 0xca
 9620 006f 98780000 		.4byte	.LASF447
 9621 0073 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 237


 9622 0074 D201     		.uleb128 0xd2
 9623 0076 C90D0000 		.4byte	.LASF448
 9624 007a 06       		.byte	0x6
 9625 007b EE01     		.uleb128 0xee
 9626 007d CB4C0000 		.4byte	.LASF449
 9627 0081 05       		.byte	0x5
 9628 0082 8B02     		.uleb128 0x10b
 9629 0084 08950000 		.4byte	.LASF450
 9630 0088 05       		.byte	0x5
 9631 0089 8C02     		.uleb128 0x10c
 9632 008b 3F880000 		.4byte	.LASF451
 9633 008f 05       		.byte	0x5
 9634 0090 8D02     		.uleb128 0x10d
 9635 0092 F2600000 		.4byte	.LASF452
 9636 0096 05       		.byte	0x5
 9637 0097 8E02     		.uleb128 0x10e
 9638 0099 D38E0000 		.4byte	.LASF453
 9639 009d 05       		.byte	0x5
 9640 009e 8F02     		.uleb128 0x10f
 9641 00a0 74730000 		.4byte	.LASF454
 9642 00a4 05       		.byte	0x5
 9643 00a5 9002     		.uleb128 0x110
 9644 00a7 01500000 		.4byte	.LASF455
 9645 00ab 05       		.byte	0x5
 9646 00ac 9102     		.uleb128 0x111
 9647 00ae 1C730000 		.4byte	.LASF456
 9648 00b2 05       		.byte	0x5
 9649 00b3 9202     		.uleb128 0x112
 9650 00b5 22370000 		.4byte	.LASF457
 9651 00b9 05       		.byte	0x5
 9652 00ba 9302     		.uleb128 0x113
 9653 00bc 869C0000 		.4byte	.LASF458
 9654 00c0 05       		.byte	0x5
 9655 00c1 9402     		.uleb128 0x114
 9656 00c3 52700000 		.4byte	.LASF459
 9657 00c7 05       		.byte	0x5
 9658 00c8 9502     		.uleb128 0x115
 9659 00ca B9620000 		.4byte	.LASF460
 9660 00ce 05       		.byte	0x5
 9661 00cf 9602     		.uleb128 0x116
 9662 00d1 D78C0000 		.4byte	.LASF461
 9663 00d5 05       		.byte	0x5
 9664 00d6 9702     		.uleb128 0x117
 9665 00d8 D6740000 		.4byte	.LASF462
 9666 00dc 05       		.byte	0x5
 9667 00dd 9802     		.uleb128 0x118
 9668 00df 975A0000 		.4byte	.LASF463
 9669 00e3 05       		.byte	0x5
 9670 00e4 9902     		.uleb128 0x119
 9671 00e6 EC560000 		.4byte	.LASF464
 9672 00ea 06       		.byte	0x6
 9673 00eb A602     		.uleb128 0x126
 9674 00ed 948F0000 		.4byte	.LASF465
 9675 00f1 06       		.byte	0x6
 9676 00f2 DB02     		.uleb128 0x15b
 9677 00f4 6F0C0000 		.4byte	.LASF466
 9678 00f8 06       		.byte	0x6
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 238


 9679 00f9 9103     		.uleb128 0x191
 9680 00fb F6100000 		.4byte	.LASF467
 9681 00ff 05       		.byte	0x5
 9682 0100 9603     		.uleb128 0x196
 9683 0102 C9390000 		.4byte	.LASF468
 9684 0106 06       		.byte	0x6
 9685 0107 9C03     		.uleb128 0x19c
 9686 0109 693A0000 		.4byte	.LASF469
 9687 010d 00       		.byte	0
 9688              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef,comdat
 9689              	.Ldebug_macro9:
 9690 0000 0400     		.2byte	0x4
 9691 0002 00       		.byte	0
 9692 0003 05       		.byte	0x5
 9693 0004 27       		.uleb128 0x27
 9694 0005 EA490000 		.4byte	.LASF471
 9695 0009 05       		.byte	0x5
 9696 000a 28       		.uleb128 0x28
 9697 000b 4F650000 		.4byte	.LASF472
 9698 000f 05       		.byte	0x5
 9699 0010 2A       		.uleb128 0x2a
 9700 0011 763D0000 		.4byte	.LASF473
 9701 0015 05       		.byte	0x5
 9702 0016 8901     		.uleb128 0x89
 9703 0018 4A4E0000 		.4byte	.LASF474
 9704 001c 05       		.byte	0x5
 9705 001d 8A01     		.uleb128 0x8a
 9706 001f 48480000 		.4byte	.LASF475
 9707 0023 05       		.byte	0x5
 9708 0024 8B01     		.uleb128 0x8b
 9709 0026 3B580000 		.4byte	.LASF476
 9710 002a 05       		.byte	0x5
 9711 002b 8C01     		.uleb128 0x8c
 9712 002d 916B0000 		.4byte	.LASF477
 9713 0031 05       		.byte	0x5
 9714 0032 8D01     		.uleb128 0x8d
 9715 0034 8D860000 		.4byte	.LASF478
 9716 0038 05       		.byte	0x5
 9717 0039 8E01     		.uleb128 0x8e
 9718 003b 3E0D0000 		.4byte	.LASF479
 9719 003f 05       		.byte	0x5
 9720 0040 8F01     		.uleb128 0x8f
 9721 0042 BB730000 		.4byte	.LASF480
 9722 0046 05       		.byte	0x5
 9723 0047 9001     		.uleb128 0x90
 9724 0049 E6610000 		.4byte	.LASF481
 9725 004d 05       		.byte	0x5
 9726 004e 9101     		.uleb128 0x91
 9727 0050 E5590000 		.4byte	.LASF482
 9728 0054 06       		.byte	0x6
 9729 0055 A101     		.uleb128 0xa1
 9730 0057 65860000 		.4byte	.LASF483
 9731 005b 06       		.byte	0x6
 9732 005c EE01     		.uleb128 0xee
 9733 005e CB4C0000 		.4byte	.LASF449
 9734 0062 06       		.byte	0x6
 9735 0063 DB02     		.uleb128 0x15b
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 239


 9736 0065 6F0C0000 		.4byte	.LASF466
 9737 0069 06       		.byte	0x6
 9738 006a 9103     		.uleb128 0x191
 9739 006c F6100000 		.4byte	.LASF467
 9740 0070 05       		.byte	0x5
 9741 0071 9603     		.uleb128 0x196
 9742 0073 C9390000 		.4byte	.LASF468
 9743 0077 06       		.byte	0x6
 9744 0078 9C03     		.uleb128 0x19c
 9745 007a 693A0000 		.4byte	.LASF469
 9746 007e 05       		.byte	0x5
 9747 007f A103     		.uleb128 0x1a1
 9748 0081 6F440000 		.4byte	.LASF484
 9749 0085 00       		.byte	0
 9750              		.section	.debug_macro,"G",%progbits,wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382,comdat
 9751              	.Ldebug_macro10:
 9752 0000 0400     		.2byte	0x4
 9753 0002 00       		.byte	0
 9754 0003 05       		.byte	0x5
 9755 0004 06       		.uleb128 0x6
 9756 0005 9C610000 		.4byte	.LASF487
 9757 0009 05       		.byte	0x5
 9758 000a 0F       		.uleb128 0xf
 9759 000b 0B530000 		.4byte	.LASF488
 9760 000f 05       		.byte	0x5
 9761 0010 21       		.uleb128 0x21
 9762 0011 943F0000 		.4byte	.LASF489
 9763 0015 05       		.byte	0x5
 9764 0016 2F       		.uleb128 0x2f
 9765 0017 1C2C0000 		.4byte	.LASF490
 9766 001b 05       		.byte	0x5
 9767 001c 45       		.uleb128 0x45
 9768 001d 79200000 		.4byte	.LASF491
 9769 0021 05       		.byte	0x5
 9770 0022 5F       		.uleb128 0x5f
 9771 0023 26670000 		.4byte	.LASF492
 9772 0027 05       		.byte	0x5
 9773 0028 7E       		.uleb128 0x7e
 9774 0029 FA590000 		.4byte	.LASF493
 9775 002d 05       		.byte	0x5
 9776 002e 9801     		.uleb128 0x98
 9777 0030 FA150000 		.4byte	.LASF494
 9778 0034 05       		.byte	0x5
 9779 0035 AE01     		.uleb128 0xae
 9780 0037 7D780000 		.4byte	.LASF495
 9781 003b 05       		.byte	0x5
 9782 003c C001     		.uleb128 0xc0
 9783 003e 1C520000 		.4byte	.LASF496
 9784 0042 06       		.byte	0x6
 9785 0043 D601     		.uleb128 0xd6
 9786 0045 20670000 		.4byte	.LASF497
 9787 0049 00       		.byte	0
 9788              		.section	.debug_macro,"G",%progbits,wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea,comdat
 9789              	.Ldebug_macro11:
 9790 0000 0400     		.2byte	0x4
 9791 0002 00       		.byte	0
 9792 0003 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 240


 9793 0004 02       		.uleb128 0x2
 9794 0005 369D0000 		.4byte	.LASF498
 9795 0009 05       		.byte	0x5
 9796 000a 0B       		.uleb128 0xb
 9797 000b 7F620000 		.4byte	.LASF499
 9798 000f 05       		.byte	0x5
 9799 0010 0C       		.uleb128 0xc
 9800 0011 F7460000 		.4byte	.LASF500
 9801 0015 05       		.byte	0x5
 9802 0016 0D       		.uleb128 0xd
 9803 0017 DE5D0000 		.4byte	.LASF501
 9804 001b 05       		.byte	0x5
 9805 001c 0E       		.uleb128 0xe
 9806 001d D0950000 		.4byte	.LASF502
 9807 0021 05       		.byte	0x5
 9808 0022 0F       		.uleb128 0xf
 9809 0023 0F9A0000 		.4byte	.LASF503
 9810 0027 05       		.byte	0x5
 9811 0028 10       		.uleb128 0x10
 9812 0029 DD0C0000 		.4byte	.LASF504
 9813 002d 05       		.byte	0x5
 9814 002e 11       		.uleb128 0x11
 9815 002f 7D4A0000 		.4byte	.LASF505
 9816 0033 05       		.byte	0x5
 9817 0034 12       		.uleb128 0x12
 9818 0035 D2370000 		.4byte	.LASF506
 9819 0039 05       		.byte	0x5
 9820 003a 13       		.uleb128 0x13
 9821 003b 8D2A0000 		.4byte	.LASF507
 9822 003f 05       		.byte	0x5
 9823 0040 14       		.uleb128 0x14
 9824 0041 30660000 		.4byte	.LASF508
 9825 0045 05       		.byte	0x5
 9826 0046 15       		.uleb128 0x15
 9827 0047 7A4F0000 		.4byte	.LASF509
 9828 004b 05       		.byte	0x5
 9829 004c 16       		.uleb128 0x16
 9830 004d D9840000 		.4byte	.LASF510
 9831 0051 00       		.byte	0
 9832              		.section	.debug_macro,"G",%progbits,wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068,comdat
 9833              	.Ldebug_macro12:
 9834 0000 0400     		.2byte	0x4
 9835 0002 00       		.byte	0
 9836 0003 06       		.byte	0x6
 9837 0004 7D       		.uleb128 0x7d
 9838 0005 3E6A0000 		.4byte	.LASF511
 9839 0009 05       		.byte	0x5
 9840 000a 9001     		.uleb128 0x90
 9841 000c 273D0000 		.4byte	.LASF512
 9842 0010 06       		.byte	0x6
 9843 0011 9201     		.uleb128 0x92
 9844 0013 B97E0000 		.4byte	.LASF513
 9845 0017 05       		.byte	0x5
 9846 0018 9E01     		.uleb128 0x9e
 9847 001a E0910000 		.4byte	.LASF514
 9848 001e 00       		.byte	0
 9849              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34,comdat
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 241


 9850              	.Ldebug_macro13:
 9851 0000 0400     		.2byte	0x4
 9852 0002 00       		.byte	0
 9853 0003 06       		.byte	0x6
 9854 0004 A101     		.uleb128 0xa1
 9855 0006 65860000 		.4byte	.LASF483
 9856 000a 06       		.byte	0x6
 9857 000b EE01     		.uleb128 0xee
 9858 000d CB4C0000 		.4byte	.LASF449
 9859 0011 06       		.byte	0x6
 9860 0012 DB02     		.uleb128 0x15b
 9861 0014 6F0C0000 		.4byte	.LASF466
 9862 0018 05       		.byte	0x5
 9863 0019 E002     		.uleb128 0x160
 9864 001b 9D290000 		.4byte	.LASF515
 9865 001f 06       		.byte	0x6
 9866 0020 E702     		.uleb128 0x167
 9867 0022 24230000 		.4byte	.LASF516
 9868 0026 06       		.byte	0x6
 9869 0027 9103     		.uleb128 0x191
 9870 0029 F6100000 		.4byte	.LASF467
 9871 002d 05       		.byte	0x5
 9872 002e 9603     		.uleb128 0x196
 9873 0030 C9390000 		.4byte	.LASF468
 9874 0034 06       		.byte	0x6
 9875 0035 9C03     		.uleb128 0x19c
 9876 0037 693A0000 		.4byte	.LASF469
 9877 003b 05       		.byte	0x5
 9878 003c A103     		.uleb128 0x1a1
 9879 003e 6F440000 		.4byte	.LASF484
 9880 0042 00       		.byte	0
 9881              		.section	.debug_macro,"G",%progbits,wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098,comdat
 9882              	.Ldebug_macro14:
 9883 0000 0400     		.2byte	0x4
 9884 0002 00       		.byte	0
 9885 0003 05       		.byte	0x5
 9886 0004 B701     		.uleb128 0xb7
 9887 0006 9A1A0000 		.4byte	.LASF517
 9888 000a 05       		.byte	0x5
 9889 000b BA01     		.uleb128 0xba
 9890 000d D9580000 		.4byte	.LASF518
 9891 0011 05       		.byte	0x5
 9892 0012 BD01     		.uleb128 0xbd
 9893 0014 88740000 		.4byte	.LASF519
 9894 0018 05       		.byte	0x5
 9895 0019 C001     		.uleb128 0xc0
 9896 001b 6D420000 		.4byte	.LASF520
 9897 001f 00       		.byte	0
 9898              		.section	.debug_macro,"G",%progbits,wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f,comdat
 9899              	.Ldebug_macro15:
 9900 0000 0400     		.2byte	0x4
 9901 0002 00       		.byte	0
 9902 0003 05       		.byte	0x5
 9903 0004 11       		.uleb128 0x11
 9904 0005 E4860000 		.4byte	.LASF521
 9905 0009 05       		.byte	0x5
 9906 000a 15       		.uleb128 0x15
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 242


 9907 000b 71780000 		.4byte	.LASF522
 9908 000f 05       		.byte	0x5
 9909 0010 48       		.uleb128 0x48
 9910 0011 B15D0000 		.4byte	.LASF523
 9911 0015 05       		.byte	0x5
 9912 0016 64       		.uleb128 0x64
 9913 0017 849B0000 		.4byte	.LASF524
 9914 001b 05       		.byte	0x5
 9915 001c 6A       		.uleb128 0x6a
 9916 001d DE810000 		.4byte	.LASF525
 9917 0021 05       		.byte	0x5
 9918 0022 B201     		.uleb128 0xb2
 9919 0024 374A0000 		.4byte	.LASF526
 9920 0028 05       		.byte	0x5
 9921 0029 B802     		.uleb128 0x138
 9922 002b D0770000 		.4byte	.LASF527
 9923 002f 05       		.byte	0x5
 9924 0030 B902     		.uleb128 0x139
 9925 0032 80460000 		.4byte	.LASF528
 9926 0036 05       		.byte	0x5
 9927 0037 BA02     		.uleb128 0x13a
 9928 0039 681E0000 		.4byte	.LASF529
 9929 003d 05       		.byte	0x5
 9930 003e BB02     		.uleb128 0x13b
 9931 0040 62850000 		.4byte	.LASF530
 9932 0044 05       		.byte	0x5
 9933 0045 BC02     		.uleb128 0x13c
 9934 0047 42770000 		.4byte	.LASF531
 9935 004b 05       		.byte	0x5
 9936 004c BD02     		.uleb128 0x13d
 9937 004e D9570000 		.4byte	.LASF532
 9938 0052 05       		.byte	0x5
 9939 0053 BE02     		.uleb128 0x13e
 9940 0055 D7980000 		.4byte	.LASF533
 9941 0059 05       		.byte	0x5
 9942 005a CA02     		.uleb128 0x14a
 9943 005c E60F0000 		.4byte	.LASF534
 9944 0060 05       		.byte	0x5
 9945 0061 CB02     		.uleb128 0x14b
 9946 0063 E09D0000 		.4byte	.LASF535
 9947 0067 05       		.byte	0x5
 9948 0068 CC02     		.uleb128 0x14c
 9949 006a 54030000 		.4byte	.LASF536
 9950 006e 05       		.byte	0x5
 9951 006f F404     		.uleb128 0x274
 9952 0071 CE130000 		.4byte	.LASF537
 9953 0075 05       		.byte	0x5
 9954 0076 8A05     		.uleb128 0x28a
 9955 0078 A55A0000 		.4byte	.LASF538
 9956 007c 05       		.byte	0x5
 9957 007d BA05     		.uleb128 0x2ba
 9958 007f C87F0000 		.4byte	.LASF539
 9959 0083 05       		.byte	0x5
 9960 0084 C805     		.uleb128 0x2c8
 9961 0086 5A8F0000 		.4byte	.LASF540
 9962 008a 05       		.byte	0x5
 9963 008b C905     		.uleb128 0x2c9
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 243


 9964 008d FB100000 		.4byte	.LASF541
 9965 0091 05       		.byte	0x5
 9966 0092 CA05     		.uleb128 0x2ca
 9967 0094 A2740000 		.4byte	.LASF542
 9968 0098 05       		.byte	0x5
 9969 0099 CB05     		.uleb128 0x2cb
 9970 009b C24E0000 		.4byte	.LASF543
 9971 009f 05       		.byte	0x5
 9972 00a0 CC05     		.uleb128 0x2cc
 9973 00a2 2B7B0000 		.4byte	.LASF544
 9974 00a6 05       		.byte	0x5
 9975 00a7 CD05     		.uleb128 0x2cd
 9976 00a9 CE670000 		.4byte	.LASF545
 9977 00ad 05       		.byte	0x5
 9978 00ae CE05     		.uleb128 0x2ce
 9979 00b0 CC490000 		.4byte	.LASF546
 9980 00b4 05       		.byte	0x5
 9981 00b5 D005     		.uleb128 0x2d0
 9982 00b7 42330000 		.4byte	.LASF547
 9983 00bb 05       		.byte	0x5
 9984 00bc D105     		.uleb128 0x2d1
 9985 00be 8B3E0000 		.4byte	.LASF548
 9986 00c2 05       		.byte	0x5
 9987 00c3 D205     		.uleb128 0x2d2
 9988 00c5 8F140000 		.4byte	.LASF549
 9989 00c9 05       		.byte	0x5
 9990 00ca D305     		.uleb128 0x2d3
 9991 00cc 5D4D0000 		.4byte	.LASF550
 9992 00d0 05       		.byte	0x5
 9993 00d1 D405     		.uleb128 0x2d4
 9994 00d3 C5340000 		.4byte	.LASF551
 9995 00d7 05       		.byte	0x5
 9996 00d8 D505     		.uleb128 0x2d5
 9997 00da F3090000 		.4byte	.LASF552
 9998 00de 05       		.byte	0x5
 9999 00df D605     		.uleb128 0x2d6
 10000 00e1 D11E0000 		.4byte	.LASF553
 10001 00e5 05       		.byte	0x5
 10002 00e6 D705     		.uleb128 0x2d7
 10003 00e8 00700000 		.4byte	.LASF554
 10004 00ec 05       		.byte	0x5
 10005 00ed D805     		.uleb128 0x2d8
 10006 00ef 010C0000 		.4byte	.LASF555
 10007 00f3 05       		.byte	0x5
 10008 00f4 D905     		.uleb128 0x2d9
 10009 00f6 C56E0000 		.4byte	.LASF556
 10010 00fa 05       		.byte	0x5
 10011 00fb DA05     		.uleb128 0x2da
 10012 00fd 307F0000 		.4byte	.LASF557
 10013 0101 05       		.byte	0x5
 10014 0102 DB05     		.uleb128 0x2db
 10015 0104 BC2B0000 		.4byte	.LASF558
 10016 0108 05       		.byte	0x5
 10017 0109 DC05     		.uleb128 0x2dc
 10018 010b 570A0000 		.4byte	.LASF559
 10019 010f 05       		.byte	0x5
 10020 0110 DD05     		.uleb128 0x2dd
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 244


 10021 0112 DA3B0000 		.4byte	.LASF560
 10022 0116 05       		.byte	0x5
 10023 0117 DE05     		.uleb128 0x2de
 10024 0119 543B0000 		.4byte	.LASF561
 10025 011d 05       		.byte	0x5
 10026 011e DF05     		.uleb128 0x2df
 10027 0120 206C0000 		.4byte	.LASF562
 10028 0124 05       		.byte	0x5
 10029 0125 E005     		.uleb128 0x2e0
 10030 0127 446E0000 		.4byte	.LASF563
 10031 012b 05       		.byte	0x5
 10032 012c E105     		.uleb128 0x2e1
 10033 012e 5F290000 		.4byte	.LASF564
 10034 0132 05       		.byte	0x5
 10035 0133 E205     		.uleb128 0x2e2
 10036 0135 BE510000 		.4byte	.LASF565
 10037 0139 05       		.byte	0x5
 10038 013a E305     		.uleb128 0x2e3
 10039 013c 7F710000 		.4byte	.LASF566
 10040 0140 05       		.byte	0x5
 10041 0141 E405     		.uleb128 0x2e4
 10042 0143 AF1F0000 		.4byte	.LASF567
 10043 0147 05       		.byte	0x5
 10044 0148 E505     		.uleb128 0x2e5
 10045 014a AA520000 		.4byte	.LASF568
 10046 014e 05       		.byte	0x5
 10047 014f E605     		.uleb128 0x2e6
 10048 0151 B2970000 		.4byte	.LASF569
 10049 0155 05       		.byte	0x5
 10050 0156 E705     		.uleb128 0x2e7
 10051 0158 459B0000 		.4byte	.LASF570
 10052 015c 05       		.byte	0x5
 10053 015d EB05     		.uleb128 0x2eb
 10054 015f 46640000 		.4byte	.LASF571
 10055 0163 05       		.byte	0x5
 10056 0164 F305     		.uleb128 0x2f3
 10057 0166 86030000 		.4byte	.LASF572
 10058 016a 05       		.byte	0x5
 10059 016b FB05     		.uleb128 0x2fb
 10060 016d BF840000 		.4byte	.LASF573
 10061 0171 05       		.byte	0x5
 10062 0172 8B06     		.uleb128 0x30b
 10063 0174 312C0000 		.4byte	.LASF574
 10064 0178 05       		.byte	0x5
 10065 0179 8E06     		.uleb128 0x30e
 10066 017b C3860000 		.4byte	.LASF575
 10067 017f 05       		.byte	0x5
 10068 0180 9406     		.uleb128 0x314
 10069 0182 0A010000 		.4byte	.LASF576
 10070 0186 00       		.byte	0
 10071              		.section	.debug_macro,"G",%progbits,wm4.cdefs.h.47.d0af77d4010113800282e6476aca9724,comdat
 10072              	.Ldebug_macro16:
 10073 0000 0400     		.2byte	0x4
 10074 0002 00       		.byte	0
 10075 0003 05       		.byte	0x5
 10076 0004 2F       		.uleb128 0x2f
 10077 0005 1D380000 		.4byte	.LASF578
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 245


 10078 0009 05       		.byte	0x5
 10079 000a 30       		.uleb128 0x30
 10080 000b 5E6A0000 		.4byte	.LASF579
 10081 000f 05       		.byte	0x5
 10082 0010 31       		.uleb128 0x31
 10083 0011 50520000 		.4byte	.LASF580
 10084 0015 05       		.byte	0x5
 10085 0016 34       		.uleb128 0x34
 10086 0017 360C0000 		.4byte	.LASF581
 10087 001b 05       		.byte	0x5
 10088 001c 37       		.uleb128 0x37
 10089 001d 3D1D0000 		.4byte	.LASF582
 10090 0021 05       		.byte	0x5
 10091 0022 38       		.uleb128 0x38
 10092 0023 88930000 		.4byte	.LASF583
 10093 0027 05       		.byte	0x5
 10094 0028 3A       		.uleb128 0x3a
 10095 0029 45410000 		.4byte	.LASF584
 10096 002d 05       		.byte	0x5
 10097 002e 3B       		.uleb128 0x3b
 10098 002f 0B320000 		.4byte	.LASF585
 10099 0033 05       		.byte	0x5
 10100 0034 3C       		.uleb128 0x3c
 10101 0035 40200000 		.4byte	.LASF586
 10102 0039 05       		.byte	0x5
 10103 003a 3D       		.uleb128 0x3d
 10104 003b D4850000 		.4byte	.LASF587
 10105 003f 05       		.byte	0x5
 10106 0040 40       		.uleb128 0x40
 10107 0041 D30D0000 		.4byte	.LASF588
 10108 0045 05       		.byte	0x5
 10109 0046 41       		.uleb128 0x41
 10110 0047 EB080000 		.4byte	.LASF589
 10111 004b 05       		.byte	0x5
 10112 004c 42       		.uleb128 0x42
 10113 004d 3F500000 		.4byte	.LASF590
 10114 0051 05       		.byte	0x5
 10115 0052 4C       		.uleb128 0x4c
 10116 0053 D8100000 		.4byte	.LASF591
 10117 0057 05       		.byte	0x5
 10118 0058 4F       		.uleb128 0x4f
 10119 0059 783E0000 		.4byte	.LASF592
 10120 005d 05       		.byte	0x5
 10121 005e 55       		.uleb128 0x55
 10122 005f D27E0000 		.4byte	.LASF593
 10123 0063 05       		.byte	0x5
 10124 0064 5C       		.uleb128 0x5c
 10125 0065 A8670000 		.4byte	.LASF594
 10126 0069 05       		.byte	0x5
 10127 006a 5D       		.uleb128 0x5d
 10128 006b 887D0000 		.4byte	.LASF595
 10129 006f 05       		.byte	0x5
 10130 0070 69       		.uleb128 0x69
 10131 0071 AE8B0000 		.4byte	.LASF596
 10132 0075 05       		.byte	0x5
 10133 0076 6A       		.uleb128 0x6a
 10134 0077 CE470000 		.4byte	.LASF597
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 246


 10135 007b 05       		.byte	0x5
 10136 007c 6E       		.uleb128 0x6e
 10137 007d 2E040000 		.4byte	.LASF598
 10138 0081 05       		.byte	0x5
 10139 0082 6F       		.uleb128 0x6f
 10140 0083 D07C0000 		.4byte	.LASF599
 10141 0087 05       		.byte	0x5
 10142 0088 70       		.uleb128 0x70
 10143 0089 00000000 		.4byte	.LASF600
 10144 008d 05       		.byte	0x5
 10145 008e 73       		.uleb128 0x73
 10146 008f E62B0000 		.4byte	.LASF601
 10147 0093 05       		.byte	0x5
 10148 0094 76       		.uleb128 0x76
 10149 0095 8A120000 		.4byte	.LASF602
 10150 0099 05       		.byte	0x5
 10151 009a 7D       		.uleb128 0x7d
 10152 009b 08330000 		.4byte	.LASF603
 10153 009f 05       		.byte	0x5
 10154 00a0 7E       		.uleb128 0x7e
 10155 00a1 90600000 		.4byte	.LASF604
 10156 00a5 05       		.byte	0x5
 10157 00a6 7F       		.uleb128 0x7f
 10158 00a7 E98C0000 		.4byte	.LASF605
 10159 00ab 05       		.byte	0x5
 10160 00ac 8301     		.uleb128 0x83
 10161 00ae F1670000 		.4byte	.LASF606
 10162 00b2 05       		.byte	0x5
 10163 00b3 8A01     		.uleb128 0x8a
 10164 00b5 D65C0000 		.4byte	.LASF607
 10165 00b9 05       		.byte	0x5
 10166 00ba 8E01     		.uleb128 0x8e
 10167 00bc F6610000 		.4byte	.LASF608
 10168 00c0 05       		.byte	0x5
 10169 00c1 8F01     		.uleb128 0x8f
 10170 00c3 F1200000 		.4byte	.LASF609
 10171 00c7 05       		.byte	0x5
 10172 00c8 9201     		.uleb128 0x92
 10173 00ca 2F540000 		.4byte	.LASF610
 10174 00ce 05       		.byte	0x5
 10175 00cf 9501     		.uleb128 0x95
 10176 00d1 476A0000 		.4byte	.LASF611
 10177 00d5 05       		.byte	0x5
 10178 00d6 9601     		.uleb128 0x96
 10179 00d8 D52D0000 		.4byte	.LASF612
 10180 00dc 05       		.byte	0x5
 10181 00dd 9701     		.uleb128 0x97
 10182 00df 06820000 		.4byte	.LASF613
 10183 00e3 05       		.byte	0x5
 10184 00e4 9901     		.uleb128 0x99
 10185 00e6 69470000 		.4byte	.LASF614
 10186 00ea 05       		.byte	0x5
 10187 00eb 9A01     		.uleb128 0x9a
 10188 00ed 6C8E0000 		.4byte	.LASF615
 10189 00f1 05       		.byte	0x5
 10190 00f2 9C01     		.uleb128 0x9c
 10191 00f4 75900000 		.4byte	.LASF616
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 247


 10192 00f8 05       		.byte	0x5
 10193 00f9 9E01     		.uleb128 0x9e
 10194 00fb 39190000 		.4byte	.LASF617
 10195 00ff 05       		.byte	0x5
 10196 0100 AF01     		.uleb128 0xaf
 10197 0102 A2190000 		.4byte	.LASF618
 10198 0106 05       		.byte	0x5
 10199 0107 B001     		.uleb128 0xb0
 10200 0109 6D0E0000 		.4byte	.LASF619
 10201 010d 05       		.byte	0x5
 10202 010e B101     		.uleb128 0xb1
 10203 0110 319A0000 		.4byte	.LASF620
 10204 0114 05       		.byte	0x5
 10205 0115 B201     		.uleb128 0xb2
 10206 0117 E3600000 		.4byte	.LASF621
 10207 011b 05       		.byte	0x5
 10208 011c B301     		.uleb128 0xb3
 10209 011e F2310000 		.4byte	.LASF622
 10210 0122 05       		.byte	0x5
 10211 0123 B501     		.uleb128 0xb5
 10212 0125 D44A0000 		.4byte	.LASF623
 10213 0129 05       		.byte	0x5
 10214 012a B601     		.uleb128 0xb6
 10215 012c 806E0000 		.4byte	.LASF624
 10216 0130 05       		.byte	0x5
 10217 0131 B701     		.uleb128 0xb7
 10218 0133 67980000 		.4byte	.LASF625
 10219 0137 05       		.byte	0x5
 10220 0138 EF01     		.uleb128 0xef
 10221 013a 442B0000 		.4byte	.LASF626
 10222 013e 05       		.byte	0x5
 10223 013f FC01     		.uleb128 0xfc
 10224 0141 62660000 		.4byte	.LASF627
 10225 0145 05       		.byte	0x5
 10226 0146 FD01     		.uleb128 0xfd
 10227 0148 CB450000 		.4byte	.LASF628
 10228 014c 05       		.byte	0x5
 10229 014d FE01     		.uleb128 0xfe
 10230 014f 6C510000 		.4byte	.LASF629
 10231 0153 05       		.byte	0x5
 10232 0154 FF01     		.uleb128 0xff
 10233 0156 9B2B0000 		.4byte	.LASF630
 10234 015a 05       		.byte	0x5
 10235 015b 8002     		.uleb128 0x100
 10236 015d 619C0000 		.4byte	.LASF631
 10237 0161 05       		.byte	0x5
 10238 0162 8102     		.uleb128 0x101
 10239 0164 04080000 		.4byte	.LASF632
 10240 0168 05       		.byte	0x5
 10241 0169 8202     		.uleb128 0x102
 10242 016b EE930000 		.4byte	.LASF633
 10243 016f 05       		.byte	0x5
 10244 0170 8502     		.uleb128 0x105
 10245 0172 E24A0000 		.4byte	.LASF634
 10246 0176 05       		.byte	0x5
 10247 0177 8A02     		.uleb128 0x10a
 10248 0179 331E0000 		.4byte	.LASF635
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 248


 10249 017d 05       		.byte	0x5
 10250 017e A002     		.uleb128 0x120
 10251 0180 4C240000 		.4byte	.LASF636
 10252 0184 05       		.byte	0x5
 10253 0185 A702     		.uleb128 0x127
 10254 0187 37520000 		.4byte	.LASF637
 10255 018b 05       		.byte	0x5
 10256 018c AF02     		.uleb128 0x12f
 10257 018e 48920000 		.4byte	.LASF638
 10258 0192 05       		.byte	0x5
 10259 0193 B502     		.uleb128 0x135
 10260 0195 5A390000 		.4byte	.LASF639
 10261 0199 05       		.byte	0x5
 10262 019a D202     		.uleb128 0x152
 10263 019c DA390000 		.4byte	.LASF640
 10264 01a0 05       		.byte	0x5
 10265 01a1 E602     		.uleb128 0x166
 10266 01a3 BF7D0000 		.4byte	.LASF641
 10267 01a7 05       		.byte	0x5
 10268 01a8 EC02     		.uleb128 0x16c
 10269 01aa 0B5F0000 		.4byte	.LASF642
 10270 01ae 05       		.byte	0x5
 10271 01af ED02     		.uleb128 0x16d
 10272 01b1 A0360000 		.4byte	.LASF643
 10273 01b5 05       		.byte	0x5
 10274 01b6 F402     		.uleb128 0x174
 10275 01b8 6A1D0000 		.4byte	.LASF644
 10276 01bc 05       		.byte	0x5
 10277 01bd FA02     		.uleb128 0x17a
 10278 01bf C1250000 		.4byte	.LASF645
 10279 01c3 05       		.byte	0x5
 10280 01c4 8003     		.uleb128 0x180
 10281 01c6 3C470000 		.4byte	.LASF646
 10282 01ca 05       		.byte	0x5
 10283 01cb 8103     		.uleb128 0x181
 10284 01cd 2D400000 		.4byte	.LASF647
 10285 01d1 05       		.byte	0x5
 10286 01d2 8803     		.uleb128 0x188
 10287 01d4 B5820000 		.4byte	.LASF648
 10288 01d8 05       		.byte	0x5
 10289 01d9 8903     		.uleb128 0x189
 10290 01db 7E0C0000 		.4byte	.LASF649
 10291 01df 05       		.byte	0x5
 10292 01e0 9003     		.uleb128 0x190
 10293 01e2 D22F0000 		.4byte	.LASF650
 10294 01e6 05       		.byte	0x5
 10295 01e7 9603     		.uleb128 0x196
 10296 01e9 AD890000 		.4byte	.LASF651
 10297 01ed 05       		.byte	0x5
 10298 01ee A803     		.uleb128 0x1a8
 10299 01f0 67560000 		.4byte	.LASF652
 10300 01f4 05       		.byte	0x5
 10301 01f5 CB03     		.uleb128 0x1cb
 10302 01f7 451F0000 		.4byte	.LASF653
 10303 01fb 05       		.byte	0x5
 10304 01fc CC03     		.uleb128 0x1cc
 10305 01fe 73560000 		.4byte	.LASF654
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 249


 10306 0202 05       		.byte	0x5
 10307 0203 D303     		.uleb128 0x1d3
 10308 0205 EE640000 		.4byte	.LASF655
 10309 0209 05       		.byte	0x5
 10310 020a D403     		.uleb128 0x1d4
 10311 020c 752C0000 		.4byte	.LASF656
 10312 0210 05       		.byte	0x5
 10313 0211 D503     		.uleb128 0x1d5
 10314 0213 14280000 		.4byte	.LASF657
 10315 0217 05       		.byte	0x5
 10316 0218 DC03     		.uleb128 0x1dc
 10317 021a DD3F0000 		.4byte	.LASF658
 10318 021e 05       		.byte	0x5
 10319 021f DD03     		.uleb128 0x1dd
 10320 0221 D5180000 		.4byte	.LASF659
 10321 0225 05       		.byte	0x5
 10322 0226 E703     		.uleb128 0x1e7
 10323 0228 15720000 		.4byte	.LASF660
 10324 022c 05       		.byte	0x5
 10325 022d FD03     		.uleb128 0x1fd
 10326 022f 3F820000 		.4byte	.LASF661
 10327 0233 05       		.byte	0x5
 10328 0234 FF03     		.uleb128 0x1ff
 10329 0236 298C0000 		.4byte	.LASF662
 10330 023a 05       		.byte	0x5
 10331 023b 8104     		.uleb128 0x201
 10332 023d FB950000 		.4byte	.LASF663
 10333 0241 05       		.byte	0x5
 10334 0242 8204     		.uleb128 0x202
 10335 0244 F8190000 		.4byte	.LASF664
 10336 0248 05       		.byte	0x5
 10337 0249 8404     		.uleb128 0x204
 10338 024b 9E4F0000 		.4byte	.LASF665
 10339 024f 05       		.byte	0x5
 10340 0250 9004     		.uleb128 0x210
 10341 0252 07850000 		.4byte	.LASF666
 10342 0256 05       		.byte	0x5
 10343 0257 9E04     		.uleb128 0x21e
 10344 0259 DA650000 		.4byte	.LASF667
 10345 025d 05       		.byte	0x5
 10346 025e A304     		.uleb128 0x223
 10347 0260 DE330000 		.4byte	.LASF668
 10348 0264 05       		.byte	0x5
 10349 0265 A804     		.uleb128 0x228
 10350 0267 33100000 		.4byte	.LASF669
 10351 026b 05       		.byte	0x5
 10352 026c AB04     		.uleb128 0x22b
 10353 026e 8C4B0000 		.4byte	.LASF670
 10354 0272 05       		.byte	0x5
 10355 0273 AF04     		.uleb128 0x22f
 10356 0275 3D8D0000 		.4byte	.LASF671
 10357 0279 05       		.byte	0x5
 10358 027a B104     		.uleb128 0x231
 10359 027c 32230000 		.4byte	.LASF672
 10360 0280 05       		.byte	0x5
 10361 0281 D404     		.uleb128 0x254
 10362 0283 20610000 		.4byte	.LASF673
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 250


 10363 0287 05       		.byte	0x5
 10364 0288 D804     		.uleb128 0x258
 10365 028a 607C0000 		.4byte	.LASF674
 10366 028e 05       		.byte	0x5
 10367 028f DC04     		.uleb128 0x25c
 10368 0291 51050000 		.4byte	.LASF675
 10369 0295 05       		.byte	0x5
 10370 0296 E004     		.uleb128 0x260
 10371 0298 C61B0000 		.4byte	.LASF676
 10372 029c 05       		.byte	0x5
 10373 029d E404     		.uleb128 0x264
 10374 029f 9E640000 		.4byte	.LASF677
 10375 02a3 05       		.byte	0x5
 10376 02a4 E804     		.uleb128 0x268
 10377 02a6 3A250000 		.4byte	.LASF678
 10378 02aa 05       		.byte	0x5
 10379 02ab EC04     		.uleb128 0x26c
 10380 02ad 75870000 		.4byte	.LASF679
 10381 02b1 05       		.byte	0x5
 10382 02b2 F004     		.uleb128 0x270
 10383 02b4 D39B0000 		.4byte	.LASF680
 10384 02b8 05       		.byte	0x5
 10385 02b9 8105     		.uleb128 0x281
 10386 02bb DD630000 		.4byte	.LASF681
 10387 02bf 05       		.byte	0x5
 10388 02c0 8205     		.uleb128 0x282
 10389 02c2 92970000 		.4byte	.LASF682
 10390 02c6 05       		.byte	0x5
 10391 02c7 9405     		.uleb128 0x294
 10392 02c9 FD820000 		.4byte	.LASF683
 10393 02cd 05       		.byte	0x5
 10394 02ce 9805     		.uleb128 0x298
 10395 02d0 2C7D0000 		.4byte	.LASF684
 10396 02d4 05       		.byte	0x5
 10397 02d5 9B05     		.uleb128 0x29b
 10398 02d7 31080000 		.4byte	.LASF685
 10399 02db 05       		.byte	0x5
 10400 02dc 9D05     		.uleb128 0x29d
 10401 02de 4A8B0000 		.4byte	.LASF686
 10402 02e2 05       		.byte	0x5
 10403 02e3 A105     		.uleb128 0x2a1
 10404 02e5 C3700000 		.4byte	.LASF687
 10405 02e9 05       		.byte	0x5
 10406 02ea A305     		.uleb128 0x2a3
 10407 02ec 143C0000 		.4byte	.LASF688
 10408 02f0 05       		.byte	0x5
 10409 02f1 A705     		.uleb128 0x2a7
 10410 02f3 5F5C0000 		.4byte	.LASF689
 10411 02f7 05       		.byte	0x5
 10412 02f8 AA05     		.uleb128 0x2aa
 10413 02fa F1470000 		.4byte	.LASF690
 10414 02fe 05       		.byte	0x5
 10415 02ff AC05     		.uleb128 0x2ac
 10416 0301 EF9C0000 		.4byte	.LASF691
 10417 0305 05       		.byte	0x5
 10418 0306 B005     		.uleb128 0x2b0
 10419 0308 F1760000 		.4byte	.LASF692
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 251


 10420 030c 05       		.byte	0x5
 10421 030d B205     		.uleb128 0x2b2
 10422 030f 05300000 		.4byte	.LASF693
 10423 0313 05       		.byte	0x5
 10424 0314 B405     		.uleb128 0x2b4
 10425 0316 D5410000 		.4byte	.LASF694
 10426 031a 05       		.byte	0x5
 10427 031b B805     		.uleb128 0x2b8
 10428 031d DE720000 		.4byte	.LASF695
 10429 0321 05       		.byte	0x5
 10430 0322 BB05     		.uleb128 0x2bb
 10431 0324 997F0000 		.4byte	.LASF696
 10432 0328 05       		.byte	0x5
 10433 0329 BC05     		.uleb128 0x2bc
 10434 032b 647F0000 		.4byte	.LASF697
 10435 032f 00       		.byte	0
 10436              		.section	.debug_macro,"G",%progbits,wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d,comdat
 10437              	.Ldebug_macro17:
 10438 0000 0400     		.2byte	0x4
 10439 0002 00       		.byte	0
 10440 0003 05       		.byte	0x5
 10441 0004 08       		.uleb128 0x8
 10442 0005 42350000 		.4byte	.LASF699
 10443 0009 06       		.byte	0x6
 10444 000a 0D       		.uleb128 0xd
 10445 000b 3B590000 		.4byte	.LASF700
 10446 000f 05       		.byte	0x5
 10447 0010 10       		.uleb128 0x10
 10448 0011 64740000 		.4byte	.LASF701
 10449 0015 00       		.byte	0
 10450              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.56.f7bb76d8eb43fb7e79a949819dbf4bda,comdat
 10451              	.Ldebug_macro18:
 10452 0000 0400     		.2byte	0x4
 10453 0002 00       		.byte	0
 10454 0003 05       		.byte	0x5
 10455 0004 38       		.uleb128 0x38
 10456 0005 1B360000 		.4byte	.LASF702
 10457 0009 05       		.byte	0x5
 10458 000a 3C       		.uleb128 0x3c
 10459 000b EC980000 		.4byte	.LASF703
 10460 000f 05       		.byte	0x5
 10461 0010 3D       		.uleb128 0x3d
 10462 0011 39920000 		.4byte	.LASF704
 10463 0015 05       		.byte	0x5
 10464 0016 3F       		.uleb128 0x3f
 10465 0017 89400000 		.4byte	.LASF705
 10466 001b 05       		.byte	0x5
 10467 001c 43       		.uleb128 0x43
 10468 001d 1E500000 		.4byte	.LASF706
 10469 0021 05       		.byte	0x5
 10470 0022 A301     		.uleb128 0xa3
 10471 0024 B28D0000 		.4byte	.LASF707
 10472 0028 00       		.byte	0
 10473              		.section	.debug_macro,"G",%progbits,wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd,comdat
 10474              	.Ldebug_macro19:
 10475 0000 0400     		.2byte	0x4
 10476 0002 00       		.byte	0
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 252


 10477 0003 05       		.byte	0x5
 10478 0004 08       		.uleb128 0x8
 10479 0005 137F0000 		.4byte	.LASF708
 10480 0009 05       		.byte	0x5
 10481 000a 0F       		.uleb128 0xf
 10482 000b EC290000 		.4byte	.LASF429
 10483 000f 05       		.byte	0x5
 10484 0010 10       		.uleb128 0x10
 10485 0011 D1430000 		.4byte	.LASF431
 10486 0015 00       		.byte	0
 10487              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.161.19e15733342b50ead2919490b095303e,comdat
 10488              	.Ldebug_macro20:
 10489 0000 0400     		.2byte	0x4
 10490 0002 00       		.byte	0
 10491 0003 06       		.byte	0x6
 10492 0004 A101     		.uleb128 0xa1
 10493 0006 65860000 		.4byte	.LASF483
 10494 000a 06       		.byte	0x6
 10495 000b EE01     		.uleb128 0xee
 10496 000d CB4C0000 		.4byte	.LASF449
 10497 0011 06       		.byte	0x6
 10498 0012 DB02     		.uleb128 0x15b
 10499 0014 6F0C0000 		.4byte	.LASF466
 10500 0018 06       		.byte	0x6
 10501 0019 9103     		.uleb128 0x191
 10502 001b F6100000 		.4byte	.LASF467
 10503 001f 05       		.byte	0x5
 10504 0020 9603     		.uleb128 0x196
 10505 0022 C9390000 		.4byte	.LASF468
 10506 0026 06       		.byte	0x6
 10507 0027 9C03     		.uleb128 0x19c
 10508 0029 693A0000 		.4byte	.LASF469
 10509 002d 05       		.byte	0x5
 10510 002e A103     		.uleb128 0x1a1
 10511 0030 6F440000 		.4byte	.LASF484
 10512 0034 00       		.byte	0
 10513              		.section	.debug_macro,"G",%progbits,wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b,comdat
 10514              	.Ldebug_macro21:
 10515 0000 0400     		.2byte	0x4
 10516 0002 00       		.byte	0
 10517 0003 05       		.byte	0x5
 10518 0004 0A       		.uleb128 0xa
 10519 0005 AF900000 		.4byte	.LASF713
 10520 0009 05       		.byte	0x5
 10521 000a 10       		.uleb128 0x10
 10522 000b EF520000 		.4byte	.LASF714
 10523 000f 05       		.byte	0x5
 10524 0010 1A       		.uleb128 0x1a
 10525 0011 D96F0000 		.4byte	.LASF715
 10526 0015 05       		.byte	0x5
 10527 0016 21       		.uleb128 0x21
 10528 0017 BB310000 		.4byte	.LASF716
 10529 001b 06       		.byte	0x6
 10530 001c 38       		.uleb128 0x38
 10531 001d 629F0000 		.4byte	.LASF717
 10532 0021 06       		.byte	0x6
 10533 0022 39       		.uleb128 0x39
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 253


 10534 0023 B97E0000 		.4byte	.LASF513
 10535 0027 06       		.byte	0x6
 10536 0028 3A       		.uleb128 0x3a
 10537 0029 7A620000 		.4byte	.LASF718
 10538 002d 06       		.byte	0x6
 10539 002e 3B       		.uleb128 0x3b
 10540 002f 40640000 		.4byte	.LASF719
 10541 0033 02       		.byte	0x2
 10542 0034 3C       		.uleb128 0x3c
 10543 0035 696E7400 		.ascii	"int\000"
 10544 0039 06       		.byte	0x6
 10545 003a 3D       		.uleb128 0x3d
 10546 003b 469D0000 		.4byte	.LASF720
 10547 003f 06       		.byte	0x6
 10548 0040 3E       		.uleb128 0x3e
 10549 0041 906E0000 		.4byte	.LASF721
 10550 0045 05       		.byte	0x5
 10551 0046 3F       		.uleb128 0x3f
 10552 0047 092A0000 		.4byte	.LASF722
 10553 004b 05       		.byte	0x5
 10554 004c 40       		.uleb128 0x40
 10555 004d 60460000 		.4byte	.LASF723
 10556 0051 05       		.byte	0x5
 10557 0052 41       		.uleb128 0x41
 10558 0053 96180000 		.4byte	.LASF724
 10559 0057 05       		.byte	0x5
 10560 0058 42       		.uleb128 0x42
 10561 0059 27660000 		.4byte	.LASF725
 10562 005d 05       		.byte	0x5
 10563 005e 43       		.uleb128 0x43
 10564 005f 74000000 		.4byte	.LASF726
 10565 0063 05       		.byte	0x5
 10566 0064 44       		.uleb128 0x44
 10567 0065 5B410000 		.4byte	.LASF727
 10568 0069 05       		.byte	0x5
 10569 006a 45       		.uleb128 0x45
 10570 006b AB980000 		.4byte	.LASF728
 10571 006f 05       		.byte	0x5
 10572 0070 4E       		.uleb128 0x4e
 10573 0071 4F3D0000 		.4byte	.LASF729
 10574 0075 05       		.byte	0x5
 10575 0076 55       		.uleb128 0x55
 10576 0077 1C990000 		.4byte	.LASF730
 10577 007b 05       		.byte	0x5
 10578 007c 5D       		.uleb128 0x5d
 10579 007d 0E090000 		.4byte	.LASF731
 10580 0081 05       		.byte	0x5
 10581 0082 68       		.uleb128 0x68
 10582 0083 CD570000 		.4byte	.LASF732
 10583 0087 05       		.byte	0x5
 10584 0088 73       		.uleb128 0x73
 10585 0089 898D0000 		.4byte	.LASF733
 10586 008d 05       		.byte	0x5
 10587 008e 7C       		.uleb128 0x7c
 10588 008f 27980000 		.4byte	.LASF734
 10589 0093 05       		.byte	0x5
 10590 0094 8301     		.uleb128 0x83
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 254


 10591 0096 68880000 		.4byte	.LASF735
 10592 009a 05       		.byte	0x5
 10593 009b 8C01     		.uleb128 0x8c
 10594 009d 241B0000 		.4byte	.LASF736
 10595 00a1 05       		.byte	0x5
 10596 00a2 9301     		.uleb128 0x93
 10597 00a4 3E480000 		.4byte	.LASF737
 10598 00a8 05       		.byte	0x5
 10599 00a9 9E01     		.uleb128 0x9e
 10600 00ab 3F460000 		.4byte	.LASF738
 10601 00af 05       		.byte	0x5
 10602 00b0 A201     		.uleb128 0xa2
 10603 00b2 90550000 		.4byte	.LASF739
 10604 00b6 05       		.byte	0x5
 10605 00b7 AD01     		.uleb128 0xad
 10606 00b9 31820000 		.4byte	.LASF740
 10607 00bd 05       		.byte	0x5
 10608 00be B801     		.uleb128 0xb8
 10609 00c0 78110000 		.4byte	.LASF741
 10610 00c4 05       		.byte	0x5
 10611 00c5 C101     		.uleb128 0xc1
 10612 00c7 88660000 		.4byte	.LASF742
 10613 00cb 06       		.byte	0x6
 10614 00cc C301     		.uleb128 0xc3
 10615 00ce 629F0000 		.4byte	.LASF717
 10616 00d2 06       		.byte	0x6
 10617 00d3 C401     		.uleb128 0xc4
 10618 00d5 B97E0000 		.4byte	.LASF513
 10619 00d9 06       		.byte	0x6
 10620 00da C501     		.uleb128 0xc5
 10621 00dc 7A620000 		.4byte	.LASF718
 10622 00e0 06       		.byte	0x6
 10623 00e1 C601     		.uleb128 0xc6
 10624 00e3 40640000 		.4byte	.LASF719
 10625 00e7 02       		.byte	0x2
 10626 00e8 C701     		.uleb128 0xc7
 10627 00ea 696E7400 		.ascii	"int\000"
 10628 00ee 06       		.byte	0x6
 10629 00ef C801     		.uleb128 0xc8
 10630 00f1 906E0000 		.4byte	.LASF721
 10631 00f5 06       		.byte	0x6
 10632 00f6 CD01     		.uleb128 0xcd
 10633 00f8 469D0000 		.4byte	.LASF720
 10634 00fc 00       		.byte	0
 10635              		.section	.debug_macro,"G",%progbits,wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9,comdat
 10636              	.Ldebug_macro22:
 10637 0000 0400     		.2byte	0x4
 10638 0002 00       		.byte	0
 10639 0003 05       		.byte	0x5
 10640 0004 0A       		.uleb128 0xa
 10641 0005 C1430000 		.4byte	.LASF743
 10642 0009 05       		.byte	0x5
 10643 000a 15       		.uleb128 0x15
 10644 000b C58C0000 		.4byte	.LASF744
 10645 000f 05       		.byte	0x5
 10646 0010 19       		.uleb128 0x19
 10647 0011 ED6F0000 		.4byte	.LASF745
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 255


 10648 0015 05       		.byte	0x5
 10649 0016 1B       		.uleb128 0x1b
 10650 0017 02720000 		.4byte	.LASF746
 10651 001b 05       		.byte	0x5
 10652 001c 21       		.uleb128 0x21
 10653 001d A6940000 		.4byte	.LASF747
 10654 0021 05       		.byte	0x5
 10655 0022 25       		.uleb128 0x25
 10656 0023 290F0000 		.4byte	.LASF748
 10657 0027 05       		.byte	0x5
 10658 0028 27       		.uleb128 0x27
 10659 0029 42490000 		.4byte	.LASF749
 10660 002d 05       		.byte	0x5
 10661 002e 2D       		.uleb128 0x2d
 10662 002f 1B030000 		.4byte	.LASF750
 10663 0033 05       		.byte	0x5
 10664 0034 31       		.uleb128 0x31
 10665 0035 AE020000 		.4byte	.LASF751
 10666 0039 05       		.byte	0x5
 10667 003a 33       		.uleb128 0x33
 10668 003b D5400000 		.4byte	.LASF752
 10669 003f 05       		.byte	0x5
 10670 0040 39       		.uleb128 0x39
 10671 0041 27730000 		.4byte	.LASF753
 10672 0045 05       		.byte	0x5
 10673 0046 3D       		.uleb128 0x3d
 10674 0047 5D550000 		.4byte	.LASF754
 10675 004b 05       		.byte	0x5
 10676 004c 3F       		.uleb128 0x3f
 10677 004d 36870000 		.4byte	.LASF755
 10678 0051 05       		.byte	0x5
 10679 0052 44       		.uleb128 0x44
 10680 0053 694A0000 		.4byte	.LASF756
 10681 0057 05       		.byte	0x5
 10682 0058 49       		.uleb128 0x49
 10683 0059 31700000 		.4byte	.LASF757
 10684 005d 00       		.byte	0
 10685              		.section	.debug_macro,"G",%progbits,wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281,comdat
 10686              	.Ldebug_macro23:
 10687 0000 0400     		.2byte	0x4
 10688 0002 00       		.byte	0
 10689 0003 05       		.byte	0x5
 10690 0004 17       		.uleb128 0x17
 10691 0005 92980000 		.4byte	.LASF758
 10692 0009 05       		.byte	0x5
 10693 000a 1D       		.uleb128 0x1d
 10694 000b 7B9F0000 		.4byte	.LASF759
 10695 000f 05       		.byte	0x5
 10696 0010 23       		.uleb128 0x23
 10697 0011 843A0000 		.4byte	.LASF760
 10698 0015 05       		.byte	0x5
 10699 0016 29       		.uleb128 0x29
 10700 0017 A14A0000 		.4byte	.LASF761
 10701 001b 05       		.byte	0x5
 10702 001c 35       		.uleb128 0x35
 10703 001d 373D0000 		.4byte	.LASF762
 10704 0021 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 256


 10705 0022 3F       		.uleb128 0x3f
 10706 0023 3A5D0000 		.4byte	.LASF763
 10707 0027 05       		.byte	0x5
 10708 0028 49       		.uleb128 0x49
 10709 0029 DE0D0000 		.4byte	.LASF764
 10710 002d 05       		.byte	0x5
 10711 002e 53       		.uleb128 0x53
 10712 002f 33240000 		.4byte	.LASF765
 10713 0033 05       		.byte	0x5
 10714 0034 9301     		.uleb128 0x93
 10715 0036 2B9E0000 		.4byte	.LASF766
 10716 003a 05       		.byte	0x5
 10717 003b 9401     		.uleb128 0x94
 10718 003d F9050000 		.4byte	.LASF767
 10719 0041 05       		.byte	0x5
 10720 0042 9501     		.uleb128 0x95
 10721 0044 76170000 		.4byte	.LASF768
 10722 0048 05       		.byte	0x5
 10723 0049 AB01     		.uleb128 0xab
 10724 004b 050F0000 		.4byte	.LASF769
 10725 004f 05       		.byte	0x5
 10726 0050 AC01     		.uleb128 0xac
 10727 0052 45550000 		.4byte	.LASF770
 10728 0056 05       		.byte	0x5
 10729 0057 AD01     		.uleb128 0xad
 10730 0059 34980000 		.4byte	.LASF771
 10731 005d 05       		.byte	0x5
 10732 005e B501     		.uleb128 0xb5
 10733 0060 9A860000 		.4byte	.LASF772
 10734 0064 05       		.byte	0x5
 10735 0065 B601     		.uleb128 0xb6
 10736 0067 C1290000 		.4byte	.LASF773
 10737 006b 05       		.byte	0x5
 10738 006c B701     		.uleb128 0xb7
 10739 006e 4C760000 		.4byte	.LASF774
 10740 0072 05       		.byte	0x5
 10741 0073 C101     		.uleb128 0xc1
 10742 0075 0A020000 		.4byte	.LASF775
 10743 0079 05       		.byte	0x5
 10744 007a C201     		.uleb128 0xc2
 10745 007c 4F0D0000 		.4byte	.LASF776
 10746 0080 05       		.byte	0x5
 10747 0081 C301     		.uleb128 0xc3
 10748 0083 95630000 		.4byte	.LASF777
 10749 0087 05       		.byte	0x5
 10750 0088 CB01     		.uleb128 0xcb
 10751 008a 41510000 		.4byte	.LASF778
 10752 008e 05       		.byte	0x5
 10753 008f CC01     		.uleb128 0xcc
 10754 0091 3F090000 		.4byte	.LASF779
 10755 0095 05       		.byte	0x5
 10756 0096 CD01     		.uleb128 0xcd
 10757 0098 FF300000 		.4byte	.LASF780
 10758 009c 05       		.byte	0x5
 10759 009d D701     		.uleb128 0xd7
 10760 009f 60750000 		.4byte	.LASF781
 10761 00a3 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 257


 10762 00a4 D801     		.uleb128 0xd8
 10763 00a6 182E0000 		.4byte	.LASF782
 10764 00aa 05       		.byte	0x5
 10765 00ab D901     		.uleb128 0xd9
 10766 00ad ED4D0000 		.4byte	.LASF783
 10767 00b1 05       		.byte	0x5
 10768 00b2 E701     		.uleb128 0xe7
 10769 00b4 5D7D0000 		.4byte	.LASF784
 10770 00b8 05       		.byte	0x5
 10771 00b9 E801     		.uleb128 0xe8
 10772 00bb 47280000 		.4byte	.LASF785
 10773 00bf 05       		.byte	0x5
 10774 00c0 E901     		.uleb128 0xe9
 10775 00c2 727A0000 		.4byte	.LASF786
 10776 00c6 05       		.byte	0x5
 10777 00c7 F901     		.uleb128 0xf9
 10778 00c9 DE820000 		.4byte	.LASF787
 10779 00cd 05       		.byte	0x5
 10780 00ce FA01     		.uleb128 0xfa
 10781 00d0 954D0000 		.4byte	.LASF788
 10782 00d4 05       		.byte	0x5
 10783 00d5 FB01     		.uleb128 0xfb
 10784 00d7 4B1B0000 		.4byte	.LASF789
 10785 00db 05       		.byte	0x5
 10786 00dc 8902     		.uleb128 0x109
 10787 00de F3110000 		.4byte	.LASF790
 10788 00e2 05       		.byte	0x5
 10789 00e3 8A02     		.uleb128 0x10a
 10790 00e5 B5190000 		.4byte	.LASF791
 10791 00e9 05       		.byte	0x5
 10792 00ea 8B02     		.uleb128 0x10b
 10793 00ec 986A0000 		.4byte	.LASF792
 10794 00f0 05       		.byte	0x5
 10795 00f1 9902     		.uleb128 0x119
 10796 00f3 40560000 		.4byte	.LASF793
 10797 00f7 05       		.byte	0x5
 10798 00f8 9A02     		.uleb128 0x11a
 10799 00fa 80230000 		.4byte	.LASF794
 10800 00fe 05       		.byte	0x5
 10801 00ff 9B02     		.uleb128 0x11b
 10802 0101 116B0000 		.4byte	.LASF795
 10803 0105 05       		.byte	0x5
 10804 0106 A902     		.uleb128 0x129
 10805 0108 93070000 		.4byte	.LASF796
 10806 010c 05       		.byte	0x5
 10807 010d AA02     		.uleb128 0x12a
 10808 010f 5E570000 		.4byte	.LASF797
 10809 0113 05       		.byte	0x5
 10810 0114 AB02     		.uleb128 0x12b
 10811 0116 AC2F0000 		.4byte	.LASF798
 10812 011a 05       		.byte	0x5
 10813 011b B902     		.uleb128 0x139
 10814 011d 57140000 		.4byte	.LASF799
 10815 0121 05       		.byte	0x5
 10816 0122 BA02     		.uleb128 0x13a
 10817 0124 4E9D0000 		.4byte	.LASF800
 10818 0128 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 258


 10819 0129 BB02     		.uleb128 0x13b
 10820 012b 672A0000 		.4byte	.LASF801
 10821 012f 05       		.byte	0x5
 10822 0130 C902     		.uleb128 0x149
 10823 0132 5A610000 		.4byte	.LASF802
 10824 0136 05       		.byte	0x5
 10825 0137 CA02     		.uleb128 0x14a
 10826 0139 E8900000 		.4byte	.LASF803
 10827 013d 05       		.byte	0x5
 10828 013e CB02     		.uleb128 0x14b
 10829 0140 7F350000 		.4byte	.LASF804
 10830 0144 05       		.byte	0x5
 10831 0145 D902     		.uleb128 0x159
 10832 0147 FC2D0000 		.4byte	.LASF805
 10833 014b 05       		.byte	0x5
 10834 014c DA02     		.uleb128 0x15a
 10835 014e B31C0000 		.4byte	.LASF806
 10836 0152 05       		.byte	0x5
 10837 0153 E202     		.uleb128 0x162
 10838 0155 AB460000 		.4byte	.LASF807
 10839 0159 05       		.byte	0x5
 10840 015a EA02     		.uleb128 0x16a
 10841 015c 59710000 		.4byte	.LASF808
 10842 0160 05       		.byte	0x5
 10843 0161 F002     		.uleb128 0x170
 10844 0163 7A370000 		.4byte	.LASF809
 10845 0167 05       		.byte	0x5
 10846 0168 F102     		.uleb128 0x171
 10847 016a 322A0000 		.4byte	.LASF810
 10848 016e 05       		.byte	0x5
 10849 016f F502     		.uleb128 0x175
 10850 0171 F90A0000 		.4byte	.LASF811
 10851 0175 05       		.byte	0x5
 10852 0176 F902     		.uleb128 0x179
 10853 0178 669E0000 		.4byte	.LASF812
 10854 017c 05       		.byte	0x5
 10855 017d FE02     		.uleb128 0x17e
 10856 017f 10460000 		.4byte	.LASF813
 10857 0183 05       		.byte	0x5
 10858 0184 8903     		.uleb128 0x189
 10859 0186 1F750000 		.4byte	.LASF814
 10860 018a 05       		.byte	0x5
 10861 018b 9303     		.uleb128 0x193
 10862 018d A7840000 		.4byte	.LASF815
 10863 0191 05       		.byte	0x5
 10864 0192 9803     		.uleb128 0x198
 10865 0194 38000000 		.4byte	.LASF816
 10866 0198 05       		.byte	0x5
 10867 0199 9F03     		.uleb128 0x19f
 10868 019b 62410000 		.4byte	.LASF817
 10869 019f 05       		.byte	0x5
 10870 01a0 A003     		.uleb128 0x1a0
 10871 01a2 36860000 		.4byte	.LASF818
 10872 01a6 05       		.byte	0x5
 10873 01a7 AB03     		.uleb128 0x1ab
 10874 01a9 390E0000 		.4byte	.LASF819
 10875 01ad 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 259


 10876 01ae AC03     		.uleb128 0x1ac
 10877 01b0 A6370000 		.4byte	.LASF820
 10878 01b4 05       		.byte	0x5
 10879 01b5 B703     		.uleb128 0x1b7
 10880 01b7 07790000 		.4byte	.LASF821
 10881 01bb 05       		.byte	0x5
 10882 01bc B803     		.uleb128 0x1b8
 10883 01be C7550000 		.4byte	.LASF822
 10884 01c2 05       		.byte	0x5
 10885 01c3 C403     		.uleb128 0x1c4
 10886 01c5 2D3B0000 		.4byte	.LASF823
 10887 01c9 05       		.byte	0x5
 10888 01ca C503     		.uleb128 0x1c5
 10889 01cc E6750000 		.4byte	.LASF824
 10890 01d0 05       		.byte	0x5
 10891 01d1 D403     		.uleb128 0x1d4
 10892 01d3 EA270000 		.4byte	.LASF825
 10893 01d7 05       		.byte	0x5
 10894 01d8 D503     		.uleb128 0x1d5
 10895 01da B0660000 		.4byte	.LASF826
 10896 01de 00       		.byte	0
 10897              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8,comda
 10898              	.Ldebug_macro24:
 10899 0000 0400     		.2byte	0x4
 10900 0002 00       		.byte	0
 10901 0003 05       		.byte	0x5
 10902 0004 44       		.uleb128 0x44
 10903 0005 6C350000 		.4byte	.LASF828
 10904 0009 05       		.byte	0x5
 10905 000a 5C       		.uleb128 0x5c
 10906 000b BD380000 		.4byte	.LASF829
 10907 000f 05       		.byte	0x5
 10908 0010 5D       		.uleb128 0x5d
 10909 0011 F8080000 		.4byte	.LASF830
 10910 0015 05       		.byte	0x5
 10911 0016 5E       		.uleb128 0x5e
 10912 0017 A6290000 		.4byte	.LASF831
 10913 001b 05       		.byte	0x5
 10914 001c 5F       		.uleb128 0x5f
 10915 001d DA3A0000 		.4byte	.LASF832
 10916 0021 05       		.byte	0x5
 10917 0022 60       		.uleb128 0x60
 10918 0023 51670000 		.4byte	.LASF833
 10919 0027 05       		.byte	0x5
 10920 0028 61       		.uleb128 0x61
 10921 0029 AF1D0000 		.4byte	.LASF834
 10922 002d 05       		.byte	0x5
 10923 002e 62       		.uleb128 0x62
 10924 002f 635A0000 		.4byte	.LASF835
 10925 0033 05       		.byte	0x5
 10926 0034 63       		.uleb128 0x63
 10927 0035 154B0000 		.4byte	.LASF836
 10928 0039 05       		.byte	0x5
 10929 003a 64       		.uleb128 0x64
 10930 003b FF1F0000 		.4byte	.LASF837
 10931 003f 05       		.byte	0x5
 10932 0040 65       		.uleb128 0x65
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 260


 10933 0041 1B9C0000 		.4byte	.LASF838
 10934 0045 05       		.byte	0x5
 10935 0046 66       		.uleb128 0x66
 10936 0047 314E0000 		.4byte	.LASF839
 10937 004b 05       		.byte	0x5
 10938 004c 67       		.uleb128 0x67
 10939 004d F0010000 		.4byte	.LASF840
 10940 0051 05       		.byte	0x5
 10941 0052 68       		.uleb128 0x68
 10942 0053 37650000 		.4byte	.LASF841
 10943 0057 05       		.byte	0x5
 10944 0058 69       		.uleb128 0x69
 10945 0059 554A0000 		.4byte	.LASF842
 10946 005d 05       		.byte	0x5
 10947 005e 6B       		.uleb128 0x6b
 10948 005f 355F0000 		.4byte	.LASF843
 10949 0063 05       		.byte	0x5
 10950 0064 6D       		.uleb128 0x6d
 10951 0065 63540000 		.4byte	.LASF844
 10952 0069 05       		.byte	0x5
 10953 006a 6E       		.uleb128 0x6e
 10954 006b 6A030000 		.4byte	.LASF845
 10955 006f 05       		.byte	0x5
 10956 0070 6F       		.uleb128 0x6f
 10957 0071 F03A0000 		.4byte	.LASF846
 10958 0075 05       		.byte	0x5
 10959 0076 70       		.uleb128 0x70
 10960 0077 B0470000 		.4byte	.LASF847
 10961 007b 05       		.byte	0x5
 10962 007c 71       		.uleb128 0x71
 10963 007d AF4D0000 		.4byte	.LASF848
 10964 0081 05       		.byte	0x5
 10965 0082 72       		.uleb128 0x72
 10966 0083 9D400000 		.4byte	.LASF849
 10967 0087 05       		.byte	0x5
 10968 0088 77       		.uleb128 0x77
 10969 0089 14620000 		.4byte	.LASF850
 10970 008d 05       		.byte	0x5
 10971 008e 78       		.uleb128 0x78
 10972 008f 5E370000 		.4byte	.LASF851
 10973 0093 05       		.byte	0x5
 10974 0094 79       		.uleb128 0x79
 10975 0095 999C0000 		.4byte	.LASF852
 10976 0099 05       		.byte	0x5
 10977 009a 7A       		.uleb128 0x7a
 10978 009b 487B0000 		.4byte	.LASF853
 10979 009f 05       		.byte	0x5
 10980 00a0 7B       		.uleb128 0x7b
 10981 00a1 D4440000 		.4byte	.LASF854
 10982 00a5 05       		.byte	0x5
 10983 00a6 7C       		.uleb128 0x7c
 10984 00a7 3D310000 		.4byte	.LASF855
 10985 00ab 05       		.byte	0x5
 10986 00ac 7D       		.uleb128 0x7d
 10987 00ad 3E620000 		.4byte	.LASF856
 10988 00b1 05       		.byte	0x5
 10989 00b2 7E       		.uleb128 0x7e
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 261


 10990 00b3 8A4E0000 		.4byte	.LASF857
 10991 00b7 05       		.byte	0x5
 10992 00b8 8101     		.uleb128 0x81
 10993 00ba CA0E0000 		.4byte	.LASF858
 10994 00be 05       		.byte	0x5
 10995 00bf 8201     		.uleb128 0x82
 10996 00c1 32410000 		.4byte	.LASF859
 10997 00c5 05       		.byte	0x5
 10998 00c6 8301     		.uleb128 0x83
 10999 00c8 65090000 		.4byte	.LASF860
 11000 00cc 05       		.byte	0x5
 11001 00cd 8401     		.uleb128 0x84
 11002 00cf 20100000 		.4byte	.LASF861
 11003 00d3 05       		.byte	0x5
 11004 00d4 8701     		.uleb128 0x87
 11005 00d6 553A0000 		.4byte	.LASF862
 11006 00da 05       		.byte	0x5
 11007 00db 8801     		.uleb128 0x88
 11008 00dd B8050000 		.4byte	.LASF863
 11009 00e1 05       		.byte	0x5
 11010 00e2 8901     		.uleb128 0x89
 11011 00e4 BF9B0000 		.4byte	.LASF864
 11012 00e8 05       		.byte	0x5
 11013 00e9 8A01     		.uleb128 0x8a
 11014 00eb AA6D0000 		.4byte	.LASF865
 11015 00ef 05       		.byte	0x5
 11016 00f0 9001     		.uleb128 0x90
 11017 00f2 B04E0000 		.4byte	.LASF866
 11018 00f6 05       		.byte	0x5
 11019 00f7 9401     		.uleb128 0x94
 11020 00f9 4E9A0000 		.4byte	.LASF867
 11021 00fd 05       		.byte	0x5
 11022 00fe 9601     		.uleb128 0x96
 11023 0100 364F0000 		.4byte	.LASF868
 11024 0104 05       		.byte	0x5
 11025 0105 9C01     		.uleb128 0x9c
 11026 0107 903B0000 		.4byte	.LASF869
 11027 010b 00       		.byte	0
 11028              		.section	.debug_macro,"G",%progbits,wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066,comdat
 11029              	.Ldebug_macro25:
 11030 0000 0400     		.2byte	0x4
 11031 0002 00       		.byte	0
 11032 0003 05       		.byte	0x5
 11033 0004 43       		.uleb128 0x43
 11034 0005 30390000 		.4byte	.LASF870
 11035 0009 05       		.byte	0x5
 11036 000a 4C       		.uleb128 0x4c
 11037 000b F0430000 		.4byte	.LASF871
 11038 000f 05       		.byte	0x5
 11039 0010 4E       		.uleb128 0x4e
 11040 0011 44370000 		.4byte	.LASF872
 11041 0015 05       		.byte	0x5
 11042 0016 4F       		.uleb128 0x4f
 11043 0017 83610000 		.4byte	.LASF873
 11044 001b 05       		.byte	0x5
 11045 001c 51       		.uleb128 0x51
 11046 001d C0370000 		.4byte	.LASF874
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 262


 11047 0021 05       		.byte	0x5
 11048 0022 52       		.uleb128 0x52
 11049 0023 70990000 		.4byte	.LASF875
 11050 0027 05       		.byte	0x5
 11051 0028 53       		.uleb128 0x53
 11052 0029 C5620000 		.4byte	.LASF876
 11053 002d 05       		.byte	0x5
 11054 002e 54       		.uleb128 0x54
 11055 002f 466D0000 		.4byte	.LASF877
 11056 0033 05       		.byte	0x5
 11057 0034 57       		.uleb128 0x57
 11058 0035 73360000 		.4byte	.LASF878
 11059 0039 05       		.byte	0x5
 11060 003a 58       		.uleb128 0x58
 11061 003b 39990000 		.4byte	.LASF879
 11062 003f 05       		.byte	0x5
 11063 0040 59       		.uleb128 0x59
 11064 0041 B01B0000 		.4byte	.LASF880
 11065 0045 00       		.byte	0
 11066              		.section	.debug_macro,"G",%progbits,wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946,comdat
 11067              	.Ldebug_macro26:
 11068 0000 0400     		.2byte	0x4
 11069 0002 00       		.byte	0
 11070 0003 05       		.byte	0x5
 11071 0004 44       		.uleb128 0x44
 11072 0005 DB900000 		.4byte	.LASF882
 11073 0009 05       		.byte	0x5
 11074 000a 55       		.uleb128 0x55
 11075 000b 0F150000 		.4byte	.LASF883
 11076 000f 05       		.byte	0x5
 11077 0010 56       		.uleb128 0x56
 11078 0011 C27E0000 		.4byte	.LASF884
 11079 0015 05       		.byte	0x5
 11080 0016 57       		.uleb128 0x57
 11081 0017 83240000 		.4byte	.LASF885
 11082 001b 05       		.byte	0x5
 11083 001c 58       		.uleb128 0x58
 11084 001d 592A0000 		.4byte	.LASF886
 11085 0021 05       		.byte	0x5
 11086 0022 59       		.uleb128 0x59
 11087 0023 C11E0000 		.4byte	.LASF887
 11088 0027 05       		.byte	0x5
 11089 0028 5A       		.uleb128 0x5a
 11090 0029 2E380000 		.4byte	.LASF888
 11091 002d 05       		.byte	0x5
 11092 002e 5B       		.uleb128 0x5b
 11093 002f 866F0000 		.4byte	.LASF889
 11094 0033 05       		.byte	0x5
 11095 0034 6A       		.uleb128 0x6a
 11096 0035 CF6D0000 		.4byte	.LASF890
 11097 0039 05       		.byte	0x5
 11098 003a 6F       		.uleb128 0x6f
 11099 003b 7D530000 		.4byte	.LASF891
 11100 003f 05       		.byte	0x5
 11101 0040 70       		.uleb128 0x70
 11102 0041 E38D0000 		.4byte	.LASF892
 11103 0045 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 263


 11104 0046 71       		.uleb128 0x71
 11105 0047 9A900000 		.4byte	.LASF893
 11106 004b 05       		.byte	0x5
 11107 004c 77       		.uleb128 0x77
 11108 004d CE500000 		.4byte	.LASF894
 11109 0051 05       		.byte	0x5
 11110 0052 78       		.uleb128 0x78
 11111 0053 F1390000 		.4byte	.LASF895
 11112 0057 05       		.byte	0x5
 11113 0058 79       		.uleb128 0x79
 11114 0059 97660000 		.4byte	.LASF896
 11115 005d 05       		.byte	0x5
 11116 005e 7A       		.uleb128 0x7a
 11117 005f 79590000 		.4byte	.LASF897
 11118 0063 05       		.byte	0x5
 11119 0064 7B       		.uleb128 0x7b
 11120 0065 BD930000 		.4byte	.LASF898
 11121 0069 05       		.byte	0x5
 11122 006a 8301     		.uleb128 0x83
 11123 006c 485E0000 		.4byte	.LASF899
 11124 0070 05       		.byte	0x5
 11125 0071 8401     		.uleb128 0x84
 11126 0073 E2850000 		.4byte	.LASF900
 11127 0077 05       		.byte	0x5
 11128 0078 8501     		.uleb128 0x85
 11129 007a 44890000 		.4byte	.LASF901
 11130 007e 05       		.byte	0x5
 11131 007f 8601     		.uleb128 0x86
 11132 0081 293F0000 		.4byte	.LASF902
 11133 0085 05       		.byte	0x5
 11134 0086 8701     		.uleb128 0x87
 11135 0088 D63C0000 		.4byte	.LASF903
 11136 008c 05       		.byte	0x5
 11137 008d 8801     		.uleb128 0x88
 11138 008f 95530000 		.4byte	.LASF904
 11139 0093 05       		.byte	0x5
 11140 0094 8E01     		.uleb128 0x8e
 11141 0096 CF730000 		.4byte	.LASF905
 11142 009a 05       		.byte	0x5
 11143 009b 8F01     		.uleb128 0x8f
 11144 009d 6C310000 		.4byte	.LASF906
 11145 00a1 05       		.byte	0x5
 11146 00a2 9501     		.uleb128 0x95
 11147 00a4 5B5F0000 		.4byte	.LASF907
 11148 00a8 05       		.byte	0x5
 11149 00a9 9B01     		.uleb128 0x9b
 11150 00ab 957D0000 		.4byte	.LASF908
 11151 00af 05       		.byte	0x5
 11152 00b0 AF01     		.uleb128 0xaf
 11153 00b2 06780000 		.4byte	.LASF909
 11154 00b6 05       		.byte	0x5
 11155 00b7 B001     		.uleb128 0xb0
 11156 00b9 9D540000 		.4byte	.LASF910
 11157 00bd 05       		.byte	0x5
 11158 00be B401     		.uleb128 0xb4
 11159 00c0 A77A0000 		.4byte	.LASF911
 11160 00c4 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 264


 11161 00c5 BC01     		.uleb128 0xbc
 11162 00c7 F99A0000 		.4byte	.LASF912
 11163 00cb 05       		.byte	0x5
 11164 00cc C001     		.uleb128 0xc0
 11165 00ce 618E0000 		.4byte	.LASF913
 11166 00d2 00       		.byte	0
 11167              		.section	.debug_macro,"G",%progbits,wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5,comdat
 11168              	.Ldebug_macro27:
 11169 0000 0400     		.2byte	0x4
 11170 0002 00       		.byte	0
 11171 0003 05       		.byte	0x5
 11172 0004 C502     		.uleb128 0x145
 11173 0006 87080000 		.4byte	.LASF914
 11174 000a 05       		.byte	0x5
 11175 000b D902     		.uleb128 0x159
 11176 000d 40290000 		.4byte	.LASF915
 11177 0011 00       		.byte	0
 11178              		.section	.debug_macro,"G",%progbits,wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168,comdat
 11179              	.Ldebug_macro28:
 11180 0000 0400     		.2byte	0x4
 11181 0002 00       		.byte	0
 11182 0003 05       		.byte	0x5
 11183 0004 43       		.uleb128 0x43
 11184 0005 16710000 		.4byte	.LASF916
 11185 0009 05       		.byte	0x5
 11186 000a 9101     		.uleb128 0x91
 11187 000c A80B0000 		.4byte	.LASF917
 11188 0010 05       		.byte	0x5
 11189 0011 9201     		.uleb128 0x92
 11190 0013 E81A0000 		.4byte	.LASF918
 11191 0017 05       		.byte	0x5
 11192 0018 9301     		.uleb128 0x93
 11193 001a C3070000 		.4byte	.LASF919
 11194 001e 00       		.byte	0
 11195              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e,comdat
 11196              	.Ldebug_macro29:
 11197 0000 0400     		.2byte	0x4
 11198 0002 00       		.byte	0
 11199 0003 05       		.byte	0x5
 11200 0004 AB01     		.uleb128 0xab
 11201 0006 9E650000 		.4byte	.LASF920
 11202 000a 05       		.byte	0x5
 11203 000b AF01     		.uleb128 0xaf
 11204 000d 15910000 		.4byte	.LASF921
 11205 0011 05       		.byte	0x5
 11206 0012 B301     		.uleb128 0xb3
 11207 0014 22630000 		.4byte	.LASF922
 11208 0018 05       		.byte	0x5
 11209 0019 B701     		.uleb128 0xb7
 11210 001b 7B320000 		.4byte	.LASF923
 11211 001f 05       		.byte	0x5
 11212 0020 BB01     		.uleb128 0xbb
 11213 0022 DD280000 		.4byte	.LASF924
 11214 0026 05       		.byte	0x5
 11215 0027 BF01     		.uleb128 0xbf
 11216 0029 D3880000 		.4byte	.LASF925
 11217 002d 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 265


 11218 002e C701     		.uleb128 0xc7
 11219 0030 6C2B0000 		.4byte	.LASF926
 11220 0034 05       		.byte	0x5
 11221 0035 D301     		.uleb128 0xd3
 11222 0037 C8150000 		.4byte	.LASF927
 11223 003b 05       		.byte	0x5
 11224 003c DF01     		.uleb128 0xdf
 11225 003e D19C0000 		.4byte	.LASF928
 11226 0042 05       		.byte	0x5
 11227 0043 EF01     		.uleb128 0xef
 11228 0045 39750000 		.4byte	.LASF929
 11229 0049 05       		.byte	0x5
 11230 004a F301     		.uleb128 0xf3
 11231 004c 959F0000 		.4byte	.LASF930
 11232 0050 05       		.byte	0x5
 11233 0051 F701     		.uleb128 0xf7
 11234 0053 4F7E0000 		.4byte	.LASF931
 11235 0057 05       		.byte	0x5
 11236 0058 FE01     		.uleb128 0xfe
 11237 005a 43610000 		.4byte	.LASF932
 11238 005e 05       		.byte	0x5
 11239 005f 9302     		.uleb128 0x113
 11240 0061 FF0F0000 		.4byte	.LASF933
 11241 0065 05       		.byte	0x5
 11242 0066 9702     		.uleb128 0x117
 11243 0068 FC600000 		.4byte	.LASF934
 11244 006c 05       		.byte	0x5
 11245 006d A402     		.uleb128 0x124
 11246 006f 1B1C0000 		.4byte	.LASF935
 11247 0073 05       		.byte	0x5
 11248 0074 A802     		.uleb128 0x128
 11249 0076 E4230000 		.4byte	.LASF936
 11250 007a 05       		.byte	0x5
 11251 007b AC02     		.uleb128 0x12c
 11252 007d B90C0000 		.4byte	.LASF937
 11253 0081 05       		.byte	0x5
 11254 0082 B902     		.uleb128 0x139
 11255 0084 A6880000 		.4byte	.LASF938
 11256 0088 05       		.byte	0x5
 11257 0089 C002     		.uleb128 0x140
 11258 008b AB080000 		.4byte	.LASF939
 11259 008f 05       		.byte	0x5
 11260 0090 C602     		.uleb128 0x146
 11261 0092 797C0000 		.4byte	.LASF940
 11262 0096 05       		.byte	0x5
 11263 0097 CC02     		.uleb128 0x14c
 11264 0099 32010000 		.4byte	.LASF941
 11265 009d 05       		.byte	0x5
 11266 009e D202     		.uleb128 0x152
 11267 00a0 7B940000 		.4byte	.LASF942
 11268 00a4 05       		.byte	0x5
 11269 00a5 D702     		.uleb128 0x157
 11270 00a7 A0380000 		.4byte	.LASF943
 11271 00ab 05       		.byte	0x5
 11272 00ac DC02     		.uleb128 0x15c
 11273 00ae 04040000 		.4byte	.LASF944
 11274 00b2 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 266


 11275 00b3 E202     		.uleb128 0x162
 11276 00b5 462E0000 		.4byte	.LASF945
 11277 00b9 05       		.byte	0x5
 11278 00ba EB02     		.uleb128 0x16b
 11279 00bc BD0B0000 		.4byte	.LASF946
 11280 00c0 05       		.byte	0x5
 11281 00c1 F302     		.uleb128 0x173
 11282 00c3 F4240000 		.4byte	.LASF947
 11283 00c7 05       		.byte	0x5
 11284 00c8 FB02     		.uleb128 0x17b
 11285 00ca 33600000 		.4byte	.LASF948
 11286 00ce 05       		.byte	0x5
 11287 00cf 8303     		.uleb128 0x183
 11288 00d1 BD3D0000 		.4byte	.LASF949
 11289 00d5 05       		.byte	0x5
 11290 00d6 8D03     		.uleb128 0x18d
 11291 00d8 DF9F0000 		.4byte	.LASF950
 11292 00dc 05       		.byte	0x5
 11293 00dd 9103     		.uleb128 0x191
 11294 00df 17870000 		.4byte	.LASF951
 11295 00e3 05       		.byte	0x5
 11296 00e4 9503     		.uleb128 0x195
 11297 00e6 4E2C0000 		.4byte	.LASF952
 11298 00ea 05       		.byte	0x5
 11299 00eb 9903     		.uleb128 0x199
 11300 00ed DA160000 		.4byte	.LASF953
 11301 00f1 05       		.byte	0x5
 11302 00f2 9D03     		.uleb128 0x19d
 11303 00f4 4C880000 		.4byte	.LASF954
 11304 00f8 05       		.byte	0x5
 11305 00f9 A103     		.uleb128 0x1a1
 11306 00fb AD210000 		.4byte	.LASF955
 11307 00ff 05       		.byte	0x5
 11308 0100 A503     		.uleb128 0x1a5
 11309 0102 0F5D0000 		.4byte	.LASF956
 11310 0106 05       		.byte	0x5
 11311 0107 A903     		.uleb128 0x1a9
 11312 0109 FC1E0000 		.4byte	.LASF957
 11313 010d 05       		.byte	0x5
 11314 010e AD03     		.uleb128 0x1ad
 11315 0110 F91A0000 		.4byte	.LASF958
 11316 0114 05       		.byte	0x5
 11317 0115 B103     		.uleb128 0x1b1
 11318 0117 1E200000 		.4byte	.LASF959
 11319 011b 05       		.byte	0x5
 11320 011c B503     		.uleb128 0x1b5
 11321 011e E73E0000 		.4byte	.LASF960
 11322 0122 05       		.byte	0x5
 11323 0123 B903     		.uleb128 0x1b9
 11324 0125 A80A0000 		.4byte	.LASF961
 11325 0129 05       		.byte	0x5
 11326 012a BD03     		.uleb128 0x1bd
 11327 012c E38B0000 		.4byte	.LASF962
 11328 0130 05       		.byte	0x5
 11329 0131 C103     		.uleb128 0x1c1
 11330 0133 AE750000 		.4byte	.LASF963
 11331 0137 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 267


 11332 0138 C503     		.uleb128 0x1c5
 11333 013a 40130000 		.4byte	.LASF964
 11334 013e 05       		.byte	0x5
 11335 013f C903     		.uleb128 0x1c9
 11336 0141 F4860000 		.4byte	.LASF965
 11337 0145 05       		.byte	0x5
 11338 0146 CD03     		.uleb128 0x1cd
 11339 0148 B3980000 		.4byte	.LASF966
 11340 014c 05       		.byte	0x5
 11341 014d D103     		.uleb128 0x1d1
 11342 014f B57B0000 		.4byte	.LASF967
 11343 0153 05       		.byte	0x5
 11344 0154 D503     		.uleb128 0x1d5
 11345 0156 B69D0000 		.4byte	.LASF968
 11346 015a 05       		.byte	0x5
 11347 015b D903     		.uleb128 0x1d9
 11348 015d E95F0000 		.4byte	.LASF969
 11349 0161 05       		.byte	0x5
 11350 0162 DD03     		.uleb128 0x1dd
 11351 0164 91510000 		.4byte	.LASF970
 11352 0168 05       		.byte	0x5
 11353 0169 E103     		.uleb128 0x1e1
 11354 016b 389F0000 		.4byte	.LASF971
 11355 016f 05       		.byte	0x5
 11356 0170 E503     		.uleb128 0x1e5
 11357 0172 5C3F0000 		.4byte	.LASF972
 11358 0176 05       		.byte	0x5
 11359 0177 E903     		.uleb128 0x1e9
 11360 0179 EF5E0000 		.4byte	.LASF973
 11361 017d 05       		.byte	0x5
 11362 017e ED03     		.uleb128 0x1ed
 11363 0180 C1360000 		.4byte	.LASF974
 11364 0184 05       		.byte	0x5
 11365 0185 F103     		.uleb128 0x1f1
 11366 0187 5A5D0000 		.4byte	.LASF975
 11367 018b 05       		.byte	0x5
 11368 018c F503     		.uleb128 0x1f5
 11369 018e E33D0000 		.4byte	.LASF976
 11370 0192 05       		.byte	0x5
 11371 0193 F903     		.uleb128 0x1f9
 11372 0195 7F680000 		.4byte	.LASF977
 11373 0199 05       		.byte	0x5
 11374 019a FD03     		.uleb128 0x1fd
 11375 019c E57E0000 		.4byte	.LASF978
 11376 01a0 05       		.byte	0x5
 11377 01a1 8104     		.uleb128 0x201
 11378 01a3 551C0000 		.4byte	.LASF979
 11379 01a7 05       		.byte	0x5
 11380 01a8 8504     		.uleb128 0x205
 11381 01aa B9320000 		.4byte	.LASF980
 11382 01ae 05       		.byte	0x5
 11383 01af 8904     		.uleb128 0x209
 11384 01b1 65600000 		.4byte	.LASF981
 11385 01b5 05       		.byte	0x5
 11386 01b6 8D04     		.uleb128 0x20d
 11387 01b8 090D0000 		.4byte	.LASF982
 11388 01bc 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 268


 11389 01bd 9104     		.uleb128 0x211
 11390 01bf 671A0000 		.4byte	.LASF983
 11391 01c3 05       		.byte	0x5
 11392 01c4 9504     		.uleb128 0x215
 11393 01c6 92680000 		.4byte	.LASF984
 11394 01ca 05       		.byte	0x5
 11395 01cb 9904     		.uleb128 0x219
 11396 01cd FB340000 		.4byte	.LASF985
 11397 01d1 05       		.byte	0x5
 11398 01d2 9D04     		.uleb128 0x21d
 11399 01d4 130E0000 		.4byte	.LASF986
 11400 01d8 05       		.byte	0x5
 11401 01d9 A104     		.uleb128 0x221
 11402 01db 076D0000 		.4byte	.LASF987
 11403 01df 05       		.byte	0x5
 11404 01e0 A504     		.uleb128 0x225
 11405 01e2 DB150000 		.4byte	.LASF988
 11406 01e6 05       		.byte	0x5
 11407 01e7 A904     		.uleb128 0x229
 11408 01e9 B52A0000 		.4byte	.LASF989
 11409 01ed 05       		.byte	0x5
 11410 01ee AD04     		.uleb128 0x22d
 11411 01f0 AE850000 		.4byte	.LASF990
 11412 01f4 05       		.byte	0x5
 11413 01f5 B104     		.uleb128 0x231
 11414 01f7 9F1E0000 		.4byte	.LASF991
 11415 01fb 05       		.byte	0x5
 11416 01fc B504     		.uleb128 0x235
 11417 01fe 976C0000 		.4byte	.LASF992
 11418 0202 05       		.byte	0x5
 11419 0203 B904     		.uleb128 0x239
 11420 0205 62950000 		.4byte	.LASF993
 11421 0209 05       		.byte	0x5
 11422 020a BD04     		.uleb128 0x23d
 11423 020c 170B0000 		.4byte	.LASF994
 11424 0210 05       		.byte	0x5
 11425 0211 C104     		.uleb128 0x241
 11426 0213 DE8E0000 		.4byte	.LASF995
 11427 0217 05       		.byte	0x5
 11428 0218 C504     		.uleb128 0x245
 11429 021a 52430000 		.4byte	.LASF996
 11430 021e 05       		.byte	0x5
 11431 021f C904     		.uleb128 0x249
 11432 0221 44040000 		.4byte	.LASF997
 11433 0225 05       		.byte	0x5
 11434 0226 CD04     		.uleb128 0x24d
 11435 0228 EE380000 		.4byte	.LASF998
 11436 022c 05       		.byte	0x5
 11437 022d D104     		.uleb128 0x251
 11438 022f A2690000 		.4byte	.LASF999
 11439 0233 05       		.byte	0x5
 11440 0234 D504     		.uleb128 0x255
 11441 0236 E7740000 		.4byte	.LASF1000
 11442 023a 05       		.byte	0x5
 11443 023b D904     		.uleb128 0x259
 11444 023d B1990000 		.4byte	.LASF1001
 11445 0241 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 269


 11446 0242 DD04     		.uleb128 0x25d
 11447 0244 64700000 		.4byte	.LASF1002
 11448 0248 05       		.byte	0x5
 11449 0249 E104     		.uleb128 0x261
 11450 024b DB320000 		.4byte	.LASF1003
 11451 024f 05       		.byte	0x5
 11452 0250 F704     		.uleb128 0x277
 11453 0252 FD650000 		.4byte	.LASF1004
 11454 0256 05       		.byte	0x5
 11455 0257 FB04     		.uleb128 0x27b
 11456 0259 857C0000 		.4byte	.LASF1005
 11457 025d 05       		.byte	0x5
 11458 025e FF04     		.uleb128 0x27f
 11459 0260 82570000 		.4byte	.LASF1006
 11460 0264 05       		.byte	0x5
 11461 0265 8305     		.uleb128 0x283
 11462 0267 AE0F0000 		.4byte	.LASF1007
 11463 026b 05       		.byte	0x5
 11464 026c 8705     		.uleb128 0x287
 11465 026e 51450000 		.4byte	.LASF1008
 11466 0272 05       		.byte	0x5
 11467 0273 8B05     		.uleb128 0x28b
 11468 0275 5C6C0000 		.4byte	.LASF1009
 11469 0279 05       		.byte	0x5
 11470 027a 9305     		.uleb128 0x293
 11471 027c 0C640000 		.4byte	.LASF1010
 11472 0280 05       		.byte	0x5
 11473 0281 9B05     		.uleb128 0x29b
 11474 0283 F4550000 		.4byte	.LASF1011
 11475 0287 05       		.byte	0x5
 11476 0288 9F05     		.uleb128 0x29f
 11477 028a 801E0000 		.4byte	.LASF1012
 11478 028e 05       		.byte	0x5
 11479 028f A305     		.uleb128 0x2a3
 11480 0291 D9260000 		.4byte	.LASF1013
 11481 0295 05       		.byte	0x5
 11482 0296 A705     		.uleb128 0x2a7
 11483 0298 B21A0000 		.4byte	.LASF1014
 11484 029c 05       		.byte	0x5
 11485 029d AB05     		.uleb128 0x2ab
 11486 029f 78770000 		.4byte	.LASF1015
 11487 02a3 05       		.byte	0x5
 11488 02a4 AF05     		.uleb128 0x2af
 11489 02a6 7E730000 		.4byte	.LASF1016
 11490 02aa 05       		.byte	0x5
 11491 02ab B305     		.uleb128 0x2b3
 11492 02ad D7960000 		.4byte	.LASF1017
 11493 02b1 05       		.byte	0x5
 11494 02b2 B705     		.uleb128 0x2b7
 11495 02b4 00380000 		.4byte	.LASF1018
 11496 02b8 05       		.byte	0x5
 11497 02b9 BB05     		.uleb128 0x2bb
 11498 02bb 741F0000 		.4byte	.LASF1019
 11499 02bf 05       		.byte	0x5
 11500 02c0 C705     		.uleb128 0x2c7
 11501 02c2 B9110000 		.4byte	.LASF1020
 11502 02c6 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 270


 11503 02c7 CB05     		.uleb128 0x2cb
 11504 02c9 7A340000 		.4byte	.LASF1021
 11505 02cd 05       		.byte	0x5
 11506 02ce D505     		.uleb128 0x2d5
 11507 02d0 2E030000 		.4byte	.LASF1022
 11508 02d4 05       		.byte	0x5
 11509 02d5 D905     		.uleb128 0x2d9
 11510 02d7 37180000 		.4byte	.LASF1023
 11511 02db 05       		.byte	0x5
 11512 02dc DA05     		.uleb128 0x2da
 11513 02de 30550000 		.4byte	.LASF1024
 11514 02e2 05       		.byte	0x5
 11515 02e3 DB05     		.uleb128 0x2db
 11516 02e5 E6620000 		.4byte	.LASF1025
 11517 02e9 05       		.byte	0x5
 11518 02ea DC05     		.uleb128 0x2dc
 11519 02ec AA120000 		.4byte	.LASF1026
 11520 02f0 05       		.byte	0x5
 11521 02f1 DD05     		.uleb128 0x2dd
 11522 02f3 DD530000 		.4byte	.LASF1027
 11523 02f7 05       		.byte	0x5
 11524 02f8 DE05     		.uleb128 0x2de
 11525 02fa CC4D0000 		.4byte	.LASF1028
 11526 02fe 05       		.byte	0x5
 11527 02ff DF05     		.uleb128 0x2df
 11528 0301 3B680000 		.4byte	.LASF1029
 11529 0305 05       		.byte	0x5
 11530 0306 E005     		.uleb128 0x2e0
 11531 0308 68680000 		.4byte	.LASF1030
 11532 030c 05       		.byte	0x5
 11533 030d E105     		.uleb128 0x2e1
 11534 030f 73270000 		.4byte	.LASF1031
 11535 0313 05       		.byte	0x5
 11536 0314 E205     		.uleb128 0x2e2
 11537 0316 D19A0000 		.4byte	.LASF1032
 11538 031a 05       		.byte	0x5
 11539 031b E305     		.uleb128 0x2e3
 11540 031d 827E0000 		.4byte	.LASF1033
 11541 0321 05       		.byte	0x5
 11542 0322 E405     		.uleb128 0x2e4
 11543 0324 577A0000 		.4byte	.LASF1034
 11544 0328 05       		.byte	0x5
 11545 0329 E505     		.uleb128 0x2e5
 11546 032b 43320000 		.4byte	.LASF1035
 11547 032f 05       		.byte	0x5
 11548 0330 E605     		.uleb128 0x2e6
 11549 0332 6E0B0000 		.4byte	.LASF1036
 11550 0336 05       		.byte	0x5
 11551 0337 E705     		.uleb128 0x2e7
 11552 0339 D4220000 		.4byte	.LASF1037
 11553 033d 05       		.byte	0x5
 11554 033e EB05     		.uleb128 0x2eb
 11555 0340 DF690000 		.4byte	.LASF1038
 11556 0344 05       		.byte	0x5
 11557 0345 EC05     		.uleb128 0x2ec
 11558 0347 CB750000 		.4byte	.LASF1039
 11559 034b 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 271


 11560 034c ED05     		.uleb128 0x2ed
 11561 034e 83990000 		.4byte	.LASF1040
 11562 0352 05       		.byte	0x5
 11563 0353 EE05     		.uleb128 0x2ee
 11564 0355 10680000 		.4byte	.LASF1041
 11565 0359 00       		.byte	0
 11566              		.section	.debug_macro,"G",%progbits,wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370,comdat
 11567              	.Ldebug_macro30:
 11568 0000 0400     		.2byte	0x4
 11569 0002 00       		.byte	0
 11570 0003 05       		.byte	0x5
 11571 0004 60       		.uleb128 0x60
 11572 0005 484C0000 		.4byte	.LASF1043
 11573 0009 05       		.byte	0x5
 11574 000a 7F       		.uleb128 0x7f
 11575 000b E9400000 		.4byte	.LASF1044
 11576 000f 05       		.byte	0x5
 11577 0010 AB01     		.uleb128 0xab
 11578 0012 4E910000 		.4byte	.LASF1045
 11579 0016 05       		.byte	0x5
 11580 0017 B401     		.uleb128 0xb4
 11581 0019 17140000 		.4byte	.LASF1046
 11582 001d 05       		.byte	0x5
 11583 001e BD01     		.uleb128 0xbd
 11584 0020 4B010000 		.4byte	.LASF1047
 11585 0024 05       		.byte	0x5
 11586 0025 C701     		.uleb128 0xc7
 11587 0027 DD660000 		.4byte	.LASF1048
 11588 002b 05       		.byte	0x5
 11589 002c D001     		.uleb128 0xd0
 11590 002e D01C0000 		.4byte	.LASF1049
 11591 0032 05       		.byte	0x5
 11592 0033 D801     		.uleb128 0xd8
 11593 0035 A0040000 		.4byte	.LASF1050
 11594 0039 05       		.byte	0x5
 11595 003a E001     		.uleb128 0xe0
 11596 003c F79D0000 		.4byte	.LASF1051
 11597 0040 05       		.byte	0x5
 11598 0041 E801     		.uleb128 0xe8
 11599 0043 E52A0000 		.4byte	.LASF1052
 11600 0047 05       		.byte	0x5
 11601 0048 F101     		.uleb128 0xf1
 11602 004a 36970000 		.4byte	.LASF1053
 11603 004e 05       		.byte	0x5
 11604 004f F601     		.uleb128 0xf6
 11605 0051 24740000 		.4byte	.LASF1054
 11606 0055 05       		.byte	0x5
 11607 0056 8C02     		.uleb128 0x10c
 11608 0058 4C830000 		.4byte	.LASF1055
 11609 005c 05       		.byte	0x5
 11610 005d AA02     		.uleb128 0x12a
 11611 005f 11070000 		.4byte	.LASF1056
 11612 0063 05       		.byte	0x5
 11613 0064 B502     		.uleb128 0x135
 11614 0066 5A130000 		.4byte	.LASF1057
 11615 006a 05       		.byte	0x5
 11616 006b BD02     		.uleb128 0x13d
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 272


 11617 006d BB300000 		.4byte	.LASF1058
 11618 0071 05       		.byte	0x5
 11619 0072 C402     		.uleb128 0x144
 11620 0074 E14E0000 		.4byte	.LASF1059
 11621 0078 00       		.byte	0
 11622              		.section	.debug_macro,"G",%progbits,wm4.task.h.84.e110bc08aaffa67ce542955b890201b4,comdat
 11623              	.Ldebug_macro31:
 11624 0000 0400     		.2byte	0x4
 11625 0002 00       		.byte	0
 11626 0003 05       		.byte	0x5
 11627 0004 54       		.uleb128 0x54
 11628 0005 E5780000 		.4byte	.LASF1060
 11629 0009 05       		.byte	0x5
 11630 000a 55       		.uleb128 0x55
 11631 000b 83540000 		.4byte	.LASF1061
 11632 000f 05       		.byte	0x5
 11633 0010 56       		.uleb128 0x56
 11634 0011 86380000 		.4byte	.LASF1062
 11635 0015 05       		.byte	0x5
 11636 0016 57       		.uleb128 0x57
 11637 0017 19600000 		.4byte	.LASF1063
 11638 001b 05       		.byte	0x5
 11639 001c B201     		.uleb128 0xb2
 11640 001e 3F150000 		.4byte	.LASF1064
 11641 0022 05       		.byte	0x5
 11642 0023 BC01     		.uleb128 0xbc
 11643 0025 03360000 		.4byte	.LASF1065
 11644 0029 05       		.byte	0x5
 11645 002a CA01     		.uleb128 0xca
 11646 002c FA170000 		.4byte	.LASF1066
 11647 0030 05       		.byte	0x5
 11648 0031 D801     		.uleb128 0xd8
 11649 0033 81760000 		.4byte	.LASF1067
 11650 0037 05       		.byte	0x5
 11651 0038 E201     		.uleb128 0xe2
 11652 003a 0E560000 		.4byte	.LASF1068
 11653 003e 05       		.byte	0x5
 11654 003f EC01     		.uleb128 0xec
 11655 0041 5A120000 		.4byte	.LASF1069
 11656 0045 05       		.byte	0x5
 11657 0046 F101     		.uleb128 0xf1
 11658 0048 E7580000 		.4byte	.LASF1070
 11659 004c 05       		.byte	0x5
 11660 004d F201     		.uleb128 0xf2
 11661 004f 21950000 		.4byte	.LASF1071
 11662 0053 05       		.byte	0x5
 11663 0054 F301     		.uleb128 0xf3
 11664 0056 EB440000 		.4byte	.LASF1072
 11665 005a 05       		.byte	0x5
 11666 005b CA02     		.uleb128 0x14a
 11667 005d FB250000 		.4byte	.LASF1073
 11668 0061 05       		.byte	0x5
 11669 0062 8F03     		.uleb128 0x18f
 11670 0064 41790000 		.4byte	.LASF1074
 11671 0068 00       		.byte	0
 11672              		.section	.debug_macro,"G",%progbits,wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d,comdat
 11673              	.Ldebug_macro32:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 273


 11674 0000 0400     		.2byte	0x4
 11675 0002 00       		.byte	0
 11676 0003 05       		.byte	0x5
 11677 0004 5C       		.uleb128 0x5c
 11678 0005 1B940000 		.4byte	.LASF1076
 11679 0009 05       		.byte	0x5
 11680 000a 5D       		.uleb128 0x5d
 11681 000b A1720000 		.4byte	.LASF1077
 11682 000f 05       		.byte	0x5
 11683 0010 5E       		.uleb128 0x5e
 11684 0011 82470000 		.4byte	.LASF1078
 11685 0015 05       		.byte	0x5
 11686 0016 5F       		.uleb128 0x5f
 11687 0017 FF620000 		.4byte	.LASF1079
 11688 001b 05       		.byte	0x5
 11689 001c 60       		.uleb128 0x60
 11690 001d D0090000 		.4byte	.LASF1080
 11691 0021 05       		.byte	0x5
 11692 0022 61       		.uleb128 0x61
 11693 0023 9C5C0000 		.4byte	.LASF1081
 11694 0027 05       		.byte	0x5
 11695 0028 62       		.uleb128 0x62
 11696 0029 42160000 		.4byte	.LASF1082
 11697 002d 05       		.byte	0x5
 11698 002e 63       		.uleb128 0x63
 11699 002f 65580000 		.4byte	.LASF1083
 11700 0033 05       		.byte	0x5
 11701 0034 65       		.uleb128 0x65
 11702 0035 F5490000 		.4byte	.LASF1084
 11703 0039 05       		.byte	0x5
 11704 003a 66       		.uleb128 0x66
 11705 003b FD4C0000 		.4byte	.LASF1085
 11706 003f 05       		.byte	0x5
 11707 0040 67       		.uleb128 0x67
 11708 0041 F8220000 		.4byte	.LASF1086
 11709 0045 05       		.byte	0x5
 11710 0046 68       		.uleb128 0x68
 11711 0047 CE0A0000 		.4byte	.LASF1087
 11712 004b 05       		.byte	0x5
 11713 004c 69       		.uleb128 0x69
 11714 004d 9D9A0000 		.4byte	.LASF1088
 11715 0051 05       		.byte	0x5
 11716 0052 FA02     		.uleb128 0x17a
 11717 0054 FF6E0000 		.4byte	.LASF1089
 11718 0058 05       		.byte	0x5
 11719 0059 A403     		.uleb128 0x1a4
 11720 005b 6D280000 		.4byte	.LASF1090
 11721 005f 05       		.byte	0x5
 11722 0060 F403     		.uleb128 0x1f4
 11723 0062 AE680000 		.4byte	.LASF1091
 11724 0066 05       		.byte	0x5
 11725 0067 9A04     		.uleb128 0x21a
 11726 0069 AC6B0000 		.4byte	.LASF1092
 11727 006d 05       		.byte	0x5
 11728 006e 9605     		.uleb128 0x296
 11729 0070 B8870000 		.4byte	.LASF1093
 11730 0074 05       		.byte	0x5
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 274


 11731 0075 EC05     		.uleb128 0x2ec
 11732 0077 D1210000 		.4byte	.LASF1094
 11733 007b 05       		.byte	0x5
 11734 007c AB06     		.uleb128 0x32b
 11735 007e 82480000 		.4byte	.LASF1095
 11736 0082 05       		.byte	0x5
 11737 0083 F406     		.uleb128 0x374
 11738 0085 A28F0000 		.4byte	.LASF1096
 11739 0089 05       		.byte	0x5
 11740 008a CA07     		.uleb128 0x3ca
 11741 008c 7B2E0000 		.4byte	.LASF1097
 11742 0090 00       		.byte	0
 11743              		.section	.debug_macro,"G",%progbits,wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95,comdat
 11744              	.Ldebug_macro33:
 11745 0000 0400     		.2byte	0x4
 11746 0002 00       		.byte	0
 11747 0003 05       		.byte	0x5
 11748 0004 43       		.uleb128 0x43
 11749 0005 D5890000 		.4byte	.LASF1098
 11750 0009 05       		.byte	0x5
 11751 000a 58       		.uleb128 0x58
 11752 000b 54380000 		.4byte	.LASF1099
 11753 000f 05       		.byte	0x5
 11754 0010 59       		.uleb128 0x59
 11755 0011 B89F0000 		.4byte	.LASF1100
 11756 0015 00       		.byte	0
 11757              		.section	.debug_line,"",%progbits
 11758              	.Ldebug_line0:
 11759 0000 810B0000 		.section	.debug_str,"MS",%progbits,1
 11759      02006803 
 11759      00000201 
 11759      FB0E0D00 
 11759      01010101 
 11760              	.LASF600:
 11761 0000 5F5F474E 		.ascii	"__GNUCLIKE___SECTION 1\000"
 11761      55434C49 
 11761      4B455F5F 
 11761      5F534543 
 11761      54494F4E 
 11762              	.LASF352:
 11763 0017 5F5F4758 		.ascii	"__GXX_TYPEINFO_EQUALITY_INLINE 0\000"
 11763      585F5459 
 11763      5045494E 
 11763      464F5F45 
 11763      5155414C 
 11764              	.LASF816:
 11765 0038 57494E54 		.ascii	"WINT_MIN (__WINT_MIN__)\000"
 11765      5F4D494E 
 11765      20285F5F 
 11765      57494E54 
 11765      5F4D494E 
 11766              	.LASF157:
 11767 0050 5F5F4445 		.ascii	"__DECIMAL_DIG__ 17\000"
 11767      43494D41 
 11767      4C5F4449 
 11767      475F5F20 
 11767      313700
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 275


 11768              	.LASF395:
 11769 0063 5F5F5356 		.ascii	"__SVID_VISIBLE 1\000"
 11769      49445F56 
 11769      49534942 
 11769      4C452031 
 11769      00
 11770              	.LASF726:
 11771 0074 5F5F696E 		.ascii	"__int20 +2\000"
 11771      74323020 
 11771      2B3200
 11772              	.LASF136:
 11773 007f 5F5F464C 		.ascii	"__FLT_HAS_QUIET_NAN__ 1\000"
 11773      545F4841 
 11773      535F5155 
 11773      4945545F 
 11773      4E414E5F 
 11774              	.LASF1302:
 11775 0097 78596965 		.ascii	"xYieldPending\000"
 11775      6C645065 
 11775      6E64696E 
 11775      6700
 11776              	.LASF184:
 11777 00a5 5F5F4445 		.ascii	"__DEC128_EPSILON__ 1E-33DL\000"
 11777      43313238 
 11777      5F455053 
 11777      494C4F4E 
 11777      5F5F2031 
 11778              	.LASF1120:
 11779 00c0 756E7369 		.ascii	"unsigned char\000"
 11779      676E6564 
 11779      20636861 
 11779      7200
 11780              	.LASF314:
 11781 00ce 5F5F4743 		.ascii	"__GCC_ATOMIC_WCHAR_T_LOCK_FREE 2\000"
 11781      435F4154 
 11781      4F4D4943 
 11781      5F574348 
 11781      41525F54 
 11782              	.LASF306:
 11783 00ef 5F5F4348 		.ascii	"__CHAR_UNSIGNED__ 1\000"
 11783      41525F55 
 11783      4E534947 
 11783      4E45445F 
 11783      5F203100 
 11784              	.LASF1118:
 11785 0103 73697A65 		.ascii	"size_t\000"
 11785      5F7400
 11786              	.LASF576:
 11787 010a 5F474C4F 		.ascii	"_GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)\000"
 11787      42414C5F 
 11787      41544558 
 11787      49542028 
 11787      5F474C4F 
 11788              	.LASF941:
 11789 0132 74726163 		.ascii	"traceTASK_SWITCHED_IN() \000"
 11789      65544153 
 11789      4B5F5357 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 276


 11789      49544348 
 11789      45445F49 
 11790              	.LASF1047:
 11791 014b 6C697374 		.ascii	"listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( ( pxLi"
 11791      5345545F 
 11791      4C495354 
 11791      5F495445 
 11791      4D5F5641 
 11792 017e 73744974 		.ascii	"stItem )->xItemValue = ( xValue ) )\000"
 11792      656D2029 
 11792      2D3E7849 
 11792      74656D56 
 11792      616C7565 
 11793              	.LASF186:
 11794 01a2 5F5F5346 		.ascii	"__SFRACT_FBIT__ 7\000"
 11794      52414354 
 11794      5F464249 
 11794      545F5F20 
 11794      3700
 11795              	.LASF1129:
 11796 01b4 73697A65 		.ascii	"sizetype\000"
 11796      74797065 
 11796      00
 11797              	.LASF79:
 11798 01bd 5F5F494E 		.ascii	"__INTMAX_C(c) c ## LL\000"
 11798      544D4158 
 11798      5F432863 
 11798      29206320 
 11798      2323204C 
 11799              	.LASF403:
 11800 01d3 5F524541 		.ascii	"_READ_WRITE_BUFSIZE_TYPE int\000"
 11800      445F5752 
 11800      4954455F 
 11800      42554653 
 11800      495A455F 
 11801              	.LASF840:
 11802 01f0 636F6E66 		.ascii	"configIDLE_SHOULD_YIELD 0\000"
 11802      69674944 
 11802      4C455F53 
 11802      484F554C 
 11802      445F5949 
 11803              	.LASF775:
 11804 020a 494E5431 		.ascii	"INT16_MIN (-__INT16_MAX__ - 1)\000"
 11804      365F4D49 
 11804      4E20282D 
 11804      5F5F494E 
 11804      5431365F 
 11805              	.LASF258:
 11806 0229 5F5F4C4C 		.ascii	"__LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)\000"
 11806      41434355 
 11806      4D5F4D49 
 11806      4E5F5F20 
 11806      282D3058 
 11807              	.LASF250:
 11808 0250 5F5F4C41 		.ascii	"__LACCUM_EPSILON__ 0x1P-31LK\000"
 11808      4343554D 
 11808      5F455053 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 277


 11808      494C4F4E 
 11808      5F5F2030 
 11809              	.LASF76:
 11810 026d 5F5F5054 		.ascii	"__PTRDIFF_MAX__ 0x7fffffff\000"
 11810      52444946 
 11810      465F4D41 
 11810      585F5F20 
 11810      30783766 
 11811              	.LASF423:
 11812 0288 5F4C4F4E 		.ascii	"_LONG_DOUBLE long double\000"
 11812      475F444F 
 11812      55424C45 
 11812      206C6F6E 
 11812      6720646F 
 11813              	.LASF1192:
 11814 02a1 75735374 		.ascii	"usStackDepth\000"
 11814      61636B44 
 11814      65707468 
 11814      00
 11815              	.LASF751:
 11816 02ae 5F55494E 		.ascii	"_UINT32_T_DECLARED \000"
 11816      5433325F 
 11816      545F4445 
 11816      434C4152 
 11816      45442000 
 11817              	.LASF78:
 11818 02c2 5F5F494E 		.ascii	"__INTMAX_MAX__ 0x7fffffffffffffffLL\000"
 11818      544D4158 
 11818      5F4D4158 
 11818      5F5F2030 
 11818      78376666 
 11819              	.LASF171:
 11820 02e6 5F5F4445 		.ascii	"__DEC32_SUBNORMAL_MIN__ 0.000001E-95DF\000"
 11820      4333325F 
 11820      5355424E 
 11820      4F524D41 
 11820      4C5F4D49 
 11821              	.LASF275:
 11822 030d 5F5F5451 		.ascii	"__TQ_IBIT__ 0\000"
 11822      5F494249 
 11822      545F5F20 
 11822      3000
 11823              	.LASF750:
 11824 031b 5F494E54 		.ascii	"_INT32_T_DECLARED \000"
 11824      33325F54 
 11824      5F444543 
 11824      4C415245 
 11824      442000
 11825              	.LASF1022:
 11826 032e 636F6E66 		.ascii	"configENABLE_BACKWARD_COMPATIBILITY 1\000"
 11826      6967454E 
 11826      41424C45 
 11826      5F424143 
 11826      4B574152 
 11827              	.LASF536:
 11828 0354 5F524545 		.ascii	"_REENT_SIGNAL_SIZE 24\000"
 11828      4E545F53 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 278


 11828      49474E41 
 11828      4C5F5349 
 11828      5A452032 
 11829              	.LASF845:
 11830 036a 636F6E66 		.ascii	"configUSE_ALTERNATIVE_API 0\000"
 11830      69675553 
 11830      455F414C 
 11830      5445524E 
 11830      41544956 
 11831              	.LASF572:
 11832 0386 5F4B6D61 		.ascii	"_Kmax (sizeof (size_t) << 3)\000"
 11832      78202873 
 11832      697A656F 
 11832      66202873 
 11832      697A655F 
 11833              	.LASF11:
 11834 03a3 5F5F4154 		.ascii	"__ATOMIC_CONSUME 1\000"
 11834      4F4D4943 
 11834      5F434F4E 
 11834      53554D45 
 11834      203100
 11835              	.LASF251:
 11836 03b6 5F5F554C 		.ascii	"__ULACCUM_FBIT__ 32\000"
 11836      41434355 
 11836      4D5F4642 
 11836      49545F5F 
 11836      20333200 
 11837              	.LASF1232:
 11838 03ca 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11838      6B476574 
 11838      5469636B 
 11838      436F756E 
 11838      7446726F 
 11839              	.LASF238:
 11840 03e3 5F5F4143 		.ascii	"__ACCUM_MIN__ (-0X1P15K-0X1P15K)\000"
 11840      43554D5F 
 11840      4D494E5F 
 11840      5F20282D 
 11840      30583150 
 11841              	.LASF944:
 11842 0404 74726163 		.ascii	"traceLOW_POWER_IDLE_END() \000"
 11842      654C4F57 
 11842      5F504F57 
 11842      45525F49 
 11842      444C455F 
 11843              	.LASF1168:
 11844 041f 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11844      72795265 
 11844      67696F6E 
 11844      5F7400
 11845              	.LASF598:
 11846 042e 5F5F474E 		.ascii	"__GNUCLIKE___TYPEOF 1\000"
 11846      55434C49 
 11846      4B455F5F 
 11846      5F545950 
 11846      454F4620 
 11847              	.LASF997:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 279


 11848 0444 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(xEventGroup,ux"
 11848      65455645 
 11848      4E545F47 
 11848      524F5550 
 11848      5F434C45 
 11849 0477 42697473 		.ascii	"BitsToClear) \000"
 11849      546F436C 
 11849      65617229 
 11849      2000
 11850              	.LASF1182:
 11851 0485 78457665 		.ascii	"xEventListItem\000"
 11851      6E744C69 
 11851      73744974 
 11851      656D00
 11852              	.LASF1117:
 11853 0494 7369676E 		.ascii	"signed char\000"
 11853      65642063 
 11853      68617200 
 11854              	.LASF1050:
 11855 04a0 6C697374 		.ascii	"listGET_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd"
 11855      4745545F 
 11855      48454144 
 11855      5F454E54 
 11855      52592870 
 11856 04d3 20292E70 		.ascii	" ).pxNext )\000"
 11856      784E6578 
 11856      74202900 
 11857              	.LASF1159:
 11858 04df 65546173 		.ascii	"eTaskState\000"
 11858      6B537461 
 11858      746500
 11859              	.LASF15:
 11860 04ea 5F5F5349 		.ascii	"__SIZEOF_LONG_LONG__ 8\000"
 11860      5A454F46 
 11860      5F4C4F4E 
 11860      475F4C4F 
 11860      4E475F5F 
 11861              	.LASF1108:
 11862 0501 74736B53 		.ascii	"tskSUSPENDED_CHAR ( 'S' )\000"
 11862      55535045 
 11862      4E444544 
 11862      5F434841 
 11862      52202820 
 11863              	.LASF142:
 11864 051b 5F5F4442 		.ascii	"__DBL_MAX_10_EXP__ 308\000"
 11864      4C5F4D41 
 11864      585F3130 
 11864      5F455850 
 11864      5F5F2033 
 11865              	.LASF1248:
 11866 0532 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11866      6B506C61 
 11866      63654F6E 
 11866      556E6F72 
 11866      64657265 
 11867              	.LASF675:
 11868 0551 5F5F5243 		.ascii	"__RCSID_SOURCE(s) struct __hack\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 280


 11868      5349445F 
 11868      534F5552 
 11868      43452873 
 11868      29207374 
 11869              	.LASF198:
 11870 0571 5F5F4652 		.ascii	"__FRACT_MIN__ (-0.5R-0.5R)\000"
 11870      4143545F 
 11870      4D494E5F 
 11870      5F20282D 
 11870      302E3552 
 11871              	.LASF264:
 11872 058c 5F5F554C 		.ascii	"__ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK\000"
 11872      4C414343 
 11872      554D5F4D 
 11872      41585F5F 
 11872      20305846 
 11873              	.LASF863:
 11874 05b8 636F6E66 		.ascii	"configNET_MASK1 255\000"
 11874      69674E45 
 11874      545F4D41 
 11874      534B3120 
 11874      32353500 
 11875              	.LASF234:
 11876 05cc 5F5F5553 		.ascii	"__USACCUM_MAX__ 0XFFFFP-8UHK\000"
 11876      41434355 
 11876      4D5F4D41 
 11876      585F5F20 
 11876      30584646 
 11877              	.LASF1236:
 11878 05e9 70756C54 		.ascii	"pulTotalRunTime\000"
 11878      6F74616C 
 11878      52756E54 
 11878      696D6500 
 11879              	.LASF767:
 11880 05f9 494E5450 		.ascii	"INTPTR_MAX (__INTPTR_MAX__)\000"
 11880      54525F4D 
 11880      41582028 
 11880      5F5F494E 
 11880      54505452 
 11881              	.LASF271:
 11882 0615 5F5F5351 		.ascii	"__SQ_IBIT__ 0\000"
 11882      5F494249 
 11882      545F5F20 
 11882      3000
 11883              	.LASF25:
 11884 0623 5F5F4F52 		.ascii	"__ORDER_PDP_ENDIAN__ 3412\000"
 11884      4445525F 
 11884      5044505F 
 11884      454E4449 
 11884      414E5F5F 
 11885              	.LASF29:
 11886 063d 5F5F5349 		.ascii	"__SIZE_TYPE__ unsigned int\000"
 11886      5A455F54 
 11886      5950455F 
 11886      5F20756E 
 11886      7369676E 
 11887              	.LASF174:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 281


 11888 0658 5F5F4445 		.ascii	"__DEC64_MAX_EXP__ 385\000"
 11888      4336345F 
 11888      4D41585F 
 11888      4558505F 
 11888      5F203338 
 11889              	.LASF827:
 11890 066e 5F474343 		.ascii	"_GCC_WRAP_STDINT_H \000"
 11890      5F575241 
 11890      505F5354 
 11890      44494E54 
 11890      5F482000 
 11891              	.LASF134:
 11892 0682 5F5F464C 		.ascii	"__FLT_HAS_DENORM__ 1\000"
 11892      545F4841 
 11892      535F4445 
 11892      4E4F524D 
 11892      5F5F2031 
 11893              	.LASF38:
 11894 0697 5F5F494E 		.ascii	"__INT8_TYPE__ signed char\000"
 11894      54385F54 
 11894      5950455F 
 11894      5F207369 
 11894      676E6564 
 11895              	.LASF334:
 11896 06b1 5F5F4152 		.ascii	"__ARM_ARCH_PROFILE 77\000"
 11896      4D5F4152 
 11896      43485F50 
 11896      524F4649 
 11896      4C452037 
 11897              	.LASF1160:
 11898 06c7 7854494D 		.ascii	"xTIME_OUT\000"
 11898      455F4F55 
 11898      5400
 11899              	.LASF417:
 11900 06d1 5F455846 		.ascii	"_EXFUN(name,proto) name proto\000"
 11900      554E286E 
 11900      616D652C 
 11900      70726F74 
 11900      6F29206E 
 11901              	.LASF1251:
 11902 06ef 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 11902      6B52656D 
 11902      6F766546 
 11902      726F6D55 
 11902      6E6F7264 
 11903              	.LASF1056:
 11904 0711 6C697374 		.ascii	"listGET_OWNER_OF_HEAD_ENTRY(pxList) ( (&( ( pxList "
 11904      4745545F 
 11904      4F574E45 
 11904      525F4F46 
 11904      5F484541 
 11905 0744 292D3E78 		.ascii	")->xListEnd ))->pxNext->pvOwner )\000"
 11905      4C697374 
 11905      456E6420 
 11905      29292D3E 
 11905      70784E65 
 11906              	.LASF1298:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 282


 11907 0766 78546963 		.ascii	"xTickCount\000"
 11907      6B436F75 
 11907      6E7400
 11908              	.LASF1186:
 11909 0771 75785461 		.ascii	"uxTaskNumber\000"
 11909      736B4E75 
 11909      6D626572 
 11909      00
 11910              	.LASF151:
 11911 077e 5F5F4C44 		.ascii	"__LDBL_MANT_DIG__ 53\000"
 11911      424C5F4D 
 11911      414E545F 
 11911      4449475F 
 11911      5F203533 
 11912              	.LASF796:
 11913 0793 494E545F 		.ascii	"INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)\000"
 11913      46415354 
 11913      31365F4D 
 11913      494E2028 
 11913      2D5F5F49 
 11914              	.LASF1270:
 11915 07bc 70784C69 		.ascii	"pxList\000"
 11915      737400
 11916              	.LASF919:
 11917 07c3 706F7274 		.ascii	"portUSING_MPU_WRAPPERS 0\000"
 11917      5553494E 
 11917      475F4D50 
 11917      555F5752 
 11917      41505045 
 11918              	.LASF101:
 11919 07dc 5F5F5549 		.ascii	"__UINT8_C(c) c\000"
 11919      4E54385F 
 11919      43286329 
 11919      206300
 11920              	.LASF39:
 11921 07eb 5F5F494E 		.ascii	"__INT16_TYPE__ short int\000"
 11921      5431365F 
 11921      54595045 
 11921      5F5F2073 
 11921      686F7274 
 11922              	.LASF632:
 11923 0804 5F5F616C 		.ascii	"__aligned(x) __attribute__((__aligned__(x)))\000"
 11923      69676E65 
 11923      64287829 
 11923      205F5F61 
 11923      74747269 
 11924              	.LASF685:
 11925 0831 5F5F6C6F 		.ascii	"__locks_exclusive(...) __lock_annotate(exclusive_lo"
 11925      636B735F 
 11925      6578636C 
 11925      75736976 
 11925      65282E2E 
 11926 0864 636B5F66 		.ascii	"ck_function(__VA_ARGS__))\000"
 11926      756E6374 
 11926      696F6E28 
 11926      5F5F5641 
 11926      5F415247 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 283


 11927              	.LASF1158:
 11928 087e 6544656C 		.ascii	"eDeleted\000"
 11928      65746564 
 11928      00
 11929              	.LASF914:
 11930 0887 706F7274 		.ascii	"portBYTE_ALIGNMENT_MASK ( 0x0007U )\000"
 11930      42595445 
 11930      5F414C49 
 11930      474E4D45 
 11930      4E545F4D 
 11931              	.LASF939:
 11932 08ab 74726163 		.ascii	"traceSTART() \000"
 11932      65535441 
 11932      52542829 
 11932      2000
 11933              	.LASF254:
 11934 08b9 5F5F554C 		.ascii	"__ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK\000"
 11934      41434355 
 11934      4D5F4D41 
 11934      585F5F20 
 11934      30584646 
 11935              	.LASF1184:
 11936 08e3 70785374 		.ascii	"pxStack\000"
 11936      61636B00 
 11937              	.LASF589:
 11938 08eb 5F5F756E 		.ascii	"__unbounded \000"
 11938      626F756E 
 11938      64656420 
 11938      00
 11939              	.LASF830:
 11940 08f8 636F6E66 		.ascii	"configUSE_IDLE_HOOK 0\000"
 11940      69675553 
 11940      455F4944 
 11940      4C455F48 
 11940      4F4F4B20 
 11941              	.LASF731:
 11942 090e 5F5F494E 		.ascii	"__INT8 \"hh\"\000"
 11942      54382022 
 11942      68682200 
 11943              	.LASF307:
 11944 091a 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1\000"
 11944      435F4841 
 11944      56455F53 
 11944      594E435F 
 11944      434F4D50 
 11945              	.LASF779:
 11946 093f 494E545F 		.ascii	"INT_LEAST16_MAX (__INT_LEAST16_MAX__)\000"
 11946      4C454153 
 11946      5431365F 
 11946      4D415820 
 11946      285F5F49 
 11947              	.LASF860:
 11948 0965 636F6E66 		.ascii	"configIP_ADDR2 0\000"
 11948      69674950 
 11948      5F414444 
 11948      52322030 
 11948      00
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 284


 11949              	.LASF102:
 11950 0976 5F5F5549 		.ascii	"__UINT_LEAST16_MAX__ 0xffff\000"
 11950      4E545F4C 
 11950      45415354 
 11950      31365F4D 
 11950      41585F5F 
 11951              	.LASF1:
 11952 0992 5F5F5354 		.ascii	"__STDC_HOSTED__ 1\000"
 11952      44435F48 
 11952      4F535445 
 11952      445F5F20 
 11952      3100
 11953              	.LASF221:
 11954 09a4 5F5F554C 		.ascii	"__ULLFRACT_FBIT__ 64\000"
 11954      4C465241 
 11954      43545F46 
 11954      4249545F 
 11954      5F203634 
 11955              	.LASF371:
 11956 09b9 5F4C4442 		.ascii	"_LDBL_EQ_DBL 1\000"
 11956      4C5F4551 
 11956      5F44424C 
 11956      203100
 11957              	.LASF1170:
 11958 09c8 7848616E 		.ascii	"xHandle\000"
 11958      646C6500 
 11959              	.LASF1080:
 11960 09d0 746D7243 		.ascii	"tmrCOMMAND_RESET ( ( BaseT_t ) 2 )\000"
 11960      4F4D4D41 
 11960      4E445F52 
 11960      45534554 
 11960      20282028 
 11961              	.LASF552:
 11962 09f3 5F524545 		.ascii	"_REENT_MP_RESULT(ptr) ((ptr)->_result)\000"
 11962      4E545F4D 
 11962      505F5245 
 11962      53554C54 
 11962      28707472 
 11963              	.LASF57:
 11964 0a1a 5F5F494E 		.ascii	"__INT_FAST64_TYPE__ long long int\000"
 11964      545F4641 
 11964      53543634 
 11964      5F545950 
 11964      455F5F20 
 11965              	.LASF32:
 11966 0a3c 5F5F5749 		.ascii	"__WINT_TYPE__ unsigned int\000"
 11966      4E545F54 
 11966      5950455F 
 11966      5F20756E 
 11966      7369676E 
 11967              	.LASF559:
 11968 0a57 5F524545 		.ascii	"_REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok"
 11968      4E545F53 
 11968      5452544F 
 11968      4B5F4C41 
 11968      53542870 
 11969 0a8a 5F6C6173 		.ascii	"_last)\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 285


 11969      742900
 11970              	.LASF1286:
 11971 0a91 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11971      736B4765 
 11971      744E756D 
 11971      6265724F 
 11971      66546173 
 11972              	.LASF961:
 11973 0aa8 74726163 		.ascii	"traceQUEUE_SEND(pxQueue) \000"
 11973      65515545 
 11973      55455F53 
 11973      454E4428 
 11973      70785175 
 11974              	.LASF433:
 11975 0ac2 5F5F5349 		.ascii	"__SIZE_T__ \000"
 11975      5A455F54 
 11975      5F5F2000 
 11976              	.LASF1087:
 11977 0ace 746D7243 		.ascii	"tmrCOMMAND_STOP_FROM_ISR ( ( BaseT_t ) 8 )\000"
 11977      4F4D4D41 
 11977      4E445F53 
 11977      544F505F 
 11977      46524F4D 
 11978              	.LASF811:
 11979 0af9 50545244 		.ascii	"PTRDIFF_MAX (__PTRDIFF_MAX__)\000"
 11979      4946465F 
 11979      4D415820 
 11979      285F5F50 
 11979      54524449 
 11980              	.LASF994:
 11981 0b17 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_BLOCK(xEventGroup,uxBits"
 11981      65455645 
 11981      4E545F47 
 11981      524F5550 
 11981      5F574149 
 11982 0b4a 546F5761 		.ascii	"ToWaitFor) \000"
 11982      6974466F 
 11982      72292000 
 11983              	.LASF1284:
 11984 0b56 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11984      6B507269 
 11984      6F726974 
 11984      79446973 
 11984      696E6865 
 11985              	.LASF1036:
 11986 0b6e 70645441 		.ascii	"pdTASK_HOOK_CODE TaskHookFunction_t\000"
 11986      534B5F48 
 11986      4F4F4B5F 
 11986      434F4445 
 11986      20546173 
 11987              	.LASF304:
 11988 0b92 5F5F474E 		.ascii	"__GNUC_GNU_INLINE__ 1\000"
 11988      55435F47 
 11988      4E555F49 
 11988      4E4C494E 
 11988      455F5F20 
 11989              	.LASF917:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 286


 11990 0ba8 50524956 		.ascii	"PRIVILEGED_FUNCTION \000"
 11990      494C4547 
 11990      45445F46 
 11990      554E4354 
 11990      494F4E20 
 11991              	.LASF946:
 11992 0bbd 74726163 		.ascii	"traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInh"
 11992      65544153 
 11992      4B5F5052 
 11992      494F5249 
 11992      54595F49 
 11993 0bf0 65726974 		.ascii	"eritedPriority) \000"
 11993      65645072 
 11993      696F7269 
 11993      74792920 
 11993      00
 11994              	.LASF555:
 11995 0c01 5F524545 		.ascii	"_REENT_MP_FREELIST(ptr) ((ptr)->_freelist)\000"
 11995      4E545F4D 
 11995      505F4652 
 11995      45454C49 
 11995      53542870 
 11996              	.LASF1075:
 11997 0c2c 54494D45 		.ascii	"TIMERS_H \000"
 11997      52535F48 
 11997      2000
 11998              	.LASF581:
 11999 0c36 5F5F4153 		.ascii	"__ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) "
 11999      4D4E414D 
 11999      4528636E 
 11999      616D6529 
 11999      205F5F58 
 12000 0c69 636E616D 		.ascii	"cname\000"
 12000      6500
 12001              	.LASF466:
 12002 0c6f 5F5F6E65 		.ascii	"__need_wchar_t\000"
 12002      65645F77 
 12002      63686172 
 12002      5F7400
 12003              	.LASF649:
 12004 0c7e 5F5F7265 		.ascii	"__result_use_check __attribute__((__warn_unused_res"
 12004      73756C74 
 12004      5F757365 
 12004      5F636865 
 12004      636B205F 
 12005 0cb1 756C745F 		.ascii	"ult__))\000"
 12005      5F292900 
 12006              	.LASF937:
 12007 0cb9 706F7274 		.ascii	"portSETUP_TCB(pxTCB) ( void ) pxTCB\000"
 12007      53455455 
 12007      505F5443 
 12007      42287078 
 12007      54434229 
 12008              	.LASF504:
 12009 0cdd 5F5F6C6F 		.ascii	"__lock_close_recursive(lock) (_CAST_VOID 0)\000"
 12009      636B5F63 
 12009      6C6F7365 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 287


 12009      5F726563 
 12009      75727369 
 12010              	.LASF982:
 12011 0d09 74726163 		.ascii	"traceTASK_INCREMENT_TICK(xTickCount) \000"
 12011      65544153 
 12011      4B5F494E 
 12011      4352454D 
 12011      454E545F 
 12012              	.LASF577:
 12013 0d2f 5F535953 		.ascii	"_SYS_CDEFS_H_ \000"
 12013      5F434445 
 12013      46535F48 
 12013      5F2000
 12014              	.LASF479:
 12015 0d3e 5F425344 		.ascii	"_BSD_PTRDIFF_T_ \000"
 12015      5F505452 
 12015      44494646 
 12015      5F545F20 
 12015      00
 12016              	.LASF776:
 12017 0d4f 494E5431 		.ascii	"INT16_MAX (__INT16_MAX__)\000"
 12017      365F4D41 
 12017      5820285F 
 12017      5F494E54 
 12017      31365F4D 
 12018              	.LASF291:
 12019 0d69 5F5F4441 		.ascii	"__DA_IBIT__ 32\000"
 12019      5F494249 
 12019      545F5F20 
 12019      333200
 12020              	.LASF211:
 12021 0d78 5F5F554C 		.ascii	"__ULFRACT_FBIT__ 32\000"
 12021      46524143 
 12021      545F4642 
 12021      49545F5F 
 12021      20333200 
 12022              	.LASF1104:
 12023 0d8c 74736B53 		.ascii	"tskSTACK_FILL_BYTE ( 0xa5U )\000"
 12023      5441434B 
 12023      5F46494C 
 12023      4C5F4259 
 12023      54452028 
 12024              	.LASF421:
 12025 0da9 5F444546 		.ascii	"_DEFUN_VOID(name) name(_NOARGS)\000"
 12025      554E5F56 
 12025      4F494428 
 12025      6E616D65 
 12025      29206E61 
 12026              	.LASF448:
 12027 0dc9 5F5F7369 		.ascii	"__size_t \000"
 12027      7A655F74 
 12027      2000
 12028              	.LASF588:
 12029 0dd3 5F5F626F 		.ascii	"__bounded \000"
 12029      756E6465 
 12029      642000
 12030              	.LASF764:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 288


 12031 0dde 5F5F696E 		.ascii	"__int_fast32_t_defined 1\000"
 12031      745F6661 
 12031      73743332 
 12031      5F745F64 
 12031      6566696E 
 12032              	.LASF1178:
 12033 0df7 5461736B 		.ascii	"TaskStatus_t\000"
 12033      53746174 
 12033      75735F74 
 12033      00
 12034              	.LASF1221:
 12035 0e04 78546173 		.ascii	"xTaskToSuspend\000"
 12035      6B546F53 
 12035      75737065 
 12035      6E6400
 12036              	.LASF986:
 12037 0e13 74726163 		.ascii	"traceTIMER_EXPIRED(pxTimer) \000"
 12037      6554494D 
 12037      45525F45 
 12037      58504952 
 12037      45442870 
 12038              	.LASF1260:
 12039 0e30 75784861 		.ascii	"uxHandle\000"
 12039      6E646C65 
 12039      00
 12040              	.LASF819:
 12041 0e39 494E5431 		.ascii	"INT16_C(x) __INT16_C(x)\000"
 12041      365F4328 
 12041      7829205F 
 12041      5F494E54 
 12041      31365F43 
 12042              	.LASF190:
 12043 0e51 5F5F5346 		.ascii	"__SFRACT_EPSILON__ 0x1P-7HR\000"
 12043      52414354 
 12043      5F455053 
 12043      494C4F4E 
 12043      5F5F2030 
 12044              	.LASF619:
 12045 0e6d 5F5F434F 		.ascii	"__CONCAT1(x,y) x ## y\000"
 12045      4E434154 
 12045      3128782C 
 12045      79292078 
 12045      20232320 
 12046              	.LASF437:
 12047 0e83 5F545F53 		.ascii	"_T_SIZE \000"
 12047      495A4520 
 12047      00
 12048              	.LASF97:
 12049 0e8c 5F5F494E 		.ascii	"__INT32_C(c) c ## L\000"
 12049      5433325F 
 12049      43286329 
 12049      20632023 
 12049      23204C00 
 12050              	.LASF280:
 12051 0ea0 5F5F5553 		.ascii	"__USQ_FBIT__ 32\000"
 12051      515F4642 
 12051      49545F5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 289


 12051      20333200 
 12052              	.LASF24:
 12053 0eb0 5F5F4F52 		.ascii	"__ORDER_BIG_ENDIAN__ 4321\000"
 12053      4445525F 
 12053      4249475F 
 12053      454E4449 
 12053      414E5F5F 
 12054              	.LASF858:
 12055 0eca 636F6E66 		.ascii	"configIP_ADDR0 192\000"
 12055      69674950 
 12055      5F414444 
 12055      52302031 
 12055      393200
 12056              	.LASF270:
 12057 0edd 5F5F5351 		.ascii	"__SQ_FBIT__ 31\000"
 12057      5F464249 
 12057      545F5F20 
 12057      333100
 12058              	.LASF1214:
 12059 0eec 75785265 		.ascii	"uxReturn\000"
 12059      7475726E 
 12059      00
 12060              	.LASF305:
 12061 0ef5 5F5F4E4F 		.ascii	"__NO_INLINE__ 1\000"
 12061      5F494E4C 
 12061      494E455F 
 12061      5F203100 
 12062              	.LASF769:
 12063 0f05 494E5438 		.ascii	"INT8_MIN (-__INT8_MAX__ - 1)\000"
 12063      5F4D494E 
 12063      20282D5F 
 12063      5F494E54 
 12063      385F4D41 
 12064              	.LASF1140:
 12065 0f22 70784E65 		.ascii	"pxNext\000"
 12065      787400
 12066              	.LASF748:
 12067 0f29 5F55494E 		.ascii	"_UINT16_T_DECLARED \000"
 12067      5431365F 
 12067      545F4445 
 12067      434C4152 
 12067      45442000 
 12068              	.LASF1114:
 12069 0f3d 70727647 		.ascii	"prvGetTCBFromHandle(pxHandle) ( ( ( pxHandle ) == N"
 12069      65745443 
 12069      4246726F 
 12069      6D48616E 
 12069      646C6528 
 12070 0f70 554C4C20 		.ascii	"ULL ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( px"
 12070      29203F20 
 12070      28205443 
 12070      425F7420 
 12070      2A202920 
 12071 0fa3 48616E64 		.ascii	"Handle ) )\000"
 12071      6C652029 
 12071      202900
 12072              	.LASF1007:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 290


 12073 0fae 706F7274 		.ascii	"portYIELD_WITHIN_API portYIELD\000"
 12073      5949454C 
 12073      445F5749 
 12073      5448494E 
 12073      5F415049 
 12074              	.LASF278:
 12075 0fcd 5F5F5548 		.ascii	"__UHQ_FBIT__ 16\000"
 12075      515F4642 
 12075      49545F5F 
 12075      20313600 
 12076              	.LASF1198:
 12077 0fdd 70784E65 		.ascii	"pxNewTCB\000"
 12077      77544342 
 12077      00
 12078              	.LASF534:
 12079 0fe6 5F524545 		.ascii	"_REENT_EMERGENCY_SIZE 25\000"
 12079      4E545F45 
 12079      4D455247 
 12079      454E4359 
 12079      5F53495A 
 12080              	.LASF933:
 12081 0fff 494E434C 		.ascii	"INCLUDE_xTaskGetSchedulerState 0\000"
 12081      5544455F 
 12081      78546173 
 12081      6B476574 
 12081      53636865 
 12082              	.LASF861:
 12083 1020 636F6E66 		.ascii	"configIP_ADDR3 201\000"
 12083      69674950 
 12083      5F414444 
 12083      52332032 
 12083      303100
 12084              	.LASF669:
 12085 1033 5F5F7765 		.ascii	"__weak_reference(sym,alias) __asm__(\".weak \" #ali"
 12085      616B5F72 
 12085      65666572 
 12085      656E6365 
 12085      2873796D 
 12086 1064 6173293B 		.ascii	"as); __asm__(\".equ \" #alias \", \" #sym)\000"
 12086      205F5F61 
 12086      736D5F5F 
 12086      28222E65 
 12086      71752022 
 12087              	.LASF1305:
 12088 108b 75785363 		.ascii	"uxSchedulerSuspended\000"
 12088      68656475 
 12088      6C657253 
 12088      75737065 
 12088      6E646564 
 12089              	.LASF112:
 12090 10a0 5F5F5549 		.ascii	"__UINT_FAST8_MAX__ 0xffffffffU\000"
 12090      4E545F46 
 12090      41535438 
 12090      5F4D4158 
 12090      5F5F2030 
 12091              	.LASF170:
 12092 10bf 5F5F4445 		.ascii	"__DEC32_EPSILON__ 1E-6DF\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 291


 12092      4333325F 
 12092      45505349 
 12092      4C4F4E5F 
 12092      5F203145 
 12093              	.LASF591:
 12094 10d8 5F5F6861 		.ascii	"__has_extension __has_feature\000"
 12094      735F6578 
 12094      74656E73 
 12094      696F6E20 
 12094      5F5F6861 
 12095              	.LASF467:
 12096 10f6 4E554C4C 		.ascii	"NULL\000"
 12096      00
 12097              	.LASF541:
 12098 10fb 5F524545 		.ascii	"_REENT_CHECK_MP(ptr) \000"
 12098      4E545F43 
 12098      4845434B 
 12098      5F4D5028 
 12098      70747229 
 12099              	.LASF247:
 12100 1111 5F5F4C41 		.ascii	"__LACCUM_IBIT__ 32\000"
 12100      4343554D 
 12100      5F494249 
 12100      545F5F20 
 12100      333200
 12101              	.LASF442:
 12102 1124 5F53495A 		.ascii	"_SIZE_T_DEFINED \000"
 12102      455F545F 
 12102      44454649 
 12102      4E454420 
 12102      00
 12103              	.LASF1119:
 12104 1135 5F5F7569 		.ascii	"__uint8_t\000"
 12104      6E74385F 
 12104      7400
 12105              	.LASF287:
 12106 113f 5F5F4841 		.ascii	"__HA_IBIT__ 8\000"
 12106      5F494249 
 12106      545F5F20 
 12106      3800
 12107              	.LASF358:
 12108 114d 5F5F4E45 		.ascii	"__NEWLIB_H__ 1\000"
 12108      574C4942 
 12108      5F485F5F 
 12108      203100
 12109              	.LASF1175:
 12110 115c 75784261 		.ascii	"uxBasePriority\000"
 12110      73655072 
 12110      696F7269 
 12110      747900
 12111              	.LASF344:
 12112 116b 5F5F5646 		.ascii	"__VFP_FP__ 1\000"
 12112      505F4650 
 12112      5F5F2031 
 12112      00
 12113              	.LASF741:
 12114 1178 5F5F4C45 		.ascii	"__LEAST32 \"l\"\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 292


 12114      41535433 
 12114      3220226C 
 12114      2200
 12115              	.LASF218:
 12116 1186 5F5F4C4C 		.ascii	"__LLFRACT_MIN__ (-0.5LLR-0.5LLR)\000"
 12116      46524143 
 12116      545F4D49 
 12116      4E5F5F20 
 12116      282D302E 
 12117              	.LASF1188:
 12118 11a7 74736B54 		.ascii	"tskTCB\000"
 12118      434200
 12119              	.LASF398:
 12120 11ae 5F5F5241 		.ascii	"__RAND_MAX\000"
 12120      4E445F4D 
 12120      415800
 12121              	.LASF1020:
 12122 11b9 6D74434F 		.ascii	"mtCOVERAGE_TEST_MARKER() \000"
 12122      56455241 
 12122      47455F54 
 12122      4553545F 
 12122      4D41524B 
 12123              	.LASF113:
 12124 11d3 5F5F5549 		.ascii	"__UINT_FAST16_MAX__ 0xffffffffU\000"
 12124      4E545F46 
 12124      41535431 
 12124      365F4D41 
 12124      585F5F20 
 12125              	.LASF790:
 12126 11f3 494E545F 		.ascii	"INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)\000"
 12126      4C454153 
 12126      5436345F 
 12126      4D494E20 
 12126      282D5F5F 
 12127              	.LASF428:
 12128 121e 5F4E4F49 		.ascii	"_NOINLINE_STATIC _NOINLINE static\000"
 12128      4E4C494E 
 12128      455F5354 
 12128      41544943 
 12128      205F4E4F 
 12129              	.LASF116:
 12130 1240 5F5F494E 		.ascii	"__INTPTR_MAX__ 0x7fffffff\000"
 12130      54505452 
 12130      5F4D4158 
 12130      5F5F2030 
 12130      78376666 
 12131              	.LASF1069:
 12132 125a 7461736B 		.ascii	"taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()\000"
 12132      454E4142 
 12132      4C455F49 
 12132      4E544552 
 12132      52555054 
 12133              	.LASF602:
 12134 128a 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_CONSTANT_P 1\000"
 12134      55434C49 
 12134      4B455F42 
 12134      55494C54 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 293


 12134      494E5F43 
 12135              	.LASF1026:
 12136 12aa 78517565 		.ascii	"xQueueHandle QueueHandle_t\000"
 12136      75654861 
 12136      6E646C65 
 12136      20517565 
 12136      75654861 
 12137              	.LASF1174:
 12138 12c5 75784375 		.ascii	"uxCurrentPriority\000"
 12138      7272656E 
 12138      74507269 
 12138      6F726974 
 12138      7900
 12139              	.LASF378:
 12140 12d7 5F5F474E 		.ascii	"__GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_M"
 12140      55435F50 
 12140      52455245 
 12140      51286D61 
 12140      6A2C6D69 
 12141 130a 494E4F52 		.ascii	"INOR__ >= ((maj) << 16) + (min))\000"
 12141      5F5F203E 
 12141      3D202828 
 12141      6D616A29 
 12141      203C3C20 
 12142              	.LASF203:
 12143 132b 5F5F5546 		.ascii	"__UFRACT_MIN__ 0.0UR\000"
 12143      52414354 
 12143      5F4D494E 
 12143      5F5F2030 
 12143      2E305552 
 12144              	.LASF964:
 12145 1340 74726163 		.ascii	"traceQUEUE_PEEK(pxQueue) \000"
 12145      65515545 
 12145      55455F50 
 12145      45454B28 
 12145      70785175 
 12146              	.LASF1057:
 12147 135a 6C697374 		.ascii	"listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( Base"
 12147      49535F43 
 12147      4F4E5441 
 12147      494E4544 
 12147      5F574954 
 12148 138d 545F7420 		.ascii	"T_t ) ( ( pxListItem )->pvContainer == ( void * ) ("
 12148      29202820 
 12148      28207078 
 12148      4C697374 
 12148      4974656D 
 12149 13c0 2070784C 		.ascii	" pxList ) ) )\000"
 12149      69737420 
 12149      29202920 
 12149      2900
 12150              	.LASF537:
 12151 13ce 5F4E5F4C 		.ascii	"_N_LISTS 30\000"
 12151      49535453 
 12151      20333000 
 12152              	.LASF1308:
 12153 13da 433A5C55 		.ascii	"C:\\Users\\STUDENT\\Desktop\\RSC\\Embedded\\Interup"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 294


 12153      73657273 
 12153      5C535455 
 12153      44454E54 
 12153      5C446573 
 12154 1407 747300   		.ascii	"ts\000"
 12155              	.LASF411:
 12156 140a 5F434F4E 		.ascii	"_CONST const\000"
 12156      53542063 
 12156      6F6E7374 
 12156      00
 12157              	.LASF1046:
 12158 1417 6C697374 		.ascii	"listGET_LIST_ITEM_OWNER(pxListItem) ( ( pxListItem "
 12158      4745545F 
 12158      4C495354 
 12158      5F495445 
 12158      4D5F4F57 
 12159 144a 292D3E70 		.ascii	")->pvOwner )\000"
 12159      764F776E 
 12159      65722029 
 12159      00
 12160              	.LASF799:
 12161 1457 494E545F 		.ascii	"INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)\000"
 12161      46415354 
 12161      33325F4D 
 12161      494E2028 
 12161      2D5F5F49 
 12162              	.LASF435:
 12163 1480 5F535953 		.ascii	"_SYS_SIZE_T_H \000"
 12163      5F53495A 
 12163      455F545F 
 12163      482000
 12164              	.LASF549:
 12165 148f 5F524545 		.ascii	"_REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._s"
 12165      4E545F52 
 12165      414E4434 
 12165      385F5345 
 12165      45442870 
 12166 14c2 65656429 		.ascii	"eed)\000"
 12166      00
 12167              	.LASF50:
 12168 14c7 5F5F5549 		.ascii	"__UINT_LEAST8_TYPE__ unsigned char\000"
 12168      4E545F4C 
 12168      45415354 
 12168      385F5459 
 12168      50455F5F 
 12169              	.LASF388:
 12170 14ea 5F5F4154 		.ascii	"__ATFILE_VISIBLE 1\000"
 12170      46494C45 
 12170      5F564953 
 12170      49424C45 
 12170      203100
 12171              	.LASF236:
 12172 14fd 5F5F4143 		.ascii	"__ACCUM_FBIT__ 15\000"
 12172      43554D5F 
 12172      46424954 
 12172      5F5F2031 
 12172      3500
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 295


 12173              	.LASF883:
 12174 150f 706F7274 		.ascii	"portCHAR char\000"
 12174      43484152 
 12174      20636861 
 12174      7200
 12175              	.LASF242:
 12176 151d 5F5F5541 		.ascii	"__UACCUM_IBIT__ 16\000"
 12176      4343554D 
 12176      5F494249 
 12176      545F5F20 
 12176      313600
 12177              	.LASF1133:
 12178 1530 5461736B 		.ascii	"TaskFunction_t\000"
 12178      46756E63 
 12178      74696F6E 
 12178      5F7400
 12179              	.LASF1064:
 12180 153f 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( UBaseT_t ) 0U )\000"
 12180      444C455F 
 12180      5052494F 
 12180      52495459 
 12180      20282028 
 12181              	.LASF1312:
 12182 1564 70784375 		.ascii	"pxCurrentTCB\000"
 12182      7272656E 
 12182      74544342 
 12182      00
 12183              	.LASF111:
 12184 1571 5F5F494E 		.ascii	"__INT_FAST64_MAX__ 0x7fffffffffffffffLL\000"
 12184      545F4641 
 12184      53543634 
 12184      5F4D4158 
 12184      5F5F2030 
 12185              	.LASF145:
 12186 1599 5F5F4442 		.ascii	"__DBL_MIN__ ((double)2.2250738585072014e-308L)\000"
 12186      4C5F4D49 
 12186      4E5F5F20 
 12186      2828646F 
 12186      75626C65 
 12187              	.LASF927:
 12188 15c8 636F6E66 		.ascii	"configUSE_TIMERS 0\000"
 12188      69675553 
 12188      455F5449 
 12188      4D455253 
 12188      203000
 12189              	.LASF988:
 12190 15db 74726163 		.ascii	"traceMALLOC(pvAddress,uiSize) \000"
 12190      654D414C 
 12190      4C4F4328 
 12190      70764164 
 12190      64726573 
 12191              	.LASF494:
 12192 15fa 5F5F5F69 		.ascii	"___int_least16_t_defined 1\000"
 12192      6E745F6C 
 12192      65617374 
 12192      31365F74 
 12192      5F646566 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 296


 12193              	.LASF346:
 12194 1615 5F5F4152 		.ascii	"__ARM_ARCH_7M__ 1\000"
 12194      4D5F4152 
 12194      43485F37 
 12194      4D5F5F20 
 12194      3100
 12195              	.LASF180:
 12196 1627 5F5F4445 		.ascii	"__DEC128_MIN_EXP__ (-6142)\000"
 12196      43313238 
 12196      5F4D494E 
 12196      5F455850 
 12196      5F5F2028 
 12197              	.LASF1082:
 12198 1642 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD ( ( BaseT_t ) 4 )\000"
 12198      4F4D4D41 
 12198      4E445F43 
 12198      48414E47 
 12198      455F5045 
 12199              	.LASF54:
 12200 166d 5F5F494E 		.ascii	"__INT_FAST8_TYPE__ int\000"
 12200      545F4641 
 12200      5354385F 
 12200      54595045 
 12200      5F5F2069 
 12201              	.LASF427:
 12202 1684 5F4E4F49 		.ascii	"_NOINLINE __attribute__ ((__noinline__))\000"
 12202      4E4C494E 
 12202      45205F5F 
 12202      61747472 
 12202      69627574 
 12203              	.LASF298:
 12204 16ad 5F5F5544 		.ascii	"__UDA_FBIT__ 32\000"
 12204      415F4642 
 12204      49545F5F 
 12204      20333200 
 12205              	.LASF432:
 12206 16bd 5F5F7369 		.ascii	"__size_t__ \000"
 12206      7A655F74 
 12206      5F5F2000 
 12207              	.LASF1176:
 12208 16c9 756C5275 		.ascii	"ulRunTimeCounter\000"
 12208      6E54696D 
 12208      65436F75 
 12208      6E746572 
 12208      00
 12209              	.LASF953:
 12210 16da 74726163 		.ascii	"traceCREATE_MUTEX(pxNewQueue) \000"
 12210      65435245 
 12210      4154455F 
 12210      4D555445 
 12210      58287078 
 12211              	.LASF81:
 12212 16f9 5F5F5549 		.ascii	"__UINTMAX_C(c) c ## ULL\000"
 12212      4E544D41 
 12212      585F4328 
 12212      63292063 
 12212      20232320 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 297


 12213              	.LASF28:
 12214 1711 5F5F5349 		.ascii	"__SIZEOF_POINTER__ 4\000"
 12214      5A454F46 
 12214      5F504F49 
 12214      4E544552 
 12214      5F5F2034 
 12215              	.LASF46:
 12216 1726 5F5F494E 		.ascii	"__INT_LEAST8_TYPE__ signed char\000"
 12216      545F4C45 
 12216      41535438 
 12216      5F545950 
 12216      455F5F20 
 12217              	.LASF310:
 12218 1746 5F5F4743 		.ascii	"__GCC_ATOMIC_BOOL_LOCK_FREE 2\000"
 12218      435F4154 
 12218      4F4D4943 
 12218      5F424F4F 
 12218      4C5F4C4F 
 12219              	.LASF1230:
 12220 1764 78546173 		.ascii	"xTaskGetTickCount\000"
 12220      6B476574 
 12220      5469636B 
 12220      436F756E 
 12220      7400
 12221              	.LASF768:
 12222 1776 55494E54 		.ascii	"UINTPTR_MAX (__UINTPTR_MAX__)\000"
 12222      5054525F 
 12222      4D415820 
 12222      285F5F55 
 12222      494E5450 
 12223              	.LASF1226:
 12224 1794 76546173 		.ascii	"vTaskStartScheduler\000"
 12224      6B537461 
 12224      72745363 
 12224      68656475 
 12224      6C657200 
 12225              	.LASF709:
 12226 17a8 5F535953 		.ascii	"_SYS__LOCALE_H \000"
 12226      5F5F4C4F 
 12226      43414C45 
 12226      5F482000 
 12227              	.LASF345:
 12228 17b8 5F5F5448 		.ascii	"__THUMB_INTERWORK__ 1\000"
 12228      554D425F 
 12228      494E5445 
 12228      52574F52 
 12228      4B5F5F20 
 12229              	.LASF224:
 12230 17ce 5F5F554C 		.ascii	"__ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR\000"
 12230      4C465241 
 12230      43545F4D 
 12230      41585F5F 
 12230      20305846 
 12231              	.LASF1066:
 12232 17fa 7461736B 		.ascii	"taskENTER_CRITICAL() portENTER_CRITICAL()\000"
 12232      454E5445 
 12232      525F4352 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 298


 12232      49544943 
 12232      414C2829 
 12233              	.LASF1123:
 12234 1824 73686F72 		.ascii	"short unsigned int\000"
 12234      7420756E 
 12234      7369676E 
 12234      65642069 
 12234      6E7400
 12235              	.LASF1023:
 12236 1837 65546173 		.ascii	"eTaskStateGet eTaskGetState\000"
 12236      6B537461 
 12236      74654765 
 12236      74206554 
 12236      61736B47 
 12237              	.LASF1105:
 12238 1853 74736B42 		.ascii	"tskBLOCKED_CHAR ( 'B' )\000"
 12238      4C4F434B 
 12238      45445F43 
 12238      48415220 
 12238      28202742 
 12239              	.LASF153:
 12240 186b 5F5F4C44 		.ascii	"__LDBL_MIN_EXP__ (-1021)\000"
 12240      424C5F4D 
 12240      494E5F45 
 12240      58505F5F 
 12240      20282D31 
 12241              	.LASF444:
 12242 1884 5F53495A 		.ascii	"_SIZE_T_DECLARED \000"
 12242      455F545F 
 12242      4445434C 
 12242      41524544 
 12242      2000
 12243              	.LASF724:
 12244 1896 63686172 		.ascii	"char +0\000"
 12244      202B3000 
 12245              	.LASF36:
 12246 189e 5F5F4348 		.ascii	"__CHAR32_TYPE__ long unsigned int\000"
 12246      41523332 
 12246      5F545950 
 12246      455F5F20 
 12246      6C6F6E67 
 12247              	.LASF165:
 12248 18c0 5F5F4445 		.ascii	"__DEC32_MANT_DIG__ 7\000"
 12248      4333325F 
 12248      4D414E54 
 12248      5F444947 
 12248      5F5F2037 
 12249              	.LASF659:
 12250 18d5 5F5F7261 		.ascii	"__rangeof(type,start,end) (__offsetof(type, end) - "
 12250      6E67656F 
 12250      66287479 
 12250      70652C73 
 12250      74617274 
 12251 1908 5F5F6F66 		.ascii	"__offsetof(type, start))\000"
 12251      66736574 
 12251      6F662874 
 12251      7970652C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 299


 12251      20737461 
 12252              	.LASF385:
 12253 1921 5F504F53 		.ascii	"_POSIX_C_SOURCE 200809L\000"
 12253      49585F43 
 12253      5F534F55 
 12253      52434520 
 12253      32303038 
 12254              	.LASF617:
 12255 1939 5F5F4343 		.ascii	"__CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1\000"
 12255      5F535550 
 12255      504F5254 
 12255      535F4459 
 12255      4E414D49 
 12256              	.LASF114:
 12257 195c 5F5F5549 		.ascii	"__UINT_FAST32_MAX__ 0xffffffffU\000"
 12257      4E545F46 
 12257      41535433 
 12257      325F4D41 
 12257      585F5F20 
 12258              	.LASF127:
 12259 197c 5F5F464C 		.ascii	"__FLT_MAX_EXP__ 128\000"
 12259      545F4D41 
 12259      585F4558 
 12259      505F5F20 
 12259      31323800 
 12260              	.LASF14:
 12261 1990 5F5F5349 		.ascii	"__SIZEOF_LONG__ 4\000"
 12261      5A454F46 
 12261      5F4C4F4E 
 12261      475F5F20 
 12261      3400
 12262              	.LASF618:
 12263 19a2 5F5F5028 		.ascii	"__P(protos) protos\000"
 12263      70726F74 
 12263      6F732920 
 12263      70726F74 
 12263      6F7300
 12264              	.LASF791:
 12265 19b5 494E545F 		.ascii	"INT_LEAST64_MAX (__INT_LEAST64_MAX__)\000"
 12265      4C454153 
 12265      5436345F 
 12265      4D415820 
 12265      285F5F49 
 12266              	.LASF424:
 12267 19db 5F504152 		.ascii	"_PARAMS(paramlist) paramlist\000"
 12267      414D5328 
 12267      70617261 
 12267      6D6C6973 
 12267      74292070 
 12268              	.LASF664:
 12269 19f8 5F5F7374 		.ascii	"__strfmonlike(fmtarg,firstvararg) __attribute__((__"
 12269      72666D6F 
 12269      6E6C696B 
 12269      6528666D 
 12269      74617267 
 12270 1a2b 666F726D 		.ascii	"format__ (__strfmon__, fmtarg, firstvararg)))\000"
 12270      61745F5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 300


 12270      20285F5F 
 12270      73747266 
 12270      6D6F6E5F 
 12271              	.LASF1256:
 12272 1a59 70785469 		.ascii	"pxTicksToWait\000"
 12272      636B7354 
 12272      6F576169 
 12272      7400
 12273              	.LASF983:
 12274 1a67 74726163 		.ascii	"traceTIMER_CREATE(pxNewTimer) \000"
 12274      6554494D 
 12274      45525F43 
 12274      52454154 
 12274      45287078 
 12275              	.LASF18:
 12276 1a86 5F5F5349 		.ascii	"__SIZEOF_DOUBLE__ 8\000"
 12276      5A454F46 
 12276      5F444F55 
 12276      424C455F 
 12276      5F203800 
 12277              	.LASF517:
 12278 1a9a 5F434C4F 		.ascii	"_CLOCK_T_ unsigned long\000"
 12278      434B5F54 
 12278      5F20756E 
 12278      7369676E 
 12278      6564206C 
 12279              	.LASF1014:
 12280 1ab2 636F6E66 		.ascii	"configUSE_QUEUE_SETS 0\000"
 12280      69675553 
 12280      455F5155 
 12280      4555455F 
 12280      53455453 
 12281              	.LASF1191:
 12282 1ac9 70634E61 		.ascii	"pcName\000"
 12282      6D6500
 12283              	.LASF1107:
 12284 1ad0 74736B44 		.ascii	"tskDELETED_CHAR ( 'D' )\000"
 12284      454C4554 
 12284      45445F43 
 12284      48415220 
 12284      28202744 
 12285              	.LASF918:
 12286 1ae8 50524956 		.ascii	"PRIVILEGED_DATA \000"
 12286      494C4547 
 12286      45445F44 
 12286      41544120 
 12286      00
 12287              	.LASF958:
 12288 1af9 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 12288      6554414B 
 12288      455F4D55 
 12288      5445585F 
 12288      52454355 
 12289              	.LASF736:
 12290 1b24 5F5F4641 		.ascii	"__FAST16 \000"
 12290      53543136 
 12290      2000
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 301


 12291              	.LASF108:
 12292 1b2e 5F5F494E 		.ascii	"__INT_FAST8_MAX__ 0x7fffffff\000"
 12292      545F4641 
 12292      5354385F 
 12292      4D41585F 
 12292      5F203078 
 12293              	.LASF789:
 12294 1b4b 55494E54 		.ascii	"UINT64_MAX (__UINT64_MAX__)\000"
 12294      36345F4D 
 12294      41582028 
 12294      5F5F5549 
 12294      4E543634 
 12295              	.LASF392:
 12296 1b67 5F5F4C41 		.ascii	"__LARGEFILE_VISIBLE 0\000"
 12296      52474546 
 12296      494C455F 
 12296      56495349 
 12296      424C4520 
 12297              	.LASF176:
 12298 1b7d 5F5F4445 		.ascii	"__DEC64_MAX__ 9.999999999999999E384DD\000"
 12298      4336345F 
 12298      4D41585F 
 12298      5F20392E 
 12298      39393939 
 12299              	.LASF361:
 12300 1ba3 5F5F4E45 		.ascii	"__NEWLIB__ 2\000"
 12300      574C4942 
 12300      5F5F2032 
 12300      00
 12301              	.LASF880:
 12302 1bb0 65727251 		.ascii	"errQUEUE_YIELD ( -5 )\000"
 12302      55455545 
 12302      5F594945 
 12302      4C442028 
 12302      202D3520 
 12303              	.LASF676:
 12304 1bc6 5F5F5343 		.ascii	"__SCCSID(s) struct __hack\000"
 12304      43534944 
 12304      28732920 
 12304      73747275 
 12304      6374205F 
 12305              	.LASF300:
 12306 1be0 5F5F5554 		.ascii	"__UTA_FBIT__ 64\000"
 12306      415F4642 
 12306      49545F5F 
 12306      20363400 
 12307              	.LASF391:
 12308 1bf0 5F5F4953 		.ascii	"__ISO_C_VISIBLE 1999\000"
 12308      4F5F435F 
 12308      56495349 
 12308      424C4520 
 12308      31393939 
 12309              	.LASF129:
 12310 1c05 5F5F464C 		.ascii	"__FLT_DECIMAL_DIG__ 9\000"
 12310      545F4445 
 12310      43494D41 
 12310      4C5F4449 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 302


 12310      475F5F20 
 12311              	.LASF935:
 12312 1c1b 706F7274 		.ascii	"portCLEAN_UP_TCB(pxTCB) ( void ) pxTCB\000"
 12312      434C4541 
 12312      4E5F5550 
 12312      5F544342 
 12312      28707854 
 12313              	.LASF1296:
 12314 1c42 78537573 		.ascii	"xSuspendedTaskList\000"
 12314      70656E64 
 12314      65645461 
 12314      736B4C69 
 12314      737400
 12315              	.LASF979:
 12316 1c55 74726163 		.ascii	"traceTASK_SUSPEND(pxTaskToSuspend) \000"
 12316      65544153 
 12316      4B5F5355 
 12316      5350454E 
 12316      44287078 
 12317              	.LASF45:
 12318 1c79 5F5F5549 		.ascii	"__UINT64_TYPE__ long long unsigned int\000"
 12318      4E543634 
 12318      5F545950 
 12318      455F5F20 
 12318      6C6F6E67 
 12319              	.LASF1157:
 12320 1ca0 65537573 		.ascii	"eSuspended\000"
 12320      70656E64 
 12320      656400
 12321              	.LASF1130:
 12322 1cab 75696E74 		.ascii	"uint8_t\000"
 12322      385F7400 
 12323              	.LASF806:
 12324 1cb3 494E544D 		.ascii	"INTMAX_MIN (-INTMAX_MAX - 1)\000"
 12324      41585F4D 
 12324      494E2028 
 12324      2D494E54 
 12324      4D41585F 
 12325              	.LASF1049:
 12326 1cd0 6C697374 		.ascii	"listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList) ( ( ( pxLi"
 12326      4745545F 
 12326      4954454D 
 12326      5F56414C 
 12326      55455F4F 
 12327 1d03 73742029 		.ascii	"st )->xListEnd ).pxNext->xItemValue )\000"
 12327      2D3E784C 
 12327      69737445 
 12327      6E642029 
 12327      2E70784E 
 12328              	.LASF1258:
 12329 1d29 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 12329      736B4765 
 12329      74546173 
 12329      6B4E756D 
 12329      62657200 
 12330              	.LASF582:
 12331 1d3d 5F5F7074 		.ascii	"__ptr_t void *\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 303


 12331      725F7420 
 12331      766F6964 
 12331      202A00
 12332              	.LASF369:
 12333 1d4c 5F484156 		.ascii	"_HAVE_LONG_DOUBLE 1\000"
 12333      455F4C4F 
 12333      4E475F44 
 12333      4F55424C 
 12333      45203100 
 12334              	.LASF1272:
 12335 1d60 70784E65 		.ascii	"pxNextTCB\000"
 12335      78745443 
 12335      4200
 12336              	.LASF644:
 12337 1d6a 5F5F616C 		.ascii	"__always_inline __attribute__((__always_inline__))\000"
 12337      77617973 
 12337      5F696E6C 
 12337      696E6520 
 12337      5F5F6174 
 12338              	.LASF196:
 12339 1d9d 5F5F4652 		.ascii	"__FRACT_FBIT__ 15\000"
 12339      4143545F 
 12339      46424954 
 12339      5F5F2031 
 12339      3500
 12340              	.LASF834:
 12341 1daf 636F6E66 		.ascii	"configTICK_RATE_HZ ( ( portTickType ) 1200 )\000"
 12341      69675449 
 12341      434B5F52 
 12341      4154455F 
 12341      485A2028 
 12342              	.LASF260:
 12343 1ddc 5F5F4C4C 		.ascii	"__LLACCUM_EPSILON__ 0x1P-31LLK\000"
 12343      41434355 
 12343      4D5F4550 
 12343      53494C4F 
 12343      4E5F5F20 
 12344              	.LASF4:
 12345 1dfb 5F5F474E 		.ascii	"__GNUC_PATCHLEVEL__ 1\000"
 12345      55435F50 
 12345      41544348 
 12345      4C455645 
 12345      4C5F5F20 
 12346              	.LASF313:
 12347 1e11 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR32_T_LOCK_FREE 2\000"
 12347      435F4154 
 12347      4F4D4943 
 12347      5F434841 
 12347      5233325F 
 12348              	.LASF635:
 12349 1e33 5F5F616C 		.ascii	"__alloc_align(x) __attribute__((__alloc_align__(x))"
 12349      6C6F635F 
 12349      616C6967 
 12349      6E287829 
 12349      205F5F61 
 12350 1e66 2900     		.ascii	")\000"
 12351              	.LASF529:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 304


 12352 1e68 5F52414E 		.ascii	"_RAND48_SEED_2 (0x1234)\000"
 12352      4434385F 
 12352      53454544 
 12352      5F322028 
 12352      30783132 
 12353              	.LASF1012:
 12354 1e80 636F6E66 		.ascii	"configPRE_SLEEP_PROCESSING(x) \000"
 12354      69675052 
 12354      455F534C 
 12354      4545505F 
 12354      50524F43 
 12355              	.LASF991:
 12356 1e9f 74726163 		.ascii	"traceEVENT_GROUP_CREATE_FAILED() \000"
 12356      65455645 
 12356      4E545F47 
 12356      524F5550 
 12356      5F435245 
 12357              	.LASF887:
 12358 1ec1 706F7274 		.ascii	"portSHORT short\000"
 12358      53484F52 
 12358      54207368 
 12358      6F727400 
 12359              	.LASF553:
 12360 1ed1 5F524545 		.ascii	"_REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)\000"
 12360      4E545F4D 
 12360      505F5245 
 12360      53554C54 
 12360      5F4B2870 
 12361              	.LASF957:
 12362 1efc 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE(pxMutex) \000"
 12362      6554414B 
 12362      455F4D55 
 12362      5445585F 
 12362      52454355 
 12363              	.LASF420:
 12364 1f20 5F444546 		.ascii	"_DEFUN(name,arglist,args) name(args)\000"
 12364      554E286E 
 12364      616D652C 
 12364      6172676C 
 12364      6973742C 
 12365              	.LASF653:
 12366 1f45 5F5F7072 		.ascii	"__predict_true(exp) __builtin_expect((exp), 1)\000"
 12366      65646963 
 12366      745F7472 
 12366      75652865 
 12366      78702920 
 12367              	.LASF1019:
 12368 1f74 636F6E66 		.ascii	"configUSE_STATS_FORMATTING_FUNCTIONS 0\000"
 12368      69675553 
 12368      455F5354 
 12368      4154535F 
 12368      464F524D 
 12369              	.LASF256:
 12370 1f9b 5F5F4C4C 		.ascii	"__LLACCUM_FBIT__ 31\000"
 12370      41434355 
 12370      4D5F4642 
 12370      49545F5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 305


 12370      20333100 
 12371              	.LASF567:
 12372 1faf 5F524545 		.ascii	"_REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wc"
 12372      4E545F57 
 12372      43535254 
 12372      4F4D4253 
 12372      5F535441 
 12373 1fe2 7372746F 		.ascii	"srtombs_state)\000"
 12373      6D62735F 
 12373      73746174 
 12373      652900
 12374              	.LASF124:
 12375 1ff1 5F5F464C 		.ascii	"__FLT_DIG__ 6\000"
 12375      545F4449 
 12375      475F5F20 
 12375      3600
 12376              	.LASF837:
 12377 1fff 636F6E66 		.ascii	"configMAX_TASK_NAME_LEN ( 12 )\000"
 12377      69674D41 
 12377      585F5441 
 12377      534B5F4E 
 12377      414D455F 
 12378              	.LASF959:
 12379 201e 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE() \000"
 12379      65435245 
 12379      4154455F 
 12379      434F554E 
 12379      54494E47 
 12380              	.LASF586:
 12381 2040 5F5F6174 		.ascii	"__attribute_format_strfmon__(a,b) \000"
 12381      74726962 
 12381      7574655F 
 12381      666F726D 
 12381      61745F73 
 12382              	.LASF443:
 12383 2063 5F425344 		.ascii	"_BSD_SIZE_T_DEFINED_ \000"
 12383      5F53495A 
 12383      455F545F 
 12383      44454649 
 12383      4E45445F 
 12384              	.LASF491:
 12385 2079 5F5F5F69 		.ascii	"___int32_t_defined 1\000"
 12385      6E743332 
 12385      5F745F64 
 12385      6566696E 
 12385      65642031 
 12386              	.LASF60:
 12387 208e 5F5F5549 		.ascii	"__UINT_FAST32_TYPE__ unsigned int\000"
 12387      4E545F46 
 12387      41535433 
 12387      325F5459 
 12387      50455F5F 
 12388              	.LASF1261:
 12389 20b0 70727649 		.ascii	"prvIdleTask\000"
 12389      646C6554 
 12389      61736B00 
 12390              	.LASF1303:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 306


 12391 20bc 784E756D 		.ascii	"xNumOfOverflows\000"
 12391      4F664F76 
 12391      6572666C 
 12391      6F777300 
 12392              	.LASF17:
 12393 20cc 5F5F5349 		.ascii	"__SIZEOF_FLOAT__ 4\000"
 12393      5A454F46 
 12393      5F464C4F 
 12393      41545F5F 
 12393      203400
 12394              	.LASF227:
 12395 20df 5F5F5341 		.ascii	"__SACCUM_IBIT__ 8\000"
 12395      4343554D 
 12395      5F494249 
 12395      545F5F20 
 12395      3800
 12396              	.LASF609:
 12397 20f1 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_RELOPS \000"
 12397      55434C49 
 12397      4B455F4D 
 12397      4154485F 
 12397      4255494C 
 12398              	.LASF128:
 12399 2111 5F5F464C 		.ascii	"__FLT_MAX_10_EXP__ 38\000"
 12399      545F4D41 
 12399      585F3130 
 12399      5F455850 
 12399      5F5F2033 
 12400              	.LASF1197:
 12401 2127 78526574 		.ascii	"xReturn\000"
 12401      75726E00 
 12402              	.LASF183:
 12403 212f 5F5F4445 		.ascii	"__DEC128_MAX__ 9.999999999999999999999999999999999E"
 12403      43313238 
 12403      5F4D4158 
 12403      5F5F2039 
 12403      2E393939 
 12404 2162 36313434 		.ascii	"6144DL\000"
 12404      444C00
 12405              	.LASF199:
 12406 2169 5F5F4652 		.ascii	"__FRACT_MAX__ 0X7FFFP-15R\000"
 12406      4143545F 
 12406      4D41585F 
 12406      5F203058 
 12406      37464646 
 12407              	.LASF118:
 12408 2183 5F5F4743 		.ascii	"__GCC_IEC_559 0\000"
 12408      435F4945 
 12408      435F3535 
 12408      39203000 
 12409              	.LASF140:
 12410 2193 5F5F4442 		.ascii	"__DBL_MIN_10_EXP__ (-307)\000"
 12410      4C5F4D49 
 12410      4E5F3130 
 12410      5F455850 
 12410      5F5F2028 
 12411              	.LASF955:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 307


 12412 21ad 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE(pxMutex) \000"
 12412      65474956 
 12412      455F4D55 
 12412      5445585F 
 12412      52454355 
 12413              	.LASF1094:
 12414 21d1 7854696D 		.ascii	"xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken"
 12414      65725374 
 12414      61727446 
 12414      726F6D49 
 12414      53522878 
 12415 2204 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STAR"
 12415      696D6572 
 12415      47656E65 
 12415      72696343 
 12415      6F6D6D61 
 12416 2237 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 12416      4F4D5F49 
 12416      53522C20 
 12416      28207854 
 12416      61736B47 
 12417 226a 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 12417      72696F72 
 12417      69747954 
 12417      61736B57 
 12417      6F6B656E 
 12418              	.LASF110:
 12419 2287 5F5F494E 		.ascii	"__INT_FAST32_MAX__ 0x7fffffff\000"
 12419      545F4641 
 12419      53543332 
 12419      5F4D4158 
 12419      5F5F2030 
 12420              	.LASF7:
 12421 22a5 5F5F4154 		.ascii	"__ATOMIC_SEQ_CST 5\000"
 12421      4F4D4943 
 12421      5F534551 
 12421      5F435354 
 12421      203500
 12422              	.LASF402:
 12423 22b8 5F524541 		.ascii	"_READ_WRITE_RETURN_TYPE int\000"
 12423      445F5752 
 12423      4954455F 
 12423      52455455 
 12423      524E5F54 
 12424              	.LASF1037:
 12425 22d4 706F7274 		.ascii	"portTICK_RATE_MS portTICK_PERIOD_MS\000"
 12425      5449434B 
 12425      5F524154 
 12425      455F4D53 
 12425      20706F72 
 12426              	.LASF1086:
 12427 22f8 746D7243 		.ascii	"tmrCOMMAND_RESET_FROM_ISR ( ( BaseT_t ) 7 )\000"
 12427      4F4D4D41 
 12427      4E445F52 
 12427      45534554 
 12427      5F46524F 
 12428              	.LASF516:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 308


 12429 2324 5F5F6E65 		.ascii	"__need_wint_t\000"
 12429      65645F77 
 12429      696E745F 
 12429      7400
 12430              	.LASF672:
 12431 2332 5F5F7379 		.ascii	"__sym_default(sym,impl,verid) __asm__(\".symver \" "
 12431      6D5F6465 
 12431      6661756C 
 12431      74287379 
 12431      6D2C696D 
 12432 2363 23696D70 		.ascii	"#impl \", \" #sym \"@@\" #verid)\000"
 12432      6C20222C 
 12432      20222023 
 12432      73796D20 
 12432      22404022 
 12433              	.LASF794:
 12434 2380 494E545F 		.ascii	"INT_FAST8_MAX (__INT_FAST8_MAX__)\000"
 12434      46415354 
 12434      385F4D41 
 12434      5820285F 
 12434      5F494E54 
 12435              	.LASF89:
 12436 23a2 5F5F5549 		.ascii	"__UINT16_MAX__ 0xffff\000"
 12436      4E543136 
 12436      5F4D4158 
 12436      5F5F2030 
 12436      78666666 
 12437              	.LASF1280:
 12438 23b8 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 12438      65736574 
 12438      4E657874 
 12438      5461736B 
 12438      556E626C 
 12439              	.LASF274:
 12440 23d4 5F5F5451 		.ascii	"__TQ_FBIT__ 127\000"
 12440      5F464249 
 12440      545F5F20 
 12440      31323700 
 12441              	.LASF936:
 12442 23e4 706F7274 		.ascii	"portPRE_TASK_DELETE_HOOK(pvTaskToDelete,pxYieldPend"
 12442      5052455F 
 12442      5441534B 
 12442      5F44454C 
 12442      4554455F 
 12443 2417 696E6729 		.ascii	"ing) \000"
 12443      2000
 12444              	.LASF155:
 12445 241d 5F5F4C44 		.ascii	"__LDBL_MAX_EXP__ 1024\000"
 12445      424C5F4D 
 12445      41585F45 
 12445      58505F5F 
 12445      20313032 
 12446              	.LASF765:
 12447 2433 5F5F696E 		.ascii	"__int_fast64_t_defined 1\000"
 12447      745F6661 
 12447      73743634 
 12447      5F745F64 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 309


 12447      6566696E 
 12448              	.LASF636:
 12449 244c 5F416C69 		.ascii	"_Alignas(x) __aligned(x)\000"
 12449      676E6173 
 12449      28782920 
 12449      5F5F616C 
 12449      69676E65 
 12450              	.LASF1162:
 12451 2465 7854696D 		.ascii	"xTimeOnEntering\000"
 12451      654F6E45 
 12451      6E746572 
 12451      696E6700 
 12452              	.LASF1301:
 12453 2475 75785065 		.ascii	"uxPendedTicks\000"
 12453      6E646564 
 12453      5469636B 
 12453      7300
 12454              	.LASF885:
 12455 2483 706F7274 		.ascii	"portDOUBLE double\000"
 12455      444F5542 
 12455      4C452064 
 12455      6F75626C 
 12455      6500
 12456              	.LASF412:
 12457 2495 5F564F4C 		.ascii	"_VOLATILE volatile\000"
 12457      4154494C 
 12457      4520766F 
 12457      6C617469 
 12457      6C6500
 12458              	.LASF16:
 12459 24a8 5F5F5349 		.ascii	"__SIZEOF_SHORT__ 2\000"
 12459      5A454F46 
 12459      5F53484F 
 12459      52545F5F 
 12459      203200
 12460              	.LASF261:
 12461 24bb 5F5F554C 		.ascii	"__ULLACCUM_FBIT__ 32\000"
 12461      4C414343 
 12461      554D5F46 
 12461      4249545F 
 12461      5F203332 
 12462              	.LASF419:
 12463 24d0 5F455846 		.ascii	"_EXFNPTR(name,proto) (* name) proto\000"
 12463      4E505452 
 12463      286E616D 
 12463      652C7072 
 12463      6F746F29 
 12464              	.LASF947:
 12465 24f4 74726163 		.ascii	"traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,ux"
 12465      65544153 
 12465      4B5F5052 
 12465      494F5249 
 12465      54595F44 
 12466 2527 4F726967 		.ascii	"OriginalPriority) \000"
 12466      696E616C 
 12466      5072696F 
 12466      72697479 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 310


 12466      292000
 12467              	.LASF678:
 12468 253a 5F5F4445 		.ascii	"__DECONST(type,var) ((type)(__uintptr_t)(const void"
 12468      434F4E53 
 12468      54287479 
 12468      70652C76 
 12468      61722920 
 12469 256d 202A2928 		.ascii	" *)(var))\000"
 12469      76617229 
 12469      2900
 12470              	.LASF131:
 12471 2577 5F5F464C 		.ascii	"__FLT_MIN__ 1.1754943508222875e-38F\000"
 12471      545F4D49 
 12471      4E5F5F20 
 12471      312E3137 
 12471      35343934 
 12472              	.LASF377:
 12473 259b 5F535953 		.ascii	"_SYS_FEATURES_H \000"
 12473      5F464541 
 12473      54555245 
 12473      535F4820 
 12473      00
 12474              	.LASF1150:
 12475 25ac 7078496E 		.ascii	"pxIndex\000"
 12475      64657800 
 12476              	.LASF1180:
 12477 25b4 7078546F 		.ascii	"pxTopOfStack\000"
 12477      704F6653 
 12477      7461636B 
 12477      00
 12478              	.LASF645:
 12479 25c1 5F5F6E6F 		.ascii	"__noinline __attribute__ ((__noinline__))\000"
 12479      696E6C69 
 12479      6E65205F 
 12479      5F617474 
 12479      72696275 
 12480              	.LASF698:
 12481 25eb 5F4D4143 		.ascii	"_MACHSTDLIB_H_ \000"
 12481      48535444 
 12481      4C49425F 
 12481      485F2000 
 12482              	.LASF1073:
 12483 25fb 78546173 		.ascii	"xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParame"
 12483      6B437265 
 12483      61746528 
 12483      70765461 
 12483      736B436F 
 12484 262e 74657273 		.ascii	"ters,uxPriority,pxCreatedTask) xTaskGenericCreate( "
 12484      2C757850 
 12484      72696F72 
 12484      6974792C 
 12484      70784372 
 12485 2661 28207076 		.ascii	"( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvP"
 12485      5461736B 
 12485      436F6465 
 12485      20292C20 
 12485      28207063 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 311


 12486 2694 6172616D 		.ascii	"arameters ), ( uxPriority ), ( pxCreatedTask ), ( N"
 12486      65746572 
 12486      7320292C 
 12486      20282075 
 12486      78507269 
 12487 26c7 554C4C20 		.ascii	"ULL ), ( NULL ) )\000"
 12487      292C2028 
 12487      204E554C 
 12487      4C202920 
 12487      2900
 12488              	.LASF1013:
 12489 26d9 636F6E66 		.ascii	"configPOST_SLEEP_PROCESSING(x) \000"
 12489      6967504F 
 12489      53545F53 
 12489      4C454550 
 12489      5F50524F 
 12490              	.LASF1268:
 12491 26f9 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 12491      6C6C6F63 
 12491      61746554 
 12491      4342416E 
 12491      64537461 
 12492              	.LASF19:
 12493 2710 5F5F5349 		.ascii	"__SIZEOF_LONG_DOUBLE__ 8\000"
 12493      5A454F46 
 12493      5F4C4F4E 
 12493      475F444F 
 12493      55424C45 
 12494              	.LASF1300:
 12495 2729 78536368 		.ascii	"xSchedulerRunning\000"
 12495      6564756C 
 12495      65725275 
 12495      6E6E696E 
 12495      6700
 12496              	.LASF322:
 12497 273b 5F5F5052 		.ascii	"__PRAGMA_REDEFINE_EXTNAME 1\000"
 12497      41474D41 
 12497      5F524544 
 12497      4546494E 
 12497      455F4558 
 12498              	.LASF31:
 12499 2757 5F5F5743 		.ascii	"__WCHAR_TYPE__ unsigned int\000"
 12499      4841525F 
 12499      54595045 
 12499      5F5F2075 
 12499      6E736967 
 12500              	.LASF1031:
 12501 2773 784D656D 		.ascii	"xMemoryRegion MemoryRegion_t\000"
 12501      6F727952 
 12501      6567696F 
 12501      6E204D65 
 12501      6D6F7279 
 12502              	.LASF881:
 12503 2790 504F5254 		.ascii	"PORTABLE_H \000"
 12503      41424C45 
 12503      5F482000 
 12504              	.LASF1249:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 312


 12505 279c 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 12505      6B52656D 
 12505      6F766546 
 12505      726F6D45 
 12505      76656E74 
 12506              	.LASF297:
 12507 27b5 5F5F5553 		.ascii	"__USA_IBIT__ 16\000"
 12507      415F4942 
 12507      49545F5F 
 12507      20313600 
 12508              	.LASF308:
 12509 27c5 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1\000"
 12509      435F4841 
 12509      56455F53 
 12509      594E435F 
 12509      434F4D50 
 12510              	.LASF825:
 12511 27ea 494E544D 		.ascii	"INTMAX_C(x) __INTMAX_C(x)\000"
 12511      41585F43 
 12511      28782920 
 12511      5F5F494E 
 12511      544D4158 
 12512              	.LASF430:
 12513 2804 5F5F6E65 		.ascii	"__need_wchar_t \000"
 12513      65645F77 
 12513      63686172 
 12513      5F742000 
 12514              	.LASF657:
 12515 2814 5F5F6869 		.ascii	"__hidden __attribute__((__visibility__(\"hidden\"))"
 12515      6464656E 
 12515      205F5F61 
 12515      74747269 
 12515      62757465 
 12516 2845 2900     		.ascii	")\000"
 12517              	.LASF785:
 12518 2847 494E545F 		.ascii	"INT_LEAST32_MAX (__INT_LEAST32_MAX__)\000"
 12518      4C454153 
 12518      5433325F 
 12518      4D415820 
 12518      285F5F49 
 12519              	.LASF1090:
 12520 286d 7854696D 		.ascii	"xTimerStop(xTimer,xTicksToWait) xTimerGenericComman"
 12520      65725374 
 12520      6F702878 
 12520      54696D65 
 12520      722C7854 
 12521 28a0 64282028 		.ascii	"d( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksT"
 12521      20785469 
 12521      6D657220 
 12521      292C2074 
 12521      6D72434F 
 12522 28d3 6F576169 		.ascii	"oWait ) )\000"
 12522      74202920 
 12522      2900
 12523              	.LASF924:
 12524 28dd 494E434C 		.ascii	"INCLUDE_pcTaskGetTaskName 0\000"
 12524      5544455F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 313


 12524      70635461 
 12524      736B4765 
 12524      74546173 
 12525              	.LASF1190:
 12526 28f9 70785461 		.ascii	"pxTaskCode\000"
 12526      736B436F 
 12526      646500
 12527              	.LASF61:
 12528 2904 5F5F5549 		.ascii	"__UINT_FAST64_TYPE__ long long unsigned int\000"
 12528      4E545F46 
 12528      41535436 
 12528      345F5459 
 12528      50455F5F 
 12529              	.LASF1146:
 12530 2930 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 12530      495F4C49 
 12530      53545F49 
 12530      54454D00 
 12531              	.LASF915:
 12532 2940 706F7274 		.ascii	"portNUM_CONFIGURABLE_REGIONS 1\000"
 12532      4E554D5F 
 12532      434F4E46 
 12532      49475552 
 12532      41424C45 
 12533              	.LASF564:
 12534 295f 5F524545 		.ascii	"_REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrt"
 12534      4E545F4D 
 12534      4252544F 
 12534      57435F53 
 12534      54415445 
 12535 2992 6F77635F 		.ascii	"owc_state)\000"
 12535      73746174 
 12535      652900
 12536              	.LASF515:
 12537 299d 5F57494E 		.ascii	"_WINT_T \000"
 12537      545F5420 
 12537      00
 12538              	.LASF831:
 12539 29a6 636F6E66 		.ascii	"configMAX_PRIORITIES ( 8 )\000"
 12539      69674D41 
 12539      585F5052 
 12539      494F5249 
 12539      54494553 
 12540              	.LASF773:
 12541 29c1 494E545F 		.ascii	"INT_LEAST8_MAX (__INT_LEAST8_MAX__)\000"
 12541      4C454153 
 12541      54385F4D 
 12541      41582028 
 12541      5F5F494E 
 12542              	.LASF1241:
 12543 29e5 70785465 		.ascii	"pxTemp\000"
 12543      6D7000
 12544              	.LASF429:
 12545 29ec 5F5F6E65 		.ascii	"__need_size_t \000"
 12545      65645F73 
 12545      697A655F 
 12545      742000
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 314


 12546              	.LASF286:
 12547 29fb 5F5F4841 		.ascii	"__HA_FBIT__ 7\000"
 12547      5F464249 
 12547      545F5F20 
 12547      3700
 12548              	.LASF722:
 12549 2a09 7369676E 		.ascii	"signed +0\000"
 12549      6564202B 
 12549      3000
 12550              	.LASF318:
 12551 2a13 5F5F4743 		.ascii	"__GCC_ATOMIC_LLONG_LOCK_FREE 1\000"
 12551      435F4154 
 12551      4F4D4943 
 12551      5F4C4C4F 
 12551      4E475F4C 
 12552              	.LASF810:
 12553 2a32 5349475F 		.ascii	"SIG_ATOMIC_MAX (__STDINT_EXP(INT_MAX))\000"
 12553      41544F4D 
 12553      49435F4D 
 12553      41582028 
 12553      5F5F5354 
 12554              	.LASF886:
 12555 2a59 706F7274 		.ascii	"portLONG long\000"
 12555      4C4F4E47 
 12555      206C6F6E 
 12555      6700
 12556              	.LASF801:
 12557 2a67 55494E54 		.ascii	"UINT_FAST32_MAX (__UINT_FAST32_MAX__)\000"
 12557      5F464153 
 12557      5433325F 
 12557      4D415820 
 12557      285F5F55 
 12558              	.LASF507:
 12559 2a8d 5F5F6C6F 		.ascii	"__lock_try_acquire(lock) (_CAST_VOID 0)\000"
 12559      636B5F74 
 12559      72795F61 
 12559      63717569 
 12559      7265286C 
 12560              	.LASF989:
 12561 2ab5 74726163 		.ascii	"traceFREE(pvAddress,uiSize) \000"
 12561      65465245 
 12561      45287076 
 12561      41646472 
 12561      6573732C 
 12562              	.LASF192:
 12563 2ad2 5F5F5553 		.ascii	"__USFRACT_IBIT__ 0\000"
 12563      46524143 
 12563      545F4942 
 12563      49545F5F 
 12563      203000
 12564              	.LASF1052:
 12565 2ae5 6C697374 		.ascii	"listGET_END_MARKER(pxList) ( ( ListItem_t const * )"
 12565      4745545F 
 12565      454E445F 
 12565      4D41524B 
 12565      45522870 
 12566 2b18 20282026 		.ascii	" ( &( ( pxList )->xListEnd ) ) )\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 315


 12566      28202820 
 12566      70784C69 
 12566      73742029 
 12566      2D3E784C 
 12567              	.LASF1122:
 12568 2b39 5F5F7569 		.ascii	"__uint16_t\000"
 12568      6E743136 
 12568      5F7400
 12569              	.LASF626:
 12570 2b44 5F5F7765 		.ascii	"__weak_symbol __attribute__((__weak__))\000"
 12570      616B5F73 
 12570      796D626F 
 12570      6C205F5F 
 12570      61747472 
 12571              	.LASF926:
 12572 2b6c 494E434C 		.ascii	"INCLUDE_eTaskGetState 0\000"
 12572      5544455F 
 12572      65546173 
 12572      6B476574 
 12572      53746174 
 12573              	.LASF193:
 12574 2b84 5F5F5553 		.ascii	"__USFRACT_MIN__ 0.0UHR\000"
 12574      46524143 
 12574      545F4D49 
 12574      4E5F5F20 
 12574      302E3055 
 12575              	.LASF630:
 12576 2b9b 5F5F7573 		.ascii	"__used __attribute__((__used__))\000"
 12576      6564205F 
 12576      5F617474 
 12576      72696275 
 12576      74655F5F 
 12577              	.LASF558:
 12578 2bbc 5F524545 		.ascii	"_REENT_EMERGENCY(ptr) ((ptr)->_emergency)\000"
 12578      4E545F45 
 12578      4D455247 
 12578      454E4359 
 12578      28707472 
 12579              	.LASF601:
 12580 2be6 5F5F474E 		.ascii	"__GNUCLIKE_CTOR_SECTION_HANDLING 1\000"
 12580      55434C49 
 12580      4B455F43 
 12580      544F525F 
 12580      53454354 
 12581              	.LASF88:
 12582 2c09 5F5F5549 		.ascii	"__UINT8_MAX__ 0xff\000"
 12582      4E54385F 
 12582      4D41585F 
 12582      5F203078 
 12582      666600
 12583              	.LASF490:
 12584 2c1c 5F5F5F69 		.ascii	"___int16_t_defined 1\000"
 12584      6E743136 
 12584      5F745F64 
 12584      6566696E 
 12584      65642031 
 12585              	.LASF574:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 316


 12586 2c31 5F524545 		.ascii	"_REENT _impure_ptr\000"
 12586      4E54205F 
 12586      696D7075 
 12586      72655F70 
 12586      747200
 12587              	.LASF1163:
 12588 2c44 54696D65 		.ascii	"TimeOut_t\000"
 12588      4F75745F 
 12588      7400
 12589              	.LASF952:
 12590 2c4e 74726163 		.ascii	"traceQUEUE_CREATE_FAILED(ucQueueType) \000"
 12590      65515545 
 12590      55455F43 
 12590      52454154 
 12590      455F4641 
 12591              	.LASF656:
 12592 2c75 5F5F6578 		.ascii	"__exported __attribute__((__visibility__(\"default\""
 12592      706F7274 
 12592      6564205F 
 12592      5F617474 
 12592      72696275 
 12593 2ca7 29292900 		.ascii	")))\000"
 12594              	.LASF434:
 12595 2cab 5F53495A 		.ascii	"_SIZE_T \000"
 12595      455F5420 
 12595      00
 12596              	.LASF148:
 12597 2cb4 5F5F4442 		.ascii	"__DBL_HAS_DENORM__ 1\000"
 12597      4C5F4841 
 12597      535F4445 
 12597      4E4F524D 
 12597      5F5F2031 
 12598              	.LASF1112:
 12599 2cc9 7461736B 		.ascii	"taskSWITCH_DELAYED_LISTS() { List_t *pxTemp; config"
 12599      53574954 
 12599      43485F44 
 12599      454C4159 
 12599      45445F4C 
 12600 2cfc 41535345 		.ascii	"ASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) "
 12600      52542820 
 12600      28206C69 
 12600      73744C49 
 12600      53545F49 
 12601 2d2f 293B2070 		.ascii	"); pxTemp = pxDelayedTaskList; pxDelayedTaskList = "
 12601      7854656D 
 12601      70203D20 
 12601      70784465 
 12601      6C617965 
 12602 2d62 70784F76 		.ascii	"pxOverflowDelayedTaskList; pxOverflowDelayedTaskLis"
 12602      6572666C 
 12602      6F774465 
 12602      6C617965 
 12602      64546173 
 12603 2d95 74203D20 		.ascii	"t = pxTemp; xNumOfOverflows++; prvResetNextTaskUnbl"
 12603      70785465 
 12603      6D703B20 
 12603      784E756D 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 317


 12603      4F664F76 
 12604 2dc8 6F636B54 		.ascii	"ockTime(); }\000"
 12604      696D6528 
 12604      293B207D 
 12604      00
 12605              	.LASF612:
 12606 2dd5 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE 1\000"
 12606      5F535550 
 12606      504F5254 
 12606      535F5F5F 
 12606      494E4C49 
 12607              	.LASF366:
 12608 2dee 5F4D425F 		.ascii	"_MB_LEN_MAX 1\000"
 12608      4C454E5F 
 12608      4D415820 
 12608      3100
 12609              	.LASF805:
 12610 2dfc 494E544D 		.ascii	"INTMAX_MAX (__INTMAX_MAX__)\000"
 12610      41585F4D 
 12610      41582028 
 12610      5F5F494E 
 12610      544D4158 
 12611              	.LASF782:
 12612 2e18 494E5433 		.ascii	"INT32_MAX (__INT32_MAX__)\000"
 12612      325F4D41 
 12612      5820285F 
 12612      5F494E54 
 12612      33325F4D 
 12613              	.LASF1201:
 12614 2e32 76546173 		.ascii	"vTaskDelete\000"
 12614      6B44656C 
 12614      65746500 
 12615              	.LASF1276:
 12616 2e3e 756C436F 		.ascii	"ulCount\000"
 12616      756E7400 
 12617              	.LASF945:
 12618 2e46 74726163 		.ascii	"traceTASK_SWITCHED_OUT() \000"
 12618      65544153 
 12618      4B5F5357 
 12618      49544348 
 12618      45445F4F 
 12619              	.LASF290:
 12620 2e60 5F5F4441 		.ascii	"__DA_FBIT__ 31\000"
 12620      5F464249 
 12620      545F5F20 
 12620      333100
 12621              	.LASF1143:
 12622 2e6f 7076436F 		.ascii	"pvContainer\000"
 12622      6E746169 
 12622      6E657200 
 12623              	.LASF1097:
 12624 2e7b 7854696D 		.ascii	"xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken"
 12624      65725265 
 12624      73657446 
 12624      726F6D49 
 12624      53522878 
 12625 2eae 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESE"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 318


 12625      696D6572 
 12625      47656E65 
 12625      72696343 
 12625      6F6D6D61 
 12626 2ee1 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 12626      4F4D5F49 
 12626      53522C20 
 12626      28207854 
 12626      61736B47 
 12627 2f14 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 12627      72696F72 
 12627      69747954 
 12627      61736B57 
 12627      6F6B656E 
 12628              	.LASF94:
 12629 2f31 5F5F494E 		.ascii	"__INT_LEAST16_MAX__ 0x7fff\000"
 12629      545F4C45 
 12629      41535431 
 12629      365F4D41 
 12629      585F5F20 
 12630              	.LASF413:
 12631 2f4c 5F534947 		.ascii	"_SIGNED signed\000"
 12631      4E454420 
 12631      7369676E 
 12631      656400
 12632              	.LASF133:
 12633 2f5b 5F5F464C 		.ascii	"__FLT_DENORM_MIN__ 1.4012984643248171e-45F\000"
 12633      545F4445 
 12633      4E4F524D 
 12633      5F4D494E 
 12633      5F5F2031 
 12634              	.LASF158:
 12635 2f86 5F5F4C44 		.ascii	"__LDBL_MAX__ 1.7976931348623157e+308L\000"
 12635      424C5F4D 
 12635      41585F5F 
 12635      20312E37 
 12635      39373639 
 12636              	.LASF798:
 12637 2fac 55494E54 		.ascii	"UINT_FAST16_MAX (__UINT_FAST16_MAX__)\000"
 12637      5F464153 
 12637      5431365F 
 12637      4D415820 
 12637      285F5F55 
 12638              	.LASF650:
 12639 2fd2 5F5F7265 		.ascii	"__returns_twice __attribute__((__returns_twice__))\000"
 12639      7475726E 
 12639      735F7477 
 12639      69636520 
 12639      5F5F6174 
 12640              	.LASF693:
 12641 3005 5F5F7265 		.ascii	"__requires_shared(...) __lock_annotate(shared_locks"
 12641      71756972 
 12641      65735F73 
 12641      68617265 
 12641      64282E2E 
 12642 3038 5F726571 		.ascii	"_required(__VA_ARGS__))\000"
 12642      75697265 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 319


 12642      64285F5F 
 12642      56415F41 
 12642      5247535F 
 12643              	.LASF406:
 12644 3050 5F454E44 		.ascii	"_END_STD_C \000"
 12644      5F535444 
 12644      5F432000 
 12645              	.LASF1285:
 12646 305c 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 12646      736B5265 
 12646      73657445 
 12646      76656E74 
 12646      4974656D 
 12647              	.LASF1224:
 12648 3076 78546173 		.ascii	"xTaskResumeFromISR\000"
 12648      6B526573 
 12648      756D6546 
 12648      726F6D49 
 12648      535200
 12649              	.LASF65:
 12650 3089 5F5F6861 		.ascii	"__has_include_next(STR) __has_include_next__(STR)\000"
 12650      735F696E 
 12650      636C7564 
 12650      655F6E65 
 12650      78742853 
 12651              	.LASF1058:
 12652 30bb 6C697374 		.ascii	"listLIST_ITEM_CONTAINER(pxListItem) ( ( pxListItem "
 12652      4C495354 
 12652      5F495445 
 12652      4D5F434F 
 12652      4E544149 
 12653 30ee 292D3E70 		.ascii	")->pvContainer )\000"
 12653      76436F6E 
 12653      7461696E 
 12653      65722029 
 12653      00
 12654              	.LASF780:
 12655 30ff 55494E54 		.ascii	"UINT_LEAST16_MAX (__UINT_LEAST16_MAX__)\000"
 12655      5F4C4541 
 12655      53543136 
 12655      5F4D4158 
 12655      20285F5F 
 12656              	.LASF105:
 12657 3127 5F5F5549 		.ascii	"__UINT32_C(c) c ## UL\000"
 12657      4E543332 
 12657      5F432863 
 12657      29206320 
 12657      23232055 
 12658              	.LASF855:
 12659 313d 494E434C 		.ascii	"INCLUDE_vTaskDelayUntil 1\000"
 12659      5544455F 
 12659      76546173 
 12659      6B44656C 
 12659      6179556E 
 12660              	.LASF243:
 12661 3157 5F5F5541 		.ascii	"__UACCUM_MIN__ 0.0UK\000"
 12661      4343554D 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 320


 12661      5F4D494E 
 12661      5F5F2030 
 12661      2E30554B 
 12662              	.LASF906:
 12663 316c 706F7274 		.ascii	"portTASK_FUNCTION(vFunction,pvParameters) void vFun"
 12663      5441534B 
 12663      5F46554E 
 12663      4354494F 
 12663      4E287646 
 12664 319f 6374696F 		.ascii	"ction( void *pvParameters )\000"
 12664      6E282076 
 12664      6F696420 
 12664      2A707650 
 12664      6172616D 
 12665              	.LASF716:
 12666 31bb 5F5F6861 		.ascii	"__have_long32 1\000"
 12666      76655F6C 
 12666      6F6E6733 
 12666      32203100 
 12667              	.LASF132:
 12668 31cb 5F5F464C 		.ascii	"__FLT_EPSILON__ 1.1920928955078125e-7F\000"
 12668      545F4550 
 12668      53494C4F 
 12668      4E5F5F20 
 12668      312E3139 
 12669              	.LASF622:
 12670 31f2 5F5F5853 		.ascii	"__XSTRING(x) __STRING(x)\000"
 12670      5452494E 
 12670      47287829 
 12670      205F5F53 
 12670      5452494E 
 12671              	.LASF585:
 12672 320b 5F5F6174 		.ascii	"__attribute_pure__ \000"
 12672      74726962 
 12672      7574655F 
 12672      70757265 
 12672      5F5F2000 
 12673              	.LASF374:
 12674 321f 5F574944 		.ascii	"_WIDE_ORIENT 1\000"
 12674      455F4F52 
 12674      49454E54 
 12674      203100
 12675              	.LASF1304:
 12676 322e 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 12676      74546173 
 12676      6B556E62 
 12676      6C6F636B 
 12676      54696D65 
 12677              	.LASF1035:
 12678 3243 78436F52 		.ascii	"xCoRoutineHandle CoRoutineHandle_t\000"
 12678      6F757469 
 12678      6E654861 
 12678      6E646C65 
 12678      20436F52 
 12679              	.LASF30:
 12680 3266 5F5F5054 		.ascii	"__PTRDIFF_TYPE__ int\000"
 12680      52444946 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 321


 12680      465F5459 
 12680      50455F5F 
 12680      20696E74 
 12681              	.LASF923:
 12682 327b 494E434C 		.ascii	"INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetM"
 12682      5544455F 
 12682      7853656D 
 12682      6170686F 
 12682      72654765 
 12683 32ae 75746578 		.ascii	"utexHolder\000"
 12683      486F6C64 
 12683      657200
 12684              	.LASF980:
 12685 32b9 74726163 		.ascii	"traceTASK_RESUME(pxTaskToResume) \000"
 12685      65544153 
 12685      4B5F5245 
 12685      53554D45 
 12685      28707854 
 12686              	.LASF1003:
 12687 32db 74726163 		.ascii	"traceQUEUE_REGISTRY_ADD(xQueue,pcQueueName) \000"
 12687      65515545 
 12687      55455F52 
 12687      45474953 
 12687      5452595F 
 12688              	.LASF603:
 12689 3308 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VARARGS 1\000"
 12689      55434C49 
 12689      4B455F42 
 12689      55494C54 
 12689      494E5F56 
 12690              	.LASF42:
 12691 3325 5F5F5549 		.ascii	"__UINT8_TYPE__ unsigned char\000"
 12691      4E54385F 
 12691      54595045 
 12691      5F5F2075 
 12691      6E736967 
 12692              	.LASF547:
 12693 3342 5F524545 		.ascii	"_REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_sign"
 12693      4E545F53 
 12693      49474E47 
 12693      414D2870 
 12693      74722920 
 12694 3375 67616D29 		.ascii	"gam)\000"
 12694      00
 12695              	.LASF115:
 12696 337a 5F5F5549 		.ascii	"__UINT_FAST64_MAX__ 0xffffffffffffffffULL\000"
 12696      4E545F46 
 12696      41535436 
 12696      345F4D41 
 12696      585F5F20 
 12697              	.LASF315:
 12698 33a4 5F5F4743 		.ascii	"__GCC_ATOMIC_SHORT_LOCK_FREE 2\000"
 12698      435F4154 
 12698      4F4D4943 
 12698      5F53484F 
 12698      52545F4C 
 12699              	.LASF1293:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 322


 12700 33c3 7850656E 		.ascii	"xPendingReadyList\000"
 12700      64696E67 
 12700      52656164 
 12700      794C6973 
 12700      7400
 12701              	.LASF1136:
 12702 33d5 55426173 		.ascii	"UBaseT_t\000"
 12702      65545F74 
 12702      00
 12703              	.LASF668:
 12704 33de 5F5F7374 		.ascii	"__strong_reference(sym,aliassym) extern __typeof (s"
 12704      726F6E67 
 12704      5F726566 
 12704      6572656E 
 12704      63652873 
 12705 3411 796D2920 		.ascii	"ym) aliassym __attribute__ ((__alias__ (#sym)))\000"
 12705      616C6961 
 12705      7373796D 
 12705      205F5F61 
 12705      74747269 
 12706              	.LASF269:
 12707 3441 5F5F4851 		.ascii	"__HQ_IBIT__ 0\000"
 12707      5F494249 
 12707      545F5F20 
 12707      3000
 12708              	.LASF1309:
 12709 344f 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 12709      7274436F 
 12709      756E744C 
 12709      65616469 
 12709      6E675A65 
 12710              	.LASF231:
 12711 3467 5F5F5553 		.ascii	"__USACCUM_FBIT__ 8\000"
 12711      41434355 
 12711      4D5F4642 
 12711      49545F5F 
 12711      203800
 12712              	.LASF1021:
 12713 347a 706F7274 		.ascii	"portASSERT_IF_IN_ISR() \000"
 12713      41535345 
 12713      52545F49 
 12713      465F494E 
 12713      5F495352 
 12714              	.LASF319:
 12715 3492 5F5F4743 		.ascii	"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1\000"
 12715      435F4154 
 12715      4F4D4943 
 12715      5F544553 
 12715      545F414E 
 12716              	.LASF485:
 12717 34b6 5F535953 		.ascii	"_SYS__TYPES_H \000"
 12717      5F5F5459 
 12717      5045535F 
 12717      482000
 12718              	.LASF551:
 12719 34c5 5F524545 		.ascii	"_REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._ad"
 12719      4E545F52 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 323


 12719      414E4434 
 12719      385F4144 
 12719      44287074 
 12720 34f8 642900   		.ascii	"d)\000"
 12721              	.LASF985:
 12722 34fb 74726163 		.ascii	"traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageV"
 12722      6554494D 
 12722      45525F43 
 12722      4F4D4D41 
 12722      4E445F53 
 12723 352e 616C7565 		.ascii	"alueValue,xReturn) \000"
 12723      56616C75 
 12723      652C7852 
 12723      65747572 
 12723      6E292000 
 12724              	.LASF699:
 12725 3542 5F4E4557 		.ascii	"_NEWLIB_ALLOCA_H \000"
 12725      4C49425F 
 12725      414C4C4F 
 12725      43415F48 
 12725      2000
 12726              	.LASF163:
 12727 3554 5F5F4C44 		.ascii	"__LDBL_HAS_INFINITY__ 1\000"
 12727      424C5F48 
 12727      41535F49 
 12727      4E46494E 
 12727      4954595F 
 12728              	.LASF828:
 12729 356c 46524545 		.ascii	"FREERTOS_CONFIG_H \000"
 12729      52544F53 
 12729      5F434F4E 
 12729      4649475F 
 12729      482000
 12730              	.LASF804:
 12731 357f 55494E54 		.ascii	"UINT_FAST64_MAX (__UINT_FAST64_MAX__)\000"
 12731      5F464153 
 12731      5436345F 
 12731      4D415820 
 12731      285F5F55 
 12732              	.LASF292:
 12733 35a5 5F5F5441 		.ascii	"__TA_FBIT__ 63\000"
 12733      5F464249 
 12733      545F5F20 
 12733      363300
 12734              	.LASF5:
 12735 35b4 5F5F5645 		.ascii	"__VERSION__ \"5.4.1 20160919 (release) [ARM/embedde"
 12735      5253494F 
 12735      4E5F5F20 
 12735      22352E34 
 12735      2E312032 
 12736 35e6 642D352D 		.ascii	"d-5-branch revision 240496]\"\000"
 12736      6272616E 
 12736      63682072 
 12736      65766973 
 12736      696F6E20 
 12737              	.LASF1065:
 12738 3603 7461736B 		.ascii	"taskYIELD() portYIELD()\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 324


 12738      5949454C 
 12738      44282920 
 12738      706F7274 
 12738      5949454C 
 12739              	.LASF702:
 12740 361b 5F5F636F 		.ascii	"__compar_fn_t_defined \000"
 12740      6D706172 
 12740      5F666E5F 
 12740      745F6465 
 12740      66696E65 
 12741              	.LASF1106:
 12742 3632 74736B52 		.ascii	"tskREADY_CHAR ( 'R' )\000"
 12742      45414459 
 12742      5F434841 
 12742      52202820 
 12742      27522720 
 12743              	.LASF1271:
 12744 3648 65537461 		.ascii	"eState\000"
 12744      746500
 12745              	.LASF349:
 12746 364f 5F5F4152 		.ascii	"__ARM_ARCH_EXT_IDIV__ 1\000"
 12746      4D5F4152 
 12746      43485F45 
 12746      58545F49 
 12746      4449565F 
 12747              	.LASF347:
 12748 3667 5F5F4152 		.ascii	"__ARM_PCS 1\000"
 12748      4D5F5043 
 12748      53203100 
 12749              	.LASF878:
 12750 3673 65727243 		.ascii	"errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )\000"
 12750      4F554C44 
 12750      5F4E4F54 
 12750      5F414C4C 
 12750      4F434154 
 12751              	.LASF643:
 12752 36a0 5F5F7075 		.ascii	"__pure __attribute__((__pure__))\000"
 12752      7265205F 
 12752      5F617474 
 12752      72696275 
 12752      74655F5F 
 12753              	.LASF974:
 12754 36c1 74726163 		.ascii	"traceTASK_CREATE_FAILED() \000"
 12754      65544153 
 12754      4B5F4352 
 12754      45415445 
 12754      5F464149 
 12755              	.LASF83:
 12756 36dc 5F5F5349 		.ascii	"__SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)\000"
 12756      475F4154 
 12756      4F4D4943 
 12756      5F4D494E 
 12756      5F5F2028 
 12757              	.LASF100:
 12758 3709 5F5F5549 		.ascii	"__UINT_LEAST8_MAX__ 0xff\000"
 12758      4E545F4C 
 12758      45415354 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 325


 12758      385F4D41 
 12758      585F5F20 
 12759              	.LASF457:
 12760 3722 5F425344 		.ascii	"_BSD_WCHAR_T_ \000"
 12760      5F574348 
 12760      41525F54 
 12760      5F2000
 12761              	.LASF1242:
 12762 3731 76546173 		.ascii	"vTaskSwitchContext\000"
 12762      6B537769 
 12762      74636843 
 12762      6F6E7465 
 12762      787400
 12763              	.LASF872:
 12764 3744 70644641 		.ascii	"pdFALSE ( ( BaseT_t ) 0 )\000"
 12764      4C534520 
 12764      28202820 
 12764      42617365 
 12764      545F7420 
 12765              	.LASF851:
 12766 375e 494E434C 		.ascii	"INCLUDE_uxTaskPriorityGet 1\000"
 12766      5544455F 
 12766      75785461 
 12766      736B5072 
 12766      696F7269 
 12767              	.LASF809:
 12768 377a 5349475F 		.ascii	"SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)\000"
 12768      41544F4D 
 12768      49435F4D 
 12768      494E2028 
 12768      2D5F5F53 
 12769              	.LASF820:
 12770 37a6 55494E54 		.ascii	"UINT16_C(x) __UINT16_C(x)\000"
 12770      31365F43 
 12770      28782920 
 12770      5F5F5549 
 12770      4E543136 
 12771              	.LASF874:
 12772 37c0 70645041 		.ascii	"pdPASS ( pdTRUE )\000"
 12772      53532028 
 12772      20706454 
 12772      52554520 
 12772      2900
 12773              	.LASF506:
 12774 37d2 5F5F6C6F 		.ascii	"__lock_acquire_recursive(lock) (_CAST_VOID 0)\000"
 12774      636B5F61 
 12774      63717569 
 12774      72655F72 
 12774      65637572 
 12775              	.LASF1018:
 12776 3800 636F6E66 		.ascii	"configUSE_NEWLIB_REENTRANT 0\000"
 12776      69675553 
 12776      455F4E45 
 12776      574C4942 
 12776      5F524545 
 12777              	.LASF578:
 12778 381d 5F5F504D 		.ascii	"__PMT(args) args\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 326


 12778      54286172 
 12778      67732920 
 12778      61726773 
 12778      00
 12779              	.LASF888:
 12780 382e 706F7274 		.ascii	"portSTACK_TYPE uint32_t\000"
 12780      53544143 
 12780      4B5F5459 
 12780      50452075 
 12780      696E7433 
 12781              	.LASF1278:
 12782 3846 70756345 		.ascii	"pucEndOfStack\000"
 12782      6E644F66 
 12782      53746163 
 12782      6B00
 12783              	.LASF1099:
 12784 3854 7461736B 		.ascii	"taskFIRST_CHECK_FOR_STACK_OVERFLOW() \000"
 12784      46495253 
 12784      545F4348 
 12784      45434B5F 
 12784      464F525F 
 12785              	.LASF1244:
 12786 387a 7078436F 		.ascii	"pxConstList\000"
 12786      6E73744C 
 12786      69737400 
 12787              	.LASF1062:
 12788 3886 74736B4B 		.ascii	"tskKERNEL_VERSION_MINOR 1\000"
 12788      45524E45 
 12788      4C5F5645 
 12788      5253494F 
 12788      4E5F4D49 
 12789              	.LASF943:
 12790 38a0 74726163 		.ascii	"traceLOW_POWER_IDLE_BEGIN() \000"
 12790      654C4F57 
 12790      5F504F57 
 12790      45525F49 
 12790      444C455F 
 12791              	.LASF829:
 12792 38bd 636F6E66 		.ascii	"configUSE_PREEMPTION 1\000"
 12792      69675553 
 12792      455F5052 
 12792      45454D50 
 12792      54494F4E 
 12793              	.LASF1262:
 12794 38d4 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 12794      6E697469 
 12794      616C6973 
 12794      65544342 
 12794      56617269 
 12795              	.LASF998:
 12796 38ee 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS(xEventGroup,uxBitsToSet) "
 12796      65455645 
 12796      4E545F47 
 12796      524F5550 
 12796      5F534554 
 12797 3921 00       		.ascii	"\000"
 12798              	.LASF1194:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 327


 12799 3922 70784372 		.ascii	"pxCreatedTask\000"
 12799      65617465 
 12799      64546173 
 12799      6B00
 12800              	.LASF870:
 12801 3930 50524F4A 		.ascii	"PROJDEFS_H \000"
 12801      44454653 
 12801      5F482000 
 12802              	.LASF1287:
 12803 393c 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 12803      736B496E 
 12803      6372656D 
 12803      656E744D 
 12803      75746578 
 12804              	.LASF639:
 12805 395a 5F4E6F72 		.ascii	"_Noreturn __dead2\000"
 12805      65747572 
 12805      6E205F5F 
 12805      64656164 
 12805      3200
 12806              	.LASF1223:
 12807 396c 78546173 		.ascii	"xTaskToResume\000"
 12807      6B546F52 
 12807      6573756D 
 12807      6500
 12808              	.LASF178:
 12809 397a 5F5F4445 		.ascii	"__DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD\000"
 12809      4336345F 
 12809      5355424E 
 12809      4F524D41 
 12809      4C5F4D49 
 12810              	.LASF195:
 12811 39ab 5F5F5553 		.ascii	"__USFRACT_EPSILON__ 0x1P-8UHR\000"
 12811      46524143 
 12811      545F4550 
 12811      53494C4F 
 12811      4E5F5F20 
 12812              	.LASF468:
 12813 39c9 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 12813      20282876 
 12813      6F696420 
 12813      2A293029 
 12813      00
 12814              	.LASF640:
 12815 39da 5F546872 		.ascii	"_Thread_local __thread\000"
 12815      6561645F 
 12815      6C6F6361 
 12815      6C205F5F 
 12815      74687265 
 12816              	.LASF895:
 12817 39f1 706F7274 		.ascii	"portNVIC_PENDSVSET_BIT ( 1UL << 28UL )\000"
 12817      4E564943 
 12817      5F50454E 
 12817      44535653 
 12817      45545F42 
 12818              	.LASF191:
 12819 3a18 5F5F5553 		.ascii	"__USFRACT_FBIT__ 8\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 328


 12819      46524143 
 12819      545F4642 
 12819      49545F5F 
 12819      203800
 12820              	.LASF259:
 12821 3a2b 5F5F4C4C 		.ascii	"__LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK\000"
 12821      41434355 
 12821      4D5F4D41 
 12821      585F5F20 
 12821      30583746 
 12822              	.LASF862:
 12823 3a55 636F6E66 		.ascii	"configNET_MASK0 255\000"
 12823      69674E45 
 12823      545F4D41 
 12823      534B3020 
 12823      32353500 
 12824              	.LASF469:
 12825 3a69 5F5F6E65 		.ascii	"__need_NULL\000"
 12825      65645F4E 
 12825      554C4C00 
 12826              	.LASF1295:
 12827 3a75 75785461 		.ascii	"uxTasksDeleted\000"
 12827      736B7344 
 12827      656C6574 
 12827      656400
 12828              	.LASF760:
 12829 3a84 5F5F696E 		.ascii	"__int_least32_t_defined 1\000"
 12829      745F6C65 
 12829      61737433 
 12829      325F745F 
 12829      64656669 
 12830              	.LASF303:
 12831 3a9e 5F5F5553 		.ascii	"__USER_LABEL_PREFIX__ \000"
 12831      45525F4C 
 12831      4142454C 
 12831      5F505245 
 12831      4649585F 
 12832              	.LASF91:
 12833 3ab5 5F5F5549 		.ascii	"__UINT64_MAX__ 0xffffffffffffffffULL\000"
 12833      4E543634 
 12833      5F4D4158 
 12833      5F5F2030 
 12833      78666666 
 12834              	.LASF832:
 12835 3ada 636F6E66 		.ascii	"configUSE_TICK_HOOK 1\000"
 12835      69675553 
 12835      455F5449 
 12835      434B5F48 
 12835      4F4F4B20 
 12836              	.LASF846:
 12837 3af0 636F6E66 		.ascii	"configCHECK_FOR_STACK_OVERFLOW 0\000"
 12837      69674348 
 12837      45434B5F 
 12837      464F525F 
 12837      53544143 
 12838              	.LASF90:
 12839 3b11 5F5F5549 		.ascii	"__UINT32_MAX__ 0xffffffffUL\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 329


 12839      4E543332 
 12839      5F4D4158 
 12839      5F5F2030 
 12839      78666666 
 12840              	.LASF823:
 12841 3b2d 494E5436 		.ascii	"INT64_C(x) __INT64_C(x)\000"
 12841      345F4328 
 12841      7829205F 
 12841      5F494E54 
 12841      36345F43 
 12842              	.LASF386:
 12843 3b45 5F415446 		.ascii	"_ATFILE_SOURCE\000"
 12843      494C455F 
 12843      534F5552 
 12843      434500
 12844              	.LASF561:
 12845 3b54 5F524545 		.ascii	"_REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtow"
 12845      4E545F4D 
 12845      42544F57 
 12845      435F5354 
 12845      41544528 
 12846 3b87 635F7374 		.ascii	"c_state)\000"
 12846      61746529 
 12846      00
 12847              	.LASF869:
 12848 3b90 636F6E66 		.ascii	"configASSERT(x) if( ( x ) == 0 ) { taskDISABLE_INTE"
 12848      69674153 
 12848      53455254 
 12848      28782920 
 12848      69662820 
 12849 3bc3 52525550 		.ascii	"RRUPTS(); for( ;; ); }\000"
 12849      54532829 
 12849      3B20666F 
 12849      7228203B 
 12849      3B20293B 
 12850              	.LASF560:
 12851 3bda 5F524545 		.ascii	"_REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_"
 12851      4E545F4D 
 12851      424C454E 
 12851      5F535441 
 12851      54452870 
 12852 3c0d 73746174 		.ascii	"state)\000"
 12852      652900
 12853              	.LASF688:
 12854 3c14 5F5F7472 		.ascii	"__trylocks_shared(...) __lock_annotate(shared_trylo"
 12854      796C6F63 
 12854      6B735F73 
 12854      68617265 
 12854      64282E2E 
 12855 3c47 636B5F66 		.ascii	"ck_function(__VA_ARGS__))\000"
 12855      756E6374 
 12855      696F6E28 
 12855      5F5F5641 
 12855      5F415247 
 12856              	.LASF92:
 12857 3c61 5F5F494E 		.ascii	"__INT_LEAST8_MAX__ 0x7f\000"
 12857      545F4C45 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 330


 12857      41535438 
 12857      5F4D4158 
 12857      5F5F2030 
 12858              	.LASF320:
 12859 3c79 5F5F4743 		.ascii	"__GCC_ATOMIC_POINTER_LOCK_FREE 2\000"
 12859      435F4154 
 12859      4F4D4943 
 12859      5F504F49 
 12859      4E544552 
 12860              	.LASF326:
 12861 3c9a 5F5F4152 		.ascii	"__ARM_FEATURE_QBIT 1\000"
 12861      4D5F4645 
 12861      41545552 
 12861      455F5142 
 12861      49542031 
 12862              	.LASF331:
 12863 3caf 5F5F4152 		.ascii	"__ARM_FEATURE_CLZ 1\000"
 12863      4D5F4645 
 12863      41545552 
 12863      455F434C 
 12863      5A203100 
 12864              	.LASF8:
 12865 3cc3 5F5F4154 		.ascii	"__ATOMIC_ACQUIRE 2\000"
 12865      4F4D4943 
 12865      5F414351 
 12865      55495245 
 12865      203200
 12866              	.LASF903:
 12867 3cd6 706F7274 		.ascii	"portENTER_CRITICAL() vPortEnterCritical()\000"
 12867      454E5445 
 12867      525F4352 
 12867      49544943 
 12867      414C2829 
 12868              	.LASF1297:
 12869 3d00 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 12869      7272656E 
 12869      744E756D 
 12869      6265724F 
 12869      66546173 
 12870              	.LASF1228:
 12871 3d17 76546173 		.ascii	"vTaskSuspendAll\000"
 12871      6B537573 
 12871      70656E64 
 12871      416C6C00 
 12872              	.LASF512:
 12873 3d27 756E7369 		.ascii	"unsigned signed\000"
 12873      676E6564 
 12873      20736967 
 12873      6E656400 
 12874              	.LASF762:
 12875 3d37 5F5F696E 		.ascii	"__int_fast8_t_defined 1\000"
 12875      745F6661 
 12875      7374385F 
 12875      745F6465 
 12875      66696E65 
 12876              	.LASF729:
 12877 3d4f 5F494E54 		.ascii	"_INTPTR_EQ_INT \000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 331


 12877      5054525F 
 12877      45515F49 
 12877      4E542000 
 12878              	.LASF333:
 12879 3d5f 5F5F4152 		.ascii	"__ARM_SIZEOF_WCHAR_T 4\000"
 12879      4D5F5349 
 12879      5A454F46 
 12879      5F574348 
 12879      41525F54 
 12880              	.LASF473:
 12881 3d76 5F414E53 		.ascii	"_ANSI_STDDEF_H \000"
 12881      495F5354 
 12881      44444546 
 12881      5F482000 
 12882              	.LASF64:
 12883 3d86 5F5F6861 		.ascii	"__has_include(STR) __has_include__(STR)\000"
 12883      735F696E 
 12883      636C7564 
 12883      65285354 
 12883      5229205F 
 12884              	.LASF1161:
 12885 3dae 784F7665 		.ascii	"xOverflowCount\000"
 12885      72666C6F 
 12885      77436F75 
 12885      6E7400
 12886              	.LASF949:
 12887 3dbd 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_SEND(pxQueue) \000"
 12887      65424C4F 
 12887      434B494E 
 12887      475F4F4E 
 12887      5F515545 
 12888              	.LASF976:
 12889 3de3 74726163 		.ascii	"traceTASK_DELAY_UNTIL() \000"
 12889      65544153 
 12889      4B5F4445 
 12889      4C41595F 
 12889      554E5449 
 12890              	.LASF104:
 12891 3dfc 5F5F5549 		.ascii	"__UINT_LEAST32_MAX__ 0xffffffffUL\000"
 12891      4E545F4C 
 12891      45415354 
 12891      33325F4D 
 12891      41585F5F 
 12892              	.LASF146:
 12893 3e1e 5F5F4442 		.ascii	"__DBL_EPSILON__ ((double)2.2204460492503131e-16L)\000"
 12893      4C5F4550 
 12893      53494C4F 
 12893      4E5F5F20 
 12893      2828646F 
 12894              	.LASF1254:
 12895 3e50 70785469 		.ascii	"pxTimeOut\000"
 12895      6D654F75 
 12895      7400
 12896              	.LASF208:
 12897 3e5a 5F5F4C46 		.ascii	"__LFRACT_MIN__ (-0.5LR-0.5LR)\000"
 12897      52414354 
 12897      5F4D494E 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 332


 12897      5F5F2028 
 12897      2D302E35 
 12898              	.LASF592:
 12899 3e78 5F5F6861 		.ascii	"__has_feature(x) 0\000"
 12899      735F6665 
 12899      61747572 
 12899      65287829 
 12899      203000
 12900              	.LASF548:
 12901 3e8b 5F524545 		.ascii	"_REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_nex"
 12901      4E545F52 
 12901      414E445F 
 12901      4E455854 
 12901      28707472 
 12902 3ebe 742900   		.ascii	"t)\000"
 12903              	.LASF1135:
 12904 3ec1 42617365 		.ascii	"BaseT_t\000"
 12904      545F7400 
 12905              	.LASF239:
 12906 3ec9 5F5F4143 		.ascii	"__ACCUM_MAX__ 0X7FFFFFFFP-15K\000"
 12906      43554D5F 
 12906      4D41585F 
 12906      5F203058 
 12906      37464646 
 12907              	.LASF960:
 12908 3ee7 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE_FAILED() \000"
 12908      65435245 
 12908      4154455F 
 12908      434F554E 
 12908      54494E47 
 12909              	.LASF84:
 12910 3f10 5F5F494E 		.ascii	"__INT8_MAX__ 0x7f\000"
 12910      54385F4D 
 12910      41585F5F 
 12910      20307837 
 12910      6600
 12911              	.LASF1155:
 12912 3f22 65526561 		.ascii	"eReady\000"
 12912      647900
 12913              	.LASF902:
 12914 3f29 706F7274 		.ascii	"portENABLE_INTERRUPTS() vPortClearInterruptMask(0)\000"
 12914      454E4142 
 12914      4C455F49 
 12914      4E544552 
 12914      52555054 
 12915              	.LASF972:
 12916 3f5c 74726163 		.ascii	"traceQUEUE_DELETE(pxQueue) \000"
 12916      65515545 
 12916      55455F44 
 12916      454C4554 
 12916      45287078 
 12917              	.LASF321:
 12918 3f78 5F5F4743 		.ascii	"__GCC_HAVE_DWARF2_CFI_ASM 1\000"
 12918      435F4841 
 12918      56455F44 
 12918      57415246 
 12918      325F4346 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 333


 12919              	.LASF489:
 12920 3f94 5F5F5F69 		.ascii	"___int8_t_defined 1\000"
 12920      6E74385F 
 12920      745F6465 
 12920      66696E65 
 12920      64203100 
 12921              	.LASF1246:
 12922 3fa8 70784576 		.ascii	"pxEventList\000"
 12922      656E744C 
 12922      69737400 
 12923              	.LASF1311:
 12924 3fb4 75635265 		.ascii	"ucReturn\000"
 12924      7475726E 
 12924      00
 12925              	.LASF289:
 12926 3fbd 5F5F5341 		.ascii	"__SA_IBIT__ 16\000"
 12926      5F494249 
 12926      545F5F20 
 12926      313600
 12927              	.LASF1257:
 12928 3fcc 76546173 		.ascii	"vTaskMissedYield\000"
 12928      6B4D6973 
 12928      73656459 
 12928      69656C64 
 12928      00
 12929              	.LASF658:
 12930 3fdd 5F5F6F66 		.ascii	"__offsetof(type,field) offsetof(type, field)\000"
 12930      66736574 
 12930      6F662874 
 12930      7970652C 
 12930      6669656C 
 12931              	.LASF119:
 12932 400a 5F5F4743 		.ascii	"__GCC_IEC_559_COMPLEX 0\000"
 12932      435F4945 
 12932      435F3535 
 12932      395F434F 
 12932      4D504C45 
 12933              	.LASF2:
 12934 4022 5F5F474E 		.ascii	"__GNUC__ 5\000"
 12934      55435F5F 
 12934      203500
 12935              	.LASF647:
 12936 402d 5F5F6E6F 		.ascii	"__nonnull_all __attribute__((__nonnull__))\000"
 12936      6E6E756C 
 12936      6C5F616C 
 12936      6C205F5F 
 12936      61747472 
 12937              	.LASF43:
 12938 4058 5F5F5549 		.ascii	"__UINT16_TYPE__ short unsigned int\000"
 12938      4E543136 
 12938      5F545950 
 12938      455F5F20 
 12938      73686F72 
 12939              	.LASF382:
 12940 407b 5F504F53 		.ascii	"_POSIX_SOURCE\000"
 12940      49585F53 
 12940      4F555243 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 334


 12940      4500
 12941              	.LASF705:
 12942 4089 52414E44 		.ascii	"RAND_MAX __RAND_MAX\000"
 12942      5F4D4158 
 12942      205F5F52 
 12942      414E445F 
 12942      4D415800 
 12943              	.LASF849:
 12944 409d 636F6E66 		.ascii	"configGENERATE_RUN_TIME_STATS 0\000"
 12944      69674745 
 12944      4E455241 
 12944      54455F52 
 12944      554E5F54 
 12945              	.LASF1125:
 12946 40bd 5F5F7569 		.ascii	"__uint32_t\000"
 12946      6E743332 
 12946      5F7400
 12947              	.LASF343:
 12948 40c8 5F5F534F 		.ascii	"__SOFTFP__ 1\000"
 12948      46544650 
 12948      5F5F2031 
 12948      00
 12949              	.LASF752:
 12950 40d5 5F5F696E 		.ascii	"__int32_t_defined 1\000"
 12950      7433325F 
 12950      745F6465 
 12950      66696E65 
 12950      64203100 
 12951              	.LASF1044:
 12952 40e9 636F6E66 		.ascii	"configLIST_VOLATILE \000"
 12952      69674C49 
 12952      53545F56 
 12952      4F4C4154 
 12952      494C4520 
 12953              	.LASF167:
 12954 40fe 5F5F4445 		.ascii	"__DEC32_MAX_EXP__ 97\000"
 12954      4333325F 
 12954      4D41585F 
 12954      4558505F 
 12954      5F203937 
 12955              	.LASF1253:
 12956 4113 76546173 		.ascii	"vTaskSetTimeOutState\000"
 12956      6B536574 
 12956      54696D65 
 12956      4F757453 
 12956      74617465 
 12957              	.LASF436:
 12958 4128 5F545F53 		.ascii	"_T_SIZE_ \000"
 12958      495A455F 
 12958      2000
 12959              	.LASF859:
 12960 4132 636F6E66 		.ascii	"configIP_ADDR1 168\000"
 12960      69674950 
 12960      5F414444 
 12960      52312031 
 12960      363800
 12961              	.LASF584:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 335


 12962 4145 5F5F6174 		.ascii	"__attribute_malloc__ \000"
 12962      74726962 
 12962      7574655F 
 12962      6D616C6C 
 12962      6F635F5F 
 12963              	.LASF727:
 12964 415b 696E7420 		.ascii	"int +2\000"
 12964      2B3200
 12965              	.LASF817:
 12966 4162 494E5438 		.ascii	"INT8_C(x) __INT8_C(x)\000"
 12966      5F432878 
 12966      29205F5F 
 12966      494E5438 
 12966      5F432878 
 12967              	.LASF58:
 12968 4178 5F5F5549 		.ascii	"__UINT_FAST8_TYPE__ unsigned int\000"
 12968      4E545F46 
 12968      41535438 
 12968      5F545950 
 12968      455F5F20 
 12969              	.LASF257:
 12970 4199 5F5F4C4C 		.ascii	"__LLACCUM_IBIT__ 32\000"
 12970      41434355 
 12970      4D5F4942 
 12970      49545F5F 
 12970      20333200 
 12971              	.LASF200:
 12972 41ad 5F5F4652 		.ascii	"__FRACT_EPSILON__ 0x1P-15R\000"
 12972      4143545F 
 12972      45505349 
 12972      4C4F4E5F 
 12972      5F203078 
 12973              	.LASF1169:
 12974 41c8 78544153 		.ascii	"xTASK_STATUS\000"
 12974      4B5F5354 
 12974      41545553 
 12974      00
 12975              	.LASF694:
 12976 41d5 5F5F7265 		.ascii	"__requires_unlocked(...) __lock_annotate(locks_excl"
 12976      71756972 
 12976      65735F75 
 12976      6E6C6F63 
 12976      6B656428 
 12977 4208 75646564 		.ascii	"uded(__VA_ARGS__))\000"
 12977      285F5F56 
 12977      415F4152 
 12977      47535F5F 
 12977      292900
 12978              	.LASF51:
 12979 421b 5F5F5549 		.ascii	"__UINT_LEAST16_TYPE__ short unsigned int\000"
 12979      4E545F4C 
 12979      45415354 
 12979      31365F54 
 12979      5950455F 
 12980              	.LASF86:
 12981 4244 5F5F494E 		.ascii	"__INT32_MAX__ 0x7fffffffL\000"
 12981      5433325F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 336


 12981      4D41585F 
 12981      5F203078 
 12981      37666666 
 12982              	.LASF1147:
 12983 425e 4D696E69 		.ascii	"MiniListItem_t\000"
 12983      4C697374 
 12983      4974656D 
 12983      5F7400
 12984              	.LASF520:
 12985 426d 5F54494D 		.ascii	"_TIMER_T_ unsigned long\000"
 12985      45525F54 
 12985      5F20756E 
 12985      7369676E 
 12985      6564206C 
 12986              	.LASF1111:
 12987 4285 7461736B 		.ascii	"taskRESET_READY_PRIORITY(uxPriority) { if( listCURR"
 12987      52455345 
 12987      545F5245 
 12987      4144595F 
 12987      5052494F 
 12988 42b8 454E545F 		.ascii	"ENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority"
 12988      4C495354 
 12988      5F4C454E 
 12988      47544828 
 12988      20262820 
 12989 42eb 2029205D 		.ascii	" ) ] ) ) == ( UBaseT_t ) 0 ) { portRESET_READY_PRIO"
 12989      20292029 
 12989      203D3D20 
 12989      28205542 
 12989      61736554 
 12990 431e 52495459 		.ascii	"RITY( ( uxPriority ), ( uxTopReadyPriority ) ); } }"
 12990      28202820 
 12990      75785072 
 12990      696F7269 
 12990      74792029 
 12991 4351 00       		.ascii	"\000"
 12992              	.LASF996:
 12993 4352 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS(xEventGroup,uxBitsToCle"
 12993      65455645 
 12993      4E545F47 
 12993      524F5550 
 12993      5F434C45 
 12994 4385 61722920 		.ascii	"ar) \000"
 12994      00
 12995              	.LASF98:
 12996 438a 5F5F494E 		.ascii	"__INT_LEAST64_MAX__ 0x7fffffffffffffffLL\000"
 12996      545F4C45 
 12996      41535436 
 12996      345F4D41 
 12996      585F5F20 
 12997              	.LASF337:
 12998 43b3 5F5F4150 		.ascii	"__APCS_32__ 1\000"
 12998      43535F33 
 12998      325F5F20 
 12998      3100
 12999              	.LASF743:
 13000 43c1 5F535953 		.ascii	"_SYS__STDINT_H \000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 337


 13000      5F5F5354 
 13000      44494E54 
 13000      5F482000 
 13001              	.LASF431:
 13002 43d1 5F5F6E65 		.ascii	"__need_NULL \000"
 13002      65645F4E 
 13002      554C4C20 
 13002      00
 13003              	.LASF381:
 13004 43de 5F444546 		.ascii	"_DEFAULT_SOURCE 1\000"
 13004      41554C54 
 13004      5F534F55 
 13004      52434520 
 13004      3100
 13005              	.LASF871:
 13006 43f0 70644D53 		.ascii	"pdMS_TO_TICKS(xTimeInMs) ( ( ( TickT_t ) ( xTimeInM"
 13006      5F544F5F 
 13006      5449434B 
 13006      53287854 
 13006      696D6549 
 13007 4423 73202920 		.ascii	"s ) * configTICK_RATE_HZ ) / ( TickT_t ) 1000 )\000"
 13007      2A20636F 
 13007      6E666967 
 13007      5449434B 
 13007      5F524154 
 13008              	.LASF117:
 13009 4453 5F5F5549 		.ascii	"__UINTPTR_MAX__ 0xffffffffU\000"
 13009      4E545054 
 13009      525F4D41 
 13009      585F5F20 
 13009      30786666 
 13010              	.LASF484:
 13011 446f 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 13011      65746F66 
 13011      28545950 
 13011      452C4D45 
 13011      4D424552 
 13012 44a2 42455229 		.ascii	"BER)\000"
 13012      00
 13013              	.LASF53:
 13014 44a7 5F5F5549 		.ascii	"__UINT_LEAST64_TYPE__ long long unsigned int\000"
 13014      4E545F4C 
 13014      45415354 
 13014      36345F54 
 13014      5950455F 
 13015              	.LASF854:
 13016 44d4 494E434C 		.ascii	"INCLUDE_vTaskSuspend 1\000"
 13016      5544455F 
 13016      76546173 
 13016      6B537573 
 13016      70656E64 
 13017              	.LASF1072:
 13018 44eb 7461736B 		.ascii	"taskSCHEDULER_RUNNING ( ( BaseT_t ) 2 )\000"
 13018      53434845 
 13018      44554C45 
 13018      525F5255 
 13018      4E4E494E 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 338


 13019              	.LASF1255:
 13020 4513 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 13020      6B436865 
 13020      636B466F 
 13020      7254696D 
 13020      654F7574 
 13021              	.LASF160:
 13022 4528 5F5F4C44 		.ascii	"__LDBL_EPSILON__ 2.2204460492503131e-16L\000"
 13022      424C5F45 
 13022      5053494C 
 13022      4F4E5F5F 
 13022      20322E32 
 13023              	.LASF1008:
 13024 4551 7076506F 		.ascii	"pvPortMallocAligned(x,puxStackBuffer) ( ( ( puxStac"
 13024      72744D61 
 13024      6C6C6F63 
 13024      416C6967 
 13024      6E656428 
 13025 4584 6B427566 		.ascii	"kBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ("
 13025      66657220 
 13025      29203D3D 
 13025      204E554C 
 13025      4C202920 
 13026 45b7 20707578 		.ascii	" puxStackBuffer ) )\000"
 13026      53746163 
 13026      6B427566 
 13026      66657220 
 13026      29202900 
 13027              	.LASF628:
 13028 45cb 5F5F7075 		.ascii	"__pure2 __attribute__((__const__))\000"
 13028      72653220 
 13028      5F5F6174 
 13028      74726962 
 13028      7574655F 
 13029              	.LASF312:
 13030 45ee 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR16_T_LOCK_FREE 2\000"
 13030      435F4154 
 13030      4F4D4943 
 13030      5F434841 
 13030      5231365F 
 13031              	.LASF813:
 13032 4610 57434841 		.ascii	"WCHAR_MIN (__WCHAR_MIN__)\000"
 13032      525F4D49 
 13032      4E20285F 
 13032      5F574348 
 13032      41525F4D 
 13033              	.LASF141:
 13034 462a 5F5F4442 		.ascii	"__DBL_MAX_EXP__ 1024\000"
 13034      4C5F4D41 
 13034      585F4558 
 13034      505F5F20 
 13034      31303234 
 13035              	.LASF738:
 13036 463f 5F5F4641 		.ascii	"__FAST64 \"ll\"\000"
 13036      53543634 
 13036      20226C6C 
 13036      2200
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 339


 13037              	.LASF9:
 13038 464d 5F5F4154 		.ascii	"__ATOMIC_RELEASE 3\000"
 13038      4F4D4943 
 13038      5F52454C 
 13038      45415345 
 13038      203300
 13039              	.LASF723:
 13040 4660 756E7369 		.ascii	"unsigned +0\000"
 13040      676E6564 
 13040      202B3000 
 13041              	.LASF123:
 13042 466c 5F5F464C 		.ascii	"__FLT_MANT_DIG__ 24\000"
 13042      545F4D41 
 13042      4E545F44 
 13042      49475F5F 
 13042      20323400 
 13043              	.LASF528:
 13044 4680 5F52414E 		.ascii	"_RAND48_SEED_1 (0xabcd)\000"
 13044      4434385F 
 13044      53454544 
 13044      5F312028 
 13044      30786162 
 13045              	.LASF246:
 13046 4698 5F5F4C41 		.ascii	"__LACCUM_FBIT__ 31\000"
 13046      4343554D 
 13046      5F464249 
 13046      545F5F20 
 13046      333100
 13047              	.LASF807:
 13048 46ab 55494E54 		.ascii	"UINTMAX_MAX (__UINTMAX_MAX__)\000"
 13048      4D41585F 
 13048      4D415820 
 13048      285F5F55 
 13048      494E544D 
 13049              	.LASF1115:
 13050 46c9 7461736B 		.ascii	"taskEVENT_LIST_ITEM_VALUE_IN_USE 0x80000000UL\000"
 13050      4556454E 
 13050      545F4C49 
 13050      53545F49 
 13050      54454D5F 
 13051              	.LASF500:
 13052 46f7 5F5F4C4F 		.ascii	"__LOCK_INIT_RECURSIVE(class,lock) static int lock ="
 13052      434B5F49 
 13052      4E49545F 
 13052      52454355 
 13052      52534956 
 13053 472a 20303B00 		.ascii	" 0;\000"
 13054              	.LASF1283:
 13055 472e 70784D75 		.ascii	"pxMutexHolder\000"
 13055      74657848 
 13055      6F6C6465 
 13055      7200
 13056              	.LASF646:
 13057 473c 5F5F6E6F 		.ascii	"__nonnull(x) __attribute__((__nonnull__(x)))\000"
 13057      6E6E756C 
 13057      6C287829 
 13057      205F5F61 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 340


 13057      74747269 
 13058              	.LASF614:
 13059 4769 5F5F4343 		.ascii	"__CC_SUPPORTS___FUNC__ 1\000"
 13059      5F535550 
 13059      504F5254 
 13059      535F5F5F 
 13059      46554E43 
 13060              	.LASF1078:
 13061 4782 746D7243 		.ascii	"tmrCOMMAND_START_DONT_TRACE ( ( BaseT_t ) 0 )\000"
 13061      4F4D4D41 
 13061      4E445F53 
 13061      54415254 
 13061      5F444F4E 
 13062              	.LASF847:
 13063 47b0 636F6E66 		.ascii	"configUSE_RECURSIVE_MUTEXES 1\000"
 13063      69675553 
 13063      455F5245 
 13063      43555253 
 13063      4956455F 
 13064              	.LASF597:
 13065 47ce 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_CONSTANTS \000"
 13065      55434C49 
 13065      4B455F4D 
 13065      4154485F 
 13065      4255494C 
 13066              	.LASF690:
 13067 47f1 5F5F6173 		.ascii	"__asserts_exclusive(...) __lock_annotate(assert_exc"
 13067      73657274 
 13067      735F6578 
 13067      636C7573 
 13067      69766528 
 13068 4824 6C757369 		.ascii	"lusive_lock(__VA_ARGS__))\000"
 13068      76655F6C 
 13068      6F636B28 
 13068      5F5F5641 
 13068      5F415247 
 13069              	.LASF737:
 13070 483e 5F5F4641 		.ascii	"__FAST32 \000"
 13070      53543332 
 13070      2000
 13071              	.LASF475:
 13072 4848 5F545F50 		.ascii	"_T_PTRDIFF_ \000"
 13072      54524449 
 13072      46465F20 
 13072      00
 13073              	.LASF161:
 13074 4855 5F5F4C44 		.ascii	"__LDBL_DENORM_MIN__ 4.9406564584124654e-324L\000"
 13074      424C5F44 
 13074      454E4F52 
 13074      4D5F4D49 
 13074      4E5F5F20 
 13075              	.LASF1095:
 13076 4882 7854696D 		.ascii	"xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken)"
 13076      65725374 
 13076      6F704672 
 13076      6F6D4953 
 13076      52287854 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 341


 13077 48b5 20785469 		.ascii	" xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_"
 13077      6D657247 
 13077      656E6572 
 13077      6963436F 
 13077      6D6D616E 
 13078 48e8 46524F4D 		.ascii	"FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )\000"
 13078      5F495352 
 13078      2C20302C 
 13078      20282070 
 13078      78486967 
 13079              	.LASF400:
 13080 4919 5F5F4558 		.ascii	"__EXPORT \000"
 13080      504F5254 
 13080      2000
 13081              	.LASF327:
 13082 4923 5F5F4152 		.ascii	"__ARM_FEATURE_SAT 1\000"
 13082      4D5F4645 
 13082      41545552 
 13082      455F5341 
 13082      54203100 
 13083              	.LASF1273:
 13084 4937 70784669 		.ascii	"pxFirstTCB\000"
 13084      72737454 
 13084      434200
 13085              	.LASF749:
 13086 4942 5F5F696E 		.ascii	"__int16_t_defined 1\000"
 13086      7431365F 
 13086      745F6465 
 13086      66696E65 
 13086      64203100 
 13087              	.LASF222:
 13088 4956 5F5F554C 		.ascii	"__ULLFRACT_IBIT__ 0\000"
 13088      4C465241 
 13088      43545F49 
 13088      4249545F 
 13088      5F203000 
 13089              	.LASF1109:
 13090 496a 7461736B 		.ascii	"taskRECORD_READY_PRIORITY(uxPriority) portRECORD_RE"
 13090      5245434F 
 13090      52445F52 
 13090      45414459 
 13090      5F505249 
 13091 499d 4144595F 		.ascii	"ADY_PRIORITY( uxPriority, uxTopReadyPriority )\000"
 13091      5052494F 
 13091      52495459 
 13091      28207578 
 13091      5072696F 
 13092              	.LASF546:
 13093 49cc 5F524545 		.ascii	"_REENT_CHECK_SIGNAL_BUF(ptr) \000"
 13093      4E545F43 
 13093      4845434B 
 13093      5F534947 
 13093      4E414C5F 
 13094              	.LASF471:
 13095 49ea 5F535444 		.ascii	"_STDDEF_H \000"
 13095      4445465F 
 13095      482000
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 342


 13096              	.LASF1084:
 13097 49f5 746D7246 		.ascii	"tmrFIRST_FROM_ISR_COMMAND ( ( BaseT_t ) 6 )\000"
 13097      49525354 
 13097      5F46524F 
 13097      4D5F4953 
 13097      525F434F 
 13098              	.LASF1245:
 13099 4a21 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 13099      6B506C61 
 13099      63654F6E 
 13099      4576656E 
 13099      744C6973 
 13100              	.LASF526:
 13101 4a37 5F524545 		.ascii	"_REENT_SMALL_CHECK_INIT(ptr) \000"
 13101      4E545F53 
 13101      4D414C4C 
 13101      5F434845 
 13101      434B5F49 
 13102              	.LASF842:
 13103 4a55 636F6E66 		.ascii	"configUSE_MUTEXES 1\000"
 13103      69675553 
 13103      455F4D55 
 13103      54455845 
 13103      53203100 
 13104              	.LASF756:
 13105 4a69 5F494E54 		.ascii	"_INTPTR_T_DECLARED \000"
 13105      5054525F 
 13105      545F4445 
 13105      434C4152 
 13105      45442000 
 13106              	.LASF505:
 13107 4a7d 5F5F6C6F 		.ascii	"__lock_acquire(lock) (_CAST_VOID 0)\000"
 13107      636B5F61 
 13107      63717569 
 13107      7265286C 
 13107      6F636B29 
 13108              	.LASF761:
 13109 4aa1 5F5F696E 		.ascii	"__int_least64_t_defined 1\000"
 13109      745F6C65 
 13109      61737436 
 13109      345F745F 
 13109      64656669 
 13110              	.LASF1213:
 13111 4abb 78546173 		.ascii	"xTask\000"
 13111      6B00
 13112              	.LASF1259:
 13113 4ac1 76546173 		.ascii	"vTaskSetTaskNumber\000"
 13113      6B536574 
 13113      5461736B 
 13113      4E756D62 
 13113      657200
 13114              	.LASF623:
 13115 4ad4 5F5F636F 		.ascii	"__const const\000"
 13115      6E737420 
 13115      636F6E73 
 13115      7400
 13116              	.LASF634:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 343


 13117 4ae2 5F5F616C 		.ascii	"__alloc_size(x) __attribute__((__alloc_size__(x)))\000"
 13117      6C6F635F 
 13117      73697A65 
 13117      28782920 
 13117      5F5F6174 
 13118              	.LASF836:
 13119 4b15 636F6E66 		.ascii	"configTOTAL_HEAP_SIZE ( ( size_t ) ( 8 * 1024 ) )\000"
 13119      6967544F 
 13119      54414C5F 
 13119      48454150 
 13119      5F53495A 
 13120              	.LASF1165:
 13121 4b47 70764261 		.ascii	"pvBaseAddress\000"
 13121      73654164 
 13121      64726573 
 13121      7300
 13122              	.LASF130:
 13123 4b55 5F5F464C 		.ascii	"__FLT_MAX__ 3.4028234663852886e+38F\000"
 13123      545F4D41 
 13123      585F5F20 
 13123      332E3430 
 13123      32383233 
 13124              	.LASF241:
 13125 4b79 5F5F5541 		.ascii	"__UACCUM_FBIT__ 16\000"
 13125      4343554D 
 13125      5F464249 
 13125      545F5F20 
 13125      313600
 13126              	.LASF670:
 13127 4b8c 5F5F7761 		.ascii	"__warn_references(sym,msg) __asm__(\".section .gnu."
 13127      726E5F72 
 13127      65666572 
 13127      656E6365 
 13127      73287379 
 13128 4bbe 7761726E 		.ascii	"warning.\" #sym); __asm__(\".asciz \\\"\" msg \"\\\""
 13128      696E672E 
 13128      22202373 
 13128      796D293B 
 13128      205F5F61 
 13129 4bea 22293B20 		.ascii	"\"); __asm__(\".previous\")\000"
 13129      5F5F6173 
 13129      6D5F5F28 
 13129      222E7072 
 13129      6576696F 
 13130              	.LASF205:
 13131 4c03 5F5F5546 		.ascii	"__UFRACT_EPSILON__ 0x1P-16UR\000"
 13131      52414354 
 13131      5F455053 
 13131      494C4F4E 
 13131      5F5F2030 
 13132              	.LASF73:
 13133 4c20 5F5F5743 		.ascii	"__WCHAR_MIN__ 0U\000"
 13133      4841525F 
 13133      4D494E5F 
 13133      5F203055 
 13133      00
 13134              	.LASF1142:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 344


 13135 4c31 70764F77 		.ascii	"pvOwner\000"
 13135      6E657200 
 13136              	.LASF277:
 13137 4c39 5F5F5551 		.ascii	"__UQQ_IBIT__ 0\000"
 13137      515F4942 
 13137      49545F5F 
 13137      203000
 13138              	.LASF1043:
 13139 4c48 4C495354 		.ascii	"LIST_H \000"
 13139      5F482000 
 13140              	.LASF360:
 13141 4c50 5F4E4557 		.ascii	"_NEWLIB_VERSION \"2.4.0\"\000"
 13141      4C49425F 
 13141      56455253 
 13141      494F4E20 
 13141      22322E34 
 13142              	.LASF359:
 13143 4c68 5F4E4557 		.ascii	"_NEWLIB_VERSION_H__ 1\000"
 13143      4C49425F 
 13143      56455253 
 13143      494F4E5F 
 13143      485F5F20 
 13144              	.LASF317:
 13145 4c7e 5F5F4743 		.ascii	"__GCC_ATOMIC_LONG_LOCK_FREE 2\000"
 13145      435F4154 
 13145      4F4D4943 
 13145      5F4C4F4E 
 13145      475F4C4F 
 13146              	.LASF253:
 13147 4c9c 5F5F554C 		.ascii	"__ULACCUM_MIN__ 0.0ULK\000"
 13147      41434355 
 13147      4D5F4D49 
 13147      4E5F5F20 
 13147      302E3055 
 13148              	.LASF368:
 13149 4cb3 5F415445 		.ascii	"_ATEXIT_DYNAMIC_ALLOC 1\000"
 13149      5849545F 
 13149      44594E41 
 13149      4D49435F 
 13149      414C4C4F 
 13150              	.LASF449:
 13151 4ccb 5F5F6E65 		.ascii	"__need_size_t\000"
 13151      65645F73 
 13151      697A655F 
 13151      7400
 13152              	.LASF1225:
 13153 4cd9 75785361 		.ascii	"uxSavedInterruptStatus\000"
 13153      76656449 
 13153      6E746572 
 13153      72757074 
 13153      53746174 
 13154              	.LASF336:
 13155 4cf0 5F5F4152 		.ascii	"__ARM_ARCH 7\000"
 13155      4D5F4152 
 13155      43482037 
 13155      00
 13156              	.LASF1085:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 345


 13157 4cfd 746D7243 		.ascii	"tmrCOMMAND_START_FROM_ISR ( ( BaseT_t ) 6 )\000"
 13157      4F4D4D41 
 13157      4E445F53 
 13157      54415254 
 13157      5F46524F 
 13158              	.LASF439:
 13159 4d29 5F53495A 		.ascii	"_SIZE_T_ \000"
 13159      455F545F 
 13159      2000
 13160              	.LASF414:
 13161 4d33 5F444F54 		.ascii	"_DOTS , ...\000"
 13161      53202C20 
 13161      2E2E2E00 
 13162              	.LASF122:
 13163 4d3f 5F5F464C 		.ascii	"__FLT_RADIX__ 2\000"
 13163      545F5241 
 13163      4449585F 
 13163      5F203200 
 13164              	.LASF1127:
 13165 4d4f 6C6F6E67 		.ascii	"long long int\000"
 13165      206C6F6E 
 13165      6720696E 
 13165      7400
 13166              	.LASF550:
 13167 4d5d 5F524545 		.ascii	"_REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._m"
 13167      4E545F52 
 13167      414E4434 
 13167      385F4D55 
 13167      4C542870 
 13168 4d90 756C7429 		.ascii	"ult)\000"
 13168      00
 13169              	.LASF788:
 13170 4d95 494E5436 		.ascii	"INT64_MAX (__INT64_MAX__)\000"
 13170      345F4D41 
 13170      5820285F 
 13170      5F494E54 
 13170      36345F4D 
 13171              	.LASF848:
 13172 4daf 636F6E66 		.ascii	"configQUEUE_REGISTRY_SIZE 10\000"
 13172      69675155 
 13172      4555455F 
 13172      52454749 
 13172      53545259 
 13173              	.LASF1028:
 13174 4dcc 78517565 		.ascii	"xQueueSetHandle QueueSetHandle_t\000"
 13174      75655365 
 13174      7448616E 
 13174      646C6520 
 13174      51756575 
 13175              	.LASF783:
 13176 4ded 55494E54 		.ascii	"UINT32_MAX (__UINT32_MAX__)\000"
 13176      33325F4D 
 13176      41582028 
 13176      5F5F5549 
 13176      4E543332 
 13177              	.LASF164:
 13178 4e09 5F5F4C44 		.ascii	"__LDBL_HAS_QUIET_NAN__ 1\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 346


 13178      424C5F48 
 13178      41535F51 
 13178      55494554 
 13178      5F4E414E 
 13179              	.LASF1219:
 13180 4e22 78596965 		.ascii	"xYieldRequired\000"
 13180      6C645265 
 13180      71756972 
 13180      656400
 13181              	.LASF839:
 13182 4e31 636F6E66 		.ascii	"configUSE_16_BIT_TICKS 0\000"
 13182      69675553 
 13182      455F3136 
 13182      5F424954 
 13182      5F544943 
 13183              	.LASF474:
 13184 4e4a 5F505452 		.ascii	"_PTRDIFF_T \000"
 13184      44494646 
 13184      5F542000 
 13185              	.LASF1269:
 13186 4e56 7072764C 		.ascii	"prvListTaskWithinSingleList\000"
 13186      69737454 
 13186      61736B57 
 13186      69746869 
 13186      6E53696E 
 13187              	.LASF56:
 13188 4e72 5F5F494E 		.ascii	"__INT_FAST32_TYPE__ int\000"
 13188      545F4641 
 13188      53543332 
 13188      5F545950 
 13188      455F5F20 
 13189              	.LASF857:
 13190 4e8a 494E434C 		.ascii	"INCLUDE_uxTaskGetStackHighWaterMark 1\000"
 13190      5544455F 
 13190      75785461 
 13190      736B4765 
 13190      74537461 
 13191              	.LASF866:
 13192 4eb0 636F6E66 		.ascii	"configPRIO_BITS 5\000"
 13192      69675052 
 13192      494F5F42 
 13192      49545320 
 13192      3500
 13193              	.LASF543:
 13194 4ec2 5F524545 		.ascii	"_REENT_CHECK_ASCTIME_BUF(ptr) \000"
 13194      4E545F43 
 13194      4845434B 
 13194      5F415343 
 13194      54494D45 
 13195              	.LASF1059:
 13196 4ee1 6C697374 		.ascii	"listLIST_IS_INITIALISED(pxList) ( ( pxList )->xList"
 13196      4C495354 
 13196      5F49535F 
 13196      494E4954 
 13196      49414C49 
 13197 4f14 456E642E 		.ascii	"End.xItemValue == portMAX_DELAY )\000"
 13197      78497465 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 347


 13197      6D56616C 
 13197      7565203D 
 13197      3D20706F 
 13198              	.LASF868:
 13199 4f36 636F6E66 		.ascii	"configMAX_SYSCALL_INTERRUPT_PRIORITY ( 5 << (8 - co"
 13199      69674D41 
 13199      585F5359 
 13199      5343414C 
 13199      4C5F494E 
 13200 4f69 6E666967 		.ascii	"nfigPRIO_BITS) )\000"
 13200      5052494F 
 13200      5F424954 
 13200      53292029 
 13200      00
 13201              	.LASF509:
 13202 4f7a 5F5F6C6F 		.ascii	"__lock_release(lock) (_CAST_VOID 0)\000"
 13202      636B5F72 
 13202      656C6561 
 13202      7365286C 
 13202      6F636B29 
 13203              	.LASF665:
 13204 4f9e 5F5F7374 		.ascii	"__strftimelike(fmtarg,firstvararg) __attribute__((_"
 13204      72667469 
 13204      6D656C69 
 13204      6B652866 
 13204      6D746172 
 13205 4fd1 5F666F72 		.ascii	"_format__ (__strftime__, fmtarg, firstvararg)))\000"
 13205      6D61745F 
 13205      5F20285F 
 13205      5F737472 
 13205      6674696D 
 13206              	.LASF455:
 13207 5001 5F5F5743 		.ascii	"__WCHAR_T \000"
 13207      4841525F 
 13207      542000
 13208              	.LASF376:
 13209 500c 5F5F5359 		.ascii	"__SYS_CONFIG_H__ \000"
 13209      535F434F 
 13209      4E464947 
 13209      5F485F5F 
 13209      2000
 13210              	.LASF706:
 13211 501e 4D425F43 		.ascii	"MB_CUR_MAX __locale_mb_cur_max()\000"
 13211      55525F4D 
 13211      4158205F 
 13211      5F6C6F63 
 13211      616C655F 
 13212              	.LASF590:
 13213 503f 5F5F7074 		.ascii	"__ptrvalue \000"
 13213      7276616C 
 13213      75652000 
 13214              	.LASF438:
 13215 504b 5F5F5349 		.ascii	"__SIZE_T \000"
 13215      5A455F54 
 13215      2000
 13216              	.LASF370:
 13217 5055 5F484156 		.ascii	"_HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 348


 13217      455F4343 
 13217      5F494E48 
 13217      49424954 
 13217      5F4C4F4F 
 13218              	.LASF125:
 13219 5078 5F5F464C 		.ascii	"__FLT_MIN_EXP__ (-125)\000"
 13219      545F4D49 
 13219      4E5F4558 
 13219      505F5F20 
 13219      282D3132 
 13220              	.LASF41:
 13221 508f 5F5F494E 		.ascii	"__INT64_TYPE__ long long int\000"
 13221      5436345F 
 13221      54595045 
 13221      5F5F206C 
 13221      6F6E6720 
 13222              	.LASF206:
 13223 50ac 5F5F4C46 		.ascii	"__LFRACT_FBIT__ 31\000"
 13223      52414354 
 13223      5F464249 
 13223      545F5F20 
 13223      333100
 13224              	.LASF21:
 13225 50bf 5F5F4348 		.ascii	"__CHAR_BIT__ 8\000"
 13225      41525F42 
 13225      49545F5F 
 13225      203800
 13226              	.LASF894:
 13227 50ce 706F7274 		.ascii	"portNVIC_INT_CTRL_REG ( * ( ( volatile uint32_t * )"
 13227      4E564943 
 13227      5F494E54 
 13227      5F435452 
 13227      4C5F5245 
 13228 5101 20307865 		.ascii	" 0xe000ed04 ) )\000"
 13228      30303065 
 13228      64303420 
 13228      29202900 
 13229              	.LASF323:
 13230 5111 5F5F5349 		.ascii	"__SIZEOF_WCHAR_T__ 4\000"
 13230      5A454F46 
 13230      5F574348 
 13230      41525F54 
 13230      5F5F2034 
 13231              	.LASF1145:
 13232 5126 784C4953 		.ascii	"xLIST_ITEM\000"
 13232      545F4954 
 13232      454D00
 13233              	.LASF389:
 13234 5131 5F5F4253 		.ascii	"__BSD_VISIBLE 1\000"
 13234      445F5649 
 13234      5349424C 
 13234      45203100 
 13235              	.LASF778:
 13236 5141 494E545F 		.ascii	"INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)\000"
 13236      4C454153 
 13236      5431365F 
 13236      4D494E20 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 349


 13236      282D5F5F 
 13237              	.LASF629:
 13238 516c 5F5F756E 		.ascii	"__unused __attribute__((__unused__))\000"
 13238      75736564 
 13238      205F5F61 
 13238      74747269 
 13238      62757465 
 13239              	.LASF970:
 13240 5191 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) \000"
 13240      65515545 
 13240      55455F52 
 13240      45434549 
 13240      56455F46 
 13241              	.LASF565:
 13242 51be 5F524545 		.ascii	"_REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mb"
 13242      4E545F4D 
 13242      42535254 
 13242      4F574353 
 13242      5F535441 
 13243 51f1 7372746F 		.ascii	"srtowcs_state)\000"
 13243      7763735F 
 13243      73746174 
 13243      652900
 13244              	.LASF204:
 13245 5200 5F5F5546 		.ascii	"__UFRACT_MAX__ 0XFFFFP-16UR\000"
 13245      52414354 
 13245      5F4D4158 
 13245      5F5F2030 
 13245      58464646 
 13246              	.LASF496:
 13247 521c 5F5F5F69 		.ascii	"___int_least64_t_defined 1\000"
 13247      6E745F6C 
 13247      65617374 
 13247      36345F74 
 13247      5F646566 
 13248              	.LASF637:
 13249 5237 5F416C69 		.ascii	"_Alignof(x) __alignof(x)\000"
 13249      676E6F66 
 13249      28782920 
 13249      5F5F616C 
 13249      69676E6F 
 13250              	.LASF580:
 13251 5250 5F5F5448 		.ascii	"__THROW \000"
 13251      524F5720 
 13251      00
 13252              	.LASF294:
 13253 5259 5F5F5548 		.ascii	"__UHA_FBIT__ 8\000"
 13253      415F4642 
 13253      49545F5F 
 13253      203800
 13254              	.LASF1166:
 13255 5268 756C4C65 		.ascii	"ulLengthInBytes\000"
 13255      6E677468 
 13255      496E4279 
 13255      74657300 
 13256              	.LASF96:
 13257 5278 5F5F494E 		.ascii	"__INT_LEAST32_MAX__ 0x7fffffffL\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 350


 13257      545F4C45 
 13257      41535433 
 13257      325F4D41 
 13257      585F5F20 
 13258              	.LASF187:
 13259 5298 5F5F5346 		.ascii	"__SFRACT_IBIT__ 0\000"
 13259      52414354 
 13259      5F494249 
 13259      545F5F20 
 13259      3000
 13260              	.LASF568:
 13261 52aa 5F524545 		.ascii	"_REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)"
 13261      4E545F4C 
 13261      3634415F 
 13261      42554628 
 13261      70747229 
 13262 52dd 00       		.ascii	"\000"
 13263              	.LASF387:
 13264 52de 5F415446 		.ascii	"_ATFILE_SOURCE 1\000"
 13264      494C455F 
 13264      534F5552 
 13264      43452031 
 13264      00
 13265              	.LASF714:
 13266 52ef 5F5F5354 		.ascii	"__STDINT_EXP(x) __ ##x ##__\000"
 13266      44494E54 
 13266      5F455850 
 13266      28782920 
 13266      5F5F2023 
 13267              	.LASF488:
 13268 530b 5F5F4558 		.ascii	"__EXP(x) __ ##x ##__\000"
 13268      50287829 
 13268      205F5F20 
 13268      23237820 
 13268      23235F5F 
 13269              	.LASF26:
 13270 5320 5F5F4259 		.ascii	"__BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 13270      54455F4F 
 13270      52444552 
 13270      5F5F205F 
 13270      5F4F5244 
 13271              	.LASF1235:
 13272 5347 75784172 		.ascii	"uxArraySize\000"
 13272      72617953 
 13272      697A6500 
 13273              	.LASF1288:
 13274 5353 70785265 		.ascii	"pxReadyTasksLists\000"
 13274      61647954 
 13274      61736B73 
 13274      4C697374 
 13274      7300
 13275              	.LASF407:
 13276 5365 5F4E4F54 		.ascii	"_NOTHROW \000"
 13276      48524F57 
 13276      2000
 13277              	.LASF357:
 13278 536f 5F414E53 		.ascii	"_ANSIDECL_H_ \000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 351


 13278      49444543 
 13278      4C5F485F 
 13278      2000
 13279              	.LASF891:
 13280 537d 706F7274 		.ascii	"portSTACK_GROWTH ( -1 )\000"
 13280      53544143 
 13280      4B5F4752 
 13280      4F575448 
 13280      2028202D 
 13281              	.LASF904:
 13282 5395 706F7274 		.ascii	"portEXIT_CRITICAL() vPortExitCritical()\000"
 13282      45584954 
 13282      5F435249 
 13282      54494341 
 13282      4C282920 
 13283              	.LASF1154:
 13284 53bd 6552756E 		.ascii	"eRunning\000"
 13284      6E696E67 
 13284      00
 13285              	.LASF394:
 13286 53c6 5F5F504F 		.ascii	"__POSIX_VISIBLE 200809\000"
 13286      5349585F 
 13286      56495349 
 13286      424C4520 
 13286      32303038 
 13287              	.LASF1027:
 13288 53dd 7853656D 		.ascii	"xSemaphoreHandle SemaphoreHandle_t\000"
 13288      6170686F 
 13288      72654861 
 13288      6E646C65 
 13288      2053656D 
 13289              	.LASF201:
 13290 5400 5F5F5546 		.ascii	"__UFRACT_FBIT__ 16\000"
 13290      52414354 
 13290      5F464249 
 13290      545F5F20 
 13290      313600
 13291              	.LASF1042:
 13292 5413 494E435F 		.ascii	"INC_TASK_H \000"
 13292      5441534B 
 13292      5F482000 
 13293              	.LASF282:
 13294 541f 5F5F5544 		.ascii	"__UDQ_FBIT__ 64\000"
 13294      515F4642 
 13294      49545F5F 
 13294      20363400 
 13295              	.LASF610:
 13296 542f 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_MEMCPY 1\000"
 13296      55434C49 
 13296      4B455F42 
 13296      55494C54 
 13296      494E5F4D 
 13297              	.LASF156:
 13298 544b 5F5F4C44 		.ascii	"__LDBL_MAX_10_EXP__ 308\000"
 13298      424C5F4D 
 13298      41585F31 
 13298      305F4558 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 352


 13298      505F5F20 
 13299              	.LASF844:
 13300 5463 636F6E66 		.ascii	"configUSE_COUNTING_SEMAPHORES 1\000"
 13300      69675553 
 13300      455F434F 
 13300      554E5449 
 13300      4E475F53 
 13301              	.LASF1061:
 13302 5483 74736B4B 		.ascii	"tskKERNEL_VERSION_MAJOR 8\000"
 13302      45524E45 
 13302      4C5F5645 
 13302      5253494F 
 13302      4E5F4D41 
 13303              	.LASF910:
 13304 549d 706F7274 		.ascii	"portRESET_READY_PRIORITY(uxPriority,uxReadyPrioriti"
 13304      52455345 
 13304      545F5245 
 13304      4144595F 
 13304      5052494F 
 13305 54d0 65732920 		.ascii	"es) ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority"
 13305      28207578 
 13305      52656164 
 13305      79507269 
 13305      6F726974 
 13306 5503 20292029 		.ascii	" ) )\000"
 13306      00
 13307              	.LASF169:
 13308 5508 5F5F4445 		.ascii	"__DEC32_MAX__ 9.999999E96DF\000"
 13308      4333325F 
 13308      4D41585F 
 13308      5F20392E 
 13308      39393939 
 13309              	.LASF1205:
 13310 5524 7854696D 		.ascii	"xTimeToWake\000"
 13310      65546F57 
 13310      616B6500 
 13311              	.LASF1024:
 13312 5530 706F7274 		.ascii	"portTickType TickT_t\000"
 13312      5469636B 
 13312      54797065 
 13312      20546963 
 13312      6B545F74 
 13313              	.LASF770:
 13314 5545 494E5438 		.ascii	"INT8_MAX (__INT8_MAX__)\000"
 13314      5F4D4158 
 13314      20285F5F 
 13314      494E5438 
 13314      5F4D4158 
 13315              	.LASF754:
 13316 555d 5F55494E 		.ascii	"_UINT64_T_DECLARED \000"
 13316      5436345F 
 13316      545F4445 
 13316      434C4152 
 13316      45442000 
 13317              	.LASF1116:
 13318 5571 756E7369 		.ascii	"unsigned int\000"
 13318      676E6564 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 353


 13318      20696E74 
 13318      00
 13319              	.LASF441:
 13320 557e 5F53495A 		.ascii	"_SIZE_T_DEFINED_ \000"
 13320      455F545F 
 13320      44454649 
 13320      4E45445F 
 13320      2000
 13321              	.LASF739:
 13322 5590 5F5F4C45 		.ascii	"__LEAST8 \"hh\"\000"
 13322      41535438 
 13322      20226868 
 13322      2200
 13323              	.LASF362:
 13324 559e 5F5F4E45 		.ascii	"__NEWLIB_MINOR__ 4\000"
 13324      574C4942 
 13324      5F4D494E 
 13324      4F525F5F 
 13324      203400
 13325              	.LASF121:
 13326 55b1 5F5F4445 		.ascii	"__DEC_EVAL_METHOD__ 2\000"
 13326      435F4556 
 13326      414C5F4D 
 13326      4554484F 
 13326      445F5F20 
 13327              	.LASF822:
 13328 55c7 55494E54 		.ascii	"UINT32_C(x) __UINT32_C(x)\000"
 13328      33325F43 
 13328      28782920 
 13328      5F5F5549 
 13328      4E543332 
 13329              	.LASF232:
 13330 55e1 5F5F5553 		.ascii	"__USACCUM_IBIT__ 8\000"
 13330      41434355 
 13330      4D5F4942 
 13330      49545F5F 
 13330      203800
 13331              	.LASF1011:
 13332 55f4 636F6E66 		.ascii	"configUSE_TICKLESS_IDLE 0\000"
 13332      69675553 
 13332      455F5449 
 13332      434B4C45 
 13332      53535F49 
 13333              	.LASF1068:
 13334 560e 7461736B 		.ascii	"taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()\000"
 13334      44495341 
 13334      424C455F 
 13334      494E5445 
 13334      52525550 
 13335              	.LASF793:
 13336 5640 494E545F 		.ascii	"INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)\000"
 13336      46415354 
 13336      385F4D49 
 13336      4E20282D 
 13336      5F5F494E 
 13337              	.LASF652:
 13338 5667 5F5F7265 		.ascii	"__restrict \000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 354


 13338      73747269 
 13338      63742000 
 13339              	.LASF654:
 13340 5673 5F5F7072 		.ascii	"__predict_false(exp) __builtin_expect((exp), 0)\000"
 13340      65646963 
 13340      745F6661 
 13340      6C736528 
 13340      65787029 
 13341              	.LASF262:
 13342 56a3 5F5F554C 		.ascii	"__ULLACCUM_IBIT__ 32\000"
 13342      4C414343 
 13342      554D5F49 
 13342      4249545F 
 13342      5F203332 
 13343              	.LASF245:
 13344 56b8 5F5F5541 		.ascii	"__UACCUM_EPSILON__ 0x1P-16UK\000"
 13344      4343554D 
 13344      5F455053 
 13344      494C4F4E 
 13344      5F5F2030 
 13345              	.LASF372:
 13346 56d5 5F465657 		.ascii	"_FVWRITE_IN_STREAMIO 1\000"
 13346      52495445 
 13346      5F494E5F 
 13346      53545245 
 13346      414D494F 
 13347              	.LASF464:
 13348 56ec 5F574348 		.ascii	"_WCHAR_T_DECLARED \000"
 13348      41525F54 
 13348      5F444543 
 13348      4C415245 
 13348      442000
 13349              	.LASF1279:
 13350 56ff 70727644 		.ascii	"prvDeleteTCB\000"
 13350      656C6574 
 13350      65544342 
 13350      00
 13351              	.LASF87:
 13352 570c 5F5F494E 		.ascii	"__INT64_MAX__ 0x7fffffffffffffffLL\000"
 13352      5436345F 
 13352      4D41585F 
 13352      5F203078 
 13352      37666666 
 13353              	.LASF470:
 13354 572f 5F535953 		.ascii	"_SYS_REENT_H_ \000"
 13354      5F524545 
 13354      4E545F48 
 13354      5F2000
 13355              	.LASF120:
 13356 573e 5F5F464C 		.ascii	"__FLT_EVAL_METHOD__ 0\000"
 13356      545F4556 
 13356      414C5F4D 
 13356      4554484F 
 13356      445F5F20 
 13357              	.LASF1121:
 13358 5754 73686F72 		.ascii	"short int\000"
 13358      7420696E 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 355


 13358      7400
 13359              	.LASF797:
 13360 575e 494E545F 		.ascii	"INT_FAST16_MAX (__INT_FAST16_MAX__)\000"
 13360      46415354 
 13360      31365F4D 
 13360      41582028 
 13360      5F5F494E 
 13361              	.LASF1006:
 13362 5782 706F7274 		.ascii	"portPRIVILEGE_BIT ( ( UBaseT_t ) 0x00 )\000"
 13362      50524956 
 13362      494C4547 
 13362      455F4249 
 13362      54202820 
 13363              	.LASF1149:
 13364 57aa 75784E75 		.ascii	"uxNumberOfItems\000"
 13364      6D626572 
 13364      4F664974 
 13364      656D7300 
 13365              	.LASF67:
 13366 57ba 5F5F5343 		.ascii	"__SCHAR_MAX__ 0x7f\000"
 13366      4841525F 
 13366      4D41585F 
 13366      5F203078 
 13366      376600
 13367              	.LASF732:
 13368 57cd 5F5F494E 		.ascii	"__INT16 \"h\"\000"
 13368      54313620 
 13368      22682200 
 13369              	.LASF532:
 13370 57d9 5F52414E 		.ascii	"_RAND48_MULT_2 (0x0005)\000"
 13370      4434385F 
 13370      4D554C54 
 13370      5F322028 
 13370      30783030 
 13371              	.LASF416:
 13372 57f1 5F455846 		.ascii	"_EXFUN_NOTHROW(name,proto) name proto _NOTHROW\000"
 13372      554E5F4E 
 13372      4F544852 
 13372      4F57286E 
 13372      616D652C 
 13373              	.LASF1274:
 13374 5820 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 13374      61736B43 
 13374      6865636B 
 13374      46726565 
 13374      53746163 
 13375              	.LASF476:
 13376 583b 5F545F50 		.ascii	"_T_PTRDIFF \000"
 13376      54524449 
 13376      46462000 
 13377              	.LASF276:
 13378 5847 5F5F5551 		.ascii	"__UQQ_FBIT__ 8\000"
 13378      515F4642 
 13378      49545F5F 
 13378      203800
 13379              	.LASF1250:
 13380 5856 7078556E 		.ascii	"pxUnblockedTCB\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 356


 13380      626C6F63 
 13380      6B656454 
 13380      434200
 13381              	.LASF1083:
 13382 5865 746D7243 		.ascii	"tmrCOMMAND_DELETE ( ( BaseT_t ) 5 )\000"
 13382      4F4D4D41 
 13382      4E445F44 
 13382      454C4554 
 13382      45202820 
 13383              	.LASF1267:
 13384 5889 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 13384      61736B49 
 13384      73546173 
 13384      6B537573 
 13384      70656E64 
 13385              	.LASF173:
 13386 58a0 5F5F4445 		.ascii	"__DEC64_MIN_EXP__ (-382)\000"
 13386      4336345F 
 13386      4D494E5F 
 13386      4558505F 
 13386      5F20282D 
 13387              	.LASF244:
 13388 58b9 5F5F5541 		.ascii	"__UACCUM_MAX__ 0XFFFFFFFFP-16UK\000"
 13388      4343554D 
 13388      5F4D4158 
 13388      5F5F2030 
 13388      58464646 
 13389              	.LASF518:
 13390 58d9 5F54494D 		.ascii	"_TIME_T_ long\000"
 13390      455F545F 
 13390      206C6F6E 
 13390      6700
 13391              	.LASF1070:
 13392 58e7 7461736B 		.ascii	"taskSCHEDULER_SUSPENDED ( ( BaseT_t ) 0 )\000"
 13392      53434845 
 13392      44554C45 
 13392      525F5355 
 13392      5350454E 
 13393              	.LASF1187:
 13394 5911 75784D75 		.ascii	"uxMutexesHeld\000"
 13394      74657865 
 13394      7348656C 
 13394      6400
 13395              	.LASF1277:
 13396 591f 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 13396      736B4765 
 13396      74537461 
 13396      636B4869 
 13396      67685761 
 13397              	.LASF700:
 13398 593b 616C6C6F 		.ascii	"alloca\000"
 13398      636100
 13399              	.LASF209:
 13400 5942 5F5F4C46 		.ascii	"__LFRACT_MAX__ 0X7FFFFFFFP-31LR\000"
 13400      52414354 
 13400      5F4D4158 
 13400      5F5F2030 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 357


 13400      58374646 
 13401              	.LASF325:
 13402 5962 5F5F5349 		.ascii	"__SIZEOF_PTRDIFF_T__ 4\000"
 13402      5A454F46 
 13402      5F505452 
 13402      44494646 
 13402      5F545F5F 
 13403              	.LASF897:
 13404 5979 706F7274 		.ascii	"portEND_SWITCHING_ISR(xSwitchRequired) if( xSwitchR"
 13404      454E445F 
 13404      53574954 
 13404      4348494E 
 13404      475F4953 
 13405 59ac 65717569 		.ascii	"equired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSE"
 13405      72656420 
 13405      2920706F 
 13405      72744E56 
 13405      49435F49 
 13406 59df 545F4249 		.ascii	"T_BIT\000"
 13406      5400
 13407              	.LASF482:
 13408 59e5 5F505452 		.ascii	"_PTRDIFF_T_DECLARED \000"
 13408      44494646 
 13408      5F545F44 
 13408      45434C41 
 13408      52454420 
 13409              	.LASF493:
 13410 59fa 5F5F5F69 		.ascii	"___int_least8_t_defined 1\000"
 13410      6E745F6C 
 13410      65617374 
 13410      385F745F 
 13410      64656669 
 13411              	.LASF350:
 13412 5a14 5F5F4152 		.ascii	"__ARM_FEATURE_IDIV 1\000"
 13412      4D5F4645 
 13412      41545552 
 13412      455F4944 
 13412      49562031 
 13413              	.LASF1153:
 13414 5a29 5461736B 		.ascii	"TaskHandle_t\000"
 13414      48616E64 
 13414      6C655F74 
 13414      00
 13415              	.LASF27:
 13416 5a36 5F5F464C 		.ascii	"__FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 13416      4F41545F 
 13416      574F5244 
 13416      5F4F5244 
 13416      45525F5F 
 13417              	.LASF835:
 13418 5a63 636F6E66 		.ascii	"configMINIMAL_STACK_SIZE ( ( unsigned short ) 256 )"
 13418      69674D49 
 13418      4E494D41 
 13418      4C5F5354 
 13418      41434B5F 
 13419 5a96 00       		.ascii	"\000"
 13420              	.LASF463:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 358


 13421 5a97 5F474343 		.ascii	"_GCC_WCHAR_T \000"
 13421      5F574348 
 13421      41525F54 
 13421      2000
 13422              	.LASF538:
 13423 5aa5 5F524545 		.ascii	"_REENT_INIT(var) { 0, &(var).__sf[0], &(var).__sf[1"
 13423      4E545F49 
 13423      4E495428 
 13423      76617229 
 13423      207B2030 
 13424 5ad8 5D2C2026 		.ascii	"], &(var).__sf[2], 0, \"\", 0, _NULL, 0, _NULL, _NU"
 13424      28766172 
 13424      292E5F5F 
 13424      73665B32 
 13424      5D2C2030 
 13425 5b09 4C4C2C20 		.ascii	"LL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, \"\", "
 13425      302C205F 
 13425      4E554C4C 
 13425      2C205F4E 
 13425      554C4C2C 
 13426 5b3a 7B302C20 		.ascii	"{0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_"
 13426      302C2030 
 13426      2C20302C 
 13426      20302C20 
 13426      302C2030 
 13427 5b6d 302C205F 		.ascii	"0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0"
 13427      52414E44 
 13427      34385F53 
 13427      4545445F 
 13427      312C205F 
 13428 5ba0 2C205F52 		.ascii	", _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {"
 13428      414E4434 
 13428      385F4D55 
 13428      4C545F31 
 13428      2C205F52 
 13429 5bd3 302C207B 		.ascii	"0, {0}}, {0, {0}}, {0, {0}}, \"\", \"\", 0, {0, {0}"
 13429      307D7D2C 
 13429      207B302C 
 13429      207B307D 
 13429      7D2C207B 
 13430 5c02 7D2C207B 		.ascii	"}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REE"
 13430      302C207B 
 13430      307D7D2C 
 13430      207B302C 
 13430      207B307D 
 13431 5c35 4E545F49 		.ascii	"NT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }\000"
 13431      4E49545F 
 13431      41544558 
 13431      4954205F 
 13431      4E554C4C 
 13432              	.LASF689:
 13433 5c5f 5F5F756E 		.ascii	"__unlocks(...) __lock_annotate(unlock_function(__VA"
 13433      6C6F636B 
 13433      73282E2E 
 13433      2E29205F 
 13433      5F6C6F63 
 13434 5c92 5F415247 		.ascii	"_ARGS__))\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 359


 13434      535F5F29 
 13434      2900
 13435              	.LASF1081:
 13436 5c9c 746D7243 		.ascii	"tmrCOMMAND_STOP ( ( BaseT_t ) 3 )\000"
 13436      4F4D4D41 
 13436      4E445F53 
 13436      544F5020 
 13436      28202820 
 13437              	.LASF37:
 13438 5cbe 5F5F5349 		.ascii	"__SIG_ATOMIC_TYPE__ int\000"
 13438      475F4154 
 13438      4F4D4943 
 13438      5F545950 
 13438      455F5F20 
 13439              	.LASF607:
 13440 5cd6 5F5F636F 		.ascii	"__compiler_membar() __asm __volatile(\" \" : : : \""
 13440      6D70696C 
 13440      65725F6D 
 13440      656D6261 
 13440      72282920 
 13441 5d06 6D656D6F 		.ascii	"memory\")\000"
 13441      72792229 
 13441      00
 13442              	.LASF956:
 13443 5d0f 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 13443      65474956 
 13443      455F4D55 
 13443      5445585F 
 13443      52454355 
 13444              	.LASF763:
 13445 5d3a 5F5F696E 		.ascii	"__int_fast16_t_defined 1\000"
 13445      745F6661 
 13445      73743136 
 13445      5F745F64 
 13445      6566696E 
 13446              	.LASF1152:
 13447 5d53 4C697374 		.ascii	"List_t\000"
 13447      5F7400
 13448              	.LASF975:
 13449 5d5a 74726163 		.ascii	"traceTASK_DELETE(pxTaskToDelete) \000"
 13449      65544153 
 13449      4B5F4445 
 13449      4C455445 
 13449      28707854 
 13450              	.LASF179:
 13451 5d7c 5F5F4445 		.ascii	"__DEC128_MANT_DIG__ 34\000"
 13451      43313238 
 13451      5F4D414E 
 13451      545F4449 
 13451      475F5F20 
 13452              	.LASF375:
 13453 5d93 5F554E42 		.ascii	"_UNBUF_STREAM_OPT 1\000"
 13453      55465F53 
 13453      54524541 
 13453      4D5F4F50 
 13453      54203100 
 13454              	.LASF401:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 360


 13455 5da7 5F5F494D 		.ascii	"__IMPORT \000"
 13455      504F5254 
 13455      2000
 13456              	.LASF523:
 13457 5db1 5F415445 		.ascii	"_ATEXIT_SIZE 32\000"
 13457      5849545F 
 13457      53495A45 
 13457      20333200 
 13458              	.LASF296:
 13459 5dc1 5F5F5553 		.ascii	"__USA_FBIT__ 16\000"
 13459      415F4642 
 13459      49545F5F 
 13459      20313600 
 13460              	.LASF1247:
 13461 5dd1 78546963 		.ascii	"xTicksToWait\000"
 13461      6B73546F 
 13461      57616974 
 13461      00
 13462              	.LASF501:
 13463 5dde 5F5F6C6F 		.ascii	"__lock_init(lock) (_CAST_VOID 0)\000"
 13463      636B5F69 
 13463      6E697428 
 13463      6C6F636B 
 13463      2920285F 
 13464              	.LASF356:
 13465 5dff 5F5F4945 		.ascii	"__IEEE_LITTLE_ENDIAN \000"
 13465      45455F4C 
 13465      4954544C 
 13465      455F454E 
 13465      4449414E 
 13466              	.LASF154:
 13467 5e15 5F5F4C44 		.ascii	"__LDBL_MIN_10_EXP__ (-307)\000"
 13467      424C5F4D 
 13467      494E5F31 
 13467      305F4558 
 13467      505F5F20 
 13468              	.LASF1124:
 13469 5e30 6C6F6E67 		.ascii	"long int\000"
 13469      20696E74 
 13469      00
 13470              	.LASF1229:
 13471 5e39 78546173 		.ascii	"xTaskResumeAll\000"
 13471      6B526573 
 13471      756D6541 
 13471      6C6C00
 13472              	.LASF899:
 13473 5e48 706F7274 		.ascii	"portSET_INTERRUPT_MASK_FROM_ISR() ulPortSetInterrup"
 13473      5345545F 
 13473      494E5445 
 13473      52525550 
 13473      545F4D41 
 13474 5e7b 744D6173 		.ascii	"tMask()\000"
 13474      6B282900 
 13475              	.LASF311:
 13476 5e83 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR_LOCK_FREE 2\000"
 13476      435F4154 
 13476      4F4D4943 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 361


 13476      5F434841 
 13476      525F4C4F 
 13477              	.LASF418:
 13478 5ea1 5F455850 		.ascii	"_EXPARM(name,proto) (* name) proto\000"
 13478      41524D28 
 13478      6E616D65 
 13478      2C70726F 
 13478      746F2920 
 13479              	.LASF210:
 13480 5ec4 5F5F4C46 		.ascii	"__LFRACT_EPSILON__ 0x1P-31LR\000"
 13480      52414354 
 13480      5F455053 
 13480      494C4F4E 
 13480      5F5F2030 
 13481              	.LASF405:
 13482 5ee1 5F424547 		.ascii	"_BEGIN_STD_C \000"
 13482      494E5F53 
 13482      54445F43 
 13482      2000
 13483              	.LASF973:
 13484 5eef 74726163 		.ascii	"traceTASK_CREATE(pxNewTCB) \000"
 13484      65544153 
 13484      4B5F4352 
 13484      45415445 
 13484      2870784E 
 13485              	.LASF642:
 13486 5f0b 5F5F6D61 		.ascii	"__malloc_like __attribute__((__malloc__))\000"
 13486      6C6C6F63 
 13486      5F6C696B 
 13486      65205F5F 
 13486      61747472 
 13487              	.LASF843:
 13488 5f35 636F6E66 		.ascii	"configMAX_CO_ROUTINE_PRIORITIES ( 2 )\000"
 13488      69674D41 
 13488      585F434F 
 13488      5F524F55 
 13488      54494E45 
 13489              	.LASF907:
 13490 5f5b 706F7274 		.ascii	"portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPo"
 13490      53555050 
 13490      52455353 
 13490      5F544943 
 13490      4B535F41 
 13491 5f8e 72745375 		.ascii	"rtSuppressTicksAndSleep( xExpectedIdleTime )\000"
 13491      70707265 
 13491      73735469 
 13491      636B7341 
 13491      6E64536C 
 13492              	.LASF332:
 13493 5fbb 5F5F4152 		.ascii	"__ARM_SIZEOF_MINIMAL_ENUM 1\000"
 13493      4D5F5349 
 13493      5A454F46 
 13493      5F4D494E 
 13493      494D414C 
 13494              	.LASF397:
 13495 5fd7 5F504F49 		.ascii	"_POINTER_INT long\000"
 13495      4E544552 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 362


 13495      5F494E54 
 13495      206C6F6E 
 13495      6700
 13496              	.LASF969:
 13497 5fe9 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR(pxQueue) \000"
 13497      65515545 
 13497      55455F52 
 13497      45434549 
 13497      56455F46 
 13498              	.LASF335:
 13499 600f 5F5F6172 		.ascii	"__arm__ 1\000"
 13499      6D5F5F20 
 13499      3100
 13500              	.LASF1063:
 13501 6019 74736B4B 		.ascii	"tskKERNEL_VERSION_BUILD 2\000"
 13501      45524E45 
 13501      4C5F5645 
 13501      5253494F 
 13501      4E5F4255 
 13502              	.LASF948:
 13503 6033 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) \000"
 13503      65424C4F 
 13503      434B494E 
 13503      475F4F4E 
 13503      5F515545 
 13504              	.LASF1151:
 13505 605c 784C6973 		.ascii	"xListEnd\000"
 13505      74456E64 
 13505      00
 13506              	.LASF981:
 13507 6065 74726163 		.ascii	"traceTASK_RESUME_FROM_ISR(pxTaskToResume) \000"
 13507      65544153 
 13507      4B5F5245 
 13507      53554D45 
 13507      5F46524F 
 13508              	.LASF604:
 13509 6090 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_STDARG 1\000"
 13509      55434C49 
 13509      4B455F42 
 13509      55494C54 
 13509      494E5F53 
 13510              	.LASF445:
 13511 60ac 5F5F5F69 		.ascii	"___int_size_t_h \000"
 13511      6E745F73 
 13511      697A655F 
 13511      745F6820 
 13511      00
 13512              	.LASF399:
 13513 60bd 5F5F5241 		.ascii	"__RAND_MAX 0x7fffffff\000"
 13513      4E445F4D 
 13513      41582030 
 13513      78376666 
 13513      66666666 
 13514              	.LASF1208:
 13515 60d3 78436F6E 		.ascii	"xConstTickCount\000"
 13515      73745469 
 13515      636B436F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 363


 13515      756E7400 
 13516              	.LASF621:
 13517 60e3 5F5F5354 		.ascii	"__STRING(x) #x\000"
 13517      52494E47 
 13517      28782920 
 13517      237800
 13518              	.LASF452:
 13519 60f2 5F574348 		.ascii	"_WCHAR_T \000"
 13519      41525F54 
 13519      2000
 13520              	.LASF934:
 13521 60fc 494E434C 		.ascii	"INCLUDE_xTaskGetCurrentTaskHandle 0\000"
 13521      5544455F 
 13521      78546173 
 13521      6B476574 
 13521      43757272 
 13522              	.LASF673:
 13523 6120 5F5F4642 		.ascii	"__FBSDID(s) struct __hack\000"
 13523      53444944 
 13523      28732920 
 13523      73747275 
 13523      6374205F 
 13524              	.LASF1156:
 13525 613a 65426C6F 		.ascii	"eBlocked\000"
 13525      636B6564 
 13525      00
 13526              	.LASF932:
 13527 6143 636F6E66 		.ascii	"configASSERT_DEFINED 1\000"
 13527      69674153 
 13527      53455254 
 13527      5F444546 
 13527      494E4544 
 13528              	.LASF802:
 13529 615a 494E545F 		.ascii	"INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)\000"
 13529      46415354 
 13529      36345F4D 
 13529      494E2028 
 13529      2D5F5F49 
 13530              	.LASF873:
 13531 6183 70645452 		.ascii	"pdTRUE ( ( BaseT_t ) 1 )\000"
 13531      55452028 
 13531      20282042 
 13531      61736554 
 13531      5F742029 
 13532              	.LASF487:
 13533 619c 5F4D4143 		.ascii	"_MACHINE__DEFAULT_TYPES_H \000"
 13533      48494E45 
 13533      5F5F4445 
 13533      4641554C 
 13533      545F5459 
 13534              	.LASF22:
 13535 61b7 5F5F4249 		.ascii	"__BIGGEST_ALIGNMENT__ 8\000"
 13535      47474553 
 13535      545F414C 
 13535      49474E4D 
 13535      454E545F 
 13536              	.LASF233:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 364


 13537 61cf 5F5F5553 		.ascii	"__USACCUM_MIN__ 0.0UHK\000"
 13537      41434355 
 13537      4D5F4D49 
 13537      4E5F5F20 
 13537      302E3055 
 13538              	.LASF481:
 13539 61e6 5F474343 		.ascii	"_GCC_PTRDIFF_T \000"
 13539      5F505452 
 13539      44494646 
 13539      5F542000 
 13540              	.LASF608:
 13541 61f6 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_NEXT_ARG 1\000"
 13541      55434C49 
 13541      4B455F42 
 13541      55494C54 
 13541      494E5F4E 
 13542              	.LASF850:
 13543 6214 494E434C 		.ascii	"INCLUDE_vTaskPrioritySet 1\000"
 13543      5544455F 
 13543      76546173 
 13543      6B507269 
 13543      6F726974 
 13544              	.LASF293:
 13545 622f 5F5F5441 		.ascii	"__TA_IBIT__ 64\000"
 13545      5F494249 
 13545      545F5F20 
 13545      363400
 13546              	.LASF856:
 13547 623e 494E434C 		.ascii	"INCLUDE_vTaskDelay 1\000"
 13547      5544455F 
 13547      76546173 
 13547      6B44656C 
 13547      61792031 
 13548              	.LASF1212:
 13549 6253 75785461 		.ascii	"uxTaskPriorityGet\000"
 13549      736B5072 
 13549      696F7269 
 13549      74794765 
 13549      7400
 13550              	.LASF1177:
 13551 6265 75735374 		.ascii	"usStackHighWaterMark\000"
 13551      61636B48 
 13551      69676857 
 13551      61746572 
 13551      4D61726B 
 13552              	.LASF718:
 13553 627a 63686172 		.ascii	"char\000"
 13553      00
 13554              	.LASF499:
 13555 627f 5F5F4C4F 		.ascii	"__LOCK_INIT(class,lock) static int lock = 0;\000"
 13555      434B5F49 
 13555      4E495428 
 13555      636C6173 
 13555      732C6C6F 
 13556              	.LASF1207:
 13557 62ac 7853686F 		.ascii	"xShouldDelay\000"
 13557      756C6444 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 365


 13557      656C6179 
 13557      00
 13558              	.LASF460:
 13559 62b9 5F574348 		.ascii	"_WCHAR_T_H \000"
 13559      41525F54 
 13559      5F482000 
 13560              	.LASF876:
 13561 62c5 65727251 		.ascii	"errQUEUE_EMPTY ( ( BaseT_t ) 0 )\000"
 13561      55455545 
 13561      5F454D50 
 13561      54592028 
 13561      20282042 
 13562              	.LASF1025:
 13563 62e6 78546173 		.ascii	"xTaskHandle TaskHandle_t\000"
 13563      6B48616E 
 13563      646C6520 
 13563      5461736B 
 13563      48616E64 
 13564              	.LASF1079:
 13565 62ff 746D7243 		.ascii	"tmrCOMMAND_START ( ( BaseT_t ) 1 )\000"
 13565      4F4D4D41 
 13565      4E445F53 
 13565      54415254 
 13565      20282028 
 13566              	.LASF922:
 13567 6322 494E434C 		.ascii	"INCLUDE_xQueueGetMutexHolder 0\000"
 13567      5544455F 
 13567      78517565 
 13567      75654765 
 13567      744D7574 
 13568              	.LASF340:
 13569 6341 5F5F4152 		.ascii	"__ARM_ARCH_ISA_THUMB 2\000"
 13569      4D5F4152 
 13569      43485F49 
 13569      53415F54 
 13569      48554D42 
 13570              	.LASF71:
 13571 6358 5F5F4C4F 		.ascii	"__LONG_LONG_MAX__ 0x7fffffffffffffffLL\000"
 13571      4E475F4C 
 13571      4F4E475F 
 13571      4D41585F 
 13571      5F203078 
 13572              	.LASF373:
 13573 637f 5F465345 		.ascii	"_FSEEK_OPTIMIZATION 1\000"
 13573      454B5F4F 
 13573      5054494D 
 13573      495A4154 
 13573      494F4E20 
 13574              	.LASF777:
 13575 6395 55494E54 		.ascii	"UINT16_MAX (__UINT16_MAX__)\000"
 13575      31365F4D 
 13575      41582028 
 13575      5F5F5549 
 13575      4E543136 
 13576              	.LASF1102:
 13577 63b1 74736B49 		.ascii	"tskIDLE_STACK_SIZE configMINIMAL_STACK_SIZE\000"
 13577      444C455F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 366


 13577      53544143 
 13577      4B5F5349 
 13577      5A452063 
 13578              	.LASF681:
 13579 63dd 5F5F6172 		.ascii	"__arg_type_tag(arg_kind,arg_idx,type_tag_idx) \000"
 13579      675F7479 
 13579      70655F74 
 13579      61672861 
 13579      72675F6B 
 13580              	.LASF1010:
 13581 640c 636F6E66 		.ascii	"configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2\000"
 13581      69674558 
 13581      50454354 
 13581      45445F49 
 13581      444C455F 
 13582              	.LASF1172:
 13583 6434 78546173 		.ascii	"xTaskNumber\000"
 13583      6B4E756D 
 13583      62657200 
 13584              	.LASF719:
 13585 6440 73686F72 		.ascii	"short\000"
 13585      7400
 13586              	.LASF571:
 13587 6446 5F524545 		.ascii	"_REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(va"
 13587      4E545F49 
 13587      4E49545F 
 13587      50545228 
 13587      76617229 
 13588 6479 72292929 		.ascii	"r))); _REENT_INIT_PTR_ZEROED(var); }\000"
 13588      3B205F52 
 13588      45454E54 
 13588      5F494E49 
 13588      545F5054 
 13589              	.LASF677:
 13590 649e 5F5F434F 		.ascii	"__COPYRIGHT(s) struct __hack\000"
 13590      50595249 
 13590      47485428 
 13590      73292073 
 13590      74727563 
 13591              	.LASF202:
 13592 64bb 5F5F5546 		.ascii	"__UFRACT_IBIT__ 0\000"
 13592      52414354 
 13592      5F494249 
 13592      545F5F20 
 13592      3000
 13593              	.LASF329:
 13594 64cd 5F5F4152 		.ascii	"__ARM_32BIT_STATE 1\000"
 13594      4D5F3332 
 13594      4249545F 
 13594      53544154 
 13594      45203100 
 13595              	.LASF1220:
 13596 64e1 76546173 		.ascii	"vTaskSuspend\000"
 13596      6B537573 
 13596      70656E64 
 13596      00
 13597              	.LASF655:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 367


 13598 64ee 5F5F7365 		.ascii	"__sentinel __attribute__((__sentinel__))\000"
 13598      6E74696E 
 13598      656C205F 
 13598      5F617474 
 13598      72696275 
 13599              	.LASF93:
 13600 6517 5F5F494E 		.ascii	"__INT8_C(c) c\000"
 13600      54385F43 
 13600      28632920 
 13600      6300
 13601              	.LASF207:
 13602 6525 5F5F4C46 		.ascii	"__LFRACT_IBIT__ 0\000"
 13602      52414354 
 13602      5F494249 
 13602      545F5F20 
 13602      3000
 13603              	.LASF841:
 13604 6537 636F6E66 		.ascii	"configUSE_CO_ROUTINES 0\000"
 13604      69675553 
 13604      455F434F 
 13604      5F524F55 
 13604      54494E45 
 13605              	.LASF472:
 13606 654f 5F535444 		.ascii	"_STDDEF_H_ \000"
 13606      4445465F 
 13606      485F2000 
 13607              	.LASF1218:
 13608 655b 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 13608      696F7269 
 13608      74795573 
 13608      65644F6E 
 13608      456E7472 
 13609              	.LASF139:
 13610 6571 5F5F4442 		.ascii	"__DBL_MIN_EXP__ (-1021)\000"
 13610      4C5F4D49 
 13610      4E5F4558 
 13610      505F5F20 
 13610      282D3130 
 13611              	.LASF1282:
 13612 6589 76546173 		.ascii	"vTaskPriorityInherit\000"
 13612      6B507269 
 13612      6F726974 
 13612      79496E68 
 13612      65726974 
 13613              	.LASF920:
 13614 659e 494E434C 		.ascii	"INCLUDE_xTaskGetIdleTaskHandle 0\000"
 13614      5544455F 
 13614      78546173 
 13614      6B476574 
 13614      49646C65 
 13615              	.LASF1171:
 13616 65bf 70635461 		.ascii	"pcTaskName\000"
 13616      736B4E61 
 13616      6D6500
 13617              	.LASF711:
 13618 65ca 494E435F 		.ascii	"INC_FREERTOS_H \000"
 13618      46524545 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 368


 13618      52544F53 
 13618      5F482000 
 13619              	.LASF667:
 13620 65da 5F5F7072 		.ascii	"__printf0like(fmtarg,firstvararg) \000"
 13620      696E7466 
 13620      306C696B 
 13620      6528666D 
 13620      74617267 
 13621              	.LASF1004:
 13622 65fd 706F7274 		.ascii	"portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() \000"
 13622      434F4E46 
 13622      49475552 
 13622      455F5449 
 13622      4D45525F 
 13623              	.LASF725:
 13624 6627 73686F72 		.ascii	"short +1\000"
 13624      74202B31 
 13624      00
 13625              	.LASF508:
 13626 6630 5F5F6C6F 		.ascii	"__lock_try_acquire_recursive(lock) (_CAST_VOID 0)\000"
 13626      636B5F74 
 13626      72795F61 
 13626      63717569 
 13626      72655F72 
 13627              	.LASF627:
 13628 6662 5F5F6465 		.ascii	"__dead2 __attribute__((__noreturn__))\000"
 13628      61643220 
 13628      5F5F6174 
 13628      74726962 
 13628      7574655F 
 13629              	.LASF742:
 13630 6688 5F5F4C45 		.ascii	"__LEAST64 \"ll\"\000"
 13630      41535436 
 13630      3420226C 
 13630      6C2200
 13631              	.LASF896:
 13632 6697 706F7274 		.ascii	"portYIELD() vPortYield()\000"
 13632      5949454C 
 13632      44282920 
 13632      76506F72 
 13632      74596965 
 13633              	.LASF826:
 13634 66b0 55494E54 		.ascii	"UINTMAX_C(x) __UINTMAX_C(x)\000"
 13634      4D41585F 
 13634      43287829 
 13634      205F5F55 
 13634      494E544D 
 13635              	.LASF393:
 13636 66cc 5F5F4D49 		.ascii	"__MISC_VISIBLE 1\000"
 13636      53435F56 
 13636      49534942 
 13636      4C452031 
 13636      00
 13637              	.LASF1048:
 13638 66dd 6C697374 		.ascii	"listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem "
 13638      4745545F 
 13638      4C495354 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 369


 13638      5F495445 
 13638      4D5F5641 
 13639 6710 292D3E78 		.ascii	")->xItemValue )\000"
 13639      4974656D 
 13639      56616C75 
 13639      65202900 
 13640              	.LASF497:
 13641 6720 5F5F4558 		.ascii	"__EXP\000"
 13641      5000
 13642              	.LASF492:
 13643 6726 5F5F5F69 		.ascii	"___int64_t_defined 1\000"
 13643      6E743634 
 13643      5F745F64 
 13643      6566696E 
 13643      65642031 
 13644              	.LASF162:
 13645 673b 5F5F4C44 		.ascii	"__LDBL_HAS_DENORM__ 1\000"
 13645      424C5F48 
 13645      41535F44 
 13645      454E4F52 
 13645      4D5F5F20 
 13646              	.LASF833:
 13647 6751 636F6E66 		.ascii	"configCPU_CLOCK_HZ ( ( unsigned long )120000000ul )"
 13647      69674350 
 13647      555F434C 
 13647      4F434B5F 
 13647      485A2028 
 13648 6784 00       		.ascii	"\000"
 13649              	.LASF1179:
 13650 6785 74736B54 		.ascii	"tskTaskControlBlock\000"
 13650      61736B43 
 13650      6F6E7472 
 13650      6F6C426C 
 13650      6F636B00 
 13651              	.LASF1204:
 13652 6799 7854696D 		.ascii	"xTimeIncrement\000"
 13652      65496E63 
 13652      72656D65 
 13652      6E7400
 13653              	.LASF594:
 13654 67a8 5F5F4245 		.ascii	"__BEGIN_DECLS \000"
 13654      47494E5F 
 13654      4445434C 
 13654      532000
 13655              	.LASF107:
 13656 67b7 5F5F5549 		.ascii	"__UINT64_C(c) c ## ULL\000"
 13656      4E543634 
 13656      5F432863 
 13656      29206320 
 13656      23232055 
 13657              	.LASF545:
 13658 67ce 5F524545 		.ascii	"_REENT_CHECK_MISC(ptr) \000"
 13658      4E545F43 
 13658      4845434B 
 13658      5F4D4953 
 13658      43287074 
 13659              	.LASF1209:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 370


 13660 67e6 76546173 		.ascii	"vTaskDelay\000"
 13660      6B44656C 
 13660      617900
 13661              	.LASF606:
 13662 67f1 5F5F474E 		.ascii	"__GNUC_VA_LIST_COMPATIBILITY 1\000"
 13662      55435F56 
 13662      415F4C49 
 13662      53545F43 
 13662      4F4D5041 
 13663              	.LASF1041:
 13664 6810 784C6973 		.ascii	"xList List_t\000"
 13664      74204C69 
 13664      73745F74 
 13664      00
 13665              	.LASF48:
 13666 681d 5F5F494E 		.ascii	"__INT_LEAST32_TYPE__ long int\000"
 13666      545F4C45 
 13666      41535433 
 13666      325F5459 
 13666      50455F5F 
 13667              	.LASF1029:
 13668 683b 78517565 		.ascii	"xQueueSetMemberHandle QueueSetMemberHandle_t\000"
 13668      75655365 
 13668      744D656D 
 13668      62657248 
 13668      616E646C 
 13669              	.LASF1030:
 13670 6868 7854696D 		.ascii	"xTimeOutType TimeOut_t\000"
 13670      654F7574 
 13670      54797065 
 13670      2054696D 
 13670      654F7574 
 13671              	.LASF977:
 13672 687f 74726163 		.ascii	"traceTASK_DELAY() \000"
 13672      65544153 
 13672      4B5F4445 
 13672      4C415928 
 13672      292000
 13673              	.LASF984:
 13674 6892 74726163 		.ascii	"traceTIMER_CREATE_FAILED() \000"
 13674      6554494D 
 13674      45525F43 
 13674      52454154 
 13674      455F4641 
 13675              	.LASF1091:
 13676 68ae 7854696D 		.ascii	"xTimerChangePeriod(xTimer,xNewPeriod,xTicksToWait) "
 13676      65724368 
 13676      616E6765 
 13676      50657269 
 13676      6F642878 
 13677 68e1 7854696D 		.ascii	"xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE"
 13677      65724765 
 13677      6E657269 
 13677      63436F6D 
 13677      6D616E64 
 13678 6914 5F504552 		.ascii	"_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )\000"
 13678      494F442C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 371


 13678      20282078 
 13678      4E657750 
 13678      6572696F 
 13679              	.LASF1243:
 13680 6946 7578546F 		.ascii	"uxTopPriority\000"
 13680      70507269 
 13680      6F726974 
 13680      7900
 13681              	.LASF106:
 13682 6954 5F5F5549 		.ascii	"__UINT_LEAST64_MAX__ 0xffffffffffffffffULL\000"
 13682      4E545F4C 
 13682      45415354 
 13682      36345F4D 
 13682      41585F5F 
 13683              	.LASF1234:
 13684 697f 70785461 		.ascii	"pxTaskStatusArray\000"
 13684      736B5374 
 13684      61747573 
 13684      41727261 
 13684      7900
 13685              	.LASF197:
 13686 6991 5F5F4652 		.ascii	"__FRACT_IBIT__ 0\000"
 13686      4143545F 
 13686      49424954 
 13686      5F5F2030 
 13686      00
 13687              	.LASF999:
 13688 69a2 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup,uxBi"
 13688      65455645 
 13688      4E545F47 
 13688      524F5550 
 13688      5F534554 
 13689 69d5 7473546F 		.ascii	"tsToSet) \000"
 13689      53657429 
 13689      2000
 13690              	.LASF1038:
 13691 69df 746D7254 		.ascii	"tmrTIMER_CALLBACK TimerCallbackFunction_t\000"
 13691      494D4552 
 13691      5F43414C 
 13691      4C424143 
 13691      4B205469 
 13692              	.LASF363:
 13693 6a09 5F5F4E45 		.ascii	"__NEWLIB_PATCHLEVEL__ 0\000"
 13693      574C4942 
 13693      5F504154 
 13693      43484C45 
 13693      56454C5F 
 13694              	.LASF23:
 13695 6a21 5F5F4F52 		.ascii	"__ORDER_LITTLE_ENDIAN__ 1234\000"
 13695      4445525F 
 13695      4C495454 
 13695      4C455F45 
 13695      4E444941 
 13696              	.LASF511:
 13697 6a3e 5F5F7369 		.ascii	"__size_t\000"
 13697      7A655F74 
 13697      00
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 372


 13698              	.LASF611:
 13699 6a47 5F5F4343 		.ascii	"__CC_SUPPORTS_INLINE 1\000"
 13699      5F535550 
 13699      504F5254 
 13699      535F494E 
 13699      4C494E45 
 13700              	.LASF579:
 13701 6a5e 5F5F444F 		.ascii	"__DOTS , ...\000"
 13701      5453202C 
 13701      202E2E2E 
 13701      00
 13702              	.LASF172:
 13703 6a6b 5F5F4445 		.ascii	"__DEC64_MANT_DIG__ 16\000"
 13703      4336345F 
 13703      4D414E54 
 13703      5F444947 
 13703      5F5F2031 
 13704              	.LASF1128:
 13705 6a81 6C6F6E67 		.ascii	"long long unsigned int\000"
 13705      206C6F6E 
 13705      6720756E 
 13705      7369676E 
 13705      65642069 
 13706              	.LASF792:
 13707 6a98 55494E54 		.ascii	"UINT_LEAST64_MAX (__UINT_LEAST64_MAX__)\000"
 13707      5F4C4541 
 13707      53543634 
 13707      5F4D4158 
 13707      20285F5F 
 13708              	.LASF126:
 13709 6ac0 5F5F464C 		.ascii	"__FLT_MIN_10_EXP__ (-37)\000"
 13709      545F4D49 
 13709      4E5F3130 
 13709      5F455850 
 13709      5F5F2028 
 13710              	.LASF252:
 13711 6ad9 5F5F554C 		.ascii	"__ULACCUM_IBIT__ 32\000"
 13711      41434355 
 13711      4D5F4942 
 13711      49545F5F 
 13711      20333200 
 13712              	.LASF1252:
 13713 6aed 70784576 		.ascii	"pxEventListItem\000"
 13713      656E744C 
 13713      69737449 
 13713      74656D00 
 13714              	.LASF68:
 13715 6afd 5F5F5348 		.ascii	"__SHRT_MAX__ 0x7fff\000"
 13715      52545F4D 
 13715      41585F5F 
 13715      20307837 
 13715      66666600 
 13716              	.LASF795:
 13717 6b11 55494E54 		.ascii	"UINT_FAST8_MAX (__UINT_FAST8_MAX__)\000"
 13717      5F464153 
 13717      54385F4D 
 13717      41582028 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 373


 13717      5F5F5549 
 13718              	.LASF265:
 13719 6b35 5F5F554C 		.ascii	"__ULLACCUM_EPSILON__ 0x1P-32ULLK\000"
 13719      4C414343 
 13719      554D5F45 
 13719      5053494C 
 13719      4F4E5F5F 
 13720              	.LASF486:
 13721 6b56 5F4D4143 		.ascii	"_MACHINE__TYPES_H \000"
 13721      48494E45 
 13721      5F5F5459 
 13721      5045535F 
 13721      482000
 13722              	.LASF272:
 13723 6b69 5F5F4451 		.ascii	"__DQ_FBIT__ 63\000"
 13723      5F464249 
 13723      545F5F20 
 13723      363300
 13724              	.LASF390:
 13725 6b78 5F5F474E 		.ascii	"__GNU_VISIBLE 0\000"
 13725      555F5649 
 13725      5349424C 
 13725      45203000 
 13726              	.LASF1131:
 13727 6b88 75696E74 		.ascii	"uint16_t\000"
 13727      31365F74 
 13727      00
 13728              	.LASF477:
 13729 6b91 5F5F5054 		.ascii	"__PTRDIFF_T \000"
 13729      52444946 
 13729      465F5420 
 13729      00
 13730              	.LASF1216:
 13731 6b9e 75784E65 		.ascii	"uxNewPriority\000"
 13731      77507269 
 13731      6F726974 
 13731      7900
 13732              	.LASF1092:
 13733 6bac 7854696D 		.ascii	"xTimerDelete(xTimer,xTicksToWait) xTimerGenericComm"
 13733      65724465 
 13733      6C657465 
 13733      28785469 
 13733      6D65722C 
 13734 6bdf 616E6428 		.ascii	"and( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTi"
 13734      20282078 
 13734      54696D65 
 13734      7220292C 
 13734      20746D72 
 13735 6c12 636B7354 		.ascii	"cksToWait ) )\000"
 13735      6F576169 
 13735      74202920 
 13735      2900
 13736              	.LASF562:
 13737 6c20 5F524545 		.ascii	"_REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctom"
 13737      4E545F57 
 13737      43544F4D 
 13737      425F5354 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 374


 13737      41544528 
 13738 6c53 625F7374 		.ascii	"b_state)\000"
 13738      61746529 
 13738      00
 13739              	.LASF1009:
 13740 6c5c 76506F72 		.ascii	"vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockT"
 13740      74467265 
 13740      65416C69 
 13740      676E6564 
 13740      28707642 
 13741 6c8f 6F467265 		.ascii	"oFree )\000"
 13741      65202900 
 13742              	.LASF992:
 13743 6c97 74726163 		.ascii	"traceEVENT_GROUP_SYNC_BLOCK(xEventGroup,uxBitsToSet"
 13743      65455645 
 13743      4E545F47 
 13743      524F5550 
 13743      5F53594E 
 13744 6cca 2C757842 		.ascii	",uxBitsToWaitFor) \000"
 13744      69747354 
 13744      6F576169 
 13744      74466F72 
 13744      292000
 13745              	.LASF1126:
 13746 6cdd 6C6F6E67 		.ascii	"long unsigned int\000"
 13746      20756E73 
 13746      69676E65 
 13746      6420696E 
 13746      7400
 13747              	.LASF55:
 13748 6cef 5F5F494E 		.ascii	"__INT_FAST16_TYPE__ int\000"
 13748      545F4641 
 13748      53543136 
 13748      5F545950 
 13748      455F5F20 
 13749              	.LASF987:
 13750 6d07 74726163 		.ascii	"traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMes"
 13750      6554494D 
 13750      45525F43 
 13750      4F4D4D41 
 13750      4E445F52 
 13751 6d3a 73616765 		.ascii	"sageValue) \000"
 13751      56616C75 
 13751      65292000 
 13752              	.LASF877:
 13753 6d46 65727251 		.ascii	"errQUEUE_FULL ( ( BaseT_t ) 0 )\000"
 13753      55455545 
 13753      5F46554C 
 13753      4C202820 
 13753      28204261 
 13754              	.LASF228:
 13755 6d66 5F5F5341 		.ascii	"__SACCUM_MIN__ (-0X1P7HK-0X1P7HK)\000"
 13755      4343554D 
 13755      5F4D494E 
 13755      5F5F2028 
 13755      2D305831 
 13756              	.LASF214:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 375


 13757 6d88 5F5F554C 		.ascii	"__ULFRACT_MAX__ 0XFFFFFFFFP-32ULR\000"
 13757      46524143 
 13757      545F4D41 
 13757      585F5F20 
 13757      30584646 
 13758              	.LASF865:
 13759 6daa 636F6E66 		.ascii	"configNET_MASK3 0\000"
 13759      69674E45 
 13759      545F4D41 
 13759      534B3320 
 13759      3000
 13760              	.LASF1239:
 13761 6dbc 78546173 		.ascii	"xTaskIncrementTick\000"
 13761      6B496E63 
 13761      72656D65 
 13761      6E745469 
 13761      636B00
 13762              	.LASF890:
 13763 6dcf 706F7274 		.ascii	"portMAX_DELAY ( TickType_t ) 0xffffffffUL\000"
 13763      4D41585F 
 13763      44454C41 
 13763      59202820 
 13763      5469636B 
 13764              	.LASF249:
 13765 6df9 5F5F4C41 		.ascii	"__LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK\000"
 13765      4343554D 
 13765      5F4D4158 
 13765      5F5F2030 
 13765      58374646 
 13766              	.LASF35:
 13767 6e21 5F5F4348 		.ascii	"__CHAR16_TYPE__ short unsigned int\000"
 13767      41523136 
 13767      5F545950 
 13767      455F5F20 
 13767      73686F72 
 13768              	.LASF563:
 13769 6e44 5F524545 		.ascii	"_REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrle"
 13769      4E545F4D 
 13769      42524C45 
 13769      4E5F5354 
 13769      41544528 
 13770 6e77 6E5F7374 		.ascii	"n_state)\000"
 13770      61746529 
 13770      00
 13771              	.LASF624:
 13772 6e80 5F5F7369 		.ascii	"__signed signed\000"
 13772      676E6564 
 13772      20736967 
 13772      6E656400 
 13773              	.LASF721:
 13774 6e90 6C6F6E67 		.ascii	"long\000"
 13774      00
 13775              	.LASF284:
 13776 6e95 5F5F5554 		.ascii	"__UTQ_FBIT__ 128\000"
 13776      515F4642 
 13776      49545F5F 
 13776      20313238 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 376


 13776      00
 13777              	.LASF1266:
 13778 6ea6 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 13778      64644375 
 13778      7272656E 
 13778      74546173 
 13778      6B546F44 
 13779              	.LASF556:
 13780 6ec5 5F524545 		.ascii	"_REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctim"
 13780      4E545F41 
 13780      53435449 
 13780      4D455F42 
 13780      55462870 
 13781 6ef8 655F6275 		.ascii	"e_buf)\000"
 13781      662900
 13782              	.LASF1089:
 13783 6eff 7854696D 		.ascii	"xTimerStart(xTimer,xTicksToWait) xTimerGenericComma"
 13783      65725374 
 13783      61727428 
 13783      7854696D 
 13783      65722C78 
 13784 6f32 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCou"
 13784      28207854 
 13784      696D6572 
 13784      20292C20 
 13784      746D7243 
 13785 6f65 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 13785      20292C20 
 13785      4E554C4C 
 13785      2C202820 
 13785      78546963 
 13786              	.LASF889:
 13787 6f86 706F7274 		.ascii	"portBASE_TYPE long\000"
 13787      42415345 
 13787      5F545950 
 13787      45206C6F 
 13787      6E6700
 13788              	.LASF12:
 13789 6f99 5F5F4649 		.ascii	"__FINITE_MATH_ONLY__ 0\000"
 13789      4E495445 
 13789      5F4D4154 
 13789      485F4F4E 
 13789      4C595F5F 
 13790              	.LASF1141:
 13791 6fb0 70785072 		.ascii	"pxPrevious\000"
 13791      6576696F 
 13791      757300
 13792              	.LASF109:
 13793 6fbb 5F5F494E 		.ascii	"__INT_FAST16_MAX__ 0x7fffffff\000"
 13793      545F4641 
 13793      53543136 
 13793      5F4D4158 
 13793      5F5F2030 
 13794              	.LASF715:
 13795 6fd9 5F5F6861 		.ascii	"__have_longlong64 1\000"
 13795      76655F6C 
 13795      6F6E676C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 377


 13795      6F6E6736 
 13795      34203100 
 13796              	.LASF745:
 13797 6fed 5F55494E 		.ascii	"_UINT8_T_DECLARED \000"
 13797      54385F54 
 13797      5F444543 
 13797      4C415245 
 13797      442000
 13798              	.LASF554:
 13799 7000 5F524545 		.ascii	"_REENT_MP_P5S(ptr) ((ptr)->_p5s)\000"
 13799      4E545F4D 
 13799      505F5035 
 13799      53287074 
 13799      72292028 
 13800              	.LASF1202:
 13801 7021 76546173 		.ascii	"vTaskDelayUntil\000"
 13801      6B44656C 
 13801      6179556E 
 13801      74696C00 
 13802              	.LASF757:
 13803 7031 5F55494E 		.ascii	"_UINTPTR_T_DECLARED \000"
 13803      54505452 
 13803      5F545F44 
 13803      45434C41 
 13803      52454420 
 13804              	.LASF1222:
 13805 7046 76546173 		.ascii	"vTaskResume\000"
 13805      6B526573 
 13805      756D6500 
 13806              	.LASF459:
 13807 7052 5F574348 		.ascii	"_WCHAR_T_DEFINED \000"
 13807      41525F54 
 13807      5F444546 
 13807      494E4544 
 13807      2000
 13808              	.LASF1002:
 13809 7064 74726163 		.ascii	"tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend,pvPara"
 13809      6550454E 
 13809      445F4655 
 13809      4E435F43 
 13809      414C4C5F 
 13810 7097 6D657465 		.ascii	"meter1,ulParameter2,ret) \000"
 13810      72312C75 
 13810      6C506172 
 13810      616D6574 
 13810      6572322C 
 13811              	.LASF1227:
 13812 70b1 76546173 		.ascii	"vTaskEndScheduler\000"
 13812      6B456E64 
 13812      53636865 
 13812      64756C65 
 13812      7200
 13813              	.LASF687:
 13814 70c3 5F5F7472 		.ascii	"__trylocks_exclusive(...) __lock_annotate(exclusive"
 13814      796C6F63 
 13814      6B735F65 
 13814      78636C75 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 378


 13814      73697665 
 13815 70f6 5F747279 		.ascii	"_trylock_function(__VA_ARGS__))\000"
 13815      6C6F636B 
 13815      5F66756E 
 13815      6374696F 
 13815      6E285F5F 
 13816              	.LASF916:
 13817 7116 4D50555F 		.ascii	"MPU_WRAPPERS_H \000"
 13817      57524150 
 13817      50455253 
 13817      5F482000 
 13818              	.LASF1307:
 13819 7126 46726565 		.ascii	"FreeRTOS/tasks.c\000"
 13819      52544F53 
 13819      2F746173 
 13819      6B732E63 
 13819      00
 13820              	.LASF1137:
 13821 7137 5469636B 		.ascii	"TickType_t\000"
 13821      54797065 
 13821      5F7400
 13822              	.LASF213:
 13823 7142 5F5F554C 		.ascii	"__ULFRACT_MIN__ 0.0ULR\000"
 13823      46524143 
 13823      545F4D49 
 13823      4E5F5F20 
 13823      302E3055 
 13824              	.LASF808:
 13825 7159 53495A45 		.ascii	"SIZE_MAX (__SIZE_MAX__)\000"
 13825      5F4D4158 
 13825      20285F5F 
 13825      53495A45 
 13825      5F4D4158 
 13826              	.LASF273:
 13827 7171 5F5F4451 		.ascii	"__DQ_IBIT__ 0\000"
 13827      5F494249 
 13827      545F5F20 
 13827      3000
 13828              	.LASF566:
 13829 717f 5F524545 		.ascii	"_REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrt"
 13829      4E545F57 
 13829      4352544F 
 13829      4D425F53 
 13829      54415445 
 13830 71b2 6F6D625F 		.ascii	"omb_state)\000"
 13830      73746174 
 13830      652900
 13831              	.LASF1264:
 13832 71bd 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 13832      6865636B 
 13832      5461736B 
 13832      73576169 
 13832      74696E67 
 13833              	.LASF309:
 13834 71dd 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1\000"
 13834      435F4841 
 13834      56455F53 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 379


 13834      594E435F 
 13834      434F4D50 
 13835              	.LASF746:
 13836 7202 5F5F696E 		.ascii	"__int8_t_defined 1\000"
 13836      74385F74 
 13836      5F646566 
 13836      696E6564 
 13836      203100
 13837              	.LASF660:
 13838 7215 5F5F636F 		.ascii	"__containerof(x,s,m) ({ const volatile __typeof(((s"
 13838      6E746169 
 13838      6E65726F 
 13838      6628782C 
 13838      732C6D29 
 13839 7248 202A2930 		.ascii	" *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volat"
 13839      292D3E6D 
 13839      29202A5F 
 13839      5F78203D 
 13839      20287829 
 13840 727b 696C6520 		.ascii	"ile char *)__x - __offsetof(s, m));})\000"
 13840      63686172 
 13840      202A295F 
 13840      5F78202D 
 13840      205F5F6F 
 13841              	.LASF1077:
 13842 72a1 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK ( ( BaseT_t ) -1 )\000"
 13842      4F4D4D41 
 13842      4E445F45 
 13842      58454355 
 13842      54455F43 
 13843              	.LASF440:
 13844 72d0 5F425344 		.ascii	"_BSD_SIZE_T_ \000"
 13844      5F53495A 
 13844      455F545F 
 13844      2000
 13845              	.LASF695:
 13846 72de 5F5F6E6F 		.ascii	"__no_lock_analysis __lock_annotate(no_thread_safety"
 13846      5F6C6F63 
 13846      6B5F616E 
 13846      616C7973 
 13846      6973205F 
 13847 7311 5F616E61 		.ascii	"_analysis)\000"
 13847      6C797369 
 13847      732900
 13848              	.LASF456:
 13849 731c 5F574348 		.ascii	"_WCHAR_T_ \000"
 13849      41525F54 
 13849      5F2000
 13850              	.LASF753:
 13851 7327 5F494E54 		.ascii	"_INT64_T_DECLARED \000"
 13851      36345F54 
 13851      5F444543 
 13851      4C415245 
 13851      442000
 13852              	.LASF1203:
 13853 733a 70785072 		.ascii	"pxPreviousWakeTime\000"
 13853      6576696F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 380


 13853      75735761 
 13853      6B655469 
 13853      6D6500
 13854              	.LASF66:
 13855 734d 5F5F4758 		.ascii	"__GXX_ABI_VERSION 1009\000"
 13855      585F4142 
 13855      495F5645 
 13855      5253494F 
 13855      4E203130 
 13856              	.LASF1240:
 13857 7364 78537769 		.ascii	"xSwitchRequired\000"
 13857      74636852 
 13857      65717569 
 13857      72656400 
 13858              	.LASF454:
 13859 7374 5F545F57 		.ascii	"_T_WCHAR \000"
 13859      43484152 
 13859      2000
 13860              	.LASF1016:
 13861 737e 636F6E66 		.ascii	"configUSE_TIME_SLICING 1\000"
 13861      69675553 
 13861      455F5449 
 13861      4D455F53 
 13861      4C494349 
 13862              	.LASF1101:
 13863 7397 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE\000"
 13863      57524150 
 13863      50455253 
 13863      5F494E43 
 13863      4C554445 
 13864              	.LASF480:
 13865 73bb 5F5F5F69 		.ascii	"___int_ptrdiff_t_h \000"
 13865      6E745F70 
 13865      74726469 
 13865      66665F74 
 13865      5F682000 
 13866              	.LASF905:
 13867 73cf 706F7274 		.ascii	"portTASK_FUNCTION_PROTO(vFunction,pvParameters) voi"
 13867      5441534B 
 13867      5F46554E 
 13867      4354494F 
 13867      4E5F5052 
 13868 7402 64207646 		.ascii	"d vFunction( void *pvParameters )\000"
 13868      756E6374 
 13868      696F6E28 
 13868      20766F69 
 13868      64202A70 
 13869              	.LASF1054:
 13870 7424 6C697374 		.ascii	"listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNum"
 13870      43555252 
 13870      454E545F 
 13870      4C495354 
 13870      5F4C454E 
 13871 7457 6265724F 		.ascii	"berOfItems )\000"
 13871      66497465 
 13871      6D732029 
 13871      00
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 381


 13872              	.LASF701:
 13873 7464 616C6C6F 		.ascii	"alloca(size) __builtin_alloca(size)\000"
 13873      63612873 
 13873      697A6529 
 13873      205F5F62 
 13873      75696C74 
 13874              	.LASF519:
 13875 7488 5F434C4F 		.ascii	"_CLOCKID_T_ unsigned long\000"
 13875      434B4944 
 13875      5F545F20 
 13875      756E7369 
 13875      676E6564 
 13876              	.LASF542:
 13877 74a2 5F524545 		.ascii	"_REENT_CHECK_TM(ptr) \000"
 13877      4E545F43 
 13877      4845434B 
 13877      5F544D28 
 13877      70747229 
 13878              	.LASF285:
 13879 74b8 5F5F5554 		.ascii	"__UTQ_IBIT__ 0\000"
 13879      515F4942 
 13879      49545F5F 
 13879      203000
 13880              	.LASF288:
 13881 74c7 5F5F5341 		.ascii	"__SA_FBIT__ 15\000"
 13881      5F464249 
 13881      545F5F20 
 13881      313500
 13882              	.LASF462:
 13883 74d6 5F5F494E 		.ascii	"__INT_WCHAR_T_H \000"
 13883      545F5743 
 13883      4841525F 
 13883      545F4820 
 13883      00
 13884              	.LASF1000:
 13885 74e7 74726163 		.ascii	"traceEVENT_GROUP_DELETE(xEventGroup) \000"
 13885      65455645 
 13885      4E545F47 
 13885      524F5550 
 13885      5F44454C 
 13886              	.LASF422:
 13887 750d 5F434153 		.ascii	"_CAST_VOID (void)\000"
 13887      545F564F 
 13887      49442028 
 13887      766F6964 
 13887      2900
 13888              	.LASF814:
 13889 751f 57434841 		.ascii	"WCHAR_MAX (__WCHAR_MAX__)\000"
 13889      525F4D41 
 13889      5820285F 
 13889      5F574348 
 13889      41525F4D 
 13890              	.LASF929:
 13891 7539 494E434C 		.ascii	"INCLUDE_xTaskResumeFromISR 1\000"
 13891      5544455F 
 13891      78546173 
 13891      6B526573 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 382


 13891      756D6546 
 13892              	.LASF353:
 13893 7556 5F5F454C 		.ascii	"__ELF__ 1\000"
 13893      465F5F20 
 13893      3100
 13894              	.LASF781:
 13895 7560 494E5433 		.ascii	"INT32_MIN (-__INT32_MAX__ - 1)\000"
 13895      325F4D49 
 13895      4E20282D 
 13895      5F5F494E 
 13895      5433325F 
 13896              	.LASF342:
 13897 757f 5F5F5448 		.ascii	"__THUMBEL__ 1\000"
 13897      554D4245 
 13897      4C5F5F20 
 13897      3100
 13898              	.LASF1299:
 13899 758d 7578546F 		.ascii	"uxTopReadyPriority\000"
 13899      70526561 
 13899      64795072 
 13899      696F7269 
 13899      747900
 13900              	.LASF267:
 13901 75a0 5F5F5151 		.ascii	"__QQ_IBIT__ 0\000"
 13901      5F494249 
 13901      545F5F20 
 13901      3000
 13902              	.LASF963:
 13903 75ae 74726163 		.ascii	"traceQUEUE_RECEIVE(pxQueue) \000"
 13903      65515545 
 13903      55455F52 
 13903      45434549 
 13903      56452870 
 13904              	.LASF1039:
 13905 75cb 70645441 		.ascii	"pdTASK_CODE TaskFunction_t\000"
 13905      534B5F43 
 13905      4F444520 
 13905      5461736B 
 13905      46756E63 
 13906              	.LASF824:
 13907 75e6 55494E54 		.ascii	"UINT64_C(x) __UINT64_C(x)\000"
 13907      36345F43 
 13907      28782920 
 13907      5F5F5549 
 13907      4E543634 
 13908              	.LASF1206:
 13909 7600 78416C72 		.ascii	"xAlreadyYielded\000"
 13909      65616479 
 13909      5969656C 
 13909      64656400 
 13910              	.LASF1231:
 13911 7610 78546963 		.ascii	"xTicks\000"
 13911      6B7300
 13912              	.LASF34:
 13913 7617 5F5F5549 		.ascii	"__UINTMAX_TYPE__ long long unsigned int\000"
 13913      4E544D41 
 13913      585F5459 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 383


 13913      50455F5F 
 13913      206C6F6E 
 13914              	.LASF410:
 13915 763f 5F4E4F41 		.ascii	"_NOARGS void\000"
 13915      52475320 
 13915      766F6964 
 13915      00
 13916              	.LASF774:
 13917 764c 55494E54 		.ascii	"UINT_LEAST8_MAX (__UINT_LEAST8_MAX__)\000"
 13917      5F4C4541 
 13917      5354385F 
 13917      4D415820 
 13917      285F5F55 
 13918              	.LASF281:
 13919 7672 5F5F5553 		.ascii	"__USQ_IBIT__ 0\000"
 13919      515F4942 
 13919      49545F5F 
 13919      203000
 13920              	.LASF1067:
 13921 7681 7461736B 		.ascii	"taskEXIT_CRITICAL() portEXIT_CRITICAL()\000"
 13921      45584954 
 13921      5F435249 
 13921      54494341 
 13921      4C282920 
 13922              	.LASF3:
 13923 76a9 5F5F474E 		.ascii	"__GNUC_MINOR__ 4\000"
 13923      55435F4D 
 13923      494E4F52 
 13923      5F5F2034 
 13923      00
 13924              	.LASF52:
 13925 76ba 5F5F5549 		.ascii	"__UINT_LEAST32_TYPE__ long unsigned int\000"
 13925      4E545F4C 
 13925      45415354 
 13925      33325F54 
 13925      5950455F 
 13926              	.LASF279:
 13927 76e2 5F5F5548 		.ascii	"__UHQ_IBIT__ 0\000"
 13927      515F4942 
 13927      49545F5F 
 13927      203000
 13928              	.LASF692:
 13929 76f1 5F5F7265 		.ascii	"__requires_exclusive(...) __lock_annotate(exclusive"
 13929      71756972 
 13929      65735F65 
 13929      78636C75 
 13929      73697665 
 13930 7724 5F6C6F63 		.ascii	"_locks_required(__VA_ARGS__))\000"
 13930      6B735F72 
 13930      65717569 
 13930      72656428 
 13930      5F5F5641 
 13931              	.LASF531:
 13932 7742 5F52414E 		.ascii	"_RAND48_MULT_1 (0xdeec)\000"
 13932      4434385F 
 13932      4D554C54 
 13932      5F312028 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 384


 13932      30786465 
 13933              	.LASF33:
 13934 775a 5F5F494E 		.ascii	"__INTMAX_TYPE__ long long int\000"
 13934      544D4158 
 13934      5F545950 
 13934      455F5F20 
 13934      6C6F6E67 
 13935              	.LASF1015:
 13936 7778 706F7274 		.ascii	"portTASK_USES_FLOATING_POINT() \000"
 13936      5441534B 
 13936      5F555345 
 13936      535F464C 
 13936      4F415449 
 13937              	.LASF194:
 13938 7798 5F5F5553 		.ascii	"__USFRACT_MAX__ 0XFFP-8UHR\000"
 13938      46524143 
 13938      545F4D41 
 13938      585F5F20 
 13938      30584646 
 13939              	.LASF316:
 13940 77b3 5F5F4743 		.ascii	"__GCC_ATOMIC_INT_LOCK_FREE 2\000"
 13940      435F4154 
 13940      4F4D4943 
 13940      5F494E54 
 13940      5F4C4F43 
 13941              	.LASF527:
 13942 77d0 5F52414E 		.ascii	"_RAND48_SEED_0 (0x330e)\000"
 13942      4434385F 
 13942      53454544 
 13942      5F302028 
 13942      30783333 
 13943              	.LASF188:
 13944 77e8 5F5F5346 		.ascii	"__SFRACT_MIN__ (-0.5HR-0.5HR)\000"
 13944      52414354 
 13944      5F4D494E 
 13944      5F5F2028 
 13944      2D302E35 
 13945              	.LASF909:
 13946 7806 706F7274 		.ascii	"portRECORD_READY_PRIORITY(uxPriority,uxReadyPriorit"
 13946      5245434F 
 13946      52445F52 
 13946      45414459 
 13946      5F505249 
 13947 7839 69657329 		.ascii	"ies) ( uxReadyPriorities ) |= ( 1UL << ( uxPriority"
 13947      20282075 
 13947      78526561 
 13947      64795072 
 13947      696F7269 
 13948 786c 20292029 		.ascii	" ) )\000"
 13948      00
 13949              	.LASF522:
 13950 7871 5F5F4C6F 		.ascii	"__Long long\000"
 13950      6E67206C 
 13950      6F6E6700 
 13951              	.LASF495:
 13952 787d 5F5F5F69 		.ascii	"___int_least32_t_defined 1\000"
 13952      6E745F6C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 385


 13952      65617374 
 13952      33325F74 
 13952      5F646566 
 13953              	.LASF447:
 13954 7898 5F53495A 		.ascii	"_SIZET_ \000"
 13954      45545F20 
 13954      00
 13955              	.LASF1173:
 13956 78a1 65437572 		.ascii	"eCurrentState\000"
 13956      72656E74 
 13956      53746174 
 13956      6500
 13957              	.LASF235:
 13958 78af 5F5F5553 		.ascii	"__USACCUM_EPSILON__ 0x1P-8UHK\000"
 13958      41434355 
 13958      4D5F4550 
 13958      53494C4F 
 13958      4E5F5F20 
 13959              	.LASF150:
 13960 78cd 5F5F4442 		.ascii	"__DBL_HAS_QUIET_NAN__ 1\000"
 13960      4C5F4841 
 13960      535F5155 
 13960      4945545F 
 13960      4E414E5F 
 13961              	.LASF1060:
 13962 78e5 74736B4B 		.ascii	"tskKERNEL_VERSION_NUMBER \"V8.1.2\"\000"
 13962      45524E45 
 13962      4C5F5645 
 13962      5253494F 
 13962      4E5F4E55 
 13963              	.LASF821:
 13964 7907 494E5433 		.ascii	"INT32_C(x) __INT32_C(x)\000"
 13964      325F4328 
 13964      7829205F 
 13964      5F494E54 
 13964      33325F43 
 13965              	.LASF1195:
 13966 791f 70757853 		.ascii	"puxStackBuffer\000"
 13966      7461636B 
 13966      42756666 
 13966      657200
 13967              	.LASF1211:
 13968 792e 78546173 		.ascii	"xTaskGenericCreate\000"
 13968      6B47656E 
 13968      65726963 
 13968      43726561 
 13968      746500
 13969              	.LASF1074:
 13970 7941 78546173 		.ascii	"xTaskCreateRestricted(x,pxCreatedTask) xTaskGeneric"
 13970      6B437265 
 13970      61746552 
 13970      65737472 
 13970      69637465 
 13971 7974 43726561 		.ascii	"Create( ((x)->pvTaskCode), ((x)->pcName), ((x)->usS"
 13971      74652820 
 13971      28287829 
 13971      2D3E7076 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 386


 13971      5461736B 
 13972 79a7 7461636B 		.ascii	"tackDepth), ((x)->pvParameters), ((x)->uxPriority),"
 13972      44657074 
 13972      68292C20 
 13972      28287829 
 13972      2D3E7076 
 13973 79da 20287078 		.ascii	" (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xReg"
 13973      43726561 
 13973      74656454 
 13973      61736B29 
 13973      2C202828 
 13974 7a0d 696F6E73 		.ascii	"ions) )\000"
 13974      29202900 
 13975              	.LASF219:
 13976 7a15 5F5F4C4C 		.ascii	"__LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR\000"
 13976      46524143 
 13976      545F4D41 
 13976      585F5F20 
 13976      30583746 
 13977              	.LASF181:
 13978 7a3f 5F5F4445 		.ascii	"__DEC128_MAX_EXP__ 6145\000"
 13978      43313238 
 13978      5F4D4158 
 13978      5F455850 
 13978      5F5F2036 
 13979              	.LASF1034:
 13980 7a57 7854696D 		.ascii	"xTimerHandle TimerHandle_t\000"
 13980      65724861 
 13980      6E646C65 
 13980      2054696D 
 13980      65724861 
 13981              	.LASF786:
 13982 7a72 55494E54 		.ascii	"UINT_LEAST32_MAX (__UINT_LEAST32_MAX__)\000"
 13982      5F4C4541 
 13982      53543332 
 13982      5F4D4158 
 13982      20285F5F 
 13983              	.LASF1275:
 13984 7a9a 70756353 		.ascii	"pucStackByte\000"
 13984      7461636B 
 13984      42797465 
 13984      00
 13985              	.LASF911:
 13986 7aa7 706F7274 		.ascii	"portGET_HIGHEST_PRIORITY(uxTopPriority,uxReadyPrior"
 13986      4745545F 
 13986      48494748 
 13986      4553545F 
 13986      5052494F 
 13987 7ada 69746965 		.ascii	"ities) uxTopPriority = ( 31 - ucPortCountLeadingZer"
 13987      73292075 
 13987      78546F70 
 13987      5072696F 
 13987      72697479 
 13988 7b0d 6F732820 		.ascii	"os( ( uxReadyPriorities ) ) )\000"
 13988      28207578 
 13988      52656164 
 13988      79507269 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 387


 13988      6F726974 
 13989              	.LASF544:
 13990 7b2b 5F524545 		.ascii	"_REENT_CHECK_EMERGENCY(ptr) \000"
 13990      4E545F43 
 13990      4845434B 
 13990      5F454D45 
 13990      5247454E 
 13991              	.LASF853:
 13992 7b48 494E434C 		.ascii	"INCLUDE_vTaskCleanUpResources 0\000"
 13992      5544455F 
 13992      76546173 
 13992      6B436C65 
 13992      616E5570 
 13993              	.LASF229:
 13994 7b68 5F5F5341 		.ascii	"__SACCUM_MAX__ 0X7FFFP-7HK\000"
 13994      4343554D 
 13994      5F4D4158 
 13994      5F5F2030 
 13994      58374646 
 13995              	.LASF62:
 13996 7b83 5F5F494E 		.ascii	"__INTPTR_TYPE__ int\000"
 13996      54505452 
 13996      5F545950 
 13996      455F5F20 
 13996      696E7400 
 13997              	.LASF63:
 13998 7b97 5F5F5549 		.ascii	"__UINTPTR_TYPE__ unsigned int\000"
 13998      4E545054 
 13998      525F5459 
 13998      50455F5F 
 13998      20756E73 
 13999              	.LASF967:
 14000 7bb5 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR(pxQueue) \000"
 14000      65515545 
 14000      55455F53 
 14000      454E445F 
 14000      46524F4D 
 14001              	.LASF302:
 14002 7bd8 5F5F5245 		.ascii	"__REGISTER_PREFIX__ \000"
 14002      47495354 
 14002      45525F50 
 14002      52454649 
 14002      585F5F20 
 14003              	.LASF185:
 14004 7bed 5F5F4445 		.ascii	"__DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000"
 14004      43313238 
 14004      5F535542 
 14004      4E4F524D 
 14004      414C5F4D 
 14005 7c20 30303030 		.ascii	"000000001E-6143DL\000"
 14005      30303030 
 14005      31452D36 
 14005      31343344 
 14005      4C00
 14006              	.LASF138:
 14007 7c32 5F5F4442 		.ascii	"__DBL_DIG__ 15\000"
 14007      4C5F4449 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 388


 14007      475F5F20 
 14007      313500
 14008              	.LASF215:
 14009 7c41 5F5F554C 		.ascii	"__ULFRACT_EPSILON__ 0x1P-32ULR\000"
 14009      46524143 
 14009      545F4550 
 14009      53494C4F 
 14009      4E5F5F20 
 14010              	.LASF674:
 14011 7c60 5F5F5243 		.ascii	"__RCSID(s) struct __hack\000"
 14011      53494428 
 14011      73292073 
 14011      74727563 
 14011      74205F5F 
 14012              	.LASF940:
 14013 7c79 74726163 		.ascii	"traceEND() \000"
 14013      65454E44 
 14013      28292000 
 14014              	.LASF1005:
 14015 7c85 636F6E66 		.ascii	"configUSE_MALLOC_FAILED_HOOK 0\000"
 14015      69675553 
 14015      455F4D41 
 14015      4C4C4F43 
 14015      5F464149 
 14016              	.LASF20:
 14017 7ca4 5F5F5349 		.ascii	"__SIZEOF_SIZE_T__ 4\000"
 14017      5A454F46 
 14017      5F53495A 
 14017      455F545F 
 14017      5F203400 
 14018              	.LASF1291:
 14019 7cb8 70784465 		.ascii	"pxDelayedTaskList\000"
 14019      6C617965 
 14019      64546173 
 14019      6B4C6973 
 14019      7400
 14020              	.LASF1148:
 14021 7cca 784C4953 		.ascii	"xLIST\000"
 14021      5400
 14022              	.LASF599:
 14023 7cd0 5F5F474E 		.ascii	"__GNUCLIKE___OFFSETOF 1\000"
 14023      55434C49 
 14023      4B455F5F 
 14023      5F4F4646 
 14023      5345544F 
 14024              	.LASF182:
 14025 7ce8 5F5F4445 		.ascii	"__DEC128_MIN__ 1E-6143DL\000"
 14025      43313238 
 14025      5F4D494E 
 14025      5F5F2031 
 14025      452D3631 
 14026              	.LASF99:
 14027 7d01 5F5F494E 		.ascii	"__INT64_C(c) c ## LL\000"
 14027      5436345F 
 14027      43286329 
 14027      20632023 
 14027      23204C4C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 389


 14028              	.LASF367:
 14029 7d16 48415645 		.ascii	"HAVE_INITFINI_ARRAY 1\000"
 14029      5F494E49 
 14029      5446494E 
 14029      495F4152 
 14029      52415920 
 14030              	.LASF684:
 14031 7d2c 5F5F6C6F 		.ascii	"__lockable __lock_annotate(lockable)\000"
 14031      636B6162 
 14031      6C65205F 
 14031      5F6C6F63 
 14031      6B5F616E 
 14032              	.LASF404:
 14033 7d51 5F484156 		.ascii	"_HAVE_STDC \000"
 14033      455F5354 
 14033      44432000 
 14034              	.LASF784:
 14035 7d5d 494E545F 		.ascii	"INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)\000"
 14035      4C454153 
 14035      5433325F 
 14035      4D494E20 
 14035      282D5F5F 
 14036              	.LASF595:
 14037 7d88 5F5F454E 		.ascii	"__END_DECLS \000"
 14037      445F4445 
 14037      434C5320 
 14037      00
 14038              	.LASF908:
 14039 7d95 636F6E66 		.ascii	"configUSE_PORT_OPTIMISED_TASK_SELECTION 1\000"
 14039      69675553 
 14039      455F504F 
 14039      52545F4F 
 14039      5054494D 
 14040              	.LASF641:
 14041 7dbf 5F5F6765 		.ascii	"__generic(expr,t,yes,no) __builtin_choose_expr( __b"
 14041      6E657269 
 14041      63286578 
 14041      70722C74 
 14041      2C796573 
 14042 7df2 75696C74 		.ascii	"uiltin_types_compatible_p(__typeof(expr), t), yes, "
 14042      696E5F74 
 14042      79706573 
 14042      5F636F6D 
 14042      70617469 
 14043 7e25 6E6F2900 		.ascii	"no)\000"
 14044              	.LASF159:
 14045 7e29 5F5F4C44 		.ascii	"__LDBL_MIN__ 2.2250738585072014e-308L\000"
 14045      424C5F4D 
 14045      494E5F5F 
 14045      20322E32 
 14045      32353037 
 14046              	.LASF931:
 14047 7e4f 494E434C 		.ascii	"INCLUDE_xTimerPendFunctionCall 0\000"
 14047      5544455F 
 14047      7854696D 
 14047      65725065 
 14047      6E644675 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 390


 14048              	.LASF237:
 14049 7e70 5F5F4143 		.ascii	"__ACCUM_IBIT__ 16\000"
 14049      43554D5F 
 14049      49424954 
 14049      5F5F2031 
 14049      3600
 14050              	.LASF1033:
 14051 7e82 78546173 		.ascii	"xTaskStatusType TaskStatus_t\000"
 14051      6B537461 
 14051      74757354 
 14051      79706520 
 14051      5461736B 
 14052              	.LASF1292:
 14053 7e9f 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 14053      6572666C 
 14053      6F774465 
 14053      6C617965 
 14053      64546173 
 14054              	.LASF513:
 14055 7eb9 756E7369 		.ascii	"unsigned\000"
 14055      676E6564 
 14055      00
 14056              	.LASF884:
 14057 7ec2 706F7274 		.ascii	"portFLOAT float\000"
 14057      464C4F41 
 14057      5420666C 
 14057      6F617400 
 14058              	.LASF593:
 14059 7ed2 5F5F6861 		.ascii	"__has_builtin(x) 0\000"
 14059      735F6275 
 14059      696C7469 
 14059      6E287829 
 14059      203000
 14060              	.LASF978:
 14061 7ee5 74726163 		.ascii	"traceTASK_PRIORITY_SET(pxTask,uxNewPriority) \000"
 14061      65544153 
 14061      4B5F5052 
 14061      494F5249 
 14061      54595F53 
 14062              	.LASF708:
 14063 7f13 5F535452 		.ascii	"_STRING_H_ \000"
 14063      494E475F 
 14063      485F2000 
 14064              	.LASF1215:
 14065 7f1f 76546173 		.ascii	"vTaskPrioritySet\000"
 14065      6B507269 
 14065      6F726974 
 14065      79536574 
 14065      00
 14066              	.LASF557:
 14067 7f30 5F524545 		.ascii	"_REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)"
 14067      4E545F54 
 14067      4D287074 
 14067      72292028 
 14067      26287074 
 14068 7f63 00       		.ascii	"\000"
 14069              	.LASF697:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 391


 14070 7f64 5F5F7074 		.ascii	"__pt_guarded_by(x) __lock_annotate(pt_guarded_by(x)"
 14070      5F677561 
 14070      72646564 
 14070      5F627928 
 14070      7829205F 
 14071 7f97 2900     		.ascii	")\000"
 14072              	.LASF696:
 14073 7f99 5F5F6775 		.ascii	"__guarded_by(x) __lock_annotate(guarded_by(x))\000"
 14073      61726465 
 14073      645F6279 
 14073      28782920 
 14073      5F5F6C6F 
 14074              	.LASF539:
 14075 7fc8 5F524545 		.ascii	"_REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = &(var"
 14075      4E545F49 
 14075      4E49545F 
 14075      5054525F 
 14075      5A45524F 
 14076 7ffb 292D3E5F 		.ascii	")->__sf[0]; (var)->_stdout = &(var)->__sf[1]; (var)"
 14076      5F73665B 
 14076      305D3B20 
 14076      28766172 
 14076      292D3E5F 
 14077 802e 2D3E5F73 		.ascii	"->_stderr = &(var)->__sf[2]; (var)->_new._reent._ra"
 14077      74646572 
 14077      72203D20 
 14077      26287661 
 14077      72292D3E 
 14078 8061 6E645F6E 		.ascii	"nd_next = 1; (var)->_new._reent._r48._seed[0] = _RA"
 14078      65787420 
 14078      3D20313B 
 14078      20287661 
 14078      72292D3E 
 14079 8094 4E443438 		.ascii	"ND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RA"
 14079      5F534545 
 14079      445F303B 
 14079      20287661 
 14079      72292D3E 
 14080 80c7 4E443438 		.ascii	"ND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RA"
 14080      5F534545 
 14080      445F313B 
 14080      20287661 
 14080      72292D3E 
 14081 80fa 4E443438 		.ascii	"ND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RA"
 14081      5F534545 
 14081      445F323B 
 14081      20287661 
 14081      72292D3E 
 14082 812d 4E443438 		.ascii	"ND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RA"
 14082      5F4D554C 
 14082      545F303B 
 14082      20287661 
 14082      72292D3E 
 14083 8160 4E443438 		.ascii	"ND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RA"
 14083      5F4D554C 
 14083      545F313B 
 14083      20287661 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 392


 14083      72292D3E 
 14084 8193 4E443438 		.ascii	"ND48_MULT_2; (var)->_new._reent._r48._add = _RAND48"
 14084      5F4D554C 
 14084      545F323B 
 14084      20287661 
 14084      72292D3E 
 14085 81c6 5F414444 		.ascii	"_ADD; }\000"
 14085      3B207D00 
 14086              	.LASF103:
 14087 81ce 5F5F5549 		.ascii	"__UINT16_C(c) c\000"
 14087      4E543136 
 14087      5F432863 
 14087      29206300 
 14088              	.LASF525:
 14089 81de 5F524545 		.ascii	"_REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,\000"
 14089      4E545F49 
 14089      4E49545F 
 14089      41544558 
 14089      4954205F 
 14090              	.LASF613:
 14091 8206 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE__ 1\000"
 14091      5F535550 
 14091      504F5254 
 14091      535F5F5F 
 14091      494E4C49 
 14092              	.LASF299:
 14093 8221 5F5F5544 		.ascii	"__UDA_IBIT__ 32\000"
 14093      415F4942 
 14093      49545F5F 
 14093      20333200 
 14094              	.LASF740:
 14095 8231 5F5F4C45 		.ascii	"__LEAST16 \"h\"\000"
 14095      41535431 
 14095      36202268 
 14095      2200
 14096              	.LASF661:
 14097 823f 5F5F7072 		.ascii	"__printflike(fmtarg,firstvararg) __attribute__((__f"
 14097      696E7466 
 14097      6C696B65 
 14097      28666D74 
 14097      6172672C 
 14098 8272 6F726D61 		.ascii	"ormat__ (__printf__, fmtarg, firstvararg)))\000"
 14098      745F5F20 
 14098      285F5F70 
 14098      72696E74 
 14098      665F5F2C 
 14099              	.LASF135:
 14100 829e 5F5F464C 		.ascii	"__FLT_HAS_INFINITY__ 1\000"
 14100      545F4841 
 14100      535F494E 
 14100      46494E49 
 14100      54595F5F 
 14101              	.LASF648:
 14102 82b5 5F5F6661 		.ascii	"__fastcall __attribute__((__fastcall__))\000"
 14102      73746361 
 14102      6C6C205F 
 14102      5F617474 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 393


 14102      72696275 
 14103              	.LASF787:
 14104 82de 494E5436 		.ascii	"INT64_MIN (-__INT64_MAX__ - 1)\000"
 14104      345F4D49 
 14104      4E20282D 
 14104      5F5F494E 
 14104      5436345F 
 14105              	.LASF683:
 14106 82fd 5F5F6C6F 		.ascii	"__lock_annotate(x) \000"
 14106      636B5F61 
 14106      6E6E6F74 
 14106      61746528 
 14106      78292000 
 14107              	.LASF6:
 14108 8311 5F5F4154 		.ascii	"__ATOMIC_RELAXED 0\000"
 14108      4F4D4943 
 14108      5F52454C 
 14108      41584544 
 14108      203000
 14109              	.LASF425:
 14110 8324 5F415454 		.ascii	"_ATTRIBUTE(attrs) __attribute__ (attrs)\000"
 14110      52494255 
 14110      54452861 
 14110      74747273 
 14110      29205F5F 
 14111              	.LASF1055:
 14112 834c 6C697374 		.ascii	"listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { List_t "
 14112      4745545F 
 14112      4F574E45 
 14112      525F4F46 
 14112      5F4E4558 
 14113 837f 2A20636F 		.ascii	"* const pxConstList = ( pxList ); ( pxConstList )->"
 14113      6E737420 
 14113      7078436F 
 14113      6E73744C 
 14113      69737420 
 14114 83b2 7078496E 		.ascii	"pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( v"
 14114      64657820 
 14114      3D202820 
 14114      7078436F 
 14114      6E73744C 
 14115 83e5 6F696420 		.ascii	"oid * ) ( pxConstList )->pxIndex == ( void * ) &( ("
 14115      2A202920 
 14115      28207078 
 14115      436F6E73 
 14115      744C6973 
 14116 8418 20707843 		.ascii	" pxConstList )->xListEnd ) ) { ( pxConstList )->pxI"
 14116      6F6E7374 
 14116      4C697374 
 14116      20292D3E 
 14116      784C6973 
 14117 844b 6E646578 		.ascii	"ndex = ( pxConstList )->pxIndex->pxNext; } ( pxTCB "
 14117      203D2028 
 14117      20707843 
 14117      6F6E7374 
 14117      4C697374 
 14118 847e 29203D20 		.ascii	") = ( pxConstList )->pxIndex->pvOwner; }\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 394


 14118      28207078 
 14118      436F6E73 
 14118      744C6973 
 14118      7420292D 
 14119              	.LASF815:
 14120 84a7 57494E54 		.ascii	"WINT_MAX (__WINT_MAX__)\000"
 14120      5F4D4158 
 14120      20285F5F 
 14120      57494E54 
 14120      5F4D4158 
 14121              	.LASF573:
 14122 84bf 5F5F4154 		.ascii	"__ATTRIBUTE_IMPURE_PTR__ \000"
 14122      54524942 
 14122      5554455F 
 14122      494D5055 
 14122      52455F50 
 14123              	.LASF510:
 14124 84d9 5F5F6C6F 		.ascii	"__lock_release_recursive(lock) (_CAST_VOID 0)\000"
 14124      636B5F72 
 14124      656C6561 
 14124      73655F72 
 14124      65637572 
 14125              	.LASF666:
 14126 8507 5F5F676E 		.ascii	"__gnu_inline __attribute__((__gnu_inline__, __artif"
 14126      755F696E 
 14126      6C696E65 
 14126      205F5F61 
 14126      74747269 
 14127 853a 69636961 		.ascii	"icial__))\000"
 14127      6C5F5F29 
 14127      2900
 14128              	.LASF82:
 14129 8544 5F5F5349 		.ascii	"__SIG_ATOMIC_MAX__ 0x7fffffff\000"
 14129      475F4154 
 14129      4F4D4943 
 14129      5F4D4158 
 14129      5F5F2030 
 14130              	.LASF530:
 14131 8562 5F52414E 		.ascii	"_RAND48_MULT_0 (0xe66d)\000"
 14131      4434385F 
 14131      4D554C54 
 14131      5F302028 
 14131      30786536 
 14132              	.LASF1164:
 14133 857a 784D454D 		.ascii	"xMEMORY_REGION\000"
 14133      4F52595F 
 14133      52454749 
 14133      4F4E00
 14134              	.LASF710:
 14135 8589 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE \000"
 14135      57524150 
 14135      50455253 
 14135      5F494E43 
 14135      4C554445 
 14136              	.LASF990:
 14137 85ae 74726163 		.ascii	"traceEVENT_GROUP_CREATE(xEventGroup) \000"
 14137      65455645 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 395


 14137      4E545F47 
 14137      524F5550 
 14137      5F435245 
 14138              	.LASF587:
 14139 85d4 5F5F666C 		.ascii	"__flexarr [0]\000"
 14139      65786172 
 14139      72205B30 
 14139      5D00
 14140              	.LASF900:
 14141 85e2 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortClearInte"
 14141      434C4541 
 14141      525F494E 
 14141      54455252 
 14141      5550545F 
 14142 8615 72727570 		.ascii	"rruptMask(x)\000"
 14142      744D6173 
 14142      6B287829 
 14142      00
 14143              	.LASF354:
 14144 8622 5F5F5553 		.ascii	"__USES_INITFINI__ 1\000"
 14144      45535F49 
 14144      4E495446 
 14144      494E495F 
 14144      5F203100 
 14145              	.LASF818:
 14146 8636 55494E54 		.ascii	"UINT8_C(x) __UINT8_C(x)\000"
 14146      385F4328 
 14146      7829205F 
 14146      5F55494E 
 14146      54385F43 
 14147              	.LASF175:
 14148 864e 5F5F4445 		.ascii	"__DEC64_MIN__ 1E-383DD\000"
 14148      4336345F 
 14148      4D494E5F 
 14148      5F203145 
 14148      2D333833 
 14149              	.LASF483:
 14150 8665 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 14150      65645F70 
 14150      74726469 
 14150      66665F74 
 14150      00
 14151              	.LASF143:
 14152 8676 5F5F4442 		.ascii	"__DBL_DECIMAL_DIG__ 17\000"
 14152      4C5F4445 
 14152      43494D41 
 14152      4C5F4449 
 14152      475F5F20 
 14153              	.LASF478:
 14154 868d 5F505452 		.ascii	"_PTRDIFF_T_ \000"
 14154      44494646 
 14154      5F545F20 
 14154      00
 14155              	.LASF772:
 14156 869a 494E545F 		.ascii	"INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)\000"
 14156      4C454153 
 14156      54385F4D 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 396


 14156      494E2028 
 14156      2D5F5F49 
 14157              	.LASF575:
 14158 86c3 5F474C4F 		.ascii	"_GLOBAL_REENT _global_impure_ptr\000"
 14158      42414C5F 
 14158      5245454E 
 14158      54205F67 
 14158      6C6F6261 
 14159              	.LASF521:
 14160 86e4 5F4E554C 		.ascii	"_NULL 0\000"
 14160      4C203000 
 14161              	.LASF1238:
 14162 86ec 75785175 		.ascii	"uxQueue\000"
 14162      65756500 
 14163              	.LASF965:
 14164 86f4 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR(pxQueue) \000"
 14164      65515545 
 14164      55455F50 
 14164      45454B5F 
 14164      46524F4D 
 14165              	.LASF951:
 14166 8717 74726163 		.ascii	"traceQUEUE_CREATE(pxNewQueue) \000"
 14166      65515545 
 14166      55455F43 
 14166      52454154 
 14166      45287078 
 14167              	.LASF755:
 14168 8736 5F5F696E 		.ascii	"__int64_t_defined 1\000"
 14168      7436345F 
 14168      745F6465 
 14168      66696E65 
 14168      64203100 
 14169              	.LASF85:
 14170 874a 5F5F494E 		.ascii	"__INT16_MAX__ 0x7fff\000"
 14170      5431365F 
 14170      4D41585F 
 14170      5F203078 
 14170      37666666 
 14171              	.LASF365:
 14172 875f 5F57414E 		.ascii	"_WANT_REGISTER_FINI 1\000"
 14172      545F5245 
 14172      47495354 
 14172      45525F46 
 14172      494E4920 
 14173              	.LASF679:
 14174 8775 5F5F4445 		.ascii	"__DEVOLATILE(type,var) ((type)(__uintptr_t)(volatil"
 14174      564F4C41 
 14174      54494C45 
 14174      28747970 
 14174      652C7661 
 14175 87a8 6520766F 		.ascii	"e void *)(var))\000"
 14175      6964202A 
 14175      29287661 
 14175      72292900 
 14176              	.LASF1093:
 14177 87b8 7854696D 		.ascii	"xTimerReset(xTimer,xTicksToWait) xTimerGenericComma"
 14177      65725265 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 397


 14177      73657428 
 14177      7854696D 
 14177      65722C78 
 14178 87eb 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCou"
 14178      28207854 
 14178      696D6572 
 14178      20292C20 
 14178      746D7243 
 14179 881e 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 14179      20292C20 
 14179      4E554C4C 
 14179      2C202820 
 14179      78546963 
 14180              	.LASF451:
 14181 883f 5F5F5743 		.ascii	"__WCHAR_T__ \000"
 14181      4841525F 
 14181      545F5F20 
 14181      00
 14182              	.LASF954:
 14183 884c 74726163 		.ascii	"traceCREATE_MUTEX_FAILED() \000"
 14183      65435245 
 14183      4154455F 
 14183      4D555445 
 14183      585F4641 
 14184              	.LASF735:
 14185 8868 5F5F4641 		.ascii	"__FAST8 \000"
 14185      53543820 
 14185      00
 14186              	.LASF396:
 14187 8871 5F5F5853 		.ascii	"__XSI_VISIBLE 0\000"
 14187      495F5649 
 14187      5349424C 
 14187      45203000 
 14188              	.LASF1294:
 14189 8881 78546173 		.ascii	"xTasksWaitingTermination\000"
 14189      6B735761 
 14189      6974696E 
 14189      67546572 
 14189      6D696E61 
 14190              	.LASF355:
 14191 889a 5F535444 		.ascii	"_STDLIB_H_ \000"
 14191      4C49425F 
 14191      485F2000 
 14192              	.LASF938:
 14193 88a6 706F7274 		.ascii	"portPOINTER_SIZE_TYPE uint32_t\000"
 14193      504F494E 
 14193      5445525F 
 14193      53495A45 
 14193      5F545950 
 14194              	.LASF266:
 14195 88c5 5F5F5151 		.ascii	"__QQ_FBIT__ 7\000"
 14195      5F464249 
 14195      545F5F20 
 14195      3700
 14196              	.LASF925:
 14197 88d3 636F6E66 		.ascii	"configUSE_APPLICATION_TASK_TAG 0\000"
 14197      69675553 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 398


 14197      455F4150 
 14197      504C4943 
 14197      4154494F 
 14198              	.LASF1144:
 14199 88f4 4C697374 		.ascii	"ListItem_t\000"
 14199      4974656D 
 14199      5F7400
 14200              	.LASF1138:
 14201 88ff 5469636B 		.ascii	"TickT_t\000"
 14201      545F7400 
 14202              	.LASF379:
 14203 8907 5F5F474E 		.ascii	"__GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)\000"
 14203      55435F50 
 14203      52455245 
 14203      515F5F28 
 14203      6D612C6D 
 14204              	.LASF301:
 14205 8934 5F5F5554 		.ascii	"__UTA_IBIT__ 64\000"
 14205      415F4942 
 14205      49545F5F 
 14205      20363400 
 14206              	.LASF901:
 14207 8944 706F7274 		.ascii	"portDISABLE_INTERRUPTS() ulPortSetInterruptMask()\000"
 14207      44495341 
 14207      424C455F 
 14207      494E5445 
 14207      52525550 
 14208              	.LASF168:
 14209 8976 5F5F4445 		.ascii	"__DEC32_MIN__ 1E-95DF\000"
 14209      4333325F 
 14209      4D494E5F 
 14209      5F203145 
 14209      2D393544 
 14210              	.LASF225:
 14211 898c 5F5F554C 		.ascii	"__ULLFRACT_EPSILON__ 0x1P-64ULLR\000"
 14211      4C465241 
 14211      43545F45 
 14211      5053494C 
 14211      4F4E5F5F 
 14212              	.LASF651:
 14213 89ad 5F5F756E 		.ascii	"__unreachable() __builtin_unreachable()\000"
 14213      72656163 
 14213      6861626C 
 14213      65282920 
 14213      5F5F6275 
 14214              	.LASF1098:
 14215 89d5 53544143 		.ascii	"STACK_MACROS_H \000"
 14215      4B5F4D41 
 14215      43524F53 
 14215      5F482000 
 14216              	.LASF1110:
 14217 89e5 7461736B 		.ascii	"taskSELECT_HIGHEST_PRIORITY_TASK() { UBaseT_t uxTop"
 14217      53454C45 
 14217      43545F48 
 14217      49474845 
 14217      53545F50 
 14218 8a18 5072696F 		.ascii	"Priority; portGET_HIGHEST_PRIORITY( uxTopPriority, "
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 399


 14218      72697479 
 14218      3B20706F 
 14218      72744745 
 14218      545F4849 
 14219 8a4b 7578546F 		.ascii	"uxTopReadyPriority ); configASSERT( listCURRENT_LIS"
 14219      70526561 
 14219      64795072 
 14219      696F7269 
 14219      74792029 
 14220 8a7e 545F4C45 		.ascii	"T_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) )"
 14220      4E475448 
 14220      28202628 
 14220      20707852 
 14220      65616479 
 14221 8ab1 203E2030 		.ascii	" > 0 ); listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, "
 14221      20293B20 
 14221      6C697374 
 14221      4745545F 
 14221      4F574E45 
 14222 8ae4 26282070 		.ascii	"&( pxReadyTasksLists[ uxTopPriority ] ) ); }\000"
 14222      78526561 
 14222      64795461 
 14222      736B734C 
 14222      69737473 
 14223              	.LASF324:
 14224 8b11 5F5F5349 		.ascii	"__SIZEOF_WINT_T__ 4\000"
 14224      5A454F46 
 14224      5F57494E 
 14224      545F545F 
 14224      5F203400 
 14225              	.LASF328:
 14226 8b25 5F5F4152 		.ascii	"__ARM_FEATURE_UNALIGNED 1\000"
 14226      4D5F4645 
 14226      41545552 
 14226      455F554E 
 14226      414C4947 
 14227              	.LASF0:
 14228 8b3f 5F5F5354 		.ascii	"__STDC__ 1\000"
 14228      44435F5F 
 14228      203100
 14229              	.LASF686:
 14230 8b4a 5F5F6C6F 		.ascii	"__locks_shared(...) __lock_annotate(shared_lock_fun"
 14230      636B735F 
 14230      73686172 
 14230      6564282E 
 14230      2E2E2920 
 14231 8b7d 6374696F 		.ascii	"ction(__VA_ARGS__))\000"
 14231      6E285F5F 
 14231      56415F41 
 14231      5247535F 
 14231      5F292900 
 14232              	.LASF1185:
 14233 8b91 75785443 		.ascii	"uxTCBNumber\000"
 14233      424E756D 
 14233      62657200 
 14234              	.LASF415:
 14235 8b9d 5F564F49 		.ascii	"_VOID void\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 400


 14235      4420766F 
 14235      696400
 14236              	.LASF1189:
 14237 8ba8 5443425F 		.ascii	"TCB_t\000"
 14237      7400
 14238              	.LASF596:
 14239 8bae 5F5F474E 		.ascii	"__GNUCLIKE_ASM 3\000"
 14239      55434C49 
 14239      4B455F41 
 14239      534D2033 
 14239      00
 14240              	.LASF248:
 14241 8bbf 5F5F4C41 		.ascii	"__LACCUM_MIN__ (-0X1P31LK-0X1P31LK)\000"
 14241      4343554D 
 14241      5F4D494E 
 14241      5F5F2028 
 14241      2D305831 
 14242              	.LASF962:
 14243 8be3 74726163 		.ascii	"traceQUEUE_SEND_FAILED(pxQueue) \000"
 14243      65515545 
 14243      55455F53 
 14243      454E445F 
 14243      4641494C 
 14244              	.LASF348:
 14245 8c04 5F5F4152 		.ascii	"__ARM_EABI__ 1\000"
 14245      4D5F4541 
 14245      42495F5F 
 14245      203100
 14246              	.LASF1217:
 14247 8c13 75784375 		.ascii	"uxCurrentBasePriority\000"
 14247      7272656E 
 14247      74426173 
 14247      65507269 
 14247      6F726974 
 14248              	.LASF662:
 14249 8c29 5F5F7363 		.ascii	"__scanflike(fmtarg,firstvararg) __attribute__((__fo"
 14249      616E666C 
 14249      696B6528 
 14249      666D7461 
 14249      72672C66 
 14250 8c5c 726D6174 		.ascii	"rmat__ (__scanf__, fmtarg, firstvararg)))\000"
 14250      5F5F2028 
 14250      5F5F7363 
 14250      616E665F 
 14250      5F2C2066 
 14251              	.LASF166:
 14252 8c86 5F5F4445 		.ascii	"__DEC32_MIN_EXP__ (-94)\000"
 14252      4333325F 
 14252      4D494E5F 
 14252      4558505F 
 14252      5F20282D 
 14253              	.LASF263:
 14254 8c9e 5F5F554C 		.ascii	"__ULLACCUM_MIN__ 0.0ULLK\000"
 14254      4C414343 
 14254      554D5F4D 
 14254      494E5F5F 
 14254      20302E30 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 401


 14255              	.LASF1210:
 14256 8cb7 78546963 		.ascii	"xTicksToDelay\000"
 14256      6B73546F 
 14256      44656C61 
 14256      7900
 14257              	.LASF744:
 14258 8cc5 5F494E54 		.ascii	"_INT8_T_DECLARED \000"
 14258      385F545F 
 14258      4445434C 
 14258      41524544 
 14258      2000
 14259              	.LASF461:
 14260 8cd7 5F5F5F69 		.ascii	"___int_wchar_t_h \000"
 14260      6E745F77 
 14260      63686172 
 14260      5F745F68 
 14260      2000
 14261              	.LASF605:
 14262 8ce9 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VAALIST 1\000"
 14262      55434C49 
 14262      4B455F42 
 14262      55494C54 
 14262      494E5F56 
 14263              	.LASF1103:
 14264 8d06 7461736B 		.ascii	"taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_AP"
 14264      5949454C 
 14264      445F4946 
 14264      5F555349 
 14264      4E475F50 
 14265 8d39 49282900 		.ascii	"I()\000"
 14266              	.LASF671:
 14267 8d3d 5F5F7379 		.ascii	"__sym_compat(sym,impl,verid) __asm__(\".symver \" #"
 14267      6D5F636F 
 14267      6D706174 
 14267      2873796D 
 14267      2C696D70 
 14268 8d6e 696D706C 		.ascii	"impl \", \" #sym \"@\" #verid)\000"
 14268      20222C20 
 14268      22202373 
 14268      796D2022 
 14268      40222023 
 14269              	.LASF733:
 14270 8d89 5F5F494E 		.ascii	"__INT32 \"l\"\000"
 14270      54333220 
 14270      226C2200 
 14271              	.LASF351:
 14272 8d95 5F5F4152 		.ascii	"__ARM_ASM_SYNTAX_UNIFIED__ 1\000"
 14272      4D5F4153 
 14272      4D5F5359 
 14272      4E544158 
 14272      5F554E49 
 14273              	.LASF707:
 14274 8db2 73747274 		.ascii	"strtodf strtof\000"
 14274      6F646620 
 14274      73747274 
 14274      6F6600
 14275              	.LASF44:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 402


 14276 8dc1 5F5F5549 		.ascii	"__UINT32_TYPE__ long unsigned int\000"
 14276      4E543332 
 14276      5F545950 
 14276      455F5F20 
 14276      6C6F6E67 
 14277              	.LASF892:
 14278 8de3 706F7274 		.ascii	"portTICK_PERIOD_MS ( ( TickType_t ) 1000 / configTI"
 14278      5449434B 
 14278      5F504552 
 14278      494F445F 
 14278      4D532028 
 14279 8e16 434B5F52 		.ascii	"CK_RATE_HZ )\000"
 14279      4154455F 
 14279      485A2029 
 14279      00
 14280              	.LASF339:
 14281 8e23 5F5F7468 		.ascii	"__thumb2__ 1\000"
 14281      756D6232 
 14281      5F5F2031 
 14281      00
 14282              	.LASF1193:
 14283 8e30 70765061 		.ascii	"pvParameters\000"
 14283      72616D65 
 14283      74657273 
 14283      00
 14284              	.LASF1237:
 14285 8e3d 75785461 		.ascii	"uxTask\000"
 14285      736B00
 14286              	.LASF380:
 14287 8e44 5F444546 		.ascii	"_DEFAULT_SOURCE\000"
 14287      41554C54 
 14287      5F534F55 
 14287      52434500 
 14288              	.LASF446:
 14289 8e54 5F474343 		.ascii	"_GCC_SIZE_T \000"
 14289      5F53495A 
 14289      455F5420 
 14289      00
 14290              	.LASF913:
 14291 8e61 706F7274 		.ascii	"portNOP() \000"
 14291      4E4F5028 
 14291      292000
 14292              	.LASF615:
 14293 8e6c 5F5F4343 		.ascii	"__CC_SUPPORTS_WARNING 1\000"
 14293      5F535550 
 14293      504F5254 
 14293      535F5741 
 14293      524E494E 
 14294              	.LASF147:
 14295 8e84 5F5F4442 		.ascii	"__DBL_DENORM_MIN__ ((double)4.9406564584124654e-324"
 14295      4C5F4445 
 14295      4E4F524D 
 14295      5F4D494E 
 14295      5F5F2028 
 14296 8eb7 4C2900   		.ascii	"L)\000"
 14297              	.LASF223:
 14298 8eba 5F5F554C 		.ascii	"__ULLFRACT_MIN__ 0.0ULLR\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 403


 14298      4C465241 
 14298      43545F4D 
 14298      494E5F5F 
 14298      20302E30 
 14299              	.LASF453:
 14300 8ed3 5F545F57 		.ascii	"_T_WCHAR_ \000"
 14300      43484152 
 14300      5F2000
 14301              	.LASF995:
 14302 8ede 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_END(xEventGroup,uxBitsTo"
 14302      65455645 
 14302      4E545F47 
 14302      524F5550 
 14302      5F574149 
 14303 8f11 57616974 		.ascii	"WaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred"
 14303      466F722C 
 14303      7854696D 
 14303      656F7574 
 14303      4F636375 
 14304 8f44 00       		.ascii	"\000"
 14305              	.LASF1233:
 14306 8f45 75785461 		.ascii	"uxTaskGetSystemState\000"
 14306      736B4765 
 14306      74537973 
 14306      74656D53 
 14306      74617465 
 14307              	.LASF540:
 14308 8f5a 5F524545 		.ascii	"_REENT_CHECK_RAND48(ptr) \000"
 14308      4E545F43 
 14308      4845434B 
 14308      5F52414E 
 14308      44343828 
 14309              	.LASF283:
 14310 8f74 5F5F5544 		.ascii	"__UDQ_IBIT__ 0\000"
 14310      515F4942 
 14310      49545F5F 
 14310      203000
 14311              	.LASF13:
 14312 8f83 5F5F5349 		.ascii	"__SIZEOF_INT__ 4\000"
 14312      5A454F46 
 14312      5F494E54 
 14312      5F5F2034 
 14312      00
 14313              	.LASF465:
 14314 8f94 5F425344 		.ascii	"_BSD_WCHAR_T_\000"
 14314      5F574348 
 14314      41525F54 
 14314      5F00
 14315              	.LASF1096:
 14316 8fa2 7854696D 		.ascii	"xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHighe"
 14316      65724368 
 14316      616E6765 
 14316      50657269 
 14316      6F644672 
 14317 8fd5 72507269 		.ascii	"rPriorityTaskWoken) xTimerGenericCommand( ( xTimer "
 14317      6F726974 
 14317      79546173 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 404


 14317      6B576F6B 
 14317      656E2920 
 14318 9008 292C2074 		.ascii	"), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod "
 14318      6D72434F 
 14318      4D4D414E 
 14318      445F4348 
 14318      414E4745 
 14319 903b 292C2028 		.ascii	"), ( pxHigherPriorityTaskWoken ), 0U )\000"
 14319      20707848 
 14319      69676865 
 14319      72507269 
 14319      6F726974 
 14320              	.LASF217:
 14321 9062 5F5F4C4C 		.ascii	"__LLFRACT_IBIT__ 0\000"
 14321      46524143 
 14321      545F4942 
 14321      49545F5F 
 14321      203000
 14322              	.LASF616:
 14323 9075 5F5F4343 		.ascii	"__CC_SUPPORTS_VARADIC_XXX 1\000"
 14323      5F535550 
 14323      504F5254 
 14323      535F5641 
 14323      52414449 
 14324              	.LASF1132:
 14325 9091 75696E74 		.ascii	"uint32_t\000"
 14325      33325F74 
 14325      00
 14326              	.LASF893:
 14327 909a 706F7274 		.ascii	"portBYTE_ALIGNMENT 8\000"
 14327      42595445 
 14327      5F414C49 
 14327      474E4D45 
 14327      4E542038 
 14328              	.LASF713:
 14329 90af 5F535953 		.ascii	"_SYS__INTSUP_H \000"
 14329      5F5F494E 
 14329      54535550 
 14329      5F482000 
 14330              	.LASF230:
 14331 90bf 5F5F5341 		.ascii	"__SACCUM_EPSILON__ 0x1P-7HK\000"
 14331      4343554D 
 14331      5F455053 
 14331      494C4F4E 
 14331      5F5F2030 
 14332              	.LASF882:
 14333 90db 504F5254 		.ascii	"PORTMACRO_H \000"
 14333      4D414352 
 14333      4F5F4820 
 14333      00
 14334              	.LASF803:
 14335 90e8 494E545F 		.ascii	"INT_FAST64_MAX (__INT_FAST64_MAX__)\000"
 14335      46415354 
 14335      36345F4D 
 14335      41582028 
 14335      5F5F494E 
 14336              	.LASF1196:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 405


 14337 910c 78526567 		.ascii	"xRegions\000"
 14337      696F6E73 
 14337      00
 14338              	.LASF921:
 14339 9115 494E434C 		.ascii	"INCLUDE_xTimerGetTimerDaemonTaskHandle 0\000"
 14339      5544455F 
 14339      7854696D 
 14339      65724765 
 14339      7454696D 
 14340              	.LASF383:
 14341 913e 5F504F53 		.ascii	"_POSIX_SOURCE 1\000"
 14341      49585F53 
 14341      4F555243 
 14341      45203100 
 14342              	.LASF1045:
 14343 914e 6C697374 		.ascii	"listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( ( pxL"
 14343      5345545F 
 14343      4C495354 
 14343      5F495445 
 14343      4D5F4F57 
 14344 9181 69737449 		.ascii	"istItem )->pvOwner = ( void * ) ( pxOwner ) )\000"
 14344      74656D20 
 14344      292D3E70 
 14344      764F776E 
 14344      6572203D 
 14345              	.LASF59:
 14346 91af 5F5F5549 		.ascii	"__UINT_FAST16_TYPE__ unsigned int\000"
 14346      4E545F46 
 14346      41535431 
 14346      365F5459 
 14346      50455F5F 
 14347              	.LASF295:
 14348 91d1 5F5F5548 		.ascii	"__UHA_IBIT__ 8\000"
 14348      415F4942 
 14348      49545F5F 
 14348      203800
 14349              	.LASF514:
 14350 91e0 5F5F6E65 		.ascii	"__need_wint_t \000"
 14350      65645F77 
 14350      696E745F 
 14350      742000
 14351              	.LASF240:
 14352 91ef 5F5F4143 		.ascii	"__ACCUM_EPSILON__ 0x1P-15K\000"
 14352      43554D5F 
 14352      45505349 
 14352      4C4F4E5F 
 14352      5F203078 
 14353              	.LASF255:
 14354 920a 5F5F554C 		.ascii	"__ULACCUM_EPSILON__ 0x1P-32ULK\000"
 14354      41434355 
 14354      4D5F4550 
 14354      53494C4F 
 14354      4E5F5F20 
 14355              	.LASF152:
 14356 9229 5F5F4C44 		.ascii	"__LDBL_DIG__ 15\000"
 14356      424C5F44 
 14356      49475F5F 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 406


 14356      20313500 
 14357              	.LASF704:
 14358 9239 45584954 		.ascii	"EXIT_SUCCESS 0\000"
 14358      5F535543 
 14358      43455353 
 14358      203000
 14359              	.LASF638:
 14360 9248 5F41746F 		.ascii	"_Atomic(T) struct { T volatile __val; }\000"
 14360      6D696328 
 14360      54292073 
 14360      74727563 
 14360      74207B20 
 14361              	.LASF1113:
 14362 9270 70727641 		.ascii	"prvAddTaskToReadyList(pxTCB) traceMOVED_TASK_TO_REA"
 14362      64645461 
 14362      736B546F 
 14362      52656164 
 14362      794C6973 
 14363 92a3 44595F53 		.ascii	"DY_STATE( pxTCB ) taskRECORD_READY_PRIORITY( ( pxTC"
 14363      54415445 
 14363      28207078 
 14363      54434220 
 14363      29207461 
 14364 92d6 4220292D 		.ascii	"B )->uxPriority ); vListInsertEnd( &( pxReadyTasksL"
 14364      3E757850 
 14364      72696F72 
 14364      69747920 
 14364      293B2076 
 14365 9309 69737473 		.ascii	"ists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGen"
 14365      5B202820 
 14365      70785443 
 14365      4220292D 
 14365      3E757850 
 14366 933c 65726963 		.ascii	"ericListItem ) )\000"
 14366      4C697374 
 14366      4974656D 
 14366      20292029 
 14366      00
 14367              	.LASF75:
 14368 934d 5F5F5749 		.ascii	"__WINT_MIN__ 0U\000"
 14368      4E545F4D 
 14368      494E5F5F 
 14368      20305500 
 14369              	.LASF1181:
 14370 935d 7847656E 		.ascii	"xGenericListItem\000"
 14370      65726963 
 14370      4C697374 
 14370      4974656D 
 14370      00
 14371              	.LASF177:
 14372 936e 5F5F4445 		.ascii	"__DEC64_EPSILON__ 1E-15DD\000"
 14372      4336345F 
 14372      45505349 
 14372      4C4F4E5F 
 14372      5F203145 
 14373              	.LASF583:
 14374 9388 5F5F6C6F 		.ascii	"__long_double_t long double\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 407


 14374      6E675F64 
 14374      6F75626C 
 14374      655F7420 
 14374      6C6F6E67 
 14375              	.LASF74:
 14376 93a4 5F5F5749 		.ascii	"__WINT_MAX__ 0xffffffffU\000"
 14376      4E545F4D 
 14376      41585F5F 
 14376      20307866 
 14376      66666666 
 14377              	.LASF898:
 14378 93bd 706F7274 		.ascii	"portYIELD_FROM_ISR(x) portEND_SWITCHING_ISR( x )\000"
 14378      5949454C 
 14378      445F4652 
 14378      4F4D5F49 
 14378      53522878 
 14379              	.LASF633:
 14380 93ee 5F5F7365 		.ascii	"__section(x) __attribute__((__section__(x)))\000"
 14380      6374696F 
 14380      6E287829 
 14380      205F5F61 
 14380      74747269 
 14381              	.LASF1076:
 14382 941b 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR ( ( BaseT_t ) "
 14382      4F4D4D41 
 14382      4E445F45 
 14382      58454355 
 14382      54455F43 
 14383 944e 2D322029 		.ascii	"-2 )\000"
 14383      00
 14384              	.LASF1310:
 14385 9453 756C4269 		.ascii	"ulBitmap\000"
 14385      746D6170 
 14385      00
 14386              	.LASF47:
 14387 945c 5F5F494E 		.ascii	"__INT_LEAST16_TYPE__ short int\000"
 14387      545F4C45 
 14387      41535431 
 14387      365F5459 
 14387      50455F5F 
 14388              	.LASF942:
 14389 947b 74726163 		.ascii	"traceINCREASE_TICK_COUNT(x) \000"
 14389      65494E43 
 14389      52454153 
 14389      455F5449 
 14389      434B5F43 
 14390              	.LASF1199:
 14391 9498 78546173 		.ascii	"xTaskToDelete\000"
 14391      6B546F44 
 14391      656C6574 
 14391      6500
 14392              	.LASF747:
 14393 94a6 5F494E54 		.ascii	"_INT16_T_DECLARED \000"
 14393      31365F54 
 14393      5F444543 
 14393      4C415245 
 14393      442000
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 408


 14394              	.LASF144:
 14395 94b9 5F5F4442 		.ascii	"__DBL_MAX__ ((double)1.7976931348623157e+308L)\000"
 14395      4C5F4D41 
 14395      585F5F20 
 14395      2828646F 
 14395      75626C65 
 14396              	.LASF408:
 14397 94e8 5F505452 		.ascii	"_PTR void *\000"
 14397      20766F69 
 14397      64202A00 
 14398              	.LASF216:
 14399 94f4 5F5F4C4C 		.ascii	"__LLFRACT_FBIT__ 63\000"
 14399      46524143 
 14399      545F4642 
 14399      49545F5F 
 14399      20363300 
 14400              	.LASF450:
 14401 9508 5F5F7763 		.ascii	"__wchar_t__ \000"
 14401      6861725F 
 14401      745F5F20 
 14401      00
 14402              	.LASF338:
 14403 9515 5F5F7468 		.ascii	"__thumb__ 1\000"
 14403      756D625F 
 14403      5F203100 
 14404              	.LASF1071:
 14405 9521 7461736B 		.ascii	"taskSCHEDULER_NOT_STARTED ( ( BaseT_t ) 1 )\000"
 14405      53434845 
 14405      44554C45 
 14405      525F4E4F 
 14405      545F5354 
 14406              	.LASF1134:
 14407 954d 53746163 		.ascii	"StackT_t\000"
 14407      6B545F74 
 14407      00
 14408              	.LASF341:
 14409 9556 5F5F4152 		.ascii	"__ARMEL__ 1\000"
 14409      4D454C5F 
 14409      5F203100 
 14410              	.LASF993:
 14411 9562 74726163 		.ascii	"traceEVENT_GROUP_SYNC_END(xEventGroup,uxBitsToSet,u"
 14411      65455645 
 14411      4E545F47 
 14411      524F5550 
 14411      5F53594E 
 14412 9595 78426974 		.ascii	"xBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutO"
 14412      73546F57 
 14412      61697446 
 14412      6F722C78 
 14412      54696D65 
 14413 95c8 63637572 		.ascii	"ccurred\000"
 14413      72656400 
 14414              	.LASF502:
 14415 95d0 5F5F6C6F 		.ascii	"__lock_init_recursive(lock) (_CAST_VOID 0)\000"
 14415      636B5F69 
 14415      6E69745F 
 14415      72656375 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 409


 14415      72736976 
 14416              	.LASF663:
 14417 95fb 5F5F666F 		.ascii	"__format_arg(fmtarg) __attribute__((__format_arg__ "
 14417      726D6174 
 14417      5F617267 
 14417      28666D74 
 14417      61726729 
 14418 962e 28666D74 		.ascii	"(fmtarg)))\000"
 14418      61726729 
 14418      292900
 14419              	.LASF1306:
 14420 9639 474E5520 		.ascii	"GNU C89 5.4.1 20160919 (release) [ARM/embedded-5-br"
 14420      43383920 
 14420      352E342E 
 14420      31203230 
 14420      31363039 
 14421 966c 616E6368 		.ascii	"anch revision 240496] -mcpu=cortex-m3 -mthumb -g -g"
 14421      20726576 
 14421      6973696F 
 14421      6E203234 
 14421      30343936 
 14422 969f 67646233 		.ascii	"gdb3 -O0 -std=gnu90 -ffunction-sections -fdata-sect"
 14422      202D4F30 
 14422      202D7374 
 14422      643D676E 
 14422      75393020 
 14423 96d2 696F6E73 		.ascii	"ions\000"
 14423      00
 14424              	.LASF1017:
 14425 96d7 636F6E66 		.ascii	"configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTI"
 14425      6967494E 
 14425      434C5544 
 14425      455F4150 
 14425      504C4943 
 14426 970a 4F4E5320 		.ascii	"ONS 0\000"
 14426      3000
 14427              	.LASF268:
 14428 9710 5F5F4851 		.ascii	"__HQ_FBIT__ 15\000"
 14428      5F464249 
 14428      545F5F20 
 14428      313500
 14429              	.LASF1263:
 14430 971f 70727649 		.ascii	"prvInitialiseTaskLists\000"
 14430      6E697469 
 14430      616C6973 
 14430      65546173 
 14430      6B4C6973 
 14431              	.LASF1053:
 14432 9736 6C697374 		.ascii	"listLIST_IS_EMPTY(pxList) ( ( BaseT_t ) ( ( pxList "
 14432      4C495354 
 14432      5F49535F 
 14432      454D5054 
 14432      59287078 
 14433 9769 292D3E75 		.ascii	")->uxNumberOfItems == ( UBaseT_t ) 0 ) )\000"
 14433      784E756D 
 14433      6265724F 
 14433      66497465 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 410


 14433      6D73203D 
 14434              	.LASF682:
 14435 9792 5F5F6461 		.ascii	"__datatype_type_tag(kind,type) \000"
 14435      74617479 
 14435      70655F74 
 14435      7970655F 
 14435      74616728 
 14436              	.LASF569:
 14437 97b2 5F524545 		.ascii	"_REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_"
 14437      4E545F53 
 14437      49474E41 
 14437      4C5F4255 
 14437      46287074 
 14438 97e5 62756629 		.ascii	"buf)\000"
 14438      00
 14439              	.LASF77:
 14440 97ea 5F5F5349 		.ascii	"__SIZE_MAX__ 0xffffffffU\000"
 14440      5A455F4D 
 14440      41585F5F 
 14440      20307866 
 14440      66666666 
 14441              	.LASF1289:
 14442 9803 7844656C 		.ascii	"xDelayedTaskList1\000"
 14442      61796564 
 14442      5461736B 
 14442      4C697374 
 14442      3100
 14443              	.LASF1290:
 14444 9815 7844656C 		.ascii	"xDelayedTaskList2\000"
 14444      61796564 
 14444      5461736B 
 14444      4C697374 
 14444      3200
 14445              	.LASF734:
 14446 9827 5F5F494E 		.ascii	"__INT64 \"ll\"\000"
 14446      54363420 
 14446      226C6C22 
 14446      00
 14447              	.LASF771:
 14448 9834 55494E54 		.ascii	"UINT8_MAX (__UINT8_MAX__)\000"
 14448      385F4D41 
 14448      5820285F 
 14448      5F55494E 
 14448      54385F4D 
 14449              	.LASF70:
 14450 984e 5F5F4C4F 		.ascii	"__LONG_MAX__ 0x7fffffffL\000"
 14450      4E475F4D 
 14450      41585F5F 
 14450      20307837 
 14450      66666666 
 14451              	.LASF625:
 14452 9867 5F5F766F 		.ascii	"__volatile volatile\000"
 14452      6C617469 
 14452      6C652076 
 14452      6F6C6174 
 14452      696C6500 
 14453              	.LASF149:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 411


 14454 987b 5F5F4442 		.ascii	"__DBL_HAS_INFINITY__ 1\000"
 14454      4C5F4841 
 14454      535F494E 
 14454      46494E49 
 14454      54595F5F 
 14455              	.LASF758:
 14456 9892 5F5F696E 		.ascii	"__int_least8_t_defined 1\000"
 14456      745F6C65 
 14456      61737438 
 14456      5F745F64 
 14456      6566696E 
 14457              	.LASF728:
 14458 98ab 6C6F6E67 		.ascii	"long +4\000"
 14458      202B3400 
 14459              	.LASF966:
 14460 98b3 74726163 		.ascii	"traceQUEUE_RECEIVE_FAILED(pxQueue) \000"
 14460      65515545 
 14460      55455F52 
 14460      45434549 
 14460      56455F46 
 14461              	.LASF533:
 14462 98d7 5F52414E 		.ascii	"_RAND48_ADD (0x000b)\000"
 14462      4434385F 
 14462      41444420 
 14462      28307830 
 14462      30306229 
 14463              	.LASF703:
 14464 98ec 45584954 		.ascii	"EXIT_FAILURE 1\000"
 14464      5F464149 
 14464      4C555245 
 14464      203100
 14465              	.LASF330:
 14466 98fb 5F5F4152 		.ascii	"__ARM_FEATURE_LDREX 7\000"
 14466      4D5F4645 
 14466      41545552 
 14466      455F4C44 
 14466      52455820 
 14467              	.LASF712:
 14468 9911 5F535444 		.ascii	"_STDINT_H \000"
 14468      494E545F 
 14468      482000
 14469              	.LASF730:
 14470 991c 5F494E54 		.ascii	"_INT32_EQ_LONG \000"
 14470      33325F45 
 14470      515F4C4F 
 14470      4E472000 
 14471              	.LASF1167:
 14472 992c 756C5061 		.ascii	"ulParameters\000"
 14472      72616D65 
 14472      74657273 
 14472      00
 14473              	.LASF879:
 14474 9939 65727251 		.ascii	"errQUEUE_BLOCKED ( -4 )\000"
 14474      55455545 
 14474      5F424C4F 
 14474      434B4544 
 14474      2028202D 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 412


 14475              	.LASF220:
 14476 9951 5F5F4C4C 		.ascii	"__LLFRACT_EPSILON__ 0x1P-63LLR\000"
 14476      46524143 
 14476      545F4550 
 14476      53494C4F 
 14476      4E5F5F20 
 14477              	.LASF875:
 14478 9970 70644641 		.ascii	"pdFAIL ( pdFALSE )\000"
 14478      494C2028 
 14478      20706446 
 14478      414C5345 
 14478      202900
 14479              	.LASF1040:
 14480 9983 784C6973 		.ascii	"xListItem ListItem_t\000"
 14480      74497465 
 14480      6D204C69 
 14480      73744974 
 14480      656D5F74 
 14481              	.LASF189:
 14482 9998 5F5F5346 		.ascii	"__SFRACT_MAX__ 0X7FP-7HR\000"
 14482      52414354 
 14482      5F4D4158 
 14482      5F5F2030 
 14482      58374650 
 14483              	.LASF1001:
 14484 99b1 74726163 		.ascii	"tracePEND_FUNC_CALL(xFunctionToPend,pvParameter1,ul"
 14484      6550454E 
 14484      445F4655 
 14484      4E435F43 
 14484      414C4C28 
 14485 99e4 50617261 		.ascii	"Parameter2,ret) \000"
 14485      6D657465 
 14485      72322C72 
 14485      65742920 
 14485      00
 14486              	.LASF72:
 14487 99f5 5F5F5743 		.ascii	"__WCHAR_MAX__ 0xffffffffU\000"
 14487      4841525F 
 14487      4D41585F 
 14487      5F203078 
 14487      66666666 
 14488              	.LASF503:
 14489 9a0f 5F5F6C6F 		.ascii	"__lock_close(lock) (_CAST_VOID 0)\000"
 14489      636B5F63 
 14489      6C6F7365 
 14489      286C6F63 
 14489      6B292028 
 14490              	.LASF620:
 14491 9a31 5F5F434F 		.ascii	"__CONCAT(x,y) __CONCAT1(x,y)\000"
 14491      4E434154 
 14491      28782C79 
 14491      29205F5F 
 14491      434F4E43 
 14492              	.LASF867:
 14493 9a4e 636F6E66 		.ascii	"configKERNEL_INTERRUPT_PRIORITY ( 31 << (8 - config"
 14493      69674B45 
 14493      524E454C 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 413


 14493      5F494E54 
 14493      45525255 
 14494 9a81 5052494F 		.ascii	"PRIO_BITS) )\000"
 14494      5F424954 
 14494      53292029 
 14494      00
 14495              	.LASF95:
 14496 9a8e 5F5F494E 		.ascii	"__INT16_C(c) c\000"
 14496      5431365F 
 14496      43286329 
 14496      206300
 14497              	.LASF1088:
 14498 9a9d 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD_FROM_ISR ( ( BaseT_t ) 9 )"
 14498      4F4D4D41 
 14498      4E445F43 
 14498      48414E47 
 14498      455F5045 
 14499 9ad0 00       		.ascii	"\000"
 14500              	.LASF1032:
 14501 9ad1 78546173 		.ascii	"xTaskParameters TaskParameters_t\000"
 14501      6B506172 
 14501      616D6574 
 14501      65727320 
 14501      5461736B 
 14502              	.LASF409:
 14503 9af2 5F414E44 		.ascii	"_AND ,\000"
 14503      202C00
 14504              	.LASF912:
 14505 9af9 706F7274 		.ascii	"portASSERT_IF_INTERRUPT_PRIORITY_INVALID() vPortVal"
 14505      41535345 
 14505      52545F49 
 14505      465F494E 
 14505      54455252 
 14506 9b2c 69646174 		.ascii	"idateInterruptPriority()\000"
 14506      65496E74 
 14506      65727275 
 14506      70745072 
 14506      696F7269 
 14507              	.LASF570:
 14508 9b45 5F524545 		.ascii	"_REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._ge"
 14508      4E545F47 
 14508      45544441 
 14508      54455F45 
 14508      52525F50 
 14509 9b78 74646174 		.ascii	"tdate_err))\000"
 14509      655F6572 
 14509      72292900 
 14510              	.LASF524:
 14511 9b84 5F415445 		.ascii	"_ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL},"
 14511      5849545F 
 14511      494E4954 
 14511      207B5F4E 
 14511      554C4C2C 
 14512 9bb7 20302C20 		.ascii	" 0, 0}}\000"
 14512      307D7D00 
 14513              	.LASF864:
 14514 9bbf 636F6E66 		.ascii	"configNET_MASK2 255\000"
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 414


 14514      69674E45 
 14514      545F4D41 
 14514      534B3220 
 14514      32353500 
 14515              	.LASF680:
 14516 9bd3 5F5F4445 		.ascii	"__DEQUALIFY(type,var) ((type)(__uintptr_t)(const vo"
 14516      5155414C 
 14516      49465928 
 14516      74797065 
 14516      2C766172 
 14517 9c06 6C617469 		.ascii	"latile void *)(var))\000"
 14517      6C652076 
 14517      6F696420 
 14517      2A292876 
 14517      61722929 
 14518              	.LASF838:
 14519 9c1b 636F6E66 		.ascii	"configUSE_TRACE_FACILITY 1\000"
 14519      69675553 
 14519      455F5452 
 14519      4143455F 
 14519      46414349 
 14520              	.LASF10:
 14521 9c36 5F5F4154 		.ascii	"__ATOMIC_ACQ_REL 4\000"
 14521      4F4D4943 
 14521      5F414351 
 14521      5F52454C 
 14521      203400
 14522              	.LASF40:
 14523 9c49 5F5F494E 		.ascii	"__INT32_TYPE__ long int\000"
 14523      5433325F 
 14523      54595045 
 14523      5F5F206C 
 14523      6F6E6720 
 14524              	.LASF631:
 14525 9c61 5F5F7061 		.ascii	"__packed __attribute__((__packed__))\000"
 14525      636B6564 
 14525      205F5F61 
 14525      74747269 
 14525      62757465 
 14526              	.LASF458:
 14527 9c86 5F574348 		.ascii	"_WCHAR_T_DEFINED_ \000"
 14527      41525F54 
 14527      5F444546 
 14527      494E4544 
 14527      5F2000
 14528              	.LASF852:
 14529 9c99 494E434C 		.ascii	"INCLUDE_vTaskDelete 1\000"
 14529      5544455F 
 14529      76546173 
 14529      6B44656C 
 14529      65746520 
 14530              	.LASF1265:
 14531 9caf 784C6973 		.ascii	"xListIsEmpty\000"
 14531      74497345 
 14531      6D707479 
 14531      00
 14532              	.LASF364:
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 415


 14533 9cbc 5F57414E 		.ascii	"_WANT_IO_LONG_LONG 1\000"
 14533      545F494F 
 14533      5F4C4F4E 
 14533      475F4C4F 
 14533      4E472031 
 14534              	.LASF928:
 14535 9cd1 706F7274 		.ascii	"portCRITICAL_NESTING_IN_TCB 0\000"
 14535      43524954 
 14535      4943414C 
 14535      5F4E4553 
 14535      54494E47 
 14536              	.LASF691:
 14537 9cef 5F5F6173 		.ascii	"__asserts_shared(...) __lock_annotate(assert_shared"
 14537      73657274 
 14537      735F7368 
 14537      61726564 
 14537      282E2E2E 
 14538 9d22 5F6C6F63 		.ascii	"_lock(__VA_ARGS__))\000"
 14538      6B285F5F 
 14538      56415F41 
 14538      5247535F 
 14538      5F292900 
 14539              	.LASF498:
 14540 9d36 5F5F5359 		.ascii	"__SYS_LOCK_H__ \000"
 14540      535F4C4F 
 14540      434B5F48 
 14540      5F5F2000 
 14541              	.LASF720:
 14542 9d46 5F5F696E 		.ascii	"__int20\000"
 14542      74323000 
 14543              	.LASF800:
 14544 9d4e 494E545F 		.ascii	"INT_FAST32_MAX (__INT_FAST32_MAX__)\000"
 14544      46415354 
 14544      33325F4D 
 14544      41582028 
 14544      5F5F494E 
 14545              	.LASF426:
 14546 9d72 5F454C49 		.ascii	"_ELIDABLE_INLINE extern __inline__ _ATTRIBUTE ((__a"
 14546      4441424C 
 14546      455F494E 
 14546      4C494E45 
 14546      20657874 
 14547 9da5 6C776179 		.ascii	"lways_inline__))\000"
 14547      735F696E 
 14547      6C696E65 
 14547      5F5F2929 
 14547      00
 14548              	.LASF968:
 14549 9db6 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) \000"
 14549      65515545 
 14549      55455F53 
 14549      454E445F 
 14549      46524F4D 
 14550              	.LASF535:
 14551 9de0 5F524545 		.ascii	"_REENT_ASCTIME_SIZE 26\000"
 14551      4E545F41 
 14551      53435449 
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 416


 14551      4D455F53 
 14551      495A4520 
 14552              	.LASF1051:
 14553 9df7 6C697374 		.ascii	"listGET_NEXT(pxListItem) ( ( pxListItem )->pxNext )"
 14553      4745545F 
 14553      4E455854 
 14553      2870784C 
 14553      69737449 
 14554 9e2a 00       		.ascii	"\000"
 14555              	.LASF766:
 14556 9e2b 494E5450 		.ascii	"INTPTR_MIN (-__INTPTR_MAX__ - 1)\000"
 14556      54525F4D 
 14556      494E2028 
 14556      2D5F5F49 
 14556      4E545054 
 14557              	.LASF1281:
 14558 9e4c 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 14558      6B476574 
 14558      43757272 
 14558      656E7454 
 14558      61736B48 
 14559              	.LASF812:
 14560 9e66 50545244 		.ascii	"PTRDIFF_MIN (-PTRDIFF_MAX - 1)\000"
 14560      4946465F 
 14560      4D494E20 
 14560      282D5054 
 14560      52444946 
 14561              	.LASF384:
 14562 9e85 5F504F53 		.ascii	"_POSIX_C_SOURCE\000"
 14562      49585F43 
 14562      5F534F55 
 14562      52434500 
 14563              	.LASF80:
 14564 9e95 5F5F5549 		.ascii	"__UINTMAX_MAX__ 0xffffffffffffffffULL\000"
 14564      4E544D41 
 14564      585F4D41 
 14564      585F5F20 
 14564      30786666 
 14565              	.LASF1139:
 14566 9ebb 78497465 		.ascii	"xItemValue\000"
 14566      6D56616C 
 14566      756500
 14567              	.LASF137:
 14568 9ec6 5F5F4442 		.ascii	"__DBL_MANT_DIG__ 53\000"
 14568      4C5F4D41 
 14568      4E545F44 
 14568      49475F5F 
 14568      20353300 
 14569              	.LASF1200:
 14570 9eda 70785443 		.ascii	"pxTCB\000"
 14570      4200
 14571              	.LASF212:
 14572 9ee0 5F5F554C 		.ascii	"__ULFRACT_IBIT__ 0\000"
 14572      46524143 
 14572      545F4942 
 14572      49545F5F 
 14572      203000
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 417


 14573              	.LASF1183:
 14574 9ef3 75785072 		.ascii	"uxPriority\000"
 14574      696F7269 
 14574      747900
 14575              	.LASF69:
 14576 9efe 5F5F494E 		.ascii	"__INT_MAX__ 0x7fffffff\000"
 14576      545F4D41 
 14576      585F5F20 
 14576      30783766 
 14576      66666666 
 14577              	.LASF49:
 14578 9f15 5F5F494E 		.ascii	"__INT_LEAST64_TYPE__ long long int\000"
 14578      545F4C45 
 14578      41535436 
 14578      345F5459 
 14578      50455F5F 
 14579              	.LASF971:
 14580 9f38 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR_FAILED(pxQueue) \000"
 14580      65515545 
 14580      55455F50 
 14580      45454B5F 
 14580      46524F4D 
 14581              	.LASF717:
 14582 9f62 7369676E 		.ascii	"signed\000"
 14582      656400
 14583              	.LASF226:
 14584 9f69 5F5F5341 		.ascii	"__SACCUM_FBIT__ 7\000"
 14584      4343554D 
 14584      5F464249 
 14584      545F5F20 
 14584      3700
 14585              	.LASF759:
 14586 9f7b 5F5F696E 		.ascii	"__int_least16_t_defined 1\000"
 14586      745F6C65 
 14586      61737431 
 14586      365F745F 
 14586      64656669 
 14587              	.LASF930:
 14588 9f95 494E434C 		.ascii	"INCLUDE_xEventGroupSetBitFromISR 0\000"
 14588      5544455F 
 14588      78457665 
 14588      6E744772 
 14588      6F757053 
 14589              	.LASF1100:
 14590 9fb8 7461736B 		.ascii	"taskSECOND_CHECK_FOR_STACK_OVERFLOW() \000"
 14590      5345434F 
 14590      4E445F43 
 14590      4845434B 
 14590      5F464F52 
 14591              	.LASF950:
 14592 9fdf 74726163 		.ascii	"traceMOVED_TASK_TO_READY_STATE(pxTCB) \000"
 14592      654D4F56 
 14592      45445F54 
 14592      41534B5F 
 14592      544F5F52 
 14593              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160919 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 418


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:62     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:59     .bss.pxCurrentTCB:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:65     .bss.pxReadyTasksLists:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:68     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:71     .bss.xDelayedTaskList1:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:74     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:77     .bss.xDelayedTaskList2:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:80     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:83     .bss.pxDelayedTaskList:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:86     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:89     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:92     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:95     .bss.xPendingReadyList:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:98     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:101    .bss.xTasksWaitingTermination:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:104    .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:107    .bss.uxTasksDeleted:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:110    .bss.uxTasksDeleted:00000000 uxTasksDeleted
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:113    .bss.xSuspendedTaskList:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:116    .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:119    .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:122    .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:125    .bss.xTickCount:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:128    .bss.xTickCount:00000000 xTickCount
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:131    .bss.uxTopReadyPriority:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:134    .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:137    .bss.xSchedulerRunning:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:140    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:143    .bss.uxPendedTicks:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:146    .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:149    .bss.xYieldPending:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:152    .bss.xYieldPending:00000000 xYieldPending
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:155    .bss.xNumOfOverflows:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:158    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:161    .bss.uxTaskNumber:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:164    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:167    .data.xNextTaskUnblockTime:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:170    .data.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:173    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:176    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:179    .text.xTaskGenericCreate:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:184    .text.xTaskGenericCreate:00000000 xTaskGenericCreate
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3830   .text.prvAllocateTCBAndStack:00000000 prvAllocateTCBAndStack
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3447   .text.prvInitialiseTCBVariables:00000000 prvInitialiseTCBVariables
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3565   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:404    .text.xTaskGenericCreate:0000014c $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:414    .text.vTaskDelete:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:419    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4267   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:557    .text.vTaskDelete:000000c8 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:569    .text.vTaskDelayUntil:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:574    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1742   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3748   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1782   .text.xTaskResumeAll:00000000 xTaskResumeAll
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 419


C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:730    .text.vTaskDelayUntil:000000d4 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:738    .text.vTaskDelay:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:743    .text.vTaskDelay:00000000 vTaskDelay
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:830    .text.vTaskDelay:00000078 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:838    .text.uxTaskPriorityGet:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:843    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:893    .text.uxTaskPriorityGet:00000030 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:898    .text.vTaskPrioritySet:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:903    .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1113   .text.vTaskPrioritySet:00000130 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1120   .text.vTaskSuspend:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1125   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2493   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1275   .text.vTaskSuspend:000000d8 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1286   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1290   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1374   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1380   .text.vTaskResume:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1385   .text.vTaskResume:00000000 vTaskResume
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1483   .text.vTaskResume:00000090 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1490   .text.xTaskResumeFromISR:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1495   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1606   .text.xTaskResumeFromISR:000000a4 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1615   .rodata:00000000 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1619   .text.vTaskStartScheduler:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1624   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1693   .text.vTaskStartScheduler:00000058 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3419   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1701   .text.vTaskEndScheduler:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1706   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1732   .text.vTaskEndScheduler:00000018 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1737   .text.vTaskSuspendAll:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1772   .text.vTaskSuspendAll:00000018 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1777   .text.xTaskResumeAll:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2242   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1943   .text.xTaskResumeAll:000000e8 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1955   .text.xTaskGetTickCount:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1960   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:1995   .text.xTaskGetTickCount:00000020 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2000   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2005   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2044   .text.xTaskGetTickCountFromISR:00000028 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2049   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2054   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2081   .text.uxTaskGetNumberOfTasks:00000010 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2086   .text.uxTaskGetSystemState:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2091   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3913   .text.prvListTaskWithinSingleList:00000000 prvListTaskWithinSingleList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2227   .text.uxTaskGetSystemState:000000dc $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2237   .text.xTaskIncrementTick:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2473   .text.xTaskIncrementTick:00000150 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2488   .text.vTaskSwitchContext:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2610   .text.vTaskSwitchContext:00000090 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2619   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2624   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2713   .text.vTaskPlaceOnEventList:00000080 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2721   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 420


C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2726   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2833   .text.vTaskPlaceOnUnorderedEventList:0000009c $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2842   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2847   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2957   .text.xTaskRemoveFromEventList:0000009c $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2967   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:2972   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3082   .text.xTaskRemoveFromUnorderedEventList:0000009c $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3091   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3096   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3141   .text.vTaskSetTimeOutState:0000002c $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3147   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3152   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3269   .text.xTaskCheckForTimeOut:00000098 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3275   .text.vTaskMissedYield:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3280   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3308   .text.vTaskMissedYield:00000014 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3313   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3318   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3367   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3372   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3415   .text.prvIdleTask:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3653   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3443   .text.prvInitialiseTCBVariables:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3561   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3637   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3649   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4228   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3737   .text.prvCheckTasksWaitingTermination:0000006c $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3744   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3817   .text.prvAddCurrentTaskToDelayedList:00000058 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3826   .text.prvAllocateTCBAndStack:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:3909   .text.prvListTaskWithinSingleList:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4106   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4102   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4163   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4168   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4219   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4224   .text.prvDeleteTCB:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4263   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4330   .text.prvResetNextTaskUnblockTime:00000040 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4336   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4341   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4375   .text.xTaskGetCurrentTaskHandle:00000018 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4380   .text.vTaskPriorityInherit:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4385   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4533   .text.vTaskPriorityInherit:000000e0 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4540   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4545   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4681   .text.xTaskPriorityDisinherit:000000d0 $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4687   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4692   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4735   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4740   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4745   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s:4784   .text.pvTaskIncrementMutexHeldCount:00000024 $d
                     .debug_frame:00000010 $d
ARM GAS  C:\Users\STUDENT\AppData\Local\Temp\ccRbxq9b.s 			page 421


                           .group:00000000 wm4.0.c0d9c46791312c607b68c96c4ad07fb1
                           .group:00000000 wm4._newlib_version.h.4.ad342815780c8db09778091a421b5b5b
                           .group:00000000 wm4.newlib.h.21.0b9fc973bddc8b940a18de2b6ea6adc7
                           .group:00000000 wm4.features.h.22.692cd1f2e947ca7b8fea300222f5f1f2
                           .group:00000000 wm4.config.h.219.65a553ab5bef5482f0d7880b0d33015e
                           .group:00000000 wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.187.e1c83cba2098ce92b68f6311de19e6b1
                           .group:00000000 wm4.stddef.h.39.d5a83c17f38162a5dd6f834eaf38f8ef
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.183.c226d164ceca1f2ecb9ae9360c54a098
                           .group:00000000 wm4.reent.h.17.23b059516345f8f5abfa01ddc379570f
                           .group:00000000 wm4.cdefs.h.47.d0af77d4010113800282e6476aca9724
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f7bb76d8eb43fb7e79a949819dbf4bda
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4._intsup.h.10.b82bf99f69d6a5c085fc866de0d3eb9b
                           .group:00000000 wm4._stdint.h.10.7a5f60e6741af4a5594a3867d347e1f9
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8
                           .group:00000000 wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066
                           .group:00000000 wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946
                           .group:00000000 wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e
                           .group:00000000 wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370
                           .group:00000000 wm4.task.h.84.e110bc08aaffa67ce542955b890201b4
                           .group:00000000 wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d
                           .group:00000000 wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95

UNDEFINED SYMBOLS
ulPortSetInterruptMask
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
vPortValidateInterruptPriority
vPortClearInterruptMask
xPortStartScheduler
vPortEndScheduler
vApplicationTickHook
vListInsert
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
