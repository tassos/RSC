ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"tasks.c"
  14              	@ GNU C (GNU Tools for ARM Embedded Processors) version 4.9.3 20150303 (release) [ARM/embedded-4_9-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I config -I system -I core -I drivers -I FreeRTOS
  18              	@ -I FreeRTOS/include -I FreeRTOS/portable/GCC/ARM_CM3 -I FreeRTOS/portable
  19              	@ -I tasks/rc_task_leds -I modules/rc_leds -I drivers/rc_system
  20              	@ -I drivers/rc_gpio -I drivers/rc_uart -I drivers/rc_pinsel
  21              	@ -I drivers/rc_timer -I drivers/rc_adc -imultilib armv7-m
  22              	@ -iprefix c:\gnu tools arm embedded\4.9 2015q1\bin\../lib/gcc/arm-none-eabi/4.9.3/
  23              	@ -isysroot c:\gnu tools arm embedded\4.9 2015q1\bin\../arm-none-eabi
  24              	@ -MD out/tasks.d -MF out/tasks.d -MP -MQ out/tasks.o -D__USES_INITFINI__
  25              	@ FreeRTOS/tasks.c -mcpu=cortex-m3 -mthumb -auxbase-strip out/tasks.o -g
  26              	@ -ggdb3 -O0 -Wall -Wstrict-prototypes -Wextra -std=gnu90
  27              	@ -ffunction-sections -fdata-sections -fverbose-asm
  28              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec -fcommon
  29              	@ -fdata-sections -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  30              	@ -fearly-inlining -feliminate-unused-debug-types -ffunction-cse
  31              	@ -ffunction-sections -fgcse-lm -fgnu-runtime -fgnu-unique -fident
  32              	@ -finline-atomics -fira-hoist-pressure -fira-share-save-slots
  33              	@ -fira-share-spill-slots -fivopts -fkeep-static-consts
  34              	@ -fleading-underscore -flifetime-dse -fmath-errno -fmerge-debug-strings
  35              	@ -fpeephole -fprefetch-loop-arrays -freg-struct-return
  36              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  37              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  38              	@ -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  39              	@ -fsched-stalled-insns-dep -fshow-column -fsigned-zeros
  40              	@ -fsplit-ivs-in-unroller -fstrict-volatile-bitfields -fsync-libcalls
  41              	@ -ftrapping-math -ftree-coalesce-vars -ftree-cselim -ftree-forwprop
  42              	@ -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  43              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  44              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  45              	@ -fzero-initialized-in-bss -mfix-cortex-m3-ldrd -mlittle-endian -mlra
  46              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  47              	@ -mvectorize-with-neon-quad
  48              	
  49              		.text
  50              	.Ltext0:
  51              		.cfi_sections	.debug_frame
  52              		.global	pxCurrentTCB
  53              		.section	.bss.pxCurrentTCB,"aw",%nobits
  54              		.align	2
  55              		.type	pxCurrentTCB, %object
  56              		.size	pxCurrentTCB, 4
  57              	pxCurrentTCB:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 2


  58 0000 00000000 		.space	4
  59              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  60              		.align	2
  61              		.type	pxReadyTasksLists, %object
  62              		.size	pxReadyTasksLists, 160
  63              	pxReadyTasksLists:
  64 0000 00000000 		.space	160
  64      00000000 
  64      00000000 
  64      00000000 
  64      00000000 
  65              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  66              		.align	2
  67              		.type	xDelayedTaskList1, %object
  68              		.size	xDelayedTaskList1, 20
  69              	xDelayedTaskList1:
  70 0000 00000000 		.space	20
  70      00000000 
  70      00000000 
  70      00000000 
  70      00000000 
  71              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  72              		.align	2
  73              		.type	xDelayedTaskList2, %object
  74              		.size	xDelayedTaskList2, 20
  75              	xDelayedTaskList2:
  76 0000 00000000 		.space	20
  76      00000000 
  76      00000000 
  76      00000000 
  76      00000000 
  77              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  78              		.align	2
  79              		.type	pxDelayedTaskList, %object
  80              		.size	pxDelayedTaskList, 4
  81              	pxDelayedTaskList:
  82 0000 00000000 		.space	4
  83              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  84              		.align	2
  85              		.type	pxOverflowDelayedTaskList, %object
  86              		.size	pxOverflowDelayedTaskList, 4
  87              	pxOverflowDelayedTaskList:
  88 0000 00000000 		.space	4
  89              		.section	.bss.xPendingReadyList,"aw",%nobits
  90              		.align	2
  91              		.type	xPendingReadyList, %object
  92              		.size	xPendingReadyList, 20
  93              	xPendingReadyList:
  94 0000 00000000 		.space	20
  94      00000000 
  94      00000000 
  94      00000000 
  94      00000000 
  95              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  96              		.align	2
  97              		.type	xTasksWaitingTermination, %object
  98              		.size	xTasksWaitingTermination, 20
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 3


  99              	xTasksWaitingTermination:
 100 0000 00000000 		.space	20
 100      00000000 
 100      00000000 
 100      00000000 
 100      00000000 
 101              		.section	.bss.uxTasksDeleted,"aw",%nobits
 102              		.align	2
 103              		.type	uxTasksDeleted, %object
 104              		.size	uxTasksDeleted, 4
 105              	uxTasksDeleted:
 106 0000 00000000 		.space	4
 107              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 108              		.align	2
 109              		.type	xSuspendedTaskList, %object
 110              		.size	xSuspendedTaskList, 20
 111              	xSuspendedTaskList:
 112 0000 00000000 		.space	20
 112      00000000 
 112      00000000 
 112      00000000 
 112      00000000 
 113              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 114              		.align	2
 115              		.type	uxCurrentNumberOfTasks, %object
 116              		.size	uxCurrentNumberOfTasks, 4
 117              	uxCurrentNumberOfTasks:
 118 0000 00000000 		.space	4
 119              		.section	.bss.xTickCount,"aw",%nobits
 120              		.align	2
 121              		.type	xTickCount, %object
 122              		.size	xTickCount, 4
 123              	xTickCount:
 124 0000 00000000 		.space	4
 125              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 126              		.align	2
 127              		.type	uxTopReadyPriority, %object
 128              		.size	uxTopReadyPriority, 4
 129              	uxTopReadyPriority:
 130 0000 00000000 		.space	4
 131              		.section	.bss.xSchedulerRunning,"aw",%nobits
 132              		.align	2
 133              		.type	xSchedulerRunning, %object
 134              		.size	xSchedulerRunning, 4
 135              	xSchedulerRunning:
 136 0000 00000000 		.space	4
 137              		.section	.bss.uxPendedTicks,"aw",%nobits
 138              		.align	2
 139              		.type	uxPendedTicks, %object
 140              		.size	uxPendedTicks, 4
 141              	uxPendedTicks:
 142 0000 00000000 		.space	4
 143              		.section	.bss.xYieldPending,"aw",%nobits
 144              		.align	2
 145              		.type	xYieldPending, %object
 146              		.size	xYieldPending, 4
 147              	xYieldPending:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 4


 148 0000 00000000 		.space	4
 149              		.section	.bss.xNumOfOverflows,"aw",%nobits
 150              		.align	2
 151              		.type	xNumOfOverflows, %object
 152              		.size	xNumOfOverflows, 4
 153              	xNumOfOverflows:
 154 0000 00000000 		.space	4
 155              		.section	.bss.uxTaskNumber,"aw",%nobits
 156              		.align	2
 157              		.type	uxTaskNumber, %object
 158              		.size	uxTaskNumber, 4
 159              	uxTaskNumber:
 160 0000 00000000 		.space	4
 161              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 162              		.align	2
 163              		.type	xNextTaskUnblockTime, %object
 164              		.size	xNextTaskUnblockTime, 4
 165              	xNextTaskUnblockTime:
 166 0000 FFFFFFFF 		.word	-1
 167              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 168              		.align	2
 169              		.type	uxSchedulerSuspended, %object
 170              		.size	uxSchedulerSuspended, 4
 171              	uxSchedulerSuspended:
 172 0000 00000000 		.space	4
 173              		.section	.text.xTaskGenericCreate,"ax",%progbits
 174              		.align	2
 175              		.global	xTaskGenericCreate
 176              		.thumb
 177              		.thumb_func
 178              		.type	xTaskGenericCreate, %function
 179              	xTaskGenericCreate:
 180              	.LFB1:
 181              		.file 1 "FreeRTOS/tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/tasks.c ****     All rights reserved
   4:FreeRTOS/tasks.c **** 
   5:FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/tasks.c **** 
   7:FreeRTOS/tasks.c ****     ***************************************************************************
   8:FreeRTOS/tasks.c ****      *                                                                       *
   9:FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/tasks.c ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/tasks.c ****      *                                                                       *
  13:FreeRTOS/tasks.c ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/tasks.c ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/tasks.c ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/tasks.c ****      *                                                                       *
  17:FreeRTOS/tasks.c ****      *    Thank you!                                                         *
  18:FreeRTOS/tasks.c ****      *                                                                       *
  19:FreeRTOS/tasks.c ****     ***************************************************************************
  20:FreeRTOS/tasks.c **** 
  21:FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/tasks.c **** 
  23:FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 5


  24:FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/tasks.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/tasks.c **** 
  27:FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/tasks.c **** 
  32:FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/tasks.c **** 
  37:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  38:FreeRTOS/tasks.c **** 
  39:FreeRTOS/tasks.c ****     ***************************************************************************
  40:FreeRTOS/tasks.c ****      *                                                                       *
  41:FreeRTOS/tasks.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/tasks.c ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/tasks.c ****      *                                                                       *
  44:FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/tasks.c ****      *                                                                       *
  46:FreeRTOS/tasks.c ****     ***************************************************************************
  47:FreeRTOS/tasks.c **** 
  48:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/tasks.c ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/tasks.c **** 
  51:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/tasks.c **** 
  55:FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/tasks.c ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  62:FreeRTOS/tasks.c **** 
  63:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  64:FreeRTOS/tasks.c **** */
  65:FreeRTOS/tasks.c **** 
  66:FreeRTOS/tasks.c **** /* Standard includes. */
  67:FreeRTOS/tasks.c **** #include <stdlib.h>
  68:FreeRTOS/tasks.c **** #include <string.h>
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  71:FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  72:FreeRTOS/tasks.c **** task.h is included from an application file. */
  73:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  74:FreeRTOS/tasks.c **** 
  75:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  76:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  77:FreeRTOS/tasks.c **** #include "task.h"
  78:FreeRTOS/tasks.c **** #include "timers.h"
  79:FreeRTOS/tasks.c **** #include "StackMacros.h"
  80:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 6


  81:FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  82:FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  83:FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  84:FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  85:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  86:FreeRTOS/tasks.c **** 
  87:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  88:FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  89:FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  90:FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  91:FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  92:FreeRTOS/tasks.c **** 	#include <stdio.h>
  93:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  94:FreeRTOS/tasks.c **** 
  95:FreeRTOS/tasks.c **** /* Sanity check the configuration. */
  96:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
  97:FreeRTOS/tasks.c **** 	#if INCLUDE_vTaskSuspend != 1
  98:FreeRTOS/tasks.c **** 		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
  99:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
 100:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
 101:FreeRTOS/tasks.c **** 
 102:FreeRTOS/tasks.c **** /*
 103:FreeRTOS/tasks.c ****  * Defines the size, in words, of the stack allocated to the idle task.
 104:FreeRTOS/tasks.c ****  */
 105:FreeRTOS/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
 106:FreeRTOS/tasks.c **** 
 107:FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 108:FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 109:FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 110:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 111:FreeRTOS/tasks.c **** #else
 112:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 113:FreeRTOS/tasks.c **** #endif
 114:FreeRTOS/tasks.c **** 
 115:FreeRTOS/tasks.c **** /*
 116:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 117:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 118:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 119:FreeRTOS/tasks.c ****  */
 120:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 121:FreeRTOS/tasks.c **** {
 122:FreeRTOS/tasks.c **** 	volatile StackT_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the tasks s
 123:FreeRTOS/tasks.c **** 
 124:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 125:FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 126:FreeRTOS/tasks.c **** 	#endif
 127:FreeRTOS/tasks.c **** 
 128:FreeRTOS/tasks.c **** 	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from d
 129:FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 130:FreeRTOS/tasks.c **** 	UBaseT_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 131:FreeRTOS/tasks.c **** 	StackT_t			*pxStack;			/*< Points to the start of the stack. */
 132:FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 133:FreeRTOS/tasks.c **** 
 134:FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 135:FreeRTOS/tasks.c **** 		StackT_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack gro
 136:FreeRTOS/tasks.c **** 	#endif
 137:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 7


 138:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 139:FreeRTOS/tasks.c **** 		UBaseT_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do not 
 140:FreeRTOS/tasks.c **** 	#endif
 141:FreeRTOS/tasks.c **** 
 142:FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 143:FreeRTOS/tasks.c **** 		UBaseT_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It allow
 144:FreeRTOS/tasks.c **** 		UBaseT_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. */
 145:FreeRTOS/tasks.c **** 	#endif
 146:FreeRTOS/tasks.c **** 
 147:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 148:FreeRTOS/tasks.c **** 		UBaseT_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority inhe
 149:FreeRTOS/tasks.c **** 		UBaseT_t 	uxMutexesHeld;
 150:FreeRTOS/tasks.c **** 	#endif
 151:FreeRTOS/tasks.c **** 
 152:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 153:FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 154:FreeRTOS/tasks.c **** 	#endif
 155:FreeRTOS/tasks.c **** 
 156:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 157:FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 158:FreeRTOS/tasks.c **** 	#endif
 159:FreeRTOS/tasks.c **** 
 160:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 161:FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 162:FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 163:FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 164:FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 165:FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 166:FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 167:FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 168:FreeRTOS/tasks.c **** 		struct 	_reent xNewLib_reent;
 169:FreeRTOS/tasks.c **** 	#endif
 170:FreeRTOS/tasks.c **** 
 171:FreeRTOS/tasks.c **** } tskTCB;
 172:FreeRTOS/tasks.c **** 
 173:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 174:FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 175:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 176:FreeRTOS/tasks.c **** 
 177:FreeRTOS/tasks.c **** /*
 178:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 179:FreeRTOS/tasks.c ****  * be global, rather than file scope.
 180:FreeRTOS/tasks.c ****  */
 181:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 182:FreeRTOS/tasks.c **** 	#define static
 183:FreeRTOS/tasks.c **** #endif
 184:FreeRTOS/tasks.c **** 
 185:FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 186:FreeRTOS/tasks.c **** static variables must be declared volatile. */
 187:FreeRTOS/tasks.c **** 
 188:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 189:FreeRTOS/tasks.c **** 
 190:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 191:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 192:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 193:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 194:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 8


 195:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 196:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 197:FreeRTOS/tasks.c **** 
 198:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 199:FreeRTOS/tasks.c **** 
 200:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 201:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseT_t uxTasksDeleted = ( UBaseT_t ) 0U;
 202:FreeRTOS/tasks.c **** 
 203:FreeRTOS/tasks.c **** #endif
 204:FreeRTOS/tasks.c **** 
 205:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 206:FreeRTOS/tasks.c **** 
 207:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 208:FreeRTOS/tasks.c **** 
 209:FreeRTOS/tasks.c **** #endif
 210:FreeRTOS/tasks.c **** 
 211:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 212:FreeRTOS/tasks.c **** 
 213:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle tas
 214:FreeRTOS/tasks.c **** 
 215:FreeRTOS/tasks.c **** #endif
 216:FreeRTOS/tasks.c **** 
 217:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 218:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxCurrentNumberOfTasks 	= ( UBaseT_t ) 0U;
 219:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xTickCount 				= ( TickT_t ) 0U;
 220:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 221:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xSchedulerRunning 		= pdFALSE;
 222:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxPendedTicks 			= ( UBaseT_t ) 0U;
 223:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xYieldPending 			= pdFALSE;
 224:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseT_t xNumOfOverflows 			= ( BaseT_t ) 0;
 225:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseT_t uxTaskNumber 					= ( UBaseT_t ) 0U;
 226:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickT_t xNextTaskUnblockTime		= portMAX_DELAY;
 227:FreeRTOS/tasks.c **** 
 228:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 229:FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 230:FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 231:FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 232:FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 233:FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 234:FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 235:FreeRTOS/tasks.c **** accessed from a critical section. */
 236:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseT_t uxSchedulerSuspended	= ( UBaseT_t ) pdFALSE;
 237:FreeRTOS/tasks.c **** 
 238:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 239:FreeRTOS/tasks.c **** 
 240:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 241:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 242:FreeRTOS/tasks.c **** 
 243:FreeRTOS/tasks.c **** #endif
 244:FreeRTOS/tasks.c **** 
 245:FreeRTOS/tasks.c **** /*lint +e956 */
 246:FreeRTOS/tasks.c **** 
 247:FreeRTOS/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 248:FreeRTOS/tasks.c **** 
 249:FreeRTOS/tasks.c **** /*
 250:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 251:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 9


 252:FreeRTOS/tasks.c ****  */
 253:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 254:FreeRTOS/tasks.c **** 
 255:FreeRTOS/tasks.c **** /*
 256:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 257:FreeRTOS/tasks.c ****  */
 258:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 259:FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 260:FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 261:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 262:FreeRTOS/tasks.c **** 
 263:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 264:FreeRTOS/tasks.c **** 
 265:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 266:FreeRTOS/tasks.c **** 
 267:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 268:FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 269:FreeRTOS/tasks.c **** 	microcontroller architecture. */
 270:FreeRTOS/tasks.c **** 
 271:FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 272:FreeRTOS/tasks.c **** 	state task. */
 273:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 274:FreeRTOS/tasks.c **** 	{																									\
 275:FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 276:FreeRTOS/tasks.c **** 		{																								\
 277:FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 278:FreeRTOS/tasks.c **** 		}																								\
 279:FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 280:FreeRTOS/tasks.c **** 
 281:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 282:FreeRTOS/tasks.c **** 
 283:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 284:FreeRTOS/tasks.c **** 	{																									\
 285:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 286:FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
 287:FreeRTOS/tasks.c **** 		{																								\
 288:FreeRTOS/tasks.c **** 			configASSERT( uxTopReadyPriority );															\
 289:FreeRTOS/tasks.c **** 			--uxTopReadyPriority;																		\
 290:FreeRTOS/tasks.c **** 		}																								\
 291:FreeRTOS/tasks.c **** 																										\
 292:FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 293:FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 294:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
 295:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 296:FreeRTOS/tasks.c **** 
 297:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 298:FreeRTOS/tasks.c **** 
 299:FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 300:FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 301:FreeRTOS/tasks.c **** 	being used. */
 302:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 303:FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 304:FreeRTOS/tasks.c **** 
 305:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 306:FreeRTOS/tasks.c **** 
 307:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 308:FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 10


 309:FreeRTOS/tasks.c **** 	architecture being used. */
 310:FreeRTOS/tasks.c **** 
 311:FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 312:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 313:FreeRTOS/tasks.c **** 
 314:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 315:FreeRTOS/tasks.c **** 
 316:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 317:FreeRTOS/tasks.c **** 	{																								\
 318:FreeRTOS/tasks.c **** 	UBaseT_t uxTopPriority;																		\
 319:FreeRTOS/tasks.c **** 																									\
 320:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */							\
 321:FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 322:FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 323:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 324:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 325:FreeRTOS/tasks.c **** 
 326:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 327:FreeRTOS/tasks.c **** 
 328:FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 329:FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 330:FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 331:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 332:FreeRTOS/tasks.c **** 	{																									\
 333:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseT_t ) 0 )	\
 334:FreeRTOS/tasks.c **** 		{																								\
 335:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 336:FreeRTOS/tasks.c **** 		}																								\
 337:FreeRTOS/tasks.c **** 	}
 338:FreeRTOS/tasks.c **** 
 339:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 340:FreeRTOS/tasks.c **** 
 341:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 342:FreeRTOS/tasks.c **** 
 343:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 344:FreeRTOS/tasks.c **** count overflows. */
 345:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 346:FreeRTOS/tasks.c **** {																									\
 347:FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 348:FreeRTOS/tasks.c **** 																									\
 349:FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 350:FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 351:FreeRTOS/tasks.c **** 																									\
 352:FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 353:FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 354:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 355:FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 356:FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 357:FreeRTOS/tasks.c **** }
 358:FreeRTOS/tasks.c **** 
 359:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 360:FreeRTOS/tasks.c **** 
 361:FreeRTOS/tasks.c **** /*
 362:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 363:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 364:FreeRTOS/tasks.c ****  */
 365:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 11


 366:FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB )															\
 367:FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 368:FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) 
 369:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 370:FreeRTOS/tasks.c **** 
 371:FreeRTOS/tasks.c **** /*
 372:FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 373:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 374:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 375:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 376:FreeRTOS/tasks.c ****  */
 377:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 378:FreeRTOS/tasks.c **** 
 379:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 380:FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 381:FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 382:FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 383:FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 384:FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 385:FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 386:FreeRTOS/tasks.c **** to its original value when it is released. */
 387:FreeRTOS/tasks.c **** #if configUSE_16_BIT_TICKS == 1
 388:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 389:FreeRTOS/tasks.c **** #else
 390:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 391:FreeRTOS/tasks.c **** #endif
 392:FreeRTOS/tasks.c **** 
 393:FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 394:FreeRTOS/tasks.c **** #if configCHECK_FOR_STACK_OVERFLOW > 0
 395:FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 396:FreeRTOS/tasks.c **** #endif
 397:FreeRTOS/tasks.c **** 
 398:FreeRTOS/tasks.c **** #if configUSE_TICK_HOOK > 0
 399:FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 400:FreeRTOS/tasks.c **** #endif
 401:FreeRTOS/tasks.c **** 
 402:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 403:FreeRTOS/tasks.c **** 
 404:FreeRTOS/tasks.c **** /*
 405:FreeRTOS/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 406:FreeRTOS/tasks.c ****  * into the TCB structure.
 407:FreeRTOS/tasks.c ****  */
 408:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
 409:FreeRTOS/tasks.c **** 
 410:FreeRTOS/tasks.c **** /**
 411:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 412:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 413:FreeRTOS/tasks.c ****  * is in any other state.
 414:FreeRTOS/tasks.c ****  */
 415:FreeRTOS/tasks.c **** static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 416:FreeRTOS/tasks.c **** 
 417:FreeRTOS/tasks.c **** /*
 418:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 419:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 420:FreeRTOS/tasks.c ****  */
 421:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 422:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 12


 423:FreeRTOS/tasks.c **** /*
 424:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 425:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 426:FreeRTOS/tasks.c ****  * creation of the first user task.
 427:FreeRTOS/tasks.c ****  *
 428:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 429:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 430:FreeRTOS/tasks.c ****  *
 431:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 432:FreeRTOS/tasks.c ****  *
 433:FreeRTOS/tasks.c ****  */
 434:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 435:FreeRTOS/tasks.c **** 
 436:FreeRTOS/tasks.c **** /*
 437:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 438:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 439:FreeRTOS/tasks.c ****  *
 440:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 441:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 442:FreeRTOS/tasks.c ****  */
 443:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 444:FreeRTOS/tasks.c **** 
 445:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 446:FreeRTOS/tasks.c **** 
 447:FreeRTOS/tasks.c **** #endif
 448:FreeRTOS/tasks.c **** 
 449:FreeRTOS/tasks.c **** /*
 450:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 451:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 452:FreeRTOS/tasks.c ****  * and its TCB deleted.
 453:FreeRTOS/tasks.c ****  */
 454:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 455:FreeRTOS/tasks.c **** 
 456:FreeRTOS/tasks.c **** /*
 457:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 458:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 459:FreeRTOS/tasks.c ****  */
 460:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake ) PRIVILEGED_FUNCTION;
 461:FreeRTOS/tasks.c **** 
 462:FreeRTOS/tasks.c **** /*
 463:FreeRTOS/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 464:FreeRTOS/tasks.c ****  * allocation was successful.
 465:FreeRTOS/tasks.c ****  */
 466:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
 467:FreeRTOS/tasks.c **** 
 468:FreeRTOS/tasks.c **** /*
 469:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 470:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 471:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 472:FreeRTOS/tasks.c ****  *
 473:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 474:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 475:FreeRTOS/tasks.c ****  */
 476:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 477:FreeRTOS/tasks.c **** 
 478:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
 479:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 13


 480:FreeRTOS/tasks.c **** #endif
 481:FreeRTOS/tasks.c **** 
 482:FreeRTOS/tasks.c **** /*
 483:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 484:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 485:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 486:FreeRTOS/tasks.c ****  */
 487:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 488:FreeRTOS/tasks.c **** 
 489:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 490:FreeRTOS/tasks.c **** 
 491:FreeRTOS/tasks.c **** #endif
 492:FreeRTOS/tasks.c **** 
 493:FreeRTOS/tasks.c **** /*
 494:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 495:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 496:FreeRTOS/tasks.c ****  *
 497:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 498:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 499:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 500:FreeRTOS/tasks.c ****  * set to a value other than 1.
 501:FreeRTOS/tasks.c ****  */
 502:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 503:FreeRTOS/tasks.c **** 
 504:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 505:FreeRTOS/tasks.c **** 
 506:FreeRTOS/tasks.c **** #endif
 507:FreeRTOS/tasks.c **** 
 508:FreeRTOS/tasks.c **** /*
 509:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 510:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 511:FreeRTOS/tasks.c ****  */
 512:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 513:FreeRTOS/tasks.c **** 
 514:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 515:FreeRTOS/tasks.c **** 
 516:FreeRTOS/tasks.c **** BaseT_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t us
 517:FreeRTOS/tasks.c **** {
 182              		.loc 1 517 0
 183              		.cfi_startproc
 184              		@ args = 16, pretend = 0, frame = 32
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186 0000 80B5     		push	{r7, lr}	@
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 7, -8
 189              		.cfi_offset 14, -4
 190 0002 8AB0     		sub	sp, sp, #40	@,,
 191              		.cfi_def_cfa_offset 48
 192 0004 02AF     		add	r7, sp, #8	@,,
 193              		.cfi_def_cfa 7, 40
 194 0006 F860     		str	r0, [r7, #12]	@ pxTaskCode, pxTaskCode
 195 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 196 000a 3B60     		str	r3, [r7]	@ pvParameters, pvParameters
 197 000c 1346     		mov	r3, r2	@ movhi	@ tmp143, tmp142
 198 000e FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp143, usStackDepth
 518:FreeRTOS/tasks.c **** BaseT_t xReturn;
 519:FreeRTOS/tasks.c **** TCB_t * pxNewTCB;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 14


 520:FreeRTOS/tasks.c **** 
 521:FreeRTOS/tasks.c **** 	configASSERT( pxTaskCode );
 199              		.loc 1 521 0
 200 0010 FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTaskCode
 201 0012 002B     		cmp	r3, #0	@ tmp144,
 202 0014 02D1     		bne	.L2	@,
 203              		.loc 1 521 0 is_stmt 0 discriminator 1
 204 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 205              	.L3:
 206 001a FEE7     		b	.L3	@
 207              	.L2:
 522:FreeRTOS/tasks.c **** 	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 208              		.loc 1 522 0 is_stmt 1
 209 001c BB6A     		ldr	r3, [r7, #40]	@ tmp145, uxPriority
 210 001e 072B     		cmp	r3, #7	@ tmp145,
 211 0020 02D9     		bls	.L4	@,
 212              		.loc 1 522 0 is_stmt 0 discriminator 1
 213 0022 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 214              	.L5:
 215              		.loc 1 522 0 discriminator 2
 216 0026 FEE7     		b	.L5	@
 217              	.L4:
 523:FreeRTOS/tasks.c **** 
 524:FreeRTOS/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 525:FreeRTOS/tasks.c **** 	checking that the allocation was successful. */
 526:FreeRTOS/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 218              		.loc 1 526 0 is_stmt 1
 219 0028 FB88     		ldrh	r3, [r7, #6]	@ tmp146, usStackDepth
 220 002a 1846     		mov	r0, r3	@, tmp146
 221 002c 396B     		ldr	r1, [r7, #48]	@, puxStackBuffer
 222 002e FFF7FEFF 		bl	prvAllocateTCBAndStack	@
 223 0032 B861     		str	r0, [r7, #24]	@, pxNewTCB
 527:FreeRTOS/tasks.c **** 
 528:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 224              		.loc 1 528 0
 225 0034 BB69     		ldr	r3, [r7, #24]	@ tmp147, pxNewTCB
 226 0036 002B     		cmp	r3, #0	@ tmp147,
 227 0038 73D0     		beq	.L6	@,
 228              	.LBB6:
 529:FreeRTOS/tasks.c **** 	{
 530:FreeRTOS/tasks.c **** 		StackT_t *pxTopOfStack;
 531:FreeRTOS/tasks.c **** 
 532:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 533:FreeRTOS/tasks.c **** 			/* Should the task be created in privileged mode? */
 534:FreeRTOS/tasks.c **** 			BaseT_t xRunPrivileged;
 535:FreeRTOS/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 536:FreeRTOS/tasks.c **** 			{
 537:FreeRTOS/tasks.c **** 				xRunPrivileged = pdTRUE;
 538:FreeRTOS/tasks.c **** 			}
 539:FreeRTOS/tasks.c **** 			else
 540:FreeRTOS/tasks.c **** 			{
 541:FreeRTOS/tasks.c **** 				xRunPrivileged = pdFALSE;
 542:FreeRTOS/tasks.c **** 			}
 543:FreeRTOS/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 544:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 545:FreeRTOS/tasks.c **** 
 546:FreeRTOS/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 15


 547:FreeRTOS/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or vice versa.
 548:FreeRTOS/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 549:FreeRTOS/tasks.c **** 		required by the port. */
 550:FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 551:FreeRTOS/tasks.c **** 		{
 552:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 229              		.loc 1 552 0
 230 003a BB69     		ldr	r3, [r7, #24]	@ tmp148, pxNewTCB
 231 003c 1A6B     		ldr	r2, [r3, #48]	@ D.6463, pxNewTCB_6->pxStack
 232 003e FB88     		ldrh	r3, [r7, #6]	@ D.6464, usStackDepth
 233 0040 03F18043 		add	r3, r3, #1073741824	@ D.6464, D.6464,
 234 0044 013B     		subs	r3, r3, #1	@ D.6464, D.6464,
 235 0046 9B00     		lsls	r3, r3, #2	@ D.6464, D.6464,
 236 0048 1344     		add	r3, r3, r2	@ tmp149, D.6463
 237 004a 7B61     		str	r3, [r7, #20]	@ tmp149, pxTopOfStack
 553:FreeRTOS/tasks.c **** 			pxTopOfStack = ( StackT_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZ
 238              		.loc 1 553 0
 239 004c 7B69     		ldr	r3, [r7, #20]	@ D.6465, pxTopOfStack
 240 004e 23F00703 		bic	r3, r3, #7	@ D.6465, D.6465,
 241 0052 7B61     		str	r3, [r7, #20]	@ D.6465, pxTopOfStack
 554:FreeRTOS/tasks.c **** 
 555:FreeRTOS/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 556:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_AL
 242              		.loc 1 556 0
 243 0054 7B69     		ldr	r3, [r7, #20]	@ D.6465, pxTopOfStack
 244 0056 03F00703 		and	r3, r3, #7	@ D.6465, D.6465,
 245 005a 002B     		cmp	r3, #0	@ D.6465,
 246 005c 02D0     		beq	.L7	@,
 247              		.loc 1 556 0 is_stmt 0 discriminator 1
 248 005e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 249              	.L8:
 250              		.loc 1 556 0 discriminator 3
 251 0062 FEE7     		b	.L8	@
 252              	.L7:
 557:FreeRTOS/tasks.c **** 		}
 558:FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 559:FreeRTOS/tasks.c **** 		{
 560:FreeRTOS/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 561:FreeRTOS/tasks.c **** 
 562:FreeRTOS/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 563:FreeRTOS/tasks.c **** 			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBY
 564:FreeRTOS/tasks.c **** 
 565:FreeRTOS/tasks.c **** 			/* If we want to use stack checking on architectures that use
 566:FreeRTOS/tasks.c **** 			a positive stack growth direction then we also need to store the
 567:FreeRTOS/tasks.c **** 			other extreme of the stack space. */
 568:FreeRTOS/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 569:FreeRTOS/tasks.c **** 		}
 570:FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 571:FreeRTOS/tasks.c **** 
 572:FreeRTOS/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 573:FreeRTOS/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 253              		.loc 1 573 0 is_stmt 1
 254 0064 FB88     		ldrh	r3, [r7, #6]	@ tmp150, usStackDepth
 255 0066 0093     		str	r3, [sp]	@ tmp150,
 256 0068 B869     		ldr	r0, [r7, #24]	@, pxNewTCB
 257 006a B968     		ldr	r1, [r7, #8]	@, pcName
 258 006c BA6A     		ldr	r2, [r7, #40]	@, uxPriority
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 16


 259 006e 7B6B     		ldr	r3, [r7, #52]	@, xRegions
 260 0070 FFF7FEFF 		bl	prvInitialiseTCBVariables	@
 574:FreeRTOS/tasks.c **** 
 575:FreeRTOS/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 576:FreeRTOS/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 577:FreeRTOS/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 578:FreeRTOS/tasks.c **** 		the	top of stack variable is updated. */
 579:FreeRTOS/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 580:FreeRTOS/tasks.c **** 		{
 581:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 582:FreeRTOS/tasks.c **** 		}
 583:FreeRTOS/tasks.c **** 		#else /* portUSING_MPU_WRAPPERS */
 584:FreeRTOS/tasks.c **** 		{
 585:FreeRTOS/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 261              		.loc 1 585 0
 262 0074 7869     		ldr	r0, [r7, #20]	@, pxTopOfStack
 263 0076 F968     		ldr	r1, [r7, #12]	@, pxTaskCode
 264 0078 3A68     		ldr	r2, [r7]	@, pvParameters
 265 007a FFF7FEFF 		bl	pxPortInitialiseStack	@
 266 007e 0246     		mov	r2, r0	@ D.6463,
 267 0080 BB69     		ldr	r3, [r7, #24]	@ tmp151, pxNewTCB
 268 0082 1A60     		str	r2, [r3]	@ D.6463, pxNewTCB_6->pxTopOfStack
 586:FreeRTOS/tasks.c **** 		}
 587:FreeRTOS/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS */
 588:FreeRTOS/tasks.c **** 
 589:FreeRTOS/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 269              		.loc 1 589 0
 270 0084 FB6A     		ldr	r3, [r7, #44]	@ tmp152, pxCreatedTask
 271 0086 002B     		cmp	r3, #0	@ tmp152,
 272 0088 02D0     		beq	.L9	@,
 590:FreeRTOS/tasks.c **** 		{
 591:FreeRTOS/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 592:FreeRTOS/tasks.c **** 			task can use this as a handle to delete the task later if
 593:FreeRTOS/tasks.c **** 			required.*/
 594:FreeRTOS/tasks.c **** 			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 273              		.loc 1 594 0
 274 008a FB6A     		ldr	r3, [r7, #44]	@ tmp153, pxCreatedTask
 275 008c BA69     		ldr	r2, [r7, #24]	@ tmp154, pxNewTCB
 276 008e 1A60     		str	r2, [r3]	@ tmp154, *pxCreatedTask_21(D)
 277              	.L9:
 595:FreeRTOS/tasks.c **** 		}
 596:FreeRTOS/tasks.c **** 		else
 597:FreeRTOS/tasks.c **** 		{
 598:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 599:FreeRTOS/tasks.c **** 		}
 600:FreeRTOS/tasks.c **** 
 601:FreeRTOS/tasks.c **** 		/* Ensure interrupts don't access the task lists while they are being
 602:FreeRTOS/tasks.c **** 		updated. */
 603:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 278              		.loc 1 603 0
 279 0090 FFF7FEFF 		bl	vPortEnterCritical	@
 604:FreeRTOS/tasks.c **** 		{
 605:FreeRTOS/tasks.c **** 			uxCurrentNumberOfTasks++;
 280              		.loc 1 605 0
 281 0094 2E4B     		ldr	r3, .L15	@ tmp155,
 282 0096 1B68     		ldr	r3, [r3]	@ D.6465, uxCurrentNumberOfTasks
 283 0098 0133     		adds	r3, r3, #1	@ D.6465, D.6465,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 17


 284 009a 2D4A     		ldr	r2, .L15	@ tmp156,
 285 009c 1360     		str	r3, [r2]	@ D.6465, uxCurrentNumberOfTasks
 606:FreeRTOS/tasks.c **** 			if( pxCurrentTCB == NULL )
 286              		.loc 1 606 0
 287 009e 2D4B     		ldr	r3, .L15+4	@ tmp157,
 288 00a0 1B68     		ldr	r3, [r3]	@ D.6466, pxCurrentTCB
 289 00a2 002B     		cmp	r3, #0	@ D.6466,
 290 00a4 09D1     		bne	.L10	@,
 607:FreeRTOS/tasks.c **** 			{
 608:FreeRTOS/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 609:FreeRTOS/tasks.c **** 				the suspended state - make this the current task. */
 610:FreeRTOS/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 291              		.loc 1 610 0
 292 00a6 2B4A     		ldr	r2, .L15+4	@ tmp158,
 293 00a8 BB69     		ldr	r3, [r7, #24]	@ tmp159, pxNewTCB
 294 00aa 1360     		str	r3, [r2]	@ tmp159, pxCurrentTCB
 611:FreeRTOS/tasks.c **** 
 612:FreeRTOS/tasks.c **** 				if( uxCurrentNumberOfTasks == ( UBaseT_t ) 1 )
 295              		.loc 1 612 0
 296 00ac 284B     		ldr	r3, .L15	@ tmp160,
 297 00ae 1B68     		ldr	r3, [r3]	@ D.6465, uxCurrentNumberOfTasks
 298 00b0 012B     		cmp	r3, #1	@ D.6465,
 299 00b2 0FD1     		bne	.L11	@,
 613:FreeRTOS/tasks.c **** 				{
 614:FreeRTOS/tasks.c **** 					/* This is the first task to be created so do the preliminary
 615:FreeRTOS/tasks.c **** 					initialisation required.  We will not recover if this call
 616:FreeRTOS/tasks.c **** 					fails, but we will report the failure. */
 617:FreeRTOS/tasks.c **** 					prvInitialiseTaskLists();
 300              		.loc 1 617 0
 301 00b4 FFF7FEFF 		bl	prvInitialiseTaskLists	@
 302 00b8 0CE0     		b	.L11	@
 303              	.L10:
 618:FreeRTOS/tasks.c **** 				}
 619:FreeRTOS/tasks.c **** 				else
 620:FreeRTOS/tasks.c **** 				{
 621:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 622:FreeRTOS/tasks.c **** 				}
 623:FreeRTOS/tasks.c **** 			}
 624:FreeRTOS/tasks.c **** 			else
 625:FreeRTOS/tasks.c **** 			{
 626:FreeRTOS/tasks.c **** 				/* If the scheduler is not already running, make this task the
 627:FreeRTOS/tasks.c **** 				current task if it is the highest priority task to be created
 628:FreeRTOS/tasks.c **** 				so far. */
 629:FreeRTOS/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 304              		.loc 1 629 0
 305 00ba 274B     		ldr	r3, .L15+8	@ tmp161,
 306 00bc 1B68     		ldr	r3, [r3]	@ D.6467, xSchedulerRunning
 307 00be 002B     		cmp	r3, #0	@ D.6467,
 308 00c0 08D1     		bne	.L11	@,
 630:FreeRTOS/tasks.c **** 				{
 631:FreeRTOS/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 309              		.loc 1 631 0
 310 00c2 244B     		ldr	r3, .L15+4	@ tmp162,
 311 00c4 1B68     		ldr	r3, [r3]	@ D.6466, pxCurrentTCB
 312 00c6 DA6A     		ldr	r2, [r3, #44]	@ D.6465, _27->uxPriority
 313 00c8 BB6A     		ldr	r3, [r7, #40]	@ tmp163, uxPriority
 314 00ca 9A42     		cmp	r2, r3	@ D.6465, tmp163
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 18


 315 00cc 02D8     		bhi	.L11	@,
 632:FreeRTOS/tasks.c **** 					{
 633:FreeRTOS/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 316              		.loc 1 633 0
 317 00ce 214A     		ldr	r2, .L15+4	@ tmp164,
 318 00d0 BB69     		ldr	r3, [r7, #24]	@ tmp165, pxNewTCB
 319 00d2 1360     		str	r3, [r2]	@ tmp165, pxCurrentTCB
 320              	.L11:
 634:FreeRTOS/tasks.c **** 					}
 635:FreeRTOS/tasks.c **** 					else
 636:FreeRTOS/tasks.c **** 					{
 637:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
 638:FreeRTOS/tasks.c **** 					}
 639:FreeRTOS/tasks.c **** 				}
 640:FreeRTOS/tasks.c **** 				else
 641:FreeRTOS/tasks.c **** 				{
 642:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 643:FreeRTOS/tasks.c **** 				}
 644:FreeRTOS/tasks.c **** 			}
 645:FreeRTOS/tasks.c **** 
 646:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 321              		.loc 1 646 0
 322 00d4 214B     		ldr	r3, .L15+12	@ tmp166,
 323 00d6 1B68     		ldr	r3, [r3]	@ D.6465, uxTaskNumber
 324 00d8 0133     		adds	r3, r3, #1	@ D.6465, D.6465,
 325 00da 204A     		ldr	r2, .L15+12	@ tmp167,
 326 00dc 1360     		str	r3, [r2]	@ D.6465, uxTaskNumber
 647:FreeRTOS/tasks.c **** 
 648:FreeRTOS/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 649:FreeRTOS/tasks.c **** 			{
 650:FreeRTOS/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 651:FreeRTOS/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 327              		.loc 1 651 0
 328 00de 1F4B     		ldr	r3, .L15+12	@ tmp168,
 329 00e0 1A68     		ldr	r2, [r3]	@ D.6465, uxTaskNumber
 330 00e2 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxNewTCB
 331 00e4 1A64     		str	r2, [r3, #64]	@ D.6465, pxNewTCB_6->uxTCBNumber
 652:FreeRTOS/tasks.c **** 			}
 653:FreeRTOS/tasks.c **** 			#endif /* configUSE_TRACE_FACILITY */
 654:FreeRTOS/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 655:FreeRTOS/tasks.c **** 
 656:FreeRTOS/tasks.c **** 			prvAddTaskToReadyList( pxNewTCB );
 332              		.loc 1 656 0
 333 00e6 BB69     		ldr	r3, [r7, #24]	@ tmp170, pxNewTCB
 334 00e8 DB6A     		ldr	r3, [r3, #44]	@ D.6465, pxNewTCB_6->uxPriority
 335 00ea 1A46     		mov	r2, r3	@ D.6468, D.6465
 336 00ec 0123     		movs	r3, #1	@ tmp171,
 337 00ee 03FA02F2 		lsl	r2, r3, r2	@ D.6465, tmp171, D.6468
 338 00f2 1B4B     		ldr	r3, .L15+16	@ tmp172,
 339 00f4 1B68     		ldr	r3, [r3]	@ D.6465, uxTopReadyPriority
 340 00f6 1343     		orrs	r3, r3, r2	@, D.6465, D.6465, D.6465
 341 00f8 194A     		ldr	r2, .L15+16	@ tmp173,
 342 00fa 1360     		str	r3, [r2]	@ D.6465, uxTopReadyPriority
 343 00fc BB69     		ldr	r3, [r7, #24]	@ tmp174, pxNewTCB
 344 00fe DA6A     		ldr	r2, [r3, #44]	@ D.6465, pxNewTCB_6->uxPriority
 345 0100 1346     		mov	r3, r2	@ tmp175, D.6465
 346 0102 9B00     		lsls	r3, r3, #2	@ tmp175, tmp175,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 19


 347 0104 1344     		add	r3, r3, r2	@ tmp175, D.6465
 348 0106 9B00     		lsls	r3, r3, #2	@ tmp176, tmp175,
 349 0108 164A     		ldr	r2, .L15+20	@ tmp177,
 350 010a 1A44     		add	r2, r2, r3	@ D.6469, tmp175
 351 010c BB69     		ldr	r3, [r7, #24]	@ tmp178, pxNewTCB
 352 010e 0433     		adds	r3, r3, #4	@ D.6470, tmp178,
 353 0110 1046     		mov	r0, r2	@, D.6469
 354 0112 1946     		mov	r1, r3	@, D.6470
 355 0114 FFF7FEFF 		bl	vListInsertEnd	@
 657:FreeRTOS/tasks.c **** 
 658:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 356              		.loc 1 658 0
 357 0118 0123     		movs	r3, #1	@ tmp179,
 358 011a FB61     		str	r3, [r7, #28]	@ tmp179, xReturn
 659:FreeRTOS/tasks.c **** 			portSETUP_TCB( pxNewTCB );
 660:FreeRTOS/tasks.c **** 		}
 661:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 359              		.loc 1 661 0
 360 011c FFF7FEFF 		bl	vPortExitCritical	@
 361              	.LBE6:
 362 0120 02E0     		b	.L12	@
 363              	.L6:
 662:FreeRTOS/tasks.c **** 	}
 663:FreeRTOS/tasks.c **** 	else
 664:FreeRTOS/tasks.c **** 	{
 665:FreeRTOS/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 364              		.loc 1 665 0
 365 0122 4FF0FF33 		mov	r3, #-1	@ tmp180,
 366 0126 FB61     		str	r3, [r7, #28]	@ tmp180, xReturn
 367              	.L12:
 666:FreeRTOS/tasks.c **** 		traceTASK_CREATE_FAILED();
 667:FreeRTOS/tasks.c **** 	}
 668:FreeRTOS/tasks.c **** 
 669:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 368              		.loc 1 669 0
 369 0128 FB69     		ldr	r3, [r7, #28]	@ tmp181, xReturn
 370 012a 012B     		cmp	r3, #1	@ tmp181,
 371 012c 0BD1     		bne	.L13	@,
 670:FreeRTOS/tasks.c **** 	{
 671:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 372              		.loc 1 671 0
 373 012e 0A4B     		ldr	r3, .L15+8	@ tmp182,
 374 0130 1B68     		ldr	r3, [r3]	@ D.6467, xSchedulerRunning
 375 0132 002B     		cmp	r3, #0	@ D.6467,
 376 0134 07D0     		beq	.L13	@,
 672:FreeRTOS/tasks.c **** 		{
 673:FreeRTOS/tasks.c **** 			/* If the created task is of a higher priority than the current task
 674:FreeRTOS/tasks.c **** 			then it should run now. */
 675:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 377              		.loc 1 675 0
 378 0136 074B     		ldr	r3, .L15+4	@ tmp183,
 379 0138 1B68     		ldr	r3, [r3]	@ D.6466, pxCurrentTCB
 380 013a DA6A     		ldr	r2, [r3, #44]	@ D.6465, _43->uxPriority
 381 013c BB6A     		ldr	r3, [r7, #40]	@ tmp184, uxPriority
 382 013e 9A42     		cmp	r2, r3	@ D.6465, tmp184
 383 0140 01D2     		bcs	.L13	@,
 676:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 20


 677:FreeRTOS/tasks.c **** 				taskYIELD_IF_USING_PREEMPTION();
 384              		.loc 1 677 0
 385 0142 FFF7FEFF 		bl	vPortYield	@
 386              	.L13:
 678:FreeRTOS/tasks.c **** 			}
 679:FreeRTOS/tasks.c **** 			else
 680:FreeRTOS/tasks.c **** 			{
 681:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 682:FreeRTOS/tasks.c **** 			}
 683:FreeRTOS/tasks.c **** 		}
 684:FreeRTOS/tasks.c **** 		else
 685:FreeRTOS/tasks.c **** 		{
 686:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 687:FreeRTOS/tasks.c **** 		}
 688:FreeRTOS/tasks.c **** 	}
 689:FreeRTOS/tasks.c **** 
 690:FreeRTOS/tasks.c **** 	return xReturn;
 387              		.loc 1 690 0
 388 0146 FB69     		ldr	r3, [r7, #28]	@ D.6471, xReturn
 691:FreeRTOS/tasks.c **** }
 389              		.loc 1 691 0
 390 0148 1846     		mov	r0, r3	@, <retval>
 391 014a 2037     		adds	r7, r7, #32	@,,
 392              		.cfi_def_cfa_offset 8
 393 014c BD46     		mov	sp, r7	@,
 394              		.cfi_def_cfa_register 13
 395              		@ sp needed	@
 396 014e 80BD     		pop	{r7, pc}	@
 397              	.L16:
 398              		.align	2
 399              	.L15:
 400 0150 00000000 		.word	uxCurrentNumberOfTasks
 401 0154 00000000 		.word	pxCurrentTCB
 402 0158 00000000 		.word	xSchedulerRunning
 403 015c 00000000 		.word	uxTaskNumber
 404 0160 00000000 		.word	uxTopReadyPriority
 405 0164 00000000 		.word	pxReadyTasksLists
 406              		.cfi_endproc
 407              	.LFE1:
 408              		.size	xTaskGenericCreate, .-xTaskGenericCreate
 409              		.section	.text.vTaskDelete,"ax",%progbits
 410              		.align	2
 411              		.global	vTaskDelete
 412              		.thumb
 413              		.thumb_func
 414              		.type	vTaskDelete, %function
 415              	vTaskDelete:
 416              	.LFB2:
 692:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 693:FreeRTOS/tasks.c **** 
 694:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 695:FreeRTOS/tasks.c **** 
 696:FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
 697:FreeRTOS/tasks.c **** 	{
 417              		.loc 1 697 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 21


 420              		@ frame_needed = 1, uses_anonymous_args = 0
 421 0000 80B5     		push	{r7, lr}	@
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 7, -8
 424              		.cfi_offset 14, -4
 425 0002 84B0     		sub	sp, sp, #16	@,,
 426              		.cfi_def_cfa_offset 24
 427 0004 00AF     		add	r7, sp, #0	@,,
 428              		.cfi_def_cfa_register 7
 429 0006 7860     		str	r0, [r7, #4]	@ xTaskToDelete, xTaskToDelete
 698:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 699:FreeRTOS/tasks.c **** 
 700:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 430              		.loc 1 700 0
 431 0008 FFF7FEFF 		bl	vPortEnterCritical	@
 701:FreeRTOS/tasks.c **** 		{
 702:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
 703:FreeRTOS/tasks.c **** 			being deleted. */
 704:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 432              		.loc 1 704 0
 433 000c 7B68     		ldr	r3, [r7, #4]	@ tmp131, xTaskToDelete
 434 000e 002B     		cmp	r3, #0	@ tmp131,
 435 0010 02D1     		bne	.L18	@,
 436              		.loc 1 704 0 is_stmt 0 discriminator 1
 437 0012 2D4B     		ldr	r3, .L27	@ tmp132,
 438 0014 1B68     		ldr	r3, [r3]	@ D.6472, pxCurrentTCB
 439 0016 00E0     		b	.L19	@
 440              	.L18:
 441              		.loc 1 704 0 discriminator 2
 442 0018 7B68     		ldr	r3, [r7, #4]	@ D.6472, xTaskToDelete
 443              	.L19:
 444              		.loc 1 704 0 discriminator 4
 445 001a FB60     		str	r3, [r7, #12]	@ D.6472, pxTCB
 705:FreeRTOS/tasks.c **** 
 706:FreeRTOS/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 707:FreeRTOS/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 708:FreeRTOS/tasks.c **** 			the termination list and free up any memory allocated by the
 709:FreeRTOS/tasks.c **** 			scheduler for the TCB and stack. */
 710:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 446              		.loc 1 710 0 is_stmt 1 discriminator 4
 447 001c FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 448 001e 0433     		adds	r3, r3, #4	@ D.6473, tmp133,
 449 0020 1846     		mov	r0, r3	@, D.6473
 450 0022 FFF7FEFF 		bl	uxListRemove	@
 451 0026 0346     		mov	r3, r0	@ D.6474,
 452 0028 002B     		cmp	r3, #0	@ D.6474,
 453 002a 15D1     		bne	.L20	@,
 711:FreeRTOS/tasks.c **** 			{
 712:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 454              		.loc 1 712 0
 455 002c FB68     		ldr	r3, [r7, #12]	@ tmp134, pxTCB
 456 002e DA6A     		ldr	r2, [r3, #44]	@ D.6474, pxTCB_5->uxPriority
 457 0030 2649     		ldr	r1, .L27+4	@ tmp135,
 458 0032 1346     		mov	r3, r2	@ tmp136, D.6474
 459 0034 9B00     		lsls	r3, r3, #2	@ tmp136, tmp136,
 460 0036 1344     		add	r3, r3, r2	@ tmp136, D.6474
 461 0038 9B00     		lsls	r3, r3, #2	@ tmp137, tmp136,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 22


 462 003a 0B44     		add	r3, r3, r1	@ tmp138, tmp135
 463 003c 1B68     		ldr	r3, [r3]	@ D.6474, pxReadyTasksLists[_8].uxNumberOfItems
 464 003e 002B     		cmp	r3, #0	@ D.6474,
 465 0040 0AD1     		bne	.L20	@,
 466              		.loc 1 712 0 is_stmt 0 discriminator 1
 467 0042 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 468 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6474, pxTCB_5->uxPriority
 469 0046 1A46     		mov	r2, r3	@ D.6475, D.6474
 470 0048 0123     		movs	r3, #1	@ tmp140,
 471 004a 9340     		lsls	r3, r3, r2	@ D.6474, tmp140, D.6475
 472 004c DA43     		mvns	r2, r3	@ D.6474, D.6474
 473 004e 204B     		ldr	r3, .L27+8	@ tmp141,
 474 0050 1B68     		ldr	r3, [r3]	@ D.6474, uxTopReadyPriority
 475 0052 1340     		ands	r3, r3, r2	@, D.6474, D.6474, D.6474
 476 0054 1E4A     		ldr	r2, .L27+8	@ tmp142,
 477 0056 1360     		str	r3, [r2]	@ D.6474, uxTopReadyPriority
 478              	.L20:
 713:FreeRTOS/tasks.c **** 			}
 714:FreeRTOS/tasks.c **** 			else
 715:FreeRTOS/tasks.c **** 			{
 716:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 717:FreeRTOS/tasks.c **** 			}
 718:FreeRTOS/tasks.c **** 
 719:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
 720:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 479              		.loc 1 720 0 is_stmt 1
 480 0058 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 481 005a 9B6A     		ldr	r3, [r3, #40]	@ D.6476, pxTCB_5->xEventListItem.pvContainer
 482 005c 002B     		cmp	r3, #0	@ D.6476,
 483 005e 04D0     		beq	.L22	@,
 721:FreeRTOS/tasks.c **** 			{
 722:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 484              		.loc 1 722 0
 485 0060 FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 486 0062 1833     		adds	r3, r3, #24	@ D.6473, tmp144,
 487 0064 1846     		mov	r0, r3	@, D.6473
 488 0066 FFF7FEFF 		bl	uxListRemove	@
 489              	.L22:
 723:FreeRTOS/tasks.c **** 			}
 724:FreeRTOS/tasks.c **** 			else
 725:FreeRTOS/tasks.c **** 			{
 726:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 727:FreeRTOS/tasks.c **** 			}
 728:FreeRTOS/tasks.c **** 
 729:FreeRTOS/tasks.c **** 			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 490              		.loc 1 729 0
 491 006a FB68     		ldr	r3, [r7, #12]	@ tmp145, pxTCB
 492 006c 0433     		adds	r3, r3, #4	@ D.6473, tmp145,
 493 006e 1948     		ldr	r0, .L27+12	@,
 494 0070 1946     		mov	r1, r3	@, D.6473
 495 0072 FFF7FEFF 		bl	vListInsertEnd	@
 730:FreeRTOS/tasks.c **** 
 731:FreeRTOS/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 732:FreeRTOS/tasks.c **** 			there is a task that has been deleted and that it should therefore
 733:FreeRTOS/tasks.c **** 			check the xTasksWaitingTermination list. */
 734:FreeRTOS/tasks.c **** 			++uxTasksDeleted;
 496              		.loc 1 734 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 23


 497 0076 184B     		ldr	r3, .L27+16	@ tmp146,
 498 0078 1B68     		ldr	r3, [r3]	@ D.6474, uxTasksDeleted
 499 007a 0133     		adds	r3, r3, #1	@ D.6474, D.6474,
 500 007c 164A     		ldr	r2, .L27+16	@ tmp147,
 501 007e 1360     		str	r3, [r2]	@ D.6474, uxTasksDeleted
 735:FreeRTOS/tasks.c **** 
 736:FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 737:FreeRTOS/tasks.c **** 			can detect that the task lists need re-generating. */
 738:FreeRTOS/tasks.c **** 			uxTaskNumber++;
 502              		.loc 1 738 0
 503 0080 164B     		ldr	r3, .L27+20	@ tmp148,
 504 0082 1B68     		ldr	r3, [r3]	@ D.6474, uxTaskNumber
 505 0084 0133     		adds	r3, r3, #1	@ D.6474, D.6474,
 506 0086 154A     		ldr	r2, .L27+20	@ tmp149,
 507 0088 1360     		str	r3, [r2]	@ D.6474, uxTaskNumber
 739:FreeRTOS/tasks.c **** 
 740:FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
 741:FreeRTOS/tasks.c **** 		}
 742:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 508              		.loc 1 742 0
 509 008a FFF7FEFF 		bl	vPortExitCritical	@
 743:FreeRTOS/tasks.c **** 
 744:FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
 745:FreeRTOS/tasks.c **** 		been deleted. */
 746:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 510              		.loc 1 746 0
 511 008e 144B     		ldr	r3, .L27+24	@ tmp150,
 512 0090 1B68     		ldr	r3, [r3]	@ D.6477, xSchedulerRunning
 513 0092 002B     		cmp	r3, #0	@ D.6477,
 514 0094 14D0     		beq	.L17	@,
 747:FreeRTOS/tasks.c **** 		{
 748:FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 515              		.loc 1 748 0
 516 0096 0C4B     		ldr	r3, .L27	@ tmp151,
 517 0098 1B68     		ldr	r3, [r3]	@ D.6478, pxCurrentTCB
 518 009a FA68     		ldr	r2, [r7, #12]	@ tmp152, pxTCB
 519 009c 9A42     		cmp	r2, r3	@ tmp152, D.6478
 520 009e 09D1     		bne	.L24	@,
 749:FreeRTOS/tasks.c **** 			{
 750:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 521              		.loc 1 750 0
 522 00a0 104B     		ldr	r3, .L27+28	@ tmp153,
 523 00a2 1B68     		ldr	r3, [r3]	@ D.6474, uxSchedulerSuspended
 524 00a4 002B     		cmp	r3, #0	@ D.6474,
 525 00a6 02D0     		beq	.L25	@,
 526              		.loc 1 750 0 is_stmt 0 discriminator 1
 527 00a8 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 528              	.L26:
 529 00ac FEE7     		b	.L26	@
 530              	.L25:
 751:FreeRTOS/tasks.c **** 
 752:FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
 753:FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
 754:FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
 755:FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
 756:FreeRTOS/tasks.c **** 				required. */
 757:FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 24


 758:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 531              		.loc 1 758 0 is_stmt 1
 532 00ae FFF7FEFF 		bl	vPortYield	@
 533 00b2 05E0     		b	.L17	@
 534              	.L24:
 759:FreeRTOS/tasks.c **** 			}
 760:FreeRTOS/tasks.c **** 			else
 761:FreeRTOS/tasks.c **** 			{
 762:FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
 763:FreeRTOS/tasks.c **** 				the task that has just been deleted. */
 764:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 535              		.loc 1 764 0
 536 00b4 FFF7FEFF 		bl	vPortEnterCritical	@
 765:FreeRTOS/tasks.c **** 				{
 766:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 537              		.loc 1 766 0
 538 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 767:FreeRTOS/tasks.c **** 				}
 768:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 539              		.loc 1 768 0
 540 00bc FFF7FEFF 		bl	vPortExitCritical	@
 541              	.L17:
 769:FreeRTOS/tasks.c **** 			}
 770:FreeRTOS/tasks.c **** 		}
 771:FreeRTOS/tasks.c **** 	}
 542              		.loc 1 771 0
 543 00c0 1037     		adds	r7, r7, #16	@,,
 544              		.cfi_def_cfa_offset 8
 545 00c2 BD46     		mov	sp, r7	@,
 546              		.cfi_def_cfa_register 13
 547              		@ sp needed	@
 548 00c4 80BD     		pop	{r7, pc}	@
 549              	.L28:
 550 00c6 00BF     		.align	2
 551              	.L27:
 552 00c8 00000000 		.word	pxCurrentTCB
 553 00cc 00000000 		.word	pxReadyTasksLists
 554 00d0 00000000 		.word	uxTopReadyPriority
 555 00d4 00000000 		.word	xTasksWaitingTermination
 556 00d8 00000000 		.word	uxTasksDeleted
 557 00dc 00000000 		.word	uxTaskNumber
 558 00e0 00000000 		.word	xSchedulerRunning
 559 00e4 00000000 		.word	uxSchedulerSuspended
 560              		.cfi_endproc
 561              	.LFE2:
 562              		.size	vTaskDelete, .-vTaskDelete
 563              		.section	.text.vTaskDelayUntil,"ax",%progbits
 564              		.align	2
 565              		.global	vTaskDelayUntil
 566              		.thumb
 567              		.thumb_func
 568              		.type	vTaskDelayUntil, %function
 569              	vTaskDelayUntil:
 570              	.LFB3:
 772:FreeRTOS/tasks.c **** 
 773:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
 774:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 25


 775:FreeRTOS/tasks.c **** 
 776:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 777:FreeRTOS/tasks.c **** 
 778:FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickT_t * const pxPreviousWakeTime, const TickT_t xTimeIncrement )
 779:FreeRTOS/tasks.c **** 	{
 571              		.loc 1 779 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 24
 574              		@ frame_needed = 1, uses_anonymous_args = 0
 575 0000 80B5     		push	{r7, lr}	@
 576              		.cfi_def_cfa_offset 8
 577              		.cfi_offset 7, -8
 578              		.cfi_offset 14, -4
 579 0002 86B0     		sub	sp, sp, #24	@,,
 580              		.cfi_def_cfa_offset 32
 581 0004 00AF     		add	r7, sp, #0	@,,
 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]	@ pxPreviousWakeTime, pxPreviousWakeTime
 584 0008 3960     		str	r1, [r7]	@ xTimeIncrement, xTimeIncrement
 780:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 781:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded, xShouldDelay = pdFALSE;
 585              		.loc 1 781 0
 586 000a 0023     		movs	r3, #0	@ tmp125,
 587 000c 7B61     		str	r3, [r7, #20]	@ tmp125, xShouldDelay
 782:FreeRTOS/tasks.c **** 
 783:FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 588              		.loc 1 783 0
 589 000e 7B68     		ldr	r3, [r7, #4]	@ tmp126, pxPreviousWakeTime
 590 0010 002B     		cmp	r3, #0	@ tmp126,
 591 0012 02D1     		bne	.L30	@,
 592              		.loc 1 783 0 is_stmt 0 discriminator 1
 593 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 594              	.L31:
 595 0018 FEE7     		b	.L31	@
 596              	.L30:
 784:FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 597              		.loc 1 784 0 is_stmt 1
 598 001a 3B68     		ldr	r3, [r7]	@ tmp127, xTimeIncrement
 599 001c 002B     		cmp	r3, #0	@ tmp127,
 600 001e 02D1     		bne	.L32	@,
 601              		.loc 1 784 0 is_stmt 0 discriminator 1
 602 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 603              	.L33:
 604              		.loc 1 784 0 discriminator 2
 605 0024 FEE7     		b	.L33	@
 606              	.L32:
 785:FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 607              		.loc 1 785 0 is_stmt 1
 608 0026 2B4B     		ldr	r3, .L42	@ tmp128,
 609 0028 1B68     		ldr	r3, [r3]	@ D.6479, uxSchedulerSuspended
 610 002a 002B     		cmp	r3, #0	@ D.6479,
 611 002c 02D0     		beq	.L34	@,
 612              		.loc 1 785 0 is_stmt 0 discriminator 1
 613 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 614              	.L35:
 615              		.loc 1 785 0 discriminator 3
 616 0032 FEE7     		b	.L35	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 26


 617              	.L34:
 786:FreeRTOS/tasks.c **** 
 787:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 618              		.loc 1 787 0 is_stmt 1
 619 0034 FFF7FEFF 		bl	vTaskSuspendAll	@
 620              	.LBB7:
 788:FreeRTOS/tasks.c **** 		{
 789:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
 790:FreeRTOS/tasks.c **** 			block. */
 791:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 621              		.loc 1 791 0
 622 0038 274B     		ldr	r3, .L42+4	@ tmp129,
 623 003a 1B68     		ldr	r3, [r3]	@ tmp130, xTickCount
 624 003c 3B61     		str	r3, [r7, #16]	@ tmp130, xConstTickCount
 792:FreeRTOS/tasks.c **** 
 793:FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 794:FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 625              		.loc 1 794 0
 626 003e 7B68     		ldr	r3, [r7, #4]	@ tmp131, pxPreviousWakeTime
 627 0040 1A68     		ldr	r2, [r3]	@ D.6479, *pxPreviousWakeTime_3(D)
 628 0042 3B68     		ldr	r3, [r7]	@ tmp133, xTimeIncrement
 629 0044 1344     		add	r3, r3, r2	@ tmp132, D.6479
 630 0046 FB60     		str	r3, [r7, #12]	@ tmp132, xTimeToWake
 795:FreeRTOS/tasks.c **** 
 796:FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 631              		.loc 1 796 0
 632 0048 7B68     		ldr	r3, [r7, #4]	@ tmp134, pxPreviousWakeTime
 633 004a 1A68     		ldr	r2, [r3]	@ D.6479, *pxPreviousWakeTime_3(D)
 634 004c 3B69     		ldr	r3, [r7, #16]	@ tmp135, xConstTickCount
 635 004e 9A42     		cmp	r2, r3	@ D.6479, tmp135
 636 0050 0BD9     		bls	.L36	@,
 797:FreeRTOS/tasks.c **** 			{
 798:FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
 799:FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
 800:FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 801:FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
 802:FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
 803:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 637              		.loc 1 803 0
 638 0052 7B68     		ldr	r3, [r7, #4]	@ tmp136, pxPreviousWakeTime
 639 0054 1A68     		ldr	r2, [r3]	@ D.6479, *pxPreviousWakeTime_3(D)
 640 0056 FB68     		ldr	r3, [r7, #12]	@ tmp137, xTimeToWake
 641 0058 9A42     		cmp	r2, r3	@ D.6479, tmp137
 642 005a 11D9     		bls	.L37	@,
 643              		.loc 1 803 0 is_stmt 0 discriminator 1
 644 005c FA68     		ldr	r2, [r7, #12]	@ tmp138, xTimeToWake
 645 005e 3B69     		ldr	r3, [r7, #16]	@ tmp139, xConstTickCount
 646 0060 9A42     		cmp	r2, r3	@ tmp138, tmp139
 647 0062 0DD9     		bls	.L37	@,
 804:FreeRTOS/tasks.c **** 				{
 805:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 648              		.loc 1 805 0 is_stmt 1
 649 0064 0123     		movs	r3, #1	@ tmp140,
 650 0066 7B61     		str	r3, [r7, #20]	@ tmp140, xShouldDelay
 651 0068 0AE0     		b	.L37	@
 652              	.L36:
 806:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 27


 807:FreeRTOS/tasks.c **** 				else
 808:FreeRTOS/tasks.c **** 				{
 809:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 810:FreeRTOS/tasks.c **** 				}
 811:FreeRTOS/tasks.c **** 			}
 812:FreeRTOS/tasks.c **** 			else
 813:FreeRTOS/tasks.c **** 			{
 814:FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 815:FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 816:FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
 817:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 653              		.loc 1 817 0
 654 006a 7B68     		ldr	r3, [r7, #4]	@ tmp141, pxPreviousWakeTime
 655 006c 1A68     		ldr	r2, [r3]	@ D.6479, *pxPreviousWakeTime_3(D)
 656 006e FB68     		ldr	r3, [r7, #12]	@ tmp142, xTimeToWake
 657 0070 9A42     		cmp	r2, r3	@ D.6479, tmp142
 658 0072 03D8     		bhi	.L38	@,
 659              		.loc 1 817 0 is_stmt 0 discriminator 1
 660 0074 FA68     		ldr	r2, [r7, #12]	@ tmp143, xTimeToWake
 661 0076 3B69     		ldr	r3, [r7, #16]	@ tmp144, xConstTickCount
 662 0078 9A42     		cmp	r2, r3	@ tmp143, tmp144
 663 007a 01D9     		bls	.L37	@,
 664              	.L38:
 818:FreeRTOS/tasks.c **** 				{
 819:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
 665              		.loc 1 819 0 is_stmt 1
 666 007c 0123     		movs	r3, #1	@ tmp145,
 667 007e 7B61     		str	r3, [r7, #20]	@ tmp145, xShouldDelay
 668              	.L37:
 820:FreeRTOS/tasks.c **** 				}
 821:FreeRTOS/tasks.c **** 				else
 822:FreeRTOS/tasks.c **** 				{
 823:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 824:FreeRTOS/tasks.c **** 				}
 825:FreeRTOS/tasks.c **** 			}
 826:FreeRTOS/tasks.c **** 
 827:FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
 828:FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 669              		.loc 1 828 0
 670 0080 7B68     		ldr	r3, [r7, #4]	@ tmp146, pxPreviousWakeTime
 671 0082 FA68     		ldr	r2, [r7, #12]	@ tmp147, xTimeToWake
 672 0084 1A60     		str	r2, [r3]	@ tmp147, *pxPreviousWakeTime_3(D)
 829:FreeRTOS/tasks.c **** 
 830:FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
 673              		.loc 1 830 0
 674 0086 7B69     		ldr	r3, [r7, #20]	@ tmp148, xShouldDelay
 675 0088 002B     		cmp	r3, #0	@ tmp148,
 676 008a 17D0     		beq	.L39	@,
 831:FreeRTOS/tasks.c **** 			{
 832:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL();
 833:FreeRTOS/tasks.c **** 
 834:FreeRTOS/tasks.c **** 				/* Remove the task from the ready list before adding it to the
 835:FreeRTOS/tasks.c **** 				blocked list as the same list item is used for both lists. */
 836:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 677              		.loc 1 836 0
 678 008c 134B     		ldr	r3, .L42+8	@ tmp149,
 679 008e 1B68     		ldr	r3, [r3]	@ D.6480, pxCurrentTCB
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 28


 680 0090 0433     		adds	r3, r3, #4	@ D.6481, D.6480,
 681 0092 1846     		mov	r0, r3	@, D.6481
 682 0094 FFF7FEFF 		bl	uxListRemove	@
 683 0098 0346     		mov	r3, r0	@ D.6479,
 684 009a 002B     		cmp	r3, #0	@ D.6479,
 685 009c 0BD1     		bne	.L40	@,
 837:FreeRTOS/tasks.c **** 				{
 838:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 839:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 840:FreeRTOS/tasks.c **** 					directly. */
 841:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 686              		.loc 1 841 0
 687 009e 0F4B     		ldr	r3, .L42+8	@ tmp150,
 688 00a0 1B68     		ldr	r3, [r3]	@ D.6480, pxCurrentTCB
 689 00a2 DB6A     		ldr	r3, [r3, #44]	@ D.6479, _17->uxPriority
 690 00a4 1A46     		mov	r2, r3	@ D.6482, D.6479
 691 00a6 0123     		movs	r3, #1	@ tmp151,
 692 00a8 9340     		lsls	r3, r3, r2	@ D.6479, tmp151, D.6482
 693 00aa DA43     		mvns	r2, r3	@ D.6479, D.6479
 694 00ac 0C4B     		ldr	r3, .L42+12	@ tmp152,
 695 00ae 1B68     		ldr	r3, [r3]	@ D.6479, uxTopReadyPriority
 696 00b0 1340     		ands	r3, r3, r2	@, D.6479, D.6479, D.6479
 697 00b2 0B4A     		ldr	r2, .L42+12	@ tmp153,
 698 00b4 1360     		str	r3, [r2]	@ D.6479, uxTopReadyPriority
 699              	.L40:
 842:FreeRTOS/tasks.c **** 				}
 843:FreeRTOS/tasks.c **** 				else
 844:FreeRTOS/tasks.c **** 				{
 845:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 846:FreeRTOS/tasks.c **** 				}
 847:FreeRTOS/tasks.c **** 
 848:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 700              		.loc 1 848 0
 701 00b6 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 702 00b8 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 703              	.L39:
 704              	.LBE7:
 849:FreeRTOS/tasks.c **** 			}
 850:FreeRTOS/tasks.c **** 			else
 851:FreeRTOS/tasks.c **** 			{
 852:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 853:FreeRTOS/tasks.c **** 			}
 854:FreeRTOS/tasks.c **** 		}
 855:FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 705              		.loc 1 855 0
 706 00bc FFF7FEFF 		bl	xTaskResumeAll	@
 707 00c0 B860     		str	r0, [r7, #8]	@, xAlreadyYielded
 856:FreeRTOS/tasks.c **** 
 857:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 858:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 859:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 708              		.loc 1 859 0
 709 00c2 BB68     		ldr	r3, [r7, #8]	@ tmp154, xAlreadyYielded
 710 00c4 002B     		cmp	r3, #0	@ tmp154,
 711 00c6 01D1     		bne	.L29	@,
 860:FreeRTOS/tasks.c **** 		{
 861:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 29


 712              		.loc 1 861 0
 713 00c8 FFF7FEFF 		bl	vPortYield	@
 714              	.L29:
 862:FreeRTOS/tasks.c **** 		}
 863:FreeRTOS/tasks.c **** 		else
 864:FreeRTOS/tasks.c **** 		{
 865:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 866:FreeRTOS/tasks.c **** 		}
 867:FreeRTOS/tasks.c **** 	}
 715              		.loc 1 867 0
 716 00cc 1837     		adds	r7, r7, #24	@,,
 717              		.cfi_def_cfa_offset 8
 718 00ce BD46     		mov	sp, r7	@,
 719              		.cfi_def_cfa_register 13
 720              		@ sp needed	@
 721 00d0 80BD     		pop	{r7, pc}	@
 722              	.L43:
 723 00d2 00BF     		.align	2
 724              	.L42:
 725 00d4 00000000 		.word	uxSchedulerSuspended
 726 00d8 00000000 		.word	xTickCount
 727 00dc 00000000 		.word	pxCurrentTCB
 728 00e0 00000000 		.word	uxTopReadyPriority
 729              		.cfi_endproc
 730              	.LFE3:
 731              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 732              		.section	.text.vTaskDelay,"ax",%progbits
 733              		.align	2
 734              		.global	vTaskDelay
 735              		.thumb
 736              		.thumb_func
 737              		.type	vTaskDelay, %function
 738              	vTaskDelay:
 739              	.LFB4:
 868:FreeRTOS/tasks.c **** 
 869:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
 870:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 871:FreeRTOS/tasks.c **** 
 872:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 873:FreeRTOS/tasks.c **** 
 874:FreeRTOS/tasks.c **** 	void vTaskDelay( const TickT_t xTicksToDelay )
 875:FreeRTOS/tasks.c **** 	{
 740              		.loc 1 875 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 16
 743              		@ frame_needed = 1, uses_anonymous_args = 0
 744 0000 80B5     		push	{r7, lr}	@
 745              		.cfi_def_cfa_offset 8
 746              		.cfi_offset 7, -8
 747              		.cfi_offset 14, -4
 748 0002 84B0     		sub	sp, sp, #16	@,,
 749              		.cfi_def_cfa_offset 24
 750 0004 00AF     		add	r7, sp, #0	@,,
 751              		.cfi_def_cfa_register 7
 752 0006 7860     		str	r0, [r7, #4]	@ xTicksToDelay, xTicksToDelay
 876:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
 877:FreeRTOS/tasks.c **** 	BaseT_t xAlreadyYielded = pdFALSE;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 30


 753              		.loc 1 877 0
 754 0008 0023     		movs	r3, #0	@ tmp122,
 755 000a FB60     		str	r3, [r7, #12]	@ tmp122, xAlreadyYielded
 878:FreeRTOS/tasks.c **** 
 879:FreeRTOS/tasks.c **** 
 880:FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 881:FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickT_t ) 0U )
 756              		.loc 1 881 0
 757 000c 7B68     		ldr	r3, [r7, #4]	@ tmp123, xTicksToDelay
 758 000e 002B     		cmp	r3, #0	@ tmp123,
 759 0010 28D0     		beq	.L45	@,
 882:FreeRTOS/tasks.c **** 		{
 883:FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 760              		.loc 1 883 0
 761 0012 184B     		ldr	r3, .L50	@ tmp124,
 762 0014 1B68     		ldr	r3, [r3]	@ D.6483, uxSchedulerSuspended
 763 0016 002B     		cmp	r3, #0	@ D.6483,
 764 0018 02D0     		beq	.L46	@,
 765              		.loc 1 883 0 is_stmt 0 discriminator 1
 766 001a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 767              	.L47:
 768 001e FEE7     		b	.L47	@
 769              	.L46:
 884:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 770              		.loc 1 884 0 is_stmt 1
 771 0020 FFF7FEFF 		bl	vTaskSuspendAll	@
 885:FreeRTOS/tasks.c **** 			{
 886:FreeRTOS/tasks.c **** 				traceTASK_DELAY();
 887:FreeRTOS/tasks.c **** 
 888:FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
 889:FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
 890:FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
 891:FreeRTOS/tasks.c **** 				is resumed.
 892:FreeRTOS/tasks.c **** 
 893:FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
 894:FreeRTOS/tasks.c **** 				executing task. */
 895:FreeRTOS/tasks.c **** 
 896:FreeRTOS/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 897:FreeRTOS/tasks.c **** 				not a problem. */
 898:FreeRTOS/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 772              		.loc 1 898 0
 773 0024 144B     		ldr	r3, .L50+4	@ tmp125,
 774 0026 1A68     		ldr	r2, [r3]	@ D.6483, xTickCount
 775 0028 7B68     		ldr	r3, [r7, #4]	@ tmp127, xTicksToDelay
 776 002a 1344     		add	r3, r3, r2	@ tmp126, D.6483
 777 002c BB60     		str	r3, [r7, #8]	@ tmp126, xTimeToWake
 899:FreeRTOS/tasks.c **** 
 900:FreeRTOS/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 901:FreeRTOS/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 902:FreeRTOS/tasks.c **** 				both lists. */
 903:FreeRTOS/tasks.c **** 				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 778              		.loc 1 903 0
 779 002e 134B     		ldr	r3, .L50+8	@ tmp128,
 780 0030 1B68     		ldr	r3, [r3]	@ D.6484, pxCurrentTCB
 781 0032 0433     		adds	r3, r3, #4	@ D.6485, D.6484,
 782 0034 1846     		mov	r0, r3	@, D.6485
 783 0036 FFF7FEFF 		bl	uxListRemove	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 31


 784 003a 0346     		mov	r3, r0	@ D.6483,
 785 003c 002B     		cmp	r3, #0	@ D.6483,
 786 003e 0BD1     		bne	.L48	@,
 904:FreeRTOS/tasks.c **** 				{
 905:FreeRTOS/tasks.c **** 					/* The current task must be in a ready list, so there is
 906:FreeRTOS/tasks.c **** 					no need to check, and the port reset macro can be called
 907:FreeRTOS/tasks.c **** 					directly. */
 908:FreeRTOS/tasks.c **** 					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 787              		.loc 1 908 0
 788 0040 0E4B     		ldr	r3, .L50+8	@ tmp129,
 789 0042 1B68     		ldr	r3, [r3]	@ D.6484, pxCurrentTCB
 790 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6483, _10->uxPriority
 791 0046 1A46     		mov	r2, r3	@ D.6486, D.6483
 792 0048 0123     		movs	r3, #1	@ tmp130,
 793 004a 9340     		lsls	r3, r3, r2	@ D.6483, tmp130, D.6486
 794 004c DA43     		mvns	r2, r3	@ D.6483, D.6483
 795 004e 0C4B     		ldr	r3, .L50+12	@ tmp131,
 796 0050 1B68     		ldr	r3, [r3]	@ D.6483, uxTopReadyPriority
 797 0052 1340     		ands	r3, r3, r2	@, D.6483, D.6483, D.6483
 798 0054 0A4A     		ldr	r2, .L50+12	@ tmp132,
 799 0056 1360     		str	r3, [r2]	@ D.6483, uxTopReadyPriority
 800              	.L48:
 909:FreeRTOS/tasks.c **** 				}
 910:FreeRTOS/tasks.c **** 				else
 911:FreeRTOS/tasks.c **** 				{
 912:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
 913:FreeRTOS/tasks.c **** 				}
 914:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 801              		.loc 1 914 0
 802 0058 B868     		ldr	r0, [r7, #8]	@, xTimeToWake
 803 005a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 915:FreeRTOS/tasks.c **** 			}
 916:FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 804              		.loc 1 916 0
 805 005e FFF7FEFF 		bl	xTaskResumeAll	@
 806 0062 F860     		str	r0, [r7, #12]	@, xAlreadyYielded
 807              	.L45:
 917:FreeRTOS/tasks.c **** 		}
 918:FreeRTOS/tasks.c **** 		else
 919:FreeRTOS/tasks.c **** 		{
 920:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 921:FreeRTOS/tasks.c **** 		}
 922:FreeRTOS/tasks.c **** 
 923:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 924:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
 925:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 808              		.loc 1 925 0
 809 0064 FB68     		ldr	r3, [r7, #12]	@ tmp133, xAlreadyYielded
 810 0066 002B     		cmp	r3, #0	@ tmp133,
 811 0068 01D1     		bne	.L44	@,
 926:FreeRTOS/tasks.c **** 		{
 927:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
 812              		.loc 1 927 0
 813 006a FFF7FEFF 		bl	vPortYield	@
 814              	.L44:
 928:FreeRTOS/tasks.c **** 		}
 929:FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 32


 930:FreeRTOS/tasks.c **** 		{
 931:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 932:FreeRTOS/tasks.c **** 		}
 933:FreeRTOS/tasks.c **** 	}
 815              		.loc 1 933 0
 816 006e 1037     		adds	r7, r7, #16	@,,
 817              		.cfi_def_cfa_offset 8
 818 0070 BD46     		mov	sp, r7	@,
 819              		.cfi_def_cfa_register 13
 820              		@ sp needed	@
 821 0072 80BD     		pop	{r7, pc}	@
 822              	.L51:
 823              		.align	2
 824              	.L50:
 825 0074 00000000 		.word	uxSchedulerSuspended
 826 0078 00000000 		.word	xTickCount
 827 007c 00000000 		.word	pxCurrentTCB
 828 0080 00000000 		.word	uxTopReadyPriority
 829              		.cfi_endproc
 830              	.LFE4:
 831              		.size	vTaskDelay, .-vTaskDelay
 832              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 833              		.align	2
 834              		.global	uxTaskPriorityGet
 835              		.thumb
 836              		.thumb_func
 837              		.type	uxTaskPriorityGet, %function
 838              	uxTaskPriorityGet:
 839              	.LFB5:
 934:FreeRTOS/tasks.c **** 
 935:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
 936:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 937:FreeRTOS/tasks.c **** 
 938:FreeRTOS/tasks.c **** #if ( INCLUDE_eTaskGetState == 1 )
 939:FreeRTOS/tasks.c **** 
 940:FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
 941:FreeRTOS/tasks.c **** 	{
 942:FreeRTOS/tasks.c **** 	eTaskState eReturn;
 943:FreeRTOS/tasks.c **** 	List_t *pxStateList;
 944:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 945:FreeRTOS/tasks.c **** 
 946:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
 947:FreeRTOS/tasks.c **** 
 948:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 949:FreeRTOS/tasks.c **** 		{
 950:FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
 951:FreeRTOS/tasks.c **** 			eReturn = eRunning;
 952:FreeRTOS/tasks.c **** 		}
 953:FreeRTOS/tasks.c **** 		else
 954:FreeRTOS/tasks.c **** 		{
 955:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 956:FreeRTOS/tasks.c **** 			{
 957:FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
 958:FreeRTOS/tasks.c **** 			}
 959:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 960:FreeRTOS/tasks.c **** 
 961:FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 33


 962:FreeRTOS/tasks.c **** 			{
 963:FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
 964:FreeRTOS/tasks.c **** 				lists. */
 965:FreeRTOS/tasks.c **** 				eReturn = eBlocked;
 966:FreeRTOS/tasks.c **** 			}
 967:FreeRTOS/tasks.c **** 
 968:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
 969:FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 970:FreeRTOS/tasks.c **** 				{
 971:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
 972:FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
 973:FreeRTOS/tasks.c **** 					indefinitely? */
 974:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 975:FreeRTOS/tasks.c **** 					{
 976:FreeRTOS/tasks.c **** 						eReturn = eSuspended;
 977:FreeRTOS/tasks.c **** 					}
 978:FreeRTOS/tasks.c **** 					else
 979:FreeRTOS/tasks.c **** 					{
 980:FreeRTOS/tasks.c **** 						eReturn = eBlocked;
 981:FreeRTOS/tasks.c **** 					}
 982:FreeRTOS/tasks.c **** 				}
 983:FreeRTOS/tasks.c **** 			#endif
 984:FreeRTOS/tasks.c **** 
 985:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
 986:FreeRTOS/tasks.c **** 				else if( pxStateList == &xTasksWaitingTermination )
 987:FreeRTOS/tasks.c **** 				{
 988:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
 989:FreeRTOS/tasks.c **** 					tasks list. */
 990:FreeRTOS/tasks.c **** 					eReturn = eDeleted;
 991:FreeRTOS/tasks.c **** 				}
 992:FreeRTOS/tasks.c **** 			#endif
 993:FreeRTOS/tasks.c **** 
 994:FreeRTOS/tasks.c **** 			else
 995:FreeRTOS/tasks.c **** 			{
 996:FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
 997:FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
 998:FreeRTOS/tasks.c **** 				eReturn = eReady;
 999:FreeRTOS/tasks.c **** 			}
1000:FreeRTOS/tasks.c **** 		}
1001:FreeRTOS/tasks.c **** 
1002:FreeRTOS/tasks.c **** 		return eReturn;
1003:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1004:FreeRTOS/tasks.c **** 
1005:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1006:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1007:FreeRTOS/tasks.c **** 
1008:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1009:FreeRTOS/tasks.c **** 
1010:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskPriorityGet( TaskHandle_t xTask )
1011:FreeRTOS/tasks.c **** 	{
 840              		.loc 1 1011 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 16
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844 0000 80B5     		push	{r7, lr}	@
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 7, -8
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 34


 847              		.cfi_offset 14, -4
 848 0002 84B0     		sub	sp, sp, #16	@,,
 849              		.cfi_def_cfa_offset 24
 850 0004 00AF     		add	r7, sp, #0	@,,
 851              		.cfi_def_cfa_register 7
 852 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1012:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1013:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
1014:FreeRTOS/tasks.c **** 
1015:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 853              		.loc 1 1015 0
 854 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1016:FreeRTOS/tasks.c **** 		{
1017:FreeRTOS/tasks.c **** 			/* If null is passed in here then we are changing the
1018:FreeRTOS/tasks.c **** 			priority of the calling function. */
1019:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 855              		.loc 1 1019 0
 856 000c 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 857 000e 002B     		cmp	r3, #0	@ tmp113,
 858 0010 02D1     		bne	.L53	@,
 859              		.loc 1 1019 0 is_stmt 0 discriminator 1
 860 0012 074B     		ldr	r3, .L56	@ tmp114,
 861 0014 1B68     		ldr	r3, [r3]	@ D.6487, pxCurrentTCB
 862 0016 00E0     		b	.L54	@
 863              	.L53:
 864              		.loc 1 1019 0 discriminator 2
 865 0018 7B68     		ldr	r3, [r7, #4]	@ D.6487, xTask
 866              	.L54:
 867              		.loc 1 1019 0 discriminator 4
 868 001a FB60     		str	r3, [r7, #12]	@ D.6487, pxTCB
1020:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 869              		.loc 1 1020 0 is_stmt 1 discriminator 4
 870 001c FB68     		ldr	r3, [r7, #12]	@ tmp115, pxTCB
 871 001e DB6A     		ldr	r3, [r3, #44]	@ tmp116, pxTCB_5->uxPriority
 872 0020 BB60     		str	r3, [r7, #8]	@ tmp116, uxReturn
1021:FreeRTOS/tasks.c **** 		}
1022:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 873              		.loc 1 1022 0 discriminator 4
 874 0022 FFF7FEFF 		bl	vPortExitCritical	@
1023:FreeRTOS/tasks.c **** 
1024:FreeRTOS/tasks.c **** 		return uxReturn;
 875              		.loc 1 1024 0 discriminator 4
 876 0026 BB68     		ldr	r3, [r7, #8]	@ D.6488, uxReturn
1025:FreeRTOS/tasks.c **** 	}
 877              		.loc 1 1025 0 discriminator 4
 878 0028 1846     		mov	r0, r3	@, <retval>
 879 002a 1037     		adds	r7, r7, #16	@,,
 880              		.cfi_def_cfa_offset 8
 881 002c BD46     		mov	sp, r7	@,
 882              		.cfi_def_cfa_register 13
 883              		@ sp needed	@
 884 002e 80BD     		pop	{r7, pc}	@
 885              	.L57:
 886              		.align	2
 887              	.L56:
 888 0030 00000000 		.word	pxCurrentTCB
 889              		.cfi_endproc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 35


 890              	.LFE5:
 891              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 892              		.section	.text.vTaskPrioritySet,"ax",%progbits
 893              		.align	2
 894              		.global	vTaskPrioritySet
 895              		.thumb
 896              		.thumb_func
 897              		.type	vTaskPrioritySet, %function
 898              	vTaskPrioritySet:
 899              	.LFB6:
1026:FreeRTOS/tasks.c **** 
1027:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1028:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1029:FreeRTOS/tasks.c **** 
1030:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1031:FreeRTOS/tasks.c **** 
1032:FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseT_t uxNewPriority )
1033:FreeRTOS/tasks.c **** 	{
 900              		.loc 1 1033 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 24
 903              		@ frame_needed = 1, uses_anonymous_args = 0
 904 0000 80B5     		push	{r7, lr}	@
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 7, -8
 907              		.cfi_offset 14, -4
 908 0002 86B0     		sub	sp, sp, #24	@,,
 909              		.cfi_def_cfa_offset 32
 910 0004 00AF     		add	r7, sp, #0	@,,
 911              		.cfi_def_cfa_register 7
 912 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 913 0008 3960     		str	r1, [r7]	@ uxNewPriority, uxNewPriority
1034:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1035:FreeRTOS/tasks.c **** 	UBaseT_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1036:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 914              		.loc 1 1036 0
 915 000a 0023     		movs	r3, #0	@ tmp138,
 916 000c 7B61     		str	r3, [r7, #20]	@ tmp138, xYieldRequired
1037:FreeRTOS/tasks.c **** 
1038:FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 917              		.loc 1 1038 0
 918 000e 3B68     		ldr	r3, [r7]	@ tmp139, uxNewPriority
 919 0010 072B     		cmp	r3, #7	@ tmp139,
 920 0012 02D9     		bls	.L59	@,
 921              		.loc 1 1038 0 is_stmt 0 discriminator 1
 922 0014 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 923              	.L60:
 924 0018 FEE7     		b	.L60	@
 925              	.L59:
1039:FreeRTOS/tasks.c **** 
1040:FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1041:FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 926              		.loc 1 1041 0 is_stmt 1
 927 001a 3B68     		ldr	r3, [r7]	@ tmp140, uxNewPriority
 928 001c 072B     		cmp	r3, #7	@ tmp140,
 929 001e 01D9     		bls	.L61	@,
1042:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 36


1043:FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 930              		.loc 1 1043 0
 931 0020 0723     		movs	r3, #7	@ tmp141,
 932 0022 3B60     		str	r3, [r7]	@ tmp141, uxNewPriority
 933              	.L61:
1044:FreeRTOS/tasks.c **** 		}
1045:FreeRTOS/tasks.c **** 		else
1046:FreeRTOS/tasks.c **** 		{
1047:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1048:FreeRTOS/tasks.c **** 		}
1049:FreeRTOS/tasks.c **** 
1050:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 934              		.loc 1 1050 0
 935 0024 FFF7FEFF 		bl	vPortEnterCritical	@
1051:FreeRTOS/tasks.c **** 		{
1052:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1053:FreeRTOS/tasks.c **** 			task that is being changed. */
1054:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 936              		.loc 1 1054 0
 937 0028 7B68     		ldr	r3, [r7, #4]	@ tmp142, xTask
 938 002a 002B     		cmp	r3, #0	@ tmp142,
 939 002c 02D1     		bne	.L62	@,
 940              		.loc 1 1054 0 is_stmt 0 discriminator 1
 941 002e 414B     		ldr	r3, .L73	@ tmp143,
 942 0030 1B68     		ldr	r3, [r3]	@ D.6489, pxCurrentTCB
 943 0032 00E0     		b	.L63	@
 944              	.L62:
 945              		.loc 1 1054 0 discriminator 2
 946 0034 7B68     		ldr	r3, [r7, #4]	@ D.6489, xTask
 947              	.L63:
 948              		.loc 1 1054 0 discriminator 4
 949 0036 3B61     		str	r3, [r7, #16]	@ D.6489, pxTCB
1055:FreeRTOS/tasks.c **** 
1056:FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1057:FreeRTOS/tasks.c **** 
1058:FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1059:FreeRTOS/tasks.c **** 			{
1060:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 950              		.loc 1 1060 0 is_stmt 1 discriminator 4
 951 0038 3B69     		ldr	r3, [r7, #16]	@ tmp144, pxTCB
 952 003a 9B6C     		ldr	r3, [r3, #72]	@ tmp145, pxTCB_11->uxBasePriority
 953 003c FB60     		str	r3, [r7, #12]	@ tmp145, uxCurrentBasePriority
1061:FreeRTOS/tasks.c **** 			}
1062:FreeRTOS/tasks.c **** 			#else
1063:FreeRTOS/tasks.c **** 			{
1064:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1065:FreeRTOS/tasks.c **** 			}
1066:FreeRTOS/tasks.c **** 			#endif
1067:FreeRTOS/tasks.c **** 
1068:FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 954              		.loc 1 1068 0 discriminator 4
 955 003e FA68     		ldr	r2, [r7, #12]	@ tmp146, uxCurrentBasePriority
 956 0040 3B68     		ldr	r3, [r7]	@ tmp147, uxNewPriority
 957 0042 9A42     		cmp	r2, r3	@ tmp146, tmp147
 958 0044 70D0     		beq	.L64	@,
1069:FreeRTOS/tasks.c **** 			{
1070:FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 37


1071:FreeRTOS/tasks.c **** 				priority than the calling task. */
1072:FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 959              		.loc 1 1072 0
 960 0046 3A68     		ldr	r2, [r7]	@ tmp148, uxNewPriority
 961 0048 FB68     		ldr	r3, [r7, #12]	@ tmp149, uxCurrentBasePriority
 962 004a 9A42     		cmp	r2, r3	@ tmp148, tmp149
 963 004c 0DD9     		bls	.L65	@,
1073:FreeRTOS/tasks.c **** 				{
1074:FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 964              		.loc 1 1074 0
 965 004e 394B     		ldr	r3, .L73	@ tmp150,
 966 0050 1B68     		ldr	r3, [r3]	@ D.6491, pxCurrentTCB
 967 0052 3A69     		ldr	r2, [r7, #16]	@ tmp151, pxTCB
 968 0054 9A42     		cmp	r2, r3	@ tmp151, D.6491
 969 0056 0FD0     		beq	.L66	@,
1075:FreeRTOS/tasks.c **** 					{
1076:FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1077:FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1078:FreeRTOS/tasks.c **** 						raised above that of the running task? */
1079:FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 970              		.loc 1 1079 0
 971 0058 364B     		ldr	r3, .L73	@ tmp152,
 972 005a 1B68     		ldr	r3, [r3]	@ D.6491, pxCurrentTCB
 973 005c DA6A     		ldr	r2, [r3, #44]	@ D.6492, _14->uxPriority
 974 005e 3B68     		ldr	r3, [r7]	@ tmp153, uxNewPriority
 975 0060 9A42     		cmp	r2, r3	@ D.6492, tmp153
 976 0062 09D8     		bhi	.L66	@,
1080:FreeRTOS/tasks.c **** 						{
1081:FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
 977              		.loc 1 1081 0
 978 0064 0123     		movs	r3, #1	@ tmp154,
 979 0066 7B61     		str	r3, [r7, #20]	@ tmp154, xYieldRequired
 980 0068 06E0     		b	.L66	@
 981              	.L65:
1082:FreeRTOS/tasks.c **** 						}
1083:FreeRTOS/tasks.c **** 						else
1084:FreeRTOS/tasks.c **** 						{
1085:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1086:FreeRTOS/tasks.c **** 						}
1087:FreeRTOS/tasks.c **** 					}
1088:FreeRTOS/tasks.c **** 					else
1089:FreeRTOS/tasks.c **** 					{
1090:FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1091:FreeRTOS/tasks.c **** 						but the running task must already be the highest
1092:FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1093:FreeRTOS/tasks.c **** 					}
1094:FreeRTOS/tasks.c **** 				}
1095:FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 982              		.loc 1 1095 0
 983 006a 324B     		ldr	r3, .L73	@ tmp155,
 984 006c 1B68     		ldr	r3, [r3]	@ D.6491, pxCurrentTCB
 985 006e 3A69     		ldr	r2, [r7, #16]	@ tmp156, pxTCB
 986 0070 9A42     		cmp	r2, r3	@ tmp156, D.6491
 987 0072 01D1     		bne	.L66	@,
1096:FreeRTOS/tasks.c **** 				{
1097:FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1098:FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 38


1099:FreeRTOS/tasks.c **** 					is ready to execute. */
1100:FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
 988              		.loc 1 1100 0
 989 0074 0123     		movs	r3, #1	@ tmp157,
 990 0076 7B61     		str	r3, [r7, #20]	@ tmp157, xYieldRequired
 991              	.L66:
1101:FreeRTOS/tasks.c **** 				}
1102:FreeRTOS/tasks.c **** 				else
1103:FreeRTOS/tasks.c **** 				{
1104:FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1105:FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1106:FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1107:FreeRTOS/tasks.c **** 				}
1108:FreeRTOS/tasks.c **** 
1109:FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1110:FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1111:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1112:FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 992              		.loc 1 1112 0
 993 0078 3B69     		ldr	r3, [r7, #16]	@ tmp158, pxTCB
 994 007a DB6A     		ldr	r3, [r3, #44]	@ tmp159, pxTCB_11->uxPriority
 995 007c BB60     		str	r3, [r7, #8]	@ tmp159, uxPriorityUsedOnEntry
1113:FreeRTOS/tasks.c **** 
1114:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1115:FreeRTOS/tasks.c **** 				{
1116:FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1117:FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1118:FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 996              		.loc 1 1118 0
 997 007e 3B69     		ldr	r3, [r7, #16]	@ tmp160, pxTCB
 998 0080 9A6C     		ldr	r2, [r3, #72]	@ D.6492, pxTCB_11->uxBasePriority
 999 0082 3B69     		ldr	r3, [r7, #16]	@ tmp161, pxTCB
 1000 0084 DB6A     		ldr	r3, [r3, #44]	@ D.6492, pxTCB_11->uxPriority
 1001 0086 9A42     		cmp	r2, r3	@ D.6492, D.6492
 1002 0088 02D1     		bne	.L67	@,
1119:FreeRTOS/tasks.c **** 					{
1120:FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1003              		.loc 1 1120 0
 1004 008a 3B69     		ldr	r3, [r7, #16]	@ tmp162, pxTCB
 1005 008c 3A68     		ldr	r2, [r7]	@ tmp163, uxNewPriority
 1006 008e DA62     		str	r2, [r3, #44]	@ tmp163, pxTCB_11->uxPriority
 1007              	.L67:
1121:FreeRTOS/tasks.c **** 					}
1122:FreeRTOS/tasks.c **** 					else
1123:FreeRTOS/tasks.c **** 					{
1124:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1125:FreeRTOS/tasks.c **** 					}
1126:FreeRTOS/tasks.c **** 
1127:FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1128:FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1008              		.loc 1 1128 0
 1009 0090 3B69     		ldr	r3, [r7, #16]	@ tmp164, pxTCB
 1010 0092 3A68     		ldr	r2, [r7]	@ tmp165, uxNewPriority
 1011 0094 9A64     		str	r2, [r3, #72]	@ tmp165, pxTCB_11->uxBasePriority
1129:FreeRTOS/tasks.c **** 				}
1130:FreeRTOS/tasks.c **** 				#else
1131:FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 39


1132:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1133:FreeRTOS/tasks.c **** 				}
1134:FreeRTOS/tasks.c **** 				#endif
1135:FreeRTOS/tasks.c **** 
1136:FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1137:FreeRTOS/tasks.c **** 				being used for anything else. */
1138:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1012              		.loc 1 1138 0
 1013 0096 3B69     		ldr	r3, [r7, #16]	@ tmp166, pxTCB
 1014 0098 9B69     		ldr	r3, [r3, #24]	@ D.6492, pxTCB_11->xEventListItem.xItemValue
 1015 009a 002B     		cmp	r3, #0	@ D.6493,
 1016 009c 04DB     		blt	.L68	@,
1139:FreeRTOS/tasks.c **** 				{
1140:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - ( Ti
 1017              		.loc 1 1140 0
 1018 009e 3B68     		ldr	r3, [r7]	@ tmp167, uxNewPriority
 1019 00a0 C3F10802 		rsb	r2, r3, #8	@ D.6492, tmp167,
 1020 00a4 3B69     		ldr	r3, [r7, #16]	@ tmp168, pxTCB
 1021 00a6 9A61     		str	r2, [r3, #24]	@ D.6492, pxTCB_11->xEventListItem.xItemValue
 1022              	.L68:
1141:FreeRTOS/tasks.c **** 				}
1142:FreeRTOS/tasks.c **** 				else
1143:FreeRTOS/tasks.c **** 				{
1144:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1145:FreeRTOS/tasks.c **** 				}
1146:FreeRTOS/tasks.c **** 
1147:FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1148:FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1149:FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1150:FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1151:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGeneri
 1023              		.loc 1 1151 0
 1024 00a8 3B69     		ldr	r3, [r7, #16]	@ tmp169, pxTCB
 1025 00aa 5969     		ldr	r1, [r3, #20]	@ D.6494, pxTCB_11->xGenericListItem.pvContainer
 1026 00ac BA68     		ldr	r2, [r7, #8]	@ tmp170, uxPriorityUsedOnEntry
 1027 00ae 1346     		mov	r3, r2	@ tmp171, tmp170
 1028 00b0 9B00     		lsls	r3, r3, #2	@ tmp171, tmp171,
 1029 00b2 1344     		add	r3, r3, r2	@ tmp171, tmp170
 1030 00b4 9B00     		lsls	r3, r3, #2	@ tmp172, tmp171,
 1031 00b6 204A     		ldr	r2, .L73+4	@ tmp173,
 1032 00b8 1344     		add	r3, r3, r2	@ D.6495, tmp173
 1033 00ba 9942     		cmp	r1, r3	@ D.6494, D.6495
 1034 00bc 01D1     		bne	.L69	@,
 1035              		.loc 1 1151 0 is_stmt 0 discriminator 1
 1036 00be 0123     		movs	r3, #1	@ D.6490,
 1037 00c0 00E0     		b	.L70	@
 1038              	.L69:
 1039              		.loc 1 1151 0 discriminator 2
 1040 00c2 0023     		movs	r3, #0	@ D.6490,
 1041              	.L70:
 1042              		.loc 1 1151 0 discriminator 4
 1043 00c4 002B     		cmp	r3, #0	@ D.6490,
 1044 00c6 2AD0     		beq	.L71	@,
1152:FreeRTOS/tasks.c **** 				{
1153:FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1154:FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1155:FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 40


1156:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1045              		.loc 1 1156 0 is_stmt 1
 1046 00c8 3B69     		ldr	r3, [r7, #16]	@ tmp174, pxTCB
 1047 00ca 0433     		adds	r3, r3, #4	@ D.6496, tmp174,
 1048 00cc 1846     		mov	r0, r3	@, D.6496
 1049 00ce FFF7FEFF 		bl	uxListRemove	@
 1050 00d2 0346     		mov	r3, r0	@ D.6492,
 1051 00d4 002B     		cmp	r3, #0	@ D.6492,
 1052 00d6 09D1     		bne	.L72	@,
1157:FreeRTOS/tasks.c **** 					{
1158:FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1159:FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1160:FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1161:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1053              		.loc 1 1161 0
 1054 00d8 BB68     		ldr	r3, [r7, #8]	@ D.6497, uxPriorityUsedOnEntry
 1055 00da 0122     		movs	r2, #1	@ tmp175,
 1056 00dc 02FA03F3 		lsl	r3, r2, r3	@ D.6492, tmp175, D.6497
 1057 00e0 DA43     		mvns	r2, r3	@ D.6492, D.6492
 1058 00e2 164B     		ldr	r3, .L73+8	@ tmp176,
 1059 00e4 1B68     		ldr	r3, [r3]	@ D.6492, uxTopReadyPriority
 1060 00e6 1340     		ands	r3, r3, r2	@, D.6492, D.6492, D.6492
 1061 00e8 144A     		ldr	r2, .L73+8	@ tmp177,
 1062 00ea 1360     		str	r3, [r2]	@ D.6492, uxTopReadyPriority
 1063              	.L72:
1162:FreeRTOS/tasks.c **** 					}
1163:FreeRTOS/tasks.c **** 					else
1164:FreeRTOS/tasks.c **** 					{
1165:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1166:FreeRTOS/tasks.c **** 					}
1167:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1064              		.loc 1 1167 0
 1065 00ec 3B69     		ldr	r3, [r7, #16]	@ tmp178, pxTCB
 1066 00ee DB6A     		ldr	r3, [r3, #44]	@ D.6492, pxTCB_11->uxPriority
 1067 00f0 1A46     		mov	r2, r3	@ D.6497, D.6492
 1068 00f2 0123     		movs	r3, #1	@ tmp179,
 1069 00f4 03FA02F2 		lsl	r2, r3, r2	@ D.6492, tmp179, D.6497
 1070 00f8 104B     		ldr	r3, .L73+8	@ tmp180,
 1071 00fa 1B68     		ldr	r3, [r3]	@ D.6492, uxTopReadyPriority
 1072 00fc 1343     		orrs	r3, r3, r2	@, D.6492, D.6492, D.6492
 1073 00fe 0F4A     		ldr	r2, .L73+8	@ tmp181,
 1074 0100 1360     		str	r3, [r2]	@ D.6492, uxTopReadyPriority
 1075 0102 3B69     		ldr	r3, [r7, #16]	@ tmp182, pxTCB
 1076 0104 DA6A     		ldr	r2, [r3, #44]	@ D.6492, pxTCB_11->uxPriority
 1077 0106 1346     		mov	r3, r2	@ tmp183, D.6492
 1078 0108 9B00     		lsls	r3, r3, #2	@ tmp183, tmp183,
 1079 010a 1344     		add	r3, r3, r2	@ tmp183, D.6492
 1080 010c 9B00     		lsls	r3, r3, #2	@ tmp184, tmp183,
 1081 010e 0A4A     		ldr	r2, .L73+4	@ tmp185,
 1082 0110 1A44     		add	r2, r2, r3	@ D.6495, tmp183
 1083 0112 3B69     		ldr	r3, [r7, #16]	@ tmp186, pxTCB
 1084 0114 0433     		adds	r3, r3, #4	@ D.6496, tmp186,
 1085 0116 1046     		mov	r0, r2	@, D.6495
 1086 0118 1946     		mov	r1, r3	@, D.6496
 1087 011a FFF7FEFF 		bl	vListInsertEnd	@
 1088              	.L71:
1168:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 41


1169:FreeRTOS/tasks.c **** 				else
1170:FreeRTOS/tasks.c **** 				{
1171:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:FreeRTOS/tasks.c **** 				}
1173:FreeRTOS/tasks.c **** 
1174:FreeRTOS/tasks.c **** 				if( xYieldRequired == pdTRUE )
 1089              		.loc 1 1174 0
 1090 011e 7B69     		ldr	r3, [r7, #20]	@ tmp187, xYieldRequired
 1091 0120 012B     		cmp	r3, #1	@ tmp187,
 1092 0122 01D1     		bne	.L64	@,
1175:FreeRTOS/tasks.c **** 				{
1176:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1093              		.loc 1 1176 0
 1094 0124 FFF7FEFF 		bl	vPortYield	@
 1095              	.L64:
1177:FreeRTOS/tasks.c **** 				}
1178:FreeRTOS/tasks.c **** 				else
1179:FreeRTOS/tasks.c **** 				{
1180:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1181:FreeRTOS/tasks.c **** 				}
1182:FreeRTOS/tasks.c **** 
1183:FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1184:FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1185:FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1186:FreeRTOS/tasks.c **** 			}
1187:FreeRTOS/tasks.c **** 		}
1188:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1096              		.loc 1 1188 0
 1097 0128 FFF7FEFF 		bl	vPortExitCritical	@
1189:FreeRTOS/tasks.c **** 	}
 1098              		.loc 1 1189 0
 1099 012c 1837     		adds	r7, r7, #24	@,,
 1100              		.cfi_def_cfa_offset 8
 1101 012e BD46     		mov	sp, r7	@,
 1102              		.cfi_def_cfa_register 13
 1103              		@ sp needed	@
 1104 0130 80BD     		pop	{r7, pc}	@
 1105              	.L74:
 1106 0132 00BF     		.align	2
 1107              	.L73:
 1108 0134 00000000 		.word	pxCurrentTCB
 1109 0138 00000000 		.word	pxReadyTasksLists
 1110 013c 00000000 		.word	uxTopReadyPriority
 1111              		.cfi_endproc
 1112              	.LFE6:
 1113              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1114              		.section	.text.vTaskSuspend,"ax",%progbits
 1115              		.align	2
 1116              		.global	vTaskSuspend
 1117              		.thumb
 1118              		.thumb_func
 1119              		.type	vTaskSuspend, %function
 1120              	vTaskSuspend:
 1121              	.LFB7:
1190:FreeRTOS/tasks.c **** 
1191:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1192:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 42


1193:FreeRTOS/tasks.c **** 
1194:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1195:FreeRTOS/tasks.c **** 
1196:FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1197:FreeRTOS/tasks.c **** 	{
 1122              		.loc 1 1197 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 16
 1125              		@ frame_needed = 1, uses_anonymous_args = 0
 1126 0000 80B5     		push	{r7, lr}	@
 1127              		.cfi_def_cfa_offset 8
 1128              		.cfi_offset 7, -8
 1129              		.cfi_offset 14, -4
 1130 0002 84B0     		sub	sp, sp, #16	@,,
 1131              		.cfi_def_cfa_offset 24
 1132 0004 00AF     		add	r7, sp, #0	@,,
 1133              		.cfi_def_cfa_register 7
 1134 0006 7860     		str	r0, [r7, #4]	@ xTaskToSuspend, xTaskToSuspend
1198:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1199:FreeRTOS/tasks.c **** 
1200:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
 1135              		.loc 1 1200 0
 1136 0008 FFF7FEFF 		bl	vPortEnterCritical	@
1201:FreeRTOS/tasks.c **** 		{
1202:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1203:FreeRTOS/tasks.c **** 			being suspended. */
1204:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1137              		.loc 1 1204 0
 1138 000c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTaskToSuspend
 1139 000e 002B     		cmp	r3, #0	@ tmp130,
 1140 0010 02D1     		bne	.L76	@,
 1141              		.loc 1 1204 0 is_stmt 0 discriminator 1
 1142 0012 304B     		ldr	r3, .L88	@ tmp131,
 1143 0014 1B68     		ldr	r3, [r3]	@ D.6498, pxCurrentTCB
 1144 0016 00E0     		b	.L77	@
 1145              	.L76:
 1146              		.loc 1 1204 0 discriminator 2
 1147 0018 7B68     		ldr	r3, [r7, #4]	@ D.6498, xTaskToSuspend
 1148              	.L77:
 1149              		.loc 1 1204 0 discriminator 4
 1150 001a FB60     		str	r3, [r7, #12]	@ D.6498, pxTCB
1205:FreeRTOS/tasks.c **** 
1206:FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1207:FreeRTOS/tasks.c **** 
1208:FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1209:FreeRTOS/tasks.c **** 			suspended list. */
1210:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 1151              		.loc 1 1210 0 is_stmt 1 discriminator 4
 1152 001c FB68     		ldr	r3, [r7, #12]	@ tmp132, pxTCB
 1153 001e 0433     		adds	r3, r3, #4	@ D.6499, tmp132,
 1154 0020 1846     		mov	r0, r3	@, D.6499
 1155 0022 FFF7FEFF 		bl	uxListRemove	@
 1156 0026 0346     		mov	r3, r0	@ D.6500,
 1157 0028 002B     		cmp	r3, #0	@ D.6500,
 1158 002a 15D1     		bne	.L78	@,
1211:FreeRTOS/tasks.c **** 			{
1212:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 43


 1159              		.loc 1 1212 0
 1160 002c FB68     		ldr	r3, [r7, #12]	@ tmp133, pxTCB
 1161 002e DA6A     		ldr	r2, [r3, #44]	@ D.6500, pxTCB_5->uxPriority
 1162 0030 2949     		ldr	r1, .L88+4	@ tmp134,
 1163 0032 1346     		mov	r3, r2	@ tmp135, D.6500
 1164 0034 9B00     		lsls	r3, r3, #2	@ tmp135, tmp135,
 1165 0036 1344     		add	r3, r3, r2	@ tmp135, D.6500
 1166 0038 9B00     		lsls	r3, r3, #2	@ tmp136, tmp135,
 1167 003a 0B44     		add	r3, r3, r1	@ tmp137, tmp134
 1168 003c 1B68     		ldr	r3, [r3]	@ D.6500, pxReadyTasksLists[_8].uxNumberOfItems
 1169 003e 002B     		cmp	r3, #0	@ D.6500,
 1170 0040 0AD1     		bne	.L78	@,
 1171              		.loc 1 1212 0 is_stmt 0 discriminator 1
 1172 0042 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 1173 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6500, pxTCB_5->uxPriority
 1174 0046 1A46     		mov	r2, r3	@ D.6501, D.6500
 1175 0048 0123     		movs	r3, #1	@ tmp139,
 1176 004a 9340     		lsls	r3, r3, r2	@ D.6500, tmp139, D.6501
 1177 004c DA43     		mvns	r2, r3	@ D.6500, D.6500
 1178 004e 234B     		ldr	r3, .L88+8	@ tmp140,
 1179 0050 1B68     		ldr	r3, [r3]	@ D.6500, uxTopReadyPriority
 1180 0052 1340     		ands	r3, r3, r2	@, D.6500, D.6500, D.6500
 1181 0054 214A     		ldr	r2, .L88+8	@ tmp141,
 1182 0056 1360     		str	r3, [r2]	@ D.6500, uxTopReadyPriority
 1183              	.L78:
1213:FreeRTOS/tasks.c **** 			}
1214:FreeRTOS/tasks.c **** 			else
1215:FreeRTOS/tasks.c **** 			{
1216:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1217:FreeRTOS/tasks.c **** 			}
1218:FreeRTOS/tasks.c **** 
1219:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1220:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1184              		.loc 1 1220 0 is_stmt 1
 1185 0058 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 1186 005a 9B6A     		ldr	r3, [r3, #40]	@ D.6502, pxTCB_5->xEventListItem.pvContainer
 1187 005c 002B     		cmp	r3, #0	@ D.6502,
 1188 005e 04D0     		beq	.L80	@,
1221:FreeRTOS/tasks.c **** 			{
1222:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1189              		.loc 1 1222 0
 1190 0060 FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 1191 0062 1833     		adds	r3, r3, #24	@ D.6499, tmp143,
 1192 0064 1846     		mov	r0, r3	@, D.6499
 1193 0066 FFF7FEFF 		bl	uxListRemove	@
 1194              	.L80:
1223:FreeRTOS/tasks.c **** 			}
1224:FreeRTOS/tasks.c **** 			else
1225:FreeRTOS/tasks.c **** 			{
1226:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1227:FreeRTOS/tasks.c **** 			}
1228:FreeRTOS/tasks.c **** 
1229:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 1195              		.loc 1 1229 0
 1196 006a FB68     		ldr	r3, [r7, #12]	@ tmp144, pxTCB
 1197 006c 0433     		adds	r3, r3, #4	@ D.6499, tmp144,
 1198 006e 1C48     		ldr	r0, .L88+12	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 44


 1199 0070 1946     		mov	r1, r3	@, D.6499
 1200 0072 FFF7FEFF 		bl	vListInsertEnd	@
1230:FreeRTOS/tasks.c **** 		}
1231:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
 1201              		.loc 1 1231 0
 1202 0076 FFF7FEFF 		bl	vPortExitCritical	@
1232:FreeRTOS/tasks.c **** 
1233:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1203              		.loc 1 1233 0
 1204 007a 164B     		ldr	r3, .L88	@ tmp145,
 1205 007c 1B68     		ldr	r3, [r3]	@ D.6503, pxCurrentTCB
 1206 007e FA68     		ldr	r2, [r7, #12]	@ tmp146, pxTCB
 1207 0080 9A42     		cmp	r2, r3	@ tmp146, D.6503
 1208 0082 1AD1     		bne	.L81	@,
1234:FreeRTOS/tasks.c **** 		{
1235:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1209              		.loc 1 1235 0
 1210 0084 174B     		ldr	r3, .L88+16	@ tmp147,
 1211 0086 1B68     		ldr	r3, [r3]	@ D.6504, xSchedulerRunning
 1212 0088 002B     		cmp	r3, #0	@ D.6504,
 1213 008a 09D0     		beq	.L82	@,
1236:FreeRTOS/tasks.c **** 			{
1237:FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1238:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 1214              		.loc 1 1238 0
 1215 008c 164B     		ldr	r3, .L88+20	@ tmp148,
 1216 008e 1B68     		ldr	r3, [r3]	@ D.6500, uxSchedulerSuspended
 1217 0090 002B     		cmp	r3, #0	@ D.6500,
 1218 0092 02D0     		beq	.L83	@,
 1219              		.loc 1 1238 0 is_stmt 0 discriminator 1
 1220 0094 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1221              	.L84:
 1222 0098 FEE7     		b	.L84	@
 1223              	.L83:
1239:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 1224              		.loc 1 1239 0 is_stmt 1
 1225 009a FFF7FEFF 		bl	vPortYield	@
 1226 009e 16E0     		b	.L75	@
 1227              	.L82:
1240:FreeRTOS/tasks.c **** 			}
1241:FreeRTOS/tasks.c **** 			else
1242:FreeRTOS/tasks.c **** 			{
1243:FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1244:FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1245:FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1246:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1228              		.loc 1 1246 0
 1229 00a0 0F4B     		ldr	r3, .L88+12	@ tmp149,
 1230 00a2 1A68     		ldr	r2, [r3]	@ D.6500, xSuspendedTaskList.uxNumberOfItems
 1231 00a4 114B     		ldr	r3, .L88+24	@ tmp150,
 1232 00a6 1B68     		ldr	r3, [r3]	@ D.6500, uxCurrentNumberOfTasks
 1233 00a8 9A42     		cmp	r2, r3	@ D.6500, D.6500
 1234 00aa 03D1     		bne	.L86	@,
1247:FreeRTOS/tasks.c **** 				{
1248:FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1249:FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1250:FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 45


1251:FreeRTOS/tasks.c **** 					is. */
1252:FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
 1235              		.loc 1 1252 0
 1236 00ac 094B     		ldr	r3, .L88	@ tmp151,
 1237 00ae 0022     		movs	r2, #0	@ tmp152,
 1238 00b0 1A60     		str	r2, [r3]	@ tmp152, pxCurrentTCB
 1239 00b2 0CE0     		b	.L75	@
 1240              	.L86:
1253:FreeRTOS/tasks.c **** 				}
1254:FreeRTOS/tasks.c **** 				else
1255:FreeRTOS/tasks.c **** 				{
1256:FreeRTOS/tasks.c **** 					vTaskSwitchContext();
 1241              		.loc 1 1256 0
 1242 00b4 FFF7FEFF 		bl	vTaskSwitchContext	@
 1243 00b8 09E0     		b	.L75	@
 1244              	.L81:
1257:FreeRTOS/tasks.c **** 				}
1258:FreeRTOS/tasks.c **** 			}
1259:FreeRTOS/tasks.c **** 		}
1260:FreeRTOS/tasks.c **** 		else
1261:FreeRTOS/tasks.c **** 		{
1262:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1245              		.loc 1 1262 0
 1246 00ba 0A4B     		ldr	r3, .L88+16	@ tmp153,
 1247 00bc 1B68     		ldr	r3, [r3]	@ D.6504, xSchedulerRunning
 1248 00be 002B     		cmp	r3, #0	@ D.6504,
 1249 00c0 05D0     		beq	.L75	@,
1263:FreeRTOS/tasks.c **** 			{
1264:FreeRTOS/tasks.c **** 				/* A task other than the currently running task was suspended,
1265:FreeRTOS/tasks.c **** 				reset the next expected unblock time in case it referred to the
1266:FreeRTOS/tasks.c **** 				task that is now in the Suspended state. */
1267:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 1250              		.loc 1 1267 0
 1251 00c2 FFF7FEFF 		bl	vPortEnterCritical	@
1268:FreeRTOS/tasks.c **** 				{
1269:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
 1252              		.loc 1 1269 0
 1253 00c6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
1270:FreeRTOS/tasks.c **** 				}
1271:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 1254              		.loc 1 1271 0
 1255 00ca FFF7FEFF 		bl	vPortExitCritical	@
 1256              	.L75:
1272:FreeRTOS/tasks.c **** 			}
1273:FreeRTOS/tasks.c **** 			else
1274:FreeRTOS/tasks.c **** 			{
1275:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1276:FreeRTOS/tasks.c **** 			}
1277:FreeRTOS/tasks.c **** 		}
1278:FreeRTOS/tasks.c **** 	}
 1257              		.loc 1 1278 0
 1258 00ce 1037     		adds	r7, r7, #16	@,,
 1259              		.cfi_def_cfa_offset 8
 1260 00d0 BD46     		mov	sp, r7	@,
 1261              		.cfi_def_cfa_register 13
 1262              		@ sp needed	@
 1263 00d2 80BD     		pop	{r7, pc}	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 46


 1264              	.L89:
 1265              		.align	2
 1266              	.L88:
 1267 00d4 00000000 		.word	pxCurrentTCB
 1268 00d8 00000000 		.word	pxReadyTasksLists
 1269 00dc 00000000 		.word	uxTopReadyPriority
 1270 00e0 00000000 		.word	xSuspendedTaskList
 1271 00e4 00000000 		.word	xSchedulerRunning
 1272 00e8 00000000 		.word	uxSchedulerSuspended
 1273 00ec 00000000 		.word	uxCurrentNumberOfTasks
 1274              		.cfi_endproc
 1275              	.LFE7:
 1276              		.size	vTaskSuspend, .-vTaskSuspend
 1277              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1278              		.align	2
 1279              		.thumb
 1280              		.thumb_func
 1281              		.type	prvTaskIsTaskSuspended, %function
 1282              	prvTaskIsTaskSuspended:
 1283              	.LFB8:
1279:FreeRTOS/tasks.c **** 
1280:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1281:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1282:FreeRTOS/tasks.c **** 
1283:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1284:FreeRTOS/tasks.c **** 
1285:FreeRTOS/tasks.c **** 	static BaseT_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1286:FreeRTOS/tasks.c **** 	{
 1284              		.loc 1 1286 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 16
 1287              		@ frame_needed = 1, uses_anonymous_args = 0
 1288 0000 80B5     		push	{r7, lr}	@
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 7, -8
 1291              		.cfi_offset 14, -4
 1292 0002 84B0     		sub	sp, sp, #16	@,,
 1293              		.cfi_def_cfa_offset 24
 1294 0004 00AF     		add	r7, sp, #0	@,,
 1295              		.cfi_def_cfa_register 7
 1296 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
1287:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 1297              		.loc 1 1287 0
 1298 0008 0023     		movs	r3, #0	@ tmp117,
 1299 000a FB60     		str	r3, [r7, #12]	@ tmp117, xReturn
1288:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1300              		.loc 1 1288 0
 1301 000c 7B68     		ldr	r3, [r7, #4]	@ tmp118, xTask
 1302 000e BB60     		str	r3, [r7, #8]	@ tmp118, pxTCB
1289:FreeRTOS/tasks.c **** 
1290:FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1291:FreeRTOS/tasks.c **** 		section. */
1292:FreeRTOS/tasks.c **** 
1293:FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1294:FreeRTOS/tasks.c **** 		configASSERT( xTask );
 1303              		.loc 1 1294 0
 1304 0010 7B68     		ldr	r3, [r7, #4]	@ tmp119, xTask
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 47


 1305 0012 002B     		cmp	r3, #0	@ tmp119,
 1306 0014 02D1     		bne	.L91	@,
 1307              		.loc 1 1294 0 is_stmt 0 discriminator 1
 1308 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1309              	.L92:
 1310 001a FEE7     		b	.L92	@
 1311              	.L91:
1295:FreeRTOS/tasks.c **** 
1296:FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1297:FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1312              		.loc 1 1297 0 is_stmt 1
 1313 001c BB68     		ldr	r3, [r7, #8]	@ tmp120, pxTCB
 1314 001e 5B69     		ldr	r3, [r3, #20]	@ D.6506, pxTCB_6->xGenericListItem.pvContainer
 1315 0020 0E4A     		ldr	r2, .L99	@ tmp121,
 1316 0022 9342     		cmp	r3, r2	@ D.6506, tmp121
 1317 0024 01D1     		bne	.L93	@,
 1318              		.loc 1 1297 0 is_stmt 0 discriminator 1
 1319 0026 0123     		movs	r3, #1	@ D.6505,
 1320 0028 00E0     		b	.L94	@
 1321              	.L93:
 1322              		.loc 1 1297 0 discriminator 2
 1323 002a 0023     		movs	r3, #0	@ D.6505,
 1324              	.L94:
 1325              		.loc 1 1297 0 discriminator 4
 1326 002c 002B     		cmp	r3, #0	@ D.6505,
 1327 002e 0FD0     		beq	.L95	@,
1298:FreeRTOS/tasks.c **** 		{
1299:FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1300:FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1328              		.loc 1 1300 0 is_stmt 1
 1329 0030 BB68     		ldr	r3, [r7, #8]	@ tmp122, pxTCB
 1330 0032 9B6A     		ldr	r3, [r3, #40]	@ D.6506, pxTCB_6->xEventListItem.pvContainer
 1331 0034 0A4A     		ldr	r2, .L99+4	@ tmp123,
 1332 0036 9342     		cmp	r3, r2	@ D.6506, tmp123
 1333 0038 0AD0     		beq	.L95	@,
1301:FreeRTOS/tasks.c **** 			{
1302:FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1303:FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1304:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 1334              		.loc 1 1304 0
 1335 003a BB68     		ldr	r3, [r7, #8]	@ tmp124, pxTCB
 1336 003c 9B6A     		ldr	r3, [r3, #40]	@ D.6506, pxTCB_6->xEventListItem.pvContainer
 1337 003e 002B     		cmp	r3, #0	@ D.6506,
 1338 0040 01D1     		bne	.L96	@,
 1339              		.loc 1 1304 0 is_stmt 0 discriminator 1
 1340 0042 0123     		movs	r3, #1	@ D.6505,
 1341 0044 00E0     		b	.L97	@
 1342              	.L96:
 1343              		.loc 1 1304 0 discriminator 2
 1344 0046 0023     		movs	r3, #0	@ D.6505,
 1345              	.L97:
 1346              		.loc 1 1304 0 discriminator 4
 1347 0048 002B     		cmp	r3, #0	@ D.6505,
 1348 004a 01D0     		beq	.L95	@,
1305:FreeRTOS/tasks.c **** 				{
1306:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 1349              		.loc 1 1306 0 is_stmt 1
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 48


 1350 004c 0123     		movs	r3, #1	@ tmp125,
 1351 004e FB60     		str	r3, [r7, #12]	@ tmp125, xReturn
 1352              	.L95:
1307:FreeRTOS/tasks.c **** 				}
1308:FreeRTOS/tasks.c **** 				else
1309:FreeRTOS/tasks.c **** 				{
1310:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1311:FreeRTOS/tasks.c **** 				}
1312:FreeRTOS/tasks.c **** 			}
1313:FreeRTOS/tasks.c **** 			else
1314:FreeRTOS/tasks.c **** 			{
1315:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1316:FreeRTOS/tasks.c **** 			}
1317:FreeRTOS/tasks.c **** 		}
1318:FreeRTOS/tasks.c **** 		else
1319:FreeRTOS/tasks.c **** 		{
1320:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1321:FreeRTOS/tasks.c **** 		}
1322:FreeRTOS/tasks.c **** 
1323:FreeRTOS/tasks.c **** 		return xReturn;
 1353              		.loc 1 1323 0
 1354 0050 FB68     		ldr	r3, [r7, #12]	@ D.6507, xReturn
1324:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1355              		.loc 1 1324 0
 1356 0052 1846     		mov	r0, r3	@, <retval>
 1357 0054 1037     		adds	r7, r7, #16	@,,
 1358              		.cfi_def_cfa_offset 8
 1359 0056 BD46     		mov	sp, r7	@,
 1360              		.cfi_def_cfa_register 13
 1361              		@ sp needed	@
 1362 0058 80BD     		pop	{r7, pc}	@
 1363              	.L100:
 1364 005a 00BF     		.align	2
 1365              	.L99:
 1366 005c 00000000 		.word	xSuspendedTaskList
 1367 0060 00000000 		.word	xPendingReadyList
 1368              		.cfi_endproc
 1369              	.LFE8:
 1370              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1371              		.section	.text.vTaskResume,"ax",%progbits
 1372              		.align	2
 1373              		.global	vTaskResume
 1374              		.thumb
 1375              		.thumb_func
 1376              		.type	vTaskResume, %function
 1377              	vTaskResume:
 1378              	.LFB9:
1325:FreeRTOS/tasks.c **** 
1326:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1327:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1328:FreeRTOS/tasks.c **** 
1329:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1330:FreeRTOS/tasks.c **** 
1331:FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1332:FreeRTOS/tasks.c **** 	{
 1379              		.loc 1 1332 0
 1380              		.cfi_startproc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 49


 1381              		@ args = 0, pretend = 0, frame = 16
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383 0000 80B5     		push	{r7, lr}	@
 1384              		.cfi_def_cfa_offset 8
 1385              		.cfi_offset 7, -8
 1386              		.cfi_offset 14, -4
 1387 0002 84B0     		sub	sp, sp, #16	@,,
 1388              		.cfi_def_cfa_offset 24
 1389 0004 00AF     		add	r7, sp, #0	@,,
 1390              		.cfi_def_cfa_register 7
 1391 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
1333:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1392              		.loc 1 1333 0
 1393 0008 7B68     		ldr	r3, [r7, #4]	@ tmp124, xTaskToResume
 1394 000a FB60     		str	r3, [r7, #12]	@ tmp124, pxTCB
1334:FreeRTOS/tasks.c **** 
1335:FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1336:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1395              		.loc 1 1336 0
 1396 000c 7B68     		ldr	r3, [r7, #4]	@ tmp125, xTaskToResume
 1397 000e 002B     		cmp	r3, #0	@ tmp125,
 1398 0010 02D1     		bne	.L102	@,
 1399              		.loc 1 1336 0 is_stmt 0 discriminator 1
 1400 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1401              	.L103:
 1402 0016 FEE7     		b	.L103	@
 1403              	.L102:
1337:FreeRTOS/tasks.c **** 
1338:FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1339:FreeRTOS/tasks.c **** 		currently executing task. */
1340:FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1404              		.loc 1 1340 0 is_stmt 1
 1405 0018 FB68     		ldr	r3, [r7, #12]	@ tmp126, pxTCB
 1406 001a 002B     		cmp	r3, #0	@ tmp126,
 1407 001c 35D0     		beq	.L101	@,
 1408              		.loc 1 1340 0 is_stmt 0 discriminator 1
 1409 001e 1C4B     		ldr	r3, .L106	@ tmp127,
 1410 0020 1B68     		ldr	r3, [r3]	@ D.6508, pxCurrentTCB
 1411 0022 FA68     		ldr	r2, [r7, #12]	@ tmp128, pxTCB
 1412 0024 9A42     		cmp	r2, r3	@ tmp128, D.6508
 1413 0026 30D0     		beq	.L101	@,
1341:FreeRTOS/tasks.c **** 		{
1342:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
 1414              		.loc 1 1342 0 is_stmt 1
 1415 0028 FFF7FEFF 		bl	vPortEnterCritical	@
1343:FreeRTOS/tasks.c **** 			{
1344:FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1416              		.loc 1 1344 0
 1417 002c F868     		ldr	r0, [r7, #12]	@, pxTCB
 1418 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1419 0032 0346     		mov	r3, r0	@ D.6509,
 1420 0034 012B     		cmp	r3, #1	@ D.6509,
 1421 0036 26D1     		bne	.L105	@,
1345:FreeRTOS/tasks.c **** 				{
1346:FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1347:FreeRTOS/tasks.c **** 
1348:FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 50


1349:FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1350:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1422              		.loc 1 1350 0
 1423 0038 FB68     		ldr	r3, [r7, #12]	@ tmp129, pxTCB
 1424 003a 0433     		adds	r3, r3, #4	@ D.6510, tmp129,
 1425 003c 1846     		mov	r0, r3	@, D.6510
 1426 003e FFF7FEFF 		bl	uxListRemove	@
1351:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1427              		.loc 1 1351 0
 1428 0042 FB68     		ldr	r3, [r7, #12]	@ tmp130, pxTCB
 1429 0044 DB6A     		ldr	r3, [r3, #44]	@ D.6511, pxTCB_2->uxPriority
 1430 0046 1A46     		mov	r2, r3	@ D.6512, D.6511
 1431 0048 0123     		movs	r3, #1	@ tmp131,
 1432 004a 03FA02F2 		lsl	r2, r3, r2	@ D.6511, tmp131, D.6512
 1433 004e 114B     		ldr	r3, .L106+4	@ tmp132,
 1434 0050 1B68     		ldr	r3, [r3]	@ D.6511, uxTopReadyPriority
 1435 0052 1343     		orrs	r3, r3, r2	@, D.6511, D.6511, D.6511
 1436 0054 0F4A     		ldr	r2, .L106+4	@ tmp133,
 1437 0056 1360     		str	r3, [r2]	@ D.6511, uxTopReadyPriority
 1438 0058 FB68     		ldr	r3, [r7, #12]	@ tmp134, pxTCB
 1439 005a DA6A     		ldr	r2, [r3, #44]	@ D.6511, pxTCB_2->uxPriority
 1440 005c 1346     		mov	r3, r2	@ tmp135, D.6511
 1441 005e 9B00     		lsls	r3, r3, #2	@ tmp135, tmp135,
 1442 0060 1344     		add	r3, r3, r2	@ tmp135, D.6511
 1443 0062 9B00     		lsls	r3, r3, #2	@ tmp136, tmp135,
 1444 0064 0C4A     		ldr	r2, .L106+8	@ tmp137,
 1445 0066 1A44     		add	r2, r2, r3	@ D.6513, tmp135
 1446 0068 FB68     		ldr	r3, [r7, #12]	@ tmp138, pxTCB
 1447 006a 0433     		adds	r3, r3, #4	@ D.6510, tmp138,
 1448 006c 1046     		mov	r0, r2	@, D.6513
 1449 006e 1946     		mov	r1, r3	@, D.6510
 1450 0070 FFF7FEFF 		bl	vListInsertEnd	@
1352:FreeRTOS/tasks.c **** 
1353:FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1354:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1451              		.loc 1 1354 0
 1452 0074 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 1453 0076 DA6A     		ldr	r2, [r3, #44]	@ D.6511, pxTCB_2->uxPriority
 1454 0078 054B     		ldr	r3, .L106	@ tmp140,
 1455 007a 1B68     		ldr	r3, [r3]	@ D.6508, pxCurrentTCB
 1456 007c DB6A     		ldr	r3, [r3, #44]	@ D.6511, _15->uxPriority
 1457 007e 9A42     		cmp	r2, r3	@ D.6511, D.6511
 1458 0080 01D3     		bcc	.L105	@,
1355:FreeRTOS/tasks.c **** 					{
1356:FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1357:FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1358:FreeRTOS/tasks.c **** 						next yield. */
1359:FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1459              		.loc 1 1359 0
 1460 0082 FFF7FEFF 		bl	vPortYield	@
 1461              	.L105:
1360:FreeRTOS/tasks.c **** 					}
1361:FreeRTOS/tasks.c **** 					else
1362:FreeRTOS/tasks.c **** 					{
1363:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1364:FreeRTOS/tasks.c **** 					}
1365:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 51


1366:FreeRTOS/tasks.c **** 				else
1367:FreeRTOS/tasks.c **** 				{
1368:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1369:FreeRTOS/tasks.c **** 				}
1370:FreeRTOS/tasks.c **** 			}
1371:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
 1462              		.loc 1 1371 0
 1463 0086 FFF7FEFF 		bl	vPortExitCritical	@
 1464              	.L101:
1372:FreeRTOS/tasks.c **** 		}
1373:FreeRTOS/tasks.c **** 		else
1374:FreeRTOS/tasks.c **** 		{
1375:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1376:FreeRTOS/tasks.c **** 		}
1377:FreeRTOS/tasks.c **** 	}
 1465              		.loc 1 1377 0
 1466 008a 1037     		adds	r7, r7, #16	@,,
 1467              		.cfi_def_cfa_offset 8
 1468 008c BD46     		mov	sp, r7	@,
 1469              		.cfi_def_cfa_register 13
 1470              		@ sp needed	@
 1471 008e 80BD     		pop	{r7, pc}	@
 1472              	.L107:
 1473              		.align	2
 1474              	.L106:
 1475 0090 00000000 		.word	pxCurrentTCB
 1476 0094 00000000 		.word	uxTopReadyPriority
 1477 0098 00000000 		.word	pxReadyTasksLists
 1478              		.cfi_endproc
 1479              	.LFE9:
 1480              		.size	vTaskResume, .-vTaskResume
 1481              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1482              		.align	2
 1483              		.global	xTaskResumeFromISR
 1484              		.thumb
 1485              		.thumb_func
 1486              		.type	xTaskResumeFromISR, %function
 1487              	xTaskResumeFromISR:
 1488              	.LFB10:
1378:FreeRTOS/tasks.c **** 
1379:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1380:FreeRTOS/tasks.c **** 
1381:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1382:FreeRTOS/tasks.c **** 
1383:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1384:FreeRTOS/tasks.c **** 
1385:FreeRTOS/tasks.c **** 	BaseT_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1386:FreeRTOS/tasks.c **** 	{
 1489              		.loc 1 1386 0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 24
 1492              		@ frame_needed = 1, uses_anonymous_args = 0
 1493 0000 80B5     		push	{r7, lr}	@
 1494              		.cfi_def_cfa_offset 8
 1495              		.cfi_offset 7, -8
 1496              		.cfi_offset 14, -4
 1497 0002 86B0     		sub	sp, sp, #24	@,,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 52


 1498              		.cfi_def_cfa_offset 32
 1499 0004 00AF     		add	r7, sp, #0	@,,
 1500              		.cfi_def_cfa_register 7
 1501 0006 7860     		str	r0, [r7, #4]	@ xTaskToResume, xTaskToResume
1387:FreeRTOS/tasks.c **** 	BaseT_t xYieldRequired = pdFALSE;
 1502              		.loc 1 1387 0
 1503 0008 0023     		movs	r3, #0	@ tmp127,
 1504 000a 7B61     		str	r3, [r7, #20]	@ tmp127, xYieldRequired
1388:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1505              		.loc 1 1388 0
 1506 000c 7B68     		ldr	r3, [r7, #4]	@ tmp128, xTaskToResume
 1507 000e 3B61     		str	r3, [r7, #16]	@ tmp128, pxTCB
1389:FreeRTOS/tasks.c **** 	UBaseT_t uxSavedInterruptStatus;
1390:FreeRTOS/tasks.c **** 
1391:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
 1508              		.loc 1 1391 0
 1509 0010 7B68     		ldr	r3, [r7, #4]	@ tmp129, xTaskToResume
 1510 0012 002B     		cmp	r3, #0	@ tmp129,
 1511 0014 02D1     		bne	.L109	@,
 1512              		.loc 1 1391 0 is_stmt 0 discriminator 1
 1513 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1514              	.L110:
 1515 001a FEE7     		b	.L110	@
 1516              	.L109:
1392:FreeRTOS/tasks.c **** 
1393:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1394:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1395:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1396:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1397:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1398:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1399:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1400:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1401:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1402:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1403:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1404:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1405:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1406:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1407:FreeRTOS/tasks.c **** 		provided on the following link:
1408:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1409:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1517              		.loc 1 1409 0 is_stmt 1
 1518 001c FFF7FEFF 		bl	vPortValidateInterruptPriority	@
1410:FreeRTOS/tasks.c **** 
1411:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1519              		.loc 1 1411 0
 1520 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1521 0024 F860     		str	r0, [r7, #12]	@, uxSavedInterruptStatus
1412:FreeRTOS/tasks.c **** 		{
1413:FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1522              		.loc 1 1413 0
 1523 0026 3869     		ldr	r0, [r7, #16]	@, pxTCB
 1524 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended	@
 1525 002c 0346     		mov	r3, r0	@ D.6514,
 1526 002e 012B     		cmp	r3, #1	@ D.6514,
 1527 0030 31D1     		bne	.L111	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 53


1414:FreeRTOS/tasks.c **** 			{
1415:FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1416:FreeRTOS/tasks.c **** 
1417:FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1418:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1528              		.loc 1 1418 0
 1529 0032 1D4B     		ldr	r3, .L116	@ tmp130,
 1530 0034 1B68     		ldr	r3, [r3]	@ D.6515, uxSchedulerSuspended
 1531 0036 002B     		cmp	r3, #0	@ D.6515,
 1532 0038 27D1     		bne	.L112	@,
1419:FreeRTOS/tasks.c **** 				{
1420:FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1421:FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1422:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1533              		.loc 1 1422 0
 1534 003a 3B69     		ldr	r3, [r7, #16]	@ tmp131, pxTCB
 1535 003c DA6A     		ldr	r2, [r3, #44]	@ D.6515, pxTCB_6->uxPriority
 1536 003e 1B4B     		ldr	r3, .L116+4	@ tmp132,
 1537 0040 1B68     		ldr	r3, [r3]	@ D.6516, pxCurrentTCB
 1538 0042 DB6A     		ldr	r3, [r3, #44]	@ D.6515, _11->uxPriority
 1539 0044 9A42     		cmp	r2, r3	@ D.6515, D.6515
 1540 0046 01D3     		bcc	.L113	@,
1423:FreeRTOS/tasks.c **** 					{
1424:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
 1541              		.loc 1 1424 0
 1542 0048 0123     		movs	r3, #1	@ tmp133,
 1543 004a 7B61     		str	r3, [r7, #20]	@ tmp133, xYieldRequired
 1544              	.L113:
1425:FreeRTOS/tasks.c **** 					}
1426:FreeRTOS/tasks.c **** 					else
1427:FreeRTOS/tasks.c **** 					{
1428:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1429:FreeRTOS/tasks.c **** 					}
1430:FreeRTOS/tasks.c **** 
1431:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
 1545              		.loc 1 1431 0
 1546 004c 3B69     		ldr	r3, [r7, #16]	@ tmp134, pxTCB
 1547 004e 0433     		adds	r3, r3, #4	@ D.6517, tmp134,
 1548 0050 1846     		mov	r0, r3	@, D.6517
 1549 0052 FFF7FEFF 		bl	uxListRemove	@
1432:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1550              		.loc 1 1432 0
 1551 0056 3B69     		ldr	r3, [r7, #16]	@ tmp135, pxTCB
 1552 0058 DB6A     		ldr	r3, [r3, #44]	@ D.6515, pxTCB_6->uxPriority
 1553 005a 1A46     		mov	r2, r3	@ D.6518, D.6515
 1554 005c 0123     		movs	r3, #1	@ tmp136,
 1555 005e 03FA02F2 		lsl	r2, r3, r2	@ D.6515, tmp136, D.6518
 1556 0062 134B     		ldr	r3, .L116+8	@ tmp137,
 1557 0064 1B68     		ldr	r3, [r3]	@ D.6515, uxTopReadyPriority
 1558 0066 1343     		orrs	r3, r3, r2	@, D.6515, D.6515, D.6515
 1559 0068 114A     		ldr	r2, .L116+8	@ tmp138,
 1560 006a 1360     		str	r3, [r2]	@ D.6515, uxTopReadyPriority
 1561 006c 3B69     		ldr	r3, [r7, #16]	@ tmp139, pxTCB
 1562 006e DA6A     		ldr	r2, [r3, #44]	@ D.6515, pxTCB_6->uxPriority
 1563 0070 1346     		mov	r3, r2	@ tmp140, D.6515
 1564 0072 9B00     		lsls	r3, r3, #2	@ tmp140, tmp140,
 1565 0074 1344     		add	r3, r3, r2	@ tmp140, D.6515
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 54


 1566 0076 9B00     		lsls	r3, r3, #2	@ tmp141, tmp140,
 1567 0078 0E4A     		ldr	r2, .L116+12	@ tmp142,
 1568 007a 1A44     		add	r2, r2, r3	@ D.6519, tmp140
 1569 007c 3B69     		ldr	r3, [r7, #16]	@ tmp143, pxTCB
 1570 007e 0433     		adds	r3, r3, #4	@ D.6517, tmp143,
 1571 0080 1046     		mov	r0, r2	@, D.6519
 1572 0082 1946     		mov	r1, r3	@, D.6517
 1573 0084 FFF7FEFF 		bl	vListInsertEnd	@
 1574 0088 05E0     		b	.L111	@
 1575              	.L112:
1433:FreeRTOS/tasks.c **** 				}
1434:FreeRTOS/tasks.c **** 				else
1435:FreeRTOS/tasks.c **** 				{
1436:FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1437:FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1438:FreeRTOS/tasks.c **** 					unsuspended. */
1439:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1576              		.loc 1 1439 0
 1577 008a 3B69     		ldr	r3, [r7, #16]	@ tmp144, pxTCB
 1578 008c 1833     		adds	r3, r3, #24	@ D.6517, tmp144,
 1579 008e 0A48     		ldr	r0, .L116+16	@,
 1580 0090 1946     		mov	r1, r3	@, D.6517
 1581 0092 FFF7FEFF 		bl	vListInsertEnd	@
 1582              	.L111:
1440:FreeRTOS/tasks.c **** 				}
1441:FreeRTOS/tasks.c **** 			}
1442:FreeRTOS/tasks.c **** 			else
1443:FreeRTOS/tasks.c **** 			{
1444:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1445:FreeRTOS/tasks.c **** 			}
1446:FreeRTOS/tasks.c **** 		}
1447:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1583              		.loc 1 1447 0
 1584 0096 F868     		ldr	r0, [r7, #12]	@, uxSavedInterruptStatus
 1585 0098 FFF7FEFF 		bl	vPortClearInterruptMask	@
1448:FreeRTOS/tasks.c **** 
1449:FreeRTOS/tasks.c **** 		return xYieldRequired;
 1586              		.loc 1 1449 0
 1587 009c 7B69     		ldr	r3, [r7, #20]	@ D.6520, xYieldRequired
1450:FreeRTOS/tasks.c **** 	}
 1588              		.loc 1 1450 0
 1589 009e 1846     		mov	r0, r3	@, <retval>
 1590 00a0 1837     		adds	r7, r7, #24	@,,
 1591              		.cfi_def_cfa_offset 8
 1592 00a2 BD46     		mov	sp, r7	@,
 1593              		.cfi_def_cfa_register 13
 1594              		@ sp needed	@
 1595 00a4 80BD     		pop	{r7, pc}	@
 1596              	.L117:
 1597 00a6 00BF     		.align	2
 1598              	.L116:
 1599 00a8 00000000 		.word	uxSchedulerSuspended
 1600 00ac 00000000 		.word	pxCurrentTCB
 1601 00b0 00000000 		.word	uxTopReadyPriority
 1602 00b4 00000000 		.word	pxReadyTasksLists
 1603 00b8 00000000 		.word	xPendingReadyList
 1604              		.cfi_endproc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 55


 1605              	.LFE10:
 1606              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1607              		.section	.rodata
 1608              		.align	2
 1609              	.LC0:
 1610 0000 49444C45 		.ascii	"IDLE\000"
 1610      00
 1611 0005 000000   		.section	.text.vTaskStartScheduler,"ax",%progbits
 1612              		.align	2
 1613              		.global	vTaskStartScheduler
 1614              		.thumb
 1615              		.thumb_func
 1616              		.type	vTaskStartScheduler, %function
 1617              	vTaskStartScheduler:
 1618              	.LFB11:
1451:FreeRTOS/tasks.c **** 
1452:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1453:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1454:FreeRTOS/tasks.c **** 
1455:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1456:FreeRTOS/tasks.c **** {
 1619              		.loc 1 1456 0
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 8
 1622              		@ frame_needed = 1, uses_anonymous_args = 0
 1623 0000 80B5     		push	{r7, lr}	@
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 7, -8
 1626              		.cfi_offset 14, -4
 1627 0002 86B0     		sub	sp, sp, #24	@,,
 1628              		.cfi_def_cfa_offset 32
 1629 0004 04AF     		add	r7, sp, #16	@,,
 1630              		.cfi_def_cfa 7, 16
1457:FreeRTOS/tasks.c **** BaseT_t xReturn;
1458:FreeRTOS/tasks.c **** 
1459:FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1460:FreeRTOS/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1461:FreeRTOS/tasks.c **** 	{
1462:FreeRTOS/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1463:FreeRTOS/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1464:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
1465:FreeRTOS/tasks.c **** 	}
1466:FreeRTOS/tasks.c **** 	#else
1467:FreeRTOS/tasks.c **** 	{
1468:FreeRTOS/tasks.c **** 		/* Create the idle task without storing its handle. */
1469:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORI
 1631              		.loc 1 1469 0
 1632 0006 0023     		movs	r3, #0	@ tmp111,
 1633 0008 0093     		str	r3, [sp]	@ tmp111,
 1634 000a 0023     		movs	r3, #0	@ tmp112,
 1635 000c 0193     		str	r3, [sp, #4]	@ tmp112,
 1636 000e 0023     		movs	r3, #0	@ tmp113,
 1637 0010 0293     		str	r3, [sp, #8]	@ tmp113,
 1638 0012 0023     		movs	r3, #0	@ tmp114,
 1639 0014 0393     		str	r3, [sp, #12]	@ tmp114,
 1640 0016 0F48     		ldr	r0, .L122	@,
 1641 0018 0F49     		ldr	r1, .L122+4	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 56


 1642 001a 4FF48072 		mov	r2, #256	@,
 1643 001e 0023     		movs	r3, #0	@,
 1644 0020 FFF7FEFF 		bl	xTaskGenericCreate	@
 1645 0024 7860     		str	r0, [r7, #4]	@, xReturn
1470:FreeRTOS/tasks.c **** 	}
1471:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
1472:FreeRTOS/tasks.c **** 
1473:FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1474:FreeRTOS/tasks.c **** 	{
1475:FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1476:FreeRTOS/tasks.c **** 		{
1477:FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1478:FreeRTOS/tasks.c **** 		}
1479:FreeRTOS/tasks.c **** 		else
1480:FreeRTOS/tasks.c **** 		{
1481:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:FreeRTOS/tasks.c **** 		}
1483:FreeRTOS/tasks.c **** 	}
1484:FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1485:FreeRTOS/tasks.c **** 
1486:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
 1646              		.loc 1 1486 0
 1647 0026 7B68     		ldr	r3, [r7, #4]	@ tmp115, xReturn
 1648 0028 012B     		cmp	r3, #1	@ tmp115,
 1649 002a 0AD1     		bne	.L119	@,
1487:FreeRTOS/tasks.c **** 	{
1488:FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1489:FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1490:FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1491:FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1492:FreeRTOS/tasks.c **** 		starts to run. */
1493:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
 1650              		.loc 1 1493 0
 1651 002c FFF7FEFF 		bl	ulPortSetInterruptMask	@
1494:FreeRTOS/tasks.c **** 
1495:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1496:FreeRTOS/tasks.c **** 		{
1497:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1498:FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1499:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1500:FreeRTOS/tasks.c **** 		}
1501:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1502:FreeRTOS/tasks.c **** 
1503:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1652              		.loc 1 1503 0
 1653 0030 0A4B     		ldr	r3, .L122+8	@ tmp116,
 1654 0032 0122     		movs	r2, #1	@ tmp117,
 1655 0034 1A60     		str	r2, [r3]	@ tmp117, xSchedulerRunning
1504:FreeRTOS/tasks.c **** 		xTickCount = ( TickT_t ) 0U;
 1656              		.loc 1 1504 0
 1657 0036 0A4B     		ldr	r3, .L122+12	@ tmp118,
 1658 0038 0022     		movs	r2, #0	@ tmp119,
 1659 003a 1A60     		str	r2, [r3]	@ tmp119, xTickCount
1505:FreeRTOS/tasks.c **** 
1506:FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1507:FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1508:FreeRTOS/tasks.c **** 		the run time counter time base. */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 57


1509:FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1510:FreeRTOS/tasks.c **** 
1511:FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1512:FreeRTOS/tasks.c **** 		portable interface. */
1513:FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1660              		.loc 1 1513 0
 1661 003c FFF7FEFF 		bl	xPortStartScheduler	@
 1662 0040 05E0     		b	.L118	@
 1663              	.L119:
1514:FreeRTOS/tasks.c **** 		{
1515:FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1516:FreeRTOS/tasks.c **** 			function will not return. */
1517:FreeRTOS/tasks.c **** 		}
1518:FreeRTOS/tasks.c **** 		else
1519:FreeRTOS/tasks.c **** 		{
1520:FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1521:FreeRTOS/tasks.c **** 		}
1522:FreeRTOS/tasks.c **** 	}
1523:FreeRTOS/tasks.c **** 	else
1524:FreeRTOS/tasks.c **** 	{
1525:FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1526:FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1527:FreeRTOS/tasks.c **** 		or the timer task. */
1528:FreeRTOS/tasks.c **** 		configASSERT( xReturn );
 1664              		.loc 1 1528 0
 1665 0042 7B68     		ldr	r3, [r7, #4]	@ tmp120, xReturn
 1666 0044 002B     		cmp	r3, #0	@ tmp120,
 1667 0046 02D1     		bne	.L118	@,
 1668              		.loc 1 1528 0 is_stmt 0 discriminator 1
 1669 0048 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1670              	.L121:
 1671              		.loc 1 1528 0 discriminator 2
 1672 004c FEE7     		b	.L121	@
 1673              	.L118:
1529:FreeRTOS/tasks.c **** 	}
1530:FreeRTOS/tasks.c **** }
 1674              		.loc 1 1530 0 is_stmt 1
 1675 004e 0837     		adds	r7, r7, #8	@,,
 1676              		.cfi_def_cfa_offset 8
 1677 0050 BD46     		mov	sp, r7	@,
 1678              		.cfi_def_cfa_register 13
 1679              		@ sp needed	@
 1680 0052 80BD     		pop	{r7, pc}	@
 1681              	.L123:
 1682              		.align	2
 1683              	.L122:
 1684 0054 00000000 		.word	prvIdleTask
 1685 0058 00000000 		.word	.LC0
 1686 005c 00000000 		.word	xSchedulerRunning
 1687 0060 00000000 		.word	xTickCount
 1688              		.cfi_endproc
 1689              	.LFE11:
 1690              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1691              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1692              		.align	2
 1693              		.global	vTaskEndScheduler
 1694              		.thumb
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 58


 1695              		.thumb_func
 1696              		.type	vTaskEndScheduler, %function
 1697              	vTaskEndScheduler:
 1698              	.LFB12:
1531:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1532:FreeRTOS/tasks.c **** 
1533:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1534:FreeRTOS/tasks.c **** {
 1699              		.loc 1 1534 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 0
 1702              		@ frame_needed = 1, uses_anonymous_args = 0
 1703 0000 80B5     		push	{r7, lr}	@
 1704              		.cfi_def_cfa_offset 8
 1705              		.cfi_offset 7, -8
 1706              		.cfi_offset 14, -4
 1707 0002 00AF     		add	r7, sp, #0	@,,
 1708              		.cfi_def_cfa_register 7
1535:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1536:FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1537:FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1538:FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
 1709              		.loc 1 1538 0
 1710 0004 FFF7FEFF 		bl	ulPortSetInterruptMask	@
1539:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1711              		.loc 1 1539 0
 1712 0008 024B     		ldr	r3, .L125	@ tmp110,
 1713 000a 0022     		movs	r2, #0	@ tmp111,
 1714 000c 1A60     		str	r2, [r3]	@ tmp111, xSchedulerRunning
1540:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1715              		.loc 1 1540 0
 1716 000e FFF7FEFF 		bl	vPortEndScheduler	@
1541:FreeRTOS/tasks.c **** }
 1717              		.loc 1 1541 0
 1718 0012 80BD     		pop	{r7, pc}	@
 1719              	.L126:
 1720              		.align	2
 1721              	.L125:
 1722 0014 00000000 		.word	xSchedulerRunning
 1723              		.cfi_endproc
 1724              	.LFE12:
 1725              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1726              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1727              		.align	2
 1728              		.global	vTaskSuspendAll
 1729              		.thumb
 1730              		.thumb_func
 1731              		.type	vTaskSuspendAll, %function
 1732              	vTaskSuspendAll:
 1733              	.LFB13:
1542:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1543:FreeRTOS/tasks.c **** 
1544:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1545:FreeRTOS/tasks.c **** {
 1734              		.loc 1 1545 0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 59


 1737              		@ frame_needed = 1, uses_anonymous_args = 0
 1738              		@ link register save eliminated.
 1739 0000 80B4     		push	{r7}	@
 1740              		.cfi_def_cfa_offset 4
 1741              		.cfi_offset 7, -4
 1742 0002 00AF     		add	r7, sp, #0	@,,
 1743              		.cfi_def_cfa_register 7
1546:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1547:FreeRTOS/tasks.c **** 	BaseT_t.  Please read Richard Barry's reply in the following link to a
1548:FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1549:FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1550:FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
 1744              		.loc 1 1550 0
 1745 0004 044B     		ldr	r3, .L128	@ tmp112,
 1746 0006 1B68     		ldr	r3, [r3]	@ D.6523, uxSchedulerSuspended
 1747 0008 0133     		adds	r3, r3, #1	@ D.6523, D.6523,
 1748 000a 034A     		ldr	r2, .L128	@ tmp113,
 1749 000c 1360     		str	r3, [r2]	@ D.6523, uxSchedulerSuspended
1551:FreeRTOS/tasks.c **** }
 1750              		.loc 1 1551 0
 1751 000e BD46     		mov	sp, r7	@,
 1752              		.cfi_def_cfa_register 13
 1753              		@ sp needed	@
 1754 0010 5DF8047B 		ldr	r7, [sp], #4	@,
 1755              		.cfi_restore 7
 1756              		.cfi_def_cfa_offset 0
 1757 0014 7047     		bx	lr	@
 1758              	.L129:
 1759 0016 00BF     		.align	2
 1760              	.L128:
 1761 0018 00000000 		.word	uxSchedulerSuspended
 1762              		.cfi_endproc
 1763              	.LFE13:
 1764              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1765              		.section	.text.xTaskResumeAll,"ax",%progbits
 1766              		.align	2
 1767              		.global	xTaskResumeAll
 1768              		.thumb
 1769              		.thumb_func
 1770              		.type	xTaskResumeAll, %function
 1771              	xTaskResumeAll:
 1772              	.LFB14:
1552:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1553:FreeRTOS/tasks.c **** 
1554:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1555:FreeRTOS/tasks.c **** 
1556:FreeRTOS/tasks.c **** 	static TickT_t prvGetExpectedIdleTime( void )
1557:FreeRTOS/tasks.c **** 	{
1558:FreeRTOS/tasks.c **** 	TickT_t xReturn;
1559:FreeRTOS/tasks.c **** 
1560:FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1561:FreeRTOS/tasks.c **** 		{
1562:FreeRTOS/tasks.c **** 			xReturn = 0;
1563:FreeRTOS/tasks.c **** 		}
1564:FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1565:FreeRTOS/tasks.c **** 		{
1566:FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 60


1567:FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1568:FreeRTOS/tasks.c **** 			processed. */
1569:FreeRTOS/tasks.c **** 			xReturn = 0;
1570:FreeRTOS/tasks.c **** 		}
1571:FreeRTOS/tasks.c **** 		else
1572:FreeRTOS/tasks.c **** 		{
1573:FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
1574:FreeRTOS/tasks.c **** 		}
1575:FreeRTOS/tasks.c **** 
1576:FreeRTOS/tasks.c **** 		return xReturn;
1577:FreeRTOS/tasks.c **** 	}
1578:FreeRTOS/tasks.c **** 
1579:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1580:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1581:FreeRTOS/tasks.c **** 
1582:FreeRTOS/tasks.c **** BaseT_t xTaskResumeAll( void )
1583:FreeRTOS/tasks.c **** {
 1773              		.loc 1 1583 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 8
 1776              		@ frame_needed = 1, uses_anonymous_args = 0
 1777 0000 80B5     		push	{r7, lr}	@
 1778              		.cfi_def_cfa_offset 8
 1779              		.cfi_offset 7, -8
 1780              		.cfi_offset 14, -4
 1781 0002 82B0     		sub	sp, sp, #8	@,,
 1782              		.cfi_def_cfa_offset 16
 1783 0004 00AF     		add	r7, sp, #0	@,,
 1784              		.cfi_def_cfa_register 7
1584:FreeRTOS/tasks.c **** TCB_t *pxTCB;
1585:FreeRTOS/tasks.c **** BaseT_t xAlreadyYielded = pdFALSE;
 1785              		.loc 1 1585 0
 1786 0006 0023     		movs	r3, #0	@ tmp138,
 1787 0008 7B60     		str	r3, [r7, #4]	@ tmp138, xAlreadyYielded
1586:FreeRTOS/tasks.c **** 
1587:FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1588:FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
1589:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 1788              		.loc 1 1589 0
 1789 000a 384B     		ldr	r3, .L141	@ tmp139,
 1790 000c 1B68     		ldr	r3, [r3]	@ D.6524, uxSchedulerSuspended
 1791 000e 002B     		cmp	r3, #0	@ D.6524,
 1792 0010 02D1     		bne	.L131	@,
 1793              		.loc 1 1589 0 is_stmt 0 discriminator 1
 1794 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 1795              	.L132:
 1796 0016 FEE7     		b	.L132	@
 1797              	.L131:
1590:FreeRTOS/tasks.c **** 
1591:FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1592:FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1593:FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1594:FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1595:FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
1596:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1798              		.loc 1 1596 0 is_stmt 1
 1799 0018 FFF7FEFF 		bl	vPortEnterCritical	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 61


1597:FreeRTOS/tasks.c **** 	{
1598:FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
 1800              		.loc 1 1598 0
 1801 001c 334B     		ldr	r3, .L141	@ tmp140,
 1802 001e 1B68     		ldr	r3, [r3]	@ D.6524, uxSchedulerSuspended
 1803 0020 013B     		subs	r3, r3, #1	@ D.6524, D.6524,
 1804 0022 324A     		ldr	r2, .L141	@ tmp141,
 1805 0024 1360     		str	r3, [r2]	@ D.6524, uxSchedulerSuspended
1599:FreeRTOS/tasks.c **** 
1600:FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 1806              		.loc 1 1600 0
 1807 0026 314B     		ldr	r3, .L141	@ tmp142,
 1808 0028 1B68     		ldr	r3, [r3]	@ D.6524, uxSchedulerSuspended
 1809 002a 002B     		cmp	r3, #0	@ D.6524,
 1810 002c 57D1     		bne	.L133	@,
1601:FreeRTOS/tasks.c **** 		{
1602:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseT_t ) 0U )
 1811              		.loc 1 1602 0
 1812 002e 304B     		ldr	r3, .L141+4	@ tmp143,
 1813 0030 1B68     		ldr	r3, [r3]	@ D.6524, uxCurrentNumberOfTasks
 1814 0032 002B     		cmp	r3, #0	@ D.6524,
 1815 0034 53D0     		beq	.L133	@,
1603:FreeRTOS/tasks.c **** 			{
1604:FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
1605:FreeRTOS/tasks.c **** 				appropriate ready list. */
1606:FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 1816              		.loc 1 1606 0
 1817 0036 30E0     		b	.L134	@
 1818              	.L135:
1607:FreeRTOS/tasks.c **** 				{
1608:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 1819              		.loc 1 1608 0
 1820 0038 2E4B     		ldr	r3, .L141+8	@ tmp144,
 1821 003a DB68     		ldr	r3, [r3, #12]	@ D.6525, xPendingReadyList.xListEnd.pxNext
 1822 003c DB68     		ldr	r3, [r3, #12]	@ tmp145, _9->pvOwner
 1823 003e 3B60     		str	r3, [r7]	@ tmp145, pxTCB
1609:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1824              		.loc 1 1609 0
 1825 0040 3B68     		ldr	r3, [r7]	@ tmp146, pxTCB
 1826 0042 1833     		adds	r3, r3, #24	@ D.6526, tmp146,
 1827 0044 1846     		mov	r0, r3	@, D.6526
 1828 0046 FFF7FEFF 		bl	uxListRemove	@
1610:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 1829              		.loc 1 1610 0
 1830 004a 3B68     		ldr	r3, [r7]	@ tmp147, pxTCB
 1831 004c 0433     		adds	r3, r3, #4	@ D.6526, tmp147,
 1832 004e 1846     		mov	r0, r3	@, D.6526
 1833 0050 FFF7FEFF 		bl	uxListRemove	@
1611:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1834              		.loc 1 1611 0
 1835 0054 3B68     		ldr	r3, [r7]	@ tmp148, pxTCB
 1836 0056 DB6A     		ldr	r3, [r3, #44]	@ D.6524, pxTCB_10->uxPriority
 1837 0058 1A46     		mov	r2, r3	@ D.6527, D.6524
 1838 005a 0123     		movs	r3, #1	@ tmp149,
 1839 005c 03FA02F2 		lsl	r2, r3, r2	@ D.6524, tmp149, D.6527
 1840 0060 254B     		ldr	r3, .L141+12	@ tmp150,
 1841 0062 1B68     		ldr	r3, [r3]	@ D.6524, uxTopReadyPriority
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 62


 1842 0064 1343     		orrs	r3, r3, r2	@, D.6524, D.6524, D.6524
 1843 0066 244A     		ldr	r2, .L141+12	@ tmp151,
 1844 0068 1360     		str	r3, [r2]	@ D.6524, uxTopReadyPriority
 1845 006a 3B68     		ldr	r3, [r7]	@ tmp152, pxTCB
 1846 006c DA6A     		ldr	r2, [r3, #44]	@ D.6524, pxTCB_10->uxPriority
 1847 006e 1346     		mov	r3, r2	@ tmp153, D.6524
 1848 0070 9B00     		lsls	r3, r3, #2	@ tmp153, tmp153,
 1849 0072 1344     		add	r3, r3, r2	@ tmp153, D.6524
 1850 0074 9B00     		lsls	r3, r3, #2	@ tmp154, tmp153,
 1851 0076 214A     		ldr	r2, .L141+16	@ tmp155,
 1852 0078 1A44     		add	r2, r2, r3	@ D.6528, tmp153
 1853 007a 3B68     		ldr	r3, [r7]	@ tmp156, pxTCB
 1854 007c 0433     		adds	r3, r3, #4	@ D.6526, tmp156,
 1855 007e 1046     		mov	r0, r2	@, D.6528
 1856 0080 1946     		mov	r1, r3	@, D.6526
 1857 0082 FFF7FEFF 		bl	vListInsertEnd	@
1612:FreeRTOS/tasks.c **** 
1613:FreeRTOS/tasks.c **** 					/* If we have moved a task that has a priority higher than
1614:FreeRTOS/tasks.c **** 					the current task then we should yield. */
1615:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1858              		.loc 1 1615 0
 1859 0086 3B68     		ldr	r3, [r7]	@ tmp157, pxTCB
 1860 0088 DA6A     		ldr	r2, [r3, #44]	@ D.6524, pxTCB_10->uxPriority
 1861 008a 1D4B     		ldr	r3, .L141+20	@ tmp158,
 1862 008c 1B68     		ldr	r3, [r3]	@ D.6529, pxCurrentTCB
 1863 008e DB6A     		ldr	r3, [r3, #44]	@ D.6524, _22->uxPriority
 1864 0090 9A42     		cmp	r2, r3	@ D.6524, D.6524
 1865 0092 02D3     		bcc	.L134	@,
1616:FreeRTOS/tasks.c **** 					{
1617:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
 1866              		.loc 1 1617 0
 1867 0094 1B4B     		ldr	r3, .L141+24	@ tmp159,
 1868 0096 0122     		movs	r2, #1	@ tmp160,
 1869 0098 1A60     		str	r2, [r3]	@ tmp160, xYieldPending
 1870              	.L134:
1606:FreeRTOS/tasks.c **** 				{
 1871              		.loc 1 1606 0
 1872 009a 164B     		ldr	r3, .L141+8	@ tmp161,
 1873 009c 1B68     		ldr	r3, [r3]	@ D.6524, xPendingReadyList.uxNumberOfItems
 1874 009e 002B     		cmp	r3, #0	@ D.6524,
 1875 00a0 CAD1     		bne	.L135	@,
1618:FreeRTOS/tasks.c **** 					}
1619:FreeRTOS/tasks.c **** 					else
1620:FreeRTOS/tasks.c **** 					{
1621:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1622:FreeRTOS/tasks.c **** 					}
1623:FreeRTOS/tasks.c **** 				}
1624:FreeRTOS/tasks.c **** 
1625:FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1626:FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
1627:FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
1628:FreeRTOS/tasks.c **** 				time. */
1629:FreeRTOS/tasks.c **** 				if( uxPendedTicks > ( UBaseT_t ) 0U )
 1876              		.loc 1 1629 0
 1877 00a2 194B     		ldr	r3, .L141+28	@ tmp162,
 1878 00a4 1B68     		ldr	r3, [r3]	@ D.6524, uxPendedTicks
 1879 00a6 002B     		cmp	r3, #0	@ D.6524,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 63


 1880 00a8 11D0     		beq	.L136	@,
1630:FreeRTOS/tasks.c **** 				{
1631:FreeRTOS/tasks.c **** 					while( uxPendedTicks > ( UBaseT_t ) 0U )
 1881              		.loc 1 1631 0
 1882 00aa 0CE0     		b	.L137	@
 1883              	.L139:
1632:FreeRTOS/tasks.c **** 					{
1633:FreeRTOS/tasks.c **** 						if( xTaskIncrementTick() != pdFALSE )
 1884              		.loc 1 1633 0
 1885 00ac FFF7FEFF 		bl	xTaskIncrementTick	@
 1886 00b0 0346     		mov	r3, r0	@ D.6530,
 1887 00b2 002B     		cmp	r3, #0	@ D.6530,
 1888 00b4 02D0     		beq	.L138	@,
1634:FreeRTOS/tasks.c **** 						{
1635:FreeRTOS/tasks.c **** 							xYieldPending = pdTRUE;
 1889              		.loc 1 1635 0
 1890 00b6 134B     		ldr	r3, .L141+24	@ tmp163,
 1891 00b8 0122     		movs	r2, #1	@ tmp164,
 1892 00ba 1A60     		str	r2, [r3]	@ tmp164, xYieldPending
 1893              	.L138:
1636:FreeRTOS/tasks.c **** 						}
1637:FreeRTOS/tasks.c **** 						else
1638:FreeRTOS/tasks.c **** 						{
1639:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1640:FreeRTOS/tasks.c **** 						}
1641:FreeRTOS/tasks.c **** 						--uxPendedTicks;
 1894              		.loc 1 1641 0
 1895 00bc 124B     		ldr	r3, .L141+28	@ tmp165,
 1896 00be 1B68     		ldr	r3, [r3]	@ D.6524, uxPendedTicks
 1897 00c0 013B     		subs	r3, r3, #1	@ D.6524, D.6524,
 1898 00c2 114A     		ldr	r2, .L141+28	@ tmp166,
 1899 00c4 1360     		str	r3, [r2]	@ D.6524, uxPendedTicks
 1900              	.L137:
1631:FreeRTOS/tasks.c **** 					{
 1901              		.loc 1 1631 0
 1902 00c6 104B     		ldr	r3, .L141+28	@ tmp167,
 1903 00c8 1B68     		ldr	r3, [r3]	@ D.6524, uxPendedTicks
 1904 00ca 002B     		cmp	r3, #0	@ D.6524,
 1905 00cc EED1     		bne	.L139	@,
 1906              	.L136:
1642:FreeRTOS/tasks.c **** 					}
1643:FreeRTOS/tasks.c **** 				}
1644:FreeRTOS/tasks.c **** 				else
1645:FreeRTOS/tasks.c **** 				{
1646:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1647:FreeRTOS/tasks.c **** 				}
1648:FreeRTOS/tasks.c **** 
1649:FreeRTOS/tasks.c **** 				if( xYieldPending == pdTRUE )
 1907              		.loc 1 1649 0
 1908 00ce 0D4B     		ldr	r3, .L141+24	@ tmp168,
 1909 00d0 1B68     		ldr	r3, [r3]	@ D.6530, xYieldPending
 1910 00d2 012B     		cmp	r3, #1	@ D.6530,
 1911 00d4 03D1     		bne	.L133	@,
1650:FreeRTOS/tasks.c **** 				{
1651:FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
1652:FreeRTOS/tasks.c **** 					{
1653:FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 64


 1912              		.loc 1 1653 0
 1913 00d6 0123     		movs	r3, #1	@ tmp169,
 1914 00d8 7B60     		str	r3, [r7, #4]	@ tmp169, xAlreadyYielded
1654:FreeRTOS/tasks.c **** 					}
1655:FreeRTOS/tasks.c **** 					#endif
1656:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1915              		.loc 1 1656 0
 1916 00da FFF7FEFF 		bl	vPortYield	@
 1917              	.L133:
1657:FreeRTOS/tasks.c **** 				}
1658:FreeRTOS/tasks.c **** 				else
1659:FreeRTOS/tasks.c **** 				{
1660:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1661:FreeRTOS/tasks.c **** 				}
1662:FreeRTOS/tasks.c **** 			}
1663:FreeRTOS/tasks.c **** 		}
1664:FreeRTOS/tasks.c **** 		else
1665:FreeRTOS/tasks.c **** 		{
1666:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1667:FreeRTOS/tasks.c **** 		}
1668:FreeRTOS/tasks.c **** 	}
1669:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1918              		.loc 1 1669 0
 1919 00de FFF7FEFF 		bl	vPortExitCritical	@
1670:FreeRTOS/tasks.c **** 
1671:FreeRTOS/tasks.c **** 	return xAlreadyYielded;
 1920              		.loc 1 1671 0
 1921 00e2 7B68     		ldr	r3, [r7, #4]	@ D.6531, xAlreadyYielded
1672:FreeRTOS/tasks.c **** }
 1922              		.loc 1 1672 0
 1923 00e4 1846     		mov	r0, r3	@, <retval>
 1924 00e6 0837     		adds	r7, r7, #8	@,,
 1925              		.cfi_def_cfa_offset 8
 1926 00e8 BD46     		mov	sp, r7	@,
 1927              		.cfi_def_cfa_register 13
 1928              		@ sp needed	@
 1929 00ea 80BD     		pop	{r7, pc}	@
 1930              	.L142:
 1931              		.align	2
 1932              	.L141:
 1933 00ec 00000000 		.word	uxSchedulerSuspended
 1934 00f0 00000000 		.word	uxCurrentNumberOfTasks
 1935 00f4 00000000 		.word	xPendingReadyList
 1936 00f8 00000000 		.word	uxTopReadyPriority
 1937 00fc 00000000 		.word	pxReadyTasksLists
 1938 0100 00000000 		.word	pxCurrentTCB
 1939 0104 00000000 		.word	xYieldPending
 1940 0108 00000000 		.word	uxPendedTicks
 1941              		.cfi_endproc
 1942              	.LFE14:
 1943              		.size	xTaskResumeAll, .-xTaskResumeAll
 1944              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1945              		.align	2
 1946              		.global	xTaskGetTickCount
 1947              		.thumb
 1948              		.thumb_func
 1949              		.type	xTaskGetTickCount, %function
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 65


 1950              	xTaskGetTickCount:
 1951              	.LFB15:
1673:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1674:FreeRTOS/tasks.c **** 
1675:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCount( void )
1676:FreeRTOS/tasks.c **** {
 1952              		.loc 1 1676 0
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 8
 1955              		@ frame_needed = 1, uses_anonymous_args = 0
 1956 0000 80B5     		push	{r7, lr}	@
 1957              		.cfi_def_cfa_offset 8
 1958              		.cfi_offset 7, -8
 1959              		.cfi_offset 14, -4
 1960 0002 82B0     		sub	sp, sp, #8	@,,
 1961              		.cfi_def_cfa_offset 16
 1962 0004 00AF     		add	r7, sp, #0	@,,
 1963              		.cfi_def_cfa_register 7
1677:FreeRTOS/tasks.c **** TickT_t xTicks;
1678:FreeRTOS/tasks.c **** 
1679:FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1680:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 1964              		.loc 1 1680 0
 1965 0006 FFF7FEFF 		bl	vPortEnterCritical	@
1681:FreeRTOS/tasks.c **** 	{
1682:FreeRTOS/tasks.c **** 		xTicks = xTickCount;
 1966              		.loc 1 1682 0
 1967 000a 054B     		ldr	r3, .L145	@ tmp112,
 1968 000c 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 1969 000e 7B60     		str	r3, [r7, #4]	@ tmp113, xTicks
1683:FreeRTOS/tasks.c **** 	}
1684:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 1970              		.loc 1 1684 0
 1971 0010 FFF7FEFF 		bl	vPortExitCritical	@
1685:FreeRTOS/tasks.c **** 
1686:FreeRTOS/tasks.c **** 	return xTicks;
 1972              		.loc 1 1686 0
 1973 0014 7B68     		ldr	r3, [r7, #4]	@ D.6532, xTicks
1687:FreeRTOS/tasks.c **** }
 1974              		.loc 1 1687 0
 1975 0016 1846     		mov	r0, r3	@, <retval>
 1976 0018 0837     		adds	r7, r7, #8	@,,
 1977              		.cfi_def_cfa_offset 8
 1978 001a BD46     		mov	sp, r7	@,
 1979              		.cfi_def_cfa_register 13
 1980              		@ sp needed	@
 1981 001c 80BD     		pop	{r7, pc}	@
 1982              	.L146:
 1983 001e 00BF     		.align	2
 1984              	.L145:
 1985 0020 00000000 		.word	xTickCount
 1986              		.cfi_endproc
 1987              	.LFE15:
 1988              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1989              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1990              		.align	2
 1991              		.global	xTaskGetTickCountFromISR
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 66


 1992              		.thumb
 1993              		.thumb_func
 1994              		.type	xTaskGetTickCountFromISR, %function
 1995              	xTaskGetTickCountFromISR:
 1996              	.LFB16:
1688:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1689:FreeRTOS/tasks.c **** 
1690:FreeRTOS/tasks.c **** TickT_t xTaskGetTickCountFromISR( void )
1691:FreeRTOS/tasks.c **** {
 1997              		.loc 1 1691 0
 1998              		.cfi_startproc
 1999              		@ args = 0, pretend = 0, frame = 8
 2000              		@ frame_needed = 1, uses_anonymous_args = 0
 2001 0000 80B5     		push	{r7, lr}	@
 2002              		.cfi_def_cfa_offset 8
 2003              		.cfi_offset 7, -8
 2004              		.cfi_offset 14, -4
 2005 0002 82B0     		sub	sp, sp, #8	@,,
 2006              		.cfi_def_cfa_offset 16
 2007 0004 00AF     		add	r7, sp, #0	@,,
 2008              		.cfi_def_cfa_register 7
1692:FreeRTOS/tasks.c **** TickT_t xReturn;
1693:FreeRTOS/tasks.c **** UBaseT_t uxSavedInterruptStatus;
1694:FreeRTOS/tasks.c **** 
1695:FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1696:FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1697:FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
1698:FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1699:FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1700:FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1701:FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1702:FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
1703:FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1704:FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
1705:FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1706:FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1707:FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
1708:FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1709:FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2009              		.loc 1 1709 0
 2010 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority	@
1710:FreeRTOS/tasks.c **** 
1711:FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2011              		.loc 1 1711 0
 2012 000a FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2013 000e 7860     		str	r0, [r7, #4]	@, uxSavedInterruptStatus
1712:FreeRTOS/tasks.c **** 	{
1713:FreeRTOS/tasks.c **** 		xReturn = xTickCount;
 2014              		.loc 1 1713 0
 2015 0010 054B     		ldr	r3, .L149	@ tmp112,
 2016 0012 1B68     		ldr	r3, [r3]	@ tmp113, xTickCount
 2017 0014 3B60     		str	r3, [r7]	@ tmp113, xReturn
1714:FreeRTOS/tasks.c **** 	}
1715:FreeRTOS/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 2018              		.loc 1 1715 0
 2019 0016 7868     		ldr	r0, [r7, #4]	@, uxSavedInterruptStatus
 2020 0018 FFF7FEFF 		bl	vPortClearInterruptMask	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 67


1716:FreeRTOS/tasks.c **** 
1717:FreeRTOS/tasks.c **** 	return xReturn;
 2021              		.loc 1 1717 0
 2022 001c 3B68     		ldr	r3, [r7]	@ D.6533, xReturn
1718:FreeRTOS/tasks.c **** }
 2023              		.loc 1 1718 0
 2024 001e 1846     		mov	r0, r3	@, <retval>
 2025 0020 0837     		adds	r7, r7, #8	@,,
 2026              		.cfi_def_cfa_offset 8
 2027 0022 BD46     		mov	sp, r7	@,
 2028              		.cfi_def_cfa_register 13
 2029              		@ sp needed	@
 2030 0024 80BD     		pop	{r7, pc}	@
 2031              	.L150:
 2032 0026 00BF     		.align	2
 2033              	.L149:
 2034 0028 00000000 		.word	xTickCount
 2035              		.cfi_endproc
 2036              	.LFE16:
 2037              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2038              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2039              		.align	2
 2040              		.global	uxTaskGetNumberOfTasks
 2041              		.thumb
 2042              		.thumb_func
 2043              		.type	uxTaskGetNumberOfTasks, %function
 2044              	uxTaskGetNumberOfTasks:
 2045              	.LFB17:
1719:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1720:FreeRTOS/tasks.c **** 
1721:FreeRTOS/tasks.c **** UBaseT_t uxTaskGetNumberOfTasks( void )
1722:FreeRTOS/tasks.c **** {
 2046              		.loc 1 1722 0
 2047              		.cfi_startproc
 2048              		@ args = 0, pretend = 0, frame = 0
 2049              		@ frame_needed = 1, uses_anonymous_args = 0
 2050              		@ link register save eliminated.
 2051 0000 80B4     		push	{r7}	@
 2052              		.cfi_def_cfa_offset 4
 2053              		.cfi_offset 7, -4
 2054 0002 00AF     		add	r7, sp, #0	@,,
 2055              		.cfi_def_cfa_register 7
1723:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
1724:FreeRTOS/tasks.c **** 	BaseT_t. */
1725:FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
 2056              		.loc 1 1725 0
 2057 0004 034B     		ldr	r3, .L153	@ tmp112,
 2058 0006 1B68     		ldr	r3, [r3]	@ D.6534, uxCurrentNumberOfTasks
1726:FreeRTOS/tasks.c **** }
 2059              		.loc 1 1726 0
 2060 0008 1846     		mov	r0, r3	@, <retval>
 2061 000a BD46     		mov	sp, r7	@,
 2062              		.cfi_def_cfa_register 13
 2063              		@ sp needed	@
 2064 000c 5DF8047B 		ldr	r7, [sp], #4	@,
 2065              		.cfi_restore 7
 2066              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 68


 2067 0010 7047     		bx	lr	@
 2068              	.L154:
 2069 0012 00BF     		.align	2
 2070              	.L153:
 2071 0014 00000000 		.word	uxCurrentNumberOfTasks
 2072              		.cfi_endproc
 2073              	.LFE17:
 2074              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2075              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 2076              		.align	2
 2077              		.global	uxTaskGetSystemState
 2078              		.thumb
 2079              		.thumb_func
 2080              		.type	uxTaskGetSystemState, %function
 2081              	uxTaskGetSystemState:
 2082              	.LFB18:
1727:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1728:FreeRTOS/tasks.c **** 
1729:FreeRTOS/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1730:FreeRTOS/tasks.c **** 
1731:FreeRTOS/tasks.c **** 	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allow
1732:FreeRTOS/tasks.c **** 	{
1733:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1734:FreeRTOS/tasks.c **** 
1735:FreeRTOS/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1736:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1737:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1738:FreeRTOS/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1739:FreeRTOS/tasks.c **** 	}
1740:FreeRTOS/tasks.c **** 
1741:FreeRTOS/tasks.c **** #endif /* INCLUDE_pcTaskGetTaskName */
1742:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1743:FreeRTOS/tasks.c **** 
1744:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1745:FreeRTOS/tasks.c **** 
1746:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseT_t uxArraySize,
1747:FreeRTOS/tasks.c **** 	{
 2083              		.loc 1 1747 0
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 24
 2086              		@ frame_needed = 1, uses_anonymous_args = 0
 2087 0000 80B5     		push	{r7, lr}	@
 2088              		.cfi_def_cfa_offset 8
 2089              		.cfi_offset 7, -8
 2090              		.cfi_offset 14, -4
 2091 0002 86B0     		sub	sp, sp, #24	@,,
 2092              		.cfi_def_cfa_offset 32
 2093 0004 00AF     		add	r7, sp, #0	@,,
 2094              		.cfi_def_cfa_register 7
 2095 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 2096 0008 B960     		str	r1, [r7, #8]	@ uxArraySize, uxArraySize
 2097 000a 7A60     		str	r2, [r7, #4]	@ pulTotalRunTime, pulTotalRunTime
1748:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 2098              		.loc 1 1748 0
 2099 000c 0023     		movs	r3, #0	@ tmp131,
 2100 000e 7B61     		str	r3, [r7, #20]	@ tmp131, uxTask
 2101 0010 0823     		movs	r3, #8	@ tmp132,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 69


 2102 0012 3B61     		str	r3, [r7, #16]	@ tmp132, uxQueue
1749:FreeRTOS/tasks.c **** 
1750:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
 2103              		.loc 1 1750 0
 2104 0014 FFF7FEFF 		bl	vTaskSuspendAll	@
1751:FreeRTOS/tasks.c **** 		{
1752:FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
1753:FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 2105              		.loc 1 1753 0
 2106 0018 314B     		ldr	r3, .L160	@ tmp133,
 2107 001a 1B68     		ldr	r3, [r3]	@ D.6535, uxCurrentNumberOfTasks
 2108 001c BA68     		ldr	r2, [r7, #8]	@ tmp134, uxArraySize
 2109 001e 9A42     		cmp	r2, r3	@ tmp134, D.6535
 2110 0020 57D3     		bcc	.L156	@,
 2111              	.L157:
1754:FreeRTOS/tasks.c **** 			{
1755:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1756:FreeRTOS/tasks.c **** 				task in the Ready state. */
1757:FreeRTOS/tasks.c **** 				do
1758:FreeRTOS/tasks.c **** 				{
1759:FreeRTOS/tasks.c **** 					uxQueue--;
 2112              		.loc 1 1759 0 discriminator 1
 2113 0022 3B69     		ldr	r3, [r7, #16]	@ tmp136, uxQueue
 2114 0024 013B     		subs	r3, r3, #1	@ tmp135, tmp136,
 2115 0026 3B61     		str	r3, [r7, #16]	@ tmp135, uxQueue
1760:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[
 2116              		.loc 1 1760 0 discriminator 1
 2117 0028 7B69     		ldr	r3, [r7, #20]	@ tmp137, uxTask
 2118 002a 5B01     		lsls	r3, r3, #5	@ D.6535, tmp137,
 2119 002c FA68     		ldr	r2, [r7, #12]	@ tmp138, pxTaskStatusArray
 2120 002e D118     		adds	r1, r2, r3	@ D.6536, tmp138, D.6535
 2121 0030 3A69     		ldr	r2, [r7, #16]	@ tmp139, uxQueue
 2122 0032 1346     		mov	r3, r2	@ tmp140, tmp139
 2123 0034 9B00     		lsls	r3, r3, #2	@ tmp140, tmp140,
 2124 0036 1344     		add	r3, r3, r2	@ tmp140, tmp139
 2125 0038 9B00     		lsls	r3, r3, #2	@ tmp141, tmp140,
 2126 003a 2A4A     		ldr	r2, .L160+4	@ tmp142,
 2127 003c 1344     		add	r3, r3, r2	@ D.6537, tmp142
 2128 003e 0846     		mov	r0, r1	@, D.6536
 2129 0040 1946     		mov	r1, r3	@, D.6537
 2130 0042 0122     		movs	r2, #1	@,
 2131 0044 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2132 0048 0246     		mov	r2, r0	@ D.6535,
 2133 004a 7B69     		ldr	r3, [r7, #20]	@ tmp144, uxTask
 2134 004c 1344     		add	r3, r3, r2	@ tmp143, D.6535
 2135 004e 7B61     		str	r3, [r7, #20]	@ tmp143, uxTask
1761:FreeRTOS/tasks.c **** 
1762:FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseT_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts a
 2136              		.loc 1 1762 0 discriminator 1
 2137 0050 3B69     		ldr	r3, [r7, #16]	@ tmp145, uxQueue
 2138 0052 002B     		cmp	r3, #0	@ tmp145,
 2139 0054 E5D1     		bne	.L157	@,
1763:FreeRTOS/tasks.c **** 
1764:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
1765:FreeRTOS/tasks.c **** 				task in the Blocked state. */
1766:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayed
 2140              		.loc 1 1766 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 70


 2141 0056 7B69     		ldr	r3, [r7, #20]	@ tmp146, uxTask
 2142 0058 5B01     		lsls	r3, r3, #5	@ D.6535, tmp146,
 2143 005a FA68     		ldr	r2, [r7, #12]	@ tmp147, pxTaskStatusArray
 2144 005c 1A44     		add	r2, r2, r3	@ D.6536, D.6535
 2145 005e 224B     		ldr	r3, .L160+8	@ tmp148,
 2146 0060 1B68     		ldr	r3, [r3]	@ D.6537, pxDelayedTaskList
 2147 0062 1046     		mov	r0, r2	@, D.6536
 2148 0064 1946     		mov	r1, r3	@, D.6537
 2149 0066 0222     		movs	r2, #2	@,
 2150 0068 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2151 006c 0246     		mov	r2, r0	@ D.6535,
 2152 006e 7B69     		ldr	r3, [r7, #20]	@ tmp150, uxTask
 2153 0070 1344     		add	r3, r3, r2	@ tmp149, D.6535
 2154 0072 7B61     		str	r3, [r7, #20]	@ tmp149, uxTask
1767:FreeRTOS/tasks.c **** 				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflo
 2155              		.loc 1 1767 0
 2156 0074 7B69     		ldr	r3, [r7, #20]	@ tmp151, uxTask
 2157 0076 5B01     		lsls	r3, r3, #5	@ D.6535, tmp151,
 2158 0078 FA68     		ldr	r2, [r7, #12]	@ tmp152, pxTaskStatusArray
 2159 007a 1A44     		add	r2, r2, r3	@ D.6536, D.6535
 2160 007c 1B4B     		ldr	r3, .L160+12	@ tmp153,
 2161 007e 1B68     		ldr	r3, [r3]	@ D.6537, pxOverflowDelayedTaskList
 2162 0080 1046     		mov	r0, r2	@, D.6536
 2163 0082 1946     		mov	r1, r3	@, D.6537
 2164 0084 0222     		movs	r2, #2	@,
 2165 0086 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2166 008a 0246     		mov	r2, r0	@ D.6535,
 2167 008c 7B69     		ldr	r3, [r7, #20]	@ tmp155, uxTask
 2168 008e 1344     		add	r3, r3, r2	@ tmp154, D.6535
 2169 0090 7B61     		str	r3, [r7, #20]	@ tmp154, uxTask
1768:FreeRTOS/tasks.c **** 
1769:FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
1770:FreeRTOS/tasks.c **** 				{
1771:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1772:FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
1773:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermina
 2170              		.loc 1 1773 0
 2171 0092 7B69     		ldr	r3, [r7, #20]	@ tmp156, uxTask
 2172 0094 5B01     		lsls	r3, r3, #5	@ D.6535, tmp156,
 2173 0096 FA68     		ldr	r2, [r7, #12]	@ tmp157, pxTaskStatusArray
 2174 0098 1344     		add	r3, r3, r2	@ D.6536, tmp157
 2175 009a 1846     		mov	r0, r3	@, D.6536
 2176 009c 1449     		ldr	r1, .L160+16	@,
 2177 009e 0422     		movs	r2, #4	@,
 2178 00a0 FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2179 00a4 0246     		mov	r2, r0	@ D.6535,
 2180 00a6 7B69     		ldr	r3, [r7, #20]	@ tmp159, uxTask
 2181 00a8 1344     		add	r3, r3, r2	@ tmp158, D.6535
 2182 00aa 7B61     		str	r3, [r7, #20]	@ tmp158, uxTask
1774:FreeRTOS/tasks.c **** 				}
1775:FreeRTOS/tasks.c **** 				#endif
1776:FreeRTOS/tasks.c **** 
1777:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
1778:FreeRTOS/tasks.c **** 				{
1779:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
1780:FreeRTOS/tasks.c **** 					each task in the Suspended state. */
1781:FreeRTOS/tasks.c **** 					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 71


 2183              		.loc 1 1781 0
 2184 00ac 7B69     		ldr	r3, [r7, #20]	@ tmp160, uxTask
 2185 00ae 5B01     		lsls	r3, r3, #5	@ D.6535, tmp160,
 2186 00b0 FA68     		ldr	r2, [r7, #12]	@ tmp161, pxTaskStatusArray
 2187 00b2 1344     		add	r3, r3, r2	@ D.6536, tmp161
 2188 00b4 1846     		mov	r0, r3	@, D.6536
 2189 00b6 0F49     		ldr	r1, .L160+20	@,
 2190 00b8 0322     		movs	r2, #3	@,
 2191 00ba FFF7FEFF 		bl	prvListTaskWithinSingleList	@
 2192 00be 0246     		mov	r2, r0	@ D.6535,
 2193 00c0 7B69     		ldr	r3, [r7, #20]	@ tmp163, uxTask
 2194 00c2 1344     		add	r3, r3, r2	@ tmp162, D.6535
 2195 00c4 7B61     		str	r3, [r7, #20]	@ tmp162, uxTask
1782:FreeRTOS/tasks.c **** 				}
1783:FreeRTOS/tasks.c **** 				#endif
1784:FreeRTOS/tasks.c **** 
1785:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
1786:FreeRTOS/tasks.c **** 				{
1787:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
1788:FreeRTOS/tasks.c **** 					{
1789:FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1790:FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
1791:FreeRTOS/tasks.c **** 						#else
1792:FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
1793:FreeRTOS/tasks.c **** 						#endif
1794:FreeRTOS/tasks.c **** 					}
1795:FreeRTOS/tasks.c **** 				}
1796:FreeRTOS/tasks.c **** 				#else
1797:FreeRTOS/tasks.c **** 				{
1798:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
 2196              		.loc 1 1798 0
 2197 00c6 7B68     		ldr	r3, [r7, #4]	@ tmp164, pulTotalRunTime
 2198 00c8 002B     		cmp	r3, #0	@ tmp164,
 2199 00ca 02D0     		beq	.L156	@,
1799:FreeRTOS/tasks.c **** 					{
1800:FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
 2200              		.loc 1 1800 0
 2201 00cc 7B68     		ldr	r3, [r7, #4]	@ tmp165, pulTotalRunTime
 2202 00ce 0022     		movs	r2, #0	@ tmp166,
 2203 00d0 1A60     		str	r2, [r3]	@ tmp166, *pulTotalRunTime_33(D)
 2204              	.L156:
1801:FreeRTOS/tasks.c **** 					}
1802:FreeRTOS/tasks.c **** 				}
1803:FreeRTOS/tasks.c **** 				#endif
1804:FreeRTOS/tasks.c **** 			}
1805:FreeRTOS/tasks.c **** 			else
1806:FreeRTOS/tasks.c **** 			{
1807:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1808:FreeRTOS/tasks.c **** 			}
1809:FreeRTOS/tasks.c **** 		}
1810:FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
 2205              		.loc 1 1810 0
 2206 00d2 FFF7FEFF 		bl	xTaskResumeAll	@
1811:FreeRTOS/tasks.c **** 
1812:FreeRTOS/tasks.c **** 		return uxTask;
 2207              		.loc 1 1812 0
 2208 00d6 7B69     		ldr	r3, [r7, #20]	@ D.6538, uxTask
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 72


1813:FreeRTOS/tasks.c **** 	}
 2209              		.loc 1 1813 0
 2210 00d8 1846     		mov	r0, r3	@, <retval>
 2211 00da 1837     		adds	r7, r7, #24	@,,
 2212              		.cfi_def_cfa_offset 8
 2213 00dc BD46     		mov	sp, r7	@,
 2214              		.cfi_def_cfa_register 13
 2215              		@ sp needed	@
 2216 00de 80BD     		pop	{r7, pc}	@
 2217              	.L161:
 2218              		.align	2
 2219              	.L160:
 2220 00e0 00000000 		.word	uxCurrentNumberOfTasks
 2221 00e4 00000000 		.word	pxReadyTasksLists
 2222 00e8 00000000 		.word	pxDelayedTaskList
 2223 00ec 00000000 		.word	pxOverflowDelayedTaskList
 2224 00f0 00000000 		.word	xTasksWaitingTermination
 2225 00f4 00000000 		.word	xSuspendedTaskList
 2226              		.cfi_endproc
 2227              	.LFE18:
 2228              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 2229              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2230              		.align	2
 2231              		.global	xTaskIncrementTick
 2232              		.thumb
 2233              		.thumb_func
 2234              		.type	xTaskIncrementTick, %function
 2235              	xTaskIncrementTick:
 2236              	.LFB19:
1814:FreeRTOS/tasks.c **** 
1815:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
1816:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1817:FreeRTOS/tasks.c **** 
1818:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
1821:FreeRTOS/tasks.c **** 	{
1822:FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1823:FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1824:FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1825:FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
1826:FreeRTOS/tasks.c **** 	}
1827:FreeRTOS/tasks.c **** 
1828:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
1829:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1830:FreeRTOS/tasks.c **** 
1831:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
1832:FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
1833:FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1834:FreeRTOS/tasks.c **** 1. */
1835:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1836:FreeRTOS/tasks.c **** 
1837:FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickT_t xTicksToJump )
1838:FreeRTOS/tasks.c **** 	{
1839:FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
1840:FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
1841:FreeRTOS/tasks.c **** 		each stepped tick. */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 73


1842:FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
1843:FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
1844:FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
1845:FreeRTOS/tasks.c **** 	}
1846:FreeRTOS/tasks.c **** 
1847:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
1848:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1849:FreeRTOS/tasks.c **** 
1850:FreeRTOS/tasks.c **** BaseT_t xTaskIncrementTick( void )
1851:FreeRTOS/tasks.c **** {
 2237              		.loc 1 1851 0
 2238              		.cfi_startproc
 2239              		@ args = 0, pretend = 0, frame = 24
 2240              		@ frame_needed = 1, uses_anonymous_args = 0
 2241 0000 80B5     		push	{r7, lr}	@
 2242              		.cfi_def_cfa_offset 8
 2243              		.cfi_offset 7, -8
 2244              		.cfi_offset 14, -4
 2245 0002 86B0     		sub	sp, sp, #24	@,,
 2246              		.cfi_def_cfa_offset 32
 2247 0004 00AF     		add	r7, sp, #0	@,,
 2248              		.cfi_def_cfa_register 7
1852:FreeRTOS/tasks.c **** TCB_t * pxTCB;
1853:FreeRTOS/tasks.c **** TickT_t xItemValue;
1854:FreeRTOS/tasks.c **** BaseT_t xSwitchRequired = pdFALSE;
 2249              		.loc 1 1854 0
 2250 0006 0023     		movs	r3, #0	@ tmp147,
 2251 0008 7B61     		str	r3, [r7, #20]	@ tmp147, xSwitchRequired
1855:FreeRTOS/tasks.c **** 
1856:FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1857:FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1858:FreeRTOS/tasks.c **** 	tasks to be unblocked. */
1859:FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1860:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2252              		.loc 1 1860 0
 2253 000a 524B     		ldr	r3, .L179	@ tmp148,
 2254 000c 1B68     		ldr	r3, [r3]	@ D.6540, uxSchedulerSuspended
 2255 000e 002B     		cmp	r3, #0	@ D.6540,
 2256 0010 40F08E80 		bne	.L163	@,
1861:FreeRTOS/tasks.c **** 	{
1862:FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
1863:FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
1864:FreeRTOS/tasks.c **** 		++xTickCount;
 2257              		.loc 1 1864 0
 2258 0014 504B     		ldr	r3, .L179+4	@ tmp149,
 2259 0016 1B68     		ldr	r3, [r3]	@ D.6540, xTickCount
 2260 0018 0133     		adds	r3, r3, #1	@ D.6540, D.6540,
 2261 001a 4F4A     		ldr	r2, .L179+4	@ tmp150,
 2262 001c 1360     		str	r3, [r2]	@ D.6540, xTickCount
 2263              	.LBB8:
1865:FreeRTOS/tasks.c **** 
1866:FreeRTOS/tasks.c **** 		{
1867:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1868:FreeRTOS/tasks.c **** 			block. */
1869:FreeRTOS/tasks.c **** 			const TickT_t xConstTickCount = xTickCount;
 2264              		.loc 1 1869 0
 2265 001e 4E4B     		ldr	r3, .L179+4	@ tmp151,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 74


 2266 0020 1B68     		ldr	r3, [r3]	@ tmp152, xTickCount
 2267 0022 3B61     		str	r3, [r7, #16]	@ tmp152, xConstTickCount
1870:FreeRTOS/tasks.c **** 
1871:FreeRTOS/tasks.c **** 			if( xConstTickCount == ( TickT_t ) 0U )
 2268              		.loc 1 1871 0
 2269 0024 3B69     		ldr	r3, [r7, #16]	@ tmp153, xConstTickCount
 2270 0026 002B     		cmp	r3, #0	@ tmp153,
 2271 0028 18D1     		bne	.L164	@,
 2272              	.LBB9:
1872:FreeRTOS/tasks.c **** 			{
1873:FreeRTOS/tasks.c **** 				taskSWITCH_DELAYED_LISTS();
 2273              		.loc 1 1873 0
 2274 002a 4C4B     		ldr	r3, .L179+8	@ tmp154,
 2275 002c 1B68     		ldr	r3, [r3]	@ D.6541, pxDelayedTaskList
 2276 002e 1B68     		ldr	r3, [r3]	@ D.6540, _13->uxNumberOfItems
 2277 0030 002B     		cmp	r3, #0	@ D.6540,
 2278 0032 02D0     		beq	.L165	@,
 2279              		.loc 1 1873 0 is_stmt 0 discriminator 1
 2280 0034 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2281              	.L166:
 2282 0038 FEE7     		b	.L166	@
 2283              	.L165:
 2284              		.loc 1 1873 0 discriminator 2
 2285 003a 484B     		ldr	r3, .L179+8	@ tmp155,
 2286 003c 1B68     		ldr	r3, [r3]	@ tmp156, pxDelayedTaskList
 2287 003e FB60     		str	r3, [r7, #12]	@ tmp156, pxTemp
 2288 0040 474B     		ldr	r3, .L179+12	@ tmp157,
 2289 0042 1B68     		ldr	r3, [r3]	@ D.6541, pxOverflowDelayedTaskList
 2290 0044 454A     		ldr	r2, .L179+8	@ tmp158,
 2291 0046 1360     		str	r3, [r2]	@ D.6541, pxDelayedTaskList
 2292 0048 454A     		ldr	r2, .L179+12	@ tmp159,
 2293 004a FB68     		ldr	r3, [r7, #12]	@ tmp160, pxTemp
 2294 004c 1360     		str	r3, [r2]	@ tmp160, pxOverflowDelayedTaskList
 2295 004e 454B     		ldr	r3, .L179+16	@ tmp161,
 2296 0050 1B68     		ldr	r3, [r3]	@ D.6542, xNumOfOverflows
 2297 0052 0133     		adds	r3, r3, #1	@ D.6542, D.6542,
 2298 0054 434A     		ldr	r2, .L179+16	@ tmp162,
 2299 0056 1360     		str	r3, [r2]	@ D.6542, xNumOfOverflows
 2300 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime	@
 2301              	.L164:
 2302              	.LBE9:
1874:FreeRTOS/tasks.c **** 			}
1875:FreeRTOS/tasks.c **** 			else
1876:FreeRTOS/tasks.c **** 			{
1877:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1878:FreeRTOS/tasks.c **** 			}
1879:FreeRTOS/tasks.c **** 
1880:FreeRTOS/tasks.c **** 			/* See if this tick has made a timeout expire.  Tasks are stored in
1881:FreeRTOS/tasks.c **** 			the	queue in the order of their wake time - meaning once one task
1882:FreeRTOS/tasks.c **** 			has been found whose block time has not expired there is no need to
1883:FreeRTOS/tasks.c **** 			look any further	down the list. */
1884:FreeRTOS/tasks.c **** 			if( xConstTickCount >= xNextTaskUnblockTime )
 2303              		.loc 1 1884 0 is_stmt 1
 2304 005c 424B     		ldr	r3, .L179+20	@ tmp163,
 2305 005e 1B68     		ldr	r3, [r3]	@ D.6540, xNextTaskUnblockTime
 2306 0060 3A69     		ldr	r2, [r7, #16]	@ tmp164, xConstTickCount
 2307 0062 9A42     		cmp	r2, r3	@ tmp164, D.6540
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 75


 2308 0064 4FD3     		bcc	.L167	@,
 2309              	.L174:
1885:FreeRTOS/tasks.c **** 			{
1886:FreeRTOS/tasks.c **** 				for( ;; )
1887:FreeRTOS/tasks.c **** 				{
1888:FreeRTOS/tasks.c **** 					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2310              		.loc 1 1888 0
 2311 0066 3D4B     		ldr	r3, .L179+8	@ tmp165,
 2312 0068 1B68     		ldr	r3, [r3]	@ D.6541, pxDelayedTaskList
 2313 006a 1B68     		ldr	r3, [r3]	@ D.6540, _20->uxNumberOfItems
 2314 006c 002B     		cmp	r3, #0	@ D.6540,
 2315 006e 01D1     		bne	.L168	@,
 2316              		.loc 1 1888 0 is_stmt 0 discriminator 1
 2317 0070 0123     		movs	r3, #1	@ D.6539,
 2318 0072 00E0     		b	.L169	@
 2319              	.L168:
 2320              		.loc 1 1888 0 discriminator 2
 2321 0074 0023     		movs	r3, #0	@ D.6539,
 2322              	.L169:
 2323              		.loc 1 1888 0 discriminator 4
 2324 0076 002B     		cmp	r3, #0	@ D.6539,
 2325 0078 04D0     		beq	.L170	@,
1889:FreeRTOS/tasks.c **** 					{
1890:FreeRTOS/tasks.c **** 						/* The delayed list is empty.  Set xNextTaskUnblockTime
1891:FreeRTOS/tasks.c **** 						to the maximum possible value so it is extremely
1892:FreeRTOS/tasks.c **** 						unlikely that the
1893:FreeRTOS/tasks.c **** 						if( xTickCount >= xNextTaskUnblockTime ) test will pass
1894:FreeRTOS/tasks.c **** 						next time through. */
1895:FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = portMAX_DELAY;
 2326              		.loc 1 1895 0 is_stmt 1
 2327 007a 3B4B     		ldr	r3, .L179+20	@ tmp166,
 2328 007c 4FF0FF32 		mov	r2, #-1	@ tmp167,
 2329 0080 1A60     		str	r2, [r3]	@ tmp167, xNextTaskUnblockTime
1896:FreeRTOS/tasks.c **** 						break;
 2330              		.loc 1 1896 0
 2331 0082 40E0     		b	.L167	@
 2332              	.L170:
1897:FreeRTOS/tasks.c **** 					}
1898:FreeRTOS/tasks.c **** 					else
1899:FreeRTOS/tasks.c **** 					{
1900:FreeRTOS/tasks.c **** 						/* The delayed list is not empty, get the value of the
1901:FreeRTOS/tasks.c **** 						item at the head of the delayed list.  This is the time
1902:FreeRTOS/tasks.c **** 						at which the task at the head of the delayed list must
1903:FreeRTOS/tasks.c **** 						be removed from the Blocked state. */
1904:FreeRTOS/tasks.c **** 						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2333              		.loc 1 1904 0
 2334 0084 354B     		ldr	r3, .L179+8	@ tmp168,
 2335 0086 1B68     		ldr	r3, [r3]	@ D.6541, pxDelayedTaskList
 2336 0088 DB68     		ldr	r3, [r3, #12]	@ D.6543, _24->xListEnd.pxNext
 2337 008a DB68     		ldr	r3, [r3, #12]	@ tmp169, _25->pvOwner
 2338 008c BB60     		str	r3, [r7, #8]	@ tmp169, pxTCB
1905:FreeRTOS/tasks.c **** 						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2339              		.loc 1 1905 0
 2340 008e BB68     		ldr	r3, [r7, #8]	@ tmp170, pxTCB
 2341 0090 5B68     		ldr	r3, [r3, #4]	@ tmp171, pxTCB_26->xGenericListItem.xItemValue
 2342 0092 7B60     		str	r3, [r7, #4]	@ tmp171, xItemValue
1906:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 76


1907:FreeRTOS/tasks.c **** 						if( xConstTickCount < xItemValue )
 2343              		.loc 1 1907 0
 2344 0094 3A69     		ldr	r2, [r7, #16]	@ tmp172, xConstTickCount
 2345 0096 7B68     		ldr	r3, [r7, #4]	@ tmp173, xItemValue
 2346 0098 9A42     		cmp	r2, r3	@ tmp172, tmp173
 2347 009a 03D2     		bcs	.L171	@,
1908:FreeRTOS/tasks.c **** 						{
1909:FreeRTOS/tasks.c **** 							/* It is not time to unblock this item yet, but the
1910:FreeRTOS/tasks.c **** 							item value is the time at which the task at the head
1911:FreeRTOS/tasks.c **** 							of the blocked list must be removed from the Blocked
1912:FreeRTOS/tasks.c **** 							state -	so record the item value in
1913:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime. */
1914:FreeRTOS/tasks.c **** 							xNextTaskUnblockTime = xItemValue;
 2348              		.loc 1 1914 0
 2349 009c 324A     		ldr	r2, .L179+20	@ tmp174,
 2350 009e 7B68     		ldr	r3, [r7, #4]	@ tmp175, xItemValue
 2351 00a0 1360     		str	r3, [r2]	@ tmp175, xNextTaskUnblockTime
1915:FreeRTOS/tasks.c **** 							break;
 2352              		.loc 1 1915 0
 2353 00a2 30E0     		b	.L167	@
 2354              	.L171:
1916:FreeRTOS/tasks.c **** 						}
1917:FreeRTOS/tasks.c **** 						else
1918:FreeRTOS/tasks.c **** 						{
1919:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1920:FreeRTOS/tasks.c **** 						}
1921:FreeRTOS/tasks.c **** 
1922:FreeRTOS/tasks.c **** 						/* It is time to remove the item from the Blocked state. */
1923:FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 2355              		.loc 1 1923 0
 2356 00a4 BB68     		ldr	r3, [r7, #8]	@ tmp176, pxTCB
 2357 00a6 0433     		adds	r3, r3, #4	@ D.6544, tmp176,
 2358 00a8 1846     		mov	r0, r3	@, D.6544
 2359 00aa FFF7FEFF 		bl	uxListRemove	@
1924:FreeRTOS/tasks.c **** 
1925:FreeRTOS/tasks.c **** 						/* Is the task waiting on an event also?  If so remove
1926:FreeRTOS/tasks.c **** 						it from the event list. */
1927:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2360              		.loc 1 1927 0
 2361 00ae BB68     		ldr	r3, [r7, #8]	@ tmp177, pxTCB
 2362 00b0 9B6A     		ldr	r3, [r3, #40]	@ D.6545, pxTCB_26->xEventListItem.pvContainer
 2363 00b2 002B     		cmp	r3, #0	@ D.6545,
 2364 00b4 04D0     		beq	.L172	@,
1928:FreeRTOS/tasks.c **** 						{
1929:FreeRTOS/tasks.c **** 							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2365              		.loc 1 1929 0
 2366 00b6 BB68     		ldr	r3, [r7, #8]	@ tmp178, pxTCB
 2367 00b8 1833     		adds	r3, r3, #24	@ D.6544, tmp178,
 2368 00ba 1846     		mov	r0, r3	@, D.6544
 2369 00bc FFF7FEFF 		bl	uxListRemove	@
 2370              	.L172:
1930:FreeRTOS/tasks.c **** 						}
1931:FreeRTOS/tasks.c **** 						else
1932:FreeRTOS/tasks.c **** 						{
1933:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1934:FreeRTOS/tasks.c **** 						}
1935:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 77


1936:FreeRTOS/tasks.c **** 						/* Place the unblocked task into the appropriate ready
1937:FreeRTOS/tasks.c **** 						list. */
1938:FreeRTOS/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 2371              		.loc 1 1938 0
 2372 00c0 BB68     		ldr	r3, [r7, #8]	@ tmp179, pxTCB
 2373 00c2 DB6A     		ldr	r3, [r3, #44]	@ D.6540, pxTCB_26->uxPriority
 2374 00c4 1A46     		mov	r2, r3	@ D.6546, D.6540
 2375 00c6 0123     		movs	r3, #1	@ tmp180,
 2376 00c8 03FA02F2 		lsl	r2, r3, r2	@ D.6540, tmp180, D.6546
 2377 00cc 274B     		ldr	r3, .L179+24	@ tmp181,
 2378 00ce 1B68     		ldr	r3, [r3]	@ D.6540, uxTopReadyPriority
 2379 00d0 1343     		orrs	r3, r3, r2	@, D.6540, D.6540, D.6540
 2380 00d2 264A     		ldr	r2, .L179+24	@ tmp182,
 2381 00d4 1360     		str	r3, [r2]	@ D.6540, uxTopReadyPriority
 2382 00d6 BB68     		ldr	r3, [r7, #8]	@ tmp183, pxTCB
 2383 00d8 DA6A     		ldr	r2, [r3, #44]	@ D.6540, pxTCB_26->uxPriority
 2384 00da 1346     		mov	r3, r2	@ tmp184, D.6540
 2385 00dc 9B00     		lsls	r3, r3, #2	@ tmp184, tmp184,
 2386 00de 1344     		add	r3, r3, r2	@ tmp184, D.6540
 2387 00e0 9B00     		lsls	r3, r3, #2	@ tmp185, tmp184,
 2388 00e2 234A     		ldr	r2, .L179+28	@ tmp186,
 2389 00e4 1A44     		add	r2, r2, r3	@ D.6541, tmp184
 2390 00e6 BB68     		ldr	r3, [r7, #8]	@ tmp187, pxTCB
 2391 00e8 0433     		adds	r3, r3, #4	@ D.6544, tmp187,
 2392 00ea 1046     		mov	r0, r2	@, D.6541
 2393 00ec 1946     		mov	r1, r3	@, D.6544
 2394 00ee FFF7FEFF 		bl	vListInsertEnd	@
1939:FreeRTOS/tasks.c **** 
1940:FreeRTOS/tasks.c **** 						/* A task being unblocked cannot cause an immediate
1941:FreeRTOS/tasks.c **** 						context switch if preemption is turned off. */
1942:FreeRTOS/tasks.c **** 						#if (  configUSE_PREEMPTION == 1 )
1943:FreeRTOS/tasks.c **** 						{
1944:FreeRTOS/tasks.c **** 							/* Preemption is on, but a context switch should
1945:FreeRTOS/tasks.c **** 							only be performed if the unblocked task has a
1946:FreeRTOS/tasks.c **** 							priority that is equal to or higher than the
1947:FreeRTOS/tasks.c **** 							currently executing task. */
1948:FreeRTOS/tasks.c **** 							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2395              		.loc 1 1948 0
 2396 00f2 BB68     		ldr	r3, [r7, #8]	@ tmp188, pxTCB
 2397 00f4 DA6A     		ldr	r2, [r3, #44]	@ D.6540, pxTCB_26->uxPriority
 2398 00f6 1F4B     		ldr	r3, .L179+32	@ tmp189,
 2399 00f8 1B68     		ldr	r3, [r3]	@ D.6547, pxCurrentTCB
 2400 00fa DB6A     		ldr	r3, [r3, #44]	@ D.6540, _40->uxPriority
 2401 00fc 9A42     		cmp	r2, r3	@ D.6540, D.6540
 2402 00fe 01D3     		bcc	.L173	@,
1949:FreeRTOS/tasks.c **** 							{
1950:FreeRTOS/tasks.c **** 								xSwitchRequired = pdTRUE;
 2403              		.loc 1 1950 0
 2404 0100 0123     		movs	r3, #1	@ tmp190,
 2405 0102 7B61     		str	r3, [r7, #20]	@ tmp190, xSwitchRequired
 2406              	.L173:
1951:FreeRTOS/tasks.c **** 							}
1952:FreeRTOS/tasks.c **** 							else
1953:FreeRTOS/tasks.c **** 							{
1954:FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
1955:FreeRTOS/tasks.c **** 							}
1956:FreeRTOS/tasks.c **** 						}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 78


1957:FreeRTOS/tasks.c **** 						#endif /* configUSE_PREEMPTION */
1958:FreeRTOS/tasks.c **** 					}
1959:FreeRTOS/tasks.c **** 				}
 2407              		.loc 1 1959 0
 2408 0104 AFE7     		b	.L174	@
 2409              	.L167:
 2410              	.LBE8:
1960:FreeRTOS/tasks.c **** 			}
1961:FreeRTOS/tasks.c **** 		}
1962:FreeRTOS/tasks.c **** 
1963:FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
1964:FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
1965:FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
1966:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
1967:FreeRTOS/tasks.c **** 		{
1968:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseT_t )
 2411              		.loc 1 1968 0
 2412 0106 1B4B     		ldr	r3, .L179+32	@ tmp191,
 2413 0108 1B68     		ldr	r3, [r3]	@ D.6547, pxCurrentTCB
 2414 010a DA6A     		ldr	r2, [r3, #44]	@ D.6540, _43->uxPriority
 2415 010c 1849     		ldr	r1, .L179+28	@ tmp192,
 2416 010e 1346     		mov	r3, r2	@ tmp193, D.6540
 2417 0110 9B00     		lsls	r3, r3, #2	@ tmp193, tmp193,
 2418 0112 1344     		add	r3, r3, r2	@ tmp193, D.6540
 2419 0114 9B00     		lsls	r3, r3, #2	@ tmp194, tmp193,
 2420 0116 0B44     		add	r3, r3, r1	@ tmp195, tmp192
 2421 0118 1B68     		ldr	r3, [r3]	@ D.6540, pxReadyTasksLists[_44].uxNumberOfItems
 2422 011a 012B     		cmp	r3, #1	@ D.6540,
 2423 011c 01D9     		bls	.L175	@,
1969:FreeRTOS/tasks.c **** 			{
1970:FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
 2424              		.loc 1 1970 0
 2425 011e 0123     		movs	r3, #1	@ tmp196,
 2426 0120 7B61     		str	r3, [r7, #20]	@ tmp196, xSwitchRequired
 2427              	.L175:
1971:FreeRTOS/tasks.c **** 			}
1972:FreeRTOS/tasks.c **** 			else
1973:FreeRTOS/tasks.c **** 			{
1974:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1975:FreeRTOS/tasks.c **** 			}
1976:FreeRTOS/tasks.c **** 		}
1977:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
1978:FreeRTOS/tasks.c **** 
1979:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1980:FreeRTOS/tasks.c **** 		{
1981:FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
1982:FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
1983:FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseT_t ) 0U )
 2428              		.loc 1 1983 0
 2429 0122 154B     		ldr	r3, .L179+36	@ tmp197,
 2430 0124 1B68     		ldr	r3, [r3]	@ D.6540, uxPendedTicks
 2431 0126 002B     		cmp	r3, #0	@ D.6540,
 2432 0128 09D1     		bne	.L176	@,
1984:FreeRTOS/tasks.c **** 			{
1985:FreeRTOS/tasks.c **** 				vApplicationTickHook();
 2433              		.loc 1 1985 0
 2434 012a FFF7FEFF 		bl	vApplicationTickHook	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 79


 2435 012e 06E0     		b	.L176	@
 2436              	.L163:
1986:FreeRTOS/tasks.c **** 			}
1987:FreeRTOS/tasks.c **** 			else
1988:FreeRTOS/tasks.c **** 			{
1989:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1990:FreeRTOS/tasks.c **** 			}
1991:FreeRTOS/tasks.c **** 		}
1992:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
1993:FreeRTOS/tasks.c **** 	}
1994:FreeRTOS/tasks.c **** 	else
1995:FreeRTOS/tasks.c **** 	{
1996:FreeRTOS/tasks.c **** 		++uxPendedTicks;
 2437              		.loc 1 1996 0
 2438 0130 114B     		ldr	r3, .L179+36	@ tmp198,
 2439 0132 1B68     		ldr	r3, [r3]	@ D.6540, uxPendedTicks
 2440 0134 0133     		adds	r3, r3, #1	@ D.6540, D.6540,
 2441 0136 104A     		ldr	r2, .L179+36	@ tmp199,
 2442 0138 1360     		str	r3, [r2]	@ D.6540, uxPendedTicks
1997:FreeRTOS/tasks.c **** 
1998:FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1999:FreeRTOS/tasks.c **** 		scheduler is locked. */
2000:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2001:FreeRTOS/tasks.c **** 		{
2002:FreeRTOS/tasks.c **** 			vApplicationTickHook();
 2443              		.loc 1 2002 0
 2444 013a FFF7FEFF 		bl	vApplicationTickHook	@
 2445              	.L176:
2003:FreeRTOS/tasks.c **** 		}
2004:FreeRTOS/tasks.c **** 		#endif
2005:FreeRTOS/tasks.c **** 	}
2006:FreeRTOS/tasks.c **** 
2007:FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2008:FreeRTOS/tasks.c **** 	{
2009:FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
 2446              		.loc 1 2009 0
 2447 013e 0F4B     		ldr	r3, .L179+40	@ tmp200,
 2448 0140 1B68     		ldr	r3, [r3]	@ D.6542, xYieldPending
 2449 0142 002B     		cmp	r3, #0	@ D.6542,
 2450 0144 01D0     		beq	.L177	@,
2010:FreeRTOS/tasks.c **** 		{
2011:FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
 2451              		.loc 1 2011 0
 2452 0146 0123     		movs	r3, #1	@ tmp201,
 2453 0148 7B61     		str	r3, [r7, #20]	@ tmp201, xSwitchRequired
 2454              	.L177:
2012:FreeRTOS/tasks.c **** 		}
2013:FreeRTOS/tasks.c **** 		else
2014:FreeRTOS/tasks.c **** 		{
2015:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2016:FreeRTOS/tasks.c **** 		}
2017:FreeRTOS/tasks.c **** 	}
2018:FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2019:FreeRTOS/tasks.c **** 
2020:FreeRTOS/tasks.c **** 	return xSwitchRequired;
 2455              		.loc 1 2020 0
 2456 014a 7B69     		ldr	r3, [r7, #20]	@ D.6548, xSwitchRequired
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 80


2021:FreeRTOS/tasks.c **** }
 2457              		.loc 1 2021 0
 2458 014c 1846     		mov	r0, r3	@, <retval>
 2459 014e 1837     		adds	r7, r7, #24	@,,
 2460              		.cfi_def_cfa_offset 8
 2461 0150 BD46     		mov	sp, r7	@,
 2462              		.cfi_def_cfa_register 13
 2463              		@ sp needed	@
 2464 0152 80BD     		pop	{r7, pc}	@
 2465              	.L180:
 2466              		.align	2
 2467              	.L179:
 2468 0154 00000000 		.word	uxSchedulerSuspended
 2469 0158 00000000 		.word	xTickCount
 2470 015c 00000000 		.word	pxDelayedTaskList
 2471 0160 00000000 		.word	pxOverflowDelayedTaskList
 2472 0164 00000000 		.word	xNumOfOverflows
 2473 0168 00000000 		.word	xNextTaskUnblockTime
 2474 016c 00000000 		.word	uxTopReadyPriority
 2475 0170 00000000 		.word	pxReadyTasksLists
 2476 0174 00000000 		.word	pxCurrentTCB
 2477 0178 00000000 		.word	uxPendedTicks
 2478 017c 00000000 		.word	xYieldPending
 2479              		.cfi_endproc
 2480              	.LFE19:
 2481              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2482              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2483              		.align	2
 2484              		.global	vTaskSwitchContext
 2485              		.thumb
 2486              		.thumb_func
 2487              		.type	vTaskSwitchContext, %function
 2488              	vTaskSwitchContext:
 2489              	.LFB20:
2022:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2023:FreeRTOS/tasks.c **** 
2024:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2025:FreeRTOS/tasks.c **** 
2026:FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2027:FreeRTOS/tasks.c **** 	{
2028:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2029:FreeRTOS/tasks.c **** 
2030:FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2031:FreeRTOS/tasks.c **** 		getting set. */
2032:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2033:FreeRTOS/tasks.c **** 		{
2034:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2035:FreeRTOS/tasks.c **** 		}
2036:FreeRTOS/tasks.c **** 		else
2037:FreeRTOS/tasks.c **** 		{
2038:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2039:FreeRTOS/tasks.c **** 		}
2040:FreeRTOS/tasks.c **** 
2041:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2042:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2043:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2044:FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 81


2045:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2046:FreeRTOS/tasks.c **** 	}
2047:FreeRTOS/tasks.c **** 
2048:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2049:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2050:FreeRTOS/tasks.c **** 
2051:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2052:FreeRTOS/tasks.c **** 
2053:FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2054:FreeRTOS/tasks.c **** 	{
2055:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2056:FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2057:FreeRTOS/tasks.c **** 
2058:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2059:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2060:FreeRTOS/tasks.c **** 		{
2061:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2062:FreeRTOS/tasks.c **** 		}
2063:FreeRTOS/tasks.c **** 		else
2064:FreeRTOS/tasks.c **** 		{
2065:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2066:FreeRTOS/tasks.c **** 		}
2067:FreeRTOS/tasks.c **** 
2068:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2069:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2070:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2071:FreeRTOS/tasks.c **** 		{
2072:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2073:FreeRTOS/tasks.c **** 		}
2074:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2075:FreeRTOS/tasks.c **** 
2076:FreeRTOS/tasks.c **** 		return xReturn;
2077:FreeRTOS/tasks.c **** 	}
2078:FreeRTOS/tasks.c **** 
2079:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2080:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2081:FreeRTOS/tasks.c **** 
2082:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2083:FreeRTOS/tasks.c **** 
2084:FreeRTOS/tasks.c **** 	BaseT_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2085:FreeRTOS/tasks.c **** 	{
2086:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2087:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
2088:FreeRTOS/tasks.c **** 
2089:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2090:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2091:FreeRTOS/tasks.c **** 		{
2092:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2093:FreeRTOS/tasks.c **** 		}
2094:FreeRTOS/tasks.c **** 		else
2095:FreeRTOS/tasks.c **** 		{
2096:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2097:FreeRTOS/tasks.c **** 		}
2098:FreeRTOS/tasks.c **** 
2099:FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2100:FreeRTOS/tasks.c **** 		{
2101:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 82


2102:FreeRTOS/tasks.c **** 		}
2103:FreeRTOS/tasks.c **** 		else
2104:FreeRTOS/tasks.c **** 		{
2105:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
2106:FreeRTOS/tasks.c **** 		}
2107:FreeRTOS/tasks.c **** 
2108:FreeRTOS/tasks.c **** 		return xReturn;
2109:FreeRTOS/tasks.c **** 	}
2110:FreeRTOS/tasks.c **** 
2111:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2112:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2113:FreeRTOS/tasks.c **** 
2114:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2115:FreeRTOS/tasks.c **** {
 2490              		.loc 1 2115 0
 2491              		.cfi_startproc
 2492              		@ args = 0, pretend = 0, frame = 16
 2493              		@ frame_needed = 1, uses_anonymous_args = 0
 2494 0000 80B5     		push	{r7, lr}	@
 2495              		.cfi_def_cfa_offset 8
 2496              		.cfi_offset 7, -8
 2497              		.cfi_offset 14, -4
 2498 0002 84B0     		sub	sp, sp, #16	@,,
 2499              		.cfi_def_cfa_offset 24
 2500 0004 00AF     		add	r7, sp, #0	@,,
 2501              		.cfi_def_cfa_register 7
2116:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseT_t ) pdFALSE )
 2502              		.loc 1 2116 0
 2503 0006 214B     		ldr	r3, .L188	@ tmp124,
 2504 0008 1B68     		ldr	r3, [r3]	@ D.6549, uxSchedulerSuspended
 2505 000a 002B     		cmp	r3, #0	@ D.6549,
 2506 000c 03D0     		beq	.L182	@,
2117:FreeRTOS/tasks.c **** 	{
2118:FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2119:FreeRTOS/tasks.c **** 		switch. */
2120:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2507              		.loc 1 2120 0
 2508 000e 204B     		ldr	r3, .L188+4	@ tmp125,
 2509 0010 0122     		movs	r2, #1	@ tmp126,
 2510 0012 1A60     		str	r2, [r3]	@ tmp126, xYieldPending
 2511 0014 37E0     		b	.L181	@
 2512              	.L182:
2121:FreeRTOS/tasks.c **** 	}
2122:FreeRTOS/tasks.c **** 	else
2123:FreeRTOS/tasks.c **** 	{
2124:FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
 2513              		.loc 1 2124 0
 2514 0016 1E4B     		ldr	r3, .L188+4	@ tmp127,
 2515 0018 0022     		movs	r2, #0	@ tmp128,
 2516 001a 1A60     		str	r2, [r3]	@ tmp128, xYieldPending
 2517              	.LBB10:
2125:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2126:FreeRTOS/tasks.c **** 
2127:FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2128:FreeRTOS/tasks.c **** 		{
2129:FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2130:FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 83


2131:FreeRTOS/tasks.c **** 				#else
2132:FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2133:FreeRTOS/tasks.c **** 				#endif
2134:FreeRTOS/tasks.c **** 
2135:FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2136:FreeRTOS/tasks.c **** 				accumulated	time so far.  The time the task started running was
2137:FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2138:FreeRTOS/tasks.c **** 				protection here	so count values are only valid until the timer
2139:FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2140:FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2141:FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2142:FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2143:FreeRTOS/tasks.c **** 				{
2144:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2145:FreeRTOS/tasks.c **** 				}
2146:FreeRTOS/tasks.c **** 				else
2147:FreeRTOS/tasks.c **** 				{
2148:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2149:FreeRTOS/tasks.c **** 				}
2150:FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2151:FreeRTOS/tasks.c **** 		}
2152:FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2153:FreeRTOS/tasks.c **** 
2154:FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2155:FreeRTOS/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
2156:FreeRTOS/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
2157:FreeRTOS/tasks.c **** 
2158:FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2159:FreeRTOS/tasks.c **** 		optimised asm code. */
2160:FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
 2518              		.loc 1 2160 0
 2519 001c 1D4B     		ldr	r3, .L188+8	@ tmp129,
 2520 001e 1B68     		ldr	r3, [r3]	@ D.6549, uxTopReadyPriority
 2521 0020 7B60     		str	r3, [r7, #4]	@ D.6549, ulBitmap
 2522              	.LBB11:
 2523              	.LBB12:
 2524              		.file 2 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS V8.1.2 - Copyright (C) 2014 Real Time Engineers Ltd.
   3:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   5:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
   7:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
   8:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
   9:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  10:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  11:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    platform software that has become a de facto standard.             *
  12:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  13:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly and support the FreeRTOS         *
  14:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    project by purchasing a FreeRTOS tutorial book, reference          *
  15:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    manual, or both from: http://www.FreeRTOS.org/Documentation        *
  16:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  17:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Thank you!                                                         *
  18:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  19:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  20:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 84


  21:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
  22:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  23:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  24:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  25:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  26:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  27:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  28:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  29:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  30:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  31:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  32:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  33:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  34:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available from the following
  35:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  36:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  37:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  38:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  39:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  40:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  41:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  42:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    not run, what could be wrong?"                                     *
  43:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  44:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  45:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****      *                                                                       *
  46:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     ***************************************************************************
  47:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  48:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org - Documentation, books, training, latest versions,
  49:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     license and Real Time Engineers Ltd. contact details.
  50:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  51:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  52:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  53:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  54:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  55:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd license FreeRTOS to High
  56:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     Integrity Systems to sell under the OpenRTOS brand.  Low cost OpenRTOS
  57:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and middleware.
  58:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  60:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  61:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  62:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  63:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  64:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** */
  65:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  66:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  68:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  69:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  70:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  71:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  72:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
  73:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  74:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  75:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  76:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  77:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 85


  78:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  79:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *
  80:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  81:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  82:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h ****  */
  83:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  84:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  85:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  86:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  87:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  88:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  89:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  90:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  91:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  92:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
  93:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  94:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackT_t;
  95:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  96:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseT_t;
  97:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  98:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseT_t;
  99:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 100:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 101:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 102:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 103:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #else
 104:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 105:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickT_t;
 106:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 108:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 109:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 110:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 111:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 112:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 113:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 114:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 115:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 116:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 117:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 118:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortYield( void );
 119:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 120:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 121:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD()					vPortYield()
 122:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = port
 123:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 124:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 125:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 126:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
 127:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 128:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 129:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern uint32_t ulPortSetInterruptMask( void );
 130:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortClearInterruptMask( uint32_t ulNewMaskValue );
 131:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
 132:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
 133:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
 134:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortClearInterruptMask(0)
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 86


 135:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 136:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 137:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 138:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 139:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 140:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 141:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 142:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 143:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 144:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 145:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 146:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 147:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 148:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 149:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 150:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 151:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 152:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 153:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 154:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 155:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 156:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #endif
 157:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 158:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 159:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 160:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 161:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 162:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	{
 163:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 164:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 
 165:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 2525              		.loc 2 165 0
 2526 0022 7B68     		ldr	r3, [r7, #4]	@ tmp131, ulBitmap
 2527              	@ 165 "FreeRTOS/portable/GCC/ARM_CM3/portmacro.h" 1
 2528 0024 B3FA83F3 		clz r3, r3	@ ucReturn, tmp131
 2529              	@ 0 "" 2
 2530              		.thumb
 2531 0028 FB70     		strb	r3, [r7, #3]	@ ucReturn, ucReturn
 166:FreeRTOS/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 2532              		.loc 2 166 0
 2533 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2	@ D.6555, ucReturn
 2534              	.LBE12:
 2535              	.LBE11:
 2536              		.loc 1 2160 0
 2537 002c C3F11F03 		rsb	r3, r3, #31	@ D.6550, D.6550,
 2538 0030 FB60     		str	r3, [r7, #12]	@ D.6550, uxTopPriority
 2539 0032 1949     		ldr	r1, .L188+12	@ tmp132,
 2540 0034 FA68     		ldr	r2, [r7, #12]	@ tmp133, uxTopPriority
 2541 0036 1346     		mov	r3, r2	@ tmp134, tmp133
 2542 0038 9B00     		lsls	r3, r3, #2	@ tmp134, tmp134,
 2543 003a 1344     		add	r3, r3, r2	@ tmp134, tmp133
 2544 003c 9B00     		lsls	r3, r3, #2	@ tmp135, tmp134,
 2545 003e 0B44     		add	r3, r3, r1	@ tmp136, tmp132
 2546 0040 1B68     		ldr	r3, [r3]	@ D.6549, pxReadyTasksLists[uxTopPriority_6].uxNumberOfItems
 2547 0042 002B     		cmp	r3, #0	@ D.6549,
 2548 0044 02D1     		bne	.L185	@,
 2549              		.loc 1 2160 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 87


 2550 0046 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2551              	.L186:
 2552 004a FEE7     		b	.L186	@
 2553              	.L185:
 2554              	.LBB13:
 2555              		.loc 1 2160 0 discriminator 2
 2556 004c FA68     		ldr	r2, [r7, #12]	@ tmp137, uxTopPriority
 2557 004e 1346     		mov	r3, r2	@ tmp138, tmp137
 2558 0050 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 2559 0052 1344     		add	r3, r3, r2	@ tmp138, tmp137
 2560 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 2561 0056 104A     		ldr	r2, .L188+12	@ tmp141,
 2562 0058 1344     		add	r3, r3, r2	@ tmp140, tmp141
 2563 005a BB60     		str	r3, [r7, #8]	@ tmp140, pxConstList
 2564 005c BB68     		ldr	r3, [r7, #8]	@ tmp142, pxConstList
 2565 005e 5B68     		ldr	r3, [r3, #4]	@ D.6551, pxConstList_8->pxIndex
 2566 0060 5A68     		ldr	r2, [r3, #4]	@ D.6552, _9->pxNext
 2567 0062 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxConstList
 2568 0064 5A60     		str	r2, [r3, #4]	@ D.6552, pxConstList_8->pxIndex
 2569 0066 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxConstList
 2570 0068 5A68     		ldr	r2, [r3, #4]	@ D.6551, pxConstList_8->pxIndex
 2571 006a BB68     		ldr	r3, [r7, #8]	@ tmp145, pxConstList
 2572 006c 0833     		adds	r3, r3, #8	@ D.6553, tmp145,
 2573 006e 9A42     		cmp	r2, r3	@ D.6551, D.6553
 2574 0070 04D1     		bne	.L187	@,
 2575              		.loc 1 2160 0 discriminator 3
 2576 0072 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxConstList
 2577 0074 5B68     		ldr	r3, [r3, #4]	@ D.6551, pxConstList_8->pxIndex
 2578 0076 5A68     		ldr	r2, [r3, #4]	@ D.6552, _13->pxNext
 2579 0078 BB68     		ldr	r3, [r7, #8]	@ tmp147, pxConstList
 2580 007a 5A60     		str	r2, [r3, #4]	@ D.6552, pxConstList_8->pxIndex
 2581              	.L187:
 2582              		.loc 1 2160 0 discriminator 5
 2583 007c BB68     		ldr	r3, [r7, #8]	@ tmp148, pxConstList
 2584 007e 5B68     		ldr	r3, [r3, #4]	@ D.6551, pxConstList_8->pxIndex
 2585 0080 DB68     		ldr	r3, [r3, #12]	@ D.6554, _15->pvOwner
 2586 0082 064A     		ldr	r2, .L188+16	@ tmp149,
 2587 0084 1360     		str	r3, [r2]	@ D.6554, pxCurrentTCB
 2588              	.L181:
 2589              	.LBE13:
 2590              	.LBE10:
2161:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2162:FreeRTOS/tasks.c **** 
2163:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2164:FreeRTOS/tasks.c **** 		{
2165:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2166:FreeRTOS/tasks.c **** 			structure specific to this task. */
2167:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2168:FreeRTOS/tasks.c **** 		}
2169:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2170:FreeRTOS/tasks.c **** 	}
2171:FreeRTOS/tasks.c **** }
 2591              		.loc 1 2171 0 is_stmt 1
 2592 0086 1037     		adds	r7, r7, #16	@,,
 2593              		.cfi_def_cfa_offset 8
 2594 0088 BD46     		mov	sp, r7	@,
 2595              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 88


 2596              		@ sp needed	@
 2597 008a 80BD     		pop	{r7, pc}	@
 2598              	.L189:
 2599              		.align	2
 2600              	.L188:
 2601 008c 00000000 		.word	uxSchedulerSuspended
 2602 0090 00000000 		.word	xYieldPending
 2603 0094 00000000 		.word	uxTopReadyPriority
 2604 0098 00000000 		.word	pxReadyTasksLists
 2605 009c 00000000 		.word	pxCurrentTCB
 2606              		.cfi_endproc
 2607              	.LFE20:
 2608              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2609              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2610              		.align	2
 2611              		.global	vTaskPlaceOnEventList
 2612              		.thumb
 2613              		.thumb_func
 2614              		.type	vTaskPlaceOnEventList, %function
 2615              	vTaskPlaceOnEventList:
 2616              	.LFB21:
2172:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2173:FreeRTOS/tasks.c **** 
2174:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickT_t xTicksToWait )
2175:FreeRTOS/tasks.c **** {
 2617              		.loc 1 2175 0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 16
 2620              		@ frame_needed = 1, uses_anonymous_args = 0
 2621 0000 80B5     		push	{r7, lr}	@
 2622              		.cfi_def_cfa_offset 8
 2623              		.cfi_offset 7, -8
 2624              		.cfi_offset 14, -4
 2625 0002 84B0     		sub	sp, sp, #16	@,,
 2626              		.cfi_def_cfa_offset 24
 2627 0004 00AF     		add	r7, sp, #0	@,,
 2628              		.cfi_def_cfa_register 7
 2629 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
 2630 0008 3960     		str	r1, [r7]	@ xTicksToWait, xTicksToWait
2176:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2177:FreeRTOS/tasks.c **** 
2178:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2631              		.loc 1 2178 0
 2632 000a 7B68     		ldr	r3, [r7, #4]	@ tmp125, pxEventList
 2633 000c 002B     		cmp	r3, #0	@ tmp125,
 2634 000e 02D1     		bne	.L191	@,
 2635              		.loc 1 2178 0 is_stmt 0 discriminator 1
 2636 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2637              	.L192:
 2638 0014 FEE7     		b	.L192	@
 2639              	.L191:
2179:FreeRTOS/tasks.c **** 
2180:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2181:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2182:FreeRTOS/tasks.c **** 
2183:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2184:FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 89


2185:FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2186:FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2187:FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2640              		.loc 1 2187 0 is_stmt 1
 2641 0016 194B     		ldr	r3, .L196	@ tmp126,
 2642 0018 1B68     		ldr	r3, [r3]	@ D.6557, pxCurrentTCB
 2643 001a 1833     		adds	r3, r3, #24	@ D.6558, D.6557,
 2644 001c 7868     		ldr	r0, [r7, #4]	@, pxEventList
 2645 001e 1946     		mov	r1, r3	@, D.6558
 2646 0020 FFF7FEFF 		bl	vListInsert	@
2188:FreeRTOS/tasks.c **** 
2189:FreeRTOS/tasks.c **** 	/* The task must be removed from from the ready list before it is added to
2190:FreeRTOS/tasks.c **** 	the blocked list as the same list item is used for both lists.  Exclusive
2191:FreeRTOS/tasks.c **** 	access to the ready lists guaranteed because the scheduler is locked. */
2192:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 2647              		.loc 1 2192 0
 2648 0024 154B     		ldr	r3, .L196	@ tmp127,
 2649 0026 1B68     		ldr	r3, [r3]	@ D.6557, pxCurrentTCB
 2650 0028 0433     		adds	r3, r3, #4	@ D.6558, D.6557,
 2651 002a 1846     		mov	r0, r3	@, D.6558
 2652 002c FFF7FEFF 		bl	uxListRemove	@
 2653 0030 0346     		mov	r3, r0	@ D.6559,
 2654 0032 002B     		cmp	r3, #0	@ D.6559,
 2655 0034 0BD1     		bne	.L193	@,
2193:FreeRTOS/tasks.c **** 	{
2194:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2195:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2196:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2656              		.loc 1 2196 0
 2657 0036 114B     		ldr	r3, .L196	@ tmp128,
 2658 0038 1B68     		ldr	r3, [r3]	@ D.6557, pxCurrentTCB
 2659 003a DB6A     		ldr	r3, [r3, #44]	@ D.6559, _7->uxPriority
 2660 003c 1A46     		mov	r2, r3	@ D.6560, D.6559
 2661 003e 0123     		movs	r3, #1	@ tmp129,
 2662 0040 9340     		lsls	r3, r3, r2	@ D.6559, tmp129, D.6560
 2663 0042 DA43     		mvns	r2, r3	@ D.6559, D.6559
 2664 0044 0E4B     		ldr	r3, .L196+4	@ tmp130,
 2665 0046 1B68     		ldr	r3, [r3]	@ D.6559, uxTopReadyPriority
 2666 0048 1340     		ands	r3, r3, r2	@, D.6559, D.6559, D.6559
 2667 004a 0D4A     		ldr	r2, .L196+4	@ tmp131,
 2668 004c 1360     		str	r3, [r2]	@ D.6559, uxTopReadyPriority
 2669              	.L193:
2197:FreeRTOS/tasks.c **** 	}
2198:FreeRTOS/tasks.c **** 	else
2199:FreeRTOS/tasks.c **** 	{
2200:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2201:FreeRTOS/tasks.c **** 	}
2202:FreeRTOS/tasks.c **** 
2203:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2204:FreeRTOS/tasks.c **** 	{
2205:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2670              		.loc 1 2205 0
 2671 004e 3B68     		ldr	r3, [r7]	@ tmp132, xTicksToWait
 2672 0050 B3F1FF3F 		cmp	r3, #-1	@ tmp132,
 2673 0054 07D1     		bne	.L194	@,
2206:FreeRTOS/tasks.c **** 		{
2207:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 90


2208:FreeRTOS/tasks.c **** 			list to ensure the task is not woken by a timing event.  It will
2209:FreeRTOS/tasks.c **** 			block indefinitely. */
2210:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2674              		.loc 1 2210 0
 2675 0056 094B     		ldr	r3, .L196	@ tmp133,
 2676 0058 1B68     		ldr	r3, [r3]	@ D.6557, pxCurrentTCB
 2677 005a 0433     		adds	r3, r3, #4	@ D.6558, D.6557,
 2678 005c 0948     		ldr	r0, .L196+8	@,
 2679 005e 1946     		mov	r1, r3	@, D.6558
 2680 0060 FFF7FEFF 		bl	vListInsertEnd	@
 2681 0064 07E0     		b	.L190	@
 2682              	.L194:
2211:FreeRTOS/tasks.c **** 		}
2212:FreeRTOS/tasks.c **** 		else
2213:FreeRTOS/tasks.c **** 		{
2214:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2215:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2216:FreeRTOS/tasks.c **** 			scheduler will handle it. */
2217:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2683              		.loc 1 2217 0
 2684 0066 084B     		ldr	r3, .L196+12	@ tmp134,
 2685 0068 1A68     		ldr	r2, [r3]	@ D.6559, xTickCount
 2686 006a 3B68     		ldr	r3, [r7]	@ tmp136, xTicksToWait
 2687 006c 1344     		add	r3, r3, r2	@ tmp135, D.6559
 2688 006e FB60     		str	r3, [r7, #12]	@ tmp135, xTimeToWake
2218:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2689              		.loc 1 2218 0
 2690 0070 F868     		ldr	r0, [r7, #12]	@, xTimeToWake
 2691 0072 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2692              	.L190:
2219:FreeRTOS/tasks.c **** 		}
2220:FreeRTOS/tasks.c **** 	}
2221:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2222:FreeRTOS/tasks.c **** 	{
2223:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2224:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the scheduler
2225:FreeRTOS/tasks.c **** 			will handle it. */
2226:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2227:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2228:FreeRTOS/tasks.c **** 	}
2229:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2230:FreeRTOS/tasks.c **** }
 2693              		.loc 1 2230 0
 2694 0076 1037     		adds	r7, r7, #16	@,,
 2695              		.cfi_def_cfa_offset 8
 2696 0078 BD46     		mov	sp, r7	@,
 2697              		.cfi_def_cfa_register 13
 2698              		@ sp needed	@
 2699 007a 80BD     		pop	{r7, pc}	@
 2700              	.L197:
 2701              		.align	2
 2702              	.L196:
 2703 007c 00000000 		.word	pxCurrentTCB
 2704 0080 00000000 		.word	uxTopReadyPriority
 2705 0084 00000000 		.word	xSuspendedTaskList
 2706 0088 00000000 		.word	xTickCount
 2707              		.cfi_endproc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 91


 2708              	.LFE21:
 2709              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2710              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2711              		.align	2
 2712              		.global	vTaskPlaceOnUnorderedEventList
 2713              		.thumb
 2714              		.thumb_func
 2715              		.type	vTaskPlaceOnUnorderedEventList, %function
 2716              	vTaskPlaceOnUnorderedEventList:
 2717              	.LFB22:
2231:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2232:FreeRTOS/tasks.c **** 
2233:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickT_t xItemValue, const TickT_t 
2234:FreeRTOS/tasks.c **** {
 2718              		.loc 1 2234 0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 24
 2721              		@ frame_needed = 1, uses_anonymous_args = 0
 2722 0000 80B5     		push	{r7, lr}	@
 2723              		.cfi_def_cfa_offset 8
 2724              		.cfi_offset 7, -8
 2725              		.cfi_offset 14, -4
 2726 0002 86B0     		sub	sp, sp, #24	@,,
 2727              		.cfi_def_cfa_offset 32
 2728 0004 00AF     		add	r7, sp, #0	@,,
 2729              		.cfi_def_cfa_register 7
 2730 0006 F860     		str	r0, [r7, #12]	@ pxEventList, pxEventList
 2731 0008 B960     		str	r1, [r7, #8]	@ xItemValue, xItemValue
 2732 000a 7A60     		str	r2, [r7, #4]	@ xTicksToWait, xTicksToWait
2235:FreeRTOS/tasks.c **** TickT_t xTimeToWake;
2236:FreeRTOS/tasks.c **** 
2237:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 2733              		.loc 1 2237 0
 2734 000c FB68     		ldr	r3, [r7, #12]	@ tmp128, pxEventList
 2735 000e 002B     		cmp	r3, #0	@ tmp128,
 2736 0010 02D1     		bne	.L199	@,
 2737              		.loc 1 2237 0 is_stmt 0 discriminator 1
 2738 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2739              	.L200:
 2740 0016 FEE7     		b	.L200	@
 2741              	.L199:
2238:FreeRTOS/tasks.c **** 
2239:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2240:FreeRTOS/tasks.c **** 	the event groups implementation. */
2241:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 2742              		.loc 1 2241 0 is_stmt 1
 2743 0018 1F4B     		ldr	r3, .L206	@ tmp129,
 2744 001a 1B68     		ldr	r3, [r3]	@ D.6561, uxSchedulerSuspended
 2745 001c 002B     		cmp	r3, #0	@ D.6561,
 2746 001e 02D1     		bne	.L201	@,
 2747              		.loc 1 2241 0 is_stmt 0 discriminator 1
 2748 0020 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2749              	.L202:
 2750              		.loc 1 2241 0 discriminator 2
 2751 0024 FEE7     		b	.L202	@
 2752              	.L201:
2242:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 92


2243:FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2244:FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2245:FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2246:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2753              		.loc 1 2246 0 is_stmt 1
 2754 0026 1D4B     		ldr	r3, .L206+4	@ tmp130,
 2755 0028 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2756 002a BA68     		ldr	r2, [r7, #8]	@ tmp131, xItemValue
 2757 002c 42F00042 		orr	r2, r2, #-2147483648	@ D.6561, tmp131,
 2758 0030 9A61     		str	r2, [r3, #24]	@ D.6561, _3->xEventListItem.xItemValue
2247:FreeRTOS/tasks.c **** 
2248:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2249:FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2250:FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2251:FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2252:FreeRTOS/tasks.c **** 	the task level). */
2253:FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2759              		.loc 1 2253 0
 2760 0032 1A4B     		ldr	r3, .L206+4	@ tmp132,
 2761 0034 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2762 0036 1833     		adds	r3, r3, #24	@ D.6563, D.6562,
 2763 0038 F868     		ldr	r0, [r7, #12]	@, pxEventList
 2764 003a 1946     		mov	r1, r3	@, D.6563
 2765 003c FFF7FEFF 		bl	vListInsertEnd	@
2254:FreeRTOS/tasks.c **** 
2255:FreeRTOS/tasks.c **** 	/* The task must be removed from the ready list before it is added to the
2256:FreeRTOS/tasks.c **** 	blocked list.  Exclusive access can be assured to the ready list as the
2257:FreeRTOS/tasks.c **** 	scheduler is locked. */
2258:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 2766              		.loc 1 2258 0
 2767 0040 164B     		ldr	r3, .L206+4	@ tmp133,
 2768 0042 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2769 0044 0433     		adds	r3, r3, #4	@ D.6563, D.6562,
 2770 0046 1846     		mov	r0, r3	@, D.6563
 2771 0048 FFF7FEFF 		bl	uxListRemove	@
 2772 004c 0346     		mov	r3, r0	@ D.6561,
 2773 004e 002B     		cmp	r3, #0	@ D.6561,
 2774 0050 0BD1     		bne	.L203	@,
2259:FreeRTOS/tasks.c **** 	{
2260:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
2261:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
2262:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 2775              		.loc 1 2262 0
 2776 0052 124B     		ldr	r3, .L206+4	@ tmp134,
 2777 0054 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2778 0056 DB6A     		ldr	r3, [r3, #44]	@ D.6561, _11->uxPriority
 2779 0058 1A46     		mov	r2, r3	@ D.6564, D.6561
 2780 005a 0123     		movs	r3, #1	@ tmp135,
 2781 005c 9340     		lsls	r3, r3, r2	@ D.6561, tmp135, D.6564
 2782 005e DA43     		mvns	r2, r3	@ D.6561, D.6561
 2783 0060 0F4B     		ldr	r3, .L206+8	@ tmp136,
 2784 0062 1B68     		ldr	r3, [r3]	@ D.6561, uxTopReadyPriority
 2785 0064 1340     		ands	r3, r3, r2	@, D.6561, D.6561, D.6561
 2786 0066 0E4A     		ldr	r2, .L206+8	@ tmp137,
 2787 0068 1360     		str	r3, [r2]	@ D.6561, uxTopReadyPriority
 2788              	.L203:
2263:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 93


2264:FreeRTOS/tasks.c **** 	else
2265:FreeRTOS/tasks.c **** 	{
2266:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2267:FreeRTOS/tasks.c **** 	}
2268:FreeRTOS/tasks.c **** 
2269:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2270:FreeRTOS/tasks.c **** 	{
2271:FreeRTOS/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2789              		.loc 1 2271 0
 2790 006a 7B68     		ldr	r3, [r7, #4]	@ tmp138, xTicksToWait
 2791 006c B3F1FF3F 		cmp	r3, #-1	@ tmp138,
 2792 0070 07D1     		bne	.L204	@,
2272:FreeRTOS/tasks.c **** 		{
2273:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
2274:FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
2275:FreeRTOS/tasks.c **** 			indefinitely. */
2276:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 2793              		.loc 1 2276 0
 2794 0072 0A4B     		ldr	r3, .L206+4	@ tmp139,
 2795 0074 1B68     		ldr	r3, [r3]	@ D.6562, pxCurrentTCB
 2796 0076 0433     		adds	r3, r3, #4	@ D.6563, D.6562,
 2797 0078 0A48     		ldr	r0, .L206+12	@,
 2798 007a 1946     		mov	r1, r3	@, D.6563
 2799 007c FFF7FEFF 		bl	vListInsertEnd	@
 2800 0080 07E0     		b	.L198	@
 2801              	.L204:
2277:FreeRTOS/tasks.c **** 		}
2278:FreeRTOS/tasks.c **** 		else
2279:FreeRTOS/tasks.c **** 		{
2280:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
2281:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
2282:FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
2283:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2802              		.loc 1 2283 0
 2803 0082 094B     		ldr	r3, .L206+16	@ tmp140,
 2804 0084 1A68     		ldr	r2, [r3]	@ D.6561, xTickCount
 2805 0086 7B68     		ldr	r3, [r7, #4]	@ tmp142, xTicksToWait
 2806 0088 1344     		add	r3, r3, r2	@ tmp141, D.6561
 2807 008a 7B61     		str	r3, [r7, #20]	@ tmp141, xTimeToWake
2284:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2808              		.loc 1 2284 0
 2809 008c 7869     		ldr	r0, [r7, #20]	@, xTimeToWake
 2810 008e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList	@
 2811              	.L198:
2285:FreeRTOS/tasks.c **** 		}
2286:FreeRTOS/tasks.c **** 	}
2287:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
2288:FreeRTOS/tasks.c **** 	{
2289:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
2290:FreeRTOS/tasks.c **** 			not occur.  This may overflow but this doesn't matter, the kernel
2291:FreeRTOS/tasks.c **** 			will manage it correctly. */
2292:FreeRTOS/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
2293:FreeRTOS/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
2294:FreeRTOS/tasks.c **** 	}
2295:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2296:FreeRTOS/tasks.c **** }
 2812              		.loc 1 2296 0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 94


 2813 0092 1837     		adds	r7, r7, #24	@,,
 2814              		.cfi_def_cfa_offset 8
 2815 0094 BD46     		mov	sp, r7	@,
 2816              		.cfi_def_cfa_register 13
 2817              		@ sp needed	@
 2818 0096 80BD     		pop	{r7, pc}	@
 2819              	.L207:
 2820              		.align	2
 2821              	.L206:
 2822 0098 00000000 		.word	uxSchedulerSuspended
 2823 009c 00000000 		.word	pxCurrentTCB
 2824 00a0 00000000 		.word	uxTopReadyPriority
 2825 00a4 00000000 		.word	xSuspendedTaskList
 2826 00a8 00000000 		.word	xTickCount
 2827              		.cfi_endproc
 2828              	.LFE22:
 2829              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2830              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2831              		.align	2
 2832              		.global	xTaskRemoveFromEventList
 2833              		.thumb
 2834              		.thumb_func
 2835              		.type	xTaskRemoveFromEventList, %function
 2836              	xTaskRemoveFromEventList:
 2837              	.LFB23:
2297:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2298:FreeRTOS/tasks.c **** 
2299:FreeRTOS/tasks.c **** #if configUSE_TIMERS == 1
2300:FreeRTOS/tasks.c **** 
2301:FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickT_t xTicksToWait )
2302:FreeRTOS/tasks.c **** 	{
2303:FreeRTOS/tasks.c **** 	TickT_t xTimeToWake;
2304:FreeRTOS/tasks.c **** 
2305:FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2306:FreeRTOS/tasks.c **** 
2307:FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2308:FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2309:FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2310:FreeRTOS/tasks.c **** 		it should be called from a critical section. */
2311:FreeRTOS/tasks.c **** 
2312:FreeRTOS/tasks.c **** 
2313:FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2314:FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2315:FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2316:FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2317:FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2318:FreeRTOS/tasks.c **** 
2319:FreeRTOS/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
2320:FreeRTOS/tasks.c **** 		blocked list as the same list item is used for both lists.  This
2321:FreeRTOS/tasks.c **** 		function is called form a critical section. */
2322:FreeRTOS/tasks.c **** 		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
2323:FreeRTOS/tasks.c **** 		{
2324:FreeRTOS/tasks.c **** 			/* The current task must be in a ready list, so there is no need to
2325:FreeRTOS/tasks.c **** 			check, and the port reset macro can be called directly. */
2326:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
2327:FreeRTOS/tasks.c **** 		}
2328:FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 95


2329:FreeRTOS/tasks.c **** 		{
2330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2331:FreeRTOS/tasks.c **** 		}
2332:FreeRTOS/tasks.c **** 
2333:FreeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
2334:FreeRTOS/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
2335:FreeRTOS/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
2336:FreeRTOS/tasks.c **** 
2337:FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL();
2338:FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
2339:FreeRTOS/tasks.c **** 	}
2340:FreeRTOS/tasks.c **** 
2341:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2342:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2343:FreeRTOS/tasks.c **** 
2344:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2345:FreeRTOS/tasks.c **** {
 2838              		.loc 1 2345 0
 2839              		.cfi_startproc
 2840              		@ args = 0, pretend = 0, frame = 16
 2841              		@ frame_needed = 1, uses_anonymous_args = 0
 2842 0000 80B5     		push	{r7, lr}	@
 2843              		.cfi_def_cfa_offset 8
 2844              		.cfi_offset 7, -8
 2845              		.cfi_offset 14, -4
 2846 0002 84B0     		sub	sp, sp, #16	@,,
 2847              		.cfi_def_cfa_offset 24
 2848 0004 00AF     		add	r7, sp, #0	@,,
 2849              		.cfi_def_cfa_register 7
 2850 0006 7860     		str	r0, [r7, #4]	@ pxEventList, pxEventList
2346:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2347:FreeRTOS/tasks.c **** BaseT_t xReturn;
2348:FreeRTOS/tasks.c **** 
2349:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2350:FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2351:FreeRTOS/tasks.c **** 
2352:FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2353:FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2354:FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2355:FreeRTOS/tasks.c **** 
2356:FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2357:FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2358:FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2359:FreeRTOS/tasks.c **** 
2360:FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2361:FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2362:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2851              		.loc 1 2362 0
 2852 0008 7B68     		ldr	r3, [r7, #4]	@ tmp128, pxEventList
 2853 000a DB68     		ldr	r3, [r3, #12]	@ D.6565, pxEventList_2(D)->xListEnd.pxNext
 2854 000c DB68     		ldr	r3, [r3, #12]	@ tmp129, _3->pvOwner
 2855 000e BB60     		str	r3, [r7, #8]	@ tmp129, pxUnblockedTCB
2363:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2856              		.loc 1 2363 0
 2857 0010 BB68     		ldr	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
 2858 0012 002B     		cmp	r3, #0	@ tmp130,
 2859 0014 02D1     		bne	.L209	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 96


 2860              		.loc 1 2363 0 is_stmt 0 discriminator 1
 2861 0016 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2862              	.L210:
 2863 001a FEE7     		b	.L210	@
 2864              	.L209:
2364:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2865              		.loc 1 2364 0 is_stmt 1
 2866 001c BB68     		ldr	r3, [r7, #8]	@ tmp131, pxUnblockedTCB
 2867 001e 1833     		adds	r3, r3, #24	@ D.6566, tmp131,
 2868 0020 1846     		mov	r0, r3	@, D.6566
 2869 0022 FFF7FEFF 		bl	uxListRemove	@
2365:FreeRTOS/tasks.c **** 
2366:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
 2870              		.loc 1 2366 0
 2871 0026 1E4B     		ldr	r3, .L216	@ tmp132,
 2872 0028 1B68     		ldr	r3, [r3]	@ D.6567, uxSchedulerSuspended
 2873 002a 002B     		cmp	r3, #0	@ D.6567,
 2874 002c 1ED1     		bne	.L211	@,
2367:FreeRTOS/tasks.c **** 	{
2368:FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2875              		.loc 1 2368 0
 2876 002e BB68     		ldr	r3, [r7, #8]	@ tmp133, pxUnblockedTCB
 2877 0030 0433     		adds	r3, r3, #4	@ D.6566, tmp133,
 2878 0032 1846     		mov	r0, r3	@, D.6566
 2879 0034 FFF7FEFF 		bl	uxListRemove	@
2369:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2880              		.loc 1 2369 0
 2881 0038 BB68     		ldr	r3, [r7, #8]	@ tmp134, pxUnblockedTCB
 2882 003a DB6A     		ldr	r3, [r3, #44]	@ D.6567, pxUnblockedTCB_4->uxPriority
 2883 003c 1A46     		mov	r2, r3	@ D.6568, D.6567
 2884 003e 0123     		movs	r3, #1	@ tmp135,
 2885 0040 03FA02F2 		lsl	r2, r3, r2	@ D.6567, tmp135, D.6568
 2886 0044 174B     		ldr	r3, .L216+4	@ tmp136,
 2887 0046 1B68     		ldr	r3, [r3]	@ D.6567, uxTopReadyPriority
 2888 0048 1343     		orrs	r3, r3, r2	@, D.6567, D.6567, D.6567
 2889 004a 164A     		ldr	r2, .L216+4	@ tmp137,
 2890 004c 1360     		str	r3, [r2]	@ D.6567, uxTopReadyPriority
 2891 004e BB68     		ldr	r3, [r7, #8]	@ tmp138, pxUnblockedTCB
 2892 0050 DA6A     		ldr	r2, [r3, #44]	@ D.6567, pxUnblockedTCB_4->uxPriority
 2893 0052 1346     		mov	r3, r2	@ tmp139, D.6567
 2894 0054 9B00     		lsls	r3, r3, #2	@ tmp139, tmp139,
 2895 0056 1344     		add	r3, r3, r2	@ tmp139, D.6567
 2896 0058 9B00     		lsls	r3, r3, #2	@ tmp140, tmp139,
 2897 005a 134A     		ldr	r2, .L216+8	@ tmp141,
 2898 005c 1A44     		add	r2, r2, r3	@ D.6569, tmp139
 2899 005e BB68     		ldr	r3, [r7, #8]	@ tmp142, pxUnblockedTCB
 2900 0060 0433     		adds	r3, r3, #4	@ D.6566, tmp142,
 2901 0062 1046     		mov	r0, r2	@, D.6569
 2902 0064 1946     		mov	r1, r3	@, D.6566
 2903 0066 FFF7FEFF 		bl	vListInsertEnd	@
 2904 006a 05E0     		b	.L212	@
 2905              	.L211:
2370:FreeRTOS/tasks.c **** 	}
2371:FreeRTOS/tasks.c **** 	else
2372:FreeRTOS/tasks.c **** 	{
2373:FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2374:FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 97


2375:FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2906              		.loc 1 2375 0
 2907 006c BB68     		ldr	r3, [r7, #8]	@ tmp143, pxUnblockedTCB
 2908 006e 1833     		adds	r3, r3, #24	@ D.6566, tmp143,
 2909 0070 0E48     		ldr	r0, .L216+12	@,
 2910 0072 1946     		mov	r1, r3	@, D.6566
 2911 0074 FFF7FEFF 		bl	vListInsertEnd	@
 2912              	.L212:
2376:FreeRTOS/tasks.c **** 	}
2377:FreeRTOS/tasks.c **** 
2378:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2913              		.loc 1 2378 0
 2914 0078 BB68     		ldr	r3, [r7, #8]	@ tmp144, pxUnblockedTCB
 2915 007a DA6A     		ldr	r2, [r3, #44]	@ D.6567, pxUnblockedTCB_4->uxPriority
 2916 007c 0C4B     		ldr	r3, .L216+16	@ tmp145,
 2917 007e 1B68     		ldr	r3, [r3]	@ D.6570, pxCurrentTCB
 2918 0080 DB6A     		ldr	r3, [r3, #44]	@ D.6567, _18->uxPriority
 2919 0082 9A42     		cmp	r2, r3	@ D.6567, D.6567
 2920 0084 05D9     		bls	.L213	@,
2379:FreeRTOS/tasks.c **** 	{
2380:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2381:FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2382:FreeRTOS/tasks.c **** 		it should force a context switch now. */
2383:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 2921              		.loc 1 2383 0
 2922 0086 0123     		movs	r3, #1	@ tmp146,
 2923 0088 FB60     		str	r3, [r7, #12]	@ tmp146, xReturn
2384:FreeRTOS/tasks.c **** 
2385:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2386:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2387:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 2924              		.loc 1 2387 0
 2925 008a 0A4B     		ldr	r3, .L216+20	@ tmp147,
 2926 008c 0122     		movs	r2, #1	@ tmp148,
 2927 008e 1A60     		str	r2, [r3]	@ tmp148, xYieldPending
 2928 0090 01E0     		b	.L214	@
 2929              	.L213:
2388:FreeRTOS/tasks.c **** 	}
2389:FreeRTOS/tasks.c **** 	else
2390:FreeRTOS/tasks.c **** 	{
2391:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 2930              		.loc 1 2391 0
 2931 0092 0023     		movs	r3, #0	@ tmp149,
 2932 0094 FB60     		str	r3, [r7, #12]	@ tmp149, xReturn
 2933              	.L214:
2392:FreeRTOS/tasks.c **** 	}
2393:FreeRTOS/tasks.c **** 
2394:FreeRTOS/tasks.c **** 	return xReturn;
 2934              		.loc 1 2394 0
 2935 0096 FB68     		ldr	r3, [r7, #12]	@ D.6571, xReturn
2395:FreeRTOS/tasks.c **** }
 2936              		.loc 1 2395 0
 2937 0098 1846     		mov	r0, r3	@, <retval>
 2938 009a 1037     		adds	r7, r7, #16	@,,
 2939              		.cfi_def_cfa_offset 8
 2940 009c BD46     		mov	sp, r7	@,
 2941              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 98


 2942              		@ sp needed	@
 2943 009e 80BD     		pop	{r7, pc}	@
 2944              	.L217:
 2945              		.align	2
 2946              	.L216:
 2947 00a0 00000000 		.word	uxSchedulerSuspended
 2948 00a4 00000000 		.word	uxTopReadyPriority
 2949 00a8 00000000 		.word	pxReadyTasksLists
 2950 00ac 00000000 		.word	xPendingReadyList
 2951 00b0 00000000 		.word	pxCurrentTCB
 2952 00b4 00000000 		.word	xYieldPending
 2953              		.cfi_endproc
 2954              	.LFE23:
 2955              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 2956              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2957              		.align	2
 2958              		.global	xTaskRemoveFromUnorderedEventList
 2959              		.thumb
 2960              		.thumb_func
 2961              		.type	xTaskRemoveFromUnorderedEventList, %function
 2962              	xTaskRemoveFromUnorderedEventList:
 2963              	.LFB24:
2396:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2397:FreeRTOS/tasks.c **** 
2398:FreeRTOS/tasks.c **** BaseT_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickT_t xItemValue )
2399:FreeRTOS/tasks.c **** {
 2964              		.loc 1 2399 0
 2965              		.cfi_startproc
 2966              		@ args = 0, pretend = 0, frame = 16
 2967              		@ frame_needed = 1, uses_anonymous_args = 0
 2968 0000 80B5     		push	{r7, lr}	@
 2969              		.cfi_def_cfa_offset 8
 2970              		.cfi_offset 7, -8
 2971              		.cfi_offset 14, -4
 2972 0002 84B0     		sub	sp, sp, #16	@,,
 2973              		.cfi_def_cfa_offset 24
 2974 0004 00AF     		add	r7, sp, #0	@,,
 2975              		.cfi_def_cfa_register 7
 2976 0006 7860     		str	r0, [r7, #4]	@ pxEventListItem, pxEventListItem
 2977 0008 3960     		str	r1, [r7]	@ xItemValue, xItemValue
2400:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2401:FreeRTOS/tasks.c **** BaseT_t xReturn;
2402:FreeRTOS/tasks.c **** 
2403:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2404:FreeRTOS/tasks.c **** 	the event flags implementation. */
2405:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 2978              		.loc 1 2405 0
 2979 000a 254B     		ldr	r3, .L226	@ tmp126,
 2980 000c 1B68     		ldr	r3, [r3]	@ D.6572, uxSchedulerSuspended
 2981 000e 002B     		cmp	r3, #0	@ D.6572,
 2982 0010 02D1     		bne	.L219	@,
 2983              		.loc 1 2405 0 is_stmt 0 discriminator 1
 2984 0012 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 2985              	.L220:
 2986 0016 FEE7     		b	.L220	@
 2987              	.L219:
2406:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 99


2407:FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2408:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 2988              		.loc 1 2408 0 is_stmt 1
 2989 0018 3B68     		ldr	r3, [r7]	@ tmp127, xItemValue
 2990 001a 43F00042 		orr	r2, r3, #-2147483648	@ D.6572, tmp127,
 2991 001e 7B68     		ldr	r3, [r7, #4]	@ tmp128, pxEventListItem
 2992 0020 1A60     		str	r2, [r3]	@ D.6572, pxEventListItem_5(D)->xItemValue
2409:FreeRTOS/tasks.c **** 
2410:FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2411:FreeRTOS/tasks.c **** 	event flags. */
2412:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 2993              		.loc 1 2412 0
 2994 0022 7B68     		ldr	r3, [r7, #4]	@ tmp129, pxEventListItem
 2995 0024 DB68     		ldr	r3, [r3, #12]	@ tmp130, pxEventListItem_5(D)->pvOwner
 2996 0026 BB60     		str	r3, [r7, #8]	@ tmp130, pxUnblockedTCB
2413:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2997              		.loc 1 2413 0
 2998 0028 BB68     		ldr	r3, [r7, #8]	@ tmp131, pxUnblockedTCB
 2999 002a 002B     		cmp	r3, #0	@ tmp131,
 3000 002c 02D1     		bne	.L221	@,
 3001              		.loc 1 2413 0 is_stmt 0 discriminator 1
 3002 002e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3003              	.L222:
 3004              		.loc 1 2413 0 discriminator 2
 3005 0032 FEE7     		b	.L222	@
 3006              	.L221:
2414:FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3007              		.loc 1 2414 0 is_stmt 1
 3008 0034 7868     		ldr	r0, [r7, #4]	@, pxEventListItem
 3009 0036 FFF7FEFF 		bl	uxListRemove	@
2415:FreeRTOS/tasks.c **** 
2416:FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2417:FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2418:FreeRTOS/tasks.c **** 	lists. */
2419:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 3010              		.loc 1 2419 0
 3011 003a BB68     		ldr	r3, [r7, #8]	@ tmp132, pxUnblockedTCB
 3012 003c 0433     		adds	r3, r3, #4	@ D.6573, tmp132,
 3013 003e 1846     		mov	r0, r3	@, D.6573
 3014 0040 FFF7FEFF 		bl	uxListRemove	@
2420:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3015              		.loc 1 2420 0
 3016 0044 BB68     		ldr	r3, [r7, #8]	@ tmp133, pxUnblockedTCB
 3017 0046 DB6A     		ldr	r3, [r3, #44]	@ D.6572, pxUnblockedTCB_6->uxPriority
 3018 0048 1A46     		mov	r2, r3	@ D.6574, D.6572
 3019 004a 0123     		movs	r3, #1	@ tmp134,
 3020 004c 03FA02F2 		lsl	r2, r3, r2	@ D.6572, tmp134, D.6574
 3021 0050 144B     		ldr	r3, .L226+4	@ tmp135,
 3022 0052 1B68     		ldr	r3, [r3]	@ D.6572, uxTopReadyPriority
 3023 0054 1343     		orrs	r3, r3, r2	@, D.6572, D.6572, D.6572
 3024 0056 134A     		ldr	r2, .L226+4	@ tmp136,
 3025 0058 1360     		str	r3, [r2]	@ D.6572, uxTopReadyPriority
 3026 005a BB68     		ldr	r3, [r7, #8]	@ tmp137, pxUnblockedTCB
 3027 005c DA6A     		ldr	r2, [r3, #44]	@ D.6572, pxUnblockedTCB_6->uxPriority
 3028 005e 1346     		mov	r3, r2	@ tmp138, D.6572
 3029 0060 9B00     		lsls	r3, r3, #2	@ tmp138, tmp138,
 3030 0062 1344     		add	r3, r3, r2	@ tmp138, D.6572
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 100


 3031 0064 9B00     		lsls	r3, r3, #2	@ tmp139, tmp138,
 3032 0066 104A     		ldr	r2, .L226+8	@ tmp140,
 3033 0068 1A44     		add	r2, r2, r3	@ D.6575, tmp138
 3034 006a BB68     		ldr	r3, [r7, #8]	@ tmp141, pxUnblockedTCB
 3035 006c 0433     		adds	r3, r3, #4	@ D.6573, tmp141,
 3036 006e 1046     		mov	r0, r2	@, D.6575
 3037 0070 1946     		mov	r1, r3	@, D.6573
 3038 0072 FFF7FEFF 		bl	vListInsertEnd	@
2421:FreeRTOS/tasks.c **** 
2422:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3039              		.loc 1 2422 0
 3040 0076 BB68     		ldr	r3, [r7, #8]	@ tmp142, pxUnblockedTCB
 3041 0078 DA6A     		ldr	r2, [r3, #44]	@ D.6572, pxUnblockedTCB_6->uxPriority
 3042 007a 0C4B     		ldr	r3, .L226+12	@ tmp143,
 3043 007c 1B68     		ldr	r3, [r3]	@ D.6576, pxCurrentTCB
 3044 007e DB6A     		ldr	r3, [r3, #44]	@ D.6572, _17->uxPriority
 3045 0080 9A42     		cmp	r2, r3	@ D.6572, D.6572
 3046 0082 05D9     		bls	.L223	@,
2423:FreeRTOS/tasks.c **** 	{
2424:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2425:FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2426:FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2427:FreeRTOS/tasks.c **** 		switch now. */
2428:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
 3047              		.loc 1 2428 0
 3048 0084 0123     		movs	r3, #1	@ tmp144,
 3049 0086 FB60     		str	r3, [r7, #12]	@ tmp144, xReturn
2429:FreeRTOS/tasks.c **** 
2430:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2431:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2432:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
 3050              		.loc 1 2432 0
 3051 0088 094B     		ldr	r3, .L226+16	@ tmp145,
 3052 008a 0122     		movs	r2, #1	@ tmp146,
 3053 008c 1A60     		str	r2, [r3]	@ tmp146, xYieldPending
 3054 008e 01E0     		b	.L224	@
 3055              	.L223:
2433:FreeRTOS/tasks.c **** 	}
2434:FreeRTOS/tasks.c **** 	else
2435:FreeRTOS/tasks.c **** 	{
2436:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
 3056              		.loc 1 2436 0
 3057 0090 0023     		movs	r3, #0	@ tmp147,
 3058 0092 FB60     		str	r3, [r7, #12]	@ tmp147, xReturn
 3059              	.L224:
2437:FreeRTOS/tasks.c **** 	}
2438:FreeRTOS/tasks.c **** 
2439:FreeRTOS/tasks.c **** 	return xReturn;
 3060              		.loc 1 2439 0
 3061 0094 FB68     		ldr	r3, [r7, #12]	@ D.6577, xReturn
2440:FreeRTOS/tasks.c **** }
 3062              		.loc 1 2440 0
 3063 0096 1846     		mov	r0, r3	@, <retval>
 3064 0098 1037     		adds	r7, r7, #16	@,,
 3065              		.cfi_def_cfa_offset 8
 3066 009a BD46     		mov	sp, r7	@,
 3067              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 101


 3068              		@ sp needed	@
 3069 009c 80BD     		pop	{r7, pc}	@
 3070              	.L227:
 3071 009e 00BF     		.align	2
 3072              	.L226:
 3073 00a0 00000000 		.word	uxSchedulerSuspended
 3074 00a4 00000000 		.word	uxTopReadyPriority
 3075 00a8 00000000 		.word	pxReadyTasksLists
 3076 00ac 00000000 		.word	pxCurrentTCB
 3077 00b0 00000000 		.word	xYieldPending
 3078              		.cfi_endproc
 3079              	.LFE24:
 3080              		.size	xTaskRemoveFromUnorderedEventList, .-xTaskRemoveFromUnorderedEventList
 3081              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3082              		.align	2
 3083              		.global	vTaskSetTimeOutState
 3084              		.thumb
 3085              		.thumb_func
 3086              		.type	vTaskSetTimeOutState, %function
 3087              	vTaskSetTimeOutState:
 3088              	.LFB25:
2441:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2442:FreeRTOS/tasks.c **** 
2443:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
2444:FreeRTOS/tasks.c **** {
 3089              		.loc 1 2444 0
 3090              		.cfi_startproc
 3091              		@ args = 0, pretend = 0, frame = 8
 3092              		@ frame_needed = 1, uses_anonymous_args = 0
 3093 0000 80B5     		push	{r7, lr}	@
 3094              		.cfi_def_cfa_offset 8
 3095              		.cfi_offset 7, -8
 3096              		.cfi_offset 14, -4
 3097 0002 82B0     		sub	sp, sp, #8	@,,
 3098              		.cfi_def_cfa_offset 16
 3099 0004 00AF     		add	r7, sp, #0	@,,
 3100              		.cfi_def_cfa_register 7
 3101 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
2445:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3102              		.loc 1 2445 0
 3103 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, pxTimeOut
 3104 000a 002B     		cmp	r3, #0	@ tmp112,
 3105 000c 02D1     		bne	.L229	@,
 3106              		.loc 1 2445 0 is_stmt 0 discriminator 1
 3107 000e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3108              	.L230:
 3109 0012 FEE7     		b	.L230	@
 3110              	.L229:
2446:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3111              		.loc 1 2446 0 is_stmt 1
 3112 0014 054B     		ldr	r3, .L231	@ tmp113,
 3113 0016 1A68     		ldr	r2, [r3]	@ D.6578, xNumOfOverflows
 3114 0018 7B68     		ldr	r3, [r7, #4]	@ tmp114, pxTimeOut
 3115 001a 1A60     		str	r2, [r3]	@ D.6578, pxTimeOut_1(D)->xOverflowCount
2447:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3116              		.loc 1 2447 0
 3117 001c 044B     		ldr	r3, .L231+4	@ tmp115,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 102


 3118 001e 1A68     		ldr	r2, [r3]	@ D.6579, xTickCount
 3119 0020 7B68     		ldr	r3, [r7, #4]	@ tmp116, pxTimeOut
 3120 0022 5A60     		str	r2, [r3, #4]	@ D.6579, pxTimeOut_1(D)->xTimeOnEntering
2448:FreeRTOS/tasks.c **** }
 3121              		.loc 1 2448 0
 3122 0024 0837     		adds	r7, r7, #8	@,,
 3123              		.cfi_def_cfa_offset 8
 3124 0026 BD46     		mov	sp, r7	@,
 3125              		.cfi_def_cfa_register 13
 3126              		@ sp needed	@
 3127 0028 80BD     		pop	{r7, pc}	@
 3128              	.L232:
 3129 002a 00BF     		.align	2
 3130              	.L231:
 3131 002c 00000000 		.word	xNumOfOverflows
 3132 0030 00000000 		.word	xTickCount
 3133              		.cfi_endproc
 3134              	.LFE25:
 3135              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3136              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3137              		.align	2
 3138              		.global	xTaskCheckForTimeOut
 3139              		.thumb
 3140              		.thumb_func
 3141              		.type	xTaskCheckForTimeOut, %function
 3142              	xTaskCheckForTimeOut:
 3143              	.LFB26:
2449:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2450:FreeRTOS/tasks.c **** 
2451:FreeRTOS/tasks.c **** BaseT_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickT_t * const pxTicksToWait )
2452:FreeRTOS/tasks.c **** {
 3144              		.loc 1 2452 0
 3145              		.cfi_startproc
 3146              		@ args = 0, pretend = 0, frame = 16
 3147              		@ frame_needed = 1, uses_anonymous_args = 0
 3148 0000 80B5     		push	{r7, lr}	@
 3149              		.cfi_def_cfa_offset 8
 3150              		.cfi_offset 7, -8
 3151              		.cfi_offset 14, -4
 3152 0002 84B0     		sub	sp, sp, #16	@,,
 3153              		.cfi_def_cfa_offset 24
 3154 0004 00AF     		add	r7, sp, #0	@,,
 3155              		.cfi_def_cfa_register 7
 3156 0006 7860     		str	r0, [r7, #4]	@ pxTimeOut, pxTimeOut
 3157 0008 3960     		str	r1, [r7]	@ pxTicksToWait, pxTicksToWait
2453:FreeRTOS/tasks.c **** BaseT_t xReturn;
2454:FreeRTOS/tasks.c **** 
2455:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3158              		.loc 1 2455 0
 3159 000a 7B68     		ldr	r3, [r7, #4]	@ tmp123, pxTimeOut
 3160 000c 002B     		cmp	r3, #0	@ tmp123,
 3161 000e 02D1     		bne	.L234	@,
 3162              		.loc 1 2455 0 is_stmt 0 discriminator 1
 3163 0010 FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3164              	.L235:
 3165 0014 FEE7     		b	.L235	@
 3166              	.L234:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 103


2456:FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 3167              		.loc 1 2456 0 is_stmt 1
 3168 0016 3B68     		ldr	r3, [r7]	@ tmp124, pxTicksToWait
 3169 0018 002B     		cmp	r3, #0	@ tmp124,
 3170 001a 02D1     		bne	.L236	@,
 3171              		.loc 1 2456 0 is_stmt 0 discriminator 1
 3172 001c FFF7FEFF 		bl	ulPortSetInterruptMask	@
 3173              	.L237:
 3174              		.loc 1 2456 0 discriminator 2
 3175 0020 FEE7     		b	.L237	@
 3176              	.L236:
2457:FreeRTOS/tasks.c **** 
2458:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 3177              		.loc 1 2458 0 is_stmt 1
 3178 0022 FFF7FEFF 		bl	vPortEnterCritical	@
 3179              	.LBB14:
2459:FreeRTOS/tasks.c **** 	{
2460:FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
2461:FreeRTOS/tasks.c **** 		const TickT_t xConstTickCount = xTickCount;
 3180              		.loc 1 2461 0
 3181 0026 1C4B     		ldr	r3, .L243	@ tmp125,
 3182 0028 1B68     		ldr	r3, [r3]	@ tmp126, xTickCount
 3183 002a BB60     		str	r3, [r7, #8]	@ tmp126, xConstTickCount
2462:FreeRTOS/tasks.c **** 
2463:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
2464:FreeRTOS/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
2465:FreeRTOS/tasks.c **** 			the maximum block time then the task should block indefinitely, and
2466:FreeRTOS/tasks.c **** 			therefore never time out. */
2467:FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3184              		.loc 1 2467 0
 3185 002c 3B68     		ldr	r3, [r7]	@ tmp127, pxTicksToWait
 3186 002e 1B68     		ldr	r3, [r3]	@ D.6580, *pxTicksToWait_3(D)
 3187 0030 B3F1FF3F 		cmp	r3, #-1	@ D.6580,
 3188 0034 02D1     		bne	.L238	@,
2468:FreeRTOS/tasks.c **** 			{
2469:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
 3189              		.loc 1 2469 0
 3190 0036 0023     		movs	r3, #0	@ tmp128,
 3191 0038 FB60     		str	r3, [r7, #12]	@ tmp128, xReturn
 3192 003a 26E0     		b	.L239	@
 3193              	.L238:
2470:FreeRTOS/tasks.c **** 			}
2471:FreeRTOS/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
2472:FreeRTOS/tasks.c **** 		#endif
2473:FreeRTOS/tasks.c **** 
2474:FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3194              		.loc 1 2474 0
 3195 003c 7B68     		ldr	r3, [r7, #4]	@ tmp129, pxTimeOut
 3196 003e 1A68     		ldr	r2, [r3]	@ D.6581, pxTimeOut_2(D)->xOverflowCount
 3197 0040 164B     		ldr	r3, .L243+4	@ tmp130,
 3198 0042 1B68     		ldr	r3, [r3]	@ D.6581, xNumOfOverflows
 3199 0044 9A42     		cmp	r2, r3	@ D.6581, D.6581
 3200 0046 07D0     		beq	.L240	@,
 3201              		.loc 1 2474 0 is_stmt 0 discriminator 1
 3202 0048 7B68     		ldr	r3, [r7, #4]	@ tmp131, pxTimeOut
 3203 004a 5A68     		ldr	r2, [r3, #4]	@ D.6580, pxTimeOut_2(D)->xTimeOnEntering
 3204 004c BB68     		ldr	r3, [r7, #8]	@ tmp132, xConstTickCount
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 104


 3205 004e 9A42     		cmp	r2, r3	@ D.6580, tmp132
 3206 0050 02D8     		bhi	.L240	@,
2475:FreeRTOS/tasks.c **** 		{
2476:FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
2477:FreeRTOS/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
2478:FreeRTOS/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
2479:FreeRTOS/tasks.c **** 			passed since vTaskSetTimeout() was called. */
2480:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3207              		.loc 1 2480 0 is_stmt 1
 3208 0052 0123     		movs	r3, #1	@ tmp133,
 3209 0054 FB60     		str	r3, [r7, #12]	@ tmp133, xReturn
 3210 0056 18E0     		b	.L239	@
 3211              	.L240:
2481:FreeRTOS/tasks.c **** 		}
2482:FreeRTOS/tasks.c **** 		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 3212              		.loc 1 2482 0
 3213 0058 7B68     		ldr	r3, [r7, #4]	@ tmp134, pxTimeOut
 3214 005a 5B68     		ldr	r3, [r3, #4]	@ D.6580, pxTimeOut_2(D)->xTimeOnEntering
 3215 005c BA68     		ldr	r2, [r7, #8]	@ tmp135, xConstTickCount
 3216 005e D21A     		subs	r2, r2, r3	@ D.6580, tmp135, D.6580
 3217 0060 3B68     		ldr	r3, [r7]	@ tmp136, pxTicksToWait
 3218 0062 1B68     		ldr	r3, [r3]	@ D.6580, *pxTicksToWait_3(D)
 3219 0064 9A42     		cmp	r2, r3	@ D.6580, D.6580
 3220 0066 0ED2     		bcs	.L241	@,
2483:FreeRTOS/tasks.c **** 		{
2484:FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
2485:FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 3221              		.loc 1 2485 0
 3222 0068 3B68     		ldr	r3, [r7]	@ tmp137, pxTicksToWait
 3223 006a 1A68     		ldr	r2, [r3]	@ D.6580, *pxTicksToWait_3(D)
 3224 006c 7B68     		ldr	r3, [r7, #4]	@ tmp138, pxTimeOut
 3225 006e 5968     		ldr	r1, [r3, #4]	@ D.6580, pxTimeOut_2(D)->xTimeOnEntering
 3226 0070 BB68     		ldr	r3, [r7, #8]	@ tmp139, xConstTickCount
 3227 0072 CB1A     		subs	r3, r1, r3	@ D.6580, D.6580, tmp139
 3228 0074 1A44     		add	r2, r2, r3	@ D.6580, D.6580
 3229 0076 3B68     		ldr	r3, [r7]	@ tmp140, pxTicksToWait
 3230 0078 1A60     		str	r2, [r3]	@ D.6580, *pxTicksToWait_3(D)
2486:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3231              		.loc 1 2486 0
 3232 007a 7868     		ldr	r0, [r7, #4]	@, pxTimeOut
 3233 007c FFF7FEFF 		bl	vTaskSetTimeOutState	@
2487:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 3234              		.loc 1 2487 0
 3235 0080 0023     		movs	r3, #0	@ tmp141,
 3236 0082 FB60     		str	r3, [r7, #12]	@ tmp141, xReturn
 3237 0084 01E0     		b	.L239	@
 3238              	.L241:
2488:FreeRTOS/tasks.c **** 		}
2489:FreeRTOS/tasks.c **** 		else
2490:FreeRTOS/tasks.c **** 		{
2491:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
 3239              		.loc 1 2491 0
 3240 0086 0123     		movs	r3, #1	@ tmp142,
 3241 0088 FB60     		str	r3, [r7, #12]	@ tmp142, xReturn
 3242              	.L239:
 3243              	.LBE14:
2492:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 105


2493:FreeRTOS/tasks.c **** 	}
2494:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
 3244              		.loc 1 2494 0
 3245 008a FFF7FEFF 		bl	vPortExitCritical	@
2495:FreeRTOS/tasks.c **** 
2496:FreeRTOS/tasks.c **** 	return xReturn;
 3246              		.loc 1 2496 0
 3247 008e FB68     		ldr	r3, [r7, #12]	@ D.6582, xReturn
2497:FreeRTOS/tasks.c **** }
 3248              		.loc 1 2497 0
 3249 0090 1846     		mov	r0, r3	@, <retval>
 3250 0092 1037     		adds	r7, r7, #16	@,,
 3251              		.cfi_def_cfa_offset 8
 3252 0094 BD46     		mov	sp, r7	@,
 3253              		.cfi_def_cfa_register 13
 3254              		@ sp needed	@
 3255 0096 80BD     		pop	{r7, pc}	@
 3256              	.L244:
 3257              		.align	2
 3258              	.L243:
 3259 0098 00000000 		.word	xTickCount
 3260 009c 00000000 		.word	xNumOfOverflows
 3261              		.cfi_endproc
 3262              	.LFE26:
 3263              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3264              		.section	.text.vTaskMissedYield,"ax",%progbits
 3265              		.align	2
 3266              		.global	vTaskMissedYield
 3267              		.thumb
 3268              		.thumb_func
 3269              		.type	vTaskMissedYield, %function
 3270              	vTaskMissedYield:
 3271              	.LFB27:
2498:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2499:FreeRTOS/tasks.c **** 
2500:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
2501:FreeRTOS/tasks.c **** {
 3272              		.loc 1 2501 0
 3273              		.cfi_startproc
 3274              		@ args = 0, pretend = 0, frame = 0
 3275              		@ frame_needed = 1, uses_anonymous_args = 0
 3276              		@ link register save eliminated.
 3277 0000 80B4     		push	{r7}	@
 3278              		.cfi_def_cfa_offset 4
 3279              		.cfi_offset 7, -4
 3280 0002 00AF     		add	r7, sp, #0	@,,
 3281              		.cfi_def_cfa_register 7
2502:FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3282              		.loc 1 2502 0
 3283 0004 034B     		ldr	r3, .L246	@ tmp110,
 3284 0006 0122     		movs	r2, #1	@ tmp111,
 3285 0008 1A60     		str	r2, [r3]	@ tmp111, xYieldPending
2503:FreeRTOS/tasks.c **** }
 3286              		.loc 1 2503 0
 3287 000a BD46     		mov	sp, r7	@,
 3288              		.cfi_def_cfa_register 13
 3289              		@ sp needed	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 106


 3290 000c 5DF8047B 		ldr	r7, [sp], #4	@,
 3291              		.cfi_restore 7
 3292              		.cfi_def_cfa_offset 0
 3293 0010 7047     		bx	lr	@
 3294              	.L247:
 3295 0012 00BF     		.align	2
 3296              	.L246:
 3297 0014 00000000 		.word	xYieldPending
 3298              		.cfi_endproc
 3299              	.LFE27:
 3300              		.size	vTaskMissedYield, .-vTaskMissedYield
 3301              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3302              		.align	2
 3303              		.global	uxTaskGetTaskNumber
 3304              		.thumb
 3305              		.thumb_func
 3306              		.type	uxTaskGetTaskNumber, %function
 3307              	uxTaskGetTaskNumber:
 3308              	.LFB28:
2504:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2505:FreeRTOS/tasks.c **** 
2506:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2507:FreeRTOS/tasks.c **** 
2508:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetTaskNumber( TaskHandle_t xTask )
2509:FreeRTOS/tasks.c **** 	{
 3309              		.loc 1 2509 0
 3310              		.cfi_startproc
 3311              		@ args = 0, pretend = 0, frame = 16
 3312              		@ frame_needed = 1, uses_anonymous_args = 0
 3313              		@ link register save eliminated.
 3314 0000 80B4     		push	{r7}	@
 3315              		.cfi_def_cfa_offset 4
 3316              		.cfi_offset 7, -4
 3317 0002 85B0     		sub	sp, sp, #20	@,,
 3318              		.cfi_def_cfa_offset 24
 3319 0004 00AF     		add	r7, sp, #0	@,,
 3320              		.cfi_def_cfa_register 7
 3321 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
2510:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
2511:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2512:FreeRTOS/tasks.c **** 
2513:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3322              		.loc 1 2513 0
 3323 0008 7B68     		ldr	r3, [r7, #4]	@ tmp112, xTask
 3324 000a 002B     		cmp	r3, #0	@ tmp112,
 3325 000c 05D0     		beq	.L249	@,
2514:FreeRTOS/tasks.c **** 		{
2515:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3326              		.loc 1 2515 0
 3327 000e 7B68     		ldr	r3, [r7, #4]	@ tmp113, xTask
 3328 0010 BB60     		str	r3, [r7, #8]	@ tmp113, pxTCB
2516:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 3329              		.loc 1 2516 0
 3330 0012 BB68     		ldr	r3, [r7, #8]	@ tmp114, pxTCB
 3331 0014 5B6C     		ldr	r3, [r3, #68]	@ tmp115, pxTCB_3->uxTaskNumber
 3332 0016 FB60     		str	r3, [r7, #12]	@ tmp115, uxReturn
 3333 0018 01E0     		b	.L250	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 107


 3334              	.L249:
2517:FreeRTOS/tasks.c **** 		}
2518:FreeRTOS/tasks.c **** 		else
2519:FreeRTOS/tasks.c **** 		{
2520:FreeRTOS/tasks.c **** 			uxReturn = 0U;
 3335              		.loc 1 2520 0
 3336 001a 0023     		movs	r3, #0	@ tmp116,
 3337 001c FB60     		str	r3, [r7, #12]	@ tmp116, uxReturn
 3338              	.L250:
2521:FreeRTOS/tasks.c **** 		}
2522:FreeRTOS/tasks.c **** 
2523:FreeRTOS/tasks.c **** 		return uxReturn;
 3339              		.loc 1 2523 0
 3340 001e FB68     		ldr	r3, [r7, #12]	@ D.6583, uxReturn
2524:FreeRTOS/tasks.c **** 	}
 3341              		.loc 1 2524 0
 3342 0020 1846     		mov	r0, r3	@, <retval>
 3343 0022 1437     		adds	r7, r7, #20	@,,
 3344              		.cfi_def_cfa_offset 4
 3345 0024 BD46     		mov	sp, r7	@,
 3346              		.cfi_def_cfa_register 13
 3347              		@ sp needed	@
 3348 0026 5DF8047B 		ldr	r7, [sp], #4	@,
 3349              		.cfi_restore 7
 3350              		.cfi_def_cfa_offset 0
 3351 002a 7047     		bx	lr	@
 3352              		.cfi_endproc
 3353              	.LFE28:
 3354              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 3355              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 3356              		.align	2
 3357              		.global	vTaskSetTaskNumber
 3358              		.thumb
 3359              		.thumb_func
 3360              		.type	vTaskSetTaskNumber, %function
 3361              	vTaskSetTaskNumber:
 3362              	.LFB29:
2525:FreeRTOS/tasks.c **** 
2526:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2527:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2528:FreeRTOS/tasks.c **** 
2529:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2530:FreeRTOS/tasks.c **** 
2531:FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseT_t uxHandle )
2532:FreeRTOS/tasks.c **** 	{
 3363              		.loc 1 2532 0
 3364              		.cfi_startproc
 3365              		@ args = 0, pretend = 0, frame = 16
 3366              		@ frame_needed = 1, uses_anonymous_args = 0
 3367              		@ link register save eliminated.
 3368 0000 80B4     		push	{r7}	@
 3369              		.cfi_def_cfa_offset 4
 3370              		.cfi_offset 7, -4
 3371 0002 85B0     		sub	sp, sp, #20	@,,
 3372              		.cfi_def_cfa_offset 24
 3373 0004 00AF     		add	r7, sp, #0	@,,
 3374              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 108


 3375 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
 3376 0008 3960     		str	r1, [r7]	@ uxHandle, uxHandle
2533:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2534:FreeRTOS/tasks.c **** 
2535:FreeRTOS/tasks.c **** 		if( xTask != NULL )
 3377              		.loc 1 2535 0
 3378 000a 7B68     		ldr	r3, [r7, #4]	@ tmp110, xTask
 3379 000c 002B     		cmp	r3, #0	@ tmp110,
 3380 000e 04D0     		beq	.L252	@,
2536:FreeRTOS/tasks.c **** 		{
2537:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
 3381              		.loc 1 2537 0
 3382 0010 7B68     		ldr	r3, [r7, #4]	@ tmp111, xTask
 3383 0012 FB60     		str	r3, [r7, #12]	@ tmp111, pxTCB
2538:FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 3384              		.loc 1 2538 0
 3385 0014 FB68     		ldr	r3, [r7, #12]	@ tmp112, pxTCB
 3386 0016 3A68     		ldr	r2, [r7]	@ tmp113, uxHandle
 3387 0018 5A64     		str	r2, [r3, #68]	@ tmp113, pxTCB_2->uxTaskNumber
 3388              	.L252:
2539:FreeRTOS/tasks.c **** 		}
2540:FreeRTOS/tasks.c **** 	}
 3389              		.loc 1 2540 0
 3390 001a 1437     		adds	r7, r7, #20	@,,
 3391              		.cfi_def_cfa_offset 4
 3392 001c BD46     		mov	sp, r7	@,
 3393              		.cfi_def_cfa_register 13
 3394              		@ sp needed	@
 3395 001e 5DF8047B 		ldr	r7, [sp], #4	@,
 3396              		.cfi_restore 7
 3397              		.cfi_def_cfa_offset 0
 3398 0022 7047     		bx	lr	@
 3399              		.cfi_endproc
 3400              	.LFE29:
 3401              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 3402              		.section	.text.prvIdleTask,"ax",%progbits
 3403              		.align	2
 3404              		.thumb
 3405              		.thumb_func
 3406              		.type	prvIdleTask, %function
 3407              	prvIdleTask:
 3408              	.LFB30:
2541:FreeRTOS/tasks.c **** 
2542:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2543:FreeRTOS/tasks.c **** 
2544:FreeRTOS/tasks.c **** /*
2545:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
2546:FreeRTOS/tasks.c ****  * The Idle task.
2547:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
2548:FreeRTOS/tasks.c ****  *
2549:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
2550:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
2551:FreeRTOS/tasks.c ****  *
2552:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
2553:FreeRTOS/tasks.c ****  *
2554:FreeRTOS/tasks.c ****  */
2555:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 109


2556:FreeRTOS/tasks.c **** {
 3409              		.loc 1 2556 0
 3410              		.cfi_startproc
 3411              		@ args = 0, pretend = 0, frame = 8
 3412              		@ frame_needed = 1, uses_anonymous_args = 0
 3413 0000 80B5     		push	{r7, lr}	@
 3414              		.cfi_def_cfa_offset 8
 3415              		.cfi_offset 7, -8
 3416              		.cfi_offset 14, -4
 3417 0002 82B0     		sub	sp, sp, #8	@,,
 3418              		.cfi_def_cfa_offset 16
 3419 0004 00AF     		add	r7, sp, #0	@,,
 3420              		.cfi_def_cfa_register 7
 3421 0006 7860     		str	r0, [r7, #4]	@ pvParameters, pvParameters
 3422              	.L255:
2557:FreeRTOS/tasks.c **** 	/* Stop warnings. */
2558:FreeRTOS/tasks.c **** 	( void ) pvParameters;
2559:FreeRTOS/tasks.c **** 
2560:FreeRTOS/tasks.c **** 	for( ;; )
2561:FreeRTOS/tasks.c **** 	{
2562:FreeRTOS/tasks.c **** 		/* See if any tasks have been deleted. */
2563:FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
 3423              		.loc 1 2563 0 discriminator 1
 3424 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination	@
2564:FreeRTOS/tasks.c **** 
2565:FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
2566:FreeRTOS/tasks.c **** 		{
2567:FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
2568:FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
2569:FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
2570:FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
2571:FreeRTOS/tasks.c **** 			taskYIELD();
2572:FreeRTOS/tasks.c **** 		}
2573:FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2574:FreeRTOS/tasks.c **** 
2575:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
2576:FreeRTOS/tasks.c **** 		{
2577:FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
2578:FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
2579:FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
2580:FreeRTOS/tasks.c **** 			timeslice.
2581:FreeRTOS/tasks.c **** 
2582:FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
2583:FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
2584:FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
2585:FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
2586:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseT_t ) 1 )
2587:FreeRTOS/tasks.c **** 			{
2588:FreeRTOS/tasks.c **** 				taskYIELD();
2589:FreeRTOS/tasks.c **** 			}
2590:FreeRTOS/tasks.c **** 			else
2591:FreeRTOS/tasks.c **** 			{
2592:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2593:FreeRTOS/tasks.c **** 			}
2594:FreeRTOS/tasks.c **** 		}
2595:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
2596:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 110


2597:FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
2598:FreeRTOS/tasks.c **** 		{
2599:FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
2600:FreeRTOS/tasks.c **** 
2601:FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
2602:FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
2603:FreeRTOS/tasks.c **** 			without the overhead of a separate task.
2604:FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
2605:FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
2606:FreeRTOS/tasks.c **** 			vApplicationIdleHook();
2607:FreeRTOS/tasks.c **** 		}
2608:FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
2609:FreeRTOS/tasks.c **** 
2610:FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
2611:FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
2612:FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
2613:FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
2614:FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
2615:FreeRTOS/tasks.c **** 		{
2616:FreeRTOS/tasks.c **** 		TickT_t xExpectedIdleTime;
2617:FreeRTOS/tasks.c **** 
2618:FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
2619:FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
2620:FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
2621:FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
2622:FreeRTOS/tasks.c **** 			valid. */
2623:FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
2624:FreeRTOS/tasks.c **** 
2625:FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2626:FreeRTOS/tasks.c **** 			{
2627:FreeRTOS/tasks.c **** 				vTaskSuspendAll();
2628:FreeRTOS/tasks.c **** 				{
2629:FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
2630:FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
2631:FreeRTOS/tasks.c **** 					be used. */
2632:FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
2633:FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
2634:FreeRTOS/tasks.c **** 
2635:FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
2636:FreeRTOS/tasks.c **** 					{
2637:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
2638:FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
2639:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
2640:FreeRTOS/tasks.c **** 					}
2641:FreeRTOS/tasks.c **** 					else
2642:FreeRTOS/tasks.c **** 					{
2643:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2644:FreeRTOS/tasks.c **** 					}
2645:FreeRTOS/tasks.c **** 				}
2646:FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
2647:FreeRTOS/tasks.c **** 			}
2648:FreeRTOS/tasks.c **** 			else
2649:FreeRTOS/tasks.c **** 			{
2650:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2651:FreeRTOS/tasks.c **** 			}
2652:FreeRTOS/tasks.c **** 		}
2653:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 111


2654:FreeRTOS/tasks.c **** 	}
 3425              		.loc 1 2654 0 discriminator 1
 3426 000c FCE7     		b	.L255	@
 3427              		.cfi_endproc
 3428              	.LFE30:
 3429              		.size	prvIdleTask, .-prvIdleTask
 3430 000e 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 3431              		.align	2
 3432              		.thumb
 3433              		.thumb_func
 3434              		.type	prvInitialiseTCBVariables, %function
 3435              	prvInitialiseTCBVariables:
 3436              	.LFB31:
2655:FreeRTOS/tasks.c **** }
2656:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2657:FreeRTOS/tasks.c **** 
2658:FreeRTOS/tasks.c **** #if configUSE_TICKLESS_IDLE != 0
2659:FreeRTOS/tasks.c **** 
2660:FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
2661:FreeRTOS/tasks.c **** 	{
2662:FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
2663:FreeRTOS/tasks.c **** 
2664:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
2665:FreeRTOS/tasks.c **** 		{
2666:FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
2667:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2668:FreeRTOS/tasks.c **** 		}
2669:FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
2670:FreeRTOS/tasks.c **** 		{
2671:FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
2672:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
2673:FreeRTOS/tasks.c **** 		}
2674:FreeRTOS/tasks.c **** 		else
2675:FreeRTOS/tasks.c **** 		{
2676:FreeRTOS/tasks.c **** 			#if configUSE_TIMERS == 0
2677:FreeRTOS/tasks.c **** 			{
2678:FreeRTOS/tasks.c **** 				/* The idle task exists in addition to the application tasks. */
2679:FreeRTOS/tasks.c **** 				const UBaseT_t uxNonApplicationTasks = 1;
2680:FreeRTOS/tasks.c **** 
2681:FreeRTOS/tasks.c **** 				/* If timers are not being used and all the tasks are in the
2682:FreeRTOS/tasks.c **** 				suspended list (which might mean they have an infinite block
2683:FreeRTOS/tasks.c **** 				time rather than actually being suspended) then it is safe to
2684:FreeRTOS/tasks.c **** 				turn all clocks off and just wait for external interrupts. */
2685:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicati
2686:FreeRTOS/tasks.c **** 				{
2687:FreeRTOS/tasks.c **** 					eReturn = eNoTasksWaitingTimeout;
2688:FreeRTOS/tasks.c **** 				}
2689:FreeRTOS/tasks.c **** 				else
2690:FreeRTOS/tasks.c **** 				{
2691:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2692:FreeRTOS/tasks.c **** 				}
2693:FreeRTOS/tasks.c **** 			}
2694:FreeRTOS/tasks.c **** 			#endif /* configUSE_TIMERS */
2695:FreeRTOS/tasks.c **** 		}
2696:FreeRTOS/tasks.c **** 
2697:FreeRTOS/tasks.c **** 		return eReturn;
2698:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 112


2699:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2700:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2701:FreeRTOS/tasks.c **** 
2702:FreeRTOS/tasks.c **** static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseT_t uxP
2703:FreeRTOS/tasks.c **** {
 3437              		.loc 1 2703 0
 3438              		.cfi_startproc
 3439              		@ args = 4, pretend = 0, frame = 24
 3440              		@ frame_needed = 1, uses_anonymous_args = 0
 3441 0000 80B5     		push	{r7, lr}	@
 3442              		.cfi_def_cfa_offset 8
 3443              		.cfi_offset 7, -8
 3444              		.cfi_offset 14, -4
 3445 0002 86B0     		sub	sp, sp, #24	@,,
 3446              		.cfi_def_cfa_offset 32
 3447 0004 00AF     		add	r7, sp, #0	@,,
 3448              		.cfi_def_cfa_register 7
 3449 0006 F860     		str	r0, [r7, #12]	@ pxTCB, pxTCB
 3450 0008 B960     		str	r1, [r7, #8]	@ pcName, pcName
 3451 000a 7A60     		str	r2, [r7, #4]	@ uxPriority, uxPriority
 3452 000c 3B60     		str	r3, [r7]	@ xRegions, xRegions
2704:FreeRTOS/tasks.c **** UBaseT_t x;
2705:FreeRTOS/tasks.c **** 
2706:FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
2707:FreeRTOS/tasks.c **** 	for( x = ( UBaseT_t ) 0; x < ( UBaseT_t ) configMAX_TASK_NAME_LEN; x++ )
 3453              		.loc 1 2707 0
 3454 000e 0023     		movs	r3, #0	@ tmp117,
 3455 0010 7B61     		str	r3, [r7, #20]	@ tmp117, x
 3456 0012 13E0     		b	.L257	@
 3457              	.L260:
2708:FreeRTOS/tasks.c **** 	{
2709:FreeRTOS/tasks.c **** 		pxTCB->pcTaskName[ x ] = pcName[ x ];
 3458              		.loc 1 2709 0
 3459 0014 BA68     		ldr	r2, [r7, #8]	@ tmp118, pcName
 3460 0016 7B69     		ldr	r3, [r7, #20]	@ tmp119, x
 3461 0018 1344     		add	r3, r3, r2	@ D.6584, tmp118
 3462 001a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2	@ D.6585, *_5
 3463 001c FA68     		ldr	r2, [r7, #12]	@ tmp120, pxTCB
 3464 001e 7B69     		ldr	r3, [r7, #20]	@ tmp122, x
 3465 0020 1344     		add	r3, r3, r2	@ tmp121, tmp120
 3466 0022 3033     		adds	r3, r3, #48	@ tmp123, tmp121,
 3467 0024 0A46     		mov	r2, r1	@ tmp124, D.6585
 3468 0026 1A71     		strb	r2, [r3, #4]	@ tmp124, pxTCB_7(D)->pcTaskName
2710:FreeRTOS/tasks.c **** 
2711:FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
2712:FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
2713:FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
2714:FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 3469              		.loc 1 2714 0
 3470 0028 BA68     		ldr	r2, [r7, #8]	@ tmp125, pcName
 3471 002a 7B69     		ldr	r3, [r7, #20]	@ tmp126, x
 3472 002c 1344     		add	r3, r3, r2	@ D.6584, tmp125
 3473 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ D.6585, *_8
 3474 0030 002B     		cmp	r3, #0	@ D.6585,
 3475 0032 00D1     		bne	.L258	@,
2715:FreeRTOS/tasks.c **** 		{
2716:FreeRTOS/tasks.c **** 			break;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 113


 3476              		.loc 1 2716 0
 3477 0034 05E0     		b	.L259	@
 3478              	.L258:
2707:FreeRTOS/tasks.c **** 	{
 3479              		.loc 1 2707 0 discriminator 2
 3480 0036 7B69     		ldr	r3, [r7, #20]	@ tmp128, x
 3481 0038 0133     		adds	r3, r3, #1	@ tmp127, tmp128,
 3482 003a 7B61     		str	r3, [r7, #20]	@ tmp127, x
 3483              	.L257:
2707:FreeRTOS/tasks.c **** 	{
 3484              		.loc 1 2707 0 is_stmt 0 discriminator 1
 3485 003c 7B69     		ldr	r3, [r7, #20]	@ tmp129, x
 3486 003e 0B2B     		cmp	r3, #11	@ tmp129,
 3487 0040 E8D9     		bls	.L260	@,
 3488              	.L259:
2717:FreeRTOS/tasks.c **** 		}
2718:FreeRTOS/tasks.c **** 		else
2719:FreeRTOS/tasks.c **** 		{
2720:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2721:FreeRTOS/tasks.c **** 		}
2722:FreeRTOS/tasks.c **** 	}
2723:FreeRTOS/tasks.c **** 
2724:FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
2725:FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
2726:FreeRTOS/tasks.c **** 	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 3489              		.loc 1 2726 0 is_stmt 1
 3490 0042 FB68     		ldr	r3, [r7, #12]	@ tmp130, pxTCB
 3491 0044 0022     		movs	r2, #0	@ tmp131,
 3492 0046 83F83F20 		strb	r2, [r3, #63]	@ tmp132, pxTCB_7(D)->pcTaskName
2727:FreeRTOS/tasks.c **** 
2728:FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
2729:FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
2730:FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseT_t ) configMAX_PRIORITIES )
 3493              		.loc 1 2730 0
 3494 004a 7B68     		ldr	r3, [r7, #4]	@ tmp133, uxPriority
 3495 004c 072B     		cmp	r3, #7	@ tmp133,
 3496 004e 01D9     		bls	.L261	@,
2731:FreeRTOS/tasks.c **** 	{
2732:FreeRTOS/tasks.c **** 		uxPriority = ( UBaseT_t ) configMAX_PRIORITIES - ( UBaseT_t ) 1U;
 3497              		.loc 1 2732 0
 3498 0050 0723     		movs	r3, #7	@ tmp134,
 3499 0052 7B60     		str	r3, [r7, #4]	@ tmp134, uxPriority
 3500              	.L261:
2733:FreeRTOS/tasks.c **** 	}
2734:FreeRTOS/tasks.c **** 	else
2735:FreeRTOS/tasks.c **** 	{
2736:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
2737:FreeRTOS/tasks.c **** 	}
2738:FreeRTOS/tasks.c **** 
2739:FreeRTOS/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 3501              		.loc 1 2739 0
 3502 0054 FB68     		ldr	r3, [r7, #12]	@ tmp135, pxTCB
 3503 0056 7A68     		ldr	r2, [r7, #4]	@ tmp136, uxPriority
 3504 0058 DA62     		str	r2, [r3, #44]	@ tmp136, pxTCB_7(D)->uxPriority
2740:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2741:FreeRTOS/tasks.c **** 	{
2742:FreeRTOS/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 114


 3505              		.loc 1 2742 0
 3506 005a FB68     		ldr	r3, [r7, #12]	@ tmp137, pxTCB
 3507 005c 7A68     		ldr	r2, [r7, #4]	@ tmp138, uxPriority
 3508 005e 9A64     		str	r2, [r3, #72]	@ tmp138, pxTCB_7(D)->uxBasePriority
2743:FreeRTOS/tasks.c **** 		pxTCB->uxMutexesHeld = 0;
 3509              		.loc 1 2743 0
 3510 0060 FB68     		ldr	r3, [r7, #12]	@ tmp139, pxTCB
 3511 0062 0022     		movs	r2, #0	@ tmp140,
 3512 0064 DA64     		str	r2, [r3, #76]	@ tmp140, pxTCB_7(D)->uxMutexesHeld
2744:FreeRTOS/tasks.c **** 	}
2745:FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
2746:FreeRTOS/tasks.c **** 
2747:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 3513              		.loc 1 2747 0
 3514 0066 FB68     		ldr	r3, [r7, #12]	@ tmp141, pxTCB
 3515 0068 0433     		adds	r3, r3, #4	@ D.6586, tmp141,
 3516 006a 1846     		mov	r0, r3	@, D.6586
 3517 006c FFF7FEFF 		bl	vListInitialiseItem	@
2748:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 3518              		.loc 1 2748 0
 3519 0070 FB68     		ldr	r3, [r7, #12]	@ tmp142, pxTCB
 3520 0072 1833     		adds	r3, r3, #24	@ D.6586, tmp142,
 3521 0074 1846     		mov	r0, r3	@, D.6586
 3522 0076 FFF7FEFF 		bl	vListInitialiseItem	@
2749:FreeRTOS/tasks.c **** 
2750:FreeRTOS/tasks.c **** 	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
2751:FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2752:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 3523              		.loc 1 2752 0
 3524 007a FB68     		ldr	r3, [r7, #12]	@ tmp143, pxTCB
 3525 007c FA68     		ldr	r2, [r7, #12]	@ tmp144, pxTCB
 3526 007e 1A61     		str	r2, [r3, #16]	@ tmp144, pxTCB_7(D)->xGenericListItem.pvOwner
2753:FreeRTOS/tasks.c **** 
2754:FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
2755:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( TickT_t 
 3527              		.loc 1 2755 0
 3528 0080 7B68     		ldr	r3, [r7, #4]	@ tmp145, uxPriority
 3529 0082 C3F10802 		rsb	r2, r3, #8	@ D.6587, tmp145,
 3530 0086 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 3531 0088 9A61     		str	r2, [r3, #24]	@ D.6587, pxTCB_7(D)->xEventListItem.xItemValue
2756:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3532              		.loc 1 2756 0
 3533 008a FB68     		ldr	r3, [r7, #12]	@ tmp147, pxTCB
 3534 008c FA68     		ldr	r2, [r7, #12]	@ tmp148, pxTCB
 3535 008e 5A62     		str	r2, [r3, #36]	@ tmp148, pxTCB_7(D)->xEventListItem.pvOwner
2757:FreeRTOS/tasks.c **** 
2758:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2759:FreeRTOS/tasks.c **** 	{
2760:FreeRTOS/tasks.c **** 		pxTCB->uxCriticalNesting = ( UBaseT_t ) 0U;
2761:FreeRTOS/tasks.c **** 	}
2762:FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
2763:FreeRTOS/tasks.c **** 
2764:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2765:FreeRTOS/tasks.c **** 	{
2766:FreeRTOS/tasks.c **** 		pxTCB->pxTaskTag = NULL;
2767:FreeRTOS/tasks.c **** 	}
2768:FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 115


2769:FreeRTOS/tasks.c **** 
2770:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2771:FreeRTOS/tasks.c **** 	{
2772:FreeRTOS/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
2773:FreeRTOS/tasks.c **** 	}
2774:FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
2775:FreeRTOS/tasks.c **** 
2776:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2777:FreeRTOS/tasks.c **** 	{
2778:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2779:FreeRTOS/tasks.c **** 	}
2780:FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
2781:FreeRTOS/tasks.c **** 	{
2782:FreeRTOS/tasks.c **** 		( void ) xRegions;
2783:FreeRTOS/tasks.c **** 		( void ) usStackDepth;
2784:FreeRTOS/tasks.c **** 	}
2785:FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
2786:FreeRTOS/tasks.c **** 
2787:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
2788:FreeRTOS/tasks.c **** 	{
2789:FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
2790:FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
2791:FreeRTOS/tasks.c **** 	}
2792:FreeRTOS/tasks.c **** 	#endif /* configUSE_NEWLIB_REENTRANT */
2793:FreeRTOS/tasks.c **** }
 3536              		.loc 1 2793 0
 3537 0090 1837     		adds	r7, r7, #24	@,,
 3538              		.cfi_def_cfa_offset 8
 3539 0092 BD46     		mov	sp, r7	@,
 3540              		.cfi_def_cfa_register 13
 3541              		@ sp needed	@
 3542 0094 80BD     		pop	{r7, pc}	@
 3543              		.cfi_endproc
 3544              	.LFE31:
 3545              		.size	prvInitialiseTCBVariables, .-prvInitialiseTCBVariables
 3546 0096 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3547              		.align	2
 3548              		.thumb
 3549              		.thumb_func
 3550              		.type	prvInitialiseTaskLists, %function
 3551              	prvInitialiseTaskLists:
 3552              	.LFB32:
2794:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2795:FreeRTOS/tasks.c **** 
2796:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2797:FreeRTOS/tasks.c **** 
2798:FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
2799:FreeRTOS/tasks.c **** 	{
2800:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
2801:FreeRTOS/tasks.c **** 
2802:FreeRTOS/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2803:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2804:FreeRTOS/tasks.c **** 
2805:FreeRTOS/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2806:FreeRTOS/tasks.c **** 	}
2807:FreeRTOS/tasks.c **** 
2808:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 116


2809:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2810:FreeRTOS/tasks.c **** 
2811:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
2812:FreeRTOS/tasks.c **** {
 3553              		.loc 1 2812 0
 3554              		.cfi_startproc
 3555              		@ args = 0, pretend = 0, frame = 8
 3556              		@ frame_needed = 1, uses_anonymous_args = 0
 3557 0000 80B5     		push	{r7, lr}	@
 3558              		.cfi_def_cfa_offset 8
 3559              		.cfi_offset 7, -8
 3560              		.cfi_offset 14, -4
 3561 0002 82B0     		sub	sp, sp, #8	@,,
 3562              		.cfi_def_cfa_offset 16
 3563 0004 00AF     		add	r7, sp, #0	@,,
 3564              		.cfi_def_cfa_register 7
2813:FreeRTOS/tasks.c **** UBaseT_t uxPriority;
2814:FreeRTOS/tasks.c **** 
2815:FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseT_t ) 0U; uxPriority < ( UBaseT_t ) configMAX_PRIORITIES; uxPriority++ )
 3565              		.loc 1 2815 0
 3566 0006 0023     		movs	r3, #0	@ tmp111,
 3567 0008 7B60     		str	r3, [r7, #4]	@ tmp111, uxPriority
 3568 000a 0CE0     		b	.L263	@
 3569              	.L264:
2816:FreeRTOS/tasks.c **** 	{
2817:FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3570              		.loc 1 2817 0 discriminator 3
 3571 000c 7A68     		ldr	r2, [r7, #4]	@ tmp112, uxPriority
 3572 000e 1346     		mov	r3, r2	@ tmp113, tmp112
 3573 0010 9B00     		lsls	r3, r3, #2	@ tmp113, tmp113,
 3574 0012 1344     		add	r3, r3, r2	@ tmp113, tmp112
 3575 0014 9B00     		lsls	r3, r3, #2	@ tmp114, tmp113,
 3576 0016 114A     		ldr	r2, .L265	@ tmp115,
 3577 0018 1344     		add	r3, r3, r2	@ D.6588, tmp115
 3578 001a 1846     		mov	r0, r3	@, D.6588
 3579 001c FFF7FEFF 		bl	vListInitialise	@
2815:FreeRTOS/tasks.c **** 	{
 3580              		.loc 1 2815 0 discriminator 3
 3581 0020 7B68     		ldr	r3, [r7, #4]	@ tmp117, uxPriority
 3582 0022 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 3583 0024 7B60     		str	r3, [r7, #4]	@ tmp116, uxPriority
 3584              	.L263:
2815:FreeRTOS/tasks.c **** 	{
 3585              		.loc 1 2815 0 is_stmt 0 discriminator 1
 3586 0026 7B68     		ldr	r3, [r7, #4]	@ tmp118, uxPriority
 3587 0028 072B     		cmp	r3, #7	@ tmp118,
 3588 002a EFD9     		bls	.L264	@,
2818:FreeRTOS/tasks.c **** 	}
2819:FreeRTOS/tasks.c **** 
2820:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3589              		.loc 1 2820 0 is_stmt 1
 3590 002c 0C48     		ldr	r0, .L265+4	@,
 3591 002e FFF7FEFF 		bl	vListInitialise	@
2821:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3592              		.loc 1 2821 0
 3593 0032 0C48     		ldr	r0, .L265+8	@,
 3594 0034 FFF7FEFF 		bl	vListInitialise	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 117


2822:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3595              		.loc 1 2822 0
 3596 0038 0B48     		ldr	r0, .L265+12	@,
 3597 003a FFF7FEFF 		bl	vListInitialise	@
2823:FreeRTOS/tasks.c **** 
2824:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2825:FreeRTOS/tasks.c **** 	{
2826:FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3598              		.loc 1 2826 0
 3599 003e 0B48     		ldr	r0, .L265+16	@,
 3600 0040 FFF7FEFF 		bl	vListInitialise	@
2827:FreeRTOS/tasks.c **** 	}
2828:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
2829:FreeRTOS/tasks.c **** 
2830:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2831:FreeRTOS/tasks.c **** 	{
2832:FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3601              		.loc 1 2832 0
 3602 0044 0A48     		ldr	r0, .L265+20	@,
 3603 0046 FFF7FEFF 		bl	vListInitialise	@
2833:FreeRTOS/tasks.c **** 	}
2834:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
2835:FreeRTOS/tasks.c **** 
2836:FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2837:FreeRTOS/tasks.c **** 	using list2. */
2838:FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3604              		.loc 1 2838 0
 3605 004a 0A4B     		ldr	r3, .L265+24	@ tmp119,
 3606 004c 044A     		ldr	r2, .L265+4	@ tmp120,
 3607 004e 1A60     		str	r2, [r3]	@ tmp120, pxDelayedTaskList
2839:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3608              		.loc 1 2839 0
 3609 0050 094B     		ldr	r3, .L265+28	@ tmp121,
 3610 0052 044A     		ldr	r2, .L265+8	@ tmp122,
 3611 0054 1A60     		str	r2, [r3]	@ tmp122, pxOverflowDelayedTaskList
2840:FreeRTOS/tasks.c **** }
 3612              		.loc 1 2840 0
 3613 0056 0837     		adds	r7, r7, #8	@,,
 3614              		.cfi_def_cfa_offset 8
 3615 0058 BD46     		mov	sp, r7	@,
 3616              		.cfi_def_cfa_register 13
 3617              		@ sp needed	@
 3618 005a 80BD     		pop	{r7, pc}	@
 3619              	.L266:
 3620              		.align	2
 3621              	.L265:
 3622 005c 00000000 		.word	pxReadyTasksLists
 3623 0060 00000000 		.word	xDelayedTaskList1
 3624 0064 00000000 		.word	xDelayedTaskList2
 3625 0068 00000000 		.word	xPendingReadyList
 3626 006c 00000000 		.word	xTasksWaitingTermination
 3627 0070 00000000 		.word	xSuspendedTaskList
 3628 0074 00000000 		.word	pxDelayedTaskList
 3629 0078 00000000 		.word	pxOverflowDelayedTaskList
 3630              		.cfi_endproc
 3631              	.LFE32:
 3632              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 118


 3633              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3634              		.align	2
 3635              		.thumb
 3636              		.thumb_func
 3637              		.type	prvCheckTasksWaitingTermination, %function
 3638              	prvCheckTasksWaitingTermination:
 3639              	.LFB33:
2841:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2842:FreeRTOS/tasks.c **** 
2843:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2844:FreeRTOS/tasks.c **** {
 3640              		.loc 1 2844 0
 3641              		.cfi_startproc
 3642              		@ args = 0, pretend = 0, frame = 8
 3643              		@ frame_needed = 1, uses_anonymous_args = 0
 3644 0000 80B5     		push	{r7, lr}	@
 3645              		.cfi_def_cfa_offset 8
 3646              		.cfi_offset 7, -8
 3647              		.cfi_offset 14, -4
 3648 0002 82B0     		sub	sp, sp, #8	@,,
 3649              		.cfi_def_cfa_offset 16
 3650 0004 00AF     		add	r7, sp, #0	@,,
 3651              		.cfi_def_cfa_register 7
 3652              	.LBB15:
2845:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2846:FreeRTOS/tasks.c **** 	{
2847:FreeRTOS/tasks.c **** 		BaseT_t xListIsEmpty;
2848:FreeRTOS/tasks.c **** 
2849:FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2850:FreeRTOS/tasks.c **** 		too often in the idle task. */
2851:FreeRTOS/tasks.c **** 		while( uxTasksDeleted > ( UBaseT_t ) 0U )
 3653              		.loc 1 2851 0
 3654 0006 28E0     		b	.L268	@
 3655              	.L269:
2852:FreeRTOS/tasks.c **** 		{
2853:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 3656              		.loc 1 2853 0
 3657 0008 FFF7FEFF 		bl	vTaskSuspendAll	@
2854:FreeRTOS/tasks.c **** 			{
2855:FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3658              		.loc 1 2855 0
 3659 000c 164B     		ldr	r3, .L270	@ tmp119,
 3660 000e 1B68     		ldr	r3, [r3]	@ D.6589, xTasksWaitingTermination.uxNumberOfItems
 3661 0010 002B     		cmp	r3, #0	@ D.6589,
 3662 0012 0CBF     		ite	eq
 3663 0014 0123     		moveq	r3, #1	@ tmp121,
 3664 0016 0023     		movne	r3, #0	@ tmp121,
 3665 0018 DBB2     		uxtb	r3, r3	@ D.6590, tmp120
 3666 001a 7B60     		str	r3, [r7, #4]	@ D.6590, xListIsEmpty
2856:FreeRTOS/tasks.c **** 			}
2857:FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
 3667              		.loc 1 2857 0
 3668 001c FFF7FEFF 		bl	xTaskResumeAll	@
2858:FreeRTOS/tasks.c **** 
2859:FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3669              		.loc 1 2859 0
 3670 0020 7B68     		ldr	r3, [r7, #4]	@ tmp122, xListIsEmpty
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 119


 3671 0022 002B     		cmp	r3, #0	@ tmp122,
 3672 0024 19D1     		bne	.L268	@,
 3673              	.LBB16:
2860:FreeRTOS/tasks.c **** 			{
2861:FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
2862:FreeRTOS/tasks.c **** 
2863:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
 3674              		.loc 1 2863 0
 3675 0026 FFF7FEFF 		bl	vPortEnterCritical	@
2864:FreeRTOS/tasks.c **** 				{
2865:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 3676              		.loc 1 2865 0
 3677 002a 0F4B     		ldr	r3, .L270	@ tmp123,
 3678 002c DB68     		ldr	r3, [r3, #12]	@ D.6591, xTasksWaitingTermination.xListEnd.pxNext
 3679 002e DB68     		ldr	r3, [r3, #12]	@ tmp124, _5->pvOwner
 3680 0030 3B60     		str	r3, [r7]	@ tmp124, pxTCB
2866:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 3681              		.loc 1 2866 0
 3682 0032 3B68     		ldr	r3, [r7]	@ tmp125, pxTCB
 3683 0034 0433     		adds	r3, r3, #4	@ D.6592, tmp125,
 3684 0036 1846     		mov	r0, r3	@, D.6592
 3685 0038 FFF7FEFF 		bl	uxListRemove	@
2867:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 3686              		.loc 1 2867 0
 3687 003c 0B4B     		ldr	r3, .L270+4	@ tmp126,
 3688 003e 1B68     		ldr	r3, [r3]	@ D.6589, uxCurrentNumberOfTasks
 3689 0040 013B     		subs	r3, r3, #1	@ D.6589, D.6589,
 3690 0042 0A4A     		ldr	r2, .L270+4	@ tmp127,
 3691 0044 1360     		str	r3, [r2]	@ D.6589, uxCurrentNumberOfTasks
2868:FreeRTOS/tasks.c **** 					--uxTasksDeleted;
 3692              		.loc 1 2868 0
 3693 0046 0A4B     		ldr	r3, .L270+8	@ tmp128,
 3694 0048 1B68     		ldr	r3, [r3]	@ D.6589, uxTasksDeleted
 3695 004a 013B     		subs	r3, r3, #1	@ D.6589, D.6589,
 3696 004c 084A     		ldr	r2, .L270+8	@ tmp129,
 3697 004e 1360     		str	r3, [r2]	@ D.6589, uxTasksDeleted
2869:FreeRTOS/tasks.c **** 				}
2870:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
 3698              		.loc 1 2870 0
 3699 0050 FFF7FEFF 		bl	vPortExitCritical	@
2871:FreeRTOS/tasks.c **** 
2872:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 3700              		.loc 1 2872 0
 3701 0054 3868     		ldr	r0, [r7]	@, pxTCB
 3702 0056 FFF7FEFF 		bl	prvDeleteTCB	@
 3703              	.L268:
 3704              	.LBE16:
2851:FreeRTOS/tasks.c **** 		{
 3705              		.loc 1 2851 0
 3706 005a 054B     		ldr	r3, .L270+8	@ tmp130,
 3707 005c 1B68     		ldr	r3, [r3]	@ D.6589, uxTasksDeleted
 3708 005e 002B     		cmp	r3, #0	@ D.6589,
 3709 0060 D2D1     		bne	.L269	@,
 3710              	.LBE15:
2873:FreeRTOS/tasks.c **** 			}
2874:FreeRTOS/tasks.c **** 			else
2875:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 120


2876:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2877:FreeRTOS/tasks.c **** 			}
2878:FreeRTOS/tasks.c **** 		}
2879:FreeRTOS/tasks.c **** 	}
2880:FreeRTOS/tasks.c **** 	#endif /* vTaskDelete */
2881:FreeRTOS/tasks.c **** }
 3711              		.loc 1 2881 0
 3712 0062 0837     		adds	r7, r7, #8	@,,
 3713              		.cfi_def_cfa_offset 8
 3714 0064 BD46     		mov	sp, r7	@,
 3715              		.cfi_def_cfa_register 13
 3716              		@ sp needed	@
 3717 0066 80BD     		pop	{r7, pc}	@
 3718              	.L271:
 3719              		.align	2
 3720              	.L270:
 3721 0068 00000000 		.word	xTasksWaitingTermination
 3722 006c 00000000 		.word	uxCurrentNumberOfTasks
 3723 0070 00000000 		.word	uxTasksDeleted
 3724              		.cfi_endproc
 3725              	.LFE33:
 3726              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3727              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 3728              		.align	2
 3729              		.thumb
 3730              		.thumb_func
 3731              		.type	prvAddCurrentTaskToDelayedList, %function
 3732              	prvAddCurrentTaskToDelayedList:
 3733              	.LFB34:
2882:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2883:FreeRTOS/tasks.c **** 
2884:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( const TickT_t xTimeToWake )
2885:FreeRTOS/tasks.c **** {
 3734              		.loc 1 2885 0
 3735              		.cfi_startproc
 3736              		@ args = 0, pretend = 0, frame = 8
 3737              		@ frame_needed = 1, uses_anonymous_args = 0
 3738 0000 80B5     		push	{r7, lr}	@
 3739              		.cfi_def_cfa_offset 8
 3740              		.cfi_offset 7, -8
 3741              		.cfi_offset 14, -4
 3742 0002 82B0     		sub	sp, sp, #8	@,,
 3743              		.cfi_def_cfa_offset 16
 3744 0004 00AF     		add	r7, sp, #0	@,,
 3745              		.cfi_def_cfa_register 7
 3746 0006 7860     		str	r0, [r7, #4]	@ xTimeToWake, xTimeToWake
2886:FreeRTOS/tasks.c **** 	/* The list item will be inserted in wake time order. */
2887:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3747              		.loc 1 2887 0
 3748 0008 134B     		ldr	r3, .L275	@ tmp119,
 3749 000a 1B68     		ldr	r3, [r3]	@ D.6593, pxCurrentTCB
 3750 000c 7A68     		ldr	r2, [r7, #4]	@ tmp120, xTimeToWake
 3751 000e 5A60     		str	r2, [r3, #4]	@ tmp120, _1->xGenericListItem.xItemValue
2888:FreeRTOS/tasks.c **** 
2889:FreeRTOS/tasks.c **** 	if( xTimeToWake < xTickCount )
 3752              		.loc 1 2889 0
 3753 0010 124B     		ldr	r3, .L275+4	@ tmp121,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 121


 3754 0012 1B68     		ldr	r3, [r3]	@ D.6594, xTickCount
 3755 0014 7A68     		ldr	r2, [r7, #4]	@ tmp122, xTimeToWake
 3756 0016 9A42     		cmp	r2, r3	@ tmp122, D.6594
 3757 0018 09D2     		bcs	.L273	@,
2890:FreeRTOS/tasks.c **** 	{
2891:FreeRTOS/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2892:FreeRTOS/tasks.c **** 		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3758              		.loc 1 2892 0
 3759 001a 114B     		ldr	r3, .L275+8	@ tmp123,
 3760 001c 1A68     		ldr	r2, [r3]	@ D.6595, pxOverflowDelayedTaskList
 3761 001e 0E4B     		ldr	r3, .L275	@ tmp124,
 3762 0020 1B68     		ldr	r3, [r3]	@ D.6593, pxCurrentTCB
 3763 0022 0433     		adds	r3, r3, #4	@ D.6596, D.6593,
 3764 0024 1046     		mov	r0, r2	@, D.6595
 3765 0026 1946     		mov	r1, r3	@, D.6596
 3766 0028 FFF7FEFF 		bl	vListInsert	@
 3767 002c 10E0     		b	.L272	@
 3768              	.L273:
2893:FreeRTOS/tasks.c **** 	}
2894:FreeRTOS/tasks.c **** 	else
2895:FreeRTOS/tasks.c **** 	{
2896:FreeRTOS/tasks.c **** 		/* The wake time has not overflowed, so the current block list is used. */
2897:FreeRTOS/tasks.c **** 		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 3769              		.loc 1 2897 0
 3770 002e 0D4B     		ldr	r3, .L275+12	@ tmp125,
 3771 0030 1A68     		ldr	r2, [r3]	@ D.6595, pxDelayedTaskList
 3772 0032 094B     		ldr	r3, .L275	@ tmp126,
 3773 0034 1B68     		ldr	r3, [r3]	@ D.6593, pxCurrentTCB
 3774 0036 0433     		adds	r3, r3, #4	@ D.6596, D.6593,
 3775 0038 1046     		mov	r0, r2	@, D.6595
 3776 003a 1946     		mov	r1, r3	@, D.6596
 3777 003c FFF7FEFF 		bl	vListInsert	@
2898:FreeRTOS/tasks.c **** 
2899:FreeRTOS/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2900:FreeRTOS/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2901:FreeRTOS/tasks.c **** 		too. */
2902:FreeRTOS/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 3778              		.loc 1 2902 0
 3779 0040 094B     		ldr	r3, .L275+16	@ tmp127,
 3780 0042 1B68     		ldr	r3, [r3]	@ D.6594, xNextTaskUnblockTime
 3781 0044 7A68     		ldr	r2, [r7, #4]	@ tmp128, xTimeToWake
 3782 0046 9A42     		cmp	r2, r3	@ tmp128, D.6594
 3783 0048 02D2     		bcs	.L272	@,
2903:FreeRTOS/tasks.c **** 		{
2904:FreeRTOS/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 3784              		.loc 1 2904 0
 3785 004a 074A     		ldr	r2, .L275+16	@ tmp129,
 3786 004c 7B68     		ldr	r3, [r7, #4]	@ tmp130, xTimeToWake
 3787 004e 1360     		str	r3, [r2]	@ tmp130, xNextTaskUnblockTime
 3788              	.L272:
2905:FreeRTOS/tasks.c **** 		}
2906:FreeRTOS/tasks.c **** 		else
2907:FreeRTOS/tasks.c **** 		{
2908:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2909:FreeRTOS/tasks.c **** 		}
2910:FreeRTOS/tasks.c **** 	}
2911:FreeRTOS/tasks.c **** }
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 122


 3789              		.loc 1 2911 0
 3790 0050 0837     		adds	r7, r7, #8	@,,
 3791              		.cfi_def_cfa_offset 8
 3792 0052 BD46     		mov	sp, r7	@,
 3793              		.cfi_def_cfa_register 13
 3794              		@ sp needed	@
 3795 0054 80BD     		pop	{r7, pc}	@
 3796              	.L276:
 3797 0056 00BF     		.align	2
 3798              	.L275:
 3799 0058 00000000 		.word	pxCurrentTCB
 3800 005c 00000000 		.word	xTickCount
 3801 0060 00000000 		.word	pxOverflowDelayedTaskList
 3802 0064 00000000 		.word	pxDelayedTaskList
 3803 0068 00000000 		.word	xNextTaskUnblockTime
 3804              		.cfi_endproc
 3805              	.LFE34:
 3806              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 3807              		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 3808              		.align	2
 3809              		.thumb
 3810              		.thumb_func
 3811              		.type	prvAllocateTCBAndStack, %function
 3812              	prvAllocateTCBAndStack:
 3813              	.LFB35:
2912:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2913:FreeRTOS/tasks.c **** 
2914:FreeRTOS/tasks.c **** static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackT_t * const puxStackBuffer 
2915:FreeRTOS/tasks.c **** {
 3814              		.loc 1 2915 0
 3815              		.cfi_startproc
 3816              		@ args = 0, pretend = 0, frame = 16
 3817              		@ frame_needed = 1, uses_anonymous_args = 0
 3818 0000 80B5     		push	{r7, lr}	@
 3819              		.cfi_def_cfa_offset 8
 3820              		.cfi_offset 7, -8
 3821              		.cfi_offset 14, -4
 3822 0002 84B0     		sub	sp, sp, #16	@,,
 3823              		.cfi_def_cfa_offset 24
 3824 0004 00AF     		add	r7, sp, #0	@,,
 3825              		.cfi_def_cfa_register 7
 3826 0006 0346     		mov	r3, r0	@ tmp119, usStackDepth
 3827 0008 3960     		str	r1, [r7]	@ puxStackBuffer, puxStackBuffer
 3828 000a FB80     		strh	r3, [r7, #6]	@ movhi	@ tmp120, usStackDepth
2916:FreeRTOS/tasks.c **** TCB_t *pxNewTCB;
2917:FreeRTOS/tasks.c **** 
2918:FreeRTOS/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2919:FreeRTOS/tasks.c **** 	the implementation of the port malloc function. */
2920:FreeRTOS/tasks.c **** 	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 3829              		.loc 1 2920 0
 3830 000c 5020     		movs	r0, #80	@,
 3831 000e FFF7FEFF 		bl	pvPortMalloc	@
 3832 0012 F860     		str	r0, [r7, #12]	@, pxNewTCB
2921:FreeRTOS/tasks.c **** 
2922:FreeRTOS/tasks.c **** 	if( pxNewTCB != NULL )
 3833              		.loc 1 2922 0
 3834 0014 FB68     		ldr	r3, [r7, #12]	@ tmp121, pxNewTCB
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 123


 3835 0016 002B     		cmp	r3, #0	@ tmp121,
 3836 0018 1FD0     		beq	.L278	@,
2923:FreeRTOS/tasks.c **** 	{
2924:FreeRTOS/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2925:FreeRTOS/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2926:FreeRTOS/tasks.c **** 		be deleted later if required. */
2927:FreeRTOS/tasks.c **** 		pxNewTCB->pxStack = ( StackT_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( S
 3837              		.loc 1 2927 0
 3838 001a 3B68     		ldr	r3, [r7]	@ tmp122, puxStackBuffer
 3839 001c 002B     		cmp	r3, #0	@ tmp122,
 3840 001e 06D1     		bne	.L279	@,
 3841              		.loc 1 2927 0 is_stmt 0 discriminator 1
 3842 0020 FB88     		ldrh	r3, [r7, #6]	@ D.6598, usStackDepth
 3843 0022 9B00     		lsls	r3, r3, #2	@ D.6598, D.6598,
 3844 0024 1846     		mov	r0, r3	@, D.6598
 3845 0026 FFF7FEFF 		bl	pvPortMalloc	@
 3846 002a 0346     		mov	r3, r0	@ D.6597,
 3847 002c 00E0     		b	.L280	@
 3848              	.L279:
 3849              		.loc 1 2927 0 discriminator 2
 3850 002e 3B68     		ldr	r3, [r7]	@ D.6597, puxStackBuffer
 3851              	.L280:
 3852              		.loc 1 2927 0 discriminator 4
 3853 0030 FA68     		ldr	r2, [r7, #12]	@ tmp123, pxNewTCB
 3854 0032 1363     		str	r3, [r2, #48]	@ D.6597, pxNewTCB_3->pxStack
2928:FreeRTOS/tasks.c **** 
2929:FreeRTOS/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3855              		.loc 1 2929 0 is_stmt 1 discriminator 4
 3856 0034 FB68     		ldr	r3, [r7, #12]	@ tmp124, pxNewTCB
 3857 0036 1B6B     		ldr	r3, [r3, #48]	@ D.6597, pxNewTCB_3->pxStack
 3858 0038 002B     		cmp	r3, #0	@ D.6597,
 3859 003a 05D1     		bne	.L281	@,
2930:FreeRTOS/tasks.c **** 		{
2931:FreeRTOS/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2932:FreeRTOS/tasks.c **** 			vPortFree( pxNewTCB );
 3860              		.loc 1 2932 0
 3861 003c F868     		ldr	r0, [r7, #12]	@, pxNewTCB
 3862 003e FFF7FEFF 		bl	vPortFree	@
2933:FreeRTOS/tasks.c **** 			pxNewTCB = NULL;
 3863              		.loc 1 2933 0
 3864 0042 0023     		movs	r3, #0	@ tmp125,
 3865 0044 FB60     		str	r3, [r7, #12]	@ tmp125, pxNewTCB
 3866 0046 08E0     		b	.L278	@
 3867              	.L281:
2934:FreeRTOS/tasks.c **** 		}
2935:FreeRTOS/tasks.c **** 		else
2936:FreeRTOS/tasks.c **** 		{
2937:FreeRTOS/tasks.c **** 			/* Avoid dependency on memset() if it is not required. */
2938:FreeRTOS/tasks.c **** 			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_ux
2939:FreeRTOS/tasks.c **** 			{
2940:FreeRTOS/tasks.c **** 				/* Just to help debugging. */
2941:FreeRTOS/tasks.c **** 				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeo
 3868              		.loc 1 2941 0
 3869 0048 FB68     		ldr	r3, [r7, #12]	@ tmp126, pxNewTCB
 3870 004a 1A6B     		ldr	r2, [r3, #48]	@ D.6597, pxNewTCB_3->pxStack
 3871 004c FB88     		ldrh	r3, [r7, #6]	@ D.6598, usStackDepth
 3872 004e 9B00     		lsls	r3, r3, #2	@ D.6598, D.6598,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 124


 3873 0050 1046     		mov	r0, r2	@, D.6597
 3874 0052 A521     		movs	r1, #165	@,
 3875 0054 1A46     		mov	r2, r3	@, D.6598
 3876 0056 FFF7FEFF 		bl	memset	@
 3877              	.L278:
2942:FreeRTOS/tasks.c **** 			}
2943:FreeRTOS/tasks.c **** 			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( I
2944:FreeRTOS/tasks.c **** 		}
2945:FreeRTOS/tasks.c **** 	}
2946:FreeRTOS/tasks.c **** 
2947:FreeRTOS/tasks.c **** 	return pxNewTCB;
 3878              		.loc 1 2947 0
 3879 005a FB68     		ldr	r3, [r7, #12]	@ D.6599, pxNewTCB
2948:FreeRTOS/tasks.c **** }
 3880              		.loc 1 2948 0
 3881 005c 1846     		mov	r0, r3	@, <retval>
 3882 005e 1037     		adds	r7, r7, #16	@,,
 3883              		.cfi_def_cfa_offset 8
 3884 0060 BD46     		mov	sp, r7	@,
 3885              		.cfi_def_cfa_register 13
 3886              		@ sp needed	@
 3887 0062 80BD     		pop	{r7, pc}	@
 3888              		.cfi_endproc
 3889              	.LFE35:
 3890              		.size	prvAllocateTCBAndStack, .-prvAllocateTCBAndStack
 3891              		.section	.text.prvListTaskWithinSingleList,"ax",%progbits
 3892              		.align	2
 3893              		.thumb
 3894              		.thumb_func
 3895              		.type	prvListTaskWithinSingleList, %function
 3896              	prvListTaskWithinSingleList:
 3897              	.LFB36:
2949:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2950:FreeRTOS/tasks.c **** 
2951:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2952:FreeRTOS/tasks.c **** 
2953:FreeRTOS/tasks.c **** 	static UBaseT_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTas
2954:FreeRTOS/tasks.c **** 	{
 3898              		.loc 1 2954 0
 3899              		.cfi_startproc
 3900              		@ args = 0, pretend = 0, frame = 40
 3901              		@ frame_needed = 1, uses_anonymous_args = 0
 3902 0000 90B5     		push	{r4, r7, lr}	@
 3903              		.cfi_def_cfa_offset 12
 3904              		.cfi_offset 4, -12
 3905              		.cfi_offset 7, -8
 3906              		.cfi_offset 14, -4
 3907 0002 8BB0     		sub	sp, sp, #44	@,,
 3908              		.cfi_def_cfa_offset 56
 3909 0004 00AF     		add	r7, sp, #0	@,,
 3910              		.cfi_def_cfa_register 7
 3911 0006 F860     		str	r0, [r7, #12]	@ pxTaskStatusArray, pxTaskStatusArray
 3912 0008 B960     		str	r1, [r7, #8]	@ pxList, pxList
 3913 000a 1346     		mov	r3, r2	@ tmp152, eState
 3914 000c FB71     		strb	r3, [r7, #7]	@ tmp153, eState
2955:FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
2956:FreeRTOS/tasks.c **** 	UBaseT_t uxTask = 0;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 125


 3915              		.loc 1 2956 0
 3916 000e 0023     		movs	r3, #0	@ tmp154,
 3917 0010 7B62     		str	r3, [r7, #36]	@ tmp154, uxTask
2957:FreeRTOS/tasks.c **** 
2958:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseT_t ) 0 )
 3918              		.loc 1 2958 0
 3919 0012 BB68     		ldr	r3, [r7, #8]	@ tmp155, pxList
 3920 0014 1B68     		ldr	r3, [r3]	@ D.6600, pxList_4(D)->uxNumberOfItems
 3921 0016 002B     		cmp	r3, #0	@ D.6600,
 3922 0018 78D0     		beq	.L284	@,
 3923              	.LBB17:
2959:FreeRTOS/tasks.c **** 		{
2960:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3924              		.loc 1 2960 0
 3925 001a BB68     		ldr	r3, [r7, #8]	@ tmp156, pxList
 3926 001c 3B62     		str	r3, [r7, #32]	@ tmp156, pxConstList
 3927 001e 3B6A     		ldr	r3, [r7, #32]	@ tmp157, pxConstList
 3928 0020 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_6->pxIndex
 3929 0022 5A68     		ldr	r2, [r3, #4]	@ D.6602, _7->pxNext
 3930 0024 3B6A     		ldr	r3, [r7, #32]	@ tmp158, pxConstList
 3931 0026 5A60     		str	r2, [r3, #4]	@ D.6602, pxConstList_6->pxIndex
 3932 0028 3B6A     		ldr	r3, [r7, #32]	@ tmp159, pxConstList
 3933 002a 5A68     		ldr	r2, [r3, #4]	@ D.6601, pxConstList_6->pxIndex
 3934 002c 3B6A     		ldr	r3, [r7, #32]	@ tmp160, pxConstList
 3935 002e 0833     		adds	r3, r3, #8	@ D.6603, tmp160,
 3936 0030 9A42     		cmp	r2, r3	@ D.6601, D.6603
 3937 0032 04D1     		bne	.L285	@,
 3938              		.loc 1 2960 0 is_stmt 0 discriminator 1
 3939 0034 3B6A     		ldr	r3, [r7, #32]	@ tmp161, pxConstList
 3940 0036 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_6->pxIndex
 3941 0038 5A68     		ldr	r2, [r3, #4]	@ D.6602, _11->pxNext
 3942 003a 3B6A     		ldr	r3, [r7, #32]	@ tmp162, pxConstList
 3943 003c 5A60     		str	r2, [r3, #4]	@ D.6602, pxConstList_6->pxIndex
 3944              	.L285:
 3945              		.loc 1 2960 0 discriminator 3
 3946 003e 3B6A     		ldr	r3, [r7, #32]	@ tmp163, pxConstList
 3947 0040 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_6->pxIndex
 3948 0042 DB68     		ldr	r3, [r3, #12]	@ tmp164, _13->pvOwner
 3949 0044 FB61     		str	r3, [r7, #28]	@ tmp164, pxFirstTCB
 3950              	.L288:
 3951              	.LBE17:
 3952              	.LBB18:
2961:FreeRTOS/tasks.c **** 
2962:FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
2963:FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
2964:FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
2965:FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
2966:FreeRTOS/tasks.c **** 			do
2967:FreeRTOS/tasks.c **** 			{
2968:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3953              		.loc 1 2968 0 is_stmt 1
 3954 0046 BB68     		ldr	r3, [r7, #8]	@ tmp165, pxList
 3955 0048 BB61     		str	r3, [r7, #24]	@ tmp165, pxConstList
 3956 004a BB69     		ldr	r3, [r7, #24]	@ tmp166, pxConstList
 3957 004c 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_15->pxIndex
 3958 004e 5A68     		ldr	r2, [r3, #4]	@ D.6602, _16->pxNext
 3959 0050 BB69     		ldr	r3, [r7, #24]	@ tmp167, pxConstList
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 126


 3960 0052 5A60     		str	r2, [r3, #4]	@ D.6602, pxConstList_15->pxIndex
 3961 0054 BB69     		ldr	r3, [r7, #24]	@ tmp168, pxConstList
 3962 0056 5A68     		ldr	r2, [r3, #4]	@ D.6601, pxConstList_15->pxIndex
 3963 0058 BB69     		ldr	r3, [r7, #24]	@ tmp169, pxConstList
 3964 005a 0833     		adds	r3, r3, #8	@ D.6603, tmp169,
 3965 005c 9A42     		cmp	r2, r3	@ D.6601, D.6603
 3966 005e 04D1     		bne	.L286	@,
 3967              		.loc 1 2968 0 is_stmt 0 discriminator 1
 3968 0060 BB69     		ldr	r3, [r7, #24]	@ tmp170, pxConstList
 3969 0062 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_15->pxIndex
 3970 0064 5A68     		ldr	r2, [r3, #4]	@ D.6602, _20->pxNext
 3971 0066 BB69     		ldr	r3, [r7, #24]	@ tmp171, pxConstList
 3972 0068 5A60     		str	r2, [r3, #4]	@ D.6602, pxConstList_15->pxIndex
 3973              	.L286:
 3974              		.loc 1 2968 0 discriminator 3
 3975 006a BB69     		ldr	r3, [r7, #24]	@ tmp172, pxConstList
 3976 006c 5B68     		ldr	r3, [r3, #4]	@ D.6601, pxConstList_15->pxIndex
 3977 006e DB68     		ldr	r3, [r3, #12]	@ tmp173, _22->pvOwner
 3978 0070 7B61     		str	r3, [r7, #20]	@ tmp173, pxNextTCB
 3979              	.LBE18:
2969:FreeRTOS/tasks.c **** 
2970:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 3980              		.loc 1 2970 0 is_stmt 1 discriminator 3
 3981 0072 7B6A     		ldr	r3, [r7, #36]	@ tmp174, uxTask
 3982 0074 5B01     		lsls	r3, r3, #5	@ D.6600, tmp174,
 3983 0076 FA68     		ldr	r2, [r7, #12]	@ tmp175, pxTaskStatusArray
 3984 0078 1344     		add	r3, r3, r2	@ D.6604, tmp175
 3985 007a 7A69     		ldr	r2, [r7, #20]	@ tmp176, pxNextTCB
 3986 007c 1A60     		str	r2, [r3]	@ tmp176, _26->xHandle
2971:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 3987              		.loc 1 2971 0 discriminator 3
 3988 007e 7B6A     		ldr	r3, [r7, #36]	@ tmp177, uxTask
 3989 0080 5B01     		lsls	r3, r3, #5	@ D.6600, tmp177,
 3990 0082 FA68     		ldr	r2, [r7, #12]	@ tmp178, pxTaskStatusArray
 3991 0084 1344     		add	r3, r3, r2	@ D.6604, tmp178
 3992 0086 7A69     		ldr	r2, [r7, #20]	@ tmp179, pxNextTCB
 3993 0088 3432     		adds	r2, r2, #52	@ D.6605, tmp179,
 3994 008a 5A60     		str	r2, [r3, #4]	@ D.6605, _28->pcTaskName
2972:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 3995              		.loc 1 2972 0 discriminator 3
 3996 008c 7B6A     		ldr	r3, [r7, #36]	@ tmp180, uxTask
 3997 008e 5B01     		lsls	r3, r3, #5	@ D.6600, tmp180,
 3998 0090 FA68     		ldr	r2, [r7, #12]	@ tmp181, pxTaskStatusArray
 3999 0092 1344     		add	r3, r3, r2	@ D.6604, tmp181
 4000 0094 7A69     		ldr	r2, [r7, #20]	@ tmp182, pxNextTCB
 4001 0096 126C     		ldr	r2, [r2, #64]	@ D.6600, pxNextTCB_23->uxTCBNumber
 4002 0098 9A60     		str	r2, [r3, #8]	@ D.6600, _31->xTaskNumber
2973:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 4003              		.loc 1 2973 0 discriminator 3
 4004 009a 7B6A     		ldr	r3, [r7, #36]	@ tmp183, uxTask
 4005 009c 5B01     		lsls	r3, r3, #5	@ D.6600, tmp183,
 4006 009e FA68     		ldr	r2, [r7, #12]	@ tmp184, pxTaskStatusArray
 4007 00a0 1344     		add	r3, r3, r2	@ D.6604, tmp184
 4008 00a2 FA79     		ldrb	r2, [r7, #7]	@ tmp185, eState
 4009 00a4 1A73     		strb	r2, [r3, #12]	@ tmp185, _34->eCurrentState
2974:FreeRTOS/tasks.c **** 				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 4010              		.loc 1 2974 0 discriminator 3
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 127


 4011 00a6 7B6A     		ldr	r3, [r7, #36]	@ tmp186, uxTask
 4012 00a8 5B01     		lsls	r3, r3, #5	@ D.6600, tmp186,
 4013 00aa FA68     		ldr	r2, [r7, #12]	@ tmp187, pxTaskStatusArray
 4014 00ac 1344     		add	r3, r3, r2	@ D.6604, tmp187
 4015 00ae 7A69     		ldr	r2, [r7, #20]	@ tmp188, pxNextTCB
 4016 00b0 D26A     		ldr	r2, [r2, #44]	@ D.6600, pxNextTCB_23->uxPriority
 4017 00b2 1A61     		str	r2, [r3, #16]	@ D.6600, _37->uxCurrentPriority
2975:FreeRTOS/tasks.c **** 
2976:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2977:FreeRTOS/tasks.c **** 				{
2978:FreeRTOS/tasks.c **** 					/* If the task is in the suspended list then there is a chance
2979:FreeRTOS/tasks.c **** 					it is actually just blocked indefinitely - so really it should
2980:FreeRTOS/tasks.c **** 					be reported as being in the Blocked state. */
2981:FreeRTOS/tasks.c **** 					if( eState == eSuspended )
 4018              		.loc 1 2981 0 discriminator 3
 4019 00b4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2	@ tmp189, eState
 4020 00b6 032B     		cmp	r3, #3	@ tmp189,
 4021 00b8 09D1     		bne	.L287	@,
2982:FreeRTOS/tasks.c **** 					{
2983:FreeRTOS/tasks.c **** 						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 4022              		.loc 1 2983 0
 4023 00ba 7B69     		ldr	r3, [r7, #20]	@ tmp190, pxNextTCB
 4024 00bc 9B6A     		ldr	r3, [r3, #40]	@ D.6606, pxNextTCB_23->xEventListItem.pvContainer
 4025 00be 002B     		cmp	r3, #0	@ D.6606,
 4026 00c0 05D0     		beq	.L287	@,
2984:FreeRTOS/tasks.c **** 						{
2985:FreeRTOS/tasks.c **** 							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 4027              		.loc 1 2985 0
 4028 00c2 7B6A     		ldr	r3, [r7, #36]	@ tmp191, uxTask
 4029 00c4 5B01     		lsls	r3, r3, #5	@ D.6600, tmp191,
 4030 00c6 FA68     		ldr	r2, [r7, #12]	@ tmp192, pxTaskStatusArray
 4031 00c8 1344     		add	r3, r3, r2	@ D.6604, tmp192
 4032 00ca 0222     		movs	r2, #2	@ tmp193,
 4033 00cc 1A73     		strb	r2, [r3, #12]	@ tmp194, _41->eCurrentState
 4034              	.L287:
2986:FreeRTOS/tasks.c **** 						}
2987:FreeRTOS/tasks.c **** 					}
2988:FreeRTOS/tasks.c **** 				}
2989:FreeRTOS/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
2990:FreeRTOS/tasks.c **** 
2991:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
2992:FreeRTOS/tasks.c **** 				{
2993:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 4035              		.loc 1 2993 0
 4036 00ce 7B6A     		ldr	r3, [r7, #36]	@ tmp195, uxTask
 4037 00d0 5B01     		lsls	r3, r3, #5	@ D.6600, tmp195,
 4038 00d2 FA68     		ldr	r2, [r7, #12]	@ tmp196, pxTaskStatusArray
 4039 00d4 1344     		add	r3, r3, r2	@ D.6604, tmp196
 4040 00d6 7A69     		ldr	r2, [r7, #20]	@ tmp197, pxNextTCB
 4041 00d8 926C     		ldr	r2, [r2, #72]	@ D.6600, pxNextTCB_23->uxBasePriority
 4042 00da 5A61     		str	r2, [r3, #20]	@ D.6600, _43->uxBasePriority
2994:FreeRTOS/tasks.c **** 				}
2995:FreeRTOS/tasks.c **** 				#else
2996:FreeRTOS/tasks.c **** 				{
2997:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
2998:FreeRTOS/tasks.c **** 				}
2999:FreeRTOS/tasks.c **** 				#endif
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 128


3000:FreeRTOS/tasks.c **** 
3001:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1 )
3002:FreeRTOS/tasks.c **** 				{
3003:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
3004:FreeRTOS/tasks.c **** 				}
3005:FreeRTOS/tasks.c **** 				#else
3006:FreeRTOS/tasks.c **** 				{
3007:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
 4043              		.loc 1 3007 0
 4044 00dc 7B6A     		ldr	r3, [r7, #36]	@ tmp198, uxTask
 4045 00de 5B01     		lsls	r3, r3, #5	@ D.6600, tmp198,
 4046 00e0 FA68     		ldr	r2, [r7, #12]	@ tmp199, pxTaskStatusArray
 4047 00e2 1344     		add	r3, r3, r2	@ D.6604, tmp199
 4048 00e4 0022     		movs	r2, #0	@ tmp200,
 4049 00e6 9A61     		str	r2, [r3, #24]	@ tmp200, _46->ulRunTimeCounter
3008:FreeRTOS/tasks.c **** 				}
3009:FreeRTOS/tasks.c **** 				#endif
3010:FreeRTOS/tasks.c **** 
3011:FreeRTOS/tasks.c **** 				#if ( portSTACK_GROWTH > 0 )
3012:FreeRTOS/tasks.c **** 				{
3013:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
3014:FreeRTOS/tasks.c **** 				}
3015:FreeRTOS/tasks.c **** 				#else
3016:FreeRTOS/tasks.c **** 				{
3017:FreeRTOS/tasks.c **** 					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) p
 4050              		.loc 1 3017 0
 4051 00e8 7B6A     		ldr	r3, [r7, #36]	@ tmp201, uxTask
 4052 00ea 5B01     		lsls	r3, r3, #5	@ D.6600, tmp201,
 4053 00ec FA68     		ldr	r2, [r7, #12]	@ tmp202, pxTaskStatusArray
 4054 00ee D418     		adds	r4, r2, r3	@ D.6604, tmp202, D.6600
 4055 00f0 7B69     		ldr	r3, [r7, #20]	@ tmp203, pxNextTCB
 4056 00f2 1B6B     		ldr	r3, [r3, #48]	@ D.6607, pxNextTCB_23->pxStack
 4057 00f4 1846     		mov	r0, r3	@, D.6607
 4058 00f6 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4059 00fa 0346     		mov	r3, r0	@ tmp204,
 4060 00fc A383     		strh	r3, [r4, #28]	@ movhi	@ tmp205, _48->usStackHighWaterMark
3018:FreeRTOS/tasks.c **** 				}
3019:FreeRTOS/tasks.c **** 				#endif
3020:FreeRTOS/tasks.c **** 
3021:FreeRTOS/tasks.c **** 				uxTask++;
 4061              		.loc 1 3021 0
 4062 00fe 7B6A     		ldr	r3, [r7, #36]	@ tmp207, uxTask
 4063 0100 0133     		adds	r3, r3, #1	@ tmp206, tmp207,
 4064 0102 7B62     		str	r3, [r7, #36]	@ tmp206, uxTask
3022:FreeRTOS/tasks.c **** 
3023:FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4065              		.loc 1 3023 0
 4066 0104 7A69     		ldr	r2, [r7, #20]	@ tmp208, pxNextTCB
 4067 0106 FB69     		ldr	r3, [r7, #28]	@ tmp209, pxFirstTCB
 4068 0108 9A42     		cmp	r2, r3	@ tmp208, tmp209
 4069 010a 9CD1     		bne	.L288	@,
 4070              	.L284:
3024:FreeRTOS/tasks.c **** 		}
3025:FreeRTOS/tasks.c **** 		else
3026:FreeRTOS/tasks.c **** 		{
3027:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3028:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 129


3029:FreeRTOS/tasks.c **** 
3030:FreeRTOS/tasks.c **** 		return uxTask;
 4071              		.loc 1 3030 0
 4072 010c 7B6A     		ldr	r3, [r7, #36]	@ D.6609, uxTask
3031:FreeRTOS/tasks.c **** 	}
 4073              		.loc 1 3031 0
 4074 010e 1846     		mov	r0, r3	@, <retval>
 4075 0110 2C37     		adds	r7, r7, #44	@,,
 4076              		.cfi_def_cfa_offset 12
 4077 0112 BD46     		mov	sp, r7	@,
 4078              		.cfi_def_cfa_register 13
 4079              		@ sp needed	@
 4080 0114 90BD     		pop	{r4, r7, pc}	@
 4081              		.cfi_endproc
 4082              	.LFE36:
 4083              		.size	prvListTaskWithinSingleList, .-prvListTaskWithinSingleList
 4084 0116 00BF     		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 4085              		.align	2
 4086              		.thumb
 4087              		.thumb_func
 4088              		.type	prvTaskCheckFreeStackSpace, %function
 4089              	prvTaskCheckFreeStackSpace:
 4090              	.LFB37:
3032:FreeRTOS/tasks.c **** 
3033:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3034:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3035:FreeRTOS/tasks.c **** 
3036:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3037:FreeRTOS/tasks.c **** 
3038:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3039:FreeRTOS/tasks.c **** 	{
 4091              		.loc 1 3039 0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 16
 4094              		@ frame_needed = 1, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 4096 0000 80B4     		push	{r7}	@
 4097              		.cfi_def_cfa_offset 4
 4098              		.cfi_offset 7, -4
 4099 0002 85B0     		sub	sp, sp, #20	@,,
 4100              		.cfi_def_cfa_offset 24
 4101 0004 00AF     		add	r7, sp, #0	@,,
 4102              		.cfi_def_cfa_register 7
 4103 0006 7860     		str	r0, [r7, #4]	@ pucStackByte, pucStackByte
3040:FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
 4104              		.loc 1 3040 0
 4105 0008 0023     		movs	r3, #0	@ tmp113,
 4106 000a FB60     		str	r3, [r7, #12]	@ tmp113, ulCount
3041:FreeRTOS/tasks.c **** 
3042:FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 4107              		.loc 1 3042 0
 4108 000c 05E0     		b	.L291	@
 4109              	.L292:
3043:FreeRTOS/tasks.c **** 		{
3044:FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 4110              		.loc 1 3044 0
 4111 000e 7B68     		ldr	r3, [r7, #4]	@ tmp115, pucStackByte
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 130


 4112 0010 0133     		adds	r3, r3, #1	@ tmp114, tmp115,
 4113 0012 7B60     		str	r3, [r7, #4]	@ tmp114, pucStackByte
3045:FreeRTOS/tasks.c **** 			ulCount++;
 4114              		.loc 1 3045 0
 4115 0014 FB68     		ldr	r3, [r7, #12]	@ tmp117, ulCount
 4116 0016 0133     		adds	r3, r3, #1	@ tmp116, tmp117,
 4117 0018 FB60     		str	r3, [r7, #12]	@ tmp116, ulCount
 4118              	.L291:
3042:FreeRTOS/tasks.c **** 		{
 4119              		.loc 1 3042 0
 4120 001a 7B68     		ldr	r3, [r7, #4]	@ tmp118, pucStackByte
 4121 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2	@ D.6610, *pucStackByte_1
 4122 001e A52B     		cmp	r3, #165	@ D.6610,
 4123 0020 F5D0     		beq	.L292	@,
3046:FreeRTOS/tasks.c **** 		}
3047:FreeRTOS/tasks.c **** 
3048:FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackT_t ); /*lint !e961 Casting is not redundant on smaller arch
 4124              		.loc 1 3048 0
 4125 0022 FB68     		ldr	r3, [r7, #12]	@ tmp120, ulCount
 4126 0024 9B08     		lsrs	r3, r3, #2	@ tmp119, tmp120,
 4127 0026 FB60     		str	r3, [r7, #12]	@ tmp119, ulCount
3049:FreeRTOS/tasks.c **** 
3050:FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
 4128              		.loc 1 3050 0
 4129 0028 FB68     		ldr	r3, [r7, #12]	@ tmp121, ulCount
 4130 002a 9BB2     		uxth	r3, r3	@ D.6611, tmp121
3051:FreeRTOS/tasks.c **** 	}
 4131              		.loc 1 3051 0
 4132 002c 1846     		mov	r0, r3	@, <retval>
 4133 002e 1437     		adds	r7, r7, #20	@,,
 4134              		.cfi_def_cfa_offset 4
 4135 0030 BD46     		mov	sp, r7	@,
 4136              		.cfi_def_cfa_register 13
 4137              		@ sp needed	@
 4138 0032 5DF8047B 		ldr	r7, [sp], #4	@,
 4139              		.cfi_restore 7
 4140              		.cfi_def_cfa_offset 0
 4141 0036 7047     		bx	lr	@
 4142              		.cfi_endproc
 4143              	.LFE37:
 4144              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 4145              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4146              		.align	2
 4147              		.global	uxTaskGetStackHighWaterMark
 4148              		.thumb
 4149              		.thumb_func
 4150              		.type	uxTaskGetStackHighWaterMark, %function
 4151              	uxTaskGetStackHighWaterMark:
 4152              	.LFB38:
3052:FreeRTOS/tasks.c **** 
3053:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3054:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3055:FreeRTOS/tasks.c **** 
3056:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3057:FreeRTOS/tasks.c **** 
3058:FreeRTOS/tasks.c **** 	UBaseT_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3059:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 131


 4153              		.loc 1 3059 0
 4154              		.cfi_startproc
 4155              		@ args = 0, pretend = 0, frame = 24
 4156              		@ frame_needed = 1, uses_anonymous_args = 0
 4157 0000 80B5     		push	{r7, lr}	@
 4158              		.cfi_def_cfa_offset 8
 4159              		.cfi_offset 7, -8
 4160              		.cfi_offset 14, -4
 4161 0002 86B0     		sub	sp, sp, #24	@,,
 4162              		.cfi_def_cfa_offset 32
 4163 0004 00AF     		add	r7, sp, #0	@,,
 4164              		.cfi_def_cfa_register 7
 4165 0006 7860     		str	r0, [r7, #4]	@ xTask, xTask
3060:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3061:FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3062:FreeRTOS/tasks.c **** 	UBaseT_t uxReturn;
3063:FreeRTOS/tasks.c **** 
3064:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4166              		.loc 1 3064 0
 4167 0008 7B68     		ldr	r3, [r7, #4]	@ tmp114, xTask
 4168 000a 002B     		cmp	r3, #0	@ tmp114,
 4169 000c 02D1     		bne	.L295	@,
 4170              		.loc 1 3064 0 is_stmt 0 discriminator 1
 4171 000e 094B     		ldr	r3, .L298	@ tmp115,
 4172 0010 1B68     		ldr	r3, [r3]	@ D.6612, pxCurrentTCB
 4173 0012 00E0     		b	.L296	@
 4174              	.L295:
 4175              		.loc 1 3064 0 discriminator 2
 4176 0014 7B68     		ldr	r3, [r7, #4]	@ D.6612, xTask
 4177              	.L296:
 4178              		.loc 1 3064 0 discriminator 4
 4179 0016 7B61     		str	r3, [r7, #20]	@ D.6612, pxTCB
3065:FreeRTOS/tasks.c **** 
3066:FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3067:FreeRTOS/tasks.c **** 		{
3068:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 4180              		.loc 1 3068 0 is_stmt 1 discriminator 4
 4181 0018 7B69     		ldr	r3, [r7, #20]	@ tmp116, pxTCB
 4182 001a 1B6B     		ldr	r3, [r3, #48]	@ tmp117, pxTCB_5->pxStack
 4183 001c 3B61     		str	r3, [r7, #16]	@ tmp117, pucEndOfStack
3069:FreeRTOS/tasks.c **** 		}
3070:FreeRTOS/tasks.c **** 		#else
3071:FreeRTOS/tasks.c **** 		{
3072:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3073:FreeRTOS/tasks.c **** 		}
3074:FreeRTOS/tasks.c **** 		#endif
3075:FreeRTOS/tasks.c **** 
3076:FreeRTOS/tasks.c **** 		uxReturn = ( UBaseT_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 4184              		.loc 1 3076 0 discriminator 4
 4185 001e 3869     		ldr	r0, [r7, #16]	@, pucEndOfStack
 4186 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace	@
 4187 0024 0346     		mov	r3, r0	@ tmp118,
 4188 0026 FB60     		str	r3, [r7, #12]	@ D.6613, uxReturn
3077:FreeRTOS/tasks.c **** 
3078:FreeRTOS/tasks.c **** 		return uxReturn;
 4189              		.loc 1 3078 0 discriminator 4
 4190 0028 FB68     		ldr	r3, [r7, #12]	@ D.6614, uxReturn
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 132


3079:FreeRTOS/tasks.c **** 	}
 4191              		.loc 1 3079 0 discriminator 4
 4192 002a 1846     		mov	r0, r3	@, <retval>
 4193 002c 1837     		adds	r7, r7, #24	@,,
 4194              		.cfi_def_cfa_offset 8
 4195 002e BD46     		mov	sp, r7	@,
 4196              		.cfi_def_cfa_register 13
 4197              		@ sp needed	@
 4198 0030 80BD     		pop	{r7, pc}	@
 4199              	.L299:
 4200 0032 00BF     		.align	2
 4201              	.L298:
 4202 0034 00000000 		.word	pxCurrentTCB
 4203              		.cfi_endproc
 4204              	.LFE38:
 4205              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 4206              		.section	.text.prvDeleteTCB,"ax",%progbits
 4207              		.align	2
 4208              		.thumb
 4209              		.thumb_func
 4210              		.type	prvDeleteTCB, %function
 4211              	prvDeleteTCB:
 4212              	.LFB39:
3080:FreeRTOS/tasks.c **** 
3081:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3082:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3083:FreeRTOS/tasks.c **** 
3084:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3085:FreeRTOS/tasks.c **** 
3086:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3087:FreeRTOS/tasks.c **** 	{
 4213              		.loc 1 3087 0
 4214              		.cfi_startproc
 4215              		@ args = 0, pretend = 0, frame = 8
 4216              		@ frame_needed = 1, uses_anonymous_args = 0
 4217 0000 80B5     		push	{r7, lr}	@
 4218              		.cfi_def_cfa_offset 8
 4219              		.cfi_offset 7, -8
 4220              		.cfi_offset 14, -4
 4221 0002 82B0     		sub	sp, sp, #8	@,,
 4222              		.cfi_def_cfa_offset 16
 4223 0004 00AF     		add	r7, sp, #0	@,,
 4224              		.cfi_def_cfa_register 7
 4225 0006 7860     		str	r0, [r7, #4]	@ pxTCB, pxTCB
3088:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3089:FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3090:FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3091:FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3092:FreeRTOS/tasks.c **** 
3093:FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3094:FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3095:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3096:FreeRTOS/tasks.c **** 		{
3097:FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3098:FreeRTOS/tasks.c **** 		}
3099:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3100:FreeRTOS/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 133


 4226              		.loc 1 3100 0
 4227 0008 7B68     		ldr	r3, [r7, #4]	@ tmp111, pxTCB
 4228 000a 1B6B     		ldr	r3, [r3, #48]	@ D.6615, pxTCB_1(D)->pxStack
 4229 000c 1846     		mov	r0, r3	@, D.6615
 4230 000e FFF7FEFF 		bl	vPortFree	@
3101:FreeRTOS/tasks.c **** 		vPortFree( pxTCB );
 4231              		.loc 1 3101 0
 4232 0012 7868     		ldr	r0, [r7, #4]	@, pxTCB
 4233 0014 FFF7FEFF 		bl	vPortFree	@
3102:FreeRTOS/tasks.c **** 	}
 4234              		.loc 1 3102 0
 4235 0018 0837     		adds	r7, r7, #8	@,,
 4236              		.cfi_def_cfa_offset 8
 4237 001a BD46     		mov	sp, r7	@,
 4238              		.cfi_def_cfa_register 13
 4239              		@ sp needed	@
 4240 001c 80BD     		pop	{r7, pc}	@
 4241              		.cfi_endproc
 4242              	.LFE39:
 4243              		.size	prvDeleteTCB, .-prvDeleteTCB
 4244 001e 00BF     		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 4245              		.align	2
 4246              		.thumb
 4247              		.thumb_func
 4248              		.type	prvResetNextTaskUnblockTime, %function
 4249              	prvResetNextTaskUnblockTime:
 4250              	.LFB40:
3103:FreeRTOS/tasks.c **** 
3104:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3105:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3106:FreeRTOS/tasks.c **** 
3107:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3108:FreeRTOS/tasks.c **** {
 4251              		.loc 1 3108 0
 4252              		.cfi_startproc
 4253              		@ args = 0, pretend = 0, frame = 8
 4254              		@ frame_needed = 1, uses_anonymous_args = 0
 4255              		@ link register save eliminated.
 4256 0000 80B4     		push	{r7}	@
 4257              		.cfi_def_cfa_offset 4
 4258              		.cfi_offset 7, -4
 4259 0002 83B0     		sub	sp, sp, #12	@,,
 4260              		.cfi_def_cfa_offset 16
 4261 0004 00AF     		add	r7, sp, #0	@,,
 4262              		.cfi_def_cfa_register 7
3109:FreeRTOS/tasks.c **** TCB_t *pxTCB;
3110:FreeRTOS/tasks.c **** 
3111:FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 4263              		.loc 1 3111 0
 4264 0006 0E4B     		ldr	r3, .L306	@ tmp116,
 4265 0008 1B68     		ldr	r3, [r3]	@ D.6617, pxDelayedTaskList
 4266 000a 1B68     		ldr	r3, [r3]	@ D.6618, _2->uxNumberOfItems
 4267 000c 002B     		cmp	r3, #0	@ D.6618,
 4268 000e 01D1     		bne	.L302	@,
 4269              		.loc 1 3111 0 is_stmt 0 discriminator 1
 4270 0010 0123     		movs	r3, #1	@ D.6616,
 4271 0012 00E0     		b	.L303	@
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 134


 4272              	.L302:
 4273              		.loc 1 3111 0 discriminator 2
 4274 0014 0023     		movs	r3, #0	@ D.6616,
 4275              	.L303:
 4276              		.loc 1 3111 0 discriminator 4
 4277 0016 002B     		cmp	r3, #0	@ D.6616,
 4278 0018 04D0     		beq	.L304	@,
3112:FreeRTOS/tasks.c **** 	{
3113:FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set
3114:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime to the maximum possible value so it is
3115:FreeRTOS/tasks.c **** 		extremely unlikely that the
3116:FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3117:FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3118:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 4279              		.loc 1 3118 0 is_stmt 1
 4280 001a 0A4B     		ldr	r3, .L306+4	@ tmp117,
 4281 001c 4FF0FF32 		mov	r2, #-1	@ tmp118,
 4282 0020 1A60     		str	r2, [r3]	@ tmp118, xNextTaskUnblockTime
 4283 0022 08E0     		b	.L301	@
 4284              	.L304:
3119:FreeRTOS/tasks.c **** 	}
3120:FreeRTOS/tasks.c **** 	else
3121:FreeRTOS/tasks.c **** 	{
3122:FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3123:FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3124:FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3125:FreeRTOS/tasks.c **** 		from the Blocked state. */
3126:FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 4285              		.loc 1 3126 0
 4286 0024 064B     		ldr	r3, .L306	@ tmp119,
 4287 0026 1B68     		ldr	r3, [r3]	@ D.6617, pxDelayedTaskList
 4288 0028 DB68     		ldr	r3, [r3, #12]	@ D.6619, _6->xListEnd.pxNext
 4289 002a DB68     		ldr	r3, [r3, #12]	@ tmp120, _7->pvOwner
 4290 002c 7B60     		str	r3, [r7, #4]	@ tmp120, pxTCB
3127:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 4291              		.loc 1 3127 0
 4292 002e 7B68     		ldr	r3, [r7, #4]	@ tmp121, pxTCB
 4293 0030 5B68     		ldr	r3, [r3, #4]	@ D.6618, pxTCB_8->xGenericListItem.xItemValue
 4294 0032 044A     		ldr	r2, .L306+4	@ tmp122,
 4295 0034 1360     		str	r3, [r2]	@ D.6618, xNextTaskUnblockTime
 4296              	.L301:
3128:FreeRTOS/tasks.c **** 	}
3129:FreeRTOS/tasks.c **** }
 4297              		.loc 1 3129 0
 4298 0036 0C37     		adds	r7, r7, #12	@,,
 4299              		.cfi_def_cfa_offset 4
 4300 0038 BD46     		mov	sp, r7	@,
 4301              		.cfi_def_cfa_register 13
 4302              		@ sp needed	@
 4303 003a 5DF8047B 		ldr	r7, [sp], #4	@,
 4304              		.cfi_restore 7
 4305              		.cfi_def_cfa_offset 0
 4306 003e 7047     		bx	lr	@
 4307              	.L307:
 4308              		.align	2
 4309              	.L306:
 4310 0040 00000000 		.word	pxDelayedTaskList
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 135


 4311 0044 00000000 		.word	xNextTaskUnblockTime
 4312              		.cfi_endproc
 4313              	.LFE40:
 4314              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 4315              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4316              		.align	2
 4317              		.global	xTaskGetCurrentTaskHandle
 4318              		.thumb
 4319              		.thumb_func
 4320              		.type	xTaskGetCurrentTaskHandle, %function
 4321              	xTaskGetCurrentTaskHandle:
 4322              	.LFB41:
3130:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3131:FreeRTOS/tasks.c **** 
3132:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3133:FreeRTOS/tasks.c **** 
3134:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3135:FreeRTOS/tasks.c **** 	{
 4323              		.loc 1 3135 0
 4324              		.cfi_startproc
 4325              		@ args = 0, pretend = 0, frame = 8
 4326              		@ frame_needed = 1, uses_anonymous_args = 0
 4327              		@ link register save eliminated.
 4328 0000 80B4     		push	{r7}	@
 4329              		.cfi_def_cfa_offset 4
 4330              		.cfi_offset 7, -4
 4331 0002 83B0     		sub	sp, sp, #12	@,,
 4332              		.cfi_def_cfa_offset 16
 4333 0004 00AF     		add	r7, sp, #0	@,,
 4334              		.cfi_def_cfa_register 7
3136:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3137:FreeRTOS/tasks.c **** 
3138:FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3139:FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3140:FreeRTOS/tasks.c **** 		individual execution thread. */
3141:FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
 4335              		.loc 1 3141 0
 4336 0006 054B     		ldr	r3, .L310	@ tmp112,
 4337 0008 1B68     		ldr	r3, [r3]	@ tmp113, pxCurrentTCB
 4338 000a 7B60     		str	r3, [r7, #4]	@ tmp113, xReturn
3142:FreeRTOS/tasks.c **** 
3143:FreeRTOS/tasks.c **** 		return xReturn;
 4339              		.loc 1 3143 0
 4340 000c 7B68     		ldr	r3, [r7, #4]	@ D.6620, xReturn
3144:FreeRTOS/tasks.c **** 	}
 4341              		.loc 1 3144 0
 4342 000e 1846     		mov	r0, r3	@, <retval>
 4343 0010 0C37     		adds	r7, r7, #12	@,,
 4344              		.cfi_def_cfa_offset 4
 4345 0012 BD46     		mov	sp, r7	@,
 4346              		.cfi_def_cfa_register 13
 4347              		@ sp needed	@
 4348 0014 5DF8047B 		ldr	r7, [sp], #4	@,
 4349              		.cfi_restore 7
 4350              		.cfi_def_cfa_offset 0
 4351 0018 7047     		bx	lr	@
 4352              	.L311:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 136


 4353 001a 00BF     		.align	2
 4354              	.L310:
 4355 001c 00000000 		.word	pxCurrentTCB
 4356              		.cfi_endproc
 4357              	.LFE41:
 4358              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4359              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4360              		.align	2
 4361              		.global	vTaskPriorityInherit
 4362              		.thumb
 4363              		.thumb_func
 4364              		.type	vTaskPriorityInherit, %function
 4365              	vTaskPriorityInherit:
 4366              	.LFB42:
3145:FreeRTOS/tasks.c **** 
3146:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3147:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3148:FreeRTOS/tasks.c **** 
3149:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3150:FreeRTOS/tasks.c **** 
3151:FreeRTOS/tasks.c **** 	BaseT_t xTaskGetSchedulerState( void )
3152:FreeRTOS/tasks.c **** 	{
3153:FreeRTOS/tasks.c **** 	BaseT_t xReturn;
3154:FreeRTOS/tasks.c **** 
3155:FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3156:FreeRTOS/tasks.c **** 		{
3157:FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3158:FreeRTOS/tasks.c **** 		}
3159:FreeRTOS/tasks.c **** 		else
3160:FreeRTOS/tasks.c **** 		{
3161:FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseT_t ) pdFALSE )
3162:FreeRTOS/tasks.c **** 			{
3163:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3164:FreeRTOS/tasks.c **** 			}
3165:FreeRTOS/tasks.c **** 			else
3166:FreeRTOS/tasks.c **** 			{
3167:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3168:FreeRTOS/tasks.c **** 			}
3169:FreeRTOS/tasks.c **** 		}
3170:FreeRTOS/tasks.c **** 
3171:FreeRTOS/tasks.c **** 		return xReturn;
3172:FreeRTOS/tasks.c **** 	}
3173:FreeRTOS/tasks.c **** 
3174:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3175:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3176:FreeRTOS/tasks.c **** 
3177:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3178:FreeRTOS/tasks.c **** 
3179:FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3180:FreeRTOS/tasks.c **** 	{
 4367              		.loc 1 3180 0
 4368              		.cfi_startproc
 4369              		@ args = 0, pretend = 0, frame = 16
 4370              		@ frame_needed = 1, uses_anonymous_args = 0
 4371 0000 80B5     		push	{r7, lr}	@
 4372              		.cfi_def_cfa_offset 8
 4373              		.cfi_offset 7, -8
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 137


 4374              		.cfi_offset 14, -4
 4375 0002 84B0     		sub	sp, sp, #16	@,,
 4376              		.cfi_def_cfa_offset 24
 4377 0004 00AF     		add	r7, sp, #0	@,,
 4378              		.cfi_def_cfa_register 7
 4379 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
3181:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4380              		.loc 1 3181 0
 4381 0008 7B68     		ldr	r3, [r7, #4]	@ tmp144, pxMutexHolder
 4382 000a FB60     		str	r3, [r7, #12]	@ tmp144, pxTCB
3182:FreeRTOS/tasks.c **** 
3183:FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3184:FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3185:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 4383              		.loc 1 3185 0
 4384 000c 7B68     		ldr	r3, [r7, #4]	@ tmp145, pxMutexHolder
 4385 000e 002B     		cmp	r3, #0	@ tmp145,
 4386 0010 64D0     		beq	.L312	@,
3186:FreeRTOS/tasks.c **** 		{
3187:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 4387              		.loc 1 3187 0
 4388 0012 FB68     		ldr	r3, [r7, #12]	@ tmp146, pxTCB
 4389 0014 DA6A     		ldr	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4390 0016 334B     		ldr	r3, .L321	@ tmp147,
 4391 0018 1B68     		ldr	r3, [r3]	@ D.6623, pxCurrentTCB
 4392 001a DB6A     		ldr	r3, [r3, #44]	@ D.6622, _5->uxPriority
 4393 001c 9A42     		cmp	r2, r3	@ D.6622, D.6622
 4394 001e 5DD2     		bcs	.L312	@,
3188:FreeRTOS/tasks.c **** 			{
3189:FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3190:FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3191:FreeRTOS/tasks.c **** 				not	being used for anything else. */
3192:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 4395              		.loc 1 3192 0
 4396 0020 FB68     		ldr	r3, [r7, #12]	@ tmp148, pxTCB
 4397 0022 9B69     		ldr	r3, [r3, #24]	@ D.6622, pxTCB_3->xEventListItem.xItemValue
 4398 0024 002B     		cmp	r3, #0	@ D.6624,
 4399 0026 06DB     		blt	.L314	@,
3193:FreeRTOS/tasks.c **** 				{
3194:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 4400              		.loc 1 3194 0
 4401 0028 2E4B     		ldr	r3, .L321	@ tmp149,
 4402 002a 1B68     		ldr	r3, [r3]	@ D.6623, pxCurrentTCB
 4403 002c DB6A     		ldr	r3, [r3, #44]	@ D.6622, _9->uxPriority
 4404 002e C3F10802 		rsb	r2, r3, #8	@ D.6622, D.6622,
 4405 0032 FB68     		ldr	r3, [r7, #12]	@ tmp150, pxTCB
 4406 0034 9A61     		str	r2, [r3, #24]	@ D.6622, pxTCB_3->xEventListItem.xItemValue
 4407              	.L314:
3195:FreeRTOS/tasks.c **** 				}
3196:FreeRTOS/tasks.c **** 				else
3197:FreeRTOS/tasks.c **** 				{
3198:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3199:FreeRTOS/tasks.c **** 				}
3200:FreeRTOS/tasks.c **** 
3201:FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need to
3202:FreeRTOS/tasks.c **** 				be moved into a new list. */
3203:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericLis
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 138


 4408              		.loc 1 3203 0
 4409 0036 FB68     		ldr	r3, [r7, #12]	@ tmp151, pxTCB
 4410 0038 5969     		ldr	r1, [r3, #20]	@ D.6625, pxTCB_3->xGenericListItem.pvContainer
 4411 003a FB68     		ldr	r3, [r7, #12]	@ tmp152, pxTCB
 4412 003c DA6A     		ldr	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4413 003e 1346     		mov	r3, r2	@ tmp153, D.6622
 4414 0040 9B00     		lsls	r3, r3, #2	@ tmp153, tmp153,
 4415 0042 1344     		add	r3, r3, r2	@ tmp153, D.6622
 4416 0044 9B00     		lsls	r3, r3, #2	@ tmp154, tmp153,
 4417 0046 284A     		ldr	r2, .L321+4	@ tmp155,
 4418 0048 1344     		add	r3, r3, r2	@ D.6626, tmp155
 4419 004a 9942     		cmp	r1, r3	@ D.6625, D.6626
 4420 004c 01D1     		bne	.L315	@,
 4421              		.loc 1 3203 0 is_stmt 0 discriminator 1
 4422 004e 0123     		movs	r3, #1	@ D.6621,
 4423 0050 00E0     		b	.L316	@
 4424              	.L315:
 4425              		.loc 1 3203 0 discriminator 2
 4426 0052 0023     		movs	r3, #0	@ D.6621,
 4427              	.L316:
 4428              		.loc 1 3203 0 discriminator 4
 4429 0054 002B     		cmp	r3, #0	@ D.6621,
 4430 0056 3CD0     		beq	.L317	@,
3204:FreeRTOS/tasks.c **** 				{
3205:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 4431              		.loc 1 3205 0 is_stmt 1
 4432 0058 FB68     		ldr	r3, [r7, #12]	@ tmp156, pxTCB
 4433 005a 0433     		adds	r3, r3, #4	@ D.6627, tmp156,
 4434 005c 1846     		mov	r0, r3	@, D.6627
 4435 005e FFF7FEFF 		bl	uxListRemove	@
 4436 0062 0346     		mov	r3, r0	@ D.6622,
 4437 0064 002B     		cmp	r3, #0	@ D.6622,
 4438 0066 15D1     		bne	.L318	@,
3206:FreeRTOS/tasks.c **** 					{
3207:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4439              		.loc 1 3207 0
 4440 0068 FB68     		ldr	r3, [r7, #12]	@ tmp157, pxTCB
 4441 006a DA6A     		ldr	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4442 006c 1E49     		ldr	r1, .L321+4	@ tmp158,
 4443 006e 1346     		mov	r3, r2	@ tmp159, D.6622
 4444 0070 9B00     		lsls	r3, r3, #2	@ tmp159, tmp159,
 4445 0072 1344     		add	r3, r3, r2	@ tmp159, D.6622
 4446 0074 9B00     		lsls	r3, r3, #2	@ tmp160, tmp159,
 4447 0076 0B44     		add	r3, r3, r1	@ tmp161, tmp158
 4448 0078 1B68     		ldr	r3, [r3]	@ D.6622, pxReadyTasksLists[_19].uxNumberOfItems
 4449 007a 002B     		cmp	r3, #0	@ D.6622,
 4450 007c 0AD1     		bne	.L318	@,
 4451              		.loc 1 3207 0 is_stmt 0 discriminator 1
 4452 007e FB68     		ldr	r3, [r7, #12]	@ tmp162, pxTCB
 4453 0080 DB6A     		ldr	r3, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4454 0082 1A46     		mov	r2, r3	@ D.6628, D.6622
 4455 0084 0123     		movs	r3, #1	@ tmp163,
 4456 0086 9340     		lsls	r3, r3, r2	@ D.6622, tmp163, D.6628
 4457 0088 DA43     		mvns	r2, r3	@ D.6622, D.6622
 4458 008a 184B     		ldr	r3, .L321+8	@ tmp164,
 4459 008c 1B68     		ldr	r3, [r3]	@ D.6622, uxTopReadyPriority
 4460 008e 1340     		ands	r3, r3, r2	@, D.6622, D.6622, D.6622
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 139


 4461 0090 164A     		ldr	r2, .L321+8	@ tmp165,
 4462 0092 1360     		str	r3, [r2]	@ D.6622, uxTopReadyPriority
 4463              	.L318:
3208:FreeRTOS/tasks.c **** 					}
3209:FreeRTOS/tasks.c **** 					else
3210:FreeRTOS/tasks.c **** 					{
3211:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3212:FreeRTOS/tasks.c **** 					}
3213:FreeRTOS/tasks.c **** 
3214:FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3215:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4464              		.loc 1 3215 0 is_stmt 1
 4465 0094 134B     		ldr	r3, .L321	@ tmp166,
 4466 0096 1B68     		ldr	r3, [r3]	@ D.6623, pxCurrentTCB
 4467 0098 DA6A     		ldr	r2, [r3, #44]	@ D.6622, _27->uxPriority
 4468 009a FB68     		ldr	r3, [r7, #12]	@ tmp167, pxTCB
 4469 009c DA62     		str	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
3216:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4470              		.loc 1 3216 0
 4471 009e FB68     		ldr	r3, [r7, #12]	@ tmp168, pxTCB
 4472 00a0 DB6A     		ldr	r3, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4473 00a2 1A46     		mov	r2, r3	@ D.6628, D.6622
 4474 00a4 0123     		movs	r3, #1	@ tmp169,
 4475 00a6 03FA02F2 		lsl	r2, r3, r2	@ D.6622, tmp169, D.6628
 4476 00aa 104B     		ldr	r3, .L321+8	@ tmp170,
 4477 00ac 1B68     		ldr	r3, [r3]	@ D.6622, uxTopReadyPriority
 4478 00ae 1343     		orrs	r3, r3, r2	@, D.6622, D.6622, D.6622
 4479 00b0 0E4A     		ldr	r2, .L321+8	@ tmp171,
 4480 00b2 1360     		str	r3, [r2]	@ D.6622, uxTopReadyPriority
 4481 00b4 FB68     		ldr	r3, [r7, #12]	@ tmp172, pxTCB
 4482 00b6 DA6A     		ldr	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4483 00b8 1346     		mov	r3, r2	@ tmp173, D.6622
 4484 00ba 9B00     		lsls	r3, r3, #2	@ tmp173, tmp173,
 4485 00bc 1344     		add	r3, r3, r2	@ tmp173, D.6622
 4486 00be 9B00     		lsls	r3, r3, #2	@ tmp174, tmp173,
 4487 00c0 094A     		ldr	r2, .L321+4	@ tmp175,
 4488 00c2 1A44     		add	r2, r2, r3	@ D.6626, tmp173
 4489 00c4 FB68     		ldr	r3, [r7, #12]	@ tmp176, pxTCB
 4490 00c6 0433     		adds	r3, r3, #4	@ D.6627, tmp176,
 4491 00c8 1046     		mov	r0, r2	@, D.6626
 4492 00ca 1946     		mov	r1, r3	@, D.6627
 4493 00cc FFF7FEFF 		bl	vListInsertEnd	@
 4494 00d0 04E0     		b	.L312	@
 4495              	.L317:
3217:FreeRTOS/tasks.c **** 				}
3218:FreeRTOS/tasks.c **** 				else
3219:FreeRTOS/tasks.c **** 				{
3220:FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3221:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 4496              		.loc 1 3221 0
 4497 00d2 044B     		ldr	r3, .L321	@ tmp177,
 4498 00d4 1B68     		ldr	r3, [r3]	@ D.6623, pxCurrentTCB
 4499 00d6 DA6A     		ldr	r2, [r3, #44]	@ D.6622, _37->uxPriority
 4500 00d8 FB68     		ldr	r3, [r7, #12]	@ tmp178, pxTCB
 4501 00da DA62     		str	r2, [r3, #44]	@ D.6622, pxTCB_3->uxPriority
 4502              	.L312:
3222:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 140


3223:FreeRTOS/tasks.c **** 
3224:FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3225:FreeRTOS/tasks.c **** 			}
3226:FreeRTOS/tasks.c **** 			else
3227:FreeRTOS/tasks.c **** 			{
3228:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3229:FreeRTOS/tasks.c **** 			}
3230:FreeRTOS/tasks.c **** 		}
3231:FreeRTOS/tasks.c **** 		else
3232:FreeRTOS/tasks.c **** 		{
3233:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3234:FreeRTOS/tasks.c **** 		}
3235:FreeRTOS/tasks.c **** 	}
 4503              		.loc 1 3235 0
 4504 00dc 1037     		adds	r7, r7, #16	@,,
 4505              		.cfi_def_cfa_offset 8
 4506 00de BD46     		mov	sp, r7	@,
 4507              		.cfi_def_cfa_register 13
 4508              		@ sp needed	@
 4509 00e0 80BD     		pop	{r7, pc}	@
 4510              	.L322:
 4511 00e2 00BF     		.align	2
 4512              	.L321:
 4513 00e4 00000000 		.word	pxCurrentTCB
 4514 00e8 00000000 		.word	pxReadyTasksLists
 4515 00ec 00000000 		.word	uxTopReadyPriority
 4516              		.cfi_endproc
 4517              	.LFE42:
 4518              		.size	vTaskPriorityInherit, .-vTaskPriorityInherit
 4519              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4520              		.align	2
 4521              		.global	xTaskPriorityDisinherit
 4522              		.thumb
 4523              		.thumb_func
 4524              		.type	xTaskPriorityDisinherit, %function
 4525              	xTaskPriorityDisinherit:
 4526              	.LFB43:
3236:FreeRTOS/tasks.c **** 
3237:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3238:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3239:FreeRTOS/tasks.c **** 
3240:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3241:FreeRTOS/tasks.c **** 
3242:FreeRTOS/tasks.c **** 	BaseT_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3243:FreeRTOS/tasks.c **** 	{
 4527              		.loc 1 3243 0
 4528              		.cfi_startproc
 4529              		@ args = 0, pretend = 0, frame = 16
 4530              		@ frame_needed = 1, uses_anonymous_args = 0
 4531 0000 80B5     		push	{r7, lr}	@
 4532              		.cfi_def_cfa_offset 8
 4533              		.cfi_offset 7, -8
 4534              		.cfi_offset 14, -4
 4535 0002 84B0     		sub	sp, sp, #16	@,,
 4536              		.cfi_def_cfa_offset 24
 4537 0004 00AF     		add	r7, sp, #0	@,,
 4538              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 141


 4539 0006 7860     		str	r0, [r7, #4]	@ pxMutexHolder, pxMutexHolder
3244:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4540              		.loc 1 3244 0
 4541 0008 7B68     		ldr	r3, [r7, #4]	@ tmp139, pxMutexHolder
 4542 000a BB60     		str	r3, [r7, #8]	@ tmp139, pxTCB
3245:FreeRTOS/tasks.c **** 	BaseT_t xReturn = pdFALSE;
 4543              		.loc 1 3245 0
 4544 000c 0023     		movs	r3, #0	@ tmp140,
 4545 000e FB60     		str	r3, [r7, #12]	@ tmp140, xReturn
3246:FreeRTOS/tasks.c **** 
3247:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
 4546              		.loc 1 3247 0
 4547 0010 7B68     		ldr	r3, [r7, #4]	@ tmp141, pxMutexHolder
 4548 0012 002B     		cmp	r3, #0	@ tmp141,
 4549 0014 58D0     		beq	.L324	@,
3248:FreeRTOS/tasks.c **** 		{
3249:FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4550              		.loc 1 3249 0
 4551 0016 BB68     		ldr	r3, [r7, #8]	@ tmp142, pxTCB
 4552 0018 DB6C     		ldr	r3, [r3, #76]	@ D.6629, pxTCB_3->uxMutexesHeld
 4553 001a 002B     		cmp	r3, #0	@ D.6629,
 4554 001c 02D1     		bne	.L325	@,
 4555              		.loc 1 3249 0 is_stmt 0 discriminator 1
 4556 001e FFF7FEFF 		bl	ulPortSetInterruptMask	@
 4557              	.L326:
 4558 0022 FEE7     		b	.L326	@
 4559              	.L325:
3250:FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4560              		.loc 1 3250 0 is_stmt 1
 4561 0024 BB68     		ldr	r3, [r7, #8]	@ tmp143, pxTCB
 4562 0026 DB6C     		ldr	r3, [r3, #76]	@ D.6629, pxTCB_3->uxMutexesHeld
 4563 0028 5A1E     		subs	r2, r3, #1	@ D.6629, D.6629,
 4564 002a BB68     		ldr	r3, [r7, #8]	@ tmp144, pxTCB
 4565 002c DA64     		str	r2, [r3, #76]	@ D.6629, pxTCB_3->uxMutexesHeld
3251:FreeRTOS/tasks.c **** 
3252:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4566              		.loc 1 3252 0
 4567 002e BB68     		ldr	r3, [r7, #8]	@ tmp145, pxTCB
 4568 0030 DA6A     		ldr	r2, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4569 0032 BB68     		ldr	r3, [r7, #8]	@ tmp146, pxTCB
 4570 0034 9B6C     		ldr	r3, [r3, #72]	@ D.6629, pxTCB_3->uxBasePriority
 4571 0036 9A42     		cmp	r2, r3	@ D.6629, D.6629
 4572 0038 46D0     		beq	.L324	@,
3253:FreeRTOS/tasks.c **** 			{
3254:FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3255:FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseT_t ) 0 )
 4573              		.loc 1 3255 0
 4574 003a BB68     		ldr	r3, [r7, #8]	@ tmp147, pxTCB
 4575 003c DB6C     		ldr	r3, [r3, #76]	@ D.6629, pxTCB_3->uxMutexesHeld
 4576 003e 002B     		cmp	r3, #0	@ D.6629,
 4577 0040 42D1     		bne	.L324	@,
3256:FreeRTOS/tasks.c **** 				{
3257:FreeRTOS/tasks.c **** 					/* The holding task must be the running task to be able to give
3258:FreeRTOS/tasks.c **** 					the mutex back.  Remove the holding task from the ready list. */
3259:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseT_t ) 0 )
 4578              		.loc 1 3259 0
 4579 0042 BB68     		ldr	r3, [r7, #8]	@ tmp148, pxTCB
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 142


 4580 0044 0433     		adds	r3, r3, #4	@ D.6630, tmp148,
 4581 0046 1846     		mov	r0, r3	@, D.6630
 4582 0048 FFF7FEFF 		bl	uxListRemove	@
 4583 004c 0346     		mov	r3, r0	@ D.6629,
 4584 004e 002B     		cmp	r3, #0	@ D.6629,
 4585 0050 15D1     		bne	.L327	@,
3260:FreeRTOS/tasks.c **** 					{
3261:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4586              		.loc 1 3261 0
 4587 0052 BB68     		ldr	r3, [r7, #8]	@ tmp149, pxTCB
 4588 0054 DA6A     		ldr	r2, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4589 0056 1F49     		ldr	r1, .L330	@ tmp150,
 4590 0058 1346     		mov	r3, r2	@ tmp151, D.6629
 4591 005a 9B00     		lsls	r3, r3, #2	@ tmp151, tmp151,
 4592 005c 1344     		add	r3, r3, r2	@ tmp151, D.6629
 4593 005e 9B00     		lsls	r3, r3, #2	@ tmp152, tmp151,
 4594 0060 0B44     		add	r3, r3, r1	@ tmp153, tmp150
 4595 0062 1B68     		ldr	r3, [r3]	@ D.6629, pxReadyTasksLists[_13].uxNumberOfItems
 4596 0064 002B     		cmp	r3, #0	@ D.6629,
 4597 0066 0AD1     		bne	.L327	@,
 4598              		.loc 1 3261 0 is_stmt 0 discriminator 1
 4599 0068 BB68     		ldr	r3, [r7, #8]	@ tmp154, pxTCB
 4600 006a DB6A     		ldr	r3, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4601 006c 1A46     		mov	r2, r3	@ D.6631, D.6629
 4602 006e 0123     		movs	r3, #1	@ tmp155,
 4603 0070 9340     		lsls	r3, r3, r2	@ D.6629, tmp155, D.6631
 4604 0072 DA43     		mvns	r2, r3	@ D.6629, D.6629
 4605 0074 184B     		ldr	r3, .L330+4	@ tmp156,
 4606 0076 1B68     		ldr	r3, [r3]	@ D.6629, uxTopReadyPriority
 4607 0078 1340     		ands	r3, r3, r2	@, D.6629, D.6629, D.6629
 4608 007a 174A     		ldr	r2, .L330+4	@ tmp157,
 4609 007c 1360     		str	r3, [r2]	@ D.6629, uxTopReadyPriority
 4610              	.L327:
3262:FreeRTOS/tasks.c **** 					}
3263:FreeRTOS/tasks.c **** 					else
3264:FreeRTOS/tasks.c **** 					{
3265:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3266:FreeRTOS/tasks.c **** 					}
3267:FreeRTOS/tasks.c **** 
3268:FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the new
3269:FreeRTOS/tasks.c **** 					ready list. */
3270:FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3271:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4611              		.loc 1 3271 0 is_stmt 1
 4612 007e BB68     		ldr	r3, [r7, #8]	@ tmp158, pxTCB
 4613 0080 9A6C     		ldr	r2, [r3, #72]	@ D.6629, pxTCB_3->uxBasePriority
 4614 0082 BB68     		ldr	r3, [r7, #8]	@ tmp159, pxTCB
 4615 0084 DA62     		str	r2, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
3272:FreeRTOS/tasks.c **** 
3273:FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3274:FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3275:FreeRTOS/tasks.c **** 					running to give back the mutex. */
3276:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickT_t ) configMAX_PRIORITIES - ( Tick
 4616              		.loc 1 3276 0
 4617 0086 BB68     		ldr	r3, [r7, #8]	@ tmp160, pxTCB
 4618 0088 DB6A     		ldr	r3, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4619 008a C3F10802 		rsb	r2, r3, #8	@ D.6629, D.6629,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 143


 4620 008e BB68     		ldr	r3, [r7, #8]	@ tmp161, pxTCB
 4621 0090 9A61     		str	r2, [r3, #24]	@ D.6629, pxTCB_3->xEventListItem.xItemValue
3277:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4622              		.loc 1 3277 0
 4623 0092 BB68     		ldr	r3, [r7, #8]	@ tmp162, pxTCB
 4624 0094 DB6A     		ldr	r3, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4625 0096 1A46     		mov	r2, r3	@ D.6631, D.6629
 4626 0098 0123     		movs	r3, #1	@ tmp163,
 4627 009a 03FA02F2 		lsl	r2, r3, r2	@ D.6629, tmp163, D.6631
 4628 009e 0E4B     		ldr	r3, .L330+4	@ tmp164,
 4629 00a0 1B68     		ldr	r3, [r3]	@ D.6629, uxTopReadyPriority
 4630 00a2 1343     		orrs	r3, r3, r2	@, D.6629, D.6629, D.6629
 4631 00a4 0C4A     		ldr	r2, .L330+4	@ tmp165,
 4632 00a6 1360     		str	r3, [r2]	@ D.6629, uxTopReadyPriority
 4633 00a8 BB68     		ldr	r3, [r7, #8]	@ tmp166, pxTCB
 4634 00aa DA6A     		ldr	r2, [r3, #44]	@ D.6629, pxTCB_3->uxPriority
 4635 00ac 1346     		mov	r3, r2	@ tmp167, D.6629
 4636 00ae 9B00     		lsls	r3, r3, #2	@ tmp167, tmp167,
 4637 00b0 1344     		add	r3, r3, r2	@ tmp167, D.6629
 4638 00b2 9B00     		lsls	r3, r3, #2	@ tmp168, tmp167,
 4639 00b4 074A     		ldr	r2, .L330	@ tmp169,
 4640 00b6 1A44     		add	r2, r2, r3	@ D.6632, tmp167
 4641 00b8 BB68     		ldr	r3, [r7, #8]	@ tmp170, pxTCB
 4642 00ba 0433     		adds	r3, r3, #4	@ D.6630, tmp170,
 4643 00bc 1046     		mov	r0, r2	@, D.6632
 4644 00be 1946     		mov	r1, r3	@, D.6630
 4645 00c0 FFF7FEFF 		bl	vListInsertEnd	@
3278:FreeRTOS/tasks.c **** 
3279:FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3280:FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3281:FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3282:FreeRTOS/tasks.c **** 					in an order different to that in which they were taken. */
3283:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
 4646              		.loc 1 3283 0
 4647 00c4 0123     		movs	r3, #1	@ tmp171,
 4648 00c6 FB60     		str	r3, [r7, #12]	@ tmp171, xReturn
 4649              	.L324:
3284:FreeRTOS/tasks.c **** 				}
3285:FreeRTOS/tasks.c **** 				else
3286:FreeRTOS/tasks.c **** 				{
3287:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3288:FreeRTOS/tasks.c **** 				}
3289:FreeRTOS/tasks.c **** 			}
3290:FreeRTOS/tasks.c **** 			else
3291:FreeRTOS/tasks.c **** 			{
3292:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3293:FreeRTOS/tasks.c **** 			}
3294:FreeRTOS/tasks.c **** 		}
3295:FreeRTOS/tasks.c **** 		else
3296:FreeRTOS/tasks.c **** 		{
3297:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3298:FreeRTOS/tasks.c **** 		}
3299:FreeRTOS/tasks.c **** 
3300:FreeRTOS/tasks.c **** 		return xReturn;
 4650              		.loc 1 3300 0
 4651 00c8 FB68     		ldr	r3, [r7, #12]	@ D.6633, xReturn
3301:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 144


 4652              		.loc 1 3301 0
 4653 00ca 1846     		mov	r0, r3	@, <retval>
 4654 00cc 1037     		adds	r7, r7, #16	@,,
 4655              		.cfi_def_cfa_offset 8
 4656 00ce BD46     		mov	sp, r7	@,
 4657              		.cfi_def_cfa_register 13
 4658              		@ sp needed	@
 4659 00d0 80BD     		pop	{r7, pc}	@
 4660              	.L331:
 4661 00d2 00BF     		.align	2
 4662              	.L330:
 4663 00d4 00000000 		.word	pxReadyTasksLists
 4664 00d8 00000000 		.word	uxTopReadyPriority
 4665              		.cfi_endproc
 4666              	.LFE43:
 4667              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 4668              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4669              		.align	2
 4670              		.global	uxTaskResetEventItemValue
 4671              		.thumb
 4672              		.thumb_func
 4673              		.type	uxTaskResetEventItemValue, %function
 4674              	uxTaskResetEventItemValue:
 4675              	.LFB44:
3302:FreeRTOS/tasks.c **** 
3303:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3304:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3305:FreeRTOS/tasks.c **** 
3306:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3307:FreeRTOS/tasks.c **** 
3308:FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3309:FreeRTOS/tasks.c **** 	{
3310:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3311:FreeRTOS/tasks.c **** 
3312:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3313:FreeRTOS/tasks.c **** 		{
3314:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3315:FreeRTOS/tasks.c **** 
3316:FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3317:FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3318:FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3319:FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3320:FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3321:FreeRTOS/tasks.c **** 			critical section. */
3322:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3323:FreeRTOS/tasks.c **** 			{
3324:FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3325:FreeRTOS/tasks.c **** 			}
3326:FreeRTOS/tasks.c **** 
3327:FreeRTOS/tasks.c **** 		}
3328:FreeRTOS/tasks.c **** 		else
3329:FreeRTOS/tasks.c **** 		{
3330:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3331:FreeRTOS/tasks.c **** 		}
3332:FreeRTOS/tasks.c **** 	}
3333:FreeRTOS/tasks.c **** 
3334:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 145


3335:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3336:FreeRTOS/tasks.c **** 
3337:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3338:FreeRTOS/tasks.c **** 
3339:FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3340:FreeRTOS/tasks.c **** 	{
3341:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3342:FreeRTOS/tasks.c **** 		{
3343:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3344:FreeRTOS/tasks.c **** 			{
3345:FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3346:FreeRTOS/tasks.c **** 
3347:FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3348:FreeRTOS/tasks.c **** 				{
3349:FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3350:FreeRTOS/tasks.c **** 				}
3351:FreeRTOS/tasks.c **** 				else
3352:FreeRTOS/tasks.c **** 				{
3353:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3354:FreeRTOS/tasks.c **** 				}
3355:FreeRTOS/tasks.c **** 			}
3356:FreeRTOS/tasks.c **** 			else
3357:FreeRTOS/tasks.c **** 			{
3358:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3359:FreeRTOS/tasks.c **** 			}
3360:FreeRTOS/tasks.c **** 		}
3361:FreeRTOS/tasks.c **** 		else
3362:FreeRTOS/tasks.c **** 		{
3363:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3364:FreeRTOS/tasks.c **** 		}
3365:FreeRTOS/tasks.c **** 	}
3366:FreeRTOS/tasks.c **** 
3367:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3368:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3369:FreeRTOS/tasks.c **** 
3370:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3371:FreeRTOS/tasks.c **** 
3372:FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3373:FreeRTOS/tasks.c **** 	{
3374:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3375:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3376:FreeRTOS/tasks.c **** 	char cStatus;
3377:FreeRTOS/tasks.c **** 
3378:FreeRTOS/tasks.c **** 		/*
3379:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3380:FreeRTOS/tasks.c **** 		 *
3381:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3382:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3383:FreeRTOS/tasks.c **** 		 * scheduler.
3384:FreeRTOS/tasks.c **** 		 *
3385:FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3386:FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3387:FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3388:FreeRTOS/tasks.c **** 		 *
3389:FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3390:FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3391:FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 146


3392:FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3393:FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3394:FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3395:FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3396:FreeRTOS/tasks.c **** 		 *
3397:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3398:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3399:FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
3400:FreeRTOS/tasks.c **** 		 */
3401:FreeRTOS/tasks.c **** 
3402:FreeRTOS/tasks.c **** 
3403:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3404:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3405:FreeRTOS/tasks.c **** 
3406:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3407:FreeRTOS/tasks.c **** 		function is executing. */
3408:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3409:FreeRTOS/tasks.c **** 
3410:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3411:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3412:FreeRTOS/tasks.c **** 
3413:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3414:FreeRTOS/tasks.c **** 		{
3415:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3416:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3417:FreeRTOS/tasks.c **** 
3418:FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3419:FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3420:FreeRTOS/tasks.c **** 			{
3421:FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3422:FreeRTOS/tasks.c **** 				{
3423:FreeRTOS/tasks.c **** 				case eReady:		cStatus = tskREADY_CHAR;
3424:FreeRTOS/tasks.c **** 									break;
3425:FreeRTOS/tasks.c **** 
3426:FreeRTOS/tasks.c **** 				case eBlocked:		cStatus = tskBLOCKED_CHAR;
3427:FreeRTOS/tasks.c **** 									break;
3428:FreeRTOS/tasks.c **** 
3429:FreeRTOS/tasks.c **** 				case eSuspended:	cStatus = tskSUSPENDED_CHAR;
3430:FreeRTOS/tasks.c **** 									break;
3431:FreeRTOS/tasks.c **** 
3432:FreeRTOS/tasks.c **** 				case eDeleted:		cStatus = tskDELETED_CHAR;
3433:FreeRTOS/tasks.c **** 									break;
3434:FreeRTOS/tasks.c **** 
3435:FreeRTOS/tasks.c **** 				default:			/* Should not get here, but it is included
3436:FreeRTOS/tasks.c **** 									to prevent static checking errors. */
3437:FreeRTOS/tasks.c **** 									cStatus = 0x00;
3438:FreeRTOS/tasks.c **** 									break;
3439:FreeRTOS/tasks.c **** 				}
3440:FreeRTOS/tasks.c **** 
3441:FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "%s\t\t%c\t%u\t%u\t%u\r\n", pxTaskStatusArray[ x ].pcTaskName, cStatus,
3442:FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
3443:FreeRTOS/tasks.c **** 			}
3444:FreeRTOS/tasks.c **** 
3445:FreeRTOS/tasks.c **** 			/* Free the array again. */
3446:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3447:FreeRTOS/tasks.c **** 		}
3448:FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 147


3449:FreeRTOS/tasks.c **** 		{
3450:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3451:FreeRTOS/tasks.c **** 		}
3452:FreeRTOS/tasks.c **** 	}
3453:FreeRTOS/tasks.c **** 
3454:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) ) */
3455:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
3456:FreeRTOS/tasks.c **** 
3457:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
3458:FreeRTOS/tasks.c **** 
3459:FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
3460:FreeRTOS/tasks.c **** 	{
3461:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3462:FreeRTOS/tasks.c **** 	volatile UBaseT_t uxArraySize, x;
3463:FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
3464:FreeRTOS/tasks.c **** 
3465:FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
3466:FreeRTOS/tasks.c **** 		{
3467:FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
3468:FreeRTOS/tasks.c **** 		}
3469:FreeRTOS/tasks.c **** 		#endif
3470:FreeRTOS/tasks.c **** 
3471:FreeRTOS/tasks.c **** 		/*
3472:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3473:FreeRTOS/tasks.c **** 		 *
3474:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3475:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3476:FreeRTOS/tasks.c **** 		 * scheduler.
3477:FreeRTOS/tasks.c **** 		 *
3478:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
3479:FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
3480:FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
3481:FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
3482:FreeRTOS/tasks.c **** 		 *
3483:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
3484:FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
3485:FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
3486:FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
3487:FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
3488:FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
3489:FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
3490:FreeRTOS/tasks.c **** 		 *
3491:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3492:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3493:FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
3494:FreeRTOS/tasks.c **** 		 */
3495:FreeRTOS/tasks.c **** 
3496:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3497:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3498:FreeRTOS/tasks.c **** 
3499:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3500:FreeRTOS/tasks.c **** 		function is executing. */
3501:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3502:FreeRTOS/tasks.c **** 
3503:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task. */
3504:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3505:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 148


3506:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3507:FreeRTOS/tasks.c **** 		{
3508:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3509:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
3510:FreeRTOS/tasks.c **** 
3511:FreeRTOS/tasks.c **** 			/* For percentage calculations. */
3512:FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
3513:FreeRTOS/tasks.c **** 
3514:FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
3515:FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
3516:FreeRTOS/tasks.c **** 			{
3517:FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
3518:FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
3519:FreeRTOS/tasks.c **** 				{
3520:FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
3521:FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
3522:FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
3523:FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
3524:FreeRTOS/tasks.c **** 
3525:FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
3526:FreeRTOS/tasks.c **** 					{
3527:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3528:FreeRTOS/tasks.c **** 						{
3529:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskS
3530:FreeRTOS/tasks.c **** 						}
3531:FreeRTOS/tasks.c **** 						#else
3532:FreeRTOS/tasks.c **** 						{
3533:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3534:FreeRTOS/tasks.c **** 							printf() library can be used. */
3535:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t%u%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3536:FreeRTOS/tasks.c **** 						}
3537:FreeRTOS/tasks.c **** 						#endif
3538:FreeRTOS/tasks.c **** 					}
3539:FreeRTOS/tasks.c **** 					else
3540:FreeRTOS/tasks.c **** 					{
3541:FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
3542:FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
3543:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
3544:FreeRTOS/tasks.c **** 						{
3545:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskSt
3546:FreeRTOS/tasks.c **** 						}
3547:FreeRTOS/tasks.c **** 						#else
3548:FreeRTOS/tasks.c **** 						{
3549:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
3550:FreeRTOS/tasks.c **** 							printf() library can be used. */
3551:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "%s\t\t%u\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, ( unsigne
3552:FreeRTOS/tasks.c **** 						}
3553:FreeRTOS/tasks.c **** 						#endif
3554:FreeRTOS/tasks.c **** 					}
3555:FreeRTOS/tasks.c **** 
3556:FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
3557:FreeRTOS/tasks.c **** 				}
3558:FreeRTOS/tasks.c **** 			}
3559:FreeRTOS/tasks.c **** 			else
3560:FreeRTOS/tasks.c **** 			{
3561:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3562:FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 149


3563:FreeRTOS/tasks.c **** 
3564:FreeRTOS/tasks.c **** 			/* Free the array again. */
3565:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
3566:FreeRTOS/tasks.c **** 		}
3567:FreeRTOS/tasks.c **** 		else
3568:FreeRTOS/tasks.c **** 		{
3569:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3570:FreeRTOS/tasks.c **** 		}
3571:FreeRTOS/tasks.c **** 	}
3572:FreeRTOS/tasks.c **** 
3573:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
3574:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3575:FreeRTOS/tasks.c **** 
3576:FreeRTOS/tasks.c **** TickT_t uxTaskResetEventItemValue( void )
3577:FreeRTOS/tasks.c **** {
 4676              		.loc 1 3577 0
 4677              		.cfi_startproc
 4678              		@ args = 0, pretend = 0, frame = 8
 4679              		@ frame_needed = 1, uses_anonymous_args = 0
 4680              		@ link register save eliminated.
 4681 0000 80B4     		push	{r7}	@
 4682              		.cfi_def_cfa_offset 4
 4683              		.cfi_offset 7, -4
 4684 0002 83B0     		sub	sp, sp, #12	@,,
 4685              		.cfi_def_cfa_offset 16
 4686 0004 00AF     		add	r7, sp, #0	@,,
 4687              		.cfi_def_cfa_register 7
3578:FreeRTOS/tasks.c **** TickT_t uxReturn;
3579:FreeRTOS/tasks.c **** 
3580:FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4688              		.loc 1 3580 0
 4689 0006 094B     		ldr	r3, .L334	@ tmp117,
 4690 0008 1B68     		ldr	r3, [r3]	@ D.6634, pxCurrentTCB
 4691 000a 9B69     		ldr	r3, [r3, #24]	@ tmp118, _1->xEventListItem.xItemValue
 4692 000c 7B60     		str	r3, [r7, #4]	@ tmp118, uxReturn
3581:FreeRTOS/tasks.c **** 
3582:FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
3583:FreeRTOS/tasks.c **** 	queues and semaphores. */
3584:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickT_t ) configMAX_PRIORITIES - (
 4693              		.loc 1 3584 0
 4694 000e 074B     		ldr	r3, .L334	@ tmp119,
 4695 0010 1B68     		ldr	r3, [r3]	@ D.6634, pxCurrentTCB
 4696 0012 064A     		ldr	r2, .L334	@ tmp120,
 4697 0014 1268     		ldr	r2, [r2]	@ D.6634, pxCurrentTCB
 4698 0016 D26A     		ldr	r2, [r2, #44]	@ D.6635, _4->uxPriority
 4699 0018 C2F10802 		rsb	r2, r2, #8	@ D.6635, D.6635,
 4700 001c 9A61     		str	r2, [r3, #24]	@ D.6635, _3->xEventListItem.xItemValue
3585:FreeRTOS/tasks.c **** 
3586:FreeRTOS/tasks.c **** 	return uxReturn;
 4701              		.loc 1 3586 0
 4702 001e 7B68     		ldr	r3, [r7, #4]	@ D.6636, uxReturn
3587:FreeRTOS/tasks.c **** }
 4703              		.loc 1 3587 0
 4704 0020 1846     		mov	r0, r3	@, <retval>
 4705 0022 0C37     		adds	r7, r7, #12	@,,
 4706              		.cfi_def_cfa_offset 4
 4707 0024 BD46     		mov	sp, r7	@,
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 150


 4708              		.cfi_def_cfa_register 13
 4709              		@ sp needed	@
 4710 0026 5DF8047B 		ldr	r7, [sp], #4	@,
 4711              		.cfi_restore 7
 4712              		.cfi_def_cfa_offset 0
 4713 002a 7047     		bx	lr	@
 4714              	.L335:
 4715              		.align	2
 4716              	.L334:
 4717 002c 00000000 		.word	pxCurrentTCB
 4718              		.cfi_endproc
 4719              	.LFE44:
 4720              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4721              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4722              		.align	2
 4723              		.global	pvTaskIncrementMutexHeldCount
 4724              		.thumb
 4725              		.thumb_func
 4726              		.type	pvTaskIncrementMutexHeldCount, %function
 4727              	pvTaskIncrementMutexHeldCount:
 4728              	.LFB45:
3588:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3589:FreeRTOS/tasks.c **** 
3590:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3591:FreeRTOS/tasks.c **** 
3592:FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
3593:FreeRTOS/tasks.c **** 	{
 4729              		.loc 1 3593 0
 4730              		.cfi_startproc
 4731              		@ args = 0, pretend = 0, frame = 0
 4732              		@ frame_needed = 1, uses_anonymous_args = 0
 4733              		@ link register save eliminated.
 4734 0000 80B4     		push	{r7}	@
 4735              		.cfi_def_cfa_offset 4
 4736              		.cfi_offset 7, -4
 4737 0002 00AF     		add	r7, sp, #0	@,,
 4738              		.cfi_def_cfa_register 7
3594:FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
3595:FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
3596:FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
 4739              		.loc 1 3596 0
 4740 0004 074B     		ldr	r3, .L339	@ tmp116,
 4741 0006 1B68     		ldr	r3, [r3]	@ D.6637, pxCurrentTCB
 4742 0008 002B     		cmp	r3, #0	@ D.6637,
 4743 000a 04D0     		beq	.L337	@,
3597:FreeRTOS/tasks.c **** 		{
3598:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4744              		.loc 1 3598 0
 4745 000c 054B     		ldr	r3, .L339	@ tmp117,
 4746 000e 1B68     		ldr	r3, [r3]	@ D.6637, pxCurrentTCB
 4747 0010 DA6C     		ldr	r2, [r3, #76]	@ D.6638, _2->uxMutexesHeld
 4748 0012 0132     		adds	r2, r2, #1	@ D.6638, D.6638,
 4749 0014 DA64     		str	r2, [r3, #76]	@ D.6638, _2->uxMutexesHeld
 4750              	.L337:
3599:FreeRTOS/tasks.c **** 		}
3600:FreeRTOS/tasks.c **** 
3601:FreeRTOS/tasks.c **** 		return pxCurrentTCB;
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 151


 4751              		.loc 1 3601 0
 4752 0016 034B     		ldr	r3, .L339	@ tmp118,
 4753 0018 1B68     		ldr	r3, [r3]	@ D.6639, pxCurrentTCB
3602:FreeRTOS/tasks.c **** 	}
 4754              		.loc 1 3602 0
 4755 001a 1846     		mov	r0, r3	@, <retval>
 4756 001c BD46     		mov	sp, r7	@,
 4757              		.cfi_def_cfa_register 13
 4758              		@ sp needed	@
 4759 001e 5DF8047B 		ldr	r7, [sp], #4	@,
 4760              		.cfi_restore 7
 4761              		.cfi_def_cfa_offset 0
 4762 0022 7047     		bx	lr	@
 4763              	.L340:
 4764              		.align	2
 4765              	.L339:
 4766 0024 00000000 		.word	pxCurrentTCB
 4767              		.cfi_endproc
 4768              	.LFE45:
 4769              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4770              		.text
 4771              	.Letext0:
 4772              		.file 3 "c:\\gnu tools arm embedded\\4.9 2015q1\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h
 4773              		.file 4 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\machine\\_default_types.h
 4774              		.file 5 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\stdint.h"
 4775              		.file 6 "FreeRTOS/include/projdefs.h"
 4776              		.file 7 "FreeRTOS/include/list.h"
 4777              		.file 8 "FreeRTOS/include/task.h"
 4778              		.section	.debug_info,"",%progbits
 4779              	.Ldebug_info0:
 4780 0000 4B120000 		.4byte	0x124b
 4781 0004 0400     		.2byte	0x4
 4782 0006 00000000 		.4byte	.Ldebug_abbrev0
 4783 000a 04       		.byte	0x4
 4784 000b 01       		.uleb128 0x1
 4785 000c 950B0000 		.4byte	.LASF1222
 4786 0010 01       		.byte	0x1
 4787 0011 C76B0000 		.4byte	.LASF1223
 4788 0015 48940000 		.4byte	.LASF1224
 4789 0019 00000000 		.4byte	.Ldebug_ranges0+0
 4790 001d 00000000 		.4byte	0
 4791 0021 00000000 		.4byte	.Ldebug_line0
 4792 0025 00000000 		.4byte	.Ldebug_macro0
 4793 0029 02       		.uleb128 0x2
 4794 002a 03010000 		.4byte	.LASF1033
 4795 002e 03       		.byte	0x3
 4796 002f D4       		.byte	0xd4
 4797 0030 34000000 		.4byte	0x34
 4798 0034 03       		.uleb128 0x3
 4799 0035 04       		.byte	0x4
 4800 0036 07       		.byte	0x7
 4801 0037 BD540000 		.4byte	.LASF1031
 4802 003b 04       		.uleb128 0x4
 4803 003c 04       		.byte	0x4
 4804 003d 05       		.byte	0x5
 4805 003e 696E7400 		.ascii	"int\000"
 4806 0042 03       		.uleb128 0x3
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 152


 4807 0043 01       		.byte	0x1
 4808 0044 06       		.byte	0x6
 4809 0045 BE040000 		.4byte	.LASF1032
 4810 0049 02       		.uleb128 0x2
 4811 004a B4100000 		.4byte	.LASF1034
 4812 004e 04       		.byte	0x4
 4813 004f 1D       		.byte	0x1d
 4814 0050 54000000 		.4byte	0x54
 4815 0054 03       		.uleb128 0x3
 4816 0055 01       		.byte	0x1
 4817 0056 08       		.byte	0x8
 4818 0057 A2000000 		.4byte	.LASF1035
 4819 005b 03       		.uleb128 0x3
 4820 005c 02       		.byte	0x2
 4821 005d 05       		.byte	0x5
 4822 005e 9E560000 		.4byte	.LASF1036
 4823 0062 02       		.uleb128 0x2
 4824 0063 06290000 		.4byte	.LASF1037
 4825 0067 04       		.byte	0x4
 4826 0068 2B       		.byte	0x2b
 4827 0069 6D000000 		.4byte	0x6d
 4828 006d 03       		.uleb128 0x3
 4829 006e 02       		.byte	0x2
 4830 006f 07       		.byte	0x7
 4831 0070 87360000 		.4byte	.LASF1038
 4832 0074 03       		.uleb128 0x3
 4833 0075 04       		.byte	0x4
 4834 0076 05       		.byte	0x5
 4835 0077 175B0000 		.4byte	.LASF1039
 4836 007b 02       		.uleb128 0x2
 4837 007c 413D0000 		.4byte	.LASF1040
 4838 0080 04       		.byte	0x4
 4839 0081 41       		.byte	0x41
 4840 0082 86000000 		.4byte	0x86
 4841 0086 03       		.uleb128 0x3
 4842 0087 04       		.byte	0x4
 4843 0088 07       		.byte	0x7
 4844 0089 82670000 		.4byte	.LASF1041
 4845 008d 03       		.uleb128 0x3
 4846 008e 08       		.byte	0x8
 4847 008f 05       		.byte	0x5
 4848 0090 3E490000 		.4byte	.LASF1042
 4849 0094 03       		.uleb128 0x3
 4850 0095 08       		.byte	0x8
 4851 0096 07       		.byte	0x7
 4852 0097 A4650000 		.4byte	.LASF1043
 4853 009b 03       		.uleb128 0x3
 4854 009c 04       		.byte	0x4
 4855 009d 07       		.byte	0x7
 4856 009e 5D010000 		.4byte	.LASF1044
 4857 00a2 05       		.uleb128 0x5
 4858 00a3 04       		.byte	0x4
 4859 00a4 03       		.uleb128 0x3
 4860 00a5 01       		.byte	0x1
 4861 00a6 08       		.byte	0x8
 4862 00a7 375F0000 		.4byte	.LASF1045
 4863 00ab 06       		.uleb128 0x6
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 153


 4864 00ac 04       		.byte	0x4
 4865 00ad B1000000 		.4byte	0xb1
 4866 00b1 07       		.uleb128 0x7
 4867 00b2 A4000000 		.4byte	0xa4
 4868 00b6 02       		.uleb128 0x2
 4869 00b7 E21B0000 		.4byte	.LASF1046
 4870 00bb 05       		.byte	0x5
 4871 00bc 15       		.byte	0x15
 4872 00bd 49000000 		.4byte	0x49
 4873 00c1 02       		.uleb128 0x2
 4874 00c2 72660000 		.4byte	.LASF1047
 4875 00c6 05       		.byte	0x5
 4876 00c7 21       		.byte	0x21
 4877 00c8 62000000 		.4byte	0x62
 4878 00cc 02       		.uleb128 0x2
 4879 00cd AD880000 		.4byte	.LASF1048
 4880 00d1 05       		.byte	0x5
 4881 00d2 2D       		.byte	0x2d
 4882 00d3 7B000000 		.4byte	0x7b
 4883 00d7 02       		.uleb128 0x2
 4884 00d8 06140000 		.4byte	.LASF1049
 4885 00dc 06       		.byte	0x6
 4886 00dd 49       		.byte	0x49
 4887 00de E2000000 		.4byte	0xe2
 4888 00e2 06       		.uleb128 0x6
 4889 00e3 04       		.byte	0x4
 4890 00e4 E8000000 		.4byte	0xe8
 4891 00e8 08       		.uleb128 0x8
 4892 00e9 F3000000 		.4byte	0xf3
 4893 00ed 09       		.uleb128 0x9
 4894 00ee A2000000 		.4byte	0xa2
 4895 00f2 00       		.byte	0
 4896 00f3 02       		.uleb128 0x2
 4897 00f4 17000000 		.4byte	.LASF1050
 4898 00f8 02       		.byte	0x2
 4899 00f9 5E       		.byte	0x5e
 4900 00fa CC000000 		.4byte	0xcc
 4901 00fe 02       		.uleb128 0x2
 4902 00ff 733B0000 		.4byte	.LASF1051
 4903 0103 02       		.byte	0x2
 4904 0104 60       		.byte	0x60
 4905 0105 74000000 		.4byte	0x74
 4906 0109 02       		.uleb128 0x2
 4907 010a 5A300000 		.4byte	.LASF1052
 4908 010e 02       		.byte	0x2
 4909 010f 62       		.byte	0x62
 4910 0110 86000000 		.4byte	0x86
 4911 0114 02       		.uleb128 0x2
 4912 0115 D86B0000 		.4byte	.LASF1053
 4913 0119 02       		.byte	0x2
 4914 011a 68       		.byte	0x68
 4915 011b CC000000 		.4byte	0xcc
 4916 011f 02       		.uleb128 0x2
 4917 0120 0B810000 		.4byte	.LASF1054
 4918 0124 02       		.byte	0x2
 4919 0125 69       		.byte	0x69
 4920 0126 CC000000 		.4byte	0xcc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 154


 4921 012a 06       		.uleb128 0x6
 4922 012b 04       		.byte	0x4
 4923 012c B6000000 		.4byte	0xb6
 4924 0130 0A       		.uleb128 0xa
 4925 0131 944E0000 		.4byte	.LASF1061
 4926 0135 14       		.byte	0x14
 4927 0136 07       		.byte	0x7
 4928 0137 88       		.byte	0x88
 4929 0138 79010000 		.4byte	0x179
 4930 013c 0B       		.uleb128 0xb
 4931 013d A5950000 		.4byte	.LASF1055
 4932 0141 07       		.byte	0x7
 4933 0142 8A       		.byte	0x8a
 4934 0143 1F010000 		.4byte	0x11f
 4935 0147 00       		.byte	0
 4936 0148 0B       		.uleb128 0xb
 4937 0149 650F0000 		.4byte	.LASF1056
 4938 014d 07       		.byte	0x7
 4939 014e 8B       		.byte	0x8b
 4940 014f 79010000 		.4byte	0x179
 4941 0153 04       		.byte	0x4
 4942 0154 0B       		.uleb128 0xb
 4943 0155 A06A0000 		.4byte	.LASF1057
 4944 0159 07       		.byte	0x7
 4945 015a 8C       		.byte	0x8c
 4946 015b 79010000 		.4byte	0x179
 4947 015f 08       		.byte	0x8
 4948 0160 0B       		.uleb128 0xb
 4949 0161 823A0000 		.4byte	.LASF1058
 4950 0165 07       		.byte	0x7
 4951 0166 8D       		.byte	0x8d
 4952 0167 A2000000 		.4byte	0xa2
 4953 016b 0C       		.byte	0xc
 4954 016c 0B       		.uleb128 0xb
 4955 016d CE2B0000 		.4byte	.LASF1059
 4956 0171 07       		.byte	0x7
 4957 0172 8E       		.byte	0x8e
 4958 0173 A2000000 		.4byte	0xa2
 4959 0177 10       		.byte	0x10
 4960 0178 00       		.byte	0
 4961 0179 06       		.uleb128 0x6
 4962 017a 04       		.byte	0x4
 4963 017b 30010000 		.4byte	0x130
 4964 017f 02       		.uleb128 0x2
 4965 0180 00810000 		.4byte	.LASF1060
 4966 0184 07       		.byte	0x7
 4967 0185 90       		.byte	0x90
 4968 0186 30010000 		.4byte	0x130
 4969 018a 0A       		.uleb128 0xa
 4970 018b 85270000 		.4byte	.LASF1062
 4971 018f 0C       		.byte	0xc
 4972 0190 07       		.byte	0x7
 4973 0191 92       		.byte	0x92
 4974 0192 BB010000 		.4byte	0x1bb
 4975 0196 0B       		.uleb128 0xb
 4976 0197 A5950000 		.4byte	.LASF1055
 4977 019b 07       		.byte	0x7
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 155


 4978 019c 94       		.byte	0x94
 4979 019d 1F010000 		.4byte	0x11f
 4980 01a1 00       		.byte	0
 4981 01a2 0B       		.uleb128 0xb
 4982 01a3 650F0000 		.4byte	.LASF1056
 4983 01a7 07       		.byte	0x7
 4984 01a8 95       		.byte	0x95
 4985 01a9 79010000 		.4byte	0x179
 4986 01ad 04       		.byte	0x4
 4987 01ae 0B       		.uleb128 0xb
 4988 01af A06A0000 		.4byte	.LASF1057
 4989 01b3 07       		.byte	0x7
 4990 01b4 96       		.byte	0x96
 4991 01b5 79010000 		.4byte	0x179
 4992 01b9 08       		.byte	0x8
 4993 01ba 00       		.byte	0
 4994 01bb 02       		.uleb128 0x2
 4995 01bc CC3E0000 		.4byte	.LASF1063
 4996 01c0 07       		.byte	0x7
 4997 01c1 98       		.byte	0x98
 4998 01c2 8A010000 		.4byte	0x18a
 4999 01c6 0A       		.uleb128 0xa
 5000 01c7 74760000 		.4byte	.LASF1064
 5001 01cb 14       		.byte	0x14
 5002 01cc 07       		.byte	0x7
 5003 01cd 9D       		.byte	0x9d
 5004 01ce F7010000 		.4byte	0x1f7
 5005 01d2 0B       		.uleb128 0xb
 5006 01d3 D0560000 		.4byte	.LASF1065
 5007 01d7 07       		.byte	0x7
 5008 01d8 9F       		.byte	0x9f
 5009 01d9 09010000 		.4byte	0x109
 5010 01dd 00       		.byte	0
 5011 01de 0B       		.uleb128 0xb
 5012 01df A3240000 		.4byte	.LASF1066
 5013 01e3 07       		.byte	0x7
 5014 01e4 A0       		.byte	0xa0
 5015 01e5 F7010000 		.4byte	0x1f7
 5016 01e9 04       		.byte	0x4
 5017 01ea 0B       		.uleb128 0xb
 5018 01eb 275D0000 		.4byte	.LASF1067
 5019 01ef 07       		.byte	0x7
 5020 01f0 A1       		.byte	0xa1
 5021 01f1 BB010000 		.4byte	0x1bb
 5022 01f5 08       		.byte	0x8
 5023 01f6 00       		.byte	0
 5024 01f7 06       		.uleb128 0x6
 5025 01f8 04       		.byte	0x4
 5026 01f9 7F010000 		.4byte	0x17f
 5027 01fd 02       		.uleb128 0x2
 5028 01fe 645A0000 		.4byte	.LASF1068
 5029 0202 07       		.byte	0x7
 5030 0203 A2       		.byte	0xa2
 5031 0204 C6010000 		.4byte	0x1c6
 5032 0208 02       		.uleb128 0x2
 5033 0209 51590000 		.4byte	.LASF1069
 5034 020d 08       		.byte	0x8
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 156


 5035 020e 63       		.byte	0x63
 5036 020f A2000000 		.4byte	0xa2
 5037 0213 0C       		.uleb128 0xc
 5038 0214 01       		.byte	0x1
 5039 0215 08       		.byte	0x8
 5040 0216 6D       		.byte	0x6d
 5041 0217 3A020000 		.4byte	0x23a
 5042 021b 0D       		.uleb128 0xd
 5043 021c E2520000 		.4byte	.LASF1070
 5044 0220 00       		.sleb128 0
 5045 0221 0D       		.uleb128 0xd
 5046 0222 DD3B0000 		.4byte	.LASF1071
 5047 0226 01       		.sleb128 1
 5048 0227 0D       		.uleb128 0xd
 5049 0228 F75D0000 		.4byte	.LASF1072
 5050 022c 02       		.sleb128 2
 5051 022d 0D       		.uleb128 0xd
 5052 022e D71B0000 		.4byte	.LASF1073
 5053 0232 03       		.sleb128 3
 5054 0233 0D       		.uleb128 0xd
 5055 0234 6E080000 		.4byte	.LASF1074
 5056 0238 04       		.sleb128 4
 5057 0239 00       		.byte	0
 5058 023a 02       		.uleb128 0x2
 5059 023b 09050000 		.4byte	.LASF1075
 5060 023f 08       		.byte	0x8
 5061 0240 73       		.byte	0x73
 5062 0241 13020000 		.4byte	0x213
 5063 0245 0A       		.uleb128 0xa
 5064 0246 21070000 		.4byte	.LASF1076
 5065 024a 08       		.byte	0x8
 5066 024b 08       		.byte	0x8
 5067 024c 78       		.byte	0x78
 5068 024d 6A020000 		.4byte	0x26a
 5069 0251 0B       		.uleb128 0xb
 5070 0252 733A0000 		.4byte	.LASF1077
 5071 0256 08       		.byte	0x8
 5072 0257 7A       		.byte	0x7a
 5073 0258 FE000000 		.4byte	0xfe
 5074 025c 00       		.byte	0
 5075 025d 0B       		.uleb128 0xb
 5076 025e 67230000 		.4byte	.LASF1078
 5077 0262 08       		.byte	0x8
 5078 0263 7B       		.byte	0x7b
 5079 0264 1F010000 		.4byte	0x11f
 5080 0268 04       		.byte	0x4
 5081 0269 00       		.byte	0
 5082 026a 02       		.uleb128 0x2
 5083 026b D6290000 		.4byte	.LASF1079
 5084 026f 08       		.byte	0x8
 5085 0270 7C       		.byte	0x7c
 5086 0271 45020000 		.4byte	0x245
 5087 0275 0A       		.uleb128 0xa
 5088 0276 F07C0000 		.4byte	.LASF1080
 5089 027a 0C       		.byte	0xc
 5090 027b 08       		.byte	0x8
 5091 027c 81       		.byte	0x81
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 157


 5092 027d A6020000 		.4byte	0x2a6
 5093 0281 0B       		.uleb128 0xb
 5094 0282 38470000 		.4byte	.LASF1081
 5095 0286 08       		.byte	0x8
 5096 0287 83       		.byte	0x83
 5097 0288 A2000000 		.4byte	0xa2
 5098 028c 00       		.byte	0
 5099 028d 0B       		.uleb128 0xb
 5100 028e F94F0000 		.4byte	.LASF1082
 5101 0292 08       		.byte	0x8
 5102 0293 84       		.byte	0x84
 5103 0294 CC000000 		.4byte	0xcc
 5104 0298 04       		.byte	0x4
 5105 0299 0B       		.uleb128 0xb
 5106 029a 5E900000 		.4byte	.LASF1083
 5107 029e 08       		.byte	0x8
 5108 029f 85       		.byte	0x85
 5109 02a0 CC000000 		.4byte	0xcc
 5110 02a4 08       		.byte	0x8
 5111 02a5 00       		.byte	0
 5112 02a6 02       		.uleb128 0x2
 5113 02a7 49040000 		.4byte	.LASF1084
 5114 02ab 08       		.byte	0x8
 5115 02ac 86       		.byte	0x86
 5116 02ad 75020000 		.4byte	0x275
 5117 02b1 07       		.uleb128 0x7
 5118 02b2 AB000000 		.4byte	0xab
 5119 02b6 06       		.uleb128 0x6
 5120 02b7 04       		.byte	0x4
 5121 02b8 F3000000 		.4byte	0xf3
 5122 02bc 0A       		.uleb128 0xa
 5123 02bd 5E3E0000 		.4byte	.LASF1085
 5124 02c1 20       		.byte	0x20
 5125 02c2 08       		.byte	0x8
 5126 02c3 98       		.byte	0x98
 5127 02c4 29030000 		.4byte	0x329
 5128 02c8 0B       		.uleb128 0xb
 5129 02c9 AC090000 		.4byte	.LASF1086
 5130 02cd 08       		.byte	0x8
 5131 02ce 9A       		.byte	0x9a
 5132 02cf 08020000 		.4byte	0x208
 5133 02d3 00       		.byte	0
 5134 02d4 0B       		.uleb128 0xb
 5135 02d5 5B610000 		.4byte	.LASF1087
 5136 02d9 08       		.byte	0x8
 5137 02da 9B       		.byte	0x9b
 5138 02db AB000000 		.4byte	0xab
 5139 02df 04       		.byte	0x4
 5140 02e0 0B       		.uleb128 0xb
 5141 02e1 51600000 		.4byte	.LASF1088
 5142 02e5 08       		.byte	0x8
 5143 02e6 9C       		.byte	0x9c
 5144 02e7 09010000 		.4byte	0x109
 5145 02eb 08       		.byte	0x8
 5146 02ec 0B       		.uleb128 0xb
 5147 02ed 8E720000 		.4byte	.LASF1089
 5148 02f1 08       		.byte	0x8
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 158


 5149 02f2 9D       		.byte	0x9d
 5150 02f3 3A020000 		.4byte	0x23a
 5151 02f7 0C       		.byte	0xc
 5152 02f8 0B       		.uleb128 0xb
 5153 02f9 4E120000 		.4byte	.LASF1090
 5154 02fd 08       		.byte	0x8
 5155 02fe 9E       		.byte	0x9e
 5156 02ff 09010000 		.4byte	0x109
 5157 0303 10       		.byte	0x10
 5158 0304 0B       		.uleb128 0xb
 5159 0305 EF100000 		.4byte	.LASF1091
 5160 0309 08       		.byte	0x8
 5161 030a 9F       		.byte	0x9f
 5162 030b 09010000 		.4byte	0x109
 5163 030f 14       		.byte	0x14
 5164 0310 0B       		.uleb128 0xb
 5165 0311 AB2C0000 		.4byte	.LASF1092
 5166 0315 08       		.byte	0x8
 5167 0316 A0       		.byte	0xa0
 5168 0317 CC000000 		.4byte	0xcc
 5169 031b 18       		.byte	0x18
 5170 031c 0B       		.uleb128 0xb
 5171 031d 225F0000 		.4byte	.LASF1093
 5172 0321 08       		.byte	0x8
 5173 0322 A1       		.byte	0xa1
 5174 0323 C1000000 		.4byte	0xc1
 5175 0327 1C       		.byte	0x1c
 5176 0328 00       		.byte	0
 5177 0329 02       		.uleb128 0x2
 5178 032a 030E0000 		.4byte	.LASF1094
 5179 032e 08       		.byte	0x8
 5180 032f A2       		.byte	0xa2
 5181 0330 BC020000 		.4byte	0x2bc
 5182 0334 0A       		.uleb128 0xa
 5183 0335 D0620000 		.4byte	.LASF1095
 5184 0339 50       		.byte	0x50
 5185 033a 01       		.byte	0x1
 5186 033b 78       		.byte	0x78
 5187 033c B9030000 		.4byte	0x3b9
 5188 0340 0B       		.uleb128 0xb
 5189 0341 AB240000 		.4byte	.LASF1096
 5190 0345 01       		.byte	0x1
 5191 0346 7A       		.byte	0x7a
 5192 0347 B9030000 		.4byte	0x3b9
 5193 034b 00       		.byte	0
 5194 034c 0B       		.uleb128 0xb
 5195 034d 7B8B0000 		.4byte	.LASF1097
 5196 0351 01       		.byte	0x1
 5197 0352 80       		.byte	0x80
 5198 0353 7F010000 		.4byte	0x17f
 5199 0357 04       		.byte	0x4
 5200 0358 0B       		.uleb128 0xb
 5201 0359 AF040000 		.4byte	.LASF1098
 5202 035d 01       		.byte	0x1
 5203 035e 81       		.byte	0x81
 5204 035f 7F010000 		.4byte	0x17f
 5205 0363 18       		.byte	0x18
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 159


 5206 0364 0B       		.uleb128 0xb
 5207 0365 DD950000 		.4byte	.LASF1099
 5208 0369 01       		.byte	0x1
 5209 036a 82       		.byte	0x82
 5210 036b 09010000 		.4byte	0x109
 5211 036f 2C       		.byte	0x2c
 5212 0370 0B       		.uleb128 0xb
 5213 0371 FA080000 		.4byte	.LASF1100
 5214 0375 01       		.byte	0x1
 5215 0376 83       		.byte	0x83
 5216 0377 B6020000 		.4byte	0x2b6
 5217 037b 30       		.byte	0x30
 5218 037c 0B       		.uleb128 0xb
 5219 037d 5B610000 		.4byte	.LASF1087
 5220 0381 01       		.byte	0x1
 5221 0382 84       		.byte	0x84
 5222 0383 C4030000 		.4byte	0x3c4
 5223 0387 34       		.byte	0x34
 5224 0388 0B       		.uleb128 0xb
 5225 0389 33830000 		.4byte	.LASF1101
 5226 038d 01       		.byte	0x1
 5227 038e 8F       		.byte	0x8f
 5228 038f 09010000 		.4byte	0x109
 5229 0393 40       		.byte	0x40
 5230 0394 0B       		.uleb128 0xb
 5231 0395 CB070000 		.4byte	.LASF1102
 5232 0399 01       		.byte	0x1
 5233 039a 90       		.byte	0x90
 5234 039b 09010000 		.4byte	0x109
 5235 039f 44       		.byte	0x44
 5236 03a0 0B       		.uleb128 0xb
 5237 03a1 EF100000 		.4byte	.LASF1091
 5238 03a5 01       		.byte	0x1
 5239 03a6 94       		.byte	0x94
 5240 03a7 09010000 		.4byte	0x109
 5241 03ab 48       		.byte	0x48
 5242 03ac 0B       		.uleb128 0xb
 5243 03ad 56580000 		.4byte	.LASF1103
 5244 03b1 01       		.byte	0x1
 5245 03b2 95       		.byte	0x95
 5246 03b3 09010000 		.4byte	0x109
 5247 03b7 4C       		.byte	0x4c
 5248 03b8 00       		.byte	0
 5249 03b9 06       		.uleb128 0x6
 5250 03ba 04       		.byte	0x4
 5251 03bb BF030000 		.4byte	0x3bf
 5252 03bf 0E       		.uleb128 0xe
 5253 03c0 F3000000 		.4byte	0xf3
 5254 03c4 0F       		.uleb128 0xf
 5255 03c5 A4000000 		.4byte	0xa4
 5256 03c9 D4030000 		.4byte	0x3d4
 5257 03cd 10       		.uleb128 0x10
 5258 03ce 9B000000 		.4byte	0x9b
 5259 03d2 0B       		.byte	0xb
 5260 03d3 00       		.byte	0
 5261 03d4 02       		.uleb128 0x2
 5262 03d5 45110000 		.4byte	.LASF1104
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 160


 5263 03d9 01       		.byte	0x1
 5264 03da AB       		.byte	0xab
 5265 03db 34030000 		.4byte	0x334
 5266 03df 02       		.uleb128 0x2
 5267 03e0 4A830000 		.4byte	.LASF1105
 5268 03e4 01       		.byte	0x1
 5269 03e5 AF       		.byte	0xaf
 5270 03e6 D4030000 		.4byte	0x3d4
 5271 03ea 11       		.uleb128 0x11
 5272 03eb D4300000 		.4byte	.LASF1225
 5273 03ef 02       		.byte	0x2
 5274 03f0 A1       		.byte	0xa1
 5275 03f1 B6000000 		.4byte	0xb6
 5276 03f5 03       		.byte	0x3
 5277 03f6 11040000 		.4byte	0x411
 5278 03fa 12       		.uleb128 0x12
 5279 03fb 418C0000 		.4byte	.LASF1226
 5280 03ff 02       		.byte	0x2
 5281 0400 A1       		.byte	0xa1
 5282 0401 CC000000 		.4byte	0xcc
 5283 0405 13       		.uleb128 0x13
 5284 0406 6F3C0000 		.4byte	.LASF1227
 5285 040a 02       		.byte	0x2
 5286 040b A3       		.byte	0xa3
 5287 040c B6000000 		.4byte	0xb6
 5288 0410 00       		.byte	0
 5289 0411 14       		.uleb128 0x14
 5290 0412 06730000 		.4byte	.LASF1127
 5291 0416 01       		.byte	0x1
 5292 0417 0402     		.2byte	0x204
 5293 0419 FE000000 		.4byte	0xfe
 5294 041d 00000000 		.4byte	.LFB1
 5295 0421 68010000 		.4byte	.LFE1-.LFB1
 5296 0425 01       		.uleb128 0x1
 5297 0426 9C       		.byte	0x9c
 5298 0427 DB040000 		.4byte	0x4db
 5299 042b 15       		.uleb128 0x15
 5300 042c 4E270000 		.4byte	.LASF1106
 5301 0430 01       		.byte	0x1
 5302 0431 0402     		.2byte	0x204
 5303 0433 D7000000 		.4byte	0xd7
 5304 0437 02       		.uleb128 0x2
 5305 0438 91       		.byte	0x91
 5306 0439 64       		.sleb128 -28
 5307 043a 15       		.uleb128 0x15
 5308 043b 261A0000 		.4byte	.LASF1107
 5309 043f 01       		.byte	0x1
 5310 0440 0402     		.2byte	0x204
 5311 0442 B1020000 		.4byte	0x2b1
 5312 0446 02       		.uleb128 0x2
 5313 0447 91       		.byte	0x91
 5314 0448 60       		.sleb128 -32
 5315 0449 15       		.uleb128 0x15
 5316 044a 92020000 		.4byte	.LASF1108
 5317 044e 01       		.byte	0x1
 5318 044f 0402     		.2byte	0x204
 5319 0451 DB040000 		.4byte	0x4db
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 161


 5320 0455 02       		.uleb128 0x2
 5321 0456 91       		.byte	0x91
 5322 0457 5E       		.sleb128 -34
 5323 0458 15       		.uleb128 0x15
 5324 0459 1D860000 		.4byte	.LASF1109
 5325 045d 01       		.byte	0x1
 5326 045e 0402     		.2byte	0x204
 5327 0460 E0040000 		.4byte	0x4e0
 5328 0464 02       		.uleb128 0x2
 5329 0465 91       		.byte	0x91
 5330 0466 58       		.sleb128 -40
 5331 0467 15       		.uleb128 0x15
 5332 0468 DD950000 		.4byte	.LASF1099
 5333 046c 01       		.byte	0x1
 5334 046d 0402     		.2byte	0x204
 5335 046f 09010000 		.4byte	0x109
 5336 0473 02       		.uleb128 0x2
 5337 0474 91       		.byte	0x91
 5338 0475 00       		.sleb128 0
 5339 0476 15       		.uleb128 0x15
 5340 0477 E1350000 		.4byte	.LASF1110
 5341 047b 01       		.byte	0x1
 5342 047c 0402     		.2byte	0x204
 5343 047e E5040000 		.4byte	0x4e5
 5344 0482 02       		.uleb128 0x2
 5345 0483 91       		.byte	0x91
 5346 0484 04       		.sleb128 4
 5347 0485 15       		.uleb128 0x15
 5348 0486 0C6B0000 		.4byte	.LASF1111
 5349 048a 01       		.byte	0x1
 5350 048b 0402     		.2byte	0x204
 5351 048d F0040000 		.4byte	0x4f0
 5352 0491 02       		.uleb128 0x2
 5353 0492 91       		.byte	0x91
 5354 0493 08       		.sleb128 8
 5355 0494 15       		.uleb128 0x15
 5356 0495 04890000 		.4byte	.LASF1112
 5357 0499 01       		.byte	0x1
 5358 049a 0402     		.2byte	0x204
 5359 049c F5040000 		.4byte	0x4f5
 5360 04a0 02       		.uleb128 0x2
 5361 04a1 91       		.byte	0x91
 5362 04a2 0C       		.sleb128 12
 5363 04a3 16       		.uleb128 0x16
 5364 04a4 9E210000 		.4byte	.LASF1113
 5365 04a8 01       		.byte	0x1
 5366 04a9 0602     		.2byte	0x206
 5367 04ab FE000000 		.4byte	0xfe
 5368 04af 02       		.uleb128 0x2
 5369 04b0 91       		.byte	0x91
 5370 04b1 74       		.sleb128 -12
 5371 04b2 16       		.uleb128 0x16
 5372 04b3 9B0F0000 		.4byte	.LASF1114
 5373 04b7 01       		.byte	0x1
 5374 04b8 0702     		.2byte	0x207
 5375 04ba 05050000 		.4byte	0x505
 5376 04be 02       		.uleb128 0x2
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 162


 5377 04bf 91       		.byte	0x91
 5378 04c0 70       		.sleb128 -16
 5379 04c1 17       		.uleb128 0x17
 5380 04c2 3A000000 		.4byte	.LBB6
 5381 04c6 E6000000 		.4byte	.LBE6-.LBB6
 5382 04ca 16       		.uleb128 0x16
 5383 04cb AB240000 		.4byte	.LASF1096
 5384 04cf 01       		.byte	0x1
 5385 04d0 1202     		.2byte	0x212
 5386 04d2 B6020000 		.4byte	0x2b6
 5387 04d6 02       		.uleb128 0x2
 5388 04d7 91       		.byte	0x91
 5389 04d8 6C       		.sleb128 -20
 5390 04d9 00       		.byte	0
 5391 04da 00       		.byte	0
 5392 04db 07       		.uleb128 0x7
 5393 04dc C1000000 		.4byte	0xc1
 5394 04e0 07       		.uleb128 0x7
 5395 04e1 A2000000 		.4byte	0xa2
 5396 04e5 07       		.uleb128 0x7
 5397 04e6 EA040000 		.4byte	0x4ea
 5398 04ea 06       		.uleb128 0x6
 5399 04eb 04       		.byte	0x4
 5400 04ec 08020000 		.4byte	0x208
 5401 04f0 07       		.uleb128 0x7
 5402 04f1 B6020000 		.4byte	0x2b6
 5403 04f5 07       		.uleb128 0x7
 5404 04f6 FA040000 		.4byte	0x4fa
 5405 04fa 06       		.uleb128 0x6
 5406 04fb 04       		.byte	0x4
 5407 04fc 00050000 		.4byte	0x500
 5408 0500 07       		.uleb128 0x7
 5409 0501 A6020000 		.4byte	0x2a6
 5410 0505 06       		.uleb128 0x6
 5411 0506 04       		.byte	0x4
 5412 0507 DF030000 		.4byte	0x3df
 5413 050b 18       		.uleb128 0x18
 5414 050c 932B0000 		.4byte	.LASF1117
 5415 0510 01       		.byte	0x1
 5416 0511 B802     		.2byte	0x2b8
 5417 0513 00000000 		.4byte	.LFB2
 5418 0517 E8000000 		.4byte	.LFE2-.LFB2
 5419 051b 01       		.uleb128 0x1
 5420 051c 9C       		.byte	0x9c
 5421 051d 40050000 		.4byte	0x540
 5422 0521 15       		.uleb128 0x15
 5423 0522 868C0000 		.4byte	.LASF1115
 5424 0526 01       		.byte	0x1
 5425 0527 B802     		.2byte	0x2b8
 5426 0529 08020000 		.4byte	0x208
 5427 052d 02       		.uleb128 0x2
 5428 052e 91       		.byte	0x91
 5429 052f 6C       		.sleb128 -20
 5430 0530 16       		.uleb128 0x16
 5431 0531 C4950000 		.4byte	.LASF1116
 5432 0535 01       		.byte	0x1
 5433 0536 BA02     		.2byte	0x2ba
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 163


 5434 0538 05050000 		.4byte	0x505
 5435 053c 02       		.uleb128 0x2
 5436 053d 91       		.byte	0x91
 5437 053e 74       		.sleb128 -12
 5438 053f 00       		.byte	0
 5439 0540 18       		.uleb128 0x18
 5440 0541 FC6A0000 		.4byte	.LASF1118
 5441 0545 01       		.byte	0x1
 5442 0546 0A03     		.2byte	0x30a
 5443 0548 00000000 		.4byte	.LFB3
 5444 054c E4000000 		.4byte	.LFE3-.LFB3
 5445 0550 01       		.uleb128 0x1
 5446 0551 9C       		.byte	0x9c
 5447 0552 BB050000 		.4byte	0x5bb
 5448 0556 15       		.uleb128 0x15
 5449 0557 806D0000 		.4byte	.LASF1119
 5450 055b 01       		.byte	0x1
 5451 055c 0A03     		.2byte	0x30a
 5452 055e BB050000 		.4byte	0x5bb
 5453 0562 02       		.uleb128 0x2
 5454 0563 91       		.byte	0x91
 5455 0564 64       		.sleb128 -28
 5456 0565 15       		.uleb128 0x15
 5457 0566 E4620000 		.4byte	.LASF1120
 5458 056a 01       		.byte	0x1
 5459 056b 0A03     		.2byte	0x30a
 5460 056d C6050000 		.4byte	0x5c6
 5461 0571 02       		.uleb128 0x2
 5462 0572 91       		.byte	0x91
 5463 0573 60       		.sleb128 -32
 5464 0574 16       		.uleb128 0x16
 5465 0575 63540000 		.4byte	.LASF1121
 5466 0579 01       		.byte	0x1
 5467 057a 0C03     		.2byte	0x30c
 5468 057c 1F010000 		.4byte	0x11f
 5469 0580 02       		.uleb128 0x2
 5470 0581 91       		.byte	0x91
 5471 0582 6C       		.sleb128 -20
 5472 0583 16       		.uleb128 0x16
 5473 0584 A06F0000 		.4byte	.LASF1122
 5474 0588 01       		.byte	0x1
 5475 0589 0D03     		.2byte	0x30d
 5476 058b FE000000 		.4byte	0xfe
 5477 058f 02       		.uleb128 0x2
 5478 0590 91       		.byte	0x91
 5479 0591 68       		.sleb128 -24
 5480 0592 16       		.uleb128 0x16
 5481 0593 695F0000 		.4byte	.LASF1123
 5482 0597 01       		.byte	0x1
 5483 0598 0D03     		.2byte	0x30d
 5484 059a FE000000 		.4byte	0xfe
 5485 059e 02       		.uleb128 0x2
 5486 059f 91       		.byte	0x91
 5487 05a0 74       		.sleb128 -12
 5488 05a1 17       		.uleb128 0x17
 5489 05a2 38000000 		.4byte	.LBB7
 5490 05a6 84000000 		.4byte	.LBE7-.LBB7
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 164


 5491 05aa 16       		.uleb128 0x16
 5492 05ab 9E5D0000 		.4byte	.LASF1124
 5493 05af 01       		.byte	0x1
 5494 05b0 1703     		.2byte	0x317
 5495 05b2 C6050000 		.4byte	0x5c6
 5496 05b6 02       		.uleb128 0x2
 5497 05b7 91       		.byte	0x91
 5498 05b8 70       		.sleb128 -16
 5499 05b9 00       		.byte	0
 5500 05ba 00       		.byte	0
 5501 05bb 07       		.uleb128 0x7
 5502 05bc C0050000 		.4byte	0x5c0
 5503 05c0 06       		.uleb128 0x6
 5504 05c1 04       		.byte	0x4
 5505 05c2 1F010000 		.4byte	0x11f
 5506 05c6 07       		.uleb128 0x7
 5507 05c7 1F010000 		.4byte	0x11f
 5508 05cb 18       		.uleb128 0x18
 5509 05cc 31630000 		.4byte	.LASF1125
 5510 05d0 01       		.byte	0x1
 5511 05d1 6A03     		.2byte	0x36a
 5512 05d3 00000000 		.4byte	.LFB4
 5513 05d7 84000000 		.4byte	.LFE4-.LFB4
 5514 05db 01       		.uleb128 0x1
 5515 05dc 9C       		.byte	0x9c
 5516 05dd 0F060000 		.4byte	0x60f
 5517 05e1 15       		.uleb128 0x15
 5518 05e2 34840000 		.4byte	.LASF1126
 5519 05e6 01       		.byte	0x1
 5520 05e7 6A03     		.2byte	0x36a
 5521 05e9 C6050000 		.4byte	0x5c6
 5522 05ed 02       		.uleb128 0x2
 5523 05ee 91       		.byte	0x91
 5524 05ef 6C       		.sleb128 -20
 5525 05f0 16       		.uleb128 0x16
 5526 05f1 63540000 		.4byte	.LASF1121
 5527 05f5 01       		.byte	0x1
 5528 05f6 6C03     		.2byte	0x36c
 5529 05f8 1F010000 		.4byte	0x11f
 5530 05fc 02       		.uleb128 0x2
 5531 05fd 91       		.byte	0x91
 5532 05fe 70       		.sleb128 -16
 5533 05ff 16       		.uleb128 0x16
 5534 0600 A06F0000 		.4byte	.LASF1122
 5535 0604 01       		.byte	0x1
 5536 0605 6D03     		.2byte	0x36d
 5537 0607 FE000000 		.4byte	0xfe
 5538 060b 02       		.uleb128 0x2
 5539 060c 91       		.byte	0x91
 5540 060d 74       		.sleb128 -12
 5541 060e 00       		.byte	0
 5542 060f 14       		.uleb128 0x14
 5543 0610 105F0000 		.4byte	.LASF1128
 5544 0614 01       		.byte	0x1
 5545 0615 F203     		.2byte	0x3f2
 5546 0617 09010000 		.4byte	0x109
 5547 061b 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 165


 5548 061f 34000000 		.4byte	.LFE5-.LFB5
 5549 0623 01       		.uleb128 0x1
 5550 0624 9C       		.byte	0x9c
 5551 0625 57060000 		.4byte	0x657
 5552 0629 15       		.uleb128 0x15
 5553 062a 4E650000 		.4byte	.LASF1129
 5554 062e 01       		.byte	0x1
 5555 062f F203     		.2byte	0x3f2
 5556 0631 08020000 		.4byte	0x208
 5557 0635 02       		.uleb128 0x2
 5558 0636 91       		.byte	0x91
 5559 0637 6C       		.sleb128 -20
 5560 0638 16       		.uleb128 0x16
 5561 0639 C4950000 		.4byte	.LASF1116
 5562 063d 01       		.byte	0x1
 5563 063e F403     		.2byte	0x3f4
 5564 0640 05050000 		.4byte	0x505
 5565 0644 02       		.uleb128 0x2
 5566 0645 91       		.byte	0x91
 5567 0646 74       		.sleb128 -12
 5568 0647 16       		.uleb128 0x16
 5569 0648 2F0F0000 		.4byte	.LASF1130
 5570 064c 01       		.byte	0x1
 5571 064d F503     		.2byte	0x3f5
 5572 064f 09010000 		.4byte	0x109
 5573 0653 02       		.uleb128 0x2
 5574 0654 91       		.byte	0x91
 5575 0655 70       		.sleb128 -16
 5576 0656 00       		.byte	0
 5577 0657 18       		.uleb128 0x18
 5578 0658 FC780000 		.4byte	.LASF1131
 5579 065c 01       		.byte	0x1
 5580 065d 0804     		.2byte	0x408
 5581 065f 00000000 		.4byte	.LFB6
 5582 0663 40010000 		.4byte	.LFE6-.LFB6
 5583 0667 01       		.uleb128 0x1
 5584 0668 9C       		.byte	0x9c
 5585 0669 C8060000 		.4byte	0x6c8
 5586 066d 15       		.uleb128 0x15
 5587 066e 4E650000 		.4byte	.LASF1129
 5588 0672 01       		.byte	0x1
 5589 0673 0804     		.2byte	0x408
 5590 0675 08020000 		.4byte	0x208
 5591 0679 02       		.uleb128 0x2
 5592 067a 91       		.byte	0x91
 5593 067b 64       		.sleb128 -28
 5594 067c 15       		.uleb128 0x15
 5595 067d A47C0000 		.4byte	.LASF1132
 5596 0681 01       		.byte	0x1
 5597 0682 0804     		.2byte	0x408
 5598 0684 09010000 		.4byte	0x109
 5599 0688 02       		.uleb128 0x2
 5600 0689 91       		.byte	0x91
 5601 068a 60       		.sleb128 -32
 5602 068b 16       		.uleb128 0x16
 5603 068c C4950000 		.4byte	.LASF1116
 5604 0690 01       		.byte	0x1
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 166


 5605 0691 0A04     		.2byte	0x40a
 5606 0693 05050000 		.4byte	0x505
 5607 0697 02       		.uleb128 0x2
 5608 0698 91       		.byte	0x91
 5609 0699 70       		.sleb128 -16
 5610 069a 16       		.uleb128 0x16
 5611 069b BD130000 		.4byte	.LASF1133
 5612 069f 01       		.byte	0x1
 5613 06a0 0B04     		.2byte	0x40b
 5614 06a2 09010000 		.4byte	0x109
 5615 06a6 02       		.uleb128 0x2
 5616 06a7 91       		.byte	0x91
 5617 06a8 6C       		.sleb128 -20
 5618 06a9 16       		.uleb128 0x16
 5619 06aa 18610000 		.4byte	.LASF1134
 5620 06ae 01       		.byte	0x1
 5621 06af 0B04     		.2byte	0x40b
 5622 06b1 09010000 		.4byte	0x109
 5623 06b5 02       		.uleb128 0x2
 5624 06b6 91       		.byte	0x91
 5625 06b7 68       		.sleb128 -24
 5626 06b8 16       		.uleb128 0x16
 5627 06b9 F1490000 		.4byte	.LASF1135
 5628 06bd 01       		.byte	0x1
 5629 06be 0C04     		.2byte	0x40c
 5630 06c0 FE000000 		.4byte	0xfe
 5631 06c4 02       		.uleb128 0x2
 5632 06c5 91       		.byte	0x91
 5633 06c6 74       		.sleb128 -12
 5634 06c7 00       		.byte	0
 5635 06c8 18       		.uleb128 0x18
 5636 06c9 C7600000 		.4byte	.LASF1136
 5637 06cd 01       		.byte	0x1
 5638 06ce AC04     		.2byte	0x4ac
 5639 06d0 00000000 		.4byte	.LFB7
 5640 06d4 F0000000 		.4byte	.LFE7-.LFB7
 5641 06d8 01       		.uleb128 0x1
 5642 06d9 9C       		.byte	0x9c
 5643 06da FD060000 		.4byte	0x6fd
 5644 06de 15       		.uleb128 0x15
 5645 06df 100E0000 		.4byte	.LASF1137
 5646 06e3 01       		.byte	0x1
 5647 06e4 AC04     		.2byte	0x4ac
 5648 06e6 08020000 		.4byte	0x208
 5649 06ea 02       		.uleb128 0x2
 5650 06eb 91       		.byte	0x91
 5651 06ec 6C       		.sleb128 -20
 5652 06ed 16       		.uleb128 0x16
 5653 06ee C4950000 		.4byte	.LASF1116
 5654 06f2 01       		.byte	0x1
 5655 06f3 AE04     		.2byte	0x4ae
 5656 06f5 05050000 		.4byte	0x505
 5657 06f9 02       		.uleb128 0x2
 5658 06fa 91       		.byte	0x91
 5659 06fb 74       		.sleb128 -12
 5660 06fc 00       		.byte	0
 5661 06fd 19       		.uleb128 0x19
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 167


 5662 06fe BC570000 		.4byte	.LASF1183
 5663 0702 01       		.byte	0x1
 5664 0703 0505     		.2byte	0x505
 5665 0705 FE000000 		.4byte	0xfe
 5666 0709 00000000 		.4byte	.LFB8
 5667 070d 64000000 		.4byte	.LFE8-.LFB8
 5668 0711 01       		.uleb128 0x1
 5669 0712 9C       		.byte	0x9c
 5670 0713 45070000 		.4byte	0x745
 5671 0717 15       		.uleb128 0x15
 5672 0718 4E650000 		.4byte	.LASF1129
 5673 071c 01       		.byte	0x1
 5674 071d 0505     		.2byte	0x505
 5675 071f 45070000 		.4byte	0x745
 5676 0723 02       		.uleb128 0x2
 5677 0724 91       		.byte	0x91
 5678 0725 6C       		.sleb128 -20
 5679 0726 16       		.uleb128 0x16
 5680 0727 9E210000 		.4byte	.LASF1113
 5681 072b 01       		.byte	0x1
 5682 072c 0705     		.2byte	0x507
 5683 072e FE000000 		.4byte	0xfe
 5684 0732 02       		.uleb128 0x2
 5685 0733 91       		.byte	0x91
 5686 0734 74       		.sleb128 -12
 5687 0735 16       		.uleb128 0x16
 5688 0736 C4950000 		.4byte	.LASF1116
 5689 073a 01       		.byte	0x1
 5690 073b 0805     		.2byte	0x508
 5691 073d 4A070000 		.4byte	0x74a
 5692 0741 02       		.uleb128 0x2
 5693 0742 91       		.byte	0x91
 5694 0743 70       		.sleb128 -16
 5695 0744 00       		.byte	0
 5696 0745 07       		.uleb128 0x7
 5697 0746 08020000 		.4byte	0x208
 5698 074a 07       		.uleb128 0x7
 5699 074b 4F070000 		.4byte	0x74f
 5700 074f 06       		.uleb128 0x6
 5701 0750 04       		.byte	0x4
 5702 0751 55070000 		.4byte	0x755
 5703 0755 07       		.uleb128 0x7
 5704 0756 DF030000 		.4byte	0x3df
 5705 075a 18       		.uleb128 0x18
 5706 075b 1B6B0000 		.4byte	.LASF1138
 5707 075f 01       		.byte	0x1
 5708 0760 3305     		.2byte	0x533
 5709 0762 00000000 		.4byte	.LFB9
 5710 0766 9C000000 		.4byte	.LFE9-.LFB9
 5711 076a 01       		.uleb128 0x1
 5712 076b 9C       		.byte	0x9c
 5713 076c 8F070000 		.4byte	0x78f
 5714 0770 15       		.uleb128 0x15
 5715 0771 19360000 		.4byte	.LASF1139
 5716 0775 01       		.byte	0x1
 5717 0776 3305     		.2byte	0x533
 5718 0778 08020000 		.4byte	0x208
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 168


 5719 077c 02       		.uleb128 0x2
 5720 077d 91       		.byte	0x91
 5721 077e 6C       		.sleb128 -20
 5722 077f 16       		.uleb128 0x16
 5723 0780 C4950000 		.4byte	.LASF1116
 5724 0784 01       		.byte	0x1
 5725 0785 3505     		.2byte	0x535
 5726 0787 8F070000 		.4byte	0x78f
 5727 078b 02       		.uleb128 0x2
 5728 078c 91       		.byte	0x91
 5729 078d 74       		.sleb128 -12
 5730 078e 00       		.byte	0
 5731 078f 07       		.uleb128 0x7
 5732 0790 05050000 		.4byte	0x505
 5733 0794 14       		.uleb128 0x14
 5734 0795 7F2D0000 		.4byte	.LASF1140
 5735 0799 01       		.byte	0x1
 5736 079a 6905     		.2byte	0x569
 5737 079c FE000000 		.4byte	0xfe
 5738 07a0 00000000 		.4byte	.LFB10
 5739 07a4 BC000000 		.4byte	.LFE10-.LFB10
 5740 07a8 01       		.uleb128 0x1
 5741 07a9 9C       		.byte	0x9c
 5742 07aa EB070000 		.4byte	0x7eb
 5743 07ae 15       		.uleb128 0x15
 5744 07af 19360000 		.4byte	.LASF1139
 5745 07b3 01       		.byte	0x1
 5746 07b4 6905     		.2byte	0x569
 5747 07b6 08020000 		.4byte	0x208
 5748 07ba 02       		.uleb128 0x2
 5749 07bb 91       		.byte	0x91
 5750 07bc 64       		.sleb128 -28
 5751 07bd 16       		.uleb128 0x16
 5752 07be F1490000 		.4byte	.LASF1135
 5753 07c2 01       		.byte	0x1
 5754 07c3 6B05     		.2byte	0x56b
 5755 07c5 FE000000 		.4byte	0xfe
 5756 07c9 02       		.uleb128 0x2
 5757 07ca 91       		.byte	0x91
 5758 07cb 74       		.sleb128 -12
 5759 07cc 16       		.uleb128 0x16
 5760 07cd C4950000 		.4byte	.LASF1116
 5761 07d1 01       		.byte	0x1
 5762 07d2 6C05     		.2byte	0x56c
 5763 07d4 8F070000 		.4byte	0x78f
 5764 07d8 02       		.uleb128 0x2
 5765 07d9 91       		.byte	0x91
 5766 07da 70       		.sleb128 -16
 5767 07db 16       		.uleb128 0x16
 5768 07dc C8480000 		.4byte	.LASF1141
 5769 07e0 01       		.byte	0x1
 5770 07e1 6D05     		.2byte	0x56d
 5771 07e3 09010000 		.4byte	0x109
 5772 07e7 02       		.uleb128 0x2
 5773 07e8 91       		.byte	0x91
 5774 07e9 6C       		.sleb128 -20
 5775 07ea 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 169


 5776 07eb 18       		.uleb128 0x18
 5777 07ec 36550000 		.4byte	.LASF1142
 5778 07f0 01       		.byte	0x1
 5779 07f1 AF05     		.2byte	0x5af
 5780 07f3 00000000 		.4byte	.LFB11
 5781 07f7 64000000 		.4byte	.LFE11-.LFB11
 5782 07fb 01       		.uleb128 0x1
 5783 07fc 9C       		.byte	0x9c
 5784 07fd 11080000 		.4byte	0x811
 5785 0801 16       		.uleb128 0x16
 5786 0802 9E210000 		.4byte	.LASF1113
 5787 0806 01       		.byte	0x1
 5788 0807 B105     		.2byte	0x5b1
 5789 0809 FE000000 		.4byte	0xfe
 5790 080d 02       		.uleb128 0x2
 5791 080e 91       		.byte	0x91
 5792 080f 74       		.sleb128 -12
 5793 0810 00       		.byte	0
 5794 0811 1A       		.uleb128 0x1a
 5795 0812 E74F0000 		.4byte	.LASF1143
 5796 0816 01       		.byte	0x1
 5797 0817 FD05     		.2byte	0x5fd
 5798 0819 00000000 		.4byte	.LFB12
 5799 081d 18000000 		.4byte	.LFE12-.LFB12
 5800 0821 01       		.uleb128 0x1
 5801 0822 9C       		.byte	0x9c
 5802 0823 1B       		.uleb128 0x1b
 5803 0824 62390000 		.4byte	.LASF1144
 5804 0828 01       		.byte	0x1
 5805 0829 0806     		.2byte	0x608
 5806 082b 00000000 		.4byte	.LFB13
 5807 082f 1C000000 		.4byte	.LFE13-.LFB13
 5808 0833 01       		.uleb128 0x1
 5809 0834 9C       		.byte	0x9c
 5810 0835 14       		.uleb128 0x14
 5811 0836 205B0000 		.4byte	.LASF1145
 5812 083a 01       		.byte	0x1
 5813 083b 2E06     		.2byte	0x62e
 5814 083d FE000000 		.4byte	0xfe
 5815 0841 00000000 		.4byte	.LFB14
 5816 0845 0C010000 		.4byte	.LFE14-.LFB14
 5817 0849 01       		.uleb128 0x1
 5818 084a 9C       		.byte	0x9c
 5819 084b 6E080000 		.4byte	0x86e
 5820 084f 16       		.uleb128 0x16
 5821 0850 C4950000 		.4byte	.LASF1116
 5822 0854 01       		.byte	0x1
 5823 0855 3006     		.2byte	0x630
 5824 0857 05050000 		.4byte	0x505
 5825 085b 02       		.uleb128 0x2
 5826 085c 91       		.byte	0x91
 5827 085d 70       		.sleb128 -16
 5828 085e 16       		.uleb128 0x16
 5829 085f A06F0000 		.4byte	.LASF1122
 5830 0863 01       		.byte	0x1
 5831 0864 3106     		.2byte	0x631
 5832 0866 FE000000 		.4byte	0xfe
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 170


 5833 086a 02       		.uleb128 0x2
 5834 086b 91       		.byte	0x91
 5835 086c 74       		.sleb128 -12
 5836 086d 00       		.byte	0
 5837 086e 14       		.uleb128 0x14
 5838 086f A8160000 		.4byte	.LASF1146
 5839 0873 01       		.byte	0x1
 5840 0874 8B06     		.2byte	0x68b
 5841 0876 1F010000 		.4byte	0x11f
 5842 087a 00000000 		.4byte	.LFB15
 5843 087e 24000000 		.4byte	.LFE15-.LFB15
 5844 0882 01       		.uleb128 0x1
 5845 0883 9C       		.byte	0x9c
 5846 0884 98080000 		.4byte	0x898
 5847 0888 16       		.uleb128 0x16
 5848 0889 DE380000 		.4byte	.LASF1147
 5849 088d 01       		.byte	0x1
 5850 088e 8D06     		.2byte	0x68d
 5851 0890 1F010000 		.4byte	0x11f
 5852 0894 02       		.uleb128 0x2
 5853 0895 91       		.byte	0x91
 5854 0896 74       		.sleb128 -12
 5855 0897 00       		.byte	0
 5856 0898 14       		.uleb128 0x14
 5857 0899 F4030000 		.4byte	.LASF1148
 5858 089d 01       		.byte	0x1
 5859 089e 9A06     		.2byte	0x69a
 5860 08a0 1F010000 		.4byte	0x11f
 5861 08a4 00000000 		.4byte	.LFB16
 5862 08a8 2C000000 		.4byte	.LFE16-.LFB16
 5863 08ac 01       		.uleb128 0x1
 5864 08ad 9C       		.byte	0x9c
 5865 08ae D1080000 		.4byte	0x8d1
 5866 08b2 16       		.uleb128 0x16
 5867 08b3 9E210000 		.4byte	.LASF1113
 5868 08b7 01       		.byte	0x1
 5869 08b8 9C06     		.2byte	0x69c
 5870 08ba 1F010000 		.4byte	0x11f
 5871 08be 02       		.uleb128 0x2
 5872 08bf 91       		.byte	0x91
 5873 08c0 70       		.sleb128 -16
 5874 08c1 16       		.uleb128 0x16
 5875 08c2 C8480000 		.4byte	.LASF1141
 5876 08c6 01       		.byte	0x1
 5877 08c7 9D06     		.2byte	0x69d
 5878 08c9 09010000 		.4byte	0x109
 5879 08cd 02       		.uleb128 0x2
 5880 08ce 91       		.byte	0x91
 5881 08cf 74       		.sleb128 -12
 5882 08d0 00       		.byte	0
 5883 08d1 1C       		.uleb128 0x1c
 5884 08d2 760A0000 		.4byte	.LASF1202
 5885 08d6 01       		.byte	0x1
 5886 08d7 B906     		.2byte	0x6b9
 5887 08d9 09010000 		.4byte	0x109
 5888 08dd 00000000 		.4byte	.LFB17
 5889 08e1 18000000 		.4byte	.LFE17-.LFB17
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 171


 5890 08e5 01       		.uleb128 0x1
 5891 08e6 9C       		.byte	0x9c
 5892 08e7 14       		.uleb128 0x14
 5893 08e8 56870000 		.4byte	.LASF1149
 5894 08ec 01       		.byte	0x1
 5895 08ed D206     		.2byte	0x6d2
 5896 08ef 09010000 		.4byte	0x109
 5897 08f3 00000000 		.4byte	.LFB18
 5898 08f7 F8000000 		.4byte	.LFE18-.LFB18
 5899 08fb 01       		.uleb128 0x1
 5900 08fc 9C       		.byte	0x9c
 5901 08fd 4D090000 		.4byte	0x94d
 5902 0901 15       		.uleb128 0x15
 5903 0902 9F640000 		.4byte	.LASF1150
 5904 0906 01       		.byte	0x1
 5905 0907 D206     		.2byte	0x6d2
 5906 0909 4D090000 		.4byte	0x94d
 5907 090d 02       		.uleb128 0x2
 5908 090e 91       		.byte	0x91
 5909 090f 6C       		.sleb128 -20
 5910 0910 15       		.uleb128 0x15
 5911 0911 38520000 		.4byte	.LASF1151
 5912 0915 01       		.byte	0x1
 5913 0916 D206     		.2byte	0x6d2
 5914 0918 58090000 		.4byte	0x958
 5915 091c 02       		.uleb128 0x2
 5916 091d 91       		.byte	0x91
 5917 091e 68       		.sleb128 -24
 5918 091f 15       		.uleb128 0x15
 5919 0920 33060000 		.4byte	.LASF1152
 5920 0924 01       		.byte	0x1
 5921 0925 D206     		.2byte	0x6d2
 5922 0927 5D090000 		.4byte	0x95d
 5923 092b 02       		.uleb128 0x2
 5924 092c 91       		.byte	0x91
 5925 092d 64       		.sleb128 -28
 5926 092e 16       		.uleb128 0x16
 5927 092f 2A860000 		.4byte	.LASF1153
 5928 0933 01       		.byte	0x1
 5929 0934 D406     		.2byte	0x6d4
 5930 0936 09010000 		.4byte	0x109
 5931 093a 02       		.uleb128 0x2
 5932 093b 91       		.byte	0x91
 5933 093c 74       		.sleb128 -12
 5934 093d 16       		.uleb128 0x16
 5935 093e DB010000 		.4byte	.LASF1154
 5936 0942 01       		.byte	0x1
 5937 0943 D406     		.2byte	0x6d4
 5938 0945 09010000 		.4byte	0x109
 5939 0949 02       		.uleb128 0x2
 5940 094a 91       		.byte	0x91
 5941 094b 70       		.sleb128 -16
 5942 094c 00       		.byte	0
 5943 094d 07       		.uleb128 0x7
 5944 094e 52090000 		.4byte	0x952
 5945 0952 06       		.uleb128 0x6
 5946 0953 04       		.byte	0x4
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 172


 5947 0954 29030000 		.4byte	0x329
 5948 0958 07       		.uleb128 0x7
 5949 0959 09010000 		.4byte	0x109
 5950 095d 07       		.uleb128 0x7
 5951 095e 62090000 		.4byte	0x962
 5952 0962 06       		.uleb128 0x6
 5953 0963 04       		.byte	0x4
 5954 0964 CC000000 		.4byte	0xcc
 5955 0968 14       		.uleb128 0x14
 5956 0969 41680000 		.4byte	.LASF1155
 5957 096d 01       		.byte	0x1
 5958 096e 3A07     		.2byte	0x73a
 5959 0970 FE000000 		.4byte	0xfe
 5960 0974 00000000 		.4byte	.LFB19
 5961 0978 80010000 		.4byte	.LFE19-.LFB19
 5962 097c 01       		.uleb128 0x1
 5963 097d 9C       		.byte	0x9c
 5964 097e E2090000 		.4byte	0x9e2
 5965 0982 16       		.uleb128 0x16
 5966 0983 C4950000 		.4byte	.LASF1116
 5967 0987 01       		.byte	0x1
 5968 0988 3C07     		.2byte	0x73c
 5969 098a 05050000 		.4byte	0x505
 5970 098e 02       		.uleb128 0x2
 5971 098f 91       		.byte	0x91
 5972 0990 68       		.sleb128 -24
 5973 0991 16       		.uleb128 0x16
 5974 0992 A5950000 		.4byte	.LASF1055
 5975 0996 01       		.byte	0x1
 5976 0997 3D07     		.2byte	0x73d
 5977 0999 1F010000 		.4byte	0x11f
 5978 099d 02       		.uleb128 0x2
 5979 099e 91       		.byte	0x91
 5980 099f 64       		.sleb128 -28
 5981 09a0 16       		.uleb128 0x16
 5982 09a1 936D0000 		.4byte	.LASF1156
 5983 09a5 01       		.byte	0x1
 5984 09a6 3E07     		.2byte	0x73e
 5985 09a8 FE000000 		.4byte	0xfe
 5986 09ac 02       		.uleb128 0x2
 5987 09ad 91       		.byte	0x91
 5988 09ae 74       		.sleb128 -12
 5989 09af 17       		.uleb128 0x17
 5990 09b0 1E000000 		.4byte	.LBB8
 5991 09b4 E8000000 		.4byte	.LBE8-.LBB8
 5992 09b8 16       		.uleb128 0x16
 5993 09b9 9E5D0000 		.4byte	.LASF1124
 5994 09bd 01       		.byte	0x1
 5995 09be 4D07     		.2byte	0x74d
 5996 09c0 C6050000 		.4byte	0x5c6
 5997 09c4 02       		.uleb128 0x2
 5998 09c5 91       		.byte	0x91
 5999 09c6 70       		.sleb128 -16
 6000 09c7 17       		.uleb128 0x17
 6001 09c8 2A000000 		.4byte	.LBB9
 6002 09cc 32000000 		.4byte	.LBE9-.LBB9
 6003 09d0 16       		.uleb128 0x16
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 173


 6004 09d1 D8270000 		.4byte	.LASF1157
 6005 09d5 01       		.byte	0x1
 6006 09d6 5107     		.2byte	0x751
 6007 09d8 E2090000 		.4byte	0x9e2
 6008 09dc 02       		.uleb128 0x2
 6009 09dd 91       		.byte	0x91
 6010 09de 6C       		.sleb128 -20
 6011 09df 00       		.byte	0
 6012 09e0 00       		.byte	0
 6013 09e1 00       		.byte	0
 6014 09e2 06       		.uleb128 0x6
 6015 09e3 04       		.byte	0x4
 6016 09e4 FD010000 		.4byte	0x1fd
 6017 09e8 18       		.uleb128 0x18
 6018 09e9 96330000 		.4byte	.LASF1158
 6019 09ed 01       		.byte	0x1
 6020 09ee 4208     		.2byte	0x842
 6021 09f0 00000000 		.4byte	.LFB20
 6022 09f4 A0000000 		.4byte	.LFE20-.LFB20
 6023 09f8 01       		.uleb128 0x1
 6024 09f9 9C       		.byte	0x9c
 6025 09fa 600A0000 		.4byte	0xa60
 6026 09fe 17       		.uleb128 0x17
 6027 09ff 1C000000 		.4byte	.LBB10
 6028 0a03 6A000000 		.4byte	.LBE10-.LBB10
 6029 0a07 16       		.uleb128 0x16
 6030 0a08 91640000 		.4byte	.LASF1159
 6031 0a0c 01       		.byte	0x1
 6032 0a0d 7008     		.2byte	0x870
 6033 0a0f 09010000 		.4byte	0x109
 6034 0a13 02       		.uleb128 0x2
 6035 0a14 91       		.byte	0x91
 6036 0a15 74       		.sleb128 -12
 6037 0a16 1D       		.uleb128 0x1d
 6038 0a17 EA030000 		.4byte	0x3ea
 6039 0a1b 22000000 		.4byte	.LBB11
 6040 0a1f 0A000000 		.4byte	.LBE11-.LBB11
 6041 0a23 01       		.byte	0x1
 6042 0a24 7008     		.2byte	0x870
 6043 0a26 450A0000 		.4byte	0xa45
 6044 0a2a 1E       		.uleb128 0x1e
 6045 0a2b FA030000 		.4byte	0x3fa
 6046 0a2f 02       		.uleb128 0x2
 6047 0a30 91       		.byte	0x91
 6048 0a31 6C       		.sleb128 -20
 6049 0a32 17       		.uleb128 0x17
 6050 0a33 22000000 		.4byte	.LBB12
 6051 0a37 0A000000 		.4byte	.LBE12-.LBB12
 6052 0a3b 1F       		.uleb128 0x1f
 6053 0a3c 05040000 		.4byte	0x405
 6054 0a40 02       		.uleb128 0x2
 6055 0a41 91       		.byte	0x91
 6056 0a42 6B       		.sleb128 -21
 6057 0a43 00       		.byte	0
 6058 0a44 00       		.byte	0
 6059 0a45 17       		.uleb128 0x17
 6060 0a46 4C000000 		.4byte	.LBB13
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 174


 6061 0a4a 3A000000 		.4byte	.LBE13-.LBB13
 6062 0a4e 16       		.uleb128 0x16
 6063 0a4f 04350000 		.4byte	.LASF1160
 6064 0a53 01       		.byte	0x1
 6065 0a54 7008     		.2byte	0x870
 6066 0a56 600A0000 		.4byte	0xa60
 6067 0a5a 02       		.uleb128 0x2
 6068 0a5b 91       		.byte	0x91
 6069 0a5c 70       		.sleb128 -16
 6070 0a5d 00       		.byte	0
 6071 0a5e 00       		.byte	0
 6072 0a5f 00       		.byte	0
 6073 0a60 07       		.uleb128 0x7
 6074 0a61 E2090000 		.4byte	0x9e2
 6075 0a65 18       		.uleb128 0x18
 6076 0a66 3A460000 		.4byte	.LASF1161
 6077 0a6a 01       		.byte	0x1
 6078 0a6b 7E08     		.2byte	0x87e
 6079 0a6d 00000000 		.4byte	.LFB21
 6080 0a71 8C000000 		.4byte	.LFE21-.LFB21
 6081 0a75 01       		.uleb128 0x1
 6082 0a76 9C       		.byte	0x9c
 6083 0a77 A90A0000 		.4byte	0xaa9
 6084 0a7b 15       		.uleb128 0x15
 6085 0a7c 633C0000 		.4byte	.LASF1162
 6086 0a80 01       		.byte	0x1
 6087 0a81 7E08     		.2byte	0x87e
 6088 0a83 600A0000 		.4byte	0xa60
 6089 0a87 02       		.uleb128 0x2
 6090 0a88 91       		.byte	0x91
 6091 0a89 6C       		.sleb128 -20
 6092 0a8a 15       		.uleb128 0x15
 6093 0a8b C05A0000 		.4byte	.LASF1163
 6094 0a8f 01       		.byte	0x1
 6095 0a90 7E08     		.2byte	0x87e
 6096 0a92 C6050000 		.4byte	0x5c6
 6097 0a96 02       		.uleb128 0x2
 6098 0a97 91       		.byte	0x91
 6099 0a98 68       		.sleb128 -24
 6100 0a99 16       		.uleb128 0x16
 6101 0a9a 63540000 		.4byte	.LASF1121
 6102 0a9e 01       		.byte	0x1
 6103 0a9f 8008     		.2byte	0x880
 6104 0aa1 1F010000 		.4byte	0x11f
 6105 0aa5 02       		.uleb128 0x2
 6106 0aa6 91       		.byte	0x91
 6107 0aa7 74       		.sleb128 -12
 6108 0aa8 00       		.byte	0
 6109 0aa9 18       		.uleb128 0x18
 6110 0aaa 7C050000 		.4byte	.LASF1164
 6111 0aae 01       		.byte	0x1
 6112 0aaf B908     		.2byte	0x8b9
 6113 0ab1 00000000 		.4byte	.LFB22
 6114 0ab5 AC000000 		.4byte	.LFE22-.LFB22
 6115 0ab9 01       		.uleb128 0x1
 6116 0aba 9C       		.byte	0x9c
 6117 0abb FC0A0000 		.4byte	0xafc
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 175


 6118 0abf 15       		.uleb128 0x15
 6119 0ac0 633C0000 		.4byte	.LASF1162
 6120 0ac4 01       		.byte	0x1
 6121 0ac5 B908     		.2byte	0x8b9
 6122 0ac7 E2090000 		.4byte	0x9e2
 6123 0acb 02       		.uleb128 0x2
 6124 0acc 91       		.byte	0x91
 6125 0acd 6C       		.sleb128 -20
 6126 0ace 15       		.uleb128 0x15
 6127 0acf A5950000 		.4byte	.LASF1055
 6128 0ad3 01       		.byte	0x1
 6129 0ad4 B908     		.2byte	0x8b9
 6130 0ad6 C6050000 		.4byte	0x5c6
 6131 0ada 02       		.uleb128 0x2
 6132 0adb 91       		.byte	0x91
 6133 0adc 68       		.sleb128 -24
 6134 0add 15       		.uleb128 0x15
 6135 0ade C05A0000 		.4byte	.LASF1163
 6136 0ae2 01       		.byte	0x1
 6137 0ae3 B908     		.2byte	0x8b9
 6138 0ae5 C6050000 		.4byte	0x5c6
 6139 0ae9 02       		.uleb128 0x2
 6140 0aea 91       		.byte	0x91
 6141 0aeb 64       		.sleb128 -28
 6142 0aec 16       		.uleb128 0x16
 6143 0aed 63540000 		.4byte	.LASF1121
 6144 0af1 01       		.byte	0x1
 6145 0af2 BB08     		.2byte	0x8bb
 6146 0af4 1F010000 		.4byte	0x11f
 6147 0af8 02       		.uleb128 0x2
 6148 0af9 91       		.byte	0x91
 6149 0afa 74       		.sleb128 -12
 6150 0afb 00       		.byte	0
 6151 0afc 14       		.uleb128 0x14
 6152 0afd 8C260000 		.4byte	.LASF1165
 6153 0b01 01       		.byte	0x1
 6154 0b02 2809     		.2byte	0x928
 6155 0b04 FE000000 		.4byte	0xfe
 6156 0b08 00000000 		.4byte	.LFB23
 6157 0b0c B8000000 		.4byte	.LFE23-.LFB23
 6158 0b10 01       		.uleb128 0x1
 6159 0b11 9C       		.byte	0x9c
 6160 0b12 440B0000 		.4byte	0xb44
 6161 0b16 15       		.uleb128 0x15
 6162 0b17 633C0000 		.4byte	.LASF1162
 6163 0b1b 01       		.byte	0x1
 6164 0b1c 2809     		.2byte	0x928
 6165 0b1e 440B0000 		.4byte	0xb44
 6166 0b22 02       		.uleb128 0x2
 6167 0b23 91       		.byte	0x91
 6168 0b24 6C       		.sleb128 -20
 6169 0b25 16       		.uleb128 0x16
 6170 0b26 89570000 		.4byte	.LASF1166
 6171 0b2a 01       		.byte	0x1
 6172 0b2b 2A09     		.2byte	0x92a
 6173 0b2d 05050000 		.4byte	0x505
 6174 0b31 02       		.uleb128 0x2
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 176


 6175 0b32 91       		.byte	0x91
 6176 0b33 70       		.sleb128 -16
 6177 0b34 16       		.uleb128 0x16
 6178 0b35 9E210000 		.4byte	.LASF1113
 6179 0b39 01       		.byte	0x1
 6180 0b3a 2B09     		.2byte	0x92b
 6181 0b3c FE000000 		.4byte	0xfe
 6182 0b40 02       		.uleb128 0x2
 6183 0b41 91       		.byte	0x91
 6184 0b42 74       		.sleb128 -12
 6185 0b43 00       		.byte	0
 6186 0b44 07       		.uleb128 0x7
 6187 0b45 490B0000 		.4byte	0xb49
 6188 0b49 06       		.uleb128 0x6
 6189 0b4a 04       		.byte	0x4
 6190 0b4b 4F0B0000 		.4byte	0xb4f
 6191 0b4f 07       		.uleb128 0x7
 6192 0b50 FD010000 		.4byte	0x1fd
 6193 0b54 14       		.uleb128 0x14
 6194 0b55 49070000 		.4byte	.LASF1167
 6195 0b59 01       		.byte	0x1
 6196 0b5a 5E09     		.2byte	0x95e
 6197 0b5c FE000000 		.4byte	0xfe
 6198 0b60 00000000 		.4byte	.LFB24
 6199 0b64 B4000000 		.4byte	.LFE24-.LFB24
 6200 0b68 01       		.uleb128 0x1
 6201 0b69 9C       		.byte	0x9c
 6202 0b6a AB0B0000 		.4byte	0xbab
 6203 0b6e 15       		.uleb128 0x15
 6204 0b6f E8650000 		.4byte	.LASF1168
 6205 0b73 01       		.byte	0x1
 6206 0b74 5E09     		.2byte	0x95e
 6207 0b76 F7010000 		.4byte	0x1f7
 6208 0b7a 02       		.uleb128 0x2
 6209 0b7b 91       		.byte	0x91
 6210 0b7c 6C       		.sleb128 -20
 6211 0b7d 15       		.uleb128 0x15
 6212 0b7e A5950000 		.4byte	.LASF1055
 6213 0b82 01       		.byte	0x1
 6214 0b83 5E09     		.2byte	0x95e
 6215 0b85 C6050000 		.4byte	0x5c6
 6216 0b89 02       		.uleb128 0x2
 6217 0b8a 91       		.byte	0x91
 6218 0b8b 68       		.sleb128 -24
 6219 0b8c 16       		.uleb128 0x16
 6220 0b8d 89570000 		.4byte	.LASF1166
 6221 0b91 01       		.byte	0x1
 6222 0b92 6009     		.2byte	0x960
 6223 0b94 05050000 		.4byte	0x505
 6224 0b98 02       		.uleb128 0x2
 6225 0b99 91       		.byte	0x91
 6226 0b9a 70       		.sleb128 -16
 6227 0b9b 16       		.uleb128 0x16
 6228 0b9c 9E210000 		.4byte	.LASF1113
 6229 0ba0 01       		.byte	0x1
 6230 0ba1 6109     		.2byte	0x961
 6231 0ba3 FE000000 		.4byte	0xfe
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 177


 6232 0ba7 02       		.uleb128 0x2
 6233 0ba8 91       		.byte	0x91
 6234 0ba9 74       		.sleb128 -12
 6235 0baa 00       		.byte	0
 6236 0bab 18       		.uleb128 0x18
 6237 0bac 973D0000 		.4byte	.LASF1169
 6238 0bb0 01       		.byte	0x1
 6239 0bb1 8B09     		.2byte	0x98b
 6240 0bb3 00000000 		.4byte	.LFB25
 6241 0bb7 34000000 		.4byte	.LFE25-.LFB25
 6242 0bbb 01       		.uleb128 0x1
 6243 0bbc 9C       		.byte	0x9c
 6244 0bbd D10B0000 		.4byte	0xbd1
 6245 0bc1 15       		.uleb128 0x15
 6246 0bc2 023B0000 		.4byte	.LASF1170
 6247 0bc6 01       		.byte	0x1
 6248 0bc7 8B09     		.2byte	0x98b
 6249 0bc9 D10B0000 		.4byte	0xbd1
 6250 0bcd 02       		.uleb128 0x2
 6251 0bce 91       		.byte	0x91
 6252 0bcf 74       		.sleb128 -12
 6253 0bd0 00       		.byte	0
 6254 0bd1 07       		.uleb128 0x7
 6255 0bd2 D60B0000 		.4byte	0xbd6
 6256 0bd6 06       		.uleb128 0x6
 6257 0bd7 04       		.byte	0x4
 6258 0bd8 6A020000 		.4byte	0x26a
 6259 0bdc 14       		.uleb128 0x14
 6260 0bdd 8D410000 		.4byte	.LASF1171
 6261 0be1 01       		.byte	0x1
 6262 0be2 9309     		.2byte	0x993
 6263 0be4 FE000000 		.4byte	0xfe
 6264 0be8 00000000 		.4byte	.LFB26
 6265 0bec A0000000 		.4byte	.LFE26-.LFB26
 6266 0bf0 01       		.uleb128 0x1
 6267 0bf1 9C       		.byte	0x9c
 6268 0bf2 3D0C0000 		.4byte	0xc3d
 6269 0bf6 15       		.uleb128 0x15
 6270 0bf7 023B0000 		.4byte	.LASF1170
 6271 0bfb 01       		.byte	0x1
 6272 0bfc 9309     		.2byte	0x993
 6273 0bfe D10B0000 		.4byte	0xbd1
 6274 0c02 02       		.uleb128 0x2
 6275 0c03 91       		.byte	0x91
 6276 0c04 6C       		.sleb128 -20
 6277 0c05 15       		.uleb128 0x15
 6278 0c06 CE190000 		.4byte	.LASF1172
 6279 0c0a 01       		.byte	0x1
 6280 0c0b 9309     		.2byte	0x993
 6281 0c0d BB050000 		.4byte	0x5bb
 6282 0c11 02       		.uleb128 0x2
 6283 0c12 91       		.byte	0x91
 6284 0c13 68       		.sleb128 -24
 6285 0c14 16       		.uleb128 0x16
 6286 0c15 9E210000 		.4byte	.LASF1113
 6287 0c19 01       		.byte	0x1
 6288 0c1a 9509     		.2byte	0x995
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 178


 6289 0c1c FE000000 		.4byte	0xfe
 6290 0c20 02       		.uleb128 0x2
 6291 0c21 91       		.byte	0x91
 6292 0c22 74       		.sleb128 -12
 6293 0c23 17       		.uleb128 0x17
 6294 0c24 26000000 		.4byte	.LBB14
 6295 0c28 64000000 		.4byte	.LBE14-.LBB14
 6296 0c2c 16       		.uleb128 0x16
 6297 0c2d 9E5D0000 		.4byte	.LASF1124
 6298 0c31 01       		.byte	0x1
 6299 0c32 9D09     		.2byte	0x99d
 6300 0c34 C6050000 		.4byte	0x5c6
 6301 0c38 02       		.uleb128 0x2
 6302 0c39 91       		.byte	0x91
 6303 0c3a 70       		.sleb128 -16
 6304 0c3b 00       		.byte	0
 6305 0c3c 00       		.byte	0
 6306 0c3d 1B       		.uleb128 0x1b
 6307 0c3e 873C0000 		.4byte	.LASF1173
 6308 0c42 01       		.byte	0x1
 6309 0c43 C409     		.2byte	0x9c4
 6310 0c45 00000000 		.4byte	.LFB27
 6311 0c49 18000000 		.4byte	.LFE27-.LFB27
 6312 0c4d 01       		.uleb128 0x1
 6313 0c4e 9C       		.byte	0x9c
 6314 0c4f 20       		.uleb128 0x20
 6315 0c50 601C0000 		.4byte	.LASF1174
 6316 0c54 01       		.byte	0x1
 6317 0c55 CC09     		.2byte	0x9cc
 6318 0c57 09010000 		.4byte	0x109
 6319 0c5b 00000000 		.4byte	.LFB28
 6320 0c5f 2C000000 		.4byte	.LFE28-.LFB28
 6321 0c63 01       		.uleb128 0x1
 6322 0c64 9C       		.byte	0x9c
 6323 0c65 970C0000 		.4byte	0xc97
 6324 0c69 15       		.uleb128 0x15
 6325 0c6a 4E650000 		.4byte	.LASF1129
 6326 0c6e 01       		.byte	0x1
 6327 0c6f CC09     		.2byte	0x9cc
 6328 0c71 08020000 		.4byte	0x208
 6329 0c75 02       		.uleb128 0x2
 6330 0c76 91       		.byte	0x91
 6331 0c77 6C       		.sleb128 -20
 6332 0c78 16       		.uleb128 0x16
 6333 0c79 2F0F0000 		.4byte	.LASF1130
 6334 0c7d 01       		.byte	0x1
 6335 0c7e CE09     		.2byte	0x9ce
 6336 0c80 09010000 		.4byte	0x109
 6337 0c84 02       		.uleb128 0x2
 6338 0c85 91       		.byte	0x91
 6339 0c86 74       		.sleb128 -12
 6340 0c87 16       		.uleb128 0x16
 6341 0c88 C4950000 		.4byte	.LASF1116
 6342 0c8c 01       		.byte	0x1
 6343 0c8d CF09     		.2byte	0x9cf
 6344 0c8f 05050000 		.4byte	0x505
 6345 0c93 02       		.uleb128 0x2
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 179


 6346 0c94 91       		.byte	0x91
 6347 0c95 70       		.sleb128 -16
 6348 0c96 00       		.byte	0
 6349 0c97 21       		.uleb128 0x21
 6350 0c98 E5460000 		.4byte	.LASF1175
 6351 0c9c 01       		.byte	0x1
 6352 0c9d E309     		.2byte	0x9e3
 6353 0c9f 00000000 		.4byte	.LFB29
 6354 0ca3 24000000 		.4byte	.LFE29-.LFB29
 6355 0ca7 01       		.uleb128 0x1
 6356 0ca8 9C       		.byte	0x9c
 6357 0ca9 DB0C0000 		.4byte	0xcdb
 6358 0cad 15       		.uleb128 0x15
 6359 0cae 4E650000 		.4byte	.LASF1129
 6360 0cb2 01       		.byte	0x1
 6361 0cb3 E309     		.2byte	0x9e3
 6362 0cb5 08020000 		.4byte	0x208
 6363 0cb9 02       		.uleb128 0x2
 6364 0cba 91       		.byte	0x91
 6365 0cbb 6C       		.sleb128 -20
 6366 0cbc 15       		.uleb128 0x15
 6367 0cbd 4E0E0000 		.4byte	.LASF1176
 6368 0cc1 01       		.byte	0x1
 6369 0cc2 E309     		.2byte	0x9e3
 6370 0cc4 58090000 		.4byte	0x958
 6371 0cc8 02       		.uleb128 0x2
 6372 0cc9 91       		.byte	0x91
 6373 0cca 68       		.sleb128 -24
 6374 0ccb 16       		.uleb128 0x16
 6375 0ccc C4950000 		.4byte	.LASF1116
 6376 0cd0 01       		.byte	0x1
 6377 0cd1 E509     		.2byte	0x9e5
 6378 0cd3 05050000 		.4byte	0x505
 6379 0cd7 02       		.uleb128 0x2
 6380 0cd8 91       		.byte	0x91
 6381 0cd9 74       		.sleb128 -12
 6382 0cda 00       		.byte	0
 6383 0cdb 22       		.uleb128 0x22
 6384 0cdc CE1F0000 		.4byte	.LASF1177
 6385 0ce0 01       		.byte	0x1
 6386 0ce1 FB09     		.2byte	0x9fb
 6387 0ce3 00000000 		.4byte	.LFB30
 6388 0ce7 0E000000 		.4byte	.LFE30-.LFB30
 6389 0ceb 01       		.uleb128 0x1
 6390 0cec 9C       		.byte	0x9c
 6391 0ced 010D0000 		.4byte	0xd01
 6392 0cf1 15       		.uleb128 0x15
 6393 0cf2 1D860000 		.4byte	.LASF1109
 6394 0cf6 01       		.byte	0x1
 6395 0cf7 FB09     		.2byte	0x9fb
 6396 0cf9 A2000000 		.4byte	0xa2
 6397 0cfd 02       		.uleb128 0x2
 6398 0cfe 91       		.byte	0x91
 6399 0cff 74       		.sleb128 -12
 6400 0d00 00       		.byte	0
 6401 0d01 22       		.uleb128 0x22
 6402 0d02 462A0000 		.4byte	.LASF1178
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 180


 6403 0d06 01       		.byte	0x1
 6404 0d07 8E0A     		.2byte	0xa8e
 6405 0d09 00000000 		.4byte	.LFB31
 6406 0d0d 96000000 		.4byte	.LFE31-.LFB31
 6407 0d11 01       		.uleb128 0x1
 6408 0d12 9C       		.byte	0x9c
 6409 0d13 700D0000 		.4byte	0xd70
 6410 0d17 15       		.uleb128 0x15
 6411 0d18 C4950000 		.4byte	.LASF1116
 6412 0d1c 01       		.byte	0x1
 6413 0d1d 8E0A     		.2byte	0xa8e
 6414 0d1f 8F070000 		.4byte	0x78f
 6415 0d23 02       		.uleb128 0x2
 6416 0d24 91       		.byte	0x91
 6417 0d25 6C       		.sleb128 -20
 6418 0d26 15       		.uleb128 0x15
 6419 0d27 261A0000 		.4byte	.LASF1107
 6420 0d2b 01       		.byte	0x1
 6421 0d2c 8E0A     		.2byte	0xa8e
 6422 0d2e B1020000 		.4byte	0x2b1
 6423 0d32 02       		.uleb128 0x2
 6424 0d33 91       		.byte	0x91
 6425 0d34 68       		.sleb128 -24
 6426 0d35 15       		.uleb128 0x15
 6427 0d36 DD950000 		.4byte	.LASF1099
 6428 0d3a 01       		.byte	0x1
 6429 0d3b 8E0A     		.2byte	0xa8e
 6430 0d3d 09010000 		.4byte	0x109
 6431 0d41 02       		.uleb128 0x2
 6432 0d42 91       		.byte	0x91
 6433 0d43 64       		.sleb128 -28
 6434 0d44 15       		.uleb128 0x15
 6435 0d45 04890000 		.4byte	.LASF1112
 6436 0d49 01       		.byte	0x1
 6437 0d4a 8E0A     		.2byte	0xa8e
 6438 0d4c F5040000 		.4byte	0x4f5
 6439 0d50 02       		.uleb128 0x2
 6440 0d51 91       		.byte	0x91
 6441 0d52 60       		.sleb128 -32
 6442 0d53 15       		.uleb128 0x15
 6443 0d54 92020000 		.4byte	.LASF1108
 6444 0d58 01       		.byte	0x1
 6445 0d59 8E0A     		.2byte	0xa8e
 6446 0d5b DB040000 		.4byte	0x4db
 6447 0d5f 02       		.uleb128 0x2
 6448 0d60 91       		.byte	0x91
 6449 0d61 00       		.sleb128 0
 6450 0d62 23       		.uleb128 0x23
 6451 0d63 7800     		.ascii	"x\000"
 6452 0d65 01       		.byte	0x1
 6453 0d66 900A     		.2byte	0xa90
 6454 0d68 09010000 		.4byte	0x109
 6455 0d6c 02       		.uleb128 0x2
 6456 0d6d 91       		.byte	0x91
 6457 0d6e 74       		.sleb128 -12
 6458 0d6f 00       		.byte	0
 6459 0d70 22       		.uleb128 0x22
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 181


 6460 0d71 748E0000 		.4byte	.LASF1179
 6461 0d75 01       		.byte	0x1
 6462 0d76 FB0A     		.2byte	0xafb
 6463 0d78 00000000 		.4byte	.LFB32
 6464 0d7c 7C000000 		.4byte	.LFE32-.LFB32
 6465 0d80 01       		.uleb128 0x1
 6466 0d81 9C       		.byte	0x9c
 6467 0d82 960D0000 		.4byte	0xd96
 6468 0d86 16       		.uleb128 0x16
 6469 0d87 DD950000 		.4byte	.LASF1099
 6470 0d8b 01       		.byte	0x1
 6471 0d8c FD0A     		.2byte	0xafd
 6472 0d8e 09010000 		.4byte	0x109
 6473 0d92 02       		.uleb128 0x2
 6474 0d93 91       		.byte	0x91
 6475 0d94 74       		.sleb128 -12
 6476 0d95 00       		.byte	0
 6477 0d96 22       		.uleb128 0x22
 6478 0d97 466C0000 		.4byte	.LASF1180
 6479 0d9b 01       		.byte	0x1
 6480 0d9c 1B0B     		.2byte	0xb1b
 6481 0d9e 00000000 		.4byte	.LFB33
 6482 0da2 74000000 		.4byte	.LFE33-.LFB33
 6483 0da6 01       		.uleb128 0x1
 6484 0da7 9C       		.byte	0x9c
 6485 0da8 DF0D0000 		.4byte	0xddf
 6486 0dac 17       		.uleb128 0x17
 6487 0dad 06000000 		.4byte	.LBB15
 6488 0db1 5C000000 		.4byte	.LBE15-.LBB15
 6489 0db5 16       		.uleb128 0x16
 6490 0db6 26940000 		.4byte	.LASF1181
 6491 0dba 01       		.byte	0x1
 6492 0dbb 1F0B     		.2byte	0xb1f
 6493 0dbd FE000000 		.4byte	0xfe
 6494 0dc1 02       		.uleb128 0x2
 6495 0dc2 91       		.byte	0x91
 6496 0dc3 74       		.sleb128 -12
 6497 0dc4 17       		.uleb128 0x17
 6498 0dc5 26000000 		.4byte	.LBB16
 6499 0dc9 34000000 		.4byte	.LBE16-.LBB16
 6500 0dcd 16       		.uleb128 0x16
 6501 0dce C4950000 		.4byte	.LASF1116
 6502 0dd2 01       		.byte	0x1
 6503 0dd3 2D0B     		.2byte	0xb2d
 6504 0dd5 05050000 		.4byte	0x505
 6505 0dd9 02       		.uleb128 0x2
 6506 0dda 91       		.byte	0x91
 6507 0ddb 70       		.sleb128 -16
 6508 0ddc 00       		.byte	0
 6509 0ddd 00       		.byte	0
 6510 0dde 00       		.byte	0
 6511 0ddf 22       		.uleb128 0x22
 6512 0de0 96690000 		.4byte	.LASF1182
 6513 0de4 01       		.byte	0x1
 6514 0de5 440B     		.2byte	0xb44
 6515 0de7 00000000 		.4byte	.LFB34
 6516 0deb 6C000000 		.4byte	.LFE34-.LFB34
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 182


 6517 0def 01       		.uleb128 0x1
 6518 0df0 9C       		.byte	0x9c
 6519 0df1 050E0000 		.4byte	0xe05
 6520 0df5 15       		.uleb128 0x15
 6521 0df6 63540000 		.4byte	.LASF1121
 6522 0dfa 01       		.byte	0x1
 6523 0dfb 440B     		.2byte	0xb44
 6524 0dfd C6050000 		.4byte	0x5c6
 6525 0e01 02       		.uleb128 0x2
 6526 0e02 91       		.byte	0x91
 6527 0e03 74       		.sleb128 -12
 6528 0e04 00       		.byte	0
 6529 0e05 19       		.uleb128 0x19
 6530 0e06 F0250000 		.4byte	.LASF1184
 6531 0e0a 01       		.byte	0x1
 6532 0e0b 620B     		.2byte	0xb62
 6533 0e0d 05050000 		.4byte	0x505
 6534 0e11 00000000 		.4byte	.LFB35
 6535 0e15 64000000 		.4byte	.LFE35-.LFB35
 6536 0e19 01       		.uleb128 0x1
 6537 0e1a 9C       		.byte	0x9c
 6538 0e1b 4D0E0000 		.4byte	0xe4d
 6539 0e1f 15       		.uleb128 0x15
 6540 0e20 92020000 		.4byte	.LASF1108
 6541 0e24 01       		.byte	0x1
 6542 0e25 620B     		.2byte	0xb62
 6543 0e27 DB040000 		.4byte	0x4db
 6544 0e2b 02       		.uleb128 0x2
 6545 0e2c 91       		.byte	0x91
 6546 0e2d 6E       		.sleb128 -18
 6547 0e2e 15       		.uleb128 0x15
 6548 0e2f 0C6B0000 		.4byte	.LASF1111
 6549 0e33 01       		.byte	0x1
 6550 0e34 620B     		.2byte	0xb62
 6551 0e36 F0040000 		.4byte	0x4f0
 6552 0e3a 02       		.uleb128 0x2
 6553 0e3b 91       		.byte	0x91
 6554 0e3c 68       		.sleb128 -24
 6555 0e3d 16       		.uleb128 0x16
 6556 0e3e 9B0F0000 		.4byte	.LASF1114
 6557 0e42 01       		.byte	0x1
 6558 0e43 640B     		.2byte	0xb64
 6559 0e45 05050000 		.4byte	0x505
 6560 0e49 02       		.uleb128 0x2
 6561 0e4a 91       		.byte	0x91
 6562 0e4b 74       		.sleb128 -12
 6563 0e4c 00       		.byte	0
 6564 0e4d 19       		.uleb128 0x19
 6565 0e4e 254A0000 		.4byte	.LASF1185
 6566 0e52 01       		.byte	0x1
 6567 0e53 890B     		.2byte	0xb89
 6568 0e55 09010000 		.4byte	0x109
 6569 0e59 00000000 		.4byte	.LFB36
 6570 0e5d 16010000 		.4byte	.LFE36-.LFB36
 6571 0e61 01       		.uleb128 0x1
 6572 0e62 9C       		.byte	0x9c
 6573 0e63 F80E0000 		.4byte	0xef8
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 183


 6574 0e67 15       		.uleb128 0x15
 6575 0e68 9F640000 		.4byte	.LASF1150
 6576 0e6c 01       		.byte	0x1
 6577 0e6d 890B     		.2byte	0xb89
 6578 0e6f 52090000 		.4byte	0x952
 6579 0e73 02       		.uleb128 0x2
 6580 0e74 91       		.byte	0x91
 6581 0e75 54       		.sleb128 -44
 6582 0e76 15       		.uleb128 0x15
 6583 0e77 ED070000 		.4byte	.LASF1186
 6584 0e7b 01       		.byte	0x1
 6585 0e7c 890B     		.2byte	0xb89
 6586 0e7e E2090000 		.4byte	0x9e2
 6587 0e82 02       		.uleb128 0x2
 6588 0e83 91       		.byte	0x91
 6589 0e84 50       		.sleb128 -48
 6590 0e85 15       		.uleb128 0x15
 6591 0e86 B6320000 		.4byte	.LASF1187
 6592 0e8a 01       		.byte	0x1
 6593 0e8b 890B     		.2byte	0xb89
 6594 0e8d 3A020000 		.4byte	0x23a
 6595 0e91 02       		.uleb128 0x2
 6596 0e92 91       		.byte	0x91
 6597 0e93 4F       		.sleb128 -49
 6598 0e94 16       		.uleb128 0x16
 6599 0e95 C11C0000 		.4byte	.LASF1188
 6600 0e99 01       		.byte	0x1
 6601 0e9a 8B0B     		.2byte	0xb8b
 6602 0e9c F80E0000 		.4byte	0xef8
 6603 0ea0 02       		.uleb128 0x2
 6604 0ea1 91       		.byte	0x91
 6605 0ea2 5C       		.sleb128 -36
 6606 0ea3 16       		.uleb128 0x16
 6607 0ea4 A3450000 		.4byte	.LASF1189
 6608 0ea8 01       		.byte	0x1
 6609 0ea9 8B0B     		.2byte	0xb8b
 6610 0eab F80E0000 		.4byte	0xef8
 6611 0eaf 02       		.uleb128 0x2
 6612 0eb0 91       		.byte	0x91
 6613 0eb1 64       		.sleb128 -28
 6614 0eb2 16       		.uleb128 0x16
 6615 0eb3 2A860000 		.4byte	.LASF1153
 6616 0eb7 01       		.byte	0x1
 6617 0eb8 8C0B     		.2byte	0xb8c
 6618 0eba 09010000 		.4byte	0x109
 6619 0ebe 02       		.uleb128 0x2
 6620 0ebf 91       		.byte	0x91
 6621 0ec0 6C       		.sleb128 -20
 6622 0ec1 24       		.uleb128 0x24
 6623 0ec2 1A000000 		.4byte	.LBB17
 6624 0ec6 2C000000 		.4byte	.LBE17-.LBB17
 6625 0eca DE0E0000 		.4byte	0xede
 6626 0ece 16       		.uleb128 0x16
 6627 0ecf 04350000 		.4byte	.LASF1160
 6628 0ed3 01       		.byte	0x1
 6629 0ed4 900B     		.2byte	0xb90
 6630 0ed6 600A0000 		.4byte	0xa60
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 184


 6631 0eda 02       		.uleb128 0x2
 6632 0edb 91       		.byte	0x91
 6633 0edc 68       		.sleb128 -24
 6634 0edd 00       		.byte	0
 6635 0ede 17       		.uleb128 0x17
 6636 0edf 46000000 		.4byte	.LBB18
 6637 0ee3 2C000000 		.4byte	.LBE18-.LBB18
 6638 0ee7 16       		.uleb128 0x16
 6639 0ee8 04350000 		.4byte	.LASF1160
 6640 0eec 01       		.byte	0x1
 6641 0eed 980B     		.2byte	0xb98
 6642 0eef 600A0000 		.4byte	0xa60
 6643 0ef3 02       		.uleb128 0x2
 6644 0ef4 91       		.byte	0x91
 6645 0ef5 60       		.sleb128 -32
 6646 0ef6 00       		.byte	0
 6647 0ef7 00       		.byte	0
 6648 0ef8 06       		.uleb128 0x6
 6649 0ef9 04       		.byte	0x4
 6650 0efa FE0E0000 		.4byte	0xefe
 6651 0efe 0E       		.uleb128 0xe
 6652 0eff DF030000 		.4byte	0x3df
 6653 0f03 25       		.uleb128 0x25
 6654 0f04 53570000 		.4byte	.LASF1190
 6655 0f08 01       		.byte	0x1
 6656 0f09 DE0B     		.2byte	0xbde
 6657 0f0b C1000000 		.4byte	0xc1
 6658 0f0f 00000000 		.4byte	.LFB37
 6659 0f13 38000000 		.4byte	.LFE37-.LFB37
 6660 0f17 01       		.uleb128 0x1
 6661 0f18 9C       		.byte	0x9c
 6662 0f19 3C0F0000 		.4byte	0xf3c
 6663 0f1d 15       		.uleb128 0x15
 6664 0f1e 53740000 		.4byte	.LASF1191
 6665 0f22 01       		.byte	0x1
 6666 0f23 DE0B     		.2byte	0xbde
 6667 0f25 3C0F0000 		.4byte	0xf3c
 6668 0f29 02       		.uleb128 0x2
 6669 0f2a 91       		.byte	0x91
 6670 0f2b 6C       		.sleb128 -20
 6671 0f2c 16       		.uleb128 0x16
 6672 0f2d 9F2B0000 		.4byte	.LASF1192
 6673 0f31 01       		.byte	0x1
 6674 0f32 E00B     		.2byte	0xbe0
 6675 0f34 CC000000 		.4byte	0xcc
 6676 0f38 02       		.uleb128 0x2
 6677 0f39 91       		.byte	0x91
 6678 0f3a 74       		.sleb128 -12
 6679 0f3b 00       		.byte	0
 6680 0f3c 06       		.uleb128 0x6
 6681 0f3d 04       		.byte	0x4
 6682 0f3e 420F0000 		.4byte	0xf42
 6683 0f42 07       		.uleb128 0x7
 6684 0f43 B6000000 		.4byte	0xb6
 6685 0f47 14       		.uleb128 0x14
 6686 0f48 64580000 		.4byte	.LASF1193
 6687 0f4c 01       		.byte	0x1
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 185


 6688 0f4d F20B     		.2byte	0xbf2
 6689 0f4f 09010000 		.4byte	0x109
 6690 0f53 00000000 		.4byte	.LFB38
 6691 0f57 38000000 		.4byte	.LFE38-.LFB38
 6692 0f5b 01       		.uleb128 0x1
 6693 0f5c 9C       		.byte	0x9c
 6694 0f5d 9E0F0000 		.4byte	0xf9e
 6695 0f61 15       		.uleb128 0x15
 6696 0f62 4E650000 		.4byte	.LASF1129
 6697 0f66 01       		.byte	0x1
 6698 0f67 F20B     		.2byte	0xbf2
 6699 0f69 08020000 		.4byte	0x208
 6700 0f6d 02       		.uleb128 0x2
 6701 0f6e 91       		.byte	0x91
 6702 0f6f 64       		.sleb128 -28
 6703 0f70 16       		.uleb128 0x16
 6704 0f71 C4950000 		.4byte	.LASF1116
 6705 0f75 01       		.byte	0x1
 6706 0f76 F40B     		.2byte	0xbf4
 6707 0f78 05050000 		.4byte	0x505
 6708 0f7c 02       		.uleb128 0x2
 6709 0f7d 91       		.byte	0x91
 6710 0f7e 74       		.sleb128 -12
 6711 0f7f 16       		.uleb128 0x16
 6712 0f80 BB340000 		.4byte	.LASF1194
 6713 0f84 01       		.byte	0x1
 6714 0f85 F50B     		.2byte	0xbf5
 6715 0f87 2A010000 		.4byte	0x12a
 6716 0f8b 02       		.uleb128 0x2
 6717 0f8c 91       		.byte	0x91
 6718 0f8d 70       		.sleb128 -16
 6719 0f8e 16       		.uleb128 0x16
 6720 0f8f 2F0F0000 		.4byte	.LASF1130
 6721 0f93 01       		.byte	0x1
 6722 0f94 F60B     		.2byte	0xbf6
 6723 0f96 09010000 		.4byte	0x109
 6724 0f9a 02       		.uleb128 0x2
 6725 0f9b 91       		.byte	0x91
 6726 0f9c 6C       		.sleb128 -20
 6727 0f9d 00       		.byte	0
 6728 0f9e 22       		.uleb128 0x22
 6729 0f9f 33560000 		.4byte	.LASF1195
 6730 0fa3 01       		.byte	0x1
 6731 0fa4 0E0C     		.2byte	0xc0e
 6732 0fa6 00000000 		.4byte	.LFB39
 6733 0faa 1E000000 		.4byte	.LFE39-.LFB39
 6734 0fae 01       		.uleb128 0x1
 6735 0faf 9C       		.byte	0x9c
 6736 0fb0 C40F0000 		.4byte	0xfc4
 6737 0fb4 15       		.uleb128 0x15
 6738 0fb5 C4950000 		.4byte	.LASF1116
 6739 0fb9 01       		.byte	0x1
 6740 0fba 0E0C     		.2byte	0xc0e
 6741 0fbc 05050000 		.4byte	0x505
 6742 0fc0 02       		.uleb128 0x2
 6743 0fc1 91       		.byte	0x91
 6744 0fc2 74       		.sleb128 -12
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 186


 6745 0fc3 00       		.byte	0
 6746 0fc4 26       		.uleb128 0x26
 6747 0fc5 91220000 		.4byte	.LASF1196
 6748 0fc9 01       		.byte	0x1
 6749 0fca 230C     		.2byte	0xc23
 6750 0fcc 00000000 		.4byte	.LFB40
 6751 0fd0 48000000 		.4byte	.LFE40-.LFB40
 6752 0fd4 01       		.uleb128 0x1
 6753 0fd5 9C       		.byte	0x9c
 6754 0fd6 EA0F0000 		.4byte	0xfea
 6755 0fda 16       		.uleb128 0x16
 6756 0fdb C4950000 		.4byte	.LASF1116
 6757 0fdf 01       		.byte	0x1
 6758 0fe0 250C     		.2byte	0xc25
 6759 0fe2 05050000 		.4byte	0x505
 6760 0fe6 02       		.uleb128 0x2
 6761 0fe7 91       		.byte	0x91
 6762 0fe8 74       		.sleb128 -12
 6763 0fe9 00       		.byte	0
 6764 0fea 20       		.uleb128 0x20
 6765 0feb 4B950000 		.4byte	.LASF1197
 6766 0fef 01       		.byte	0x1
 6767 0ff0 3E0C     		.2byte	0xc3e
 6768 0ff2 08020000 		.4byte	0x208
 6769 0ff6 00000000 		.4byte	.LFB41
 6770 0ffa 20000000 		.4byte	.LFE41-.LFB41
 6771 0ffe 01       		.uleb128 0x1
 6772 0fff 9C       		.byte	0x9c
 6773 1000 14100000 		.4byte	0x1014
 6774 1004 16       		.uleb128 0x16
 6775 1005 9E210000 		.4byte	.LASF1113
 6776 1009 01       		.byte	0x1
 6777 100a 400C     		.2byte	0xc40
 6778 100c 08020000 		.4byte	0x208
 6779 1010 02       		.uleb128 0x2
 6780 1011 91       		.byte	0x91
 6781 1012 74       		.sleb128 -12
 6782 1013 00       		.byte	0
 6783 1014 18       		.uleb128 0x18
 6784 1015 46610000 		.4byte	.LASF1198
 6785 1019 01       		.byte	0x1
 6786 101a 6B0C     		.2byte	0xc6b
 6787 101c 00000000 		.4byte	.LFB42
 6788 1020 F0000000 		.4byte	.LFE42-.LFB42
 6789 1024 01       		.uleb128 0x1
 6790 1025 9C       		.byte	0x9c
 6791 1026 49100000 		.4byte	0x1049
 6792 102a 15       		.uleb128 0x15
 6793 102b D2430000 		.4byte	.LASF1199
 6794 102f 01       		.byte	0x1
 6795 1030 6B0C     		.2byte	0xc6b
 6796 1032 45070000 		.4byte	0x745
 6797 1036 02       		.uleb128 0x2
 6798 1037 91       		.byte	0x91
 6799 1038 6C       		.sleb128 -20
 6800 1039 16       		.uleb128 0x16
 6801 103a C4950000 		.4byte	.LASF1116
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 187


 6802 103e 01       		.byte	0x1
 6803 103f 6D0C     		.2byte	0xc6d
 6804 1041 8F070000 		.4byte	0x78f
 6805 1045 02       		.uleb128 0x2
 6806 1046 91       		.byte	0x91
 6807 1047 74       		.sleb128 -12
 6808 1048 00       		.byte	0
 6809 1049 14       		.uleb128 0x14
 6810 104a 320B0000 		.4byte	.LASF1200
 6811 104e 01       		.byte	0x1
 6812 104f AA0C     		.2byte	0xcaa
 6813 1051 FE000000 		.4byte	0xfe
 6814 1055 00000000 		.4byte	.LFB43
 6815 1059 DC000000 		.4byte	.LFE43-.LFB43
 6816 105d 01       		.uleb128 0x1
 6817 105e 9C       		.byte	0x9c
 6818 105f 91100000 		.4byte	0x1091
 6819 1063 15       		.uleb128 0x15
 6820 1064 D2430000 		.4byte	.LASF1199
 6821 1068 01       		.byte	0x1
 6822 1069 AA0C     		.2byte	0xcaa
 6823 106b 45070000 		.4byte	0x745
 6824 106f 02       		.uleb128 0x2
 6825 1070 91       		.byte	0x91
 6826 1071 6C       		.sleb128 -20
 6827 1072 16       		.uleb128 0x16
 6828 1073 C4950000 		.4byte	.LASF1116
 6829 1077 01       		.byte	0x1
 6830 1078 AC0C     		.2byte	0xcac
 6831 107a 8F070000 		.4byte	0x78f
 6832 107e 02       		.uleb128 0x2
 6833 107f 91       		.byte	0x91
 6834 1080 70       		.sleb128 -16
 6835 1081 16       		.uleb128 0x16
 6836 1082 9E210000 		.4byte	.LASF1113
 6837 1086 01       		.byte	0x1
 6838 1087 AD0C     		.2byte	0xcad
 6839 1089 FE000000 		.4byte	0xfe
 6840 108d 02       		.uleb128 0x2
 6841 108e 91       		.byte	0x91
 6842 108f 74       		.sleb128 -12
 6843 1090 00       		.byte	0
 6844 1091 20       		.uleb128 0x20
 6845 1092 432D0000 		.4byte	.LASF1201
 6846 1096 01       		.byte	0x1
 6847 1097 F80D     		.2byte	0xdf8
 6848 1099 1F010000 		.4byte	0x11f
 6849 109d 00000000 		.4byte	.LFB44
 6850 10a1 30000000 		.4byte	.LFE44-.LFB44
 6851 10a5 01       		.uleb128 0x1
 6852 10a6 9C       		.byte	0x9c
 6853 10a7 BB100000 		.4byte	0x10bb
 6854 10ab 16       		.uleb128 0x16
 6855 10ac 2F0F0000 		.4byte	.LASF1130
 6856 10b0 01       		.byte	0x1
 6857 10b1 FA0D     		.2byte	0xdfa
 6858 10b3 1F010000 		.4byte	0x11f
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 188


 6859 10b7 02       		.uleb128 0x2
 6860 10b8 91       		.byte	0x91
 6861 10b9 74       		.sleb128 -12
 6862 10ba 00       		.byte	0
 6863 10bb 1C       		.uleb128 0x1c
 6864 10bc EF350000 		.4byte	.LASF1203
 6865 10c0 01       		.byte	0x1
 6866 10c1 080E     		.2byte	0xe08
 6867 10c3 A2000000 		.4byte	0xa2
 6868 10c7 00000000 		.4byte	.LFB45
 6869 10cb 28000000 		.4byte	.LFE45-.LFB45
 6870 10cf 01       		.uleb128 0x1
 6871 10d0 9C       		.byte	0x9c
 6872 10d1 0F       		.uleb128 0xf
 6873 10d2 FD010000 		.4byte	0x1fd
 6874 10d6 E1100000 		.4byte	0x10e1
 6875 10da 10       		.uleb128 0x10
 6876 10db 9B000000 		.4byte	0x9b
 6877 10df 07       		.byte	0x7
 6878 10e0 00       		.byte	0
 6879 10e1 27       		.uleb128 0x27
 6880 10e2 44520000 		.4byte	.LASF1204
 6881 10e6 01       		.byte	0x1
 6882 10e7 BF       		.byte	0xbf
 6883 10e8 D1100000 		.4byte	0x10d1
 6884 10ec 05       		.uleb128 0x5
 6885 10ed 03       		.byte	0x3
 6886 10ee 00000000 		.4byte	pxReadyTasksLists
 6887 10f2 27       		.uleb128 0x27
 6888 10f3 7B8F0000 		.4byte	.LASF1205
 6889 10f7 01       		.byte	0x1
 6890 10f8 C0       		.byte	0xc0
 6891 10f9 FD010000 		.4byte	0x1fd
 6892 10fd 05       		.uleb128 0x5
 6893 10fe 03       		.byte	0x3
 6894 10ff 00000000 		.4byte	xDelayedTaskList1
 6895 1103 27       		.uleb128 0x27
 6896 1104 8D8F0000 		.4byte	.LASF1206
 6897 1108 01       		.byte	0x1
 6898 1109 C1       		.byte	0xc1
 6899 110a FD010000 		.4byte	0x1fd
 6900 110e 05       		.uleb128 0x5
 6901 110f 03       		.byte	0x3
 6902 1110 00000000 		.4byte	xDelayedTaskList2
 6903 1114 27       		.uleb128 0x27
 6904 1115 62760000 		.4byte	.LASF1207
 6905 1119 01       		.byte	0x1
 6906 111a C2       		.byte	0xc2
 6907 111b 25110000 		.4byte	0x1125
 6908 111f 05       		.uleb128 0x5
 6909 1120 03       		.byte	0x3
 6910 1121 00000000 		.4byte	pxDelayedTaskList
 6911 1125 0E       		.uleb128 0xe
 6912 1126 E2090000 		.4byte	0x9e2
 6913 112a 27       		.uleb128 0x27
 6914 112b 7C780000 		.4byte	.LASF1208
 6915 112f 01       		.byte	0x1
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 189


 6916 1130 C3       		.byte	0xc3
 6917 1131 25110000 		.4byte	0x1125
 6918 1135 05       		.uleb128 0x5
 6919 1136 03       		.byte	0x3
 6920 1137 00000000 		.4byte	pxOverflowDelayedTaskList
 6921 113b 27       		.uleb128 0x27
 6922 113c 48300000 		.4byte	.LASF1209
 6923 1140 01       		.byte	0x1
 6924 1141 C4       		.byte	0xc4
 6925 1142 FD010000 		.4byte	0x1fd
 6926 1146 05       		.uleb128 0x5
 6927 1147 03       		.byte	0x3
 6928 1148 00000000 		.4byte	xPendingReadyList
 6929 114c 27       		.uleb128 0x27
 6930 114d 2C110000 		.4byte	.LASF1210
 6931 1151 01       		.byte	0x1
 6932 1152 C8       		.byte	0xc8
 6933 1153 FD010000 		.4byte	0x1fd
 6934 1157 05       		.uleb128 0x5
 6935 1158 03       		.byte	0x3
 6936 1159 00000000 		.4byte	xTasksWaitingTermination
 6937 115d 27       		.uleb128 0x27
 6938 115e 3E370000 		.4byte	.LASF1211
 6939 1162 01       		.byte	0x1
 6940 1163 C9       		.byte	0xc9
 6941 1164 6E110000 		.4byte	0x116e
 6942 1168 05       		.uleb128 0x5
 6943 1169 03       		.byte	0x3
 6944 116a 00000000 		.4byte	uxTasksDeleted
 6945 116e 0E       		.uleb128 0xe
 6946 116f 09010000 		.4byte	0x109
 6947 1173 27       		.uleb128 0x27
 6948 1174 791B0000 		.4byte	.LASF1212
 6949 1178 01       		.byte	0x1
 6950 1179 CF       		.byte	0xcf
 6951 117a FD010000 		.4byte	0x1fd
 6952 117e 05       		.uleb128 0x5
 6953 117f 03       		.byte	0x3
 6954 1180 00000000 		.4byte	xSuspendedTaskList
 6955 1184 27       		.uleb128 0x27
 6956 1185 4B390000 		.4byte	.LASF1213
 6957 1189 01       		.byte	0x1
 6958 118a DA       		.byte	0xda
 6959 118b 6E110000 		.4byte	0x116e
 6960 118f 05       		.uleb128 0x5
 6961 1190 03       		.byte	0x3
 6962 1191 00000000 		.4byte	uxCurrentNumberOfTasks
 6963 1195 27       		.uleb128 0x27
 6964 1196 C0070000 		.4byte	.LASF1214
 6965 119a 01       		.byte	0x1
 6966 119b DB       		.byte	0xdb
 6967 119c A6110000 		.4byte	0x11a6
 6968 11a0 05       		.uleb128 0x5
 6969 11a1 03       		.byte	0x3
 6970 11a2 00000000 		.4byte	xTickCount
 6971 11a6 0E       		.uleb128 0xe
 6972 11a7 1F010000 		.4byte	0x11f
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 190


 6973 11ab 27       		.uleb128 0x27
 6974 11ac 136F0000 		.4byte	.LASF1215
 6975 11b0 01       		.byte	0x1
 6976 11b1 DC       		.byte	0xdc
 6977 11b2 6E110000 		.4byte	0x116e
 6978 11b6 05       		.uleb128 0x5
 6979 11b7 03       		.byte	0x3
 6980 11b8 00000000 		.4byte	uxTopReadyPriority
 6981 11bc 27       		.uleb128 0x27
 6982 11bd 20260000 		.4byte	.LASF1216
 6983 11c1 01       		.byte	0x1
 6984 11c2 DD       		.byte	0xdd
 6985 11c3 CD110000 		.4byte	0x11cd
 6986 11c7 05       		.uleb128 0x5
 6987 11c8 03       		.byte	0x3
 6988 11c9 00000000 		.4byte	xSchedulerRunning
 6989 11cd 0E       		.uleb128 0xe
 6990 11ce FE000000 		.4byte	0xfe
 6991 11d2 27       		.uleb128 0x27
 6992 11d3 77230000 		.4byte	.LASF1217
 6993 11d7 01       		.byte	0x1
 6994 11d8 DE       		.byte	0xde
 6995 11d9 6E110000 		.4byte	0x116e
 6996 11dd 05       		.uleb128 0x5
 6997 11de 03       		.byte	0x3
 6998 11df 00000000 		.4byte	uxPendedTicks
 6999 11e3 27       		.uleb128 0x27
 7000 11e4 76000000 		.4byte	.LASF1218
 7001 11e8 01       		.byte	0x1
 7002 11e9 DF       		.byte	0xdf
 7003 11ea CD110000 		.4byte	0x11cd
 7004 11ee 05       		.uleb128 0x5
 7005 11ef 03       		.byte	0x3
 7006 11f0 00000000 		.4byte	xYieldPending
 7007 11f4 27       		.uleb128 0x27
 7008 11f5 DA1F0000 		.4byte	.LASF1219
 7009 11f9 01       		.byte	0x1
 7010 11fa E0       		.byte	0xe0
 7011 11fb CD110000 		.4byte	0x11cd
 7012 11ff 05       		.uleb128 0x5
 7013 1200 03       		.byte	0x3
 7014 1201 00000000 		.4byte	xNumOfOverflows
 7015 1205 27       		.uleb128 0x27
 7016 1206 CB070000 		.4byte	.LASF1102
 7017 120a 01       		.byte	0x1
 7018 120b E1       		.byte	0xe1
 7019 120c 09010000 		.4byte	0x109
 7020 1210 05       		.uleb128 0x5
 7021 1211 03       		.byte	0x3
 7022 1212 00000000 		.4byte	uxTaskNumber
 7023 1216 27       		.uleb128 0x27
 7024 1217 B22E0000 		.4byte	.LASF1220
 7025 121b 01       		.byte	0x1
 7026 121c E2       		.byte	0xe2
 7027 121d A6110000 		.4byte	0x11a6
 7028 1221 05       		.uleb128 0x5
 7029 1222 03       		.byte	0x3
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 191


 7030 1223 00000000 		.4byte	xNextTaskUnblockTime
 7031 1227 27       		.uleb128 0x27
 7032 1228 28100000 		.4byte	.LASF1221
 7033 122c 01       		.byte	0x1
 7034 122d EC       		.byte	0xec
 7035 122e 6E110000 		.4byte	0x116e
 7036 1232 05       		.uleb128 0x5
 7037 1233 03       		.byte	0x3
 7038 1234 00000000 		.4byte	uxSchedulerSuspended
 7039 1238 28       		.uleb128 0x28
 7040 1239 66140000 		.4byte	.LASF1228
 7041 123d 01       		.byte	0x1
 7042 123e BC       		.byte	0xbc
 7043 123f 49120000 		.4byte	0x1249
 7044 1243 05       		.uleb128 0x5
 7045 1244 03       		.byte	0x3
 7046 1245 00000000 		.4byte	pxCurrentTCB
 7047 1249 0E       		.uleb128 0xe
 7048 124a 05050000 		.4byte	0x505
 7049 124e 00       		.byte	0
 7050              		.section	.debug_abbrev,"",%progbits
 7051              	.Ldebug_abbrev0:
 7052 0000 01       		.uleb128 0x1
 7053 0001 11       		.uleb128 0x11
 7054 0002 01       		.byte	0x1
 7055 0003 25       		.uleb128 0x25
 7056 0004 0E       		.uleb128 0xe
 7057 0005 13       		.uleb128 0x13
 7058 0006 0B       		.uleb128 0xb
 7059 0007 03       		.uleb128 0x3
 7060 0008 0E       		.uleb128 0xe
 7061 0009 1B       		.uleb128 0x1b
 7062 000a 0E       		.uleb128 0xe
 7063 000b 55       		.uleb128 0x55
 7064 000c 17       		.uleb128 0x17
 7065 000d 11       		.uleb128 0x11
 7066 000e 01       		.uleb128 0x1
 7067 000f 10       		.uleb128 0x10
 7068 0010 17       		.uleb128 0x17
 7069 0011 9942     		.uleb128 0x2119
 7070 0013 17       		.uleb128 0x17
 7071 0014 00       		.byte	0
 7072 0015 00       		.byte	0
 7073 0016 02       		.uleb128 0x2
 7074 0017 16       		.uleb128 0x16
 7075 0018 00       		.byte	0
 7076 0019 03       		.uleb128 0x3
 7077 001a 0E       		.uleb128 0xe
 7078 001b 3A       		.uleb128 0x3a
 7079 001c 0B       		.uleb128 0xb
 7080 001d 3B       		.uleb128 0x3b
 7081 001e 0B       		.uleb128 0xb
 7082 001f 49       		.uleb128 0x49
 7083 0020 13       		.uleb128 0x13
 7084 0021 00       		.byte	0
 7085 0022 00       		.byte	0
 7086 0023 03       		.uleb128 0x3
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 192


 7087 0024 24       		.uleb128 0x24
 7088 0025 00       		.byte	0
 7089 0026 0B       		.uleb128 0xb
 7090 0027 0B       		.uleb128 0xb
 7091 0028 3E       		.uleb128 0x3e
 7092 0029 0B       		.uleb128 0xb
 7093 002a 03       		.uleb128 0x3
 7094 002b 0E       		.uleb128 0xe
 7095 002c 00       		.byte	0
 7096 002d 00       		.byte	0
 7097 002e 04       		.uleb128 0x4
 7098 002f 24       		.uleb128 0x24
 7099 0030 00       		.byte	0
 7100 0031 0B       		.uleb128 0xb
 7101 0032 0B       		.uleb128 0xb
 7102 0033 3E       		.uleb128 0x3e
 7103 0034 0B       		.uleb128 0xb
 7104 0035 03       		.uleb128 0x3
 7105 0036 08       		.uleb128 0x8
 7106 0037 00       		.byte	0
 7107 0038 00       		.byte	0
 7108 0039 05       		.uleb128 0x5
 7109 003a 0F       		.uleb128 0xf
 7110 003b 00       		.byte	0
 7111 003c 0B       		.uleb128 0xb
 7112 003d 0B       		.uleb128 0xb
 7113 003e 00       		.byte	0
 7114 003f 00       		.byte	0
 7115 0040 06       		.uleb128 0x6
 7116 0041 0F       		.uleb128 0xf
 7117 0042 00       		.byte	0
 7118 0043 0B       		.uleb128 0xb
 7119 0044 0B       		.uleb128 0xb
 7120 0045 49       		.uleb128 0x49
 7121 0046 13       		.uleb128 0x13
 7122 0047 00       		.byte	0
 7123 0048 00       		.byte	0
 7124 0049 07       		.uleb128 0x7
 7125 004a 26       		.uleb128 0x26
 7126 004b 00       		.byte	0
 7127 004c 49       		.uleb128 0x49
 7128 004d 13       		.uleb128 0x13
 7129 004e 00       		.byte	0
 7130 004f 00       		.byte	0
 7131 0050 08       		.uleb128 0x8
 7132 0051 15       		.uleb128 0x15
 7133 0052 01       		.byte	0x1
 7134 0053 27       		.uleb128 0x27
 7135 0054 19       		.uleb128 0x19
 7136 0055 01       		.uleb128 0x1
 7137 0056 13       		.uleb128 0x13
 7138 0057 00       		.byte	0
 7139 0058 00       		.byte	0
 7140 0059 09       		.uleb128 0x9
 7141 005a 05       		.uleb128 0x5
 7142 005b 00       		.byte	0
 7143 005c 49       		.uleb128 0x49
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 193


 7144 005d 13       		.uleb128 0x13
 7145 005e 00       		.byte	0
 7146 005f 00       		.byte	0
 7147 0060 0A       		.uleb128 0xa
 7148 0061 13       		.uleb128 0x13
 7149 0062 01       		.byte	0x1
 7150 0063 03       		.uleb128 0x3
 7151 0064 0E       		.uleb128 0xe
 7152 0065 0B       		.uleb128 0xb
 7153 0066 0B       		.uleb128 0xb
 7154 0067 3A       		.uleb128 0x3a
 7155 0068 0B       		.uleb128 0xb
 7156 0069 3B       		.uleb128 0x3b
 7157 006a 0B       		.uleb128 0xb
 7158 006b 01       		.uleb128 0x1
 7159 006c 13       		.uleb128 0x13
 7160 006d 00       		.byte	0
 7161 006e 00       		.byte	0
 7162 006f 0B       		.uleb128 0xb
 7163 0070 0D       		.uleb128 0xd
 7164 0071 00       		.byte	0
 7165 0072 03       		.uleb128 0x3
 7166 0073 0E       		.uleb128 0xe
 7167 0074 3A       		.uleb128 0x3a
 7168 0075 0B       		.uleb128 0xb
 7169 0076 3B       		.uleb128 0x3b
 7170 0077 0B       		.uleb128 0xb
 7171 0078 49       		.uleb128 0x49
 7172 0079 13       		.uleb128 0x13
 7173 007a 38       		.uleb128 0x38
 7174 007b 0B       		.uleb128 0xb
 7175 007c 00       		.byte	0
 7176 007d 00       		.byte	0
 7177 007e 0C       		.uleb128 0xc
 7178 007f 04       		.uleb128 0x4
 7179 0080 01       		.byte	0x1
 7180 0081 0B       		.uleb128 0xb
 7181 0082 0B       		.uleb128 0xb
 7182 0083 3A       		.uleb128 0x3a
 7183 0084 0B       		.uleb128 0xb
 7184 0085 3B       		.uleb128 0x3b
 7185 0086 0B       		.uleb128 0xb
 7186 0087 01       		.uleb128 0x1
 7187 0088 13       		.uleb128 0x13
 7188 0089 00       		.byte	0
 7189 008a 00       		.byte	0
 7190 008b 0D       		.uleb128 0xd
 7191 008c 28       		.uleb128 0x28
 7192 008d 00       		.byte	0
 7193 008e 03       		.uleb128 0x3
 7194 008f 0E       		.uleb128 0xe
 7195 0090 1C       		.uleb128 0x1c
 7196 0091 0D       		.uleb128 0xd
 7197 0092 00       		.byte	0
 7198 0093 00       		.byte	0
 7199 0094 0E       		.uleb128 0xe
 7200 0095 35       		.uleb128 0x35
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 194


 7201 0096 00       		.byte	0
 7202 0097 49       		.uleb128 0x49
 7203 0098 13       		.uleb128 0x13
 7204 0099 00       		.byte	0
 7205 009a 00       		.byte	0
 7206 009b 0F       		.uleb128 0xf
 7207 009c 01       		.uleb128 0x1
 7208 009d 01       		.byte	0x1
 7209 009e 49       		.uleb128 0x49
 7210 009f 13       		.uleb128 0x13
 7211 00a0 01       		.uleb128 0x1
 7212 00a1 13       		.uleb128 0x13
 7213 00a2 00       		.byte	0
 7214 00a3 00       		.byte	0
 7215 00a4 10       		.uleb128 0x10
 7216 00a5 21       		.uleb128 0x21
 7217 00a6 00       		.byte	0
 7218 00a7 49       		.uleb128 0x49
 7219 00a8 13       		.uleb128 0x13
 7220 00a9 2F       		.uleb128 0x2f
 7221 00aa 0B       		.uleb128 0xb
 7222 00ab 00       		.byte	0
 7223 00ac 00       		.byte	0
 7224 00ad 11       		.uleb128 0x11
 7225 00ae 2E       		.uleb128 0x2e
 7226 00af 01       		.byte	0x1
 7227 00b0 03       		.uleb128 0x3
 7228 00b1 0E       		.uleb128 0xe
 7229 00b2 3A       		.uleb128 0x3a
 7230 00b3 0B       		.uleb128 0xb
 7231 00b4 3B       		.uleb128 0x3b
 7232 00b5 0B       		.uleb128 0xb
 7233 00b6 27       		.uleb128 0x27
 7234 00b7 19       		.uleb128 0x19
 7235 00b8 49       		.uleb128 0x49
 7236 00b9 13       		.uleb128 0x13
 7237 00ba 20       		.uleb128 0x20
 7238 00bb 0B       		.uleb128 0xb
 7239 00bc 01       		.uleb128 0x1
 7240 00bd 13       		.uleb128 0x13
 7241 00be 00       		.byte	0
 7242 00bf 00       		.byte	0
 7243 00c0 12       		.uleb128 0x12
 7244 00c1 05       		.uleb128 0x5
 7245 00c2 00       		.byte	0
 7246 00c3 03       		.uleb128 0x3
 7247 00c4 0E       		.uleb128 0xe
 7248 00c5 3A       		.uleb128 0x3a
 7249 00c6 0B       		.uleb128 0xb
 7250 00c7 3B       		.uleb128 0x3b
 7251 00c8 0B       		.uleb128 0xb
 7252 00c9 49       		.uleb128 0x49
 7253 00ca 13       		.uleb128 0x13
 7254 00cb 00       		.byte	0
 7255 00cc 00       		.byte	0
 7256 00cd 13       		.uleb128 0x13
 7257 00ce 34       		.uleb128 0x34
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 195


 7258 00cf 00       		.byte	0
 7259 00d0 03       		.uleb128 0x3
 7260 00d1 0E       		.uleb128 0xe
 7261 00d2 3A       		.uleb128 0x3a
 7262 00d3 0B       		.uleb128 0xb
 7263 00d4 3B       		.uleb128 0x3b
 7264 00d5 0B       		.uleb128 0xb
 7265 00d6 49       		.uleb128 0x49
 7266 00d7 13       		.uleb128 0x13
 7267 00d8 00       		.byte	0
 7268 00d9 00       		.byte	0
 7269 00da 14       		.uleb128 0x14
 7270 00db 2E       		.uleb128 0x2e
 7271 00dc 01       		.byte	0x1
 7272 00dd 3F       		.uleb128 0x3f
 7273 00de 19       		.uleb128 0x19
 7274 00df 03       		.uleb128 0x3
 7275 00e0 0E       		.uleb128 0xe
 7276 00e1 3A       		.uleb128 0x3a
 7277 00e2 0B       		.uleb128 0xb
 7278 00e3 3B       		.uleb128 0x3b
 7279 00e4 05       		.uleb128 0x5
 7280 00e5 27       		.uleb128 0x27
 7281 00e6 19       		.uleb128 0x19
 7282 00e7 49       		.uleb128 0x49
 7283 00e8 13       		.uleb128 0x13
 7284 00e9 11       		.uleb128 0x11
 7285 00ea 01       		.uleb128 0x1
 7286 00eb 12       		.uleb128 0x12
 7287 00ec 06       		.uleb128 0x6
 7288 00ed 40       		.uleb128 0x40
 7289 00ee 18       		.uleb128 0x18
 7290 00ef 9642     		.uleb128 0x2116
 7291 00f1 19       		.uleb128 0x19
 7292 00f2 01       		.uleb128 0x1
 7293 00f3 13       		.uleb128 0x13
 7294 00f4 00       		.byte	0
 7295 00f5 00       		.byte	0
 7296 00f6 15       		.uleb128 0x15
 7297 00f7 05       		.uleb128 0x5
 7298 00f8 00       		.byte	0
 7299 00f9 03       		.uleb128 0x3
 7300 00fa 0E       		.uleb128 0xe
 7301 00fb 3A       		.uleb128 0x3a
 7302 00fc 0B       		.uleb128 0xb
 7303 00fd 3B       		.uleb128 0x3b
 7304 00fe 05       		.uleb128 0x5
 7305 00ff 49       		.uleb128 0x49
 7306 0100 13       		.uleb128 0x13
 7307 0101 02       		.uleb128 0x2
 7308 0102 18       		.uleb128 0x18
 7309 0103 00       		.byte	0
 7310 0104 00       		.byte	0
 7311 0105 16       		.uleb128 0x16
 7312 0106 34       		.uleb128 0x34
 7313 0107 00       		.byte	0
 7314 0108 03       		.uleb128 0x3
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 196


 7315 0109 0E       		.uleb128 0xe
 7316 010a 3A       		.uleb128 0x3a
 7317 010b 0B       		.uleb128 0xb
 7318 010c 3B       		.uleb128 0x3b
 7319 010d 05       		.uleb128 0x5
 7320 010e 49       		.uleb128 0x49
 7321 010f 13       		.uleb128 0x13
 7322 0110 02       		.uleb128 0x2
 7323 0111 18       		.uleb128 0x18
 7324 0112 00       		.byte	0
 7325 0113 00       		.byte	0
 7326 0114 17       		.uleb128 0x17
 7327 0115 0B       		.uleb128 0xb
 7328 0116 01       		.byte	0x1
 7329 0117 11       		.uleb128 0x11
 7330 0118 01       		.uleb128 0x1
 7331 0119 12       		.uleb128 0x12
 7332 011a 06       		.uleb128 0x6
 7333 011b 00       		.byte	0
 7334 011c 00       		.byte	0
 7335 011d 18       		.uleb128 0x18
 7336 011e 2E       		.uleb128 0x2e
 7337 011f 01       		.byte	0x1
 7338 0120 3F       		.uleb128 0x3f
 7339 0121 19       		.uleb128 0x19
 7340 0122 03       		.uleb128 0x3
 7341 0123 0E       		.uleb128 0xe
 7342 0124 3A       		.uleb128 0x3a
 7343 0125 0B       		.uleb128 0xb
 7344 0126 3B       		.uleb128 0x3b
 7345 0127 05       		.uleb128 0x5
 7346 0128 27       		.uleb128 0x27
 7347 0129 19       		.uleb128 0x19
 7348 012a 11       		.uleb128 0x11
 7349 012b 01       		.uleb128 0x1
 7350 012c 12       		.uleb128 0x12
 7351 012d 06       		.uleb128 0x6
 7352 012e 40       		.uleb128 0x40
 7353 012f 18       		.uleb128 0x18
 7354 0130 9642     		.uleb128 0x2116
 7355 0132 19       		.uleb128 0x19
 7356 0133 01       		.uleb128 0x1
 7357 0134 13       		.uleb128 0x13
 7358 0135 00       		.byte	0
 7359 0136 00       		.byte	0
 7360 0137 19       		.uleb128 0x19
 7361 0138 2E       		.uleb128 0x2e
 7362 0139 01       		.byte	0x1
 7363 013a 03       		.uleb128 0x3
 7364 013b 0E       		.uleb128 0xe
 7365 013c 3A       		.uleb128 0x3a
 7366 013d 0B       		.uleb128 0xb
 7367 013e 3B       		.uleb128 0x3b
 7368 013f 05       		.uleb128 0x5
 7369 0140 27       		.uleb128 0x27
 7370 0141 19       		.uleb128 0x19
 7371 0142 49       		.uleb128 0x49
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 197


 7372 0143 13       		.uleb128 0x13
 7373 0144 11       		.uleb128 0x11
 7374 0145 01       		.uleb128 0x1
 7375 0146 12       		.uleb128 0x12
 7376 0147 06       		.uleb128 0x6
 7377 0148 40       		.uleb128 0x40
 7378 0149 18       		.uleb128 0x18
 7379 014a 9642     		.uleb128 0x2116
 7380 014c 19       		.uleb128 0x19
 7381 014d 01       		.uleb128 0x1
 7382 014e 13       		.uleb128 0x13
 7383 014f 00       		.byte	0
 7384 0150 00       		.byte	0
 7385 0151 1A       		.uleb128 0x1a
 7386 0152 2E       		.uleb128 0x2e
 7387 0153 00       		.byte	0
 7388 0154 3F       		.uleb128 0x3f
 7389 0155 19       		.uleb128 0x19
 7390 0156 03       		.uleb128 0x3
 7391 0157 0E       		.uleb128 0xe
 7392 0158 3A       		.uleb128 0x3a
 7393 0159 0B       		.uleb128 0xb
 7394 015a 3B       		.uleb128 0x3b
 7395 015b 05       		.uleb128 0x5
 7396 015c 27       		.uleb128 0x27
 7397 015d 19       		.uleb128 0x19
 7398 015e 11       		.uleb128 0x11
 7399 015f 01       		.uleb128 0x1
 7400 0160 12       		.uleb128 0x12
 7401 0161 06       		.uleb128 0x6
 7402 0162 40       		.uleb128 0x40
 7403 0163 18       		.uleb128 0x18
 7404 0164 9642     		.uleb128 0x2116
 7405 0166 19       		.uleb128 0x19
 7406 0167 00       		.byte	0
 7407 0168 00       		.byte	0
 7408 0169 1B       		.uleb128 0x1b
 7409 016a 2E       		.uleb128 0x2e
 7410 016b 00       		.byte	0
 7411 016c 3F       		.uleb128 0x3f
 7412 016d 19       		.uleb128 0x19
 7413 016e 03       		.uleb128 0x3
 7414 016f 0E       		.uleb128 0xe
 7415 0170 3A       		.uleb128 0x3a
 7416 0171 0B       		.uleb128 0xb
 7417 0172 3B       		.uleb128 0x3b
 7418 0173 05       		.uleb128 0x5
 7419 0174 27       		.uleb128 0x27
 7420 0175 19       		.uleb128 0x19
 7421 0176 11       		.uleb128 0x11
 7422 0177 01       		.uleb128 0x1
 7423 0178 12       		.uleb128 0x12
 7424 0179 06       		.uleb128 0x6
 7425 017a 40       		.uleb128 0x40
 7426 017b 18       		.uleb128 0x18
 7427 017c 9742     		.uleb128 0x2117
 7428 017e 19       		.uleb128 0x19
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 198


 7429 017f 00       		.byte	0
 7430 0180 00       		.byte	0
 7431 0181 1C       		.uleb128 0x1c
 7432 0182 2E       		.uleb128 0x2e
 7433 0183 00       		.byte	0
 7434 0184 3F       		.uleb128 0x3f
 7435 0185 19       		.uleb128 0x19
 7436 0186 03       		.uleb128 0x3
 7437 0187 0E       		.uleb128 0xe
 7438 0188 3A       		.uleb128 0x3a
 7439 0189 0B       		.uleb128 0xb
 7440 018a 3B       		.uleb128 0x3b
 7441 018b 05       		.uleb128 0x5
 7442 018c 27       		.uleb128 0x27
 7443 018d 19       		.uleb128 0x19
 7444 018e 49       		.uleb128 0x49
 7445 018f 13       		.uleb128 0x13
 7446 0190 11       		.uleb128 0x11
 7447 0191 01       		.uleb128 0x1
 7448 0192 12       		.uleb128 0x12
 7449 0193 06       		.uleb128 0x6
 7450 0194 40       		.uleb128 0x40
 7451 0195 18       		.uleb128 0x18
 7452 0196 9742     		.uleb128 0x2117
 7453 0198 19       		.uleb128 0x19
 7454 0199 00       		.byte	0
 7455 019a 00       		.byte	0
 7456 019b 1D       		.uleb128 0x1d
 7457 019c 1D       		.uleb128 0x1d
 7458 019d 01       		.byte	0x1
 7459 019e 31       		.uleb128 0x31
 7460 019f 13       		.uleb128 0x13
 7461 01a0 11       		.uleb128 0x11
 7462 01a1 01       		.uleb128 0x1
 7463 01a2 12       		.uleb128 0x12
 7464 01a3 06       		.uleb128 0x6
 7465 01a4 58       		.uleb128 0x58
 7466 01a5 0B       		.uleb128 0xb
 7467 01a6 59       		.uleb128 0x59
 7468 01a7 05       		.uleb128 0x5
 7469 01a8 01       		.uleb128 0x1
 7470 01a9 13       		.uleb128 0x13
 7471 01aa 00       		.byte	0
 7472 01ab 00       		.byte	0
 7473 01ac 1E       		.uleb128 0x1e
 7474 01ad 05       		.uleb128 0x5
 7475 01ae 00       		.byte	0
 7476 01af 31       		.uleb128 0x31
 7477 01b0 13       		.uleb128 0x13
 7478 01b1 02       		.uleb128 0x2
 7479 01b2 18       		.uleb128 0x18
 7480 01b3 00       		.byte	0
 7481 01b4 00       		.byte	0
 7482 01b5 1F       		.uleb128 0x1f
 7483 01b6 34       		.uleb128 0x34
 7484 01b7 00       		.byte	0
 7485 01b8 31       		.uleb128 0x31
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 199


 7486 01b9 13       		.uleb128 0x13
 7487 01ba 02       		.uleb128 0x2
 7488 01bb 18       		.uleb128 0x18
 7489 01bc 00       		.byte	0
 7490 01bd 00       		.byte	0
 7491 01be 20       		.uleb128 0x20
 7492 01bf 2E       		.uleb128 0x2e
 7493 01c0 01       		.byte	0x1
 7494 01c1 3F       		.uleb128 0x3f
 7495 01c2 19       		.uleb128 0x19
 7496 01c3 03       		.uleb128 0x3
 7497 01c4 0E       		.uleb128 0xe
 7498 01c5 3A       		.uleb128 0x3a
 7499 01c6 0B       		.uleb128 0xb
 7500 01c7 3B       		.uleb128 0x3b
 7501 01c8 05       		.uleb128 0x5
 7502 01c9 27       		.uleb128 0x27
 7503 01ca 19       		.uleb128 0x19
 7504 01cb 49       		.uleb128 0x49
 7505 01cc 13       		.uleb128 0x13
 7506 01cd 11       		.uleb128 0x11
 7507 01ce 01       		.uleb128 0x1
 7508 01cf 12       		.uleb128 0x12
 7509 01d0 06       		.uleb128 0x6
 7510 01d1 40       		.uleb128 0x40
 7511 01d2 18       		.uleb128 0x18
 7512 01d3 9742     		.uleb128 0x2117
 7513 01d5 19       		.uleb128 0x19
 7514 01d6 01       		.uleb128 0x1
 7515 01d7 13       		.uleb128 0x13
 7516 01d8 00       		.byte	0
 7517 01d9 00       		.byte	0
 7518 01da 21       		.uleb128 0x21
 7519 01db 2E       		.uleb128 0x2e
 7520 01dc 01       		.byte	0x1
 7521 01dd 3F       		.uleb128 0x3f
 7522 01de 19       		.uleb128 0x19
 7523 01df 03       		.uleb128 0x3
 7524 01e0 0E       		.uleb128 0xe
 7525 01e1 3A       		.uleb128 0x3a
 7526 01e2 0B       		.uleb128 0xb
 7527 01e3 3B       		.uleb128 0x3b
 7528 01e4 05       		.uleb128 0x5
 7529 01e5 27       		.uleb128 0x27
 7530 01e6 19       		.uleb128 0x19
 7531 01e7 11       		.uleb128 0x11
 7532 01e8 01       		.uleb128 0x1
 7533 01e9 12       		.uleb128 0x12
 7534 01ea 06       		.uleb128 0x6
 7535 01eb 40       		.uleb128 0x40
 7536 01ec 18       		.uleb128 0x18
 7537 01ed 9742     		.uleb128 0x2117
 7538 01ef 19       		.uleb128 0x19
 7539 01f0 01       		.uleb128 0x1
 7540 01f1 13       		.uleb128 0x13
 7541 01f2 00       		.byte	0
 7542 01f3 00       		.byte	0
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 200


 7543 01f4 22       		.uleb128 0x22
 7544 01f5 2E       		.uleb128 0x2e
 7545 01f6 01       		.byte	0x1
 7546 01f7 03       		.uleb128 0x3
 7547 01f8 0E       		.uleb128 0xe
 7548 01f9 3A       		.uleb128 0x3a
 7549 01fa 0B       		.uleb128 0xb
 7550 01fb 3B       		.uleb128 0x3b
 7551 01fc 05       		.uleb128 0x5
 7552 01fd 27       		.uleb128 0x27
 7553 01fe 19       		.uleb128 0x19
 7554 01ff 11       		.uleb128 0x11
 7555 0200 01       		.uleb128 0x1
 7556 0201 12       		.uleb128 0x12
 7557 0202 06       		.uleb128 0x6
 7558 0203 40       		.uleb128 0x40
 7559 0204 18       		.uleb128 0x18
 7560 0205 9642     		.uleb128 0x2116
 7561 0207 19       		.uleb128 0x19
 7562 0208 01       		.uleb128 0x1
 7563 0209 13       		.uleb128 0x13
 7564 020a 00       		.byte	0
 7565 020b 00       		.byte	0
 7566 020c 23       		.uleb128 0x23
 7567 020d 34       		.uleb128 0x34
 7568 020e 00       		.byte	0
 7569 020f 03       		.uleb128 0x3
 7570 0210 08       		.uleb128 0x8
 7571 0211 3A       		.uleb128 0x3a
 7572 0212 0B       		.uleb128 0xb
 7573 0213 3B       		.uleb128 0x3b
 7574 0214 05       		.uleb128 0x5
 7575 0215 49       		.uleb128 0x49
 7576 0216 13       		.uleb128 0x13
 7577 0217 02       		.uleb128 0x2
 7578 0218 18       		.uleb128 0x18
 7579 0219 00       		.byte	0
 7580 021a 00       		.byte	0
 7581 021b 24       		.uleb128 0x24
 7582 021c 0B       		.uleb128 0xb
 7583 021d 01       		.byte	0x1
 7584 021e 11       		.uleb128 0x11
 7585 021f 01       		.uleb128 0x1
 7586 0220 12       		.uleb128 0x12
 7587 0221 06       		.uleb128 0x6
 7588 0222 01       		.uleb128 0x1
 7589 0223 13       		.uleb128 0x13
 7590 0224 00       		.byte	0
 7591 0225 00       		.byte	0
 7592 0226 25       		.uleb128 0x25
 7593 0227 2E       		.uleb128 0x2e
 7594 0228 01       		.byte	0x1
 7595 0229 03       		.uleb128 0x3
 7596 022a 0E       		.uleb128 0xe
 7597 022b 3A       		.uleb128 0x3a
 7598 022c 0B       		.uleb128 0xb
 7599 022d 3B       		.uleb128 0x3b
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 201


 7600 022e 05       		.uleb128 0x5
 7601 022f 27       		.uleb128 0x27
 7602 0230 19       		.uleb128 0x19
 7603 0231 49       		.uleb128 0x49
 7604 0232 13       		.uleb128 0x13
 7605 0233 11       		.uleb128 0x11
 7606 0234 01       		.uleb128 0x1
 7607 0235 12       		.uleb128 0x12
 7608 0236 06       		.uleb128 0x6
 7609 0237 40       		.uleb128 0x40
 7610 0238 18       		.uleb128 0x18
 7611 0239 9742     		.uleb128 0x2117
 7612 023b 19       		.uleb128 0x19
 7613 023c 01       		.uleb128 0x1
 7614 023d 13       		.uleb128 0x13
 7615 023e 00       		.byte	0
 7616 023f 00       		.byte	0
 7617 0240 26       		.uleb128 0x26
 7618 0241 2E       		.uleb128 0x2e
 7619 0242 01       		.byte	0x1
 7620 0243 03       		.uleb128 0x3
 7621 0244 0E       		.uleb128 0xe
 7622 0245 3A       		.uleb128 0x3a
 7623 0246 0B       		.uleb128 0xb
 7624 0247 3B       		.uleb128 0x3b
 7625 0248 05       		.uleb128 0x5
 7626 0249 27       		.uleb128 0x27
 7627 024a 19       		.uleb128 0x19
 7628 024b 11       		.uleb128 0x11
 7629 024c 01       		.uleb128 0x1
 7630 024d 12       		.uleb128 0x12
 7631 024e 06       		.uleb128 0x6
 7632 024f 40       		.uleb128 0x40
 7633 0250 18       		.uleb128 0x18
 7634 0251 9742     		.uleb128 0x2117
 7635 0253 19       		.uleb128 0x19
 7636 0254 01       		.uleb128 0x1
 7637 0255 13       		.uleb128 0x13
 7638 0256 00       		.byte	0
 7639 0257 00       		.byte	0
 7640 0258 27       		.uleb128 0x27
 7641 0259 34       		.uleb128 0x34
 7642 025a 00       		.byte	0
 7643 025b 03       		.uleb128 0x3
 7644 025c 0E       		.uleb128 0xe
 7645 025d 3A       		.uleb128 0x3a
 7646 025e 0B       		.uleb128 0xb
 7647 025f 3B       		.uleb128 0x3b
 7648 0260 0B       		.uleb128 0xb
 7649 0261 49       		.uleb128 0x49
 7650 0262 13       		.uleb128 0x13
 7651 0263 02       		.uleb128 0x2
 7652 0264 18       		.uleb128 0x18
 7653 0265 00       		.byte	0
 7654 0266 00       		.byte	0
 7655 0267 28       		.uleb128 0x28
 7656 0268 34       		.uleb128 0x34
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 202


 7657 0269 00       		.byte	0
 7658 026a 03       		.uleb128 0x3
 7659 026b 0E       		.uleb128 0xe
 7660 026c 3A       		.uleb128 0x3a
 7661 026d 0B       		.uleb128 0xb
 7662 026e 3B       		.uleb128 0x3b
 7663 026f 0B       		.uleb128 0xb
 7664 0270 49       		.uleb128 0x49
 7665 0271 13       		.uleb128 0x13
 7666 0272 3F       		.uleb128 0x3f
 7667 0273 19       		.uleb128 0x19
 7668 0274 02       		.uleb128 0x2
 7669 0275 18       		.uleb128 0x18
 7670 0276 00       		.byte	0
 7671 0277 00       		.byte	0
 7672 0278 00       		.byte	0
 7673              		.section	.debug_aranges,"",%progbits
 7674 0000 7C010000 		.4byte	0x17c
 7675 0004 0200     		.2byte	0x2
 7676 0006 00000000 		.4byte	.Ldebug_info0
 7677 000a 04       		.byte	0x4
 7678 000b 00       		.byte	0
 7679 000c 0000     		.2byte	0
 7680 000e 0000     		.2byte	0
 7681 0010 00000000 		.4byte	.LFB1
 7682 0014 68010000 		.4byte	.LFE1-.LFB1
 7683 0018 00000000 		.4byte	.LFB2
 7684 001c E8000000 		.4byte	.LFE2-.LFB2
 7685 0020 00000000 		.4byte	.LFB3
 7686 0024 E4000000 		.4byte	.LFE3-.LFB3
 7687 0028 00000000 		.4byte	.LFB4
 7688 002c 84000000 		.4byte	.LFE4-.LFB4
 7689 0030 00000000 		.4byte	.LFB5
 7690 0034 34000000 		.4byte	.LFE5-.LFB5
 7691 0038 00000000 		.4byte	.LFB6
 7692 003c 40010000 		.4byte	.LFE6-.LFB6
 7693 0040 00000000 		.4byte	.LFB7
 7694 0044 F0000000 		.4byte	.LFE7-.LFB7
 7695 0048 00000000 		.4byte	.LFB8
 7696 004c 64000000 		.4byte	.LFE8-.LFB8
 7697 0050 00000000 		.4byte	.LFB9
 7698 0054 9C000000 		.4byte	.LFE9-.LFB9
 7699 0058 00000000 		.4byte	.LFB10
 7700 005c BC000000 		.4byte	.LFE10-.LFB10
 7701 0060 00000000 		.4byte	.LFB11
 7702 0064 64000000 		.4byte	.LFE11-.LFB11
 7703 0068 00000000 		.4byte	.LFB12
 7704 006c 18000000 		.4byte	.LFE12-.LFB12
 7705 0070 00000000 		.4byte	.LFB13
 7706 0074 1C000000 		.4byte	.LFE13-.LFB13
 7707 0078 00000000 		.4byte	.LFB14
 7708 007c 0C010000 		.4byte	.LFE14-.LFB14
 7709 0080 00000000 		.4byte	.LFB15
 7710 0084 24000000 		.4byte	.LFE15-.LFB15
 7711 0088 00000000 		.4byte	.LFB16
 7712 008c 2C000000 		.4byte	.LFE16-.LFB16
 7713 0090 00000000 		.4byte	.LFB17
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 203


 7714 0094 18000000 		.4byte	.LFE17-.LFB17
 7715 0098 00000000 		.4byte	.LFB18
 7716 009c F8000000 		.4byte	.LFE18-.LFB18
 7717 00a0 00000000 		.4byte	.LFB19
 7718 00a4 80010000 		.4byte	.LFE19-.LFB19
 7719 00a8 00000000 		.4byte	.LFB20
 7720 00ac A0000000 		.4byte	.LFE20-.LFB20
 7721 00b0 00000000 		.4byte	.LFB21
 7722 00b4 8C000000 		.4byte	.LFE21-.LFB21
 7723 00b8 00000000 		.4byte	.LFB22
 7724 00bc AC000000 		.4byte	.LFE22-.LFB22
 7725 00c0 00000000 		.4byte	.LFB23
 7726 00c4 B8000000 		.4byte	.LFE23-.LFB23
 7727 00c8 00000000 		.4byte	.LFB24
 7728 00cc B4000000 		.4byte	.LFE24-.LFB24
 7729 00d0 00000000 		.4byte	.LFB25
 7730 00d4 34000000 		.4byte	.LFE25-.LFB25
 7731 00d8 00000000 		.4byte	.LFB26
 7732 00dc A0000000 		.4byte	.LFE26-.LFB26
 7733 00e0 00000000 		.4byte	.LFB27
 7734 00e4 18000000 		.4byte	.LFE27-.LFB27
 7735 00e8 00000000 		.4byte	.LFB28
 7736 00ec 2C000000 		.4byte	.LFE28-.LFB28
 7737 00f0 00000000 		.4byte	.LFB29
 7738 00f4 24000000 		.4byte	.LFE29-.LFB29
 7739 00f8 00000000 		.4byte	.LFB30
 7740 00fc 0E000000 		.4byte	.LFE30-.LFB30
 7741 0100 00000000 		.4byte	.LFB31
 7742 0104 96000000 		.4byte	.LFE31-.LFB31
 7743 0108 00000000 		.4byte	.LFB32
 7744 010c 7C000000 		.4byte	.LFE32-.LFB32
 7745 0110 00000000 		.4byte	.LFB33
 7746 0114 74000000 		.4byte	.LFE33-.LFB33
 7747 0118 00000000 		.4byte	.LFB34
 7748 011c 6C000000 		.4byte	.LFE34-.LFB34
 7749 0120 00000000 		.4byte	.LFB35
 7750 0124 64000000 		.4byte	.LFE35-.LFB35
 7751 0128 00000000 		.4byte	.LFB36
 7752 012c 16010000 		.4byte	.LFE36-.LFB36
 7753 0130 00000000 		.4byte	.LFB37
 7754 0134 38000000 		.4byte	.LFE37-.LFB37
 7755 0138 00000000 		.4byte	.LFB38
 7756 013c 38000000 		.4byte	.LFE38-.LFB38
 7757 0140 00000000 		.4byte	.LFB39
 7758 0144 1E000000 		.4byte	.LFE39-.LFB39
 7759 0148 00000000 		.4byte	.LFB40
 7760 014c 48000000 		.4byte	.LFE40-.LFB40
 7761 0150 00000000 		.4byte	.LFB41
 7762 0154 20000000 		.4byte	.LFE41-.LFB41
 7763 0158 00000000 		.4byte	.LFB42
 7764 015c F0000000 		.4byte	.LFE42-.LFB42
 7765 0160 00000000 		.4byte	.LFB43
 7766 0164 DC000000 		.4byte	.LFE43-.LFB43
 7767 0168 00000000 		.4byte	.LFB44
 7768 016c 30000000 		.4byte	.LFE44-.LFB44
 7769 0170 00000000 		.4byte	.LFB45
 7770 0174 28000000 		.4byte	.LFE45-.LFB45
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 204


 7771 0178 00000000 		.4byte	0
 7772 017c 00000000 		.4byte	0
 7773              		.section	.debug_ranges,"",%progbits
 7774              	.Ldebug_ranges0:
 7775 0000 00000000 		.4byte	.LFB1
 7776 0004 68010000 		.4byte	.LFE1
 7777 0008 00000000 		.4byte	.LFB2
 7778 000c E8000000 		.4byte	.LFE2
 7779 0010 00000000 		.4byte	.LFB3
 7780 0014 E4000000 		.4byte	.LFE3
 7781 0018 00000000 		.4byte	.LFB4
 7782 001c 84000000 		.4byte	.LFE4
 7783 0020 00000000 		.4byte	.LFB5
 7784 0024 34000000 		.4byte	.LFE5
 7785 0028 00000000 		.4byte	.LFB6
 7786 002c 40010000 		.4byte	.LFE6
 7787 0030 00000000 		.4byte	.LFB7
 7788 0034 F0000000 		.4byte	.LFE7
 7789 0038 00000000 		.4byte	.LFB8
 7790 003c 64000000 		.4byte	.LFE8
 7791 0040 00000000 		.4byte	.LFB9
 7792 0044 9C000000 		.4byte	.LFE9
 7793 0048 00000000 		.4byte	.LFB10
 7794 004c BC000000 		.4byte	.LFE10
 7795 0050 00000000 		.4byte	.LFB11
 7796 0054 64000000 		.4byte	.LFE11
 7797 0058 00000000 		.4byte	.LFB12
 7798 005c 18000000 		.4byte	.LFE12
 7799 0060 00000000 		.4byte	.LFB13
 7800 0064 1C000000 		.4byte	.LFE13
 7801 0068 00000000 		.4byte	.LFB14
 7802 006c 0C010000 		.4byte	.LFE14
 7803 0070 00000000 		.4byte	.LFB15
 7804 0074 24000000 		.4byte	.LFE15
 7805 0078 00000000 		.4byte	.LFB16
 7806 007c 2C000000 		.4byte	.LFE16
 7807 0080 00000000 		.4byte	.LFB17
 7808 0084 18000000 		.4byte	.LFE17
 7809 0088 00000000 		.4byte	.LFB18
 7810 008c F8000000 		.4byte	.LFE18
 7811 0090 00000000 		.4byte	.LFB19
 7812 0094 80010000 		.4byte	.LFE19
 7813 0098 00000000 		.4byte	.LFB20
 7814 009c A0000000 		.4byte	.LFE20
 7815 00a0 00000000 		.4byte	.LFB21
 7816 00a4 8C000000 		.4byte	.LFE21
 7817 00a8 00000000 		.4byte	.LFB22
 7818 00ac AC000000 		.4byte	.LFE22
 7819 00b0 00000000 		.4byte	.LFB23
 7820 00b4 B8000000 		.4byte	.LFE23
 7821 00b8 00000000 		.4byte	.LFB24
 7822 00bc B4000000 		.4byte	.LFE24
 7823 00c0 00000000 		.4byte	.LFB25
 7824 00c4 34000000 		.4byte	.LFE25
 7825 00c8 00000000 		.4byte	.LFB26
 7826 00cc A0000000 		.4byte	.LFE26
 7827 00d0 00000000 		.4byte	.LFB27
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 205


 7828 00d4 18000000 		.4byte	.LFE27
 7829 00d8 00000000 		.4byte	.LFB28
 7830 00dc 2C000000 		.4byte	.LFE28
 7831 00e0 00000000 		.4byte	.LFB29
 7832 00e4 24000000 		.4byte	.LFE29
 7833 00e8 00000000 		.4byte	.LFB30
 7834 00ec 0E000000 		.4byte	.LFE30
 7835 00f0 00000000 		.4byte	.LFB31
 7836 00f4 96000000 		.4byte	.LFE31
 7837 00f8 00000000 		.4byte	.LFB32
 7838 00fc 7C000000 		.4byte	.LFE32
 7839 0100 00000000 		.4byte	.LFB33
 7840 0104 74000000 		.4byte	.LFE33
 7841 0108 00000000 		.4byte	.LFB34
 7842 010c 6C000000 		.4byte	.LFE34
 7843 0110 00000000 		.4byte	.LFB35
 7844 0114 64000000 		.4byte	.LFE35
 7845 0118 00000000 		.4byte	.LFB36
 7846 011c 16010000 		.4byte	.LFE36
 7847 0120 00000000 		.4byte	.LFB37
 7848 0124 38000000 		.4byte	.LFE37
 7849 0128 00000000 		.4byte	.LFB38
 7850 012c 38000000 		.4byte	.LFE38
 7851 0130 00000000 		.4byte	.LFB39
 7852 0134 1E000000 		.4byte	.LFE39
 7853 0138 00000000 		.4byte	.LFB40
 7854 013c 48000000 		.4byte	.LFE40
 7855 0140 00000000 		.4byte	.LFB41
 7856 0144 20000000 		.4byte	.LFE41
 7857 0148 00000000 		.4byte	.LFB42
 7858 014c F0000000 		.4byte	.LFE42
 7859 0150 00000000 		.4byte	.LFB43
 7860 0154 DC000000 		.4byte	.LFE43
 7861 0158 00000000 		.4byte	.LFB44
 7862 015c 30000000 		.4byte	.LFE44
 7863 0160 00000000 		.4byte	.LFB45
 7864 0164 28000000 		.4byte	.LFE45
 7865 0168 00000000 		.4byte	0
 7866 016c 00000000 		.4byte	0
 7867              		.section	.debug_macro,"",%progbits
 7868              	.Ldebug_macro0:
 7869 0000 0400     		.2byte	0x4
 7870 0002 02       		.byte	0x2
 7871 0003 00000000 		.4byte	.Ldebug_line0
 7872 0007 07       		.byte	0x7
 7873 0008 00000000 		.4byte	.Ldebug_macro1
 7874 000c 03       		.byte	0x3
 7875 000d 00       		.uleb128 0
 7876 000e 01       		.uleb128 0x1
 7877              		.file 9 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\stdlib.h"
 7878 000f 03       		.byte	0x3
 7879 0010 43       		.uleb128 0x43
 7880 0011 09       		.uleb128 0x9
 7881 0012 05       		.byte	0x5
 7882 0013 08       		.uleb128 0x8
 7883 0014 9C720000 		.4byte	.LASF355
 7884              		.file 10 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\machine\\ieeefp.h"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 206


 7885 0018 03       		.byte	0x3
 7886 0019 0A       		.uleb128 0xa
 7887 001a 0A       		.uleb128 0xa
 7888 001b 05       		.byte	0x5
 7889 001c 3C       		.uleb128 0x3c
 7890 001d 015B0000 		.4byte	.LASF356
 7891 0021 04       		.byte	0x4
 7892              		.file 11 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\_ansi.h"
 7893 0022 03       		.byte	0x3
 7894 0023 0B       		.uleb128 0xb
 7895 0024 0B       		.uleb128 0xb
 7896 0025 05       		.byte	0x5
 7897 0026 0D       		.uleb128 0xd
 7898 0027 94520000 		.4byte	.LASF357
 7899              		.file 12 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\newlib.h"
 7900 002b 03       		.byte	0x3
 7901 002c 0F       		.uleb128 0xf
 7902 002d 0C       		.uleb128 0xc
 7903 002e 07       		.byte	0x7
 7904 002f 00000000 		.4byte	.Ldebug_macro2
 7905 0033 04       		.byte	0x4
 7906              		.file 13 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\config.h"
 7907 0034 03       		.byte	0x3
 7908 0035 10       		.uleb128 0x10
 7909 0036 0D       		.uleb128 0xd
 7910 0037 05       		.byte	0x5
 7911 0038 02       		.uleb128 0x2
 7912 0039 9D4D0000 		.4byte	.LASF372
 7913 003d 03       		.byte	0x3
 7914 003e 04       		.uleb128 0x4
 7915 003f 0A       		.uleb128 0xa
 7916 0040 04       		.byte	0x4
 7917              		.file 14 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\features.h"
 7918 0041 03       		.byte	0x3
 7919 0042 05       		.uleb128 0x5
 7920 0043 0E       		.uleb128 0xe
 7921 0044 07       		.byte	0x7
 7922 0045 00000000 		.4byte	.Ldebug_macro3
 7923 0049 04       		.byte	0x4
 7924 004a 07       		.byte	0x7
 7925 004b 00000000 		.4byte	.Ldebug_macro4
 7926 004f 04       		.byte	0x4
 7927 0050 07       		.byte	0x7
 7928 0051 00000000 		.4byte	.Ldebug_macro5
 7929 0055 04       		.byte	0x4
 7930 0056 07       		.byte	0x7
 7931 0057 00000000 		.4byte	.Ldebug_macro6
 7932 005b 03       		.byte	0x3
 7933 005c 10       		.uleb128 0x10
 7934 005d 03       		.uleb128 0x3
 7935 005e 07       		.byte	0x7
 7936 005f 00000000 		.4byte	.Ldebug_macro7
 7937 0063 04       		.byte	0x4
 7938              		.file 15 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\reent.h"
 7939 0064 03       		.byte	0x3
 7940 0065 12       		.uleb128 0x12
 7941 0066 0F       		.uleb128 0xf
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 207


 7942 0067 05       		.byte	0x5
 7943 0068 0B       		.uleb128 0xb
 7944 0069 79560000 		.4byte	.LASF451
 7945 006d 03       		.byte	0x3
 7946 006e 0D       		.uleb128 0xd
 7947 006f 0B       		.uleb128 0xb
 7948 0070 04       		.byte	0x4
 7949 0071 03       		.byte	0x3
 7950 0072 0E       		.uleb128 0xe
 7951 0073 03       		.uleb128 0x3
 7952 0074 07       		.byte	0x7
 7953 0075 00000000 		.4byte	.Ldebug_macro8
 7954 0079 04       		.byte	0x4
 7955              		.file 16 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\_types.h"
 7956 007a 03       		.byte	0x3
 7957 007b 0F       		.uleb128 0xf
 7958 007c 10       		.uleb128 0x10
 7959 007d 05       		.byte	0x5
 7960 007e 0A       		.uleb128 0xa
 7961 007f 46310000 		.4byte	.LASF465
 7962              		.file 17 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\machine\\_types.h"
 7963 0083 03       		.byte	0x3
 7964 0084 0C       		.uleb128 0xc
 7965 0085 11       		.uleb128 0x11
 7966 0086 05       		.byte	0x5
 7967 0087 06       		.uleb128 0x6
 7968 0088 CD5A0000 		.4byte	.LASF466
 7969 008c 03       		.byte	0x3
 7970 008d 07       		.uleb128 0x7
 7971 008e 04       		.uleb128 0x4
 7972 008f 07       		.byte	0x7
 7973 0090 00000000 		.4byte	.Ldebug_macro9
 7974 0094 04       		.byte	0x4
 7975 0095 04       		.byte	0x4
 7976              		.file 18 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\lock.h"
 7977 0096 03       		.byte	0x3
 7978 0097 0D       		.uleb128 0xd
 7979 0098 12       		.uleb128 0x12
 7980 0099 07       		.byte	0x7
 7981 009a 00000000 		.4byte	.Ldebug_macro10
 7982 009e 04       		.byte	0x4
 7983 009f 07       		.byte	0x7
 7984 00a0 00000000 		.4byte	.Ldebug_macro11
 7985 00a4 03       		.byte	0x3
 7986 00a5 43       		.uleb128 0x43
 7987 00a6 03       		.uleb128 0x3
 7988 00a7 07       		.byte	0x7
 7989 00a8 00000000 		.4byte	.Ldebug_macro12
 7990 00ac 04       		.byte	0x4
 7991 00ad 04       		.byte	0x4
 7992 00ae 07       		.byte	0x7
 7993 00af 00000000 		.4byte	.Ldebug_macro13
 7994 00b3 04       		.byte	0x4
 7995              		.file 19 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\cdefs.h"
 7996 00b4 03       		.byte	0x3
 7997 00b5 13       		.uleb128 0x13
 7998 00b6 13       		.uleb128 0x13
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 208


 7999 00b7 05       		.byte	0x5
 8000 00b8 29       		.uleb128 0x29
 8001 00b9 42840000 		.4byte	.LASF551
 8002 00bd 03       		.byte	0x3
 8003 00be 2D       		.uleb128 0x2d
 8004 00bf 03       		.uleb128 0x3
 8005 00c0 04       		.byte	0x4
 8006 00c1 07       		.byte	0x7
 8007 00c2 00000000 		.4byte	.Ldebug_macro14
 8008 00c6 04       		.byte	0x4
 8009              		.file 20 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\machine\\stdlib.h"
 8010 00c7 03       		.byte	0x3
 8011 00c8 14       		.uleb128 0x14
 8012 00c9 14       		.uleb128 0x14
 8013 00ca 05       		.byte	0x5
 8014 00cb 02       		.uleb128 0x2
 8015 00cc E2240000 		.4byte	.LASF651
 8016 00d0 04       		.byte	0x4
 8017              		.file 21 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\alloca.h"
 8018 00d1 03       		.byte	0x3
 8019 00d2 16       		.uleb128 0x16
 8020 00d3 15       		.uleb128 0x15
 8021 00d4 07       		.byte	0x7
 8022 00d5 00000000 		.4byte	.Ldebug_macro15
 8023 00d9 04       		.byte	0x4
 8024 00da 07       		.byte	0x7
 8025 00db 00000000 		.4byte	.Ldebug_macro16
 8026 00df 04       		.byte	0x4
 8027              		.file 22 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\string.h"
 8028 00e0 03       		.byte	0x3
 8029 00e1 44       		.uleb128 0x44
 8030 00e2 16       		.uleb128 0x16
 8031 00e3 07       		.byte	0x7
 8032 00e4 00000000 		.4byte	.Ldebug_macro17
 8033 00e8 03       		.byte	0x3
 8034 00e9 11       		.uleb128 0x11
 8035 00ea 03       		.uleb128 0x3
 8036 00eb 07       		.byte	0x7
 8037 00ec 00000000 		.4byte	.Ldebug_macro18
 8038 00f0 04       		.byte	0x4
 8039              		.file 23 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\string.h"
 8040 00f1 03       		.byte	0x3
 8041 00f2 A601     		.uleb128 0xa6
 8042 00f4 17       		.uleb128 0x17
 8043 00f5 04       		.byte	0x4
 8044 00f6 04       		.byte	0x4
 8045 00f7 05       		.byte	0x5
 8046 00f8 49       		.uleb128 0x49
 8047 00f9 FF7C0000 		.4byte	.LASF662
 8048              		.file 24 "FreeRTOS/include/FreeRTOS.h"
 8049 00fd 03       		.byte	0x3
 8050 00fe 4C       		.uleb128 0x4c
 8051 00ff 18       		.uleb128 0x18
 8052 0100 05       		.byte	0x5
 8053 0101 43       		.uleb128 0x43
 8054 0102 66610000 		.4byte	.LASF663
 8055 0106 03       		.byte	0x3
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 209


 8056 0107 48       		.uleb128 0x48
 8057 0108 03       		.uleb128 0x3
 8058 0109 04       		.byte	0x4
 8059              		.file 25 "c:\\gnu tools arm embedded\\4.9 2015q1\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stdint.
 8060 010a 03       		.byte	0x3
 8061 010b 57       		.uleb128 0x57
 8062 010c 19       		.uleb128 0x19
 8063 010d 03       		.byte	0x3
 8064 010e 09       		.uleb128 0x9
 8065 010f 05       		.uleb128 0x5
 8066 0110 05       		.byte	0x5
 8067 0111 0A       		.uleb128 0xa
 8068 0112 53900000 		.4byte	.LASF664
 8069              		.file 26 "c:\\gnu tools arm embedded\\4.9 2015q1\\arm-none-eabi\\include\\sys\\_intsup.h"
 8070 0116 03       		.byte	0x3
 8071 0117 0D       		.uleb128 0xd
 8072 0118 1A       		.uleb128 0x1a
 8073 0119 07       		.byte	0x7
 8074 011a 00000000 		.4byte	.Ldebug_macro19
 8075 011e 04       		.byte	0x4
 8076 011f 07       		.byte	0x7
 8077 0120 00000000 		.4byte	.Ldebug_macro20
 8078 0124 04       		.byte	0x4
 8079 0125 05       		.byte	0x5
 8080 0126 0D       		.uleb128 0xd
 8081 0127 C8060000 		.4byte	.LASF742
 8082 012b 04       		.byte	0x4
 8083              		.file 27 "config/FreeRTOSConfig.h"
 8084 012c 03       		.byte	0x3
 8085 012d 5E       		.uleb128 0x5e
 8086 012e 1B       		.uleb128 0x1b
 8087 012f 07       		.byte	0x7
 8088 0130 00000000 		.4byte	.Ldebug_macro21
 8089 0134 04       		.byte	0x4
 8090 0135 03       		.byte	0x3
 8091 0136 61       		.uleb128 0x61
 8092 0137 06       		.uleb128 0x6
 8093 0138 07       		.byte	0x7
 8094 0139 00000000 		.4byte	.Ldebug_macro22
 8095 013d 04       		.byte	0x4
 8096              		.file 28 "FreeRTOS/include/portable.h"
 8097 013e 03       		.byte	0x3
 8098 013f 64       		.uleb128 0x64
 8099 0140 1C       		.uleb128 0x1c
 8100 0141 05       		.byte	0x5
 8101 0142 47       		.uleb128 0x47
 8102 0143 80260000 		.4byte	.LASF796
 8103 0147 03       		.byte	0x3
 8104 0148 C401     		.uleb128 0xc4
 8105 014a 02       		.uleb128 0x2
 8106 014b 07       		.byte	0x7
 8107 014c 00000000 		.4byte	.Ldebug_macro23
 8108 0150 04       		.byte	0x4
 8109 0151 07       		.byte	0x7
 8110 0152 00000000 		.4byte	.Ldebug_macro24
 8111              		.file 29 "FreeRTOS/include/mpu_wrappers.h"
 8112 0156 03       		.byte	0x3
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 210


 8113 0157 E002     		.uleb128 0x160
 8114 0159 1D       		.uleb128 0x1d
 8115 015a 07       		.byte	0x7
 8116 015b 00000000 		.4byte	.Ldebug_macro25
 8117 015f 04       		.byte	0x4
 8118 0160 04       		.byte	0x4
 8119 0161 07       		.byte	0x7
 8120 0162 00000000 		.4byte	.Ldebug_macro26
 8121 0166 04       		.byte	0x4
 8122 0167 03       		.byte	0x3
 8123 0168 4D       		.uleb128 0x4d
 8124 0169 08       		.uleb128 0x8
 8125 016a 05       		.byte	0x5
 8126 016b 44       		.uleb128 0x44
 8127 016c 38530000 		.4byte	.LASF957
 8128 0170 03       		.byte	0x3
 8129 0171 4A       		.uleb128 0x4a
 8130 0172 07       		.uleb128 0x7
 8131 0173 07       		.byte	0x7
 8132 0174 00000000 		.4byte	.Ldebug_macro27
 8133 0178 04       		.byte	0x4
 8134 0179 07       		.byte	0x7
 8135 017a 00000000 		.4byte	.Ldebug_macro28
 8136 017e 04       		.byte	0x4
 8137              		.file 30 "FreeRTOS/include/timers.h"
 8138 017f 03       		.byte	0x3
 8139 0180 4E       		.uleb128 0x4e
 8140 0181 1E       		.uleb128 0x1e
 8141 0182 05       		.byte	0x5
 8142 0183 44       		.uleb128 0x44
 8143 0184 A20C0000 		.4byte	.LASF990
 8144 0188 03       		.byte	0x3
 8145 0189 4C       		.uleb128 0x4c
 8146 018a 08       		.uleb128 0x8
 8147 018b 04       		.byte	0x4
 8148 018c 07       		.byte	0x7
 8149 018d 00000000 		.4byte	.Ldebug_macro29
 8150 0191 04       		.byte	0x4
 8151              		.file 31 "FreeRTOS/include/StackMacros.h"
 8152 0192 03       		.byte	0x3
 8153 0193 4F       		.uleb128 0x4f
 8154 0194 1F       		.uleb128 0x1f
 8155 0195 07       		.byte	0x7
 8156 0196 00000000 		.4byte	.Ldebug_macro30
 8157 019a 04       		.byte	0x4
 8158 019b 06       		.byte	0x6
 8159 019c 55       		.uleb128 0x55
 8160 019d C66D0000 		.4byte	.LASF1016
 8161 01a1 05       		.byte	0x5
 8162 01a2 69       		.uleb128 0x69
 8163 01a3 E4310000 		.4byte	.LASF1017
 8164 01a7 05       		.byte	0x5
 8165 01a8 70       		.uleb128 0x70
 8166 01a9 8F840000 		.4byte	.LASF1018
 8167 01ad 05       		.byte	0x5
 8168 01ae FD01     		.uleb128 0xfd
 8169 01b0 980D0000 		.4byte	.LASF1019
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 211


 8170 01b4 05       		.byte	0x5
 8171 01b5 8202     		.uleb128 0x102
 8172 01b7 EB170000 		.4byte	.LASF1020
 8173 01bb 05       		.byte	0x5
 8174 01bc 8302     		.uleb128 0x103
 8175 01be A0320000 		.4byte	.LASF1021
 8176 01c2 05       		.byte	0x5
 8177 01c3 8402     		.uleb128 0x104
 8178 01c5 2D1A0000 		.4byte	.LASF1022
 8179 01c9 05       		.byte	0x5
 8180 01ca 8502     		.uleb128 0x105
 8181 01cc 4B050000 		.4byte	.LASF1023
 8182 01d0 05       		.byte	0x5
 8183 01d1 B802     		.uleb128 0x138
 8184 01d3 82390000 		.4byte	.LASF1024
 8185 01d7 05       		.byte	0x5
 8186 01d8 BC02     		.uleb128 0x13c
 8187 01da CE810000 		.4byte	.LASF1025
 8188 01de 05       		.byte	0x5
 8189 01df CB02     		.uleb128 0x14b
 8190 01e1 FC3E0000 		.4byte	.LASF1026
 8191 01e5 05       		.byte	0x5
 8192 01e6 D902     		.uleb128 0x159
 8193 01e8 602A0000 		.4byte	.LASF1027
 8194 01ec 05       		.byte	0x5
 8195 01ed ED02     		.uleb128 0x16d
 8196 01ef 8E8A0000 		.4byte	.LASF1028
 8197 01f3 05       		.byte	0x5
 8198 01f4 F902     		.uleb128 0x179
 8199 01f6 4D170000 		.4byte	.LASF1029
 8200 01fa 05       		.byte	0x5
 8201 01fb 8603     		.uleb128 0x186
 8202 01fd 44430000 		.4byte	.LASF1030
 8203 0201 04       		.byte	0x4
 8204 0202 00       		.byte	0
 8205              		.section	.debug_macro,"G",%progbits,wm4.0.1834ce015d70b8127b1e5f7bc96e3d8e,comdat
 8206              	.Ldebug_macro1:
 8207 0000 0400     		.2byte	0x4
 8208 0002 00       		.byte	0
 8209 0003 05       		.byte	0x5
 8210 0004 00       		.uleb128 0
 8211 0005 28830000 		.4byte	.LASF0
 8212 0009 05       		.byte	0x5
 8213 000a 00       		.uleb128 0
 8214 000b 76090000 		.4byte	.LASF1
 8215 000f 05       		.byte	0x5
 8216 0010 00       		.uleb128 0
 8217 0011 C53C0000 		.4byte	.LASF2
 8218 0015 05       		.byte	0x5
 8219 0016 00       		.uleb128 0
 8220 0017 26710000 		.4byte	.LASF3
 8221 001b 05       		.byte	0x5
 8222 001c 00       		.uleb128 0
 8223 001d 681D0000 		.4byte	.LASF4
 8224 0021 05       		.byte	0x5
 8225 0022 00       		.uleb128 0
 8226 0023 85930000 		.4byte	.LASF5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 212


 8227 0027 05       		.byte	0x5
 8228 0028 00       		.uleb128 0
 8229 0029 A07A0000 		.4byte	.LASF6
 8230 002d 05       		.byte	0x5
 8231 002e 00       		.uleb128 0
 8232 002f A6210000 		.4byte	.LASF7
 8233 0033 05       		.byte	0x5
 8234 0034 00       		.uleb128 0
 8235 0035 0E390000 		.4byte	.LASF8
 8236 0039 05       		.byte	0x5
 8237 003a 00       		.uleb128 0
 8238 003b DA420000 		.4byte	.LASF9
 8239 003f 05       		.byte	0x5
 8240 0040 00       		.uleb128 0
 8241 0041 72930000 		.4byte	.LASF10
 8242 0045 05       		.byte	0x5
 8243 0046 00       		.uleb128 0
 8244 0047 CD030000 		.4byte	.LASF11
 8245 004b 05       		.byte	0x5
 8246 004c 00       		.uleb128 0
 8247 004d 896A0000 		.4byte	.LASF12
 8248 0051 05       		.byte	0x5
 8249 0052 00       		.uleb128 0
 8250 0053 9F870000 		.4byte	.LASF13
 8251 0057 05       		.byte	0x5
 8252 0058 00       		.uleb128 0
 8253 0059 D6180000 		.4byte	.LASF14
 8254 005d 05       		.byte	0x5
 8255 005e 00       		.uleb128 0
 8256 005f 34050000 		.4byte	.LASF15
 8257 0063 05       		.byte	0x5
 8258 0064 00       		.uleb128 0
 8259 0065 AA230000 		.4byte	.LASF16
 8260 0069 05       		.byte	0x5
 8261 006a 00       		.uleb128 0
 8262 006b EA1F0000 		.4byte	.LASF17
 8263 006f 05       		.byte	0x5
 8264 0070 00       		.uleb128 0
 8265 0071 FB190000 		.4byte	.LASF18
 8266 0075 05       		.byte	0x5
 8267 0076 00       		.uleb128 0
 8268 0077 07260000 		.4byte	.LASF19
 8269 007b 05       		.byte	0x5
 8270 007c 00       		.uleb128 0
 8271 007d 4E760000 		.4byte	.LASF20
 8272 0081 05       		.byte	0x5
 8273 0082 00       		.uleb128 0
 8274 0083 2D4E0000 		.4byte	.LASF21
 8275 0087 05       		.byte	0x5
 8276 0088 00       		.uleb128 0
 8277 0089 745E0000 		.4byte	.LASF22
 8278 008d 05       		.byte	0x5
 8279 008e 00       		.uleb128 0
 8280 008f 31650000 		.4byte	.LASF23
 8281 0093 05       		.byte	0x5
 8282 0094 00       		.uleb128 0
 8283 0095 F30E0000 		.4byte	.LASF24
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 213


 8284 0099 05       		.byte	0x5
 8285 009a 00       		.uleb128 0
 8286 009b 7D060000 		.4byte	.LASF25
 8287 009f 05       		.byte	0x5
 8288 00a0 00       		.uleb128 0
 8289 00a1 11520000 		.4byte	.LASF26
 8290 00a5 05       		.byte	0x5
 8291 00a6 00       		.uleb128 0
 8292 00a7 5E590000 		.4byte	.LASF27
 8293 00ab 05       		.byte	0x5
 8294 00ac 00       		.uleb128 0
 8295 00ad 55160000 		.4byte	.LASF28
 8296 00b1 05       		.byte	0x5
 8297 00b2 00       		.uleb128 0
 8298 00b3 97060000 		.4byte	.LASF29
 8299 00b7 05       		.byte	0x5
 8300 00b8 00       		.uleb128 0
 8301 00b9 EA2E0000 		.4byte	.LASF30
 8302 00bd 05       		.byte	0x5
 8303 00be 00       		.uleb128 0
 8304 00bf 4E260000 		.4byte	.LASF31
 8305 00c3 05       		.byte	0x5
 8306 00c4 00       		.uleb128 0
 8307 00c5 210A0000 		.4byte	.LASF32
 8308 00c9 05       		.byte	0x5
 8309 00ca 00       		.uleb128 0
 8310 00cb 37710000 		.4byte	.LASF33
 8311 00cf 05       		.byte	0x5
 8312 00d0 00       		.uleb128 0
 8313 00d1 D86F0000 		.4byte	.LASF34
 8314 00d5 05       		.byte	0x5
 8315 00d6 00       		.uleb128 0
 8316 00d7 FB680000 		.4byte	.LASF35
 8317 00db 05       		.byte	0x5
 8318 00dc 00       		.uleb128 0
 8319 00dd 68180000 		.4byte	.LASF36
 8320 00e1 05       		.byte	0x5
 8321 00e2 00       		.uleb128 0
 8322 00e3 075A0000 		.4byte	.LASF37
 8323 00e7 05       		.byte	0x5
 8324 00e8 00       		.uleb128 0
 8325 00e9 F1060000 		.4byte	.LASF38
 8326 00ed 05       		.byte	0x5
 8327 00ee 00       		.uleb128 0
 8328 00ef 1C080000 		.4byte	.LASF39
 8329 00f3 05       		.byte	0x5
 8330 00f4 00       		.uleb128 0
 8331 00f5 D6930000 		.4byte	.LASF40
 8332 00f9 05       		.byte	0x5
 8333 00fa 00       		.uleb128 0
 8334 00fb FD4D0000 		.4byte	.LASF41
 8335 00ff 05       		.byte	0x5
 8336 0100 00       		.uleb128 0
 8337 0101 A92F0000 		.4byte	.LASF42
 8338 0105 05       		.byte	0x5
 8339 0106 00       		.uleb128 0
 8340 0107 EA3C0000 		.4byte	.LASF43
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 214


 8341 010b 05       		.byte	0x5
 8342 010c 00       		.uleb128 0
 8343 010d 94850000 		.4byte	.LASF44
 8344 0111 05       		.byte	0x5
 8345 0112 00       		.uleb128 0
 8346 0113 B01B0000 		.4byte	.LASF45
 8347 0117 05       		.byte	0x5
 8348 0118 00       		.uleb128 0
 8349 0119 6A160000 		.4byte	.LASF46
 8350 011d 05       		.byte	0x5
 8351 011e 00       		.uleb128 0
 8352 011f 4A8C0000 		.4byte	.LASF47
 8353 0123 05       		.byte	0x5
 8354 0124 00       		.uleb128 0
 8355 0125 7F630000 		.4byte	.LASF48
 8356 0129 05       		.byte	0x5
 8357 012a 00       		.uleb128 0
 8358 012b F7950000 		.4byte	.LASF49
 8359 012f 05       		.byte	0x5
 8360 0130 00       		.uleb128 0
 8361 0131 9A130000 		.4byte	.LASF50
 8362 0135 05       		.byte	0x5
 8363 0136 00       		.uleb128 0
 8364 0137 6B3E0000 		.4byte	.LASF51
 8365 013b 05       		.byte	0x5
 8366 013c 00       		.uleb128 0
 8367 013d 8E700000 		.4byte	.LASF52
 8368 0141 05       		.byte	0x5
 8369 0142 00       		.uleb128 0
 8370 0143 2D410000 		.4byte	.LASF53
 8371 0147 05       		.byte	0x5
 8372 0148 00       		.uleb128 0
 8373 0149 4F150000 		.4byte	.LASF54
 8374 014d 05       		.byte	0x5
 8375 014e 00       		.uleb128 0
 8376 014f 94670000 		.4byte	.LASF55
 8377 0153 05       		.byte	0x5
 8378 0154 00       		.uleb128 0
 8379 0155 414A0000 		.4byte	.LASF56
 8380 0159 05       		.byte	0x5
 8381 015a 00       		.uleb128 0
 8382 015b FF090000 		.4byte	.LASF57
 8383 015f 05       		.byte	0x5
 8384 0160 00       		.uleb128 0
 8385 0161 0E3E0000 		.4byte	.LASF58
 8386 0165 05       		.byte	0x5
 8387 0166 00       		.uleb128 0
 8388 0167 B5890000 		.4byte	.LASF59
 8389 016b 05       		.byte	0x5
 8390 016c 00       		.uleb128 0
 8391 016d AC1F0000 		.4byte	.LASF60
 8392 0171 05       		.byte	0x5
 8393 0172 00       		.uleb128 0
 8394 0173 59270000 		.4byte	.LASF61
 8395 0177 05       		.byte	0x5
 8396 0178 00       		.uleb128 0
 8397 0179 C8110000 		.4byte	.LASF62
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 215


 8398 017d 05       		.byte	0x5
 8399 017e 00       		.uleb128 0
 8400 017f 58750000 		.4byte	.LASF63
 8401 0183 05       		.byte	0x5
 8402 0184 00       		.uleb128 0
 8403 0185 4B3A0000 		.4byte	.LASF64
 8404 0189 05       		.byte	0x5
 8405 018a 00       		.uleb128 0
 8406 018b 922D0000 		.4byte	.LASF65
 8407 018f 05       		.byte	0x5
 8408 0190 00       		.uleb128 0
 8409 0191 37270000 		.4byte	.LASF66
 8410 0195 05       		.byte	0x5
 8411 0196 00       		.uleb128 0
 8412 0197 3D100000 		.4byte	.LASF67
 8413 019b 05       		.byte	0x5
 8414 019c 00       		.uleb128 0
 8415 019d 287E0000 		.4byte	.LASF68
 8416 01a1 05       		.byte	0x5
 8417 01a2 00       		.uleb128 0
 8418 01a3 DE400000 		.4byte	.LASF69
 8419 01a7 05       		.byte	0x5
 8420 01a8 00       		.uleb128 0
 8421 01a9 7C800000 		.4byte	.LASF70
 8422 01ad 05       		.byte	0x5
 8423 01ae 00       		.uleb128 0
 8424 01af 66010000 		.4byte	.LASF71
 8425 01b3 05       		.byte	0x5
 8426 01b4 00       		.uleb128 0
 8427 01b5 EF140000 		.4byte	.LASF72
 8428 01b9 05       		.byte	0x5
 8429 01ba 00       		.uleb128 0
 8430 01bb 29480000 		.4byte	.LASF73
 8431 01bf 05       		.byte	0x5
 8432 01c0 00       		.uleb128 0
 8433 01c1 326D0000 		.4byte	.LASF74
 8434 01c5 05       		.byte	0x5
 8435 01c6 00       		.uleb128 0
 8436 01c7 6B8B0000 		.4byte	.LASF75
 8437 01cb 05       		.byte	0x5
 8438 01cc 00       		.uleb128 0
 8439 01cd 01750000 		.4byte	.LASF76
 8440 01d1 05       		.byte	0x5
 8441 01d2 00       		.uleb128 0
 8442 01d3 0A6E0000 		.4byte	.LASF77
 8443 01d7 05       		.byte	0x5
 8444 01d8 00       		.uleb128 0
 8445 01d9 4C110000 		.4byte	.LASF78
 8446 01dd 05       		.byte	0x5
 8447 01de 00       		.uleb128 0
 8448 01df 8E010000 		.4byte	.LASF79
 8449 01e3 05       		.byte	0x5
 8450 01e4 00       		.uleb128 0
 8451 01e5 B06F0000 		.4byte	.LASF80
 8452 01e9 05       		.byte	0x5
 8453 01ea 00       		.uleb128 0
 8454 01eb C9150000 		.4byte	.LASF81
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 216


 8455 01ef 05       		.byte	0x5
 8456 01f0 00       		.uleb128 0
 8457 01f1 36890000 		.4byte	.LASF82
 8458 01f5 05       		.byte	0x5
 8459 01f6 00       		.uleb128 0
 8460 01f7 45330000 		.4byte	.LASF83
 8461 01fb 05       		.byte	0x5
 8462 01fc 00       		.uleb128 0
 8463 01fd BE170000 		.4byte	.LASF84
 8464 0201 05       		.byte	0x5
 8465 0202 00       		.uleb128 0
 8466 0203 DB100000 		.4byte	.LASF85
 8467 0207 05       		.byte	0x5
 8468 0208 00       		.uleb128 0
 8469 0209 BD610000 		.4byte	.LASF86
 8470 020d 05       		.byte	0x5
 8471 020e 00       		.uleb128 0
 8472 020f 1B2E0000 		.4byte	.LASF87
 8473 0213 05       		.byte	0x5
 8474 0214 00       		.uleb128 0
 8475 0215 01400000 		.4byte	.LASF88
 8476 0219 05       		.byte	0x5
 8477 021a 00       		.uleb128 0
 8478 021b 0C230000 		.4byte	.LASF89
 8479 021f 05       		.byte	0x5
 8480 0220 00       		.uleb128 0
 8481 0221 3A480000 		.4byte	.LASF90
 8482 0225 05       		.byte	0x5
 8483 0226 00       		.uleb128 0
 8484 0227 6E0B0000 		.4byte	.LASF91
 8485 022b 05       		.byte	0x5
 8486 022c 00       		.uleb128 0
 8487 022d 9D5C0000 		.4byte	.LASF92
 8488 0231 05       		.byte	0x5
 8489 0232 00       		.uleb128 0
 8490 0233 D4600000 		.4byte	.LASF93
 8491 0237 05       		.byte	0x5
 8492 0238 00       		.uleb128 0
 8493 0239 0D2D0000 		.4byte	.LASF94
 8494 023d 05       		.byte	0x5
 8495 023e 00       		.uleb128 0
 8496 023f A6910000 		.4byte	.LASF95
 8497 0243 05       		.byte	0x5
 8498 0244 00       		.uleb128 0
 8499 0245 C0760000 		.4byte	.LASF96
 8500 0249 05       		.byte	0x5
 8501 024a 00       		.uleb128 0
 8502 024b CF0E0000 		.4byte	.LASF97
 8503 024f 05       		.byte	0x5
 8504 0250 00       		.uleb128 0
 8505 0251 566D0000 		.4byte	.LASF98
 8506 0255 05       		.byte	0x5
 8507 0256 00       		.uleb128 0
 8508 0257 AB760000 		.4byte	.LASF99
 8509 025b 05       		.byte	0x5
 8510 025c 00       		.uleb128 0
 8511 025d 33950000 		.4byte	.LASF100
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 217


 8512 0261 05       		.byte	0x5
 8513 0262 00       		.uleb128 0
 8514 0263 0D080000 		.4byte	.LASF101
 8515 0267 05       		.byte	0x5
 8516 0268 00       		.uleb128 0
 8517 0269 6A690000 		.4byte	.LASF102
 8518 026d 05       		.byte	0x5
 8519 026e 00       		.uleb128 0
 8520 026f A8790000 		.4byte	.LASF103
 8521 0273 05       		.byte	0x5
 8522 0274 00       		.uleb128 0
 8523 0275 CF490000 		.4byte	.LASF104
 8524 0279 05       		.byte	0x5
 8525 027a 00       		.uleb128 0
 8526 027b EB2D0000 		.4byte	.LASF105
 8527 027f 05       		.byte	0x5
 8528 0280 00       		.uleb128 0
 8529 0281 D95F0000 		.4byte	.LASF106
 8530 0285 05       		.byte	0x5
 8531 0286 00       		.uleb128 0
 8532 0287 02630000 		.4byte	.LASF107
 8533 028b 05       		.byte	0x5
 8534 028c 00       		.uleb128 0
 8535 028d 34600000 		.4byte	.LASF108
 8536 0291 05       		.byte	0x5
 8537 0292 00       		.uleb128 0
 8538 0293 BA160000 		.4byte	.LASF109
 8539 0297 05       		.byte	0x5
 8540 0298 00       		.uleb128 0
 8541 0299 84000000 		.4byte	.LASF110
 8542 029d 05       		.byte	0x5
 8543 029e 00       		.uleb128 0
 8544 029f 9A360000 		.4byte	.LASF111
 8545 02a3 05       		.byte	0x5
 8546 02a4 00       		.uleb128 0
 8547 02a5 72220000 		.4byte	.LASF112
 8548 02a9 05       		.byte	0x5
 8549 02aa 00       		.uleb128 0
 8550 02ab 14050000 		.4byte	.LASF113
 8551 02af 05       		.byte	0x5
 8552 02b0 00       		.uleb128 0
 8553 02b1 13950000 		.4byte	.LASF114
 8554 02b5 05       		.byte	0x5
 8555 02b6 00       		.uleb128 0
 8556 02b7 15140000 		.4byte	.LASF115
 8557 02bb 05       		.byte	0x5
 8558 02bc 00       		.uleb128 0
 8559 02bd 346F0000 		.4byte	.LASF116
 8560 02c1 05       		.byte	0x5
 8561 02c2 00       		.uleb128 0
 8562 02c3 C2550000 		.4byte	.LASF117
 8563 02c7 05       		.byte	0x5
 8564 02c8 00       		.uleb128 0
 8565 02c9 9A200000 		.4byte	.LASF118
 8566 02cd 05       		.byte	0x5
 8567 02ce 00       		.uleb128 0
 8568 02cf B4800000 		.4byte	.LASF119
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 218


 8569 02d3 05       		.byte	0x5
 8570 02d4 00       		.uleb128 0
 8571 02d5 88560000 		.4byte	.LASF120
 8572 02d9 05       		.byte	0x5
 8573 02da 00       		.uleb128 0
 8574 02db 06550000 		.4byte	.LASF121
 8575 02df 05       		.byte	0x5
 8576 02e0 00       		.uleb128 0
 8577 02e1 2E490000 		.4byte	.LASF122
 8578 02e5 05       		.byte	0x5
 8579 02e6 00       		.uleb128 0
 8580 02e7 09430000 		.4byte	.LASF123
 8581 02eb 05       		.byte	0x5
 8582 02ec 00       		.uleb128 0
 8583 02ed DE550000 		.4byte	.LASF124
 8584 02f1 05       		.byte	0x5
 8585 02f2 00       		.uleb128 0
 8586 02f3 EF540000 		.4byte	.LASF125
 8587 02f7 05       		.byte	0x5
 8588 02f8 00       		.uleb128 0
 8589 02f9 BB650000 		.4byte	.LASF126
 8590 02fd 05       		.byte	0x5
 8591 02fe 00       		.uleb128 0
 8592 02ff C2180000 		.4byte	.LASF127
 8593 0303 05       		.byte	0x5
 8594 0304 00       		.uleb128 0
 8595 0305 2F200000 		.4byte	.LASF128
 8596 0309 05       		.byte	0x5
 8597 030a 00       		.uleb128 0
 8598 030b 3C1B0000 		.4byte	.LASF129
 8599 030f 05       		.byte	0x5
 8600 0310 00       		.uleb128 0
 8601 0311 46470000 		.4byte	.LASF130
 8602 0315 05       		.byte	0x5
 8603 0316 00       		.uleb128 0
 8604 0317 6E240000 		.4byte	.LASF131
 8605 031b 05       		.byte	0x5
 8606 031c 00       		.uleb128 0
 8607 031d 4F2E0000 		.4byte	.LASF132
 8608 0321 05       		.byte	0x5
 8609 0322 00       		.uleb128 0
 8610 0323 BC2C0000 		.4byte	.LASF133
 8611 0327 05       		.byte	0x5
 8612 0328 00       		.uleb128 0
 8613 0329 DC060000 		.4byte	.LASF134
 8614 032d 05       		.byte	0x5
 8615 032e 00       		.uleb128 0
 8616 032f 6A7A0000 		.4byte	.LASF135
 8617 0333 05       		.byte	0x5
 8618 0334 00       		.uleb128 0
 8619 0335 5E000000 		.4byte	.LASF136
 8620 0339 05       		.byte	0x5
 8621 033a 00       		.uleb128 0
 8622 033b B0950000 		.4byte	.LASF137
 8623 033f 05       		.byte	0x5
 8624 0340 00       		.uleb128 0
 8625 0341 D0750000 		.4byte	.LASF138
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 219


 8626 0345 05       		.byte	0x5
 8627 0346 00       		.uleb128 0
 8628 0347 2E610000 		.4byte	.LASF139
 8629 034b 05       		.byte	0x5
 8630 034c 00       		.uleb128 0
 8631 034d AA200000 		.4byte	.LASF140
 8632 0351 05       		.byte	0x5
 8633 0352 00       		.uleb128 0
 8634 0353 5D220000 		.4byte	.LASF141
 8635 0357 05       		.byte	0x5
 8636 0358 00       		.uleb128 0
 8637 0359 65050000 		.4byte	.LASF142
 8638 035d 05       		.byte	0x5
 8639 035e 00       		.uleb128 0
 8640 035f 4C7E0000 		.4byte	.LASF143
 8641 0363 05       		.byte	0x5
 8642 0364 00       		.uleb128 0
 8643 0365 C88C0000 		.4byte	.LASF144
 8644 0369 05       		.byte	0x5
 8645 036a 00       		.uleb128 0
 8646 036b 73140000 		.4byte	.LASF145
 8647 036f 05       		.byte	0x5
 8648 0370 00       		.uleb128 0
 8649 0371 D03A0000 		.4byte	.LASF146
 8650 0375 05       		.byte	0x5
 8651 0376 00       		.uleb128 0
 8652 0377 2D540000 		.4byte	.LASF147
 8653 037b 05       		.byte	0x5
 8654 037c 00       		.uleb128 0
 8655 037d EF340000 		.4byte	.LASF148
 8656 0381 05       		.byte	0x5
 8657 0382 00       		.uleb128 0
 8658 0383 C58F0000 		.4byte	.LASF149
 8659 0387 05       		.byte	0x5
 8660 0388 00       		.uleb128 0
 8661 0389 A8720000 		.4byte	.LASF150
 8662 038d 05       		.byte	0x5
 8663 038e 00       		.uleb128 0
 8664 038f D8070000 		.4byte	.LASF151
 8665 0393 05       		.byte	0x5
 8666 0394 00       		.uleb128 0
 8667 0395 2F8A0000 		.4byte	.LASF152
 8668 0399 05       		.byte	0x5
 8669 039a 00       		.uleb128 0
 8670 039b 25180000 		.4byte	.LASF153
 8671 039f 05       		.byte	0x5
 8672 03a0 00       		.uleb128 0
 8673 03a1 C23B0000 		.4byte	.LASF154
 8674 03a5 05       		.byte	0x5
 8675 03a6 00       		.uleb128 0
 8676 03a7 F6220000 		.4byte	.LASF155
 8677 03ab 05       		.byte	0x5
 8678 03ac 00       		.uleb128 0
 8679 03ad 70530000 		.4byte	.LASF156
 8680 03b1 05       		.byte	0x5
 8681 03b2 00       		.uleb128 0
 8682 03b3 20000000 		.4byte	.LASF157
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 220


 8683 03b7 05       		.byte	0x5
 8684 03b8 00       		.uleb128 0
 8685 03b9 E72C0000 		.4byte	.LASF158
 8686 03bd 05       		.byte	0x5
 8687 03be 00       		.uleb128 0
 8688 03bf 06780000 		.4byte	.LASF159
 8689 03c3 05       		.byte	0x5
 8690 03c4 00       		.uleb128 0
 8691 03c5 A2410000 		.4byte	.LASF160
 8692 03c9 05       		.byte	0x5
 8693 03ca 00       		.uleb128 0
 8694 03cb C1440000 		.4byte	.LASF161
 8695 03cf 05       		.byte	0x5
 8696 03d0 00       		.uleb128 0
 8697 03d1 96620000 		.4byte	.LASF162
 8698 03d5 05       		.byte	0x5
 8699 03d6 00       		.uleb128 0
 8700 03d7 10320000 		.4byte	.LASF163
 8701 03db 05       		.byte	0x5
 8702 03dc 00       		.uleb128 0
 8703 03dd E3120000 		.4byte	.LASF164
 8704 03e1 05       		.byte	0x5
 8705 03e2 00       		.uleb128 0
 8706 03e3 8A180000 		.4byte	.LASF165
 8707 03e7 05       		.byte	0x5
 8708 03e8 00       		.uleb128 0
 8709 03e9 03840000 		.4byte	.LASF166
 8710 03ed 05       		.byte	0x5
 8711 03ee 00       		.uleb128 0
 8712 03ef 823D0000 		.4byte	.LASF167
 8713 03f3 05       		.byte	0x5
 8714 03f4 00       		.uleb128 0
 8715 03f5 97810000 		.4byte	.LASF168
 8716 03f9 05       		.byte	0x5
 8717 03fa 00       		.uleb128 0
 8718 03fb 3B320000 		.4byte	.LASF169
 8719 03ff 05       		.byte	0x5
 8720 0400 00       		.uleb128 0
 8721 0401 4F100000 		.4byte	.LASF170
 8722 0405 05       		.byte	0x5
 8723 0406 00       		.uleb128 0
 8724 0407 33030000 		.4byte	.LASF171
 8725 040b 05       		.byte	0x5
 8726 040c 00       		.uleb128 0
 8727 040d 8E650000 		.4byte	.LASF172
 8728 0411 05       		.byte	0x5
 8729 0412 00       		.uleb128 0
 8730 0413 D3570000 		.4byte	.LASF173
 8731 0417 05       		.byte	0x5
 8732 0418 00       		.uleb128 0
 8733 0419 B2060000 		.4byte	.LASF174
 8734 041d 05       		.byte	0x5
 8735 041e 00       		.uleb128 0
 8736 041f 33620000 		.4byte	.LASF175
 8737 0423 05       		.byte	0x5
 8738 0424 00       		.uleb128 0
 8739 0425 9B1A0000 		.4byte	.LASF176
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 221


 8740 0429 05       		.byte	0x5
 8741 042a 00       		.uleb128 0
 8742 042b 8C8B0000 		.4byte	.LASF177
 8743 042f 05       		.byte	0x5
 8744 0430 00       		.uleb128 0
 8745 0431 27360000 		.4byte	.LASF178
 8746 0435 05       		.byte	0x5
 8747 0436 00       		.uleb128 0
 8748 0437 6B5A0000 		.4byte	.LASF179
 8749 043b 05       		.byte	0x5
 8750 043c 00       		.uleb128 0
 8751 043d 09150000 		.4byte	.LASF180
 8752 0441 05       		.byte	0x5
 8753 0442 00       		.uleb128 0
 8754 0443 17740000 		.4byte	.LASF181
 8755 0447 05       		.byte	0x5
 8756 0448 00       		.uleb128 0
 8757 0449 92760000 		.4byte	.LASF182
 8758 044d 05       		.byte	0x5
 8759 044e 00       		.uleb128 0
 8760 044f 3F020000 		.4byte	.LASF183
 8761 0453 05       		.byte	0x5
 8762 0454 00       		.uleb128 0
 8763 0455 5A410000 		.4byte	.LASF184
 8764 0459 05       		.byte	0x5
 8765 045a 00       		.uleb128 0
 8766 045b 8B750000 		.4byte	.LASF185
 8767 045f 05       		.byte	0x5
 8768 0460 00       		.uleb128 0
 8769 0461 4B010000 		.4byte	.LASF186
 8770 0465 05       		.byte	0x5
 8771 0466 00       		.uleb128 0
 8772 0467 9F8F0000 		.4byte	.LASF187
 8773 046b 05       		.byte	0x5
 8774 046c 00       		.uleb128 0
 8775 046d C5710000 		.4byte	.LASF188
 8776 0471 05       		.byte	0x5
 8777 0472 00       		.uleb128 0
 8778 0473 CA900000 		.4byte	.LASF189
 8779 0477 05       		.byte	0x5
 8780 0478 00       		.uleb128 0
 8781 0479 940E0000 		.4byte	.LASF190
 8782 047d 05       		.byte	0x5
 8783 047e 00       		.uleb128 0
 8784 047f 404B0000 		.4byte	.LASF191
 8785 0483 05       		.byte	0x5
 8786 0484 00       		.uleb128 0
 8787 0485 F3280000 		.4byte	.LASF192
 8788 0489 05       		.byte	0x5
 8789 048a 00       		.uleb128 0
 8790 048b 29290000 		.4byte	.LASF193
 8791 048f 05       		.byte	0x5
 8792 0490 00       		.uleb128 0
 8793 0491 75710000 		.4byte	.LASF194
 8794 0495 05       		.byte	0x5
 8795 0496 00       		.uleb128 0
 8796 0497 58360000 		.4byte	.LASF195
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 222


 8797 049b 05       		.byte	0x5
 8798 049c 00       		.uleb128 0
 8799 049d FE1C0000 		.4byte	.LASF196
 8800 04a1 05       		.byte	0x5
 8801 04a2 00       		.uleb128 0
 8802 04a3 B1640000 		.4byte	.LASF197
 8803 04a7 05       		.byte	0x5
 8804 04a8 00       		.uleb128 0
 8805 04a9 BB050000 		.4byte	.LASF198
 8806 04ad 05       		.byte	0x5
 8807 04ae 00       		.uleb128 0
 8808 04af 80200000 		.4byte	.LASF199
 8809 04b3 05       		.byte	0x5
 8810 04b4 00       		.uleb128 0
 8811 04b5 433E0000 		.4byte	.LASF200
 8812 04b9 05       		.byte	0x5
 8813 04ba 00       		.uleb128 0
 8814 04bb 25530000 		.4byte	.LASF201
 8815 04bf 05       		.byte	0x5
 8816 04c0 00       		.uleb128 0
 8817 04c1 A1600000 		.4byte	.LASF202
 8818 04c5 05       		.byte	0x5
 8819 04c6 00       		.uleb128 0
 8820 04c7 B4120000 		.4byte	.LASF203
 8821 04cb 05       		.byte	0x5
 8822 04cc 00       		.uleb128 0
 8823 04cd 8E4F0000 		.4byte	.LASF204
 8824 04d1 05       		.byte	0x5
 8825 04d2 00       		.uleb128 0
 8826 04d3 0C480000 		.4byte	.LASF205
 8827 04d7 05       		.byte	0x5
 8828 04d8 00       		.uleb128 0
 8829 04d9 1A4E0000 		.4byte	.LASF206
 8830 04dd 05       		.byte	0x5
 8831 04de 00       		.uleb128 0
 8832 04df E2600000 		.4byte	.LASF207
 8833 04e3 05       		.byte	0x5
 8834 04e4 00       		.uleb128 0
 8835 04e5 0C3B0000 		.4byte	.LASF208
 8836 04e9 05       		.byte	0x5
 8837 04ea 00       		.uleb128 0
 8838 04eb 87580000 		.4byte	.LASF209
 8839 04ef 05       		.byte	0x5
 8840 04f0 00       		.uleb128 0
 8841 04f1 C55B0000 		.4byte	.LASF210
 8842 04f5 05       		.byte	0x5
 8843 04f6 00       		.uleb128 0
 8844 04f7 840D0000 		.4byte	.LASF211
 8845 04fb 05       		.byte	0x5
 8846 04fc 00       		.uleb128 0
 8847 04fd CA950000 		.4byte	.LASF212
 8848 0501 05       		.byte	0x5
 8849 0502 00       		.uleb128 0
 8850 0503 E36B0000 		.4byte	.LASF213
 8851 0507 05       		.byte	0x5
 8852 0508 00       		.uleb128 0
 8853 0509 0D680000 		.4byte	.LASF214
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 223


 8854 050d 05       		.byte	0x5
 8855 050e 00       		.uleb128 0
 8856 050f DF750000 		.4byte	.LASF215
 8857 0513 05       		.byte	0x5
 8858 0514 00       		.uleb128 0
 8859 0515 038D0000 		.4byte	.LASF216
 8860 0519 05       		.byte	0x5
 8861 051a 00       		.uleb128 0
 8862 051b 7E880000 		.4byte	.LASF217
 8863 051f 05       		.byte	0x5
 8864 0520 00       		.uleb128 0
 8865 0521 7E370000 		.4byte	.LASF218
 8866 0525 05       		.byte	0x5
 8867 0526 00       		.uleb128 0
 8868 0527 ED730000 		.4byte	.LASF219
 8869 052b 05       		.byte	0x5
 8870 052c 00       		.uleb128 0
 8871 052d 83900000 		.4byte	.LASF220
 8872 0531 05       		.byte	0x5
 8873 0532 00       		.uleb128 0
 8874 0533 88090000 		.4byte	.LASF221
 8875 0537 05       		.byte	0x5
 8876 0538 00       		.uleb128 0
 8877 0539 D1450000 		.4byte	.LASF222
 8878 053d 05       		.byte	0x5
 8879 053e 00       		.uleb128 0
 8880 053f AA860000 		.4byte	.LASF223
 8881 0543 05       		.byte	0x5
 8882 0544 00       		.uleb128 0
 8883 0545 21170000 		.4byte	.LASF224
 8884 0549 05       		.byte	0x5
 8885 054a 00       		.uleb128 0
 8886 054b AD810000 		.4byte	.LASF225
 8887 054f 05       		.byte	0x5
 8888 0550 00       		.uleb128 0
 8889 0551 1A960000 		.4byte	.LASF226
 8890 0555 05       		.byte	0x5
 8891 0556 00       		.uleb128 0
 8892 0557 FD1F0000 		.4byte	.LASF227
 8893 055b 05       		.byte	0x5
 8894 055c 00       		.uleb128 0
 8895 055d EB670000 		.4byte	.LASF228
 8896 0561 05       		.byte	0x5
 8897 0562 00       		.uleb128 0
 8898 0563 1C750000 		.4byte	.LASF229
 8899 0567 05       		.byte	0x5
 8900 0568 00       		.uleb128 0
 8901 0569 DB880000 		.4byte	.LASF230
 8902 056d 05       		.byte	0x5
 8903 056e 00       		.uleb128 0
 8904 056f EC300000 		.4byte	.LASF231
 8905 0573 05       		.byte	0x5
 8906 0574 00       		.uleb128 0
 8907 0575 4A550000 		.4byte	.LASF232
 8908 0579 05       		.byte	0x5
 8909 057a 00       		.uleb128 0
 8910 057b 8C5E0000 		.4byte	.LASF233
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 224


 8911 057f 05       		.byte	0x5
 8912 0580 00       		.uleb128 0
 8913 0581 16060000 		.4byte	.LASF234
 8914 0585 05       		.byte	0x5
 8915 0586 00       		.uleb128 0
 8916 0587 AB150000 		.4byte	.LASF235
 8917 058b 05       		.byte	0x5
 8918 058c 00       		.uleb128 0
 8919 058d D3130000 		.4byte	.LASF236
 8920 0591 05       		.byte	0x5
 8921 0592 00       		.uleb128 0
 8922 0593 4D780000 		.4byte	.LASF237
 8923 0597 05       		.byte	0x5
 8924 0598 00       		.uleb128 0
 8925 0599 0D040000 		.4byte	.LASF238
 8926 059d 05       		.byte	0x5
 8927 059e 00       		.uleb128 0
 8928 059f 7B3B0000 		.4byte	.LASF239
 8929 05a3 05       		.byte	0x5
 8930 05a4 00       		.uleb128 0
 8931 05a5 F5890000 		.4byte	.LASF240
 8932 05a9 05       		.byte	0x5
 8933 05aa 00       		.uleb128 0
 8934 05ab 82470000 		.4byte	.LASF241
 8935 05af 05       		.byte	0x5
 8936 05b0 00       		.uleb128 0
 8937 05b1 F3130000 		.4byte	.LASF242
 8938 05b5 05       		.byte	0x5
 8939 05b6 00       		.uleb128 0
 8940 05b7 72330000 		.4byte	.LASF243
 8941 05bb 05       		.byte	0x5
 8942 05bc 00       		.uleb128 0
 8943 05bd EC570000 		.4byte	.LASF244
 8944 05c1 05       		.byte	0x5
 8945 05c2 00       		.uleb128 0
 8946 05c3 EC550000 		.4byte	.LASF245
 8947 05c7 05       		.byte	0x5
 8948 05c8 00       		.uleb128 0
 8949 05c9 570E0000 		.4byte	.LASF246
 8950 05cd 05       		.byte	0x5
 8951 05ce 00       		.uleb128 0
 8952 05cf A1100000 		.4byte	.LASF247
 8953 05d3 05       		.byte	0x5
 8954 05d4 00       		.uleb128 0
 8955 05d5 61830000 		.4byte	.LASF248
 8956 05d9 05       		.byte	0x5
 8957 05da 00       		.uleb128 0
 8958 05db D3680000 		.4byte	.LASF249
 8959 05df 05       		.byte	0x5
 8960 05e0 00       		.uleb128 0
 8961 05e1 0A020000 		.4byte	.LASF250
 8962 05e5 05       		.byte	0x5
 8963 05e6 00       		.uleb128 0
 8964 05e7 E0030000 		.4byte	.LASF251
 8965 05eb 05       		.byte	0x5
 8966 05ec 00       		.uleb128 0
 8967 05ed D4650000 		.4byte	.LASF252
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 225


 8968 05f1 05       		.byte	0x5
 8969 05f2 00       		.uleb128 0
 8970 05f3 8B480000 		.4byte	.LASF253
 8971 05f7 05       		.byte	0x5
 8972 05f8 00       		.uleb128 0
 8973 05f9 866B0000 		.4byte	.LASF254
 8974 05fd 05       		.byte	0x5
 8975 05fe 00       		.uleb128 0
 8976 05ff 108A0000 		.4byte	.LASF255
 8977 0603 05       		.byte	0x5
 8978 0604 00       		.uleb128 0
 8979 0605 E91E0000 		.4byte	.LASF256
 8980 0609 05       		.byte	0x5
 8981 060a 00       		.uleb128 0
 8982 060b 2F3E0000 		.4byte	.LASF257
 8983 060f 05       		.byte	0x5
 8984 0610 00       		.uleb128 0
 8985 0611 E3010000 		.4byte	.LASF258
 8986 0615 05       		.byte	0x5
 8987 0616 00       		.uleb128 0
 8988 0617 DE360000 		.4byte	.LASF259
 8989 061b 05       		.byte	0x5
 8990 061c 00       		.uleb128 0
 8991 061d 271D0000 		.4byte	.LASF260
 8992 0621 05       		.byte	0x5
 8993 0622 00       		.uleb128 0
 8994 0623 BD230000 		.4byte	.LASF261
 8995 0627 05       		.byte	0x5
 8996 0628 00       		.uleb128 0
 8997 0629 50810000 		.4byte	.LASF262
 8998 062d 05       		.byte	0x5
 8999 062e 00       		.uleb128 0
 9000 062f 1B840000 		.4byte	.LASF263
 9001 0633 05       		.byte	0x5
 9002 0634 00       		.uleb128 0
 9003 0635 D6050000 		.4byte	.LASF264
 9004 0639 05       		.byte	0x5
 9005 063a 00       		.uleb128 0
 9006 063b 31660000 		.4byte	.LASF265
 9007 063f 05       		.byte	0x5
 9008 0640 00       		.uleb128 0
 9009 0641 CC800000 		.4byte	.LASF266
 9010 0645 05       		.byte	0x5
 9011 0646 00       		.uleb128 0
 9012 0647 266F0000 		.4byte	.LASF267
 9013 064b 05       		.byte	0x5
 9014 064c 00       		.uleb128 0
 9015 064d 658E0000 		.4byte	.LASF268
 9016 0651 05       		.byte	0x5
 9017 0652 00       		.uleb128 0
 9018 0653 C6300000 		.4byte	.LASF269
 9019 0657 05       		.byte	0x5
 9020 0658 00       		.uleb128 0
 9021 0659 200F0000 		.4byte	.LASF270
 9022 065d 05       		.byte	0x5
 9023 065e 00       		.uleb128 0
 9024 065f 6F060000 		.4byte	.LASF271
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 226


 9025 0663 05       		.byte	0x5
 9026 0664 00       		.uleb128 0
 9027 0665 63660000 		.4byte	.LASF272
 9028 0669 05       		.byte	0x5
 9029 066a 00       		.uleb128 0
 9030 066b FA6B0000 		.4byte	.LASF273
 9031 066f 05       		.byte	0x5
 9032 0670 00       		.uleb128 0
 9033 0671 AD220000 		.4byte	.LASF274
 9034 0675 05       		.byte	0x5
 9035 0676 00       		.uleb128 0
 9036 0677 5A030000 		.4byte	.LASF275
 9037 067b 05       		.byte	0x5
 9038 067c 00       		.uleb128 0
 9039 067d 7A570000 		.4byte	.LASF276
 9040 0681 05       		.byte	0x5
 9041 0682 00       		.uleb128 0
 9042 0683 56480000 		.4byte	.LASF277
 9043 0687 05       		.byte	0x5
 9044 0688 00       		.uleb128 0
 9045 0689 8B0F0000 		.4byte	.LASF278
 9046 068d 05       		.byte	0x5
 9047 068e 00       		.uleb128 0
 9048 068f 88660000 		.4byte	.LASF279
 9049 0693 05       		.byte	0x5
 9050 0694 00       		.uleb128 0
 9051 0695 E30E0000 		.4byte	.LASF280
 9052 0699 05       		.byte	0x5
 9053 069a 00       		.uleb128 0
 9054 069b 2F700000 		.4byte	.LASF281
 9055 069f 05       		.byte	0x5
 9056 06a0 00       		.uleb128 0
 9057 06a1 44530000 		.4byte	.LASF282
 9058 06a5 05       		.byte	0x5
 9059 06a6 00       		.uleb128 0
 9060 06a7 35430000 		.4byte	.LASF283
 9061 06ab 05       		.byte	0x5
 9062 06ac 00       		.uleb128 0
 9063 06ad 85690000 		.4byte	.LASF284
 9064 06b1 05       		.byte	0x5
 9065 06b2 00       		.uleb128 0
 9066 06b3 396E0000 		.4byte	.LASF285
 9067 06b7 05       		.byte	0x5
 9068 06b8 00       		.uleb128 0
 9069 06b9 EE270000 		.4byte	.LASF286
 9070 06bd 05       		.byte	0x5
 9071 06be 00       		.uleb128 0
 9072 06bf BE100000 		.4byte	.LASF287
 9073 06c3 05       		.byte	0x5
 9074 06c4 00       		.uleb128 0
 9075 06c5 6A6E0000 		.4byte	.LASF288
 9076 06c9 05       		.byte	0x5
 9077 06ca 00       		.uleb128 0
 9078 06cb 783C0000 		.4byte	.LASF289
 9079 06cf 05       		.byte	0x5
 9080 06d0 00       		.uleb128 0
 9081 06d1 BF2B0000 		.4byte	.LASF290
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 227


 9082 06d5 05       		.byte	0x5
 9083 06d6 00       		.uleb128 0
 9084 06d7 750D0000 		.4byte	.LASF291
 9085 06db 05       		.byte	0x5
 9086 06dc 00       		.uleb128 0
 9087 06dd FC160000 		.4byte	.LASF292
 9088 06e1 05       		.byte	0x5
 9089 06e2 00       		.uleb128 0
 9090 06e3 EC5E0000 		.4byte	.LASF293
 9091 06e7 05       		.byte	0x5
 9092 06e8 00       		.uleb128 0
 9093 06e9 56090000 		.4byte	.LASF294
 9094 06ed 05       		.byte	0x5
 9095 06ee 00       		.uleb128 0
 9096 06ef D7890000 		.4byte	.LASF295
 9097 06f3 05       		.byte	0x5
 9098 06f4 00       		.uleb128 0
 9099 06f5 B05A0000 		.4byte	.LASF296
 9100 06f9 05       		.byte	0x5
 9101 06fa 00       		.uleb128 0
 9102 06fb A5260000 		.4byte	.LASF297
 9103 06ff 05       		.byte	0x5
 9104 0700 00       		.uleb128 0
 9105 0701 8F150000 		.4byte	.LASF298
 9106 0705 05       		.byte	0x5
 9107 0706 00       		.uleb128 0
 9108 0707 FB790000 		.4byte	.LASF299
 9109 070b 05       		.byte	0x5
 9110 070c 00       		.uleb128 0
 9111 070d F31A0000 		.4byte	.LASF300
 9112 0711 05       		.byte	0x5
 9113 0712 00       		.uleb128 0
 9114 0713 40810000 		.4byte	.LASF301
 9115 0717 05       		.byte	0x5
 9116 0718 00       		.uleb128 0
 9117 0719 76750000 		.4byte	.LASF302
 9118 071d 05       		.byte	0x5
 9119 071e 00       		.uleb128 0
 9120 071f 67370000 		.4byte	.LASF303
 9121 0723 05       		.byte	0x5
 9122 0724 00       		.uleb128 0
 9123 0725 2D8F0000 		.4byte	.LASF304
 9124 0729 05       		.byte	0x5
 9125 072a 00       		.uleb128 0
 9126 072b 380F0000 		.4byte	.LASF305
 9127 072f 05       		.byte	0x5
 9128 0730 00       		.uleb128 0
 9129 0731 EF000000 		.4byte	.LASF306
 9130 0735 05       		.byte	0x5
 9131 0736 00       		.uleb128 0
 9132 0737 31090000 		.4byte	.LASF307
 9133 073b 05       		.byte	0x5
 9134 073c 00       		.uleb128 0
 9135 073d B5260000 		.4byte	.LASF308
 9136 0741 05       		.byte	0x5
 9137 0742 00       		.uleb128 0
 9138 0743 666C0000 		.4byte	.LASF309
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 228


 9139 0747 05       		.byte	0x5
 9140 0748 00       		.uleb128 0
 9141 0749 8A160000 		.4byte	.LASF310
 9142 074d 05       		.byte	0x5
 9143 074e 00       		.uleb128 0
 9144 074f 6A5B0000 		.4byte	.LASF311
 9145 0753 05       		.byte	0x5
 9146 0754 00       		.uleb128 0
 9147 0755 8E420000 		.4byte	.LASF312
 9148 0759 05       		.byte	0x5
 9149 075a 00       		.uleb128 0
 9150 075b 461D0000 		.4byte	.LASF313
 9151 075f 05       		.byte	0x5
 9152 0760 00       		.uleb128 0
 9153 0761 51840000 		.4byte	.LASF314
 9154 0765 05       		.byte	0x5
 9155 0766 00       		.uleb128 0
 9156 0767 29300000 		.4byte	.LASF315
 9157 076b 05       		.byte	0x5
 9158 076c 00       		.uleb128 0
 9159 076d 90710000 		.4byte	.LASF316
 9160 0771 05       		.byte	0x5
 9161 0772 00       		.uleb128 0
 9162 0773 6D480000 		.4byte	.LASF317
 9163 0777 05       		.byte	0x5
 9164 0778 00       		.uleb128 0
 9165 0779 42280000 		.4byte	.LASF318
 9166 077d 05       		.byte	0x5
 9167 077e 00       		.uleb128 0
 9168 077f 22310000 		.4byte	.LASF319
 9169 0783 05       		.byte	0x5
 9170 0784 00       		.uleb128 0
 9171 0785 7C110000 		.4byte	.LASF320
 9172 0789 05       		.byte	0x5
 9173 078a 00       		.uleb128 0
 9174 078b 333C0000 		.4byte	.LASF321
 9175 078f 05       		.byte	0x5
 9176 0790 00       		.uleb128 0
 9177 0791 32260000 		.4byte	.LASF322
 9178 0795 05       		.byte	0x5
 9179 0796 00       		.uleb128 0
 9180 0797 7F4E0000 		.4byte	.LASF323
 9181 079b 05       		.byte	0x5
 9182 079c 00       		.uleb128 0
 9183 079d FA820000 		.4byte	.LASF324
 9184 07a1 05       		.byte	0x5
 9185 07a2 00       		.uleb128 0
 9186 07a3 A7580000 		.4byte	.LASF325
 9187 07a7 05       		.byte	0x5
 9188 07a8 00       		.uleb128 0
 9189 07a9 E5380000 		.4byte	.LASF326
 9190 07ad 05       		.byte	0x5
 9191 07ae 00       		.uleb128 0
 9192 07af 8F450000 		.4byte	.LASF327
 9193 07b3 05       		.byte	0x5
 9194 07b4 00       		.uleb128 0
 9195 07b5 0E830000 		.4byte	.LASF328
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 229


 9196 07b9 05       		.byte	0x5
 9197 07ba 00       		.uleb128 0
 9198 07bb B3600000 		.4byte	.LASF329
 9199 07bf 05       		.byte	0x5
 9200 07c0 00       		.uleb128 0
 9201 07c1 3D900000 		.4byte	.LASF330
 9202 07c5 05       		.byte	0x5
 9203 07c6 00       		.uleb128 0
 9204 07c7 FA380000 		.4byte	.LASF331
 9205 07cb 05       		.byte	0x5
 9206 07cc 00       		.uleb128 0
 9207 07cd 815C0000 		.4byte	.LASF332
 9208 07d1 05       		.byte	0x5
 9209 07d2 00       		.uleb128 0
 9210 07d3 243A0000 		.4byte	.LASF333
 9211 07d7 05       		.byte	0x5
 9212 07d8 00       		.uleb128 0
 9213 07d9 0B070000 		.4byte	.LASF334
 9214 07dd 05       		.byte	0x5
 9215 07de 00       		.uleb128 0
 9216 07df DA5C0000 		.4byte	.LASF335
 9217 07e3 05       		.byte	0x5
 9218 07e4 00       		.uleb128 0
 9219 07e5 DF480000 		.4byte	.LASF336
 9220 07e9 05       		.byte	0x5
 9221 07ea 00       		.uleb128 0
 9222 07eb 13400000 		.4byte	.LASF337
 9223 07ef 05       		.byte	0x5
 9224 07f0 00       		.uleb128 0
 9225 07f1 248D0000 		.4byte	.LASF338
 9226 07f5 05       		.byte	0x5
 9227 07f6 00       		.uleb128 0
 9228 07f7 10860000 		.4byte	.LASF339
 9229 07fb 05       		.byte	0x5
 9230 07fc 00       		.uleb128 0
 9231 07fd C25F0000 		.4byte	.LASF340
 9232 0801 05       		.byte	0x5
 9233 0802 00       		.uleb128 0
 9234 0803 7E8D0000 		.4byte	.LASF341
 9235 0807 05       		.byte	0x5
 9236 0808 00       		.uleb128 0
 9237 0809 056F0000 		.4byte	.LASF342
 9238 080d 05       		.byte	0x5
 9239 080e 00       		.uleb128 0
 9240 080f 4C3D0000 		.4byte	.LASF343
 9241 0813 05       		.byte	0x5
 9242 0814 00       		.uleb128 0
 9243 0815 FE100000 		.4byte	.LASF344
 9244 0819 05       		.byte	0x5
 9245 081a 00       		.uleb128 0
 9246 081b FE6D0000 		.4byte	.LASF345
 9247 081f 05       		.byte	0x5
 9248 0820 00       		.uleb128 0
 9249 0821 43060000 		.4byte	.LASF346
 9250 0825 05       		.byte	0x5
 9251 0826 00       		.uleb128 0
 9252 0827 0B170000 		.4byte	.LASF347
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 230


 9253 082b 05       		.byte	0x5
 9254 082c 00       		.uleb128 0
 9255 082d E0560000 		.4byte	.LASF348
 9256 0831 05       		.byte	0x5
 9257 0832 00       		.uleb128 0
 9258 0833 D5320000 		.4byte	.LASF349
 9259 0837 05       		.byte	0x5
 9260 0838 00       		.uleb128 0
 9261 0839 E8950000 		.4byte	.LASF350
 9262 083d 05       		.byte	0x5
 9263 083e 00       		.uleb128 0
 9264 083f BD320000 		.4byte	.LASF351
 9265 0843 05       		.byte	0x5
 9266 0844 00       		.uleb128 0
 9267 0845 DB3E0000 		.4byte	.LASF352
 9268 0849 05       		.byte	0x5
 9269 084a 00       		.uleb128 0
 9270 084b DC6E0000 		.4byte	.LASF353
 9271 084f 05       		.byte	0x5
 9272 0850 00       		.uleb128 0
 9273 0851 FC7D0000 		.4byte	.LASF354
 9274 0855 00       		.byte	0
 9275              		.section	.debug_macro,"G",%progbits,wm4.newlib.h.8.f2807fe490bc07755df529420a1a6ce0,comdat
 9276              	.Ldebug_macro2:
 9277 0000 0400     		.2byte	0x4
 9278 0002 00       		.byte	0
 9279 0003 05       		.byte	0x5
 9280 0004 08       		.uleb128 0x8
 9281 0005 CC100000 		.4byte	.LASF358
 9282 0009 05       		.byte	0x5
 9283 000a 0E       		.uleb128 0xe
 9284 000b 75410000 		.4byte	.LASF359
 9285 000f 05       		.byte	0x5
 9286 0010 15       		.uleb128 0x15
 9287 0011 33940000 		.4byte	.LASF360
 9288 0015 05       		.byte	0x5
 9289 0016 18       		.uleb128 0x18
 9290 0017 1C7F0000 		.4byte	.LASF361
 9291 001b 05       		.byte	0x5
 9292 001c 28       		.uleb128 0x28
 9293 001d 852B0000 		.4byte	.LASF362
 9294 0021 05       		.byte	0x5
 9295 0022 32       		.uleb128 0x32
 9296 0023 E0760000 		.4byte	.LASF363
 9297 0027 05       		.byte	0x5
 9298 0028 36       		.uleb128 0x36
 9299 0029 A2480000 		.4byte	.LASF364
 9300 002d 05       		.byte	0x5
 9301 002e 39       		.uleb128 0x39
 9302 002f 21230000 		.4byte	.LASF365
 9303 0033 05       		.byte	0x5
 9304 0034 3C       		.uleb128 0x3c
 9305 0035 DA4D0000 		.4byte	.LASF366
 9306 0039 05       		.byte	0x5
 9307 003a 3F       		.uleb128 0x3f
 9308 003b 9D090000 		.4byte	.LASF367
 9309 003f 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 231


 9310 0040 48       		.uleb128 0x48
 9311 0041 09560000 		.4byte	.LASF368
 9312 0045 05       		.byte	0x5
 9313 0046 4B       		.uleb128 0x4b
 9314 0047 1E600000 		.4byte	.LASF369
 9315 004b 05       		.byte	0x5
 9316 004c 4E       		.uleb128 0x4e
 9317 004d A32E0000 		.4byte	.LASF370
 9318 0051 05       		.byte	0x5
 9319 0052 51       		.uleb128 0x51
 9320 0053 825A0000 		.4byte	.LASF371
 9321 0057 00       		.byte	0
 9322              		.section	.debug_macro,"G",%progbits,wm4.features.h.22.2e382148a0560adabf236cddd4e880f4,comdat
 9323              	.Ldebug_macro3:
 9324 0000 0400     		.2byte	0x4
 9325 0002 00       		.byte	0
 9326 0003 05       		.byte	0x5
 9327 0004 16       		.uleb128 0x16
 9328 0005 92240000 		.4byte	.LASF373
 9329 0009 05       		.byte	0x5
 9330 000a 1F       		.uleb128 0x1f
 9331 000b C11A0000 		.4byte	.LASF374
 9332 000f 05       		.byte	0x5
 9333 0010 20       		.uleb128 0x20
 9334 0011 DC540000 		.4byte	.LASF375
 9335 0015 05       		.byte	0x5
 9336 0016 25       		.uleb128 0x25
 9337 0017 60120000 		.4byte	.LASF376
 9338 001b 05       		.byte	0x5
 9339 001c 2C       		.uleb128 0x2c
 9340 001d 13810000 		.4byte	.LASF377
 9341 0021 00       		.byte	0
 9342              		.section	.debug_macro,"G",%progbits,wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff,comdat
 9343              	.Ldebug_macro4:
 9344 0000 0400     		.2byte	0x4
 9345 0002 00       		.byte	0
 9346 0003 05       		.byte	0x5
 9347 0004 DC01     		.uleb128 0xdc
 9348 0006 820E0000 		.4byte	.LASF378
 9349 000a 06       		.byte	0x6
 9350 000b E201     		.uleb128 0xe2
 9351 000d 71110000 		.4byte	.LASF379
 9352 0011 05       		.byte	0x5
 9353 0012 E601     		.uleb128 0xe6
 9354 0014 885D0000 		.4byte	.LASF380
 9355 0018 05       		.byte	0x5
 9356 0019 F801     		.uleb128 0xf8
 9357 001b 85450000 		.4byte	.LASF381
 9358 001f 05       		.byte	0x5
 9359 0020 FC01     		.uleb128 0xfc
 9360 0022 965A0000 		.4byte	.LASF382
 9361 0026 05       		.byte	0x5
 9362 0027 8302     		.uleb128 0x103
 9363 0029 B9210000 		.4byte	.LASF383
 9364 002d 05       		.byte	0x5
 9365 002e 8902     		.uleb128 0x109
 9366 0030 A4010000 		.4byte	.LASF384
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 232


 9367 0034 00       		.byte	0
 9368              		.section	.debug_macro,"G",%progbits,wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51,comdat
 9369              	.Ldebug_macro5:
 9370 0000 0400     		.2byte	0x4
 9371 0002 00       		.byte	0
 9372 0003 05       		.byte	0x5
 9373 0004 17       		.uleb128 0x17
 9374 0005 05770000 		.4byte	.LASF385
 9375 0009 05       		.byte	0x5
 9376 000a 2C       		.uleb128 0x2c
 9377 000b E25B0000 		.4byte	.LASF386
 9378 000f 05       		.byte	0x5
 9379 0010 2D       		.uleb128 0x2d
 9380 0011 372D0000 		.4byte	.LASF387
 9381 0015 05       		.byte	0x5
 9382 0016 2E       		.uleb128 0x2e
 9383 0017 7A520000 		.4byte	.LASF388
 9384 001b 05       		.byte	0x5
 9385 001c 32       		.uleb128 0x32
 9386 001d F78C0000 		.4byte	.LASF389
 9387 0021 05       		.byte	0x5
 9388 0022 33       		.uleb128 0x33
 9389 0023 0A920000 		.4byte	.LASF390
 9390 0027 05       		.byte	0x5
 9391 0028 34       		.uleb128 0x34
 9392 0029 00700000 		.4byte	.LASF391
 9393 002d 05       		.byte	0x5
 9394 002e 35       		.uleb128 0x35
 9395 002f 08130000 		.4byte	.LASF392
 9396 0033 05       		.byte	0x5
 9397 0034 36       		.uleb128 0x36
 9398 0035 97230000 		.4byte	.LASF393
 9399 0039 05       		.byte	0x5
 9400 003a 37       		.uleb128 0x37
 9401 003b AE450000 		.4byte	.LASF394
 9402 003f 05       		.byte	0x5
 9403 0040 38       		.uleb128 0x38
 9404 0041 22490000 		.4byte	.LASF395
 9405 0045 05       		.byte	0x5
 9406 0046 39       		.uleb128 0x39
 9407 0047 3F830000 		.4byte	.LASF396
 9408 004b 05       		.byte	0x5
 9409 004c 40       		.uleb128 0x40
 9410 004d 24570000 		.4byte	.LASF397
 9411 0051 05       		.byte	0x5
 9412 0052 41       		.uleb128 0x41
 9413 0053 2B070000 		.4byte	.LASF398
 9414 0057 05       		.byte	0x5
 9415 0058 42       		.uleb128 0x42
 9416 0059 885B0000 		.4byte	.LASF399
 9417 005d 05       		.byte	0x5
 9418 005e 43       		.uleb128 0x43
 9419 005f EF230000 		.4byte	.LASF400
 9420 0063 05       		.byte	0x5
 9421 0064 45       		.uleb128 0x45
 9422 0065 511E0000 		.4byte	.LASF401
 9423 0069 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 233


 9424 006a 46       		.uleb128 0x46
 9425 006b B50D0000 		.4byte	.LASF402
 9426 006f 05       		.byte	0x5
 9427 0070 47       		.uleb128 0x47
 9428 0071 8A6E0000 		.4byte	.LASF403
 9429 0075 05       		.byte	0x5
 9430 0076 49       		.uleb128 0x49
 9431 0077 79020000 		.4byte	.LASF404
 9432 007b 05       		.byte	0x5
 9433 007c 4C       		.uleb128 0x4c
 9434 007d 50190000 		.4byte	.LASF405
 9435 0081 05       		.byte	0x5
 9436 0082 65       		.uleb128 0x65
 9437 0083 B37A0000 		.4byte	.LASF406
 9438 0087 05       		.byte	0x5
 9439 0088 7B       		.uleb128 0x7b
 9440 0089 8E940000 		.4byte	.LASF407
 9441 008d 05       		.byte	0x5
 9442 008e 8301     		.uleb128 0x83
 9443 0090 66150000 		.4byte	.LASF408
 9444 0094 05       		.byte	0x5
 9445 0095 8401     		.uleb128 0x84
 9446 0097 DC110000 		.4byte	.LASF409
 9447 009b 00       		.byte	0
 9448              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2,comdat
 9449              	.Ldebug_macro6:
 9450 0000 0400     		.2byte	0x4
 9451 0002 00       		.byte	0
 9452 0003 05       		.byte	0x5
 9453 0004 0D       		.uleb128 0xd
 9454 0005 DF270000 		.4byte	.LASF410
 9455 0009 05       		.byte	0x5
 9456 000a 0E       		.uleb128 0xe
 9457 000b F4260000 		.4byte	.LASF411
 9458 000f 05       		.byte	0x5
 9459 0010 0F       		.uleb128 0xf
 9460 0011 21400000 		.4byte	.LASF412
 9461 0015 00       		.byte	0
 9462              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635,comdat
 9463              	.Ldebug_macro7:
 9464 0000 0400     		.2byte	0x4
 9465 0002 00       		.byte	0
 9466 0003 05       		.byte	0x5
 9467 0004 B801     		.uleb128 0xb8
 9468 0006 9F150000 		.4byte	.LASF413
 9469 000a 05       		.byte	0x5
 9470 000b B901     		.uleb128 0xb9
 9471 000d A70A0000 		.4byte	.LASF414
 9472 0011 05       		.byte	0x5
 9473 0012 BA01     		.uleb128 0xba
 9474 0014 3D2A0000 		.4byte	.LASF415
 9475 0018 05       		.byte	0x5
 9476 0019 BB01     		.uleb128 0xbb
 9477 001b 53130000 		.4byte	.LASF416
 9478 001f 05       		.byte	0x5
 9479 0020 BC01     		.uleb128 0xbc
 9480 0022 AC3D0000 		.4byte	.LASF417
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 234


 9481 0026 05       		.byte	0x5
 9482 0027 BD01     		.uleb128 0xbd
 9483 0029 C60E0000 		.4byte	.LASF418
 9484 002d 05       		.byte	0x5
 9485 002e BE01     		.uleb128 0xbe
 9486 0030 D04D0000 		.4byte	.LASF419
 9487 0034 05       		.byte	0x5
 9488 0035 BF01     		.uleb128 0xbf
 9489 0037 18490000 		.4byte	.LASF420
 9490 003b 05       		.byte	0x5
 9491 003c C001     		.uleb128 0xc0
 9492 003e 246D0000 		.4byte	.LASF421
 9493 0042 05       		.byte	0x5
 9494 0043 C101     		.uleb128 0xc1
 9495 0045 CA540000 		.4byte	.LASF422
 9496 0049 05       		.byte	0x5
 9497 004a C201     		.uleb128 0xc2
 9498 004c 52660000 		.4byte	.LASF423
 9499 0050 05       		.byte	0x5
 9500 0051 C301     		.uleb128 0xc3
 9501 0053 811F0000 		.4byte	.LASF424
 9502 0057 05       		.byte	0x5
 9503 0058 C401     		.uleb128 0xc4
 9504 005a 3E180000 		.4byte	.LASF425
 9505 005e 05       		.byte	0x5
 9506 005f C501     		.uleb128 0xc5
 9507 0061 775D0000 		.4byte	.LASF426
 9508 0065 05       		.byte	0x5
 9509 0066 C601     		.uleb128 0xc6
 9510 0068 52860000 		.4byte	.LASF427
 9511 006c 05       		.byte	0x5
 9512 006d C701     		.uleb128 0xc7
 9513 006f 85720000 		.4byte	.LASF428
 9514 0073 05       		.byte	0x5
 9515 0074 CE01     		.uleb128 0xce
 9516 0076 D50D0000 		.4byte	.LASF429
 9517 007a 06       		.byte	0x6
 9518 007b EA01     		.uleb128 0xea
 9519 007d BA480000 		.4byte	.LASF430
 9520 0081 05       		.byte	0x5
 9521 0082 8702     		.uleb128 0x107
 9522 0084 178D0000 		.4byte	.LASF431
 9523 0088 05       		.byte	0x5
 9524 0089 8802     		.uleb128 0x108
 9525 008b 2A590000 		.4byte	.LASF432
 9526 008f 05       		.byte	0x5
 9527 0090 8902     		.uleb128 0x109
 9528 0092 BD5D0000 		.4byte	.LASF433
 9529 0096 05       		.byte	0x5
 9530 0097 8A02     		.uleb128 0x10a
 9531 0099 C3860000 		.4byte	.LASF434
 9532 009d 05       		.byte	0x5
 9533 009e 8B02     		.uleb128 0x10b
 9534 00a0 A36D0000 		.4byte	.LASF435
 9535 00a4 05       		.byte	0x5
 9536 00a5 8C02     		.uleb128 0x10c
 9537 00a7 924D0000 		.4byte	.LASF436
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 235


 9538 00ab 05       		.byte	0x5
 9539 00ac 8D02     		.uleb128 0x10d
 9540 00ae 4B6D0000 		.4byte	.LASF437
 9541 00b2 05       		.byte	0x5
 9542 00b3 8E02     		.uleb128 0x10e
 9543 00b5 87330000 		.4byte	.LASF438
 9544 00b9 05       		.byte	0x5
 9545 00ba 8F02     		.uleb128 0x10f
 9546 00bc 13940000 		.4byte	.LASF439
 9547 00c0 05       		.byte	0x5
 9548 00c1 9002     		.uleb128 0x110
 9549 00c3 276B0000 		.4byte	.LASF440
 9550 00c7 05       		.byte	0x5
 9551 00c8 9102     		.uleb128 0x111
 9552 00ca 765F0000 		.4byte	.LASF441
 9553 00ce 05       		.byte	0x5
 9554 00cf 9202     		.uleb128 0x112
 9555 00d1 1F0E0000 		.4byte	.LASF442
 9556 00d5 05       		.byte	0x5
 9557 00d6 9302     		.uleb128 0x113
 9558 00d8 796E0000 		.4byte	.LASF443
 9559 00dc 05       		.byte	0x5
 9560 00dd 9402     		.uleb128 0x114
 9561 00df BF590000 		.4byte	.LASF444
 9562 00e3 05       		.byte	0x5
 9563 00e4 9502     		.uleb128 0x115
 9564 00e6 20560000 		.4byte	.LASF445
 9565 00ea 06       		.byte	0x6
 9566 00eb A202     		.uleb128 0x122
 9567 00ed B0870000 		.4byte	.LASF446
 9568 00f1 06       		.byte	0x6
 9569 00f2 D702     		.uleb128 0x157
 9570 00f4 AC0C0000 		.4byte	.LASF447
 9571 00f8 06       		.byte	0x6
 9572 00f9 8D03     		.uleb128 0x18d
 9573 00fb 86100000 		.4byte	.LASF448
 9574 00ff 05       		.byte	0x5
 9575 0100 9203     		.uleb128 0x192
 9576 0102 76360000 		.4byte	.LASF449
 9577 0106 06       		.byte	0x6
 9578 0107 9803     		.uleb128 0x198
 9579 0109 32370000 		.4byte	.LASF450
 9580 010d 00       		.byte	0
 9581              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734,comdat
 9582              	.Ldebug_macro8:
 9583 0000 0400     		.2byte	0x4
 9584 0002 00       		.byte	0
 9585 0003 05       		.byte	0x5
 9586 0004 27       		.uleb128 0x27
 9587 0005 03460000 		.4byte	.LASF452
 9588 0009 05       		.byte	0x5
 9589 000a 28       		.uleb128 0x28
 9590 000b 0C610000 		.4byte	.LASF453
 9591 000f 05       		.byte	0x5
 9592 0010 2A       		.uleb128 0x2a
 9593 0011 3B3A0000 		.4byte	.LASF454
 9594 0015 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 236


 9595 0016 8801     		.uleb128 0x88
 9596 0018 194A0000 		.4byte	.LASF455
 9597 001c 05       		.byte	0x5
 9598 001d 8901     		.uleb128 0x89
 9599 001f 8E440000 		.4byte	.LASF456
 9600 0023 05       		.byte	0x5
 9601 0024 8A01     		.uleb128 0x8a
 9602 0026 6E570000 		.4byte	.LASF457
 9603 002a 05       		.byte	0x5
 9604 002b 8B01     		.uleb128 0x8b
 9605 002d 7B660000 		.4byte	.LASF458
 9606 0031 05       		.byte	0x5
 9607 0032 8C01     		.uleb128 0x8c
 9608 0034 7A7E0000 		.4byte	.LASF459
 9609 0038 05       		.byte	0x5
 9610 0039 8D01     		.uleb128 0x8d
 9611 003b 640D0000 		.4byte	.LASF460
 9612 003f 05       		.byte	0x5
 9613 0040 8E01     		.uleb128 0x8e
 9614 0042 EA6D0000 		.4byte	.LASF461
 9615 0046 05       		.byte	0x5
 9616 0047 8F01     		.uleb128 0x8f
 9617 0049 A35E0000 		.4byte	.LASF462
 9618 004d 06       		.byte	0x6
 9619 004e 9E01     		.uleb128 0x9e
 9620 0050 3B7E0000 		.4byte	.LASF463
 9621 0054 06       		.byte	0x6
 9622 0055 EA01     		.uleb128 0xea
 9623 0057 BA480000 		.4byte	.LASF430
 9624 005b 06       		.byte	0x6
 9625 005c D702     		.uleb128 0x157
 9626 005e AC0C0000 		.4byte	.LASF447
 9627 0062 06       		.byte	0x6
 9628 0063 8D03     		.uleb128 0x18d
 9629 0065 86100000 		.4byte	.LASF448
 9630 0069 05       		.byte	0x5
 9631 006a 9203     		.uleb128 0x192
 9632 006c 76360000 		.4byte	.LASF449
 9633 0070 06       		.byte	0x6
 9634 0071 9803     		.uleb128 0x198
 9635 0073 32370000 		.4byte	.LASF450
 9636 0077 05       		.byte	0x5
 9637 0078 9D03     		.uleb128 0x19d
 9638 007a F5400000 		.4byte	.LASF464
 9639 007e 00       		.byte	0
 9640              		.section	.debug_macro,"G",%progbits,wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382,comdat
 9641              	.Ldebug_macro9:
 9642 0000 0400     		.2byte	0x4
 9643 0002 00       		.byte	0
 9644 0003 05       		.byte	0x5
 9645 0004 06       		.uleb128 0x6
 9646 0005 595E0000 		.4byte	.LASF467
 9647 0009 05       		.byte	0x5
 9648 000a 0F       		.uleb128 0xf
 9649 000b DE0A0000 		.4byte	.LASF468
 9650 000f 05       		.byte	0x5
 9651 0010 21       		.uleb128 0x21
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 237


 9652 0011 4F3C0000 		.4byte	.LASF469
 9653 0015 05       		.byte	0x5
 9654 0016 2F       		.uleb128 0x2f
 9655 0017 AE290000 		.4byte	.LASF470
 9656 001b 05       		.byte	0x5
 9657 001c 45       		.uleb128 0x45
 9658 001d 971F0000 		.4byte	.LASF471
 9659 0021 05       		.byte	0x5
 9660 0022 5F       		.uleb128 0x5f
 9661 0023 81620000 		.4byte	.LASF472
 9662 0027 05       		.byte	0x5
 9663 0028 7E       		.uleb128 0x7e
 9664 0029 37590000 		.4byte	.LASF473
 9665 002d 05       		.byte	0x5
 9666 002e 9801     		.uleb128 0x98
 9667 0030 D4140000 		.4byte	.LASF474
 9668 0034 05       		.byte	0x5
 9669 0035 AE01     		.uleb128 0xae
 9670 0037 C3360000 		.4byte	.LASF475
 9671 003b 05       		.byte	0x5
 9672 003c C001     		.uleb128 0xc0
 9673 003e AA4F0000 		.4byte	.LASF476
 9674 0042 06       		.byte	0x6
 9675 0043 D601     		.uleb128 0xd6
 9676 0045 7B620000 		.4byte	.LASF477
 9677 0049 00       		.byte	0
 9678              		.section	.debug_macro,"G",%progbits,wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea,comdat
 9679              	.Ldebug_macro10:
 9680 0000 0400     		.2byte	0x4
 9681 0002 00       		.byte	0
 9682 0003 05       		.byte	0x5
 9683 0004 02       		.uleb128 0x2
 9684 0005 5E940000 		.4byte	.LASF478
 9685 0009 05       		.byte	0x5
 9686 000a 0B       		.uleb128 0xb
 9687 000b 3C5F0000 		.4byte	.LASF479
 9688 000f 05       		.byte	0x5
 9689 0010 0C       		.uleb128 0xc
 9690 0011 72430000 		.4byte	.LASF480
 9691 0015 05       		.byte	0x5
 9692 0016 0D       		.uleb128 0xd
 9693 0017 E05A0000 		.4byte	.LASF481
 9694 001b 05       		.byte	0x5
 9695 001c 0E       		.uleb128 0xe
 9696 001d 8A8D0000 		.4byte	.LASF482
 9697 0021 05       		.byte	0x5
 9698 0022 0F       		.uleb128 0xf
 9699 0023 27910000 		.4byte	.LASF483
 9700 0027 05       		.byte	0x5
 9701 0028 10       		.uleb128 0x10
 9702 0029 F80C0000 		.4byte	.LASF484
 9703 002d 05       		.byte	0x5
 9704 002e 11       		.uleb128 0x11
 9705 002f 82460000 		.4byte	.LASF485
 9706 0033 05       		.byte	0x5
 9707 0034 12       		.uleb128 0x12
 9708 0035 4C340000 		.4byte	.LASF486
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 238


 9709 0039 05       		.byte	0x5
 9710 003a 13       		.uleb128 0x13
 9711 003b AE280000 		.4byte	.LASF487
 9712 003f 05       		.byte	0x5
 9713 0040 14       		.uleb128 0x14
 9714 0041 01620000 		.4byte	.LASF488
 9715 0045 05       		.byte	0x5
 9716 0046 15       		.uleb128 0x15
 9717 0047 CE4A0000 		.4byte	.LASF489
 9718 004b 05       		.byte	0x5
 9719 004c 16       		.uleb128 0x16
 9720 004d 507C0000 		.4byte	.LASF490
 9721 0051 00       		.byte	0
 9722              		.section	.debug_macro,"G",%progbits,wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08,comdat
 9723              	.Ldebug_macro11:
 9724 0000 0400     		.2byte	0x4
 9725 0002 00       		.byte	0
 9726 0003 05       		.byte	0x5
 9727 0004 36       		.uleb128 0x36
 9728 0005 72390000 		.4byte	.LASF491
 9729 0009 06       		.byte	0x6
 9730 000a 38       		.uleb128 0x38
 9731 000b 96780000 		.4byte	.LASF492
 9732 000f 05       		.byte	0x5
 9733 0010 42       		.uleb128 0x42
 9734 0011 E6890000 		.4byte	.LASF493
 9735 0015 00       		.byte	0
 9736              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6,comdat
 9737              	.Ldebug_macro12:
 9738 0000 0400     		.2byte	0x4
 9739 0002 00       		.byte	0
 9740 0003 06       		.byte	0x6
 9741 0004 9E01     		.uleb128 0x9e
 9742 0006 3B7E0000 		.4byte	.LASF463
 9743 000a 06       		.byte	0x6
 9744 000b EA01     		.uleb128 0xea
 9745 000d BA480000 		.4byte	.LASF430
 9746 0011 06       		.byte	0x6
 9747 0012 D702     		.uleb128 0x157
 9748 0014 AC0C0000 		.4byte	.LASF447
 9749 0018 05       		.byte	0x5
 9750 0019 DC02     		.uleb128 0x15c
 9751 001b B4270000 		.4byte	.LASF494
 9752 001f 06       		.byte	0x6
 9753 0020 E302     		.uleb128 0x163
 9754 0022 01220000 		.4byte	.LASF495
 9755 0026 06       		.byte	0x6
 9756 0027 8D03     		.uleb128 0x18d
 9757 0029 86100000 		.4byte	.LASF448
 9758 002d 05       		.byte	0x5
 9759 002e 9203     		.uleb128 0x192
 9760 0030 76360000 		.4byte	.LASF449
 9761 0034 06       		.byte	0x6
 9762 0035 9803     		.uleb128 0x198
 9763 0037 32370000 		.4byte	.LASF450
 9764 003b 05       		.byte	0x5
 9765 003c 9D03     		.uleb128 0x19d
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 239


 9766 003e F5400000 		.4byte	.LASF464
 9767 0042 00       		.byte	0
 9768              		.section	.debug_macro,"G",%progbits,wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43,comdat
 9769              	.Ldebug_macro13:
 9770 0000 0400     		.2byte	0x4
 9771 0002 00       		.byte	0
 9772 0003 05       		.byte	0x5
 9773 0004 11       		.uleb128 0x11
 9774 0005 B07E0000 		.4byte	.LASF496
 9775 0009 05       		.byte	0x5
 9776 000a 15       		.uleb128 0x15
 9777 000b 79720000 		.4byte	.LASF497
 9778 000f 05       		.byte	0x5
 9779 0010 46       		.uleb128 0x46
 9780 0011 A05A0000 		.4byte	.LASF498
 9781 0015 05       		.byte	0x5
 9782 0016 62       		.uleb128 0x62
 9783 0017 C0920000 		.4byte	.LASF499
 9784 001b 05       		.byte	0x5
 9785 001c 68       		.uleb128 0x68
 9786 001d B8790000 		.4byte	.LASF500
 9787 0021 05       		.byte	0x5
 9788 0022 B001     		.uleb128 0xb0
 9789 0024 50460000 		.4byte	.LASF501
 9790 0028 05       		.byte	0x5
 9791 0029 B602     		.uleb128 0x136
 9792 002b AD710000 		.4byte	.LASF502
 9793 002f 05       		.byte	0x5
 9794 0030 B702     		.uleb128 0x137
 9795 0032 1D430000 		.4byte	.LASF503
 9796 0036 05       		.byte	0x5
 9797 0037 B802     		.uleb128 0x138
 9798 0039 7E1D0000 		.4byte	.LASF504
 9799 003d 05       		.byte	0x5
 9800 003e B902     		.uleb128 0x139
 9801 0040 D87C0000 		.4byte	.LASF505
 9802 0044 05       		.byte	0x5
 9803 0045 BA02     		.uleb128 0x13a
 9804 0047 84540000 		.4byte	.LASF506
 9805 004b 05       		.byte	0x5
 9806 004c BB02     		.uleb128 0x13b
 9807 004e 0C570000 		.4byte	.LASF507
 9808 0052 05       		.byte	0x5
 9809 0053 BC02     		.uleb128 0x13c
 9810 0055 19900000 		.4byte	.LASF508
 9811 0059 05       		.byte	0x5
 9812 005a C802     		.uleb128 0x148
 9813 005c A40F0000 		.4byte	.LASF509
 9814 0060 05       		.byte	0x5
 9815 0061 C902     		.uleb128 0x149
 9816 0063 FC940000 		.4byte	.LASF510
 9817 0067 05       		.byte	0x5
 9818 0068 CA02     		.uleb128 0x14a
 9819 006a 7E030000 		.4byte	.LASF511
 9820 006e 05       		.byte	0x5
 9821 006f F304     		.uleb128 0x273
 9822 0071 FC120000 		.4byte	.LASF512
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 240


 9823 0075 05       		.byte	0x5
 9824 0076 8905     		.uleb128 0x289
 9825 0078 59500000 		.4byte	.LASF513
 9826 007c 05       		.byte	0x5
 9827 007d B905     		.uleb128 0x2b9
 9828 007f 534B0000 		.4byte	.LASF514
 9829 0083 05       		.byte	0x5
 9830 0084 C905     		.uleb128 0x2c9
 9831 0086 6B870000 		.4byte	.LASF515
 9832 008a 05       		.byte	0x5
 9833 008b CA05     		.uleb128 0x2ca
 9834 008d 8B100000 		.4byte	.LASF516
 9835 0091 05       		.byte	0x5
 9836 0092 CB05     		.uleb128 0x2cb
 9837 0094 236E0000 		.4byte	.LASF517
 9838 0098 05       		.byte	0x5
 9839 0099 CC05     		.uleb128 0x2cc
 9840 009b 6B4A0000 		.4byte	.LASF518
 9841 009f 05       		.byte	0x5
 9842 00a0 CD05     		.uleb128 0x2cd
 9843 00a2 E4740000 		.4byte	.LASF519
 9844 00a6 05       		.byte	0x5
 9845 00a7 CE05     		.uleb128 0x2ce
 9846 00a9 19630000 		.4byte	.LASF520
 9847 00ad 05       		.byte	0x5
 9848 00ae CF05     		.uleb128 0x2cf
 9849 00b0 E5450000 		.4byte	.LASF521
 9850 00b4 05       		.byte	0x5
 9851 00b5 D105     		.uleb128 0x2d1
 9852 00b7 C62F0000 		.4byte	.LASF522
 9853 00bb 05       		.byte	0x5
 9854 00bc D205     		.uleb128 0x2d2
 9855 00be 3D3B0000 		.4byte	.LASF523
 9856 00c2 05       		.byte	0x5
 9857 00c3 D305     		.uleb128 0x2d3
 9858 00c5 62130000 		.4byte	.LASF524
 9859 00c9 05       		.byte	0x5
 9860 00ca D405     		.uleb128 0x2d4
 9861 00cc 4C490000 		.4byte	.LASF525
 9862 00d0 05       		.byte	0x5
 9863 00d1 D505     		.uleb128 0x2d5
 9864 00d3 55310000 		.4byte	.LASF526
 9865 00d7 05       		.byte	0x5
 9866 00d8 D605     		.uleb128 0x2d6
 9867 00da D8090000 		.4byte	.LASF527
 9868 00de 05       		.byte	0x5
 9869 00df D705     		.uleb128 0x2d7
 9870 00e1 33000000 		.4byte	.LASF528
 9871 00e5 05       		.byte	0x5
 9872 00e6 D805     		.uleb128 0x2d8
 9873 00e8 DB6A0000 		.4byte	.LASF529
 9874 00ec 05       		.byte	0x5
 9875 00ed D905     		.uleb128 0x2d9
 9876 00ef 770C0000 		.4byte	.LASF530
 9877 00f3 05       		.byte	0x5
 9878 00f4 DA05     		.uleb128 0x2da
 9879 00f6 B5690000 		.4byte	.LASF531
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 241


 9880 00fa 05       		.byte	0x5
 9881 00fb DB05     		.uleb128 0x2db
 9882 00fd 0D790000 		.4byte	.LASF532
 9883 0101 05       		.byte	0x5
 9884 0102 DC05     		.uleb128 0x2dc
 9885 0104 61290000 		.4byte	.LASF533
 9886 0108 05       		.byte	0x5
 9887 0109 DD05     		.uleb128 0x2dd
 9888 010b 3C0A0000 		.4byte	.LASF534
 9889 010f 05       		.byte	0x5
 9890 0110 DE05     		.uleb128 0x2de
 9891 0112 81380000 		.4byte	.LASF535
 9892 0116 05       		.byte	0x5
 9893 0117 DF05     		.uleb128 0x2df
 9894 0119 F31D0000 		.4byte	.LASF536
 9895 011d 05       		.byte	0x5
 9896 011e E005     		.uleb128 0x2e0
 9897 0120 0B670000 		.4byte	.LASF537
 9898 0124 05       		.byte	0x5
 9899 0125 E105     		.uleb128 0x2e1
 9900 0127 1E690000 		.4byte	.LASF538
 9901 012b 05       		.byte	0x5
 9902 012c E205     		.uleb128 0x2e2
 9903 012e 831C0000 		.4byte	.LASF539
 9904 0132 05       		.byte	0x5
 9905 0133 E305     		.uleb128 0x2e3
 9906 0135 4C4F0000 		.4byte	.LASF540
 9907 0139 05       		.byte	0x5
 9908 013a E405     		.uleb128 0x2e4
 9909 013c 086C0000 		.4byte	.LASF541
 9910 0140 05       		.byte	0x5
 9911 0141 E505     		.uleb128 0x2e5
 9912 0143 FD1E0000 		.4byte	.LASF542
 9913 0147 05       		.byte	0x5
 9914 0148 E605     		.uleb128 0x2e6
 9915 014a 09500000 		.4byte	.LASF543
 9916 014e 05       		.byte	0x5
 9917 014f E705     		.uleb128 0x2e7
 9918 0151 438F0000 		.4byte	.LASF544
 9919 0155 05       		.byte	0x5
 9920 0156 E805     		.uleb128 0x2e8
 9921 0158 B0000000 		.4byte	.LASF545
 9922 015c 05       		.byte	0x5
 9923 015d EF05     		.uleb128 0x2ef
 9924 015f B0030000 		.4byte	.LASF546
 9925 0163 05       		.byte	0x5
 9926 0164 F705     		.uleb128 0x2f7
 9927 0166 367C0000 		.4byte	.LASF547
 9928 016a 05       		.byte	0x5
 9929 016b 8706     		.uleb128 0x307
 9930 016d C3290000 		.4byte	.LASF548
 9931 0171 05       		.byte	0x5
 9932 0172 8A06     		.uleb128 0x30a
 9933 0174 37750000 		.4byte	.LASF549
 9934 0178 05       		.byte	0x5
 9935 0179 9006     		.uleb128 0x310
 9936 017b 0A010000 		.4byte	.LASF550
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 242


 9937 017f 00       		.byte	0
 9938              		.section	.debug_macro,"G",%progbits,wm4.cdefs.h.47.fbe724f4232069283dea9c3aea4135c7,comdat
 9939              	.Ldebug_macro14:
 9940 0000 0400     		.2byte	0x4
 9941 0002 00       		.byte	0
 9942 0003 05       		.byte	0x5
 9943 0004 2F       		.uleb128 0x2f
 9944 0005 45200000 		.4byte	.LASF552
 9945 0009 05       		.byte	0x5
 9946 000a 30       		.uleb128 0x30
 9947 000b 81650000 		.4byte	.LASF553
 9948 000f 05       		.byte	0x5
 9949 0010 31       		.uleb128 0x31
 9950 0011 DE4F0000 		.4byte	.LASF554
 9951 0015 05       		.byte	0x5
 9952 0016 34       		.uleb128 0x34
 9953 0017 031B0000 		.4byte	.LASF555
 9954 001b 05       		.byte	0x5
 9955 001c 37       		.uleb128 0x37
 9956 001d 741C0000 		.4byte	.LASF556
 9957 0021 05       		.byte	0x5
 9958 0022 38       		.uleb128 0x38
 9959 0023 A68B0000 		.4byte	.LASF557
 9960 0027 05       		.byte	0x5
 9961 0028 3A       		.uleb128 0x3a
 9962 0029 C93D0000 		.4byte	.LASF558
 9963 002d 05       		.byte	0x5
 9964 002e 3B       		.uleb128 0x3b
 9965 002f 8F2E0000 		.4byte	.LASF559
 9966 0033 05       		.byte	0x5
 9967 0034 3C       		.uleb128 0x3c
 9968 0035 5E1F0000 		.4byte	.LASF560
 9969 0039 05       		.byte	0x5
 9970 003a 3D       		.uleb128 0x3d
 9971 003b B87E0000 		.4byte	.LASF561
 9972 003f 05       		.byte	0x5
 9973 0040 40       		.uleb128 0x40
 9974 0041 DF0D0000 		.4byte	.LASF562
 9975 0045 05       		.byte	0x5
 9976 0046 41       		.uleb128 0x41
 9977 0047 02090000 		.4byte	.LASF563
 9978 004b 05       		.byte	0x5
 9979 004c 42       		.uleb128 0x42
 9980 004d FA720000 		.4byte	.LASF564
 9981 0051 05       		.byte	0x5
 9982 0052 4A       		.uleb128 0x4a
 9983 0053 68100000 		.4byte	.LASF565
 9984 0057 05       		.byte	0x5
 9985 0058 4D       		.uleb128 0x4d
 9986 0059 2A3B0000 		.4byte	.LASF566
 9987 005d 05       		.byte	0x5
 9988 005e 53       		.uleb128 0x53
 9989 005f AF780000 		.4byte	.LASF567
 9990 0063 05       		.byte	0x5
 9991 0064 5A       		.uleb128 0x5a
 9992 0065 F3620000 		.4byte	.LASF568
 9993 0069 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 243


 9994 006a 5B       		.uleb128 0x5b
 9995 006b 65770000 		.4byte	.LASF569
 9996 006f 05       		.byte	0x5
 9997 0070 67       		.uleb128 0x67
 9998 0071 50830000 		.4byte	.LASF570
 9999 0075 05       		.byte	0x5
 10000 0076 68       		.uleb128 0x68
 10001 0077 6B440000 		.4byte	.LASF571
 10002 007b 05       		.byte	0x5
 10003 007c 6C       		.uleb128 0x6c
 10004 007d 58040000 		.4byte	.LASF572
 10005 0081 05       		.byte	0x5
 10006 0082 6D       		.uleb128 0x6d
 10007 0083 7A760000 		.4byte	.LASF573
 10008 0087 05       		.byte	0x5
 10009 0088 6E       		.uleb128 0x6e
 10010 0089 00000000 		.4byte	.LASF574
 10011 008d 05       		.byte	0x5
 10012 008e 71       		.uleb128 0x71
 10013 008f 8B290000 		.4byte	.LASF575
 10014 0093 05       		.byte	0x5
 10015 0094 74       		.uleb128 0x74
 10016 0095 2E120000 		.4byte	.LASF576
 10017 0099 05       		.byte	0x5
 10018 009a 7B       		.uleb128 0x7b
 10019 009b 8C2F0000 		.4byte	.LASF577
 10020 009f 05       		.byte	0x5
 10021 00a0 7C       		.uleb128 0x7c
 10022 00a1 5B5D0000 		.4byte	.LASF578
 10023 00a5 05       		.byte	0x5
 10024 00a6 7D       		.uleb128 0x7d
 10025 00a7 72840000 		.4byte	.LASF579
 10026 00ab 05       		.byte	0x5
 10027 00ac 8101     		.uleb128 0x81
 10028 00ae 3C630000 		.4byte	.LASF580
 10029 00b2 05       		.byte	0x5
 10030 00b3 8801     		.uleb128 0x88
 10031 00b5 F38D0000 		.4byte	.LASF581
 10032 00b9 05       		.byte	0x5
 10033 00ba 8C01     		.uleb128 0x8c
 10034 00bc B35E0000 		.4byte	.LASF582
 10035 00c0 05       		.byte	0x5
 10036 00c1 8D01     		.uleb128 0x8d
 10037 00c3 0F200000 		.4byte	.LASF583
 10038 00c7 05       		.byte	0x5
 10039 00c8 9001     		.uleb128 0x90
 10040 00ca 54530000 		.4byte	.LASF584
 10041 00ce 05       		.byte	0x5
 10042 00cf 9301     		.uleb128 0x93
 10043 00d1 6A650000 		.4byte	.LASF585
 10044 00d5 05       		.byte	0x5
 10045 00d6 9401     		.uleb128 0x94
 10046 00d8 6C2B0000 		.4byte	.LASF586
 10047 00dc 05       		.byte	0x5
 10048 00dd 9501     		.uleb128 0x95
 10049 00df E0790000 		.4byte	.LASF587
 10050 00e3 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 244


 10051 00e4 9701     		.uleb128 0x97
 10052 00e6 0D440000 		.4byte	.LASF588
 10053 00ea 05       		.byte	0x5
 10054 00eb 9801     		.uleb128 0x98
 10055 00ed 6A860000 		.4byte	.LASF589
 10056 00f1 05       		.byte	0x5
 10057 00f2 9A01     		.uleb128 0x9a
 10058 00f4 91880000 		.4byte	.LASF590
 10059 00f8 05       		.byte	0x5
 10060 00f9 9C01     		.uleb128 0x9c
 10061 00fb 9F180000 		.4byte	.LASF591
 10062 00ff 05       		.byte	0x5
 10063 0100 AD01     		.uleb128 0xad
 10064 0102 E8180000 		.4byte	.LASF592
 10065 0106 05       		.byte	0x5
 10066 0107 AE01     		.uleb128 0xae
 10067 0109 B00E0000 		.4byte	.LASF593
 10068 010d 05       		.byte	0x5
 10069 010e AF01     		.uleb128 0xaf
 10070 0110 49910000 		.4byte	.LASF594
 10071 0114 05       		.byte	0x5
 10072 0115 B001     		.uleb128 0xb0
 10073 0117 AE5D0000 		.4byte	.LASF595
 10074 011b 05       		.byte	0x5
 10075 011c B101     		.uleb128 0xb1
 10076 011e 762E0000 		.4byte	.LASF596
 10077 0122 05       		.byte	0x5
 10078 0123 B301     		.uleb128 0xb3
 10079 0125 F8460000 		.4byte	.LASF597
 10080 0129 05       		.byte	0x5
 10081 012a B401     		.uleb128 0xb4
 10082 012c 5A690000 		.4byte	.LASF598
 10083 0130 05       		.byte	0x5
 10084 0131 B501     		.uleb128 0xb5
 10085 0133 B18F0000 		.4byte	.LASF599
 10086 0137 05       		.byte	0x5
 10087 0138 F601     		.uleb128 0xf6
 10088 013a 967D0000 		.4byte	.LASF600
 10089 013e 05       		.byte	0x5
 10090 013f F701     		.uleb128 0xf7
 10091 0141 6B420000 		.4byte	.LASF601
 10092 0145 05       		.byte	0x5
 10093 0146 F801     		.uleb128 0xf8
 10094 0148 FA4E0000 		.4byte	.LASF602
 10095 014c 05       		.byte	0x5
 10096 014d F901     		.uleb128 0xf9
 10097 014f 40290000 		.4byte	.LASF603
 10098 0153 05       		.byte	0x5
 10099 0154 FA01     		.uleb128 0xfa
 10100 0156 EE930000 		.4byte	.LASF604
 10101 015a 05       		.byte	0x5
 10102 015b FB01     		.uleb128 0xfb
 10103 015d 35080000 		.4byte	.LASF605
 10104 0161 05       		.byte	0x5
 10105 0162 FC01     		.uleb128 0xfc
 10106 0164 148C0000 		.4byte	.LASF606
 10107 0168 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 245


 10108 0169 9902     		.uleb128 0x119
 10109 016b 4E230000 		.4byte	.LASF607
 10110 016f 05       		.byte	0x5
 10111 0170 A002     		.uleb128 0x120
 10112 0172 C54F0000 		.4byte	.LASF608
 10113 0176 05       		.byte	0x5
 10114 0177 A802     		.uleb128 0x128
 10115 0179 668A0000 		.4byte	.LASF609
 10116 017d 05       		.byte	0x5
 10117 017e AE02     		.uleb128 0x12e
 10118 0180 1F5A0000 		.4byte	.LASF610
 10119 0184 05       		.byte	0x5
 10120 0185 C602     		.uleb128 0x146
 10121 0187 B06B0000 		.4byte	.LASF611
 10122 018b 05       		.byte	0x5
 10123 018c D902     		.uleb128 0x159
 10124 018e 9C770000 		.4byte	.LASF612
 10125 0192 05       		.byte	0x5
 10126 0193 DF02     		.uleb128 0x15f
 10127 0195 0C5C0000 		.4byte	.LASF613
 10128 0199 05       		.byte	0x5
 10129 019a E002     		.uleb128 0x160
 10130 019c 31860000 		.4byte	.LASF614
 10131 01a0 05       		.byte	0x5
 10132 01a1 E702     		.uleb128 0x167
 10133 01a3 CB1C0000 		.4byte	.LASF615
 10134 01a7 05       		.byte	0x5
 10135 01a8 ED02     		.uleb128 0x16d
 10136 01aa B8240000 		.4byte	.LASF616
 10137 01ae 05       		.byte	0x5
 10138 01af F302     		.uleb128 0x173
 10139 01b1 E0430000 		.4byte	.LASF617
 10140 01b5 05       		.byte	0x5
 10141 01b6 F902     		.uleb128 0x179
 10142 01b8 B5400000 		.4byte	.LASF618
 10143 01bc 05       		.byte	0x5
 10144 01bd FF02     		.uleb128 0x17f
 10145 01bf C1330000 		.4byte	.LASF619
 10146 01c3 05       		.byte	0x5
 10147 01c4 9103     		.uleb128 0x191
 10148 01c6 B6550000 		.4byte	.LASF620
 10149 01ca 05       		.byte	0x5
 10150 01cb B403     		.uleb128 0x1b4
 10151 01cd 761E0000 		.4byte	.LASF621
 10152 01d1 05       		.byte	0x5
 10153 01d2 B503     		.uleb128 0x1b5
 10154 01d4 9F4E0000 		.4byte	.LASF622
 10155 01d8 05       		.byte	0x5
 10156 01d9 BC03     		.uleb128 0x1bc
 10157 01db 04270000 		.4byte	.LASF623
 10158 01df 05       		.byte	0x5
 10159 01e0 BD03     		.uleb128 0x1bd
 10160 01e2 072A0000 		.4byte	.LASF624
 10161 01e6 05       		.byte	0x5
 10162 01e7 C303     		.uleb128 0x1c3
 10163 01e9 983C0000 		.4byte	.LASF625
 10164 01ed 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 246


 10165 01ee C403     		.uleb128 0x1c4
 10166 01f0 4A7D0000 		.4byte	.LASF626
 10167 01f4 05       		.byte	0x5
 10168 01f5 CE03     		.uleb128 0x1ce
 10169 01f7 06850000 		.4byte	.LASF627
 10170 01fb 05       		.byte	0x5
 10171 01fc E403     		.uleb128 0x1e4
 10172 01fe 0B7A0000 		.4byte	.LASF628
 10173 0202 05       		.byte	0x5
 10174 0203 E603     		.uleb128 0x1e6
 10175 0205 A6830000 		.4byte	.LASF629
 10176 0209 05       		.byte	0x5
 10177 020a E803     		.uleb128 0x1e8
 10178 020c B58D0000 		.4byte	.LASF630
 10179 0210 05       		.byte	0x5
 10180 0211 E903     		.uleb128 0x1e9
 10181 0213 6D190000 		.4byte	.LASF631
 10182 0217 05       		.byte	0x5
 10183 0218 EB03     		.uleb128 0x1eb
 10184 021a 5D920000 		.4byte	.LASF632
 10185 021e 05       		.byte	0x5
 10186 021f F503     		.uleb128 0x1f5
 10187 0221 9A610000 		.4byte	.LASF633
 10188 0225 05       		.byte	0x5
 10189 0226 FA03     		.uleb128 0x1fa
 10190 0228 63300000 		.4byte	.LASF634
 10191 022c 05       		.byte	0x5
 10192 022d FF03     		.uleb128 0x1ff
 10193 022f D00F0000 		.4byte	.LASF635
 10194 0233 05       		.byte	0x5
 10195 0234 8204     		.uleb128 0x202
 10196 0236 95470000 		.4byte	.LASF636
 10197 023a 05       		.byte	0x5
 10198 023b 8604     		.uleb128 0x206
 10199 023d FC7F0000 		.4byte	.LASF637
 10200 0241 05       		.byte	0x5
 10201 0242 8804     		.uleb128 0x208
 10202 0244 0F220000 		.4byte	.LASF638
 10203 0248 05       		.byte	0x5
 10204 0249 AB04     		.uleb128 0x22b
 10205 024b DD5D0000 		.4byte	.LASF639
 10206 024f 05       		.byte	0x5
 10207 0250 AF04     		.uleb128 0x22f
 10208 0252 FE750000 		.4byte	.LASF640
 10209 0256 05       		.byte	0x5
 10210 0257 B304     		.uleb128 0x233
 10211 0259 9B050000 		.4byte	.LASF641
 10212 025d 05       		.byte	0x5
 10213 025e B704     		.uleb128 0x237
 10214 0260 85870000 		.4byte	.LASF642
 10215 0264 05       		.byte	0x5
 10216 0265 BB04     		.uleb128 0x23b
 10217 0267 84600000 		.4byte	.LASF643
 10218 026b 05       		.byte	0x5
 10219 026c BF04     		.uleb128 0x23f
 10220 026e 31240000 		.4byte	.LASF644
 10221 0272 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 247


 10222 0273 C304     		.uleb128 0x243
 10223 0275 327F0000 		.4byte	.LASF645
 10224 0279 05       		.byte	0x5
 10225 027a C704     		.uleb128 0x247
 10226 027c 0F930000 		.4byte	.LASF646
 10227 0280 05       		.byte	0x5
 10228 0281 BF05     		.uleb128 0x2bf
 10229 0283 EB520000 		.4byte	.LASF647
 10230 0287 05       		.byte	0x5
 10231 0288 C005     		.uleb128 0x2c0
 10232 028a FF640000 		.4byte	.LASF648
 10233 028e 05       		.byte	0x5
 10234 028f C105     		.uleb128 0x2c1
 10235 0291 21650000 		.4byte	.LASF649
 10236 0295 05       		.byte	0x5
 10237 0296 C205     		.uleb128 0x2c2
 10238 0298 77080000 		.4byte	.LASF650
 10239 029c 00       		.byte	0
 10240              		.section	.debug_macro,"G",%progbits,wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d,comdat
 10241              	.Ldebug_macro15:
 10242 0000 0400     		.2byte	0x4
 10243 0002 00       		.byte	0
 10244 0003 05       		.byte	0x5
 10245 0004 08       		.uleb128 0x8
 10246 0005 D2310000 		.4byte	.LASF652
 10247 0009 06       		.byte	0x6
 10248 000a 0D       		.uleb128 0xd
 10249 000b 80580000 		.4byte	.LASF653
 10250 000f 05       		.byte	0x5
 10251 0010 10       		.uleb128 0x10
 10252 0011 76610000 		.4byte	.LASF654
 10253 0015 00       		.byte	0
 10254              		.section	.debug_macro,"G",%progbits,wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043,comdat
 10255              	.Ldebug_macro16:
 10256 0000 0400     		.2byte	0x4
 10257 0002 00       		.byte	0
 10258 0003 05       		.byte	0x5
 10259 0004 36       		.uleb128 0x36
 10260 0005 89320000 		.4byte	.LASF655
 10261 0009 05       		.byte	0x5
 10262 000a 3A       		.uleb128 0x3a
 10263 000b 2E900000 		.4byte	.LASF656
 10264 000f 05       		.byte	0x5
 10265 0010 3B       		.uleb128 0x3b
 10266 0011 E41A0000 		.4byte	.LASF657
 10267 0015 05       		.byte	0x5
 10268 0016 3D       		.uleb128 0x3d
 10269 0017 0D3D0000 		.4byte	.LASF658
 10270 001b 05       		.byte	0x5
 10271 001c 41       		.uleb128 0x41
 10272 001d AF4D0000 		.4byte	.LASF659
 10273 0021 05       		.byte	0x5
 10274 0022 8E01     		.uleb128 0x8e
 10275 0024 F6760000 		.4byte	.LASF660
 10276 0028 00       		.byte	0
 10277              		.section	.debug_macro,"G",%progbits,wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd,comdat
 10278              	.Ldebug_macro17:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 248


 10279 0000 0400     		.2byte	0x4
 10280 0002 00       		.byte	0
 10281 0003 05       		.byte	0x5
 10282 0004 08       		.uleb128 0x8
 10283 0005 F0780000 		.4byte	.LASF661
 10284 0009 05       		.byte	0x5
 10285 000a 0F       		.uleb128 0xf
 10286 000b DF270000 		.4byte	.LASF410
 10287 000f 05       		.byte	0x5
 10288 0010 10       		.uleb128 0x10
 10289 0011 21400000 		.4byte	.LASF412
 10290 0015 00       		.byte	0
 10291              		.section	.debug_macro,"G",%progbits,wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c,comdat
 10292              	.Ldebug_macro18:
 10293 0000 0400     		.2byte	0x4
 10294 0002 00       		.byte	0
 10295 0003 06       		.byte	0x6
 10296 0004 9E01     		.uleb128 0x9e
 10297 0006 3B7E0000 		.4byte	.LASF463
 10298 000a 06       		.byte	0x6
 10299 000b EA01     		.uleb128 0xea
 10300 000d BA480000 		.4byte	.LASF430
 10301 0011 06       		.byte	0x6
 10302 0012 D702     		.uleb128 0x157
 10303 0014 AC0C0000 		.4byte	.LASF447
 10304 0018 06       		.byte	0x6
 10305 0019 8D03     		.uleb128 0x18d
 10306 001b 86100000 		.4byte	.LASF448
 10307 001f 05       		.byte	0x5
 10308 0020 9203     		.uleb128 0x192
 10309 0022 76360000 		.4byte	.LASF449
 10310 0026 06       		.byte	0x6
 10311 0027 9803     		.uleb128 0x198
 10312 0029 32370000 		.4byte	.LASF450
 10313 002d 05       		.byte	0x5
 10314 002e 9D03     		.uleb128 0x19d
 10315 0030 F5400000 		.4byte	.LASF464
 10316 0034 00       		.byte	0
 10317              		.section	.debug_macro,"G",%progbits,wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217,comdat
 10318              	.Ldebug_macro19:
 10319 0000 0400     		.2byte	0x4
 10320 0002 00       		.byte	0
 10321 0003 05       		.byte	0x5
 10322 0004 0A       		.uleb128 0xa
 10323 0005 CB880000 		.4byte	.LASF665
 10324 0009 05       		.byte	0x5
 10325 000a 10       		.uleb128 0x10
 10326 000b 3D500000 		.4byte	.LASF666
 10327 000f 05       		.byte	0x5
 10328 0010 1A       		.uleb128 0x1a
 10329 0011 AB6A0000 		.4byte	.LASF667
 10330 0015 05       		.byte	0x5
 10331 0016 21       		.uleb128 0x21
 10332 0017 3F2E0000 		.4byte	.LASF668
 10333 001b 00       		.byte	0
 10334              		.section	.debug_macro,"G",%progbits,wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0,comdat
 10335              	.Ldebug_macro20:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 249


 10336 0000 0400     		.2byte	0x4
 10337 0002 00       		.byte	0
 10338 0003 05       		.byte	0x5
 10339 0004 16       		.uleb128 0x16
 10340 0005 8B6C0000 		.4byte	.LASF669
 10341 0009 05       		.byte	0x5
 10342 000a 1C       		.uleb128 0x1c
 10343 000b DC8F0000 		.4byte	.LASF670
 10344 000f 05       		.byte	0x5
 10345 0010 22       		.uleb128 0x22
 10346 0011 BD450000 		.4byte	.LASF671
 10347 0015 05       		.byte	0x5
 10348 0016 28       		.uleb128 0x28
 10349 0017 2C960000 		.4byte	.LASF672
 10350 001b 05       		.byte	0x5
 10351 001c 2E       		.uleb128 0x2e
 10352 001d 593D0000 		.4byte	.LASF673
 10353 0021 05       		.byte	0x5
 10354 0022 34       		.uleb128 0x34
 10355 0023 4D370000 		.4byte	.LASF674
 10356 0027 05       		.byte	0x5
 10357 0028 3A       		.uleb128 0x3a
 10358 0029 087F0000 		.4byte	.LASF675
 10359 002d 05       		.byte	0x5
 10360 002e 40       		.uleb128 0x40
 10361 002f 93350000 		.4byte	.LASF676
 10362 0033 05       		.byte	0x5
 10363 0034 4C       		.uleb128 0x4c
 10364 0035 CD590000 		.4byte	.LASF677
 10365 0039 05       		.byte	0x5
 10366 003a 56       		.uleb128 0x56
 10367 003b 4B5A0000 		.4byte	.LASF678
 10368 003f 05       		.byte	0x5
 10369 0040 60       		.uleb128 0x60
 10370 0041 EA0D0000 		.4byte	.LASF679
 10371 0045 05       		.byte	0x5
 10372 0046 6A       		.uleb128 0x6a
 10373 0047 35230000 		.4byte	.LASF680
 10374 004b 05       		.byte	0x5
 10375 004c AD01     		.uleb128 0xad
 10376 004e 35870000 		.4byte	.LASF681
 10377 0052 05       		.byte	0x5
 10378 0053 AE01     		.uleb128 0xae
 10379 0055 B6850000 		.4byte	.LASF682
 10380 0059 05       		.byte	0x5
 10381 005a AF01     		.uleb128 0xaf
 10382 005c D71D0000 		.4byte	.LASF683
 10383 0060 05       		.byte	0x5
 10384 0061 C501     		.uleb128 0xc5
 10385 0063 480F0000 		.4byte	.LASF684
 10386 0067 05       		.byte	0x5
 10387 0068 C601     		.uleb128 0xc6
 10388 006a C75D0000 		.4byte	.LASF685
 10389 006e 05       		.byte	0x5
 10390 006f C701     		.uleb128 0xc7
 10391 0071 50180000 		.4byte	.LASF686
 10392 0075 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 250


 10393 0076 CF01     		.uleb128 0xcf
 10394 0078 877E0000 		.4byte	.LASF687
 10395 007c 05       		.byte	0x5
 10396 007d D001     		.uleb128 0xd0
 10397 007f 5D2D0000 		.4byte	.LASF688
 10398 0083 05       		.byte	0x5
 10399 0084 D101     		.uleb128 0xd1
 10400 0086 D8160000 		.4byte	.LASF689
 10401 008a 05       		.byte	0x5
 10402 008b DB01     		.uleb128 0xdb
 10403 008d 561A0000 		.4byte	.LASF690
 10404 0091 05       		.byte	0x5
 10405 0092 DC01     		.uleb128 0xdc
 10406 0094 A9330000 		.4byte	.LASF691
 10407 0098 05       		.byte	0x5
 10408 0099 DD01     		.uleb128 0xdd
 10409 009b 57320000 		.4byte	.LASF692
 10410 009f 05       		.byte	0x5
 10411 00a0 E501     		.uleb128 0xe5
 10412 00a2 CF4E0000 		.4byte	.LASF693
 10413 00a6 05       		.byte	0x5
 10414 00a7 E601     		.uleb128 0xe6
 10415 00a9 B4090000 		.4byte	.LASF694
 10416 00ad 05       		.byte	0x5
 10417 00ae E701     		.uleb128 0xe7
 10418 00b0 9B440000 		.4byte	.LASF695
 10419 00b4 05       		.byte	0x5
 10420 00b5 F101     		.uleb128 0xf1
 10421 00b7 E66E0000 		.4byte	.LASF696
 10422 00bb 05       		.byte	0x5
 10423 00bc F201     		.uleb128 0xf2
 10424 00be 6A470000 		.4byte	.LASF697
 10425 00c2 05       		.byte	0x5
 10426 00c3 F301     		.uleb128 0xf3
 10427 00c5 4A0D0000 		.4byte	.LASF698
 10428 00c9 05       		.byte	0x5
 10429 00ca 8102     		.uleb128 0x101
 10430 00cc FE2F0000 		.4byte	.LASF699
 10431 00d0 05       		.byte	0x5
 10432 00d1 8202     		.uleb128 0x102
 10433 00d3 C4200000 		.4byte	.LASF700
 10434 00d7 05       		.byte	0x5
 10435 00d8 8302     		.uleb128 0x103
 10436 00da B27C0000 		.4byte	.LASF701
 10437 00de 05       		.byte	0x5
 10438 00df 9302     		.uleb128 0x113
 10439 00e1 817A0000 		.4byte	.LASF702
 10440 00e5 05       		.byte	0x5
 10441 00e6 9402     		.uleb128 0x114
 10442 00e8 27020000 		.4byte	.LASF703
 10443 00ec 05       		.byte	0x5
 10444 00ed 9502     		.uleb128 0x115
 10445 00ef 315A0000 		.4byte	.LASF704
 10446 00f3 05       		.byte	0x5
 10447 00f4 A302     		.uleb128 0x123
 10448 00f6 9D110000 		.4byte	.LASF705
 10449 00fa 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 251


 10450 00fb A402     		.uleb128 0x124
 10451 00fd 97340000 		.4byte	.LASF706
 10452 0101 05       		.byte	0x5
 10453 0102 A502     		.uleb128 0x125
 10454 0104 7E7C0000 		.4byte	.LASF707
 10455 0108 05       		.byte	0x5
 10456 0109 B302     		.uleb128 0x133
 10457 010b 8F550000 		.4byte	.LASF708
 10458 010f 05       		.byte	0x5
 10459 0110 B402     		.uleb128 0x134
 10460 0112 9F370000 		.4byte	.LASF709
 10461 0116 05       		.byte	0x5
 10462 0117 B502     		.uleb128 0x135
 10463 0119 03180000 		.4byte	.LASF710
 10464 011d 05       		.byte	0x5
 10465 011e C302     		.uleb128 0x143
 10466 0120 0E380000 		.4byte	.LASF711
 10467 0124 05       		.byte	0x5
 10468 0125 C402     		.uleb128 0x144
 10469 0127 5C8D0000 		.4byte	.LASF712
 10470 012b 05       		.byte	0x5
 10471 012c C502     		.uleb128 0x145
 10472 012e 2F130000 		.4byte	.LASF713
 10473 0132 05       		.byte	0x5
 10474 0133 D302     		.uleb128 0x153
 10475 0135 A9430000 		.4byte	.LASF714
 10476 0139 05       		.byte	0x5
 10477 013a D402     		.uleb128 0x154
 10478 013c 486E0000 		.4byte	.LASF715
 10479 0140 05       		.byte	0x5
 10480 0141 D502     		.uleb128 0x155
 10481 0143 5B630000 		.4byte	.LASF716
 10482 0147 05       		.byte	0x5
 10483 0148 E302     		.uleb128 0x163
 10484 014a 175E0000 		.4byte	.LASF717
 10485 014e 05       		.byte	0x5
 10486 014f E402     		.uleb128 0x164
 10487 0151 0F090000 		.4byte	.LASF718
 10488 0155 05       		.byte	0x5
 10489 0156 E502     		.uleb128 0x165
 10490 0158 56520000 		.4byte	.LASF719
 10491 015c 05       		.byte	0x5
 10492 015d F302     		.uleb128 0x173
 10493 015f 264B0000 		.4byte	.LASF720
 10494 0163 05       		.byte	0x5
 10495 0164 F402     		.uleb128 0x174
 10496 0166 EA1B0000 		.4byte	.LASF721
 10497 016a 05       		.byte	0x5
 10498 016b FC02     		.uleb128 0x17c
 10499 016d 29330000 		.4byte	.LASF722
 10500 0171 05       		.byte	0x5
 10501 0172 8403     		.uleb128 0x184
 10502 0174 54650000 		.4byte	.LASF723
 10503 0178 05       		.byte	0x5
 10504 0179 8A03     		.uleb128 0x18a
 10505 017b F4330000 		.4byte	.LASF724
 10506 017f 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 252


 10507 0180 8B03     		.uleb128 0x18b
 10508 0182 5C5C0000 		.4byte	.LASF725
 10509 0186 05       		.byte	0x5
 10510 0187 8F03     		.uleb128 0x18f
 10511 0189 BF6A0000 		.4byte	.LASF726
 10512 018d 05       		.byte	0x5
 10513 018e 9303     		.uleb128 0x193
 10514 0190 65950000 		.4byte	.LASF727
 10515 0194 05       		.byte	0x5
 10516 0195 9803     		.uleb128 0x198
 10517 0197 06600000 		.4byte	.LASF728
 10518 019b 05       		.byte	0x5
 10519 019c A303     		.uleb128 0x1a3
 10520 019e 17760000 		.4byte	.LASF729
 10521 01a2 05       		.byte	0x5
 10522 01a3 AD03     		.uleb128 0x1ad
 10523 01a5 6A260000 		.4byte	.LASF730
 10524 01a9 05       		.byte	0x5
 10525 01aa B203     		.uleb128 0x1b2
 10526 01ac 68030000 		.4byte	.LASF731
 10527 01b0 05       		.byte	0x5
 10528 01b1 B903     		.uleb128 0x1b9
 10529 01b3 F83D0000 		.4byte	.LASF732
 10530 01b7 05       		.byte	0x5
 10531 01b8 BA03     		.uleb128 0x1ba
 10532 01ba 107E0000 		.4byte	.LASF733
 10533 01be 05       		.byte	0x5
 10534 01bf C503     		.uleb128 0x1c5
 10535 01c1 6A0E0000 		.4byte	.LASF734
 10536 01c5 05       		.byte	0x5
 10537 01c6 C603     		.uleb128 0x1c6
 10538 01c8 20340000 		.4byte	.LASF735
 10539 01cc 05       		.byte	0x5
 10540 01cd D103     		.uleb128 0x1d1
 10541 01cf E2720000 		.4byte	.LASF736
 10542 01d3 05       		.byte	0x5
 10543 01d4 D203     		.uleb128 0x1d2
 10544 01d6 1C550000 		.4byte	.LASF737
 10545 01da 05       		.byte	0x5
 10546 01db DE03     		.uleb128 0x1de
 10547 01dd F6370000 		.4byte	.LASF738
 10548 01e1 05       		.byte	0x5
 10549 01e2 DF03     		.uleb128 0x1df
 10550 01e4 866F0000 		.4byte	.LASF739
 10551 01e8 05       		.byte	0x5
 10552 01e9 EE03     		.uleb128 0x1ee
 10553 01eb DA260000 		.4byte	.LASF740
 10554 01ef 05       		.byte	0x5
 10555 01f0 EF03     		.uleb128 0x1ef
 10556 01f2 5F620000 		.4byte	.LASF741
 10557 01f6 00       		.byte	0
 10558              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8,comda
 10559              	.Ldebug_macro21:
 10560 0000 0400     		.2byte	0x4
 10561 0002 00       		.byte	0
 10562 0003 05       		.byte	0x5
 10563 0004 44       		.uleb128 0x44
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 253


 10564 0005 28320000 		.4byte	.LASF743
 10565 0009 05       		.byte	0x5
 10566 000a 5C       		.uleb128 0x5c
 10567 000b 7C350000 		.4byte	.LASF744
 10568 000f 05       		.byte	0x5
 10569 0010 5D       		.uleb128 0x5d
 10570 0011 BB380000 		.4byte	.LASF745
 10571 0015 05       		.byte	0x5
 10572 0016 5E       		.uleb128 0x5e
 10573 0017 BD270000 		.4byte	.LASF746
 10574 001b 05       		.byte	0x5
 10575 001c 5F       		.uleb128 0x5f
 10576 001d BF370000 		.4byte	.LASF747
 10577 0021 05       		.byte	0x5
 10578 0022 60       		.uleb128 0x60
 10579 0023 948C0000 		.4byte	.LASF748
 10580 0027 05       		.byte	0x5
 10581 0028 61       		.uleb128 0x61
 10582 0029 A33A0000 		.4byte	.LASF749
 10583 002d 05       		.byte	0x5
 10584 002e 62       		.uleb128 0x62
 10585 002f 8B590000 		.4byte	.LASF750
 10586 0033 05       		.byte	0x5
 10587 0034 63       		.uleb128 0x63
 10588 0035 06470000 		.4byte	.LASF751
 10589 0039 05       		.byte	0x5
 10590 003a 64       		.uleb128 0x64
 10591 003b 3F1F0000 		.4byte	.LASF752
 10592 003f 05       		.byte	0x5
 10593 0040 65       		.uleb128 0x65
 10594 0041 57930000 		.4byte	.LASF753
 10595 0045 05       		.byte	0x5
 10596 0046 66       		.uleb128 0x66
 10597 0047 004A0000 		.4byte	.LASF754
 10598 004b 05       		.byte	0x5
 10599 004c 67       		.uleb128 0x67
 10600 004d C1010000 		.4byte	.LASF755
 10601 0051 05       		.byte	0x5
 10602 0052 68       		.uleb128 0x68
 10603 0053 F4600000 		.4byte	.LASF756
 10604 0057 05       		.byte	0x5
 10605 0058 69       		.uleb128 0x69
 10606 0059 6E460000 		.4byte	.LASF757
 10607 005d 05       		.byte	0x5
 10608 005e 6B       		.uleb128 0x6b
 10609 005f 365C0000 		.4byte	.LASF758
 10610 0063 05       		.byte	0x5
 10611 0064 6D       		.uleb128 0x6d
 10612 0065 88530000 		.4byte	.LASF759
 10613 0069 05       		.byte	0x5
 10614 006a 6E       		.uleb128 0x6e
 10615 006b 94030000 		.4byte	.LASF760
 10616 006f 05       		.byte	0x5
 10617 0070 6F       		.uleb128 0x6f
 10618 0071 D5370000 		.4byte	.LASF761
 10619 0075 05       		.byte	0x5
 10620 0076 70       		.uleb128 0x70
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 254


 10621 0077 4D440000 		.4byte	.LASF762
 10622 007b 05       		.byte	0x5
 10623 007c 71       		.uleb128 0x71
 10624 007d B2490000 		.4byte	.LASF763
 10625 0081 05       		.byte	0x5
 10626 0082 72       		.uleb128 0x72
 10627 0083 213D0000 		.4byte	.LASF764
 10628 0087 05       		.byte	0x5
 10629 0088 77       		.uleb128 0x77
 10630 0089 D15E0000 		.4byte	.LASF765
 10631 008d 05       		.byte	0x5
 10632 008e 78       		.uleb128 0x78
 10633 008f ED420000 		.4byte	.LASF766
 10634 0093 05       		.byte	0x5
 10635 0094 79       		.uleb128 0x79
 10636 0095 F8650000 		.4byte	.LASF767
 10637 0099 05       		.byte	0x5
 10638 009a 7A       		.uleb128 0x7a
 10639 009b 6E940000 		.4byte	.LASF768
 10640 009f 05       		.byte	0x5
 10641 00a0 7B       		.uleb128 0x7b
 10642 00a1 637E0000 		.4byte	.LASF769
 10643 00a5 05       		.byte	0x5
 10644 00a6 7C       		.uleb128 0x7c
 10645 00a7 012E0000 		.4byte	.LASF770
 10646 00ab 05       		.byte	0x5
 10647 00ac 7D       		.uleb128 0x7d
 10648 00ad FB5E0000 		.4byte	.LASF771
 10649 00b1 05       		.byte	0x5
 10650 00b2 7E       		.uleb128 0x7e
 10651 00b3 0D030000 		.4byte	.LASF772
 10652 00b7 05       		.byte	0x5
 10653 00b8 8101     		.uleb128 0x81
 10654 00ba 0D0F0000 		.4byte	.LASF773
 10655 00be 05       		.byte	0x5
 10656 00bf 8201     		.uleb128 0x82
 10657 00c1 B63D0000 		.4byte	.LASF774
 10658 00c5 05       		.byte	0x5
 10659 00c6 8301     		.uleb128 0x83
 10660 00c8 65090000 		.4byte	.LASF775
 10661 00cc 05       		.byte	0x5
 10662 00cd 8401     		.uleb128 0x84
 10663 00cf BD0F0000 		.4byte	.LASF776
 10664 00d3 05       		.byte	0x5
 10665 00d4 8701     		.uleb128 0x87
 10666 00d6 61280000 		.4byte	.LASF777
 10667 00da 05       		.byte	0x5
 10668 00db 8801     		.uleb128 0x88
 10669 00dd 02060000 		.4byte	.LASF778
 10670 00e1 05       		.byte	0x5
 10671 00e2 8901     		.uleb128 0x89
 10672 00e4 FB920000 		.4byte	.LASF779
 10673 00e8 05       		.byte	0x5
 10674 00e9 8A01     		.uleb128 0x8a
 10675 00eb 2F680000 		.4byte	.LASF780
 10676 00ef 05       		.byte	0x5
 10677 00f0 9001     		.uleb128 0x90
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 255


 10678 00f2 594A0000 		.4byte	.LASF781
 10679 00f6 05       		.byte	0x5
 10680 00f7 9401     		.uleb128 0x94
 10681 00f9 66910000 		.4byte	.LASF782
 10682 00fd 05       		.byte	0x5
 10683 00fe 9601     		.uleb128 0x96
 10684 0100 8A4A0000 		.4byte	.LASF783
 10685 0104 05       		.byte	0x5
 10686 0105 9C01     		.uleb128 0x9c
 10687 0107 37380000 		.4byte	.LASF784
 10688 010b 00       		.byte	0
 10689              		.section	.debug_macro,"G",%progbits,wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066,comdat
 10690              	.Ldebug_macro22:
 10691 0000 0400     		.2byte	0x4
 10692 0002 00       		.byte	0
 10693 0003 05       		.byte	0x5
 10694 0004 43       		.uleb128 0x43
 10695 0005 0D360000 		.4byte	.LASF785
 10696 0009 05       		.byte	0x5
 10697 000a 4C       		.uleb128 0x4c
 10698 000b 52400000 		.4byte	.LASF786
 10699 000f 05       		.byte	0x5
 10700 0010 4E       		.uleb128 0x4e
 10701 0011 D03C0000 		.4byte	.LASF787
 10702 0015 05       		.byte	0x5
 10703 0016 4F       		.uleb128 0x4f
 10704 0017 405E0000 		.4byte	.LASF788
 10705 001b 05       		.byte	0x5
 10706 001c 51       		.uleb128 0x51
 10707 001d 3A340000 		.4byte	.LASF789
 10708 0021 05       		.byte	0x5
 10709 0022 52       		.uleb128 0x52
 10710 0023 A2900000 		.4byte	.LASF790
 10711 0027 05       		.byte	0x5
 10712 0028 53       		.uleb128 0x53
 10713 0029 825F0000 		.4byte	.LASF791
 10714 002d 05       		.byte	0x5
 10715 002e 54       		.uleb128 0x54
 10716 002f 0C580000 		.4byte	.LASF792
 10717 0033 05       		.byte	0x5
 10718 0034 57       		.uleb128 0x57
 10719 0035 E1320000 		.4byte	.LASF793
 10720 0039 05       		.byte	0x5
 10721 003a 58       		.uleb128 0x58
 10722 003b 6B900000 		.4byte	.LASF794
 10723 003f 05       		.byte	0x5
 10724 0040 59       		.uleb128 0x59
 10725 0041 CE1A0000 		.4byte	.LASF795
 10726 0045 00       		.byte	0
 10727              		.section	.debug_macro,"G",%progbits,wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946,comdat
 10728              	.Ldebug_macro23:
 10729 0000 0400     		.2byte	0x4
 10730 0002 00       		.byte	0
 10731 0003 05       		.byte	0x5
 10732 0004 44       		.uleb128 0x44
 10733 0005 F7880000 		.4byte	.LASF797
 10734 0009 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 256


 10735 000a 55       		.uleb128 0x55
 10736 000b E5130000 		.4byte	.LASF798
 10737 000f 05       		.byte	0x5
 10738 0010 56       		.uleb128 0x56
 10739 0011 9F780000 		.4byte	.LASF799
 10740 0015 05       		.byte	0x5
 10741 0016 57       		.uleb128 0x57
 10742 0017 85230000 		.4byte	.LASF800
 10743 001b 05       		.byte	0x5
 10744 001c 58       		.uleb128 0x58
 10745 001d A0280000 		.4byte	.LASF801
 10746 0021 05       		.byte	0x5
 10747 0022 59       		.uleb128 0x59
 10748 0023 84520000 		.4byte	.LASF802
 10749 0027 05       		.byte	0x5
 10750 0028 5A       		.uleb128 0x5a
 10751 0029 A72B0000 		.4byte	.LASF803
 10752 002d 05       		.byte	0x5
 10753 002e 5B       		.uleb128 0x5b
 10754 002f 766A0000 		.4byte	.LASF804
 10755 0033 05       		.byte	0x5
 10756 0034 6A       		.uleb128 0x6a
 10757 0035 54680000 		.4byte	.LASF805
 10758 0039 05       		.byte	0x5
 10759 003a 6F       		.uleb128 0x6f
 10760 003b A2520000 		.4byte	.LASF806
 10761 003f 05       		.byte	0x5
 10762 0040 70       		.uleb128 0x70
 10763 0041 D0850000 		.4byte	.LASF807
 10764 0045 05       		.byte	0x5
 10765 0046 71       		.uleb128 0x71
 10766 0047 B6880000 		.4byte	.LASF808
 10767 004b 05       		.byte	0x5
 10768 004c 77       		.uleb128 0x77
 10769 004d 3C4E0000 		.4byte	.LASF809
 10770 0051 05       		.byte	0x5
 10771 0052 78       		.uleb128 0x78
 10772 0053 26440000 		.4byte	.LASF810
 10773 0057 05       		.byte	0x5
 10774 0058 79       		.uleb128 0x79
 10775 0059 BB0C0000 		.4byte	.LASF811
 10776 005d 05       		.byte	0x5
 10777 005e 7A       		.uleb128 0x7a
 10778 005f BE580000 		.4byte	.LASF812
 10779 0063 05       		.byte	0x5
 10780 0064 7B       		.uleb128 0x7b
 10781 0065 E38B0000 		.4byte	.LASF813
 10782 0069 05       		.byte	0x5
 10783 006a 8301     		.uleb128 0x83
 10784 006c 2F5B0000 		.4byte	.LASF814
 10785 0070 05       		.byte	0x5
 10786 0071 8401     		.uleb128 0x84
 10787 0073 BC7D0000 		.4byte	.LASF815
 10788 0077 05       		.byte	0x5
 10789 0078 8501     		.uleb128 0x85
 10790 007a 65810000 		.4byte	.LASF816
 10791 007e 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 257


 10792 007f 8601     		.uleb128 0x86
 10793 0081 E43B0000 		.4byte	.LASF817
 10794 0085 05       		.byte	0x5
 10795 0086 8701     		.uleb128 0x87
 10796 0088 21390000 		.4byte	.LASF818
 10797 008c 05       		.byte	0x5
 10798 008d 8801     		.uleb128 0x88
 10799 008f BA520000 		.4byte	.LASF819
 10800 0093 05       		.byte	0x5
 10801 0094 8E01     		.uleb128 0x8e
 10802 0096 7E680000 		.4byte	.LASF820
 10803 009a 05       		.byte	0x5
 10804 009b 8F01     		.uleb128 0x8f
 10805 009d 10350000 		.4byte	.LASF821
 10806 00a1 05       		.byte	0x5
 10807 00a2 9501     		.uleb128 0x95
 10808 00a4 9A080000 		.4byte	.LASF822
 10809 00a8 05       		.byte	0x5
 10810 00a9 9B01     		.uleb128 0x9b
 10811 00ab 72770000 		.4byte	.LASF823
 10812 00af 05       		.byte	0x5
 10813 00b0 AF01     		.uleb128 0xaf
 10814 00b2 E3710000 		.4byte	.LASF824
 10815 00b6 05       		.byte	0x5
 10816 00b7 B001     		.uleb128 0xb0
 10817 00b9 C2530000 		.4byte	.LASF825
 10818 00bd 05       		.byte	0x5
 10819 00be B401     		.uleb128 0xb4
 10820 00c0 60740000 		.4byte	.LASF826
 10821 00c4 05       		.byte	0x5
 10822 00c5 BC01     		.uleb128 0xbc
 10823 00c7 11920000 		.4byte	.LASF827
 10824 00cb 05       		.byte	0x5
 10825 00cc C001     		.uleb128 0xc0
 10826 00ce 5F860000 		.4byte	.LASF828
 10827 00d2 00       		.byte	0
 10828              		.section	.debug_macro,"G",%progbits,wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5,comdat
 10829              	.Ldebug_macro24:
 10830 0000 0400     		.2byte	0x4
 10831 0002 00       		.byte	0
 10832 0003 05       		.byte	0x5
 10833 0004 C502     		.uleb128 0x145
 10834 0006 2F740000 		.4byte	.LASF829
 10835 000a 05       		.byte	0x5
 10836 000b D902     		.uleb128 0x159
 10837 000d 95270000 		.4byte	.LASF830
 10838 0011 00       		.byte	0
 10839              		.section	.debug_macro,"G",%progbits,wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168,comdat
 10840              	.Ldebug_macro25:
 10841 0000 0400     		.2byte	0x4
 10842 0002 00       		.byte	0
 10843 0003 05       		.byte	0x5
 10844 0004 43       		.uleb128 0x43
 10845 0005 11650000 		.4byte	.LASF831
 10846 0009 05       		.byte	0x5
 10847 000a 9101     		.uleb128 0x91
 10848 000c 4A620000 		.4byte	.LASF832
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 258


 10849 0010 05       		.byte	0x5
 10850 0011 9201     		.uleb128 0x92
 10851 0013 451A0000 		.4byte	.LASF833
 10852 0017 05       		.byte	0x5
 10853 0018 9301     		.uleb128 0x93
 10854 001a F4070000 		.4byte	.LASF834
 10855 001e 00       		.byte	0
 10856              		.section	.debug_macro,"G",%progbits,wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e,comdat
 10857              	.Ldebug_macro26:
 10858 0000 0400     		.2byte	0x4
 10859 0002 00       		.byte	0
 10860 0003 05       		.byte	0x5
 10861 0004 AB01     		.uleb128 0xab
 10862 0006 84950000 		.4byte	.LASF835
 10863 000a 05       		.byte	0x5
 10864 000b AF01     		.uleb128 0xaf
 10865 000d 0D890000 		.4byte	.LASF836
 10866 0011 05       		.byte	0x5
 10867 0012 B301     		.uleb128 0xb3
 10868 0014 A35F0000 		.4byte	.LASF837
 10869 0018 05       		.byte	0x5
 10870 0019 B701     		.uleb128 0xb7
 10871 001b FF2E0000 		.4byte	.LASF838
 10872 001f 05       		.byte	0x5
 10873 0020 BB01     		.uleb128 0xbb
 10874 0022 53060000 		.4byte	.LASF839
 10875 0026 05       		.byte	0x5
 10876 0027 BF01     		.uleb128 0xbf
 10877 0029 C28B0000 		.4byte	.LASF840
 10878 002d 05       		.byte	0x5
 10879 002e C701     		.uleb128 0xc7
 10880 0030 11290000 		.4byte	.LASF841
 10881 0034 05       		.byte	0x5
 10882 0035 D301     		.uleb128 0xd3
 10883 0037 A2140000 		.4byte	.LASF842
 10884 003b 05       		.byte	0x5
 10885 003c DF01     		.uleb128 0xdf
 10886 003e 13240000 		.4byte	.LASF843
 10887 0042 05       		.byte	0x5
 10888 0043 EF01     		.uleb128 0xef
 10889 0045 BF6E0000 		.4byte	.LASF844
 10890 0049 05       		.byte	0x5
 10891 004a F301     		.uleb128 0xf3
 10892 004c 46960000 		.4byte	.LASF845
 10893 0050 05       		.byte	0x5
 10894 0051 F701     		.uleb128 0xf7
 10895 0053 2C780000 		.4byte	.LASF846
 10896 0057 05       		.byte	0x5
 10897 0058 FE01     		.uleb128 0xfe
 10898 005a 005E0000 		.4byte	.LASF847
 10899 005e 05       		.byte	0x5
 10900 005f 9302     		.uleb128 0x113
 10901 0061 0B110000 		.4byte	.LASF848
 10902 0065 05       		.byte	0x5
 10903 0066 9702     		.uleb128 0x117
 10904 0068 AC620000 		.4byte	.LASF849
 10905 006c 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 259


 10906 006d A402     		.uleb128 0x124
 10907 006f 521B0000 		.4byte	.LASF850
 10908 0073 05       		.byte	0x5
 10909 0074 A802     		.uleb128 0x128
 10910 0076 BD220000 		.4byte	.LASF851
 10911 007a 05       		.byte	0x5
 10912 007b AC02     		.uleb128 0x12c
 10913 007d D40C0000 		.4byte	.LASF852
 10914 0081 05       		.byte	0x5
 10915 0082 B902     		.uleb128 0x139
 10916 0084 95800000 		.4byte	.LASF853
 10917 0088 05       		.byte	0x5
 10918 0089 C002     		.uleb128 0x140
 10919 008b 8C080000 		.4byte	.LASF854
 10920 008f 05       		.byte	0x5
 10921 0090 C602     		.uleb128 0x146
 10922 0092 62080000 		.4byte	.LASF855
 10923 0096 05       		.byte	0x5
 10924 0097 CC02     		.uleb128 0x14c
 10925 0099 32010000 		.4byte	.LASF856
 10926 009d 05       		.byte	0x5
 10927 009e D202     		.uleb128 0x152
 10928 00a0 698C0000 		.4byte	.LASF857
 10929 00a4 05       		.byte	0x5
 10930 00a5 D702     		.uleb128 0x157
 10931 00a7 5F350000 		.4byte	.LASF858
 10932 00ab 05       		.byte	0x5
 10933 00ac DC02     		.uleb128 0x15c
 10934 00ae 2E040000 		.4byte	.LASF859
 10935 00b2 05       		.byte	0x5
 10936 00b3 E202     		.uleb128 0x162
 10937 00b5 F2560000 		.4byte	.LASF860
 10938 00b9 05       		.byte	0x5
 10939 00ba EB02     		.uleb128 0x16b
 10940 00bc 330C0000 		.4byte	.LASF861
 10941 00c0 05       		.byte	0x5
 10942 00c1 F302     		.uleb128 0x173
 10943 00c3 FC270000 		.4byte	.LASF862
 10944 00c7 05       		.byte	0x5
 10945 00c8 FB02     		.uleb128 0x17b
 10946 00ca FE5C0000 		.4byte	.LASF863
 10947 00ce 05       		.byte	0x5
 10948 00cf 8303     		.uleb128 0x183
 10949 00d1 DA800000 		.4byte	.LASF864
 10950 00d5 05       		.byte	0x5
 10951 00d6 8D03     		.uleb128 0x18d
 10952 00d8 5D600000 		.4byte	.LASF865
 10953 00dc 05       		.byte	0x5
 10954 00dd 9103     		.uleb128 0x191
 10955 00df E97E0000 		.4byte	.LASF866
 10956 00e3 05       		.byte	0x5
 10957 00e4 9503     		.uleb128 0x195
 10958 00e6 E0290000 		.4byte	.LASF867
 10959 00ea 05       		.byte	0x5
 10960 00eb 9903     		.uleb128 0x199
 10961 00ed 40560000 		.4byte	.LASF868
 10962 00f1 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 260


 10963 00f2 9D03     		.uleb128 0x19d
 10964 00f4 48800000 		.4byte	.LASF869
 10965 00f8 05       		.byte	0x5
 10966 00f9 A103     		.uleb128 0x1a1
 10967 00fb 2E400000 		.4byte	.LASF870
 10968 00ff 05       		.byte	0x5
 10969 0100 A503     		.uleb128 0x1a5
 10970 0102 75280000 		.4byte	.LASF871
 10971 0106 05       		.byte	0x5
 10972 0107 A903     		.uleb128 0x1a9
 10973 0109 41790000 		.4byte	.LASF872
 10974 010d 05       		.byte	0x5
 10975 010e AD03     		.uleb128 0x1ad
 10976 0110 4E720000 		.4byte	.LASF873
 10977 0114 05       		.byte	0x5
 10978 0115 B103     		.uleb128 0x1b1
 10979 0117 0D700000 		.4byte	.LASF874
 10980 011b 05       		.byte	0x5
 10981 011c B503     		.uleb128 0x1b5
 10982 011e 993B0000 		.4byte	.LASF875
 10983 0122 05       		.byte	0x5
 10984 0123 B903     		.uleb128 0x1b9
 10985 0125 8D0A0000 		.4byte	.LASF876
 10986 0129 05       		.byte	0x5
 10987 012a BD03     		.uleb128 0x1bd
 10988 012c 85830000 		.4byte	.LASF877
 10989 0130 05       		.byte	0x5
 10990 0131 C103     		.uleb128 0x1c1
 10991 0133 4E6F0000 		.4byte	.LASF878
 10992 0137 05       		.byte	0x5
 10993 0138 C503     		.uleb128 0x1c5
 10994 013a C9120000 		.4byte	.LASF879
 10995 013e 05       		.byte	0x5
 10996 013f C903     		.uleb128 0x1c9
 10997 0141 C67E0000 		.4byte	.LASF880
 10998 0145 05       		.byte	0x5
 10999 0146 CD03     		.uleb128 0x1cd
 11000 0148 F58F0000 		.4byte	.LASF881
 11001 014c 05       		.byte	0x5
 11002 014d D103     		.uleb128 0x1d1
 11003 014f 0E660000 		.4byte	.LASF882
 11004 0153 05       		.byte	0x5
 11005 0154 D503     		.uleb128 0x1d5
 11006 0156 D2940000 		.4byte	.LASF883
 11007 015a 05       		.byte	0x5
 11008 015b D903     		.uleb128 0x1d9
 11009 015d B45C0000 		.4byte	.LASF884
 11010 0161 05       		.byte	0x5
 11011 0162 DD03     		.uleb128 0x1dd
 11012 0164 1F4F0000 		.4byte	.LASF885
 11013 0168 05       		.byte	0x5
 11014 0169 E103     		.uleb128 0x1e1
 11015 016b 56200000 		.4byte	.LASF886
 11016 016f 05       		.byte	0x5
 11017 0170 E503     		.uleb128 0x1e5
 11018 0172 173C0000 		.4byte	.LASF887
 11019 0176 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 261


 11020 0177 E903     		.uleb128 0x1e9
 11021 0179 F05B0000 		.4byte	.LASF888
 11022 017d 05       		.byte	0x5
 11023 017e ED03     		.uleb128 0x1ed
 11024 0180 0E330000 		.4byte	.LASF889
 11025 0184 05       		.byte	0x5
 11026 0185 F103     		.uleb128 0x1f1
 11027 0187 2F1E0000 		.4byte	.LASF890
 11028 018b 05       		.byte	0x5
 11029 018c F503     		.uleb128 0x1f5
 11030 018e 8A3A0000 		.4byte	.LASF891
 11031 0192 05       		.byte	0x5
 11032 0193 F903     		.uleb128 0x1f9
 11033 0195 CA630000 		.4byte	.LASF892
 11034 0199 05       		.byte	0x5
 11035 019a FD03     		.uleb128 0x1fd
 11036 019c C2780000 		.4byte	.LASF893
 11037 01a0 05       		.byte	0x5
 11038 01a1 8104     		.uleb128 0x201
 11039 01a3 8C1B0000 		.4byte	.LASF894
 11040 01a7 05       		.byte	0x5
 11041 01a8 8504     		.uleb128 0x205
 11042 01aa 3D2F0000 		.4byte	.LASF895
 11043 01ae 05       		.byte	0x5
 11044 01af 8904     		.uleb128 0x209
 11045 01b1 305D0000 		.4byte	.LASF896
 11046 01b5 05       		.byte	0x5
 11047 01b6 8D04     		.uleb128 0x20d
 11048 01b8 240D0000 		.4byte	.LASF897
 11049 01bc 05       		.byte	0x5
 11050 01bd 9104     		.uleb128 0x211
 11051 01bf DC190000 		.4byte	.LASF898
 11052 01c3 05       		.byte	0x5
 11053 01c4 9504     		.uleb128 0x215
 11054 01c6 DD630000 		.4byte	.LASF899
 11055 01ca 05       		.byte	0x5
 11056 01cb 9904     		.uleb128 0x219
 11057 01cd 8B310000 		.4byte	.LASF900
 11058 01d1 05       		.byte	0x5
 11059 01d2 9D04     		.uleb128 0x21d
 11060 01d4 310E0000 		.4byte	.LASF901
 11061 01d8 05       		.byte	0x5
 11062 01d9 A104     		.uleb128 0x221
 11063 01db AC670000 		.4byte	.LASF902
 11064 01df 05       		.byte	0x5
 11065 01e0 A504     		.uleb128 0x225
 11066 01e2 B5140000 		.4byte	.LASF903
 11067 01e6 05       		.byte	0x5
 11068 01e7 A904     		.uleb128 0x229
 11069 01e9 D6280000 		.4byte	.LASF904
 11070 01ed 05       		.byte	0x5
 11071 01ee AD04     		.uleb128 0x22d
 11072 01f0 247D0000 		.4byte	.LASF905
 11073 01f4 05       		.byte	0x5
 11074 01f5 B104     		.uleb128 0x231
 11075 01f7 B51D0000 		.4byte	.LASF906
 11076 01fb 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 262


 11077 01fc B504     		.uleb128 0x235
 11078 01fe E78E0000 		.4byte	.LASF907
 11079 0202 05       		.byte	0x5
 11080 0203 B904     		.uleb128 0x239
 11081 0205 9F020000 		.4byte	.LASF908
 11082 0209 05       		.byte	0x5
 11083 020a BD04     		.uleb128 0x23d
 11084 020c F30A0000 		.4byte	.LASF909
 11085 0210 05       		.byte	0x5
 11086 0211 C104     		.uleb128 0x241
 11087 0213 CE860000 		.4byte	.LASF910
 11088 0217 05       		.byte	0x5
 11089 0218 C504     		.uleb128 0x245
 11090 021a C93F0000 		.4byte	.LASF911
 11091 021e 05       		.byte	0x5
 11092 021f C904     		.uleb128 0x249
 11093 0221 6E040000 		.4byte	.LASF912
 11094 0225 05       		.byte	0x5
 11095 0226 CD04     		.uleb128 0x24d
 11096 0228 AD350000 		.4byte	.LASF913
 11097 022c 05       		.byte	0x5
 11098 022d D104     		.uleb128 0x251
 11099 022f C2640000 		.4byte	.LASF914
 11100 0233 05       		.byte	0x5
 11101 0234 D504     		.uleb128 0x255
 11102 0236 751A0000 		.4byte	.LASF915
 11103 023a 05       		.byte	0x5
 11104 023b D904     		.uleb128 0x259
 11105 023d E3900000 		.4byte	.LASF916
 11106 0241 05       		.byte	0x5
 11107 0242 DD04     		.uleb128 0x25d
 11108 0244 396B0000 		.4byte	.LASF917
 11109 0248 05       		.byte	0x5
 11110 0249 E104     		.uleb128 0x261
 11111 024b 5F2F0000 		.4byte	.LASF918
 11112 024f 05       		.byte	0x5
 11113 0250 F704     		.uleb128 0x277
 11114 0252 D7610000 		.4byte	.LASF919
 11115 0256 05       		.byte	0x5
 11116 0257 FB04     		.uleb128 0x27b
 11117 0259 2F760000 		.4byte	.LASF920
 11118 025d 05       		.byte	0x5
 11119 025e FF04     		.uleb128 0x27f
 11120 0260 A8560000 		.4byte	.LASF921
 11121 0264 05       		.byte	0x5
 11122 0265 8305     		.uleb128 0x283
 11123 0267 6C0F0000 		.4byte	.LASF922
 11124 026b 05       		.byte	0x5
 11125 026c 8705     		.uleb128 0x287
 11126 026e F1410000 		.4byte	.LASF923
 11127 0272 05       		.byte	0x5
 11128 0273 8B05     		.uleb128 0x28b
 11129 0275 47670000 		.4byte	.LASF924
 11130 0279 05       		.byte	0x5
 11131 027a 9305     		.uleb128 0x293
 11132 027c 66700000 		.4byte	.LASF925
 11133 0280 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 263


 11134 0281 9B05     		.uleb128 0x29b
 11135 0283 5F560000 		.4byte	.LASF926
 11136 0287 05       		.byte	0x5
 11137 0288 9F05     		.uleb128 0x29f
 11138 028a 961D0000 		.4byte	.LASF927
 11139 028e 05       		.byte	0x5
 11140 028f A305     		.uleb128 0x2a3
 11141 0291 D0250000 		.4byte	.LASF928
 11142 0295 05       		.byte	0x5
 11143 0296 A705     		.uleb128 0x2a7
 11144 0298 0F1A0000 		.4byte	.LASF929
 11145 029c 05       		.byte	0x5
 11146 029d AB05     		.uleb128 0x2ab
 11147 029f 55710000 		.4byte	.LASF930
 11148 02a3 05       		.byte	0x5
 11149 02a4 AF05     		.uleb128 0x2af
 11150 02a6 AD6D0000 		.4byte	.LASF931
 11151 02aa 05       		.byte	0x5
 11152 02ab B305     		.uleb128 0x2b3
 11153 02ad 2C8E0000 		.4byte	.LASF932
 11154 02b1 05       		.byte	0x5
 11155 02b2 B705     		.uleb128 0x2b7
 11156 02b4 7A340000 		.4byte	.LASF933
 11157 02b8 05       		.byte	0x5
 11158 02b9 BB05     		.uleb128 0x2bb
 11159 02bb 3F8A0000 		.4byte	.LASF934
 11160 02bf 05       		.byte	0x5
 11161 02c0 C705     		.uleb128 0x2c7
 11162 02c2 AB5B0000 		.4byte	.LASF935
 11163 02c6 05       		.byte	0x5
 11164 02c7 CB05     		.uleb128 0x2cb
 11165 02c9 64800000 		.4byte	.LASF936
 11166 02cd 05       		.byte	0x5
 11167 02ce D505     		.uleb128 0x2d5
 11168 02d0 CB410000 		.4byte	.LASF937
 11169 02d4 05       		.byte	0x5
 11170 02d5 D905     		.uleb128 0x2d9
 11171 02d7 CF170000 		.4byte	.LASF938
 11172 02db 05       		.byte	0x5
 11173 02dc DA05     		.uleb128 0x2da
 11174 02de 6F540000 		.4byte	.LASF939
 11175 02e2 05       		.byte	0x5
 11176 02e3 DB05     		.uleb128 0x2db
 11177 02e5 DF3D0000 		.4byte	.LASF940
 11178 02e9 05       		.byte	0x5
 11179 02ea DC05     		.uleb128 0x2dc
 11180 02ec CA460000 		.4byte	.LASF941
 11181 02f0 05       		.byte	0x5
 11182 02f1 DD05     		.uleb128 0x2dd
 11183 02f3 02530000 		.4byte	.LASF942
 11184 02f7 05       		.byte	0x5
 11185 02f8 DE05     		.uleb128 0x2de
 11186 02fa 9C540000 		.4byte	.LASF943
 11187 02fe 05       		.byte	0x5
 11188 02ff DF05     		.uleb128 0x2df
 11189 0301 9D630000 		.4byte	.LASF944
 11190 0305 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 264


 11191 0306 E005     		.uleb128 0x2e0
 11192 0308 101D0000 		.4byte	.LASF945
 11193 030c 05       		.byte	0x5
 11194 030d E105     		.uleb128 0x2e1
 11195 030f D2230000 		.4byte	.LASF946
 11196 0313 05       		.byte	0x5
 11197 0314 E205     		.uleb128 0x2e2
 11198 0316 E9910000 		.4byte	.LASF947
 11199 031a 05       		.byte	0x5
 11200 031b E305     		.uleb128 0x2e3
 11201 031d 5F780000 		.4byte	.LASF948
 11202 0321 05       		.byte	0x5
 11203 0322 E405     		.uleb128 0x2e4
 11204 0324 902C0000 		.4byte	.LASF949
 11205 0328 05       		.byte	0x5
 11206 0329 E505     		.uleb128 0x2e5
 11207 032b C72E0000 		.4byte	.LASF950
 11208 032f 05       		.byte	0x5
 11209 0330 E605     		.uleb128 0x2e6
 11210 0332 4A0B0000 		.4byte	.LASF951
 11211 0336 05       		.byte	0x5
 11212 0337 E705     		.uleb128 0x2e7
 11213 0339 A6460000 		.4byte	.LASF952
 11214 033d 05       		.byte	0x5
 11215 033e EB05     		.uleb128 0x2eb
 11216 0340 08370000 		.4byte	.LASF953
 11217 0344 05       		.byte	0x5
 11218 0345 EC05     		.uleb128 0x2ec
 11219 0347 6B6F0000 		.4byte	.LASF954
 11220 034b 05       		.byte	0x5
 11221 034c ED05     		.uleb128 0x2ed
 11222 034e B5900000 		.4byte	.LASF955
 11223 0352 05       		.byte	0x5
 11224 0353 EE05     		.uleb128 0x2ee
 11225 0355 D1380000 		.4byte	.LASF956
 11226 0359 00       		.byte	0
 11227              		.section	.debug_macro,"G",%progbits,wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370,comdat
 11228              	.Ldebug_macro27:
 11229 0000 0400     		.2byte	0x4
 11230 0002 00       		.byte	0
 11231 0003 05       		.byte	0x5
 11232 0004 60       		.uleb128 0x60
 11233 0005 65480000 		.4byte	.LASF958
 11234 0009 05       		.byte	0x5
 11235 000a 7F       		.uleb128 0x7f
 11236 000b 6D3D0000 		.4byte	.LASF959
 11237 000f 05       		.byte	0x5
 11238 0010 AB01     		.uleb128 0xab
 11239 0012 54890000 		.4byte	.LASF960
 11240 0016 05       		.byte	0x5
 11241 0017 B401     		.uleb128 0xb4
 11242 0019 E4390000 		.4byte	.LASF961
 11243 001d 05       		.byte	0x5
 11244 001e BD01     		.uleb128 0xbd
 11245 0020 9E6C0000 		.4byte	.LASF962
 11246 0024 05       		.byte	0x5
 11247 0025 C701     		.uleb128 0xc7
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 265


 11248 0027 65790000 		.4byte	.LASF963
 11249 002b 05       		.byte	0x5
 11250 002c D001     		.uleb128 0xd0
 11251 002e 071C0000 		.4byte	.LASF964
 11252 0032 05       		.byte	0x5
 11253 0033 D801     		.uleb128 0xd8
 11254 0035 CA040000 		.4byte	.LASF965
 11255 0039 05       		.byte	0x5
 11256 003a E001     		.uleb128 0xe0
 11257 003c F24A0000 		.4byte	.LASF966
 11258 0040 05       		.byte	0x5
 11259 0041 E801     		.uleb128 0xe8
 11260 0043 11770000 		.4byte	.LASF967
 11261 0047 05       		.byte	0x5
 11262 0048 F101     		.uleb128 0xf1
 11263 004a 8B8E0000 		.4byte	.LASF968
 11264 004e 05       		.byte	0x5
 11265 004f F601     		.uleb128 0xf6
 11266 0051 C6840000 		.4byte	.LASF969
 11267 0055 05       		.byte	0x5
 11268 0056 8C02     		.uleb128 0x10c
 11269 0058 DB7A0000 		.4byte	.LASF970
 11270 005c 05       		.byte	0x5
 11271 005d AA02     		.uleb128 0x12a
 11272 005f 6B070000 		.4byte	.LASF971
 11273 0063 05       		.byte	0x5
 11274 0064 B502     		.uleb128 0x135
 11275 0066 E1150000 		.4byte	.LASF972
 11276 006a 05       		.byte	0x5
 11277 006b BD02     		.uleb128 0x13d
 11278 006d A51E0000 		.4byte	.LASF973
 11279 0071 05       		.byte	0x5
 11280 0072 C402     		.uleb128 0x144
 11281 0074 FB180000 		.4byte	.LASF974
 11282 0078 00       		.byte	0
 11283              		.section	.debug_macro,"G",%progbits,wm4.task.h.84.e110bc08aaffa67ce542955b890201b4,comdat
 11284              	.Ldebug_macro28:
 11285 0000 0400     		.2byte	0x4
 11286 0002 00       		.byte	0
 11287 0003 05       		.byte	0x5
 11288 0004 54       		.uleb128 0x54
 11289 0005 C0720000 		.4byte	.LASF975
 11290 0009 05       		.byte	0x5
 11291 000a 55       		.uleb128 0x55
 11292 000b A8530000 		.4byte	.LASF976
 11293 000f 05       		.byte	0x5
 11294 0010 56       		.uleb128 0x56
 11295 0011 15130000 		.4byte	.LASF977
 11296 0015 05       		.byte	0x5
 11297 0016 57       		.uleb128 0x57
 11298 0017 E45C0000 		.4byte	.LASF978
 11299 001b 05       		.byte	0x5
 11300 001c B201     		.uleb128 0xb2
 11301 001e 41140000 		.4byte	.LASF979
 11302 0022 05       		.byte	0x5
 11303 0023 BC01     		.uleb128 0xbc
 11304 0025 71320000 		.4byte	.LASF980
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 266


 11305 0029 05       		.byte	0x5
 11306 002a CA01     		.uleb128 0xca
 11307 002c B0420000 		.4byte	.LASF981
 11308 0030 05       		.byte	0x5
 11309 0031 D801     		.uleb128 0xd8
 11310 0033 3E700000 		.4byte	.LASF982
 11311 0037 05       		.byte	0x5
 11312 0038 E201     		.uleb128 0xe2
 11313 003a 5D550000 		.4byte	.LASF983
 11314 003e 05       		.byte	0x5
 11315 003f EC01     		.uleb128 0xec
 11316 0041 FE110000 		.4byte	.LASF984
 11317 0045 05       		.byte	0x5
 11318 0046 F101     		.uleb128 0xf1
 11319 0048 2C580000 		.4byte	.LASF985
 11320 004c 05       		.byte	0x5
 11321 004d F201     		.uleb128 0xf2
 11322 004f 308D0000 		.4byte	.LASF986
 11323 0053 05       		.byte	0x5
 11324 0054 F301     		.uleb128 0xf3
 11325 0056 82860000 		.4byte	.LASF987
 11326 005a 05       		.byte	0x5
 11327 005b CA02     		.uleb128 0x14a
 11328 005d F2240000 		.4byte	.LASF988
 11329 0061 05       		.byte	0x5
 11330 0062 8F03     		.uleb128 0x18f
 11331 0064 19730000 		.4byte	.LASF989
 11332 0068 00       		.byte	0
 11333              		.section	.debug_macro,"G",%progbits,wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d,comdat
 11334              	.Ldebug_macro29:
 11335 0000 0400     		.2byte	0x4
 11336 0002 00       		.byte	0
 11337 0003 05       		.byte	0x5
 11338 0004 5C       		.uleb128 0x5c
 11339 0005 943E0000 		.4byte	.LASF991
 11340 0009 05       		.byte	0x5
 11341 000a 5D       		.uleb128 0x5d
 11342 000b F56C0000 		.4byte	.LASF992
 11343 000f 05       		.byte	0x5
 11344 0010 5E       		.uleb128 0x5e
 11345 0011 84490000 		.4byte	.LASF993
 11346 0015 05       		.byte	0x5
 11347 0016 5F       		.uleb128 0x5f
 11348 0017 FF300000 		.4byte	.LASF994
 11349 001b 05       		.byte	0x5
 11350 001c 60       		.uleb128 0x60
 11351 001d 9C6E0000 		.4byte	.LASF995
 11352 0021 05       		.byte	0x5
 11353 0022 61       		.uleb128 0x61
 11354 0023 E5590000 		.4byte	.LASF996
 11355 0027 05       		.byte	0x5
 11356 0028 62       		.uleb128 0x62
 11357 0029 24150000 		.4byte	.LASF997
 11358 002d 05       		.byte	0x5
 11359 002e 63       		.uleb128 0x63
 11360 002f 98570000 		.4byte	.LASF998
 11361 0033 05       		.byte	0x5
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 267


 11362 0034 65       		.uleb128 0x65
 11363 0035 0E460000 		.4byte	.LASF999
 11364 0039 05       		.byte	0x5
 11365 003a 66       		.uleb128 0x66
 11366 003b EC480000 		.4byte	.LASF1000
 11367 003f 05       		.byte	0x5
 11368 0040 67       		.uleb128 0x67
 11369 0041 D5210000 		.4byte	.LASF1001
 11370 0045 05       		.byte	0x5
 11371 0046 68       		.uleb128 0x68
 11372 0047 B30A0000 		.4byte	.LASF1002
 11373 004b 05       		.byte	0x5
 11374 004c 69       		.uleb128 0x69
 11375 004d B5910000 		.4byte	.LASF1003
 11376 0051 05       		.byte	0x5
 11377 0052 FA02     		.uleb128 0x17a
 11378 0054 EF690000 		.4byte	.LASF1004
 11379 0058 05       		.byte	0x5
 11380 0059 A403     		.uleb128 0x1a4
 11381 005b B6700000 		.4byte	.LASF1005
 11382 005f 05       		.byte	0x5
 11383 0060 F403     		.uleb128 0x1f4
 11384 0062 F9630000 		.4byte	.LASF1006
 11385 0066 05       		.byte	0x5
 11386 0067 9A04     		.uleb128 0x21a
 11387 0069 97660000 		.4byte	.LASF1007
 11388 006d 05       		.byte	0x5
 11389 006e 9605     		.uleb128 0x296
 11390 0070 757F0000 		.4byte	.LASF1008
 11391 0074 05       		.byte	0x5
 11392 0075 EC05     		.uleb128 0x2ec
 11393 0077 E8200000 		.4byte	.LASF1009
 11394 007b 05       		.byte	0x5
 11395 007c AB06     		.uleb128 0x32b
 11396 007e EE440000 		.4byte	.LASF1010
 11397 0082 05       		.byte	0x5
 11398 0083 F406     		.uleb128 0x374
 11399 0085 BE870000 		.4byte	.LASF1011
 11400 0089 05       		.byte	0x5
 11401 008a CA07     		.uleb128 0x3ca
 11402 008c DA2B0000 		.4byte	.LASF1012
 11403 0090 00       		.byte	0
 11404              		.section	.debug_macro,"G",%progbits,wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95,comdat
 11405              	.Ldebug_macro30:
 11406 0000 0400     		.2byte	0x4
 11407 0002 00       		.byte	0
 11408 0003 05       		.byte	0x5
 11409 0004 43       		.uleb128 0x43
 11410 0005 272D0000 		.4byte	.LASF1013
 11411 0009 05       		.byte	0x5
 11412 000a 58       		.uleb128 0x58
 11413 000b C9340000 		.4byte	.LASF1014
 11414 000f 05       		.byte	0x5
 11415 0010 59       		.uleb128 0x59
 11416 0011 C42D0000 		.4byte	.LASF1015
 11417 0015 00       		.byte	0
 11418              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 268


 11419              	.Ldebug_line0:
 11420 0000 CF0A0000 		.section	.debug_str,"MS",%progbits,1
 11420      0200E902 
 11420      00000201 
 11420      FB0E0D00 
 11420      01010101 
 11421              	.LASF574:
 11422 0000 5F5F474E 		.ascii	"__GNUCLIKE___SECTION 1\000"
 11422      55434C49 
 11422      4B455F5F 
 11422      5F534543 
 11422      54494F4E 
 11423              	.LASF1050:
 11424 0017 53746163 		.ascii	"StackT_t\000"
 11424      6B545F74 
 11424      00
 11425              	.LASF157:
 11426 0020 5F5F4445 		.ascii	"__DECIMAL_DIG__ 17\000"
 11426      43494D41 
 11426      4C5F4449 
 11426      475F5F20 
 11426      313700
 11427              	.LASF528:
 11428 0033 5F524545 		.ascii	"_REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)\000"
 11428      4E545F4D 
 11428      505F5245 
 11428      53554C54 
 11428      5F4B2870 
 11429              	.LASF136:
 11430 005e 5F5F464C 		.ascii	"__FLT_HAS_QUIET_NAN__ 1\000"
 11430      545F4841 
 11430      535F5155 
 11430      4945545F 
 11430      4E414E5F 
 11431              	.LASF1218:
 11432 0076 78596965 		.ascii	"xYieldPending\000"
 11432      6C645065 
 11432      6E64696E 
 11432      6700
 11433              	.LASF110:
 11434 0084 5F5F494E 		.ascii	"__INT_FAST32_MAX__ 2147483647\000"
 11434      545F4641 
 11434      53543332 
 11434      5F4D4158 
 11434      5F5F2032 
 11435              	.LASF1035:
 11436 00a2 756E7369 		.ascii	"unsigned char\000"
 11436      676E6564 
 11436      20636861 
 11436      7200
 11437              	.LASF545:
 11438 00b0 5F524545 		.ascii	"_REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._ge"
 11438      4E545F47 
 11438      45544441 
 11438      54455F45 
 11438      52525F50 
 11439 00e3 74646174 		.ascii	"tdate_err))\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 269


 11439      655F6572 
 11439      72292900 
 11440              	.LASF306:
 11441 00ef 5F5F4348 		.ascii	"__CHAR_UNSIGNED__ 1\000"
 11441      41525F55 
 11441      4E534947 
 11441      4E45445F 
 11441      5F203100 
 11442              	.LASF1033:
 11443 0103 73697A65 		.ascii	"size_t\000"
 11443      5F7400
 11444              	.LASF550:
 11445 010a 5F474C4F 		.ascii	"_GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)\000"
 11445      42414C5F 
 11445      41544558 
 11445      49542028 
 11445      5F474C4F 
 11446              	.LASF856:
 11447 0132 74726163 		.ascii	"traceTASK_SWITCHED_IN() \000"
 11447      65544153 
 11447      4B5F5357 
 11447      49544348 
 11447      45445F49 
 11448              	.LASF186:
 11449 014b 5F5F5346 		.ascii	"__SFRACT_FBIT__ 7\000"
 11449      52414354 
 11449      5F464249 
 11449      545F5F20 
 11449      3700
 11450              	.LASF1044:
 11451 015d 73697A65 		.ascii	"sizetype\000"
 11451      74797065 
 11451      00
 11452              	.LASF71:
 11453 0166 5F5F4C4F 		.ascii	"__LONG_LONG_MAX__ 9223372036854775807LL\000"
 11453      4E475F4C 
 11453      4F4E475F 
 11453      4D41585F 
 11453      5F203932 
 11454              	.LASF79:
 11455 018e 5F5F494E 		.ascii	"__INTMAX_C(c) c ## LL\000"
 11455      544D4158 
 11455      5F432863 
 11455      29206320 
 11455      2323204C 
 11456              	.LASF384:
 11457 01a4 5F524541 		.ascii	"_READ_WRITE_BUFSIZE_TYPE int\000"
 11457      445F5752 
 11457      4954455F 
 11457      42554653 
 11457      495A455F 
 11458              	.LASF755:
 11459 01c1 636F6E66 		.ascii	"configIDLE_SHOULD_YIELD 0\000"
 11459      69674944 
 11459      4C455F53 
 11459      484F554C 
 11459      445F5949 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 270


 11460              	.LASF1154:
 11461 01db 75785175 		.ascii	"uxQueue\000"
 11461      65756500 
 11462              	.LASF258:
 11463 01e3 5F5F4C4C 		.ascii	"__LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)\000"
 11463      41434355 
 11463      4D5F4D49 
 11463      4E5F5F20 
 11463      282D3058 
 11464              	.LASF250:
 11465 020a 5F5F4C41 		.ascii	"__LACCUM_EPSILON__ 0x1P-31LK\000"
 11465      4343554D 
 11465      5F455053 
 11465      494C4F4E 
 11465      5F5F2030 
 11466              	.LASF703:
 11467 0227 494E5436 		.ascii	"INT64_MAX __INT64_MAX__\000"
 11467      345F4D41 
 11467      58205F5F 
 11467      494E5436 
 11467      345F4D41 
 11468              	.LASF183:
 11469 023f 5F5F4445 		.ascii	"__DEC128_MAX__ 9.999999999999999999999999999999999E"
 11469      43313238 
 11469      5F4D4158 
 11469      5F5F2039 
 11469      2E393939 
 11470 0272 36313434 		.ascii	"6144DL\000"
 11470      444C00
 11471              	.LASF404:
 11472 0279 5F4C4F4E 		.ascii	"_LONG_DOUBLE long double\000"
 11472      475F444F 
 11472      55424C45 
 11472      206C6F6E 
 11472      6720646F 
 11473              	.LASF1108:
 11474 0292 75735374 		.ascii	"usStackDepth\000"
 11474      61636B44 
 11474      65707468 
 11474      00
 11475              	.LASF908:
 11476 029f 74726163 		.ascii	"traceEVENT_GROUP_SYNC_END(xEventGroup,uxBitsToSet,u"
 11476      65455645 
 11476      4E545F47 
 11476      524F5550 
 11476      5F53594E 
 11477 02d2 78426974 		.ascii	"xBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutO"
 11477      73546F57 
 11477      61697446 
 11477      6F722C78 
 11477      54696D65 
 11478 0305 63637572 		.ascii	"ccurred\000"
 11478      72656400 
 11479              	.LASF772:
 11480 030d 494E434C 		.ascii	"INCLUDE_uxTaskGetStackHighWaterMark 1\000"
 11480      5544455F 
 11480      75785461 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 271


 11480      736B4765 
 11480      74537461 
 11481              	.LASF171:
 11482 0333 5F5F4445 		.ascii	"__DEC32_SUBNORMAL_MIN__ 0.000001E-95DF\000"
 11482      4333325F 
 11482      5355424E 
 11482      4F524D41 
 11482      4C5F4D49 
 11483              	.LASF275:
 11484 035a 5F5F5451 		.ascii	"__TQ_IBIT__ 0\000"
 11484      5F494249 
 11484      545F5F20 
 11484      3000
 11485              	.LASF731:
 11486 0368 57494E54 		.ascii	"WINT_MIN __WINT_MIN__\000"
 11486      5F4D494E 
 11486      205F5F57 
 11486      494E545F 
 11486      4D494E5F 
 11487              	.LASF511:
 11488 037e 5F524545 		.ascii	"_REENT_SIGNAL_SIZE 24\000"
 11488      4E545F53 
 11488      49474E41 
 11488      4C5F5349 
 11488      5A452032 
 11489              	.LASF760:
 11490 0394 636F6E66 		.ascii	"configUSE_ALTERNATIVE_API 0\000"
 11490      69675553 
 11490      455F414C 
 11490      5445524E 
 11490      41544956 
 11491              	.LASF546:
 11492 03b0 5F4B6D61 		.ascii	"_Kmax (sizeof (size_t) << 3)\000"
 11492      78202873 
 11492      697A656F 
 11492      66202873 
 11492      697A655F 
 11493              	.LASF11:
 11494 03cd 5F5F4154 		.ascii	"__ATOMIC_CONSUME 1\000"
 11494      4F4D4943 
 11494      5F434F4E 
 11494      53554D45 
 11494      203100
 11495              	.LASF251:
 11496 03e0 5F5F554C 		.ascii	"__ULACCUM_FBIT__ 32\000"
 11496      41434355 
 11496      4D5F4642 
 11496      49545F5F 
 11496      20333200 
 11497              	.LASF1148:
 11498 03f4 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 11498      6B476574 
 11498      5469636B 
 11498      436F756E 
 11498      7446726F 
 11499              	.LASF238:
 11500 040d 5F5F4143 		.ascii	"__ACCUM_MIN__ (-0X1P15K-0X1P15K)\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 272


 11500      43554D5F 
 11500      4D494E5F 
 11500      5F20282D 
 11500      30583150 
 11501              	.LASF859:
 11502 042e 74726163 		.ascii	"traceLOW_POWER_IDLE_END() \000"
 11502      654C4F57 
 11502      5F504F57 
 11502      45525F49 
 11502      444C455F 
 11503              	.LASF1084:
 11504 0449 4D656D6F 		.ascii	"MemoryRegion_t\000"
 11504      72795265 
 11504      67696F6E 
 11504      5F7400
 11505              	.LASF572:
 11506 0458 5F5F474E 		.ascii	"__GNUCLIKE___TYPEOF 1\000"
 11506      55434C49 
 11506      4B455F5F 
 11506      5F545950 
 11506      454F4620 
 11507              	.LASF912:
 11508 046e 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(xEventGroup,ux"
 11508      65455645 
 11508      4E545F47 
 11508      524F5550 
 11508      5F434C45 
 11509 04a1 42697473 		.ascii	"BitsToClear) \000"
 11509      546F436C 
 11509      65617229 
 11509      2000
 11510              	.LASF1098:
 11511 04af 78457665 		.ascii	"xEventListItem\000"
 11511      6E744C69 
 11511      73744974 
 11511      656D00
 11512              	.LASF1032:
 11513 04be 7369676E 		.ascii	"signed char\000"
 11513      65642063 
 11513      68617200 
 11514              	.LASF965:
 11515 04ca 6C697374 		.ascii	"listGET_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd"
 11515      4745545F 
 11515      48454144 
 11515      5F454E54 
 11515      52592870 
 11516 04fd 20292E70 		.ascii	" ).pxNext )\000"
 11516      784E6578 
 11516      74202900 
 11517              	.LASF1075:
 11518 0509 65546173 		.ascii	"eTaskState\000"
 11518      6B537461 
 11518      746500
 11519              	.LASF113:
 11520 0514 5F5F5549 		.ascii	"__UINT_FAST16_MAX__ 4294967295U\000"
 11520      4E545F46 
 11520      41535431 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 273


 11520      365F4D41 
 11520      585F5F20 
 11521              	.LASF15:
 11522 0534 5F5F5349 		.ascii	"__SIZEOF_LONG_LONG__ 8\000"
 11522      5A454F46 
 11522      5F4C4F4E 
 11522      475F4C4F 
 11522      4E475F5F 
 11523              	.LASF1023:
 11524 054b 74736B53 		.ascii	"tskSUSPENDED_CHAR ( 'S' )\000"
 11524      55535045 
 11524      4E444544 
 11524      5F434841 
 11524      52202820 
 11525              	.LASF142:
 11526 0565 5F5F4442 		.ascii	"__DBL_MAX_10_EXP__ 308\000"
 11526      4C5F4D41 
 11526      585F3130 
 11526      5F455850 
 11526      5F5F2033 
 11527              	.LASF1164:
 11528 057c 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 11528      6B506C61 
 11528      63654F6E 
 11528      556E6F72 
 11528      64657265 
 11529              	.LASF641:
 11530 059b 5F5F5243 		.ascii	"__RCSID_SOURCE(s) struct __hack\000"
 11530      5349445F 
 11530      534F5552 
 11530      43452873 
 11530      29207374 
 11531              	.LASF198:
 11532 05bb 5F5F4652 		.ascii	"__FRACT_MIN__ (-0.5R-0.5R)\000"
 11532      4143545F 
 11532      4D494E5F 
 11532      5F20282D 
 11532      302E3552 
 11533              	.LASF264:
 11534 05d6 5F5F554C 		.ascii	"__ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK\000"
 11534      4C414343 
 11534      554D5F4D 
 11534      41585F5F 
 11534      20305846 
 11535              	.LASF778:
 11536 0602 636F6E66 		.ascii	"configNET_MASK1 255\000"
 11536      69674E45 
 11536      545F4D41 
 11536      534B3120 
 11536      32353500 
 11537              	.LASF234:
 11538 0616 5F5F5553 		.ascii	"__USACCUM_MAX__ 0XFFFFP-8UHK\000"
 11538      41434355 
 11538      4D5F4D41 
 11538      585F5F20 
 11538      30584646 
 11539              	.LASF1152:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 274


 11540 0633 70756C54 		.ascii	"pulTotalRunTime\000"
 11540      6F74616C 
 11540      52756E54 
 11540      696D6500 
 11541              	.LASF346:
 11542 0643 5F5F4152 		.ascii	"__ARM_NEON_FP 4\000"
 11542      4D5F4E45 
 11542      4F4E5F46 
 11542      50203400 
 11543              	.LASF839:
 11544 0653 494E434C 		.ascii	"INCLUDE_pcTaskGetTaskName 0\000"
 11544      5544455F 
 11544      70635461 
 11544      736B4765 
 11544      74546173 
 11545              	.LASF271:
 11546 066f 5F5F5351 		.ascii	"__SQ_IBIT__ 0\000"
 11546      5F494249 
 11546      545F5F20 
 11546      3000
 11547              	.LASF25:
 11548 067d 5F5F4F52 		.ascii	"__ORDER_PDP_ENDIAN__ 3412\000"
 11548      4445525F 
 11548      5044505F 
 11548      454E4449 
 11548      414E5F5F 
 11549              	.LASF29:
 11550 0697 5F5F5349 		.ascii	"__SIZE_TYPE__ unsigned int\000"
 11550      5A455F54 
 11550      5950455F 
 11550      5F20756E 
 11550      7369676E 
 11551              	.LASF174:
 11552 06b2 5F5F4445 		.ascii	"__DEC64_MAX_EXP__ 385\000"
 11552      4336345F 
 11552      4D41585F 
 11552      4558505F 
 11552      5F203338 
 11553              	.LASF742:
 11554 06c8 5F474343 		.ascii	"_GCC_WRAP_STDINT_H \000"
 11554      5F575241 
 11554      505F5354 
 11554      44494E54 
 11554      5F482000 
 11555              	.LASF134:
 11556 06dc 5F5F464C 		.ascii	"__FLT_HAS_DENORM__ 1\000"
 11556      545F4841 
 11556      535F4445 
 11556      4E4F524D 
 11556      5F5F2031 
 11557              	.LASF38:
 11558 06f1 5F5F494E 		.ascii	"__INT8_TYPE__ signed char\000"
 11558      54385F54 
 11558      5950455F 
 11558      5F207369 
 11558      676E6564 
 11559              	.LASF334:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 275


 11560 070b 5F5F4152 		.ascii	"__ARM_ARCH_PROFILE 77\000"
 11560      4D5F4152 
 11560      43485F50 
 11560      524F4649 
 11560      4C452037 
 11561              	.LASF1076:
 11562 0721 7854494D 		.ascii	"xTIME_OUT\000"
 11562      455F4F55 
 11562      5400
 11563              	.LASF398:
 11564 072b 5F455846 		.ascii	"_EXFUN(name,proto) name proto\000"
 11564      554E286E 
 11564      616D652C 
 11564      70726F74 
 11564      6F29206E 
 11565              	.LASF1167:
 11566 0749 78546173 		.ascii	"xTaskRemoveFromUnorderedEventList\000"
 11566      6B52656D 
 11566      6F766546 
 11566      726F6D55 
 11566      6E6F7264 
 11567              	.LASF971:
 11568 076b 6C697374 		.ascii	"listGET_OWNER_OF_HEAD_ENTRY(pxList) ( (&( ( pxList "
 11568      4745545F 
 11568      4F574E45 
 11568      525F4F46 
 11568      5F484541 
 11569 079e 292D3E78 		.ascii	")->xListEnd ))->pxNext->pvOwner )\000"
 11569      4C697374 
 11569      456E6420 
 11569      29292D3E 
 11569      70784E65 
 11570              	.LASF1214:
 11571 07c0 78546963 		.ascii	"xTickCount\000"
 11571      6B436F75 
 11571      6E7400
 11572              	.LASF1102:
 11573 07cb 75785461 		.ascii	"uxTaskNumber\000"
 11573      736B4E75 
 11573      6D626572 
 11573      00
 11574              	.LASF151:
 11575 07d8 5F5F4C44 		.ascii	"__LDBL_MANT_DIG__ 53\000"
 11575      424C5F4D 
 11575      414E545F 
 11575      4449475F 
 11575      5F203533 
 11576              	.LASF1186:
 11577 07ed 70784C69 		.ascii	"pxList\000"
 11577      737400
 11578              	.LASF834:
 11579 07f4 706F7274 		.ascii	"portUSING_MPU_WRAPPERS 0\000"
 11579      5553494E 
 11579      475F4D50 
 11579      555F5752 
 11579      41505045 
 11580              	.LASF101:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 276


 11581 080d 5F5F5549 		.ascii	"__UINT8_C(c) c\000"
 11581      4E54385F 
 11581      43286329 
 11581      206300
 11582              	.LASF39:
 11583 081c 5F5F494E 		.ascii	"__INT16_TYPE__ short int\000"
 11583      5431365F 
 11583      54595045 
 11583      5F5F2073 
 11583      686F7274 
 11584              	.LASF605:
 11585 0835 5F5F616C 		.ascii	"__aligned(x) __attribute__((__aligned__(x)))\000"
 11585      69676E65 
 11585      64287829 
 11585      205F5F61 
 11585      74747269 
 11586              	.LASF855:
 11587 0862 74726163 		.ascii	"traceEND() \000"
 11587      65454E44 
 11587      28292000 
 11588              	.LASF1074:
 11589 086e 6544656C 		.ascii	"eDeleted\000"
 11589      65746564 
 11589      00
 11590              	.LASF650:
 11591 0877 5F5F4953 		.ascii	"__ISO_C_VISIBLE 2011\000"
 11591      4F5F435F 
 11591      56495349 
 11591      424C4520 
 11591      32303131 
 11592              	.LASF854:
 11593 088c 74726163 		.ascii	"traceSTART() \000"
 11593      65535441 
 11593      52542829 
 11593      2000
 11594              	.LASF822:
 11595 089a 706F7274 		.ascii	"portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPo"
 11595      53555050 
 11595      52455353 
 11595      5F544943 
 11595      4B535F41 
 11596 08cd 72745375 		.ascii	"rtSuppressTicksAndSleep( xExpectedIdleTime )\000"
 11596      70707265 
 11596      73735469 
 11596      636B7341 
 11596      6E64536C 
 11597              	.LASF1100:
 11598 08fa 70785374 		.ascii	"pxStack\000"
 11598      61636B00 
 11599              	.LASF563:
 11600 0902 5F5F756E 		.ascii	"__unbounded \000"
 11600      626F756E 
 11600      64656420 
 11600      00
 11601              	.LASF718:
 11602 090f 494E545F 		.ascii	"INT_FAST64_MAX __INT_FAST64_MAX__\000"
 11602      46415354 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 277


 11602      36345F4D 
 11602      4158205F 
 11602      5F494E54 
 11603              	.LASF307:
 11604 0931 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1\000"
 11604      435F4841 
 11604      56455F53 
 11604      594E435F 
 11604      434F4D50 
 11605              	.LASF294:
 11606 0956 5F5F5548 		.ascii	"__UHA_FBIT__ 8\000"
 11606      415F4642 
 11606      49545F5F 
 11606      203800
 11607              	.LASF775:
 11608 0965 636F6E66 		.ascii	"configIP_ADDR2 0\000"
 11608      69674950 
 11608      5F414444 
 11608      52322030 
 11608      00
 11609              	.LASF1:
 11610 0976 5F5F5354 		.ascii	"__STDC_HOSTED__ 1\000"
 11610      44435F48 
 11610      4F535445 
 11610      445F5F20 
 11610      3100
 11611              	.LASF221:
 11612 0988 5F5F554C 		.ascii	"__ULLFRACT_FBIT__ 64\000"
 11612      4C465241 
 11612      43545F46 
 11612      4249545F 
 11612      5F203634 
 11613              	.LASF367:
 11614 099d 5F4C4442 		.ascii	"_LDBL_EQ_DBL 1\000"
 11614      4C5F4551 
 11614      5F44424C 
 11614      203100
 11615              	.LASF1086:
 11616 09ac 7848616E 		.ascii	"xHandle\000"
 11616      646C6500 
 11617              	.LASF694:
 11618 09b4 494E545F 		.ascii	"INT_LEAST16_MAX __INT_LEAST16_MAX__\000"
 11618      4C454153 
 11618      5431365F 
 11618      4D415820 
 11618      5F5F494E 
 11619              	.LASF527:
 11620 09d8 5F524545 		.ascii	"_REENT_MP_RESULT(ptr) ((ptr)->_result)\000"
 11620      4E545F4D 
 11620      505F5245 
 11620      53554C54 
 11620      28707472 
 11621              	.LASF57:
 11622 09ff 5F5F494E 		.ascii	"__INT_FAST64_TYPE__ long long int\000"
 11622      545F4641 
 11622      53543634 
 11622      5F545950 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 278


 11622      455F5F20 
 11623              	.LASF32:
 11624 0a21 5F5F5749 		.ascii	"__WINT_TYPE__ unsigned int\000"
 11624      4E545F54 
 11624      5950455F 
 11624      5F20756E 
 11624      7369676E 
 11625              	.LASF534:
 11626 0a3c 5F524545 		.ascii	"_REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok"
 11626      4E545F53 
 11626      5452544F 
 11626      4B5F4C41 
 11626      53542870 
 11627 0a6f 5F6C6173 		.ascii	"_last)\000"
 11627      742900
 11628              	.LASF1202:
 11629 0a76 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 11629      736B4765 
 11629      744E756D 
 11629      6265724F 
 11629      66546173 
 11630              	.LASF876:
 11631 0a8d 74726163 		.ascii	"traceQUEUE_SEND(pxQueue) \000"
 11631      65515545 
 11631      55455F53 
 11631      454E4428 
 11631      70785175 
 11632              	.LASF414:
 11633 0aa7 5F5F5349 		.ascii	"__SIZE_T__ \000"
 11633      5A455F54 
 11633      5F5F2000 
 11634              	.LASF1002:
 11635 0ab3 746D7243 		.ascii	"tmrCOMMAND_STOP_FROM_ISR ( ( BaseT_t ) 8 )\000"
 11635      4F4D4D41 
 11635      4E445F53 
 11635      544F505F 
 11635      46524F4D 
 11636              	.LASF468:
 11637 0ade 5F5F4558 		.ascii	"__EXP(x) __ ##x ##__\000"
 11637      50287829 
 11637      205F5F20 
 11637      23237820 
 11637      23235F5F 
 11638              	.LASF909:
 11639 0af3 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_BLOCK(xEventGroup,uxBits"
 11639      65455645 
 11639      4E545F47 
 11639      524F5550 
 11639      5F574149 
 11640 0b26 546F5761 		.ascii	"ToWaitFor) \000"
 11640      6974466F 
 11640      72292000 
 11641              	.LASF1200:
 11642 0b32 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11642      6B507269 
 11642      6F726974 
 11642      79446973 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 279


 11642      696E6865 
 11643              	.LASF951:
 11644 0b4a 70645441 		.ascii	"pdTASK_HOOK_CODE TaskHookFunction_t\000"
 11644      534B5F48 
 11644      4F4F4B5F 
 11644      434F4445 
 11644      20546173 
 11645              	.LASF91:
 11646 0b6e 5F5F5549 		.ascii	"__UINT64_MAX__ 18446744073709551615ULL\000"
 11646      4E543634 
 11646      5F4D4158 
 11646      5F5F2031 
 11646      38343436 
 11647              	.LASF1222:
 11648 0b95 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 11648      4320342E 
 11648      392E3320 
 11648      32303135 
 11648      30333033 
 11649 0bc8 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -g"
 11649      20726576 
 11649      6973696F 
 11649      6E203232 
 11649      31323230 
 11650 0bfb 67646233 		.ascii	"gdb3 -O0 -std=gnu90 -ffunction-sections -fdata-sect"
 11650      202D4F30 
 11650      202D7374 
 11650      643D676E 
 11650      75393020 
 11651 0c2e 696F6E73 		.ascii	"ions\000"
 11651      00
 11652              	.LASF861:
 11653 0c33 74726163 		.ascii	"traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInh"
 11653      65544153 
 11653      4B5F5052 
 11653      494F5249 
 11653      54595F49 
 11654 0c66 65726974 		.ascii	"eritedPriority) \000"
 11654      65645072 
 11654      696F7269 
 11654      74792920 
 11654      00
 11655              	.LASF530:
 11656 0c77 5F524545 		.ascii	"_REENT_MP_FREELIST(ptr) ((ptr)->_freelist)\000"
 11656      4E545F4D 
 11656      505F4652 
 11656      45454C49 
 11656      53542870 
 11657              	.LASF990:
 11658 0ca2 54494D45 		.ascii	"TIMERS_H \000"
 11658      52535F48 
 11658      2000
 11659              	.LASF447:
 11660 0cac 5F5F6E65 		.ascii	"__need_wchar_t\000"
 11660      65645F77 
 11660      63686172 
 11660      5F7400
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 280


 11661              	.LASF811:
 11662 0cbb 706F7274 		.ascii	"portYIELD() vPortYield()\000"
 11662      5949454C 
 11662      44282920 
 11662      76506F72 
 11662      74596965 
 11663              	.LASF852:
 11664 0cd4 706F7274 		.ascii	"portSETUP_TCB(pxTCB) ( void ) pxTCB\000"
 11664      53455455 
 11664      505F5443 
 11664      42287078 
 11664      54434229 
 11665              	.LASF484:
 11666 0cf8 5F5F6C6F 		.ascii	"__lock_close_recursive(lock) (_CAST_VOID 0)\000"
 11666      636B5F63 
 11666      6C6F7365 
 11666      5F726563 
 11666      75727369 
 11667              	.LASF897:
 11668 0d24 74726163 		.ascii	"traceTASK_INCREMENT_TICK(xTickCount) \000"
 11668      65544153 
 11668      4B5F494E 
 11668      4352454D 
 11668      454E545F 
 11669              	.LASF698:
 11670 0d4a 55494E54 		.ascii	"UINT32_MAX __UINT32_MAX__\000"
 11670      33325F4D 
 11670      4158205F 
 11670      5F55494E 
 11670      5433325F 
 11671              	.LASF460:
 11672 0d64 5F425344 		.ascii	"_BSD_PTRDIFF_T_ \000"
 11672      5F505452 
 11672      44494646 
 11672      5F545F20 
 11672      00
 11673              	.LASF291:
 11674 0d75 5F5F4441 		.ascii	"__DA_IBIT__ 32\000"
 11674      5F494249 
 11674      545F5F20 
 11674      333200
 11675              	.LASF211:
 11676 0d84 5F5F554C 		.ascii	"__ULFRACT_FBIT__ 32\000"
 11676      46524143 
 11676      545F4642 
 11676      49545F5F 
 11676      20333200 
 11677              	.LASF1019:
 11678 0d98 74736B53 		.ascii	"tskSTACK_FILL_BYTE ( 0xa5U )\000"
 11678      5441434B 
 11678      5F46494C 
 11678      4C5F4259 
 11678      54452028 
 11679              	.LASF402:
 11680 0db5 5F444546 		.ascii	"_DEFUN_VOID(name) name(_NOARGS)\000"
 11680      554E5F56 
 11680      4F494428 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 281


 11680      6E616D65 
 11680      29206E61 
 11681              	.LASF429:
 11682 0dd5 5F5F7369 		.ascii	"__size_t \000"
 11682      7A655F74 
 11682      2000
 11683              	.LASF562:
 11684 0ddf 5F5F626F 		.ascii	"__bounded \000"
 11684      756E6465 
 11684      642000
 11685              	.LASF679:
 11686 0dea 5F5F696E 		.ascii	"__int_fast32_t_defined 1\000"
 11686      745F6661 
 11686      73743332 
 11686      5F745F64 
 11686      6566696E 
 11687              	.LASF1094:
 11688 0e03 5461736B 		.ascii	"TaskStatus_t\000"
 11688      53746174 
 11688      75735F74 
 11688      00
 11689              	.LASF1137:
 11690 0e10 78546173 		.ascii	"xTaskToSuspend\000"
 11690      6B546F53 
 11690      75737065 
 11690      6E6400
 11691              	.LASF442:
 11692 0e1f 5F5F5F69 		.ascii	"___int_wchar_t_h \000"
 11692      6E745F77 
 11692      63686172 
 11692      5F745F68 
 11692      2000
 11693              	.LASF901:
 11694 0e31 74726163 		.ascii	"traceTIMER_EXPIRED(pxTimer) \000"
 11694      6554494D 
 11694      45525F45 
 11694      58504952 
 11694      45442870 
 11695              	.LASF1176:
 11696 0e4e 75784861 		.ascii	"uxHandle\000"
 11696      6E646C65 
 11696      00
 11697              	.LASF246:
 11698 0e57 5F5F4C41 		.ascii	"__LACCUM_FBIT__ 31\000"
 11698      4343554D 
 11698      5F464249 
 11698      545F5F20 
 11698      333100
 11699              	.LASF734:
 11700 0e6a 494E5431 		.ascii	"INT16_C(x) __INT16_C(x)\000"
 11700      365F4328 
 11700      7829205F 
 11700      5F494E54 
 11700      31365F43 
 11701              	.LASF378:
 11702 0e82 5F504F49 		.ascii	"_POINTER_INT long\000"
 11702      4E544552 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 282


 11702      5F494E54 
 11702      206C6F6E 
 11702      6700
 11703              	.LASF190:
 11704 0e94 5F5F5346 		.ascii	"__SFRACT_EPSILON__ 0x1P-7HR\000"
 11704      52414354 
 11704      5F455053 
 11704      494C4F4E 
 11704      5F5F2030 
 11705              	.LASF593:
 11706 0eb0 5F5F434F 		.ascii	"__CONCAT1(x,y) x ## y\000"
 11706      4E434154 
 11706      3128782C 
 11706      79292078 
 11706      20232320 
 11707              	.LASF418:
 11708 0ec6 5F545F53 		.ascii	"_T_SIZE \000"
 11708      495A4520 
 11708      00
 11709              	.LASF97:
 11710 0ecf 5F5F494E 		.ascii	"__INT32_C(c) c ## L\000"
 11710      5433325F 
 11710      43286329 
 11710      20632023 
 11710      23204C00 
 11711              	.LASF280:
 11712 0ee3 5F5F5553 		.ascii	"__USQ_FBIT__ 32\000"
 11712      515F4642 
 11712      49545F5F 
 11712      20333200 
 11713              	.LASF24:
 11714 0ef3 5F5F4F52 		.ascii	"__ORDER_BIG_ENDIAN__ 4321\000"
 11714      4445525F 
 11714      4249475F 
 11714      454E4449 
 11714      414E5F5F 
 11715              	.LASF773:
 11716 0f0d 636F6E66 		.ascii	"configIP_ADDR0 192\000"
 11716      69674950 
 11716      5F414444 
 11716      52302031 
 11716      393200
 11717              	.LASF270:
 11718 0f20 5F5F5351 		.ascii	"__SQ_FBIT__ 31\000"
 11718      5F464249 
 11718      545F5F20 
 11718      333100
 11719              	.LASF1130:
 11720 0f2f 75785265 		.ascii	"uxReturn\000"
 11720      7475726E 
 11720      00
 11721              	.LASF305:
 11722 0f38 5F5F4E4F 		.ascii	"__NO_INLINE__ 1\000"
 11722      5F494E4C 
 11722      494E455F 
 11722      5F203100 
 11723              	.LASF684:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 283


 11724 0f48 494E5438 		.ascii	"INT8_MIN (-__INT8_MAX__ - 1)\000"
 11724      5F4D494E 
 11724      20282D5F 
 11724      5F494E54 
 11724      385F4D41 
 11725              	.LASF1056:
 11726 0f65 70784E65 		.ascii	"pxNext\000"
 11726      787400
 11727              	.LASF922:
 11728 0f6c 706F7274 		.ascii	"portYIELD_WITHIN_API portYIELD\000"
 11728      5949454C 
 11728      445F5749 
 11728      5448494E 
 11728      5F415049 
 11729              	.LASF278:
 11730 0f8b 5F5F5548 		.ascii	"__UHQ_FBIT__ 16\000"
 11730      515F4642 
 11730      49545F5F 
 11730      20313600 
 11731              	.LASF1114:
 11732 0f9b 70784E65 		.ascii	"pxNewTCB\000"
 11732      77544342 
 11732      00
 11733              	.LASF509:
 11734 0fa4 5F524545 		.ascii	"_REENT_EMERGENCY_SIZE 25\000"
 11734      4E545F45 
 11734      4D455247 
 11734      454E4359 
 11734      5F53495A 
 11735              	.LASF776:
 11736 0fbd 636F6E66 		.ascii	"configIP_ADDR3 201\000"
 11736      69674950 
 11736      5F414444 
 11736      52332032 
 11736      303100
 11737              	.LASF635:
 11738 0fd0 5F5F7765 		.ascii	"__weak_reference(sym,alias) __asm__(\".weak \" #ali"
 11738      616B5F72 
 11738      65666572 
 11738      656E6365 
 11738      2873796D 
 11739 1001 6173293B 		.ascii	"as); __asm__(\".equ \" #alias \", \" #sym)\000"
 11739      205F5F61 
 11739      736D5F5F 
 11739      28222E65 
 11739      71752022 
 11740              	.LASF1221:
 11741 1028 75785363 		.ascii	"uxSchedulerSuspended\000"
 11741      68656475 
 11741      6C657253 
 11741      75737065 
 11741      6E646564 
 11742              	.LASF67:
 11743 103d 5F5F5343 		.ascii	"__SCHAR_MAX__ 127\000"
 11743      4841525F 
 11743      4D41585F 
 11743      5F203132 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 284


 11743      3700
 11744              	.LASF170:
 11745 104f 5F5F4445 		.ascii	"__DEC32_EPSILON__ 1E-6DF\000"
 11745      4333325F 
 11745      45505349 
 11745      4C4F4E5F 
 11745      5F203145 
 11746              	.LASF565:
 11747 1068 5F5F6861 		.ascii	"__has_extension __has_feature\000"
 11747      735F6578 
 11747      74656E73 
 11747      696F6E20 
 11747      5F5F6861 
 11748              	.LASF448:
 11749 1086 4E554C4C 		.ascii	"NULL\000"
 11749      00
 11750              	.LASF516:
 11751 108b 5F524545 		.ascii	"_REENT_CHECK_MP(ptr) \000"
 11751      4E545F43 
 11751      4845434B 
 11751      5F4D5028 
 11751      70747229 
 11752              	.LASF247:
 11753 10a1 5F5F4C41 		.ascii	"__LACCUM_IBIT__ 32\000"
 11753      4343554D 
 11753      5F494249 
 11753      545F5F20 
 11753      333200
 11754              	.LASF1034:
 11755 10b4 5F5F7569 		.ascii	"__uint8_t\000"
 11755      6E74385F 
 11755      7400
 11756              	.LASF287:
 11757 10be 5F5F4841 		.ascii	"__HA_IBIT__ 8\000"
 11757      5F494249 
 11757      545F5F20 
 11757      3800
 11758              	.LASF358:
 11759 10cc 5F5F4E45 		.ascii	"__NEWLIB_H__ 1\000"
 11759      574C4942 
 11759      5F485F5F 
 11759      203100
 11760              	.LASF85:
 11761 10db 5F5F494E 		.ascii	"__INT16_MAX__ 32767\000"
 11761      5431365F 
 11761      4D41585F 
 11761      5F203332 
 11761      37363700 
 11762              	.LASF1091:
 11763 10ef 75784261 		.ascii	"uxBasePriority\000"
 11763      73655072 
 11763      696F7269 
 11763      747900
 11764              	.LASF344:
 11765 10fe 5F5F5646 		.ascii	"__VFP_FP__ 1\000"
 11765      505F4650 
 11765      5F5F2031 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 285


 11765      00
 11766              	.LASF848:
 11767 110b 494E434C 		.ascii	"INCLUDE_xTaskGetSchedulerState 0\000"
 11767      5544455F 
 11767      78546173 
 11767      6B476574 
 11767      53636865 
 11768              	.LASF1210:
 11769 112c 78546173 		.ascii	"xTasksWaitingTermination\000"
 11769      6B735761 
 11769      6974696E 
 11769      67546572 
 11769      6D696E61 
 11770              	.LASF1104:
 11771 1145 74736B54 		.ascii	"tskTCB\000"
 11771      434200
 11772              	.LASF78:
 11773 114c 5F5F494E 		.ascii	"__INTMAX_MAX__ 9223372036854775807LL\000"
 11773      544D4158 
 11773      5F4D4158 
 11773      5F5F2039 
 11773      32323333 
 11774              	.LASF379:
 11775 1171 5F5F5241 		.ascii	"__RAND_MAX\000"
 11775      4E445F4D 
 11775      415800
 11776              	.LASF320:
 11777 117c 5F5F4743 		.ascii	"__GCC_ATOMIC_POINTER_LOCK_FREE 2\000"
 11777      435F4154 
 11777      4F4D4943 
 11777      5F504F49 
 11777      4E544552 
 11778              	.LASF705:
 11779 119d 494E545F 		.ascii	"INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)\000"
 11779      4C454153 
 11779      5436345F 
 11779      4D494E20 
 11779      282D5F5F 
 11780              	.LASF62:
 11781 11c8 5F5F494E 		.ascii	"__INTPTR_TYPE__ int\000"
 11781      54505452 
 11781      5F545950 
 11781      455F5F20 
 11781      696E7400 
 11782              	.LASF409:
 11783 11dc 5F4E4F49 		.ascii	"_NOINLINE_STATIC _NOINLINE static\000"
 11783      4E4C494E 
 11783      455F5354 
 11783      41544943 
 11783      205F4E4F 
 11784              	.LASF984:
 11785 11fe 7461736B 		.ascii	"taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()\000"
 11785      454E4142 
 11785      4C455F49 
 11785      4E544552 
 11785      52555054 
 11786              	.LASF576:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 286


 11787 122e 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_CONSTANT_P 1\000"
 11787      55434C49 
 11787      4B455F42 
 11787      55494C54 
 11787      494E5F43 
 11788              	.LASF1090:
 11789 124e 75784375 		.ascii	"uxCurrentPriority\000"
 11789      7272656E 
 11789      74507269 
 11789      6F726974 
 11789      7900
 11790              	.LASF376:
 11791 1260 5F5F474E 		.ascii	"__GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_M"
 11791      55435F50 
 11791      52455245 
 11791      51286D61 
 11791      6A2C6D69 
 11792 1293 494E4F52 		.ascii	"INOR__ >= ((maj) << 16) + (min))\000"
 11792      5F5F203E 
 11792      3D202828 
 11792      6D616A29 
 11792      203C3C20 
 11793              	.LASF203:
 11794 12b4 5F5F5546 		.ascii	"__UFRACT_MIN__ 0.0UR\000"
 11794      52414354 
 11794      5F4D494E 
 11794      5F5F2030 
 11794      2E305552 
 11795              	.LASF879:
 11796 12c9 74726163 		.ascii	"traceQUEUE_PEEK(pxQueue) \000"
 11796      65515545 
 11796      55455F50 
 11796      45454B28 
 11796      70785175 
 11797              	.LASF164:
 11798 12e3 5F5F4C44 		.ascii	"__LDBL_HAS_QUIET_NAN__ 1\000"
 11798      424C5F48 
 11798      41535F51 
 11798      55494554 
 11798      5F4E414E 
 11799              	.LASF512:
 11800 12fc 5F4E5F4C 		.ascii	"_N_LISTS 30\000"
 11800      49535453 
 11800      20333000 
 11801              	.LASF392:
 11802 1308 5F434F4E 		.ascii	"_CONST const\000"
 11802      53542063 
 11802      6F6E7374 
 11802      00
 11803              	.LASF977:
 11804 1315 74736B4B 		.ascii	"tskKERNEL_VERSION_MINOR 1\000"
 11804      45524E45 
 11804      4C5F5645 
 11804      5253494F 
 11804      4E5F4D49 
 11805              	.LASF713:
 11806 132f 55494E54 		.ascii	"UINT_FAST16_MAX __UINT_FAST16_MAX__\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 287


 11806      5F464153 
 11806      5431365F 
 11806      4D415820 
 11806      5F5F5549 
 11807              	.LASF416:
 11808 1353 5F535953 		.ascii	"_SYS_SIZE_T_H \000"
 11808      5F53495A 
 11808      455F545F 
 11808      482000
 11809              	.LASF524:
 11810 1362 5F524545 		.ascii	"_REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._s"
 11810      4E545F52 
 11810      414E4434 
 11810      385F5345 
 11810      45442870 
 11811 1395 65656429 		.ascii	"eed)\000"
 11811      00
 11812              	.LASF50:
 11813 139a 5F5F5549 		.ascii	"__UINT_LEAST8_TYPE__ unsigned char\000"
 11813      4E545F4C 
 11813      45415354 
 11813      385F5459 
 11813      50455F5F 
 11814              	.LASF1133:
 11815 13bd 75784375 		.ascii	"uxCurrentBasePriority\000"
 11815      7272656E 
 11815      74426173 
 11815      65507269 
 11815      6F726974 
 11816              	.LASF236:
 11817 13d3 5F5F4143 		.ascii	"__ACCUM_FBIT__ 15\000"
 11817      43554D5F 
 11817      46424954 
 11817      5F5F2031 
 11817      3500
 11818              	.LASF798:
 11819 13e5 706F7274 		.ascii	"portCHAR char\000"
 11819      43484152 
 11819      20636861 
 11819      7200
 11820              	.LASF242:
 11821 13f3 5F5F5541 		.ascii	"__UACCUM_IBIT__ 16\000"
 11821      4343554D 
 11821      5F494249 
 11821      545F5F20 
 11821      313600
 11822              	.LASF1049:
 11823 1406 5461736B 		.ascii	"TaskFunction_t\000"
 11823      46756E63 
 11823      74696F6E 
 11823      5F7400
 11824              	.LASF115:
 11825 1415 5F5F5549 		.ascii	"__UINT_FAST64_MAX__ 18446744073709551615ULL\000"
 11825      4E545F46 
 11825      41535436 
 11825      345F4D41 
 11825      585F5F20 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 288


 11826              	.LASF979:
 11827 1441 74736B49 		.ascii	"tskIDLE_PRIORITY ( ( UBaseT_t ) 0U )\000"
 11827      444C455F 
 11827      5052494F 
 11827      52495459 
 11827      20282028 
 11828              	.LASF1228:
 11829 1466 70784375 		.ascii	"pxCurrentTCB\000"
 11829      7272656E 
 11829      74544342 
 11829      00
 11830              	.LASF145:
 11831 1473 5F5F4442 		.ascii	"__DBL_MIN__ ((double)2.2250738585072014e-308L)\000"
 11831      4C5F4D49 
 11831      4E5F5F20 
 11831      2828646F 
 11831      75626C65 
 11832              	.LASF842:
 11833 14a2 636F6E66 		.ascii	"configUSE_TIMERS 0\000"
 11833      69675553 
 11833      455F5449 
 11833      4D455253 
 11833      203000
 11834              	.LASF903:
 11835 14b5 74726163 		.ascii	"traceMALLOC(pvAddress,uiSize) \000"
 11835      654D414C 
 11835      4C4F4328 
 11835      70764164 
 11835      64726573 
 11836              	.LASF474:
 11837 14d4 5F5F5F69 		.ascii	"___int_least16_t_defined 1\000"
 11837      6E745F6C 
 11837      65617374 
 11837      31365F74 
 11837      5F646566 
 11838              	.LASF72:
 11839 14ef 5F5F5743 		.ascii	"__WCHAR_MAX__ 4294967295U\000"
 11839      4841525F 
 11839      4D41585F 
 11839      5F203432 
 11839      39343936 
 11840              	.LASF180:
 11841 1509 5F5F4445 		.ascii	"__DEC128_MIN_EXP__ (-6142)\000"
 11841      43313238 
 11841      5F4D494E 
 11841      5F455850 
 11841      5F5F2028 
 11842              	.LASF997:
 11843 1524 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD ( ( BaseT_t ) 4 )\000"
 11843      4F4D4D41 
 11843      4E445F43 
 11843      48414E47 
 11843      455F5045 
 11844              	.LASF54:
 11845 154f 5F5F494E 		.ascii	"__INT_FAST8_TYPE__ int\000"
 11845      545F4641 
 11845      5354385F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 289


 11845      54595045 
 11845      5F5F2069 
 11846              	.LASF408:
 11847 1566 5F4E4F49 		.ascii	"_NOINLINE __attribute__ ((__noinline__))\000"
 11847      4E4C494E 
 11847      45205F5F 
 11847      61747472 
 11847      69627574 
 11848              	.LASF298:
 11849 158f 5F5F5544 		.ascii	"__UDA_FBIT__ 32\000"
 11849      415F4642 
 11849      49545F5F 
 11849      20333200 
 11850              	.LASF413:
 11851 159f 5F5F7369 		.ascii	"__size_t__ \000"
 11851      7A655F74 
 11851      5F5F2000 
 11852              	.LASF235:
 11853 15ab 5F5F5553 		.ascii	"__USACCUM_EPSILON__ 0x1P-8UHK\000"
 11853      41434355 
 11853      4D5F4550 
 11853      53494C4F 
 11853      4E5F5F20 
 11854              	.LASF81:
 11855 15c9 5F5F5549 		.ascii	"__UINTMAX_C(c) c ## ULL\000"
 11855      4E544D41 
 11855      585F4328 
 11855      63292063 
 11855      20232320 
 11856              	.LASF972:
 11857 15e1 6C697374 		.ascii	"listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( Base"
 11857      49535F43 
 11857      4F4E5441 
 11857      494E4544 
 11857      5F574954 
 11858 1614 545F7420 		.ascii	"T_t ) ( ( pxListItem )->pvContainer == ( void * ) ("
 11858      29202820 
 11858      28207078 
 11858      4C697374 
 11858      4974656D 
 11859 1647 2070784C 		.ascii	" pxList ) ) )\000"
 11859      69737420 
 11859      29202920 
 11859      2900
 11860              	.LASF28:
 11861 1655 5F5F5349 		.ascii	"__SIZEOF_POINTER__ 4\000"
 11861      5A454F46 
 11861      5F504F49 
 11861      4E544552 
 11861      5F5F2034 
 11862              	.LASF46:
 11863 166a 5F5F494E 		.ascii	"__INT_LEAST8_TYPE__ signed char\000"
 11863      545F4C45 
 11863      41535438 
 11863      5F545950 
 11863      455F5F20 
 11864              	.LASF310:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 290


 11865 168a 5F5F4743 		.ascii	"__GCC_ATOMIC_BOOL_LOCK_FREE 2\000"
 11865      435F4154 
 11865      4F4D4943 
 11865      5F424F4F 
 11865      4C5F4C4F 
 11866              	.LASF1146:
 11867 16a8 78546173 		.ascii	"xTaskGetTickCount\000"
 11867      6B476574 
 11867      5469636B 
 11867      436F756E 
 11867      7400
 11868              	.LASF109:
 11869 16ba 5F5F494E 		.ascii	"__INT_FAST16_MAX__ 2147483647\000"
 11869      545F4641 
 11869      53543136 
 11869      5F4D4158 
 11869      5F5F2032 
 11870              	.LASF689:
 11871 16d8 55494E54 		.ascii	"UINT_LEAST8_MAX __UINT_LEAST8_MAX__\000"
 11871      5F4C4541 
 11871      5354385F 
 11871      4D415820 
 11871      5F5F5549 
 11872              	.LASF292:
 11873 16fc 5F5F5441 		.ascii	"__TA_FBIT__ 63\000"
 11873      5F464249 
 11873      545F5F20 
 11873      363300
 11874              	.LASF347:
 11875 170b 5F5F5448 		.ascii	"__THUMB_INTERWORK__ 1\000"
 11875      554D425F 
 11875      494E5445 
 11875      52574F52 
 11875      4B5F5F20 
 11876              	.LASF224:
 11877 1721 5F5F554C 		.ascii	"__ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR\000"
 11877      4C465241 
 11877      43545F4D 
 11877      41585F5F 
 11877      20305846 
 11878              	.LASF1029:
 11879 174d 70727647 		.ascii	"prvGetTCBFromHandle(pxHandle) ( ( ( pxHandle ) == N"
 11879      65745443 
 11879      4246726F 
 11879      6D48616E 
 11879      646C6528 
 11880 1780 554C4C20 		.ascii	"ULL ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( px"
 11880      29203F20 
 11880      28205443 
 11880      425F7420 
 11880      2A202920 
 11881 17b3 48616E64 		.ascii	"Handle ) )\000"
 11881      6C652029 
 11881      202900
 11882              	.LASF84:
 11883 17be 5F5F494E 		.ascii	"__INT8_MAX__ 127\000"
 11883      54385F4D 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 291


 11883      41585F5F 
 11883      20313237 
 11883      00
 11884              	.LASF938:
 11885 17cf 65546173 		.ascii	"eTaskStateGet eTaskGetState\000"
 11885      6B537461 
 11885      74654765 
 11885      74206554 
 11885      61736B47 
 11886              	.LASF1020:
 11887 17eb 74736B42 		.ascii	"tskBLOCKED_CHAR ( 'B' )\000"
 11887      4C4F434B 
 11887      45445F43 
 11887      48415220 
 11887      28202742 
 11888              	.LASF710:
 11889 1803 55494E54 		.ascii	"UINT_FAST8_MAX __UINT_FAST8_MAX__\000"
 11889      5F464153 
 11889      54385F4D 
 11889      4158205F 
 11889      5F55494E 
 11890              	.LASF153:
 11891 1825 5F5F4C44 		.ascii	"__LDBL_MIN_EXP__ (-1021)\000"
 11891      424C5F4D 
 11891      494E5F45 
 11891      58505F5F 
 11891      20282D31 
 11892              	.LASF425:
 11893 183e 5F53495A 		.ascii	"_SIZE_T_DECLARED \000"
 11893      455F545F 
 11893      4445434C 
 11893      41524544 
 11893      2000
 11894              	.LASF686:
 11895 1850 55494E54 		.ascii	"UINT8_MAX __UINT8_MAX__\000"
 11895      385F4D41 
 11895      58205F5F 
 11895      55494E54 
 11895      385F4D41 
 11896              	.LASF36:
 11897 1868 5F5F4348 		.ascii	"__CHAR32_TYPE__ long unsigned int\000"
 11897      41523332 
 11897      5F545950 
 11897      455F5F20 
 11897      6C6F6E67 
 11898              	.LASF165:
 11899 188a 5F5F4445 		.ascii	"__DEC32_MANT_DIG__ 7\000"
 11899      4333325F 
 11899      4D414E54 
 11899      5F444947 
 11899      5F5F2037 
 11900              	.LASF591:
 11901 189f 5F5F4343 		.ascii	"__CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1\000"
 11901      5F535550 
 11901      504F5254 
 11901      535F4459 
 11901      4E414D49 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 292


 11902              	.LASF127:
 11903 18c2 5F5F464C 		.ascii	"__FLT_MAX_EXP__ 128\000"
 11903      545F4D41 
 11903      585F4558 
 11903      505F5F20 
 11903      31323800 
 11904              	.LASF14:
 11905 18d6 5F5F5349 		.ascii	"__SIZEOF_LONG__ 4\000"
 11905      5A454F46 
 11905      5F4C4F4E 
 11905      475F5F20 
 11905      3400
 11906              	.LASF592:
 11907 18e8 5F5F5028 		.ascii	"__P(protos) protos\000"
 11907      70726F74 
 11907      6F732920 
 11907      70726F74 
 11907      6F7300
 11908              	.LASF974:
 11909 18fb 6C697374 		.ascii	"listLIST_IS_INITIALISED(pxList) ( ( pxList )->xList"
 11909      4C495354 
 11909      5F49535F 
 11909      494E4954 
 11909      49414C49 
 11910 192e 456E642E 		.ascii	"End.xItemValue == portMAX_DELAY )\000"
 11910      78497465 
 11910      6D56616C 
 11910      7565203D 
 11910      3D20706F 
 11911              	.LASF405:
 11912 1950 5F504152 		.ascii	"_PARAMS(paramlist) paramlist\000"
 11912      414D5328 
 11912      70617261 
 11912      6D6C6973 
 11912      74292070 
 11913              	.LASF631:
 11914 196d 5F5F7374 		.ascii	"__strfmonlike(fmtarg,firstvararg) __attribute__((__"
 11914      72666D6F 
 11914      6E6C696B 
 11914      6528666D 
 11914      74617267 
 11915 19a0 666F726D 		.ascii	"format__ (__strfmon__, fmtarg, firstvararg)))\000"
 11915      61745F5F 
 11915      20285F5F 
 11915      73747266 
 11915      6D6F6E5F 
 11916              	.LASF1172:
 11917 19ce 70785469 		.ascii	"pxTicksToWait\000"
 11917      636B7354 
 11917      6F576169 
 11917      7400
 11918              	.LASF898:
 11919 19dc 74726163 		.ascii	"traceTIMER_CREATE(pxNewTimer) \000"
 11919      6554494D 
 11919      45525F43 
 11919      52454154 
 11919      45287078 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 293


 11920              	.LASF18:
 11921 19fb 5F5F5349 		.ascii	"__SIZEOF_DOUBLE__ 8\000"
 11921      5A454F46 
 11921      5F444F55 
 11921      424C455F 
 11921      5F203800 
 11922              	.LASF929:
 11923 1a0f 636F6E66 		.ascii	"configUSE_QUEUE_SETS 0\000"
 11923      69675553 
 11923      455F5155 
 11923      4555455F 
 11923      53455453 
 11924              	.LASF1107:
 11925 1a26 70634E61 		.ascii	"pcName\000"
 11925      6D6500
 11926              	.LASF1022:
 11927 1a2d 74736B44 		.ascii	"tskDELETED_CHAR ( 'D' )\000"
 11927      454C4554 
 11927      45445F43 
 11927      48415220 
 11927      28202744 
 11928              	.LASF833:
 11929 1a45 50524956 		.ascii	"PRIVILEGED_DATA \000"
 11929      494C4547 
 11929      45445F44 
 11929      41544120 
 11929      00
 11930              	.LASF690:
 11931 1a56 494E5431 		.ascii	"INT16_MIN (-__INT16_MAX__ - 1)\000"
 11931      365F4D49 
 11931      4E20282D 
 11931      5F5F494E 
 11931      5431365F 
 11932              	.LASF915:
 11933 1a75 74726163 		.ascii	"traceEVENT_GROUP_DELETE(xEventGroup) \000"
 11933      65455645 
 11933      4E545F47 
 11933      524F5550 
 11933      5F44454C 
 11934              	.LASF176:
 11935 1a9b 5F5F4445 		.ascii	"__DEC64_MAX__ 9.999999999999999E384DD\000"
 11935      4336345F 
 11935      4D41585F 
 11935      5F20392E 
 11935      39393939 
 11936              	.LASF374:
 11937 1ac1 5F5F4E45 		.ascii	"__NEWLIB__ 2\000"
 11937      574C4942 
 11937      5F5F2032 
 11937      00
 11938              	.LASF795:
 11939 1ace 65727251 		.ascii	"errQUEUE_YIELD ( -5 )\000"
 11939      55455545 
 11939      5F594945 
 11939      4C442028 
 11939      202D3520 
 11940              	.LASF657:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 294


 11941 1ae4 45584954 		.ascii	"EXIT_SUCCESS 0\000"
 11941      5F535543 
 11941      43455353 
 11941      203000
 11942              	.LASF300:
 11943 1af3 5F5F5554 		.ascii	"__UTA_FBIT__ 64\000"
 11943      415F4642 
 11943      49545F5F 
 11943      20363400 
 11944              	.LASF555:
 11945 1b03 5F5F4153 		.ascii	"__ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) "
 11945      4D4E414D 
 11945      4528636E 
 11945      616D6529 
 11945      205F5F58 
 11946 1b36 636E616D 		.ascii	"cname\000"
 11946      6500
 11947              	.LASF129:
 11948 1b3c 5F5F464C 		.ascii	"__FLT_DECIMAL_DIG__ 9\000"
 11948      545F4445 
 11948      43494D41 
 11948      4C5F4449 
 11948      475F5F20 
 11949              	.LASF850:
 11950 1b52 706F7274 		.ascii	"portCLEAN_UP_TCB(pxTCB) ( void ) pxTCB\000"
 11950      434C4541 
 11950      4E5F5550 
 11950      5F544342 
 11950      28707854 
 11951              	.LASF1212:
 11952 1b79 78537573 		.ascii	"xSuspendedTaskList\000"
 11952      70656E64 
 11952      65645461 
 11952      736B4C69 
 11952      737400
 11953              	.LASF894:
 11954 1b8c 74726163 		.ascii	"traceTASK_SUSPEND(pxTaskToSuspend) \000"
 11954      65544153 
 11954      4B5F5355 
 11954      5350454E 
 11954      44287078 
 11955              	.LASF45:
 11956 1bb0 5F5F5549 		.ascii	"__UINT64_TYPE__ long long unsigned int\000"
 11956      4E543634 
 11956      5F545950 
 11956      455F5F20 
 11956      6C6F6E67 
 11957              	.LASF1073:
 11958 1bd7 65537573 		.ascii	"eSuspended\000"
 11958      70656E64 
 11958      656400
 11959              	.LASF1046:
 11960 1be2 75696E74 		.ascii	"uint8_t\000"
 11960      385F7400 
 11961              	.LASF721:
 11962 1bea 494E544D 		.ascii	"INTMAX_MIN (-INTMAX_MAX - 1)\000"
 11962      41585F4D 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 295


 11962      494E2028 
 11962      2D494E54 
 11962      4D41585F 
 11963              	.LASF964:
 11964 1c07 6C697374 		.ascii	"listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList) ( ( ( pxLi"
 11964      4745545F 
 11964      4954454D 
 11964      5F56414C 
 11964      55455F4F 
 11965 1c3a 73742029 		.ascii	"st )->xListEnd ).pxNext->xItemValue )\000"
 11965      2D3E784C 
 11965      69737445 
 11965      6E642029 
 11965      2E70784E 
 11966              	.LASF1174:
 11967 1c60 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 11967      736B4765 
 11967      74546173 
 11967      6B4E756D 
 11967      62657200 
 11968              	.LASF556:
 11969 1c74 5F5F7074 		.ascii	"__ptr_t void *\000"
 11969      725F7420 
 11969      766F6964 
 11969      202A00
 11970              	.LASF539:
 11971 1c83 5F524545 		.ascii	"_REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrt"
 11971      4E545F4D 
 11971      4252544F 
 11971      57435F53 
 11971      54415445 
 11972 1cb6 6F77635F 		.ascii	"owc_state)\000"
 11972      73746174 
 11972      652900
 11973              	.LASF1188:
 11974 1cc1 70784E65 		.ascii	"pxNextTCB\000"
 11974      78745443 
 11974      4200
 11975              	.LASF615:
 11976 1ccb 5F5F616C 		.ascii	"__always_inline __attribute__((__always_inline__))\000"
 11976      77617973 
 11976      5F696E6C 
 11976      696E6520 
 11976      5F5F6174 
 11977              	.LASF196:
 11978 1cfe 5F5F4652 		.ascii	"__FRACT_FBIT__ 15\000"
 11978      4143545F 
 11978      46424954 
 11978      5F5F2031 
 11978      3500
 11979              	.LASF945:
 11980 1d10 7854696D 		.ascii	"xTimeOutType TimeOut_t\000"
 11980      654F7574 
 11980      54797065 
 11980      2054696D 
 11980      654F7574 
 11981              	.LASF260:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 296


 11982 1d27 5F5F4C4C 		.ascii	"__LLACCUM_EPSILON__ 0x1P-31LLK\000"
 11982      41434355 
 11982      4D5F4550 
 11982      53494C4F 
 11982      4E5F5F20 
 11983              	.LASF313:
 11984 1d46 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR32_T_LOCK_FREE 2\000"
 11984      435F4154 
 11984      4F4D4943 
 11984      5F434841 
 11984      5233325F 
 11985              	.LASF4:
 11986 1d68 5F5F474E 		.ascii	"__GNUC_PATCHLEVEL__ 3\000"
 11986      55435F50 
 11986      41544348 
 11986      4C455645 
 11986      4C5F5F20 
 11987              	.LASF504:
 11988 1d7e 5F52414E 		.ascii	"_RAND48_SEED_2 (0x1234)\000"
 11988      4434385F 
 11988      53454544 
 11988      5F322028 
 11988      30783132 
 11989              	.LASF927:
 11990 1d96 636F6E66 		.ascii	"configPRE_SLEEP_PROCESSING(x) \000"
 11990      69675052 
 11990      455F534C 
 11990      4545505F 
 11990      50524F43 
 11991              	.LASF906:
 11992 1db5 74726163 		.ascii	"traceEVENT_GROUP_CREATE_FAILED() \000"
 11992      65455645 
 11992      4E545F47 
 11992      524F5550 
 11992      5F435245 
 11993              	.LASF683:
 11994 1dd7 55494E54 		.ascii	"UINTPTR_MAX __UINTPTR_MAX__\000"
 11994      5054525F 
 11994      4D415820 
 11994      5F5F5549 
 11994      4E545054 
 11995              	.LASF536:
 11996 1df3 5F524545 		.ascii	"_REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtow"
 11996      4E545F4D 
 11996      42544F57 
 11996      435F5354 
 11996      41544528 
 11997 1e26 635F7374 		.ascii	"c_state)\000"
 11997      61746529 
 11997      00
 11998              	.LASF890:
 11999 1e2f 74726163 		.ascii	"traceTASK_DELETE(pxTaskToDelete) \000"
 11999      65544153 
 11999      4B5F4445 
 11999      4C455445 
 11999      28707854 
 12000              	.LASF401:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 297


 12001 1e51 5F444546 		.ascii	"_DEFUN(name,arglist,args) name(args)\000"
 12001      554E286E 
 12001      616D652C 
 12001      6172676C 
 12001      6973742C 
 12002              	.LASF621:
 12003 1e76 5F5F7072 		.ascii	"__predict_true(exp) __builtin_expect((exp), 1)\000"
 12003      65646963 
 12003      745F7472 
 12003      75652865 
 12003      78702920 
 12004              	.LASF973:
 12005 1ea5 6C697374 		.ascii	"listLIST_ITEM_CONTAINER(pxListItem) ( ( pxListItem "
 12005      4C495354 
 12005      5F495445 
 12005      4D5F434F 
 12005      4E544149 
 12006 1ed8 292D3E70 		.ascii	")->pvContainer )\000"
 12006      76436F6E 
 12006      7461696E 
 12006      65722029 
 12006      00
 12007              	.LASF256:
 12008 1ee9 5F5F4C4C 		.ascii	"__LLACCUM_FBIT__ 31\000"
 12008      41434355 
 12008      4D5F4642 
 12008      49545F5F 
 12008      20333100 
 12009              	.LASF542:
 12010 1efd 5F524545 		.ascii	"_REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wc"
 12010      4E545F57 
 12010      43535254 
 12010      4F4D4253 
 12010      5F535441 
 12011 1f30 7372746F 		.ascii	"srtombs_state)\000"
 12011      6D62735F 
 12011      73746174 
 12011      652900
 12012              	.LASF752:
 12013 1f3f 636F6E66 		.ascii	"configMAX_TASK_NAME_LEN ( 12 )\000"
 12013      69674D41 
 12013      585F5441 
 12013      534B5F4E 
 12013      414D455F 
 12014              	.LASF560:
 12015 1f5e 5F5F6174 		.ascii	"__attribute_format_strfmon__(a,b) \000"
 12015      74726962 
 12015      7574655F 
 12015      666F726D 
 12015      61745F73 
 12016              	.LASF424:
 12017 1f81 5F425344 		.ascii	"_BSD_SIZE_T_DEFINED_ \000"
 12017      5F53495A 
 12017      455F545F 
 12017      44454649 
 12017      4E45445F 
 12018              	.LASF471:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 298


 12019 1f97 5F5F5F69 		.ascii	"___int32_t_defined 1\000"
 12019      6E743332 
 12019      5F745F64 
 12019      6566696E 
 12019      65642031 
 12020              	.LASF60:
 12021 1fac 5F5F5549 		.ascii	"__UINT_FAST32_TYPE__ unsigned int\000"
 12021      4E545F46 
 12021      41535433 
 12021      325F5459 
 12021      50455F5F 
 12022              	.LASF1177:
 12023 1fce 70727649 		.ascii	"prvIdleTask\000"
 12023      646C6554 
 12023      61736B00 
 12024              	.LASF1219:
 12025 1fda 784E756D 		.ascii	"xNumOfOverflows\000"
 12025      4F664F76 
 12025      6572666C 
 12025      6F777300 
 12026              	.LASF17:
 12027 1fea 5F5F5349 		.ascii	"__SIZEOF_FLOAT__ 4\000"
 12027      5A454F46 
 12027      5F464C4F 
 12027      41545F5F 
 12027      203400
 12028              	.LASF227:
 12029 1ffd 5F5F5341 		.ascii	"__SACCUM_IBIT__ 8\000"
 12029      4343554D 
 12029      5F494249 
 12029      545F5F20 
 12029      3800
 12030              	.LASF583:
 12031 200f 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_RELOPS \000"
 12031      55434C49 
 12031      4B455F4D 
 12031      4154485F 
 12031      4255494C 
 12032              	.LASF128:
 12033 202f 5F5F464C 		.ascii	"__FLT_MAX_10_EXP__ 38\000"
 12033      545F4D41 
 12033      585F3130 
 12033      5F455850 
 12033      5F5F2033 
 12034              	.LASF552:
 12035 2045 5F5F504D 		.ascii	"__PMT(args) args\000"
 12035      54286172 
 12035      67732920 
 12035      61726773 
 12035      00
 12036              	.LASF886:
 12037 2056 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR_FAILED(pxQueue) \000"
 12037      65515545 
 12037      55455F50 
 12037      45454B5F 
 12037      46524F4D 
 12038              	.LASF199:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 299


 12039 2080 5F5F4652 		.ascii	"__FRACT_MAX__ 0X7FFFP-15R\000"
 12039      4143545F 
 12039      4D41585F 
 12039      5F203058 
 12039      37464646 
 12040              	.LASF118:
 12041 209a 5F5F4743 		.ascii	"__GCC_IEC_559 0\000"
 12041      435F4945 
 12041      435F3535 
 12041      39203000 
 12042              	.LASF140:
 12043 20aa 5F5F4442 		.ascii	"__DBL_MIN_10_EXP__ (-307)\000"
 12043      4C5F4D49 
 12043      4E5F3130 
 12043      5F455850 
 12043      5F5F2028 
 12044              	.LASF700:
 12045 20c4 494E545F 		.ascii	"INT_LEAST32_MAX __INT_LEAST32_MAX__\000"
 12045      4C454153 
 12045      5433325F 
 12045      4D415820 
 12045      5F5F494E 
 12046              	.LASF1009:
 12047 20e8 7854696D 		.ascii	"xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken"
 12047      65725374 
 12047      61727446 
 12047      726F6D49 
 12047      53522878 
 12048 211b 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STAR"
 12048      696D6572 
 12048      47656E65 
 12048      72696343 
 12048      6F6D6D61 
 12049 214e 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 12049      4F4D5F49 
 12049      53522C20 
 12049      28207854 
 12049      61736B47 
 12050 2181 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 12050      72696F72 
 12050      69747954 
 12050      61736B57 
 12050      6F6B656E 
 12051              	.LASF1113:
 12052 219e 78526574 		.ascii	"xReturn\000"
 12052      75726E00 
 12053              	.LASF7:
 12054 21a6 5F5F4154 		.ascii	"__ATOMIC_SEQ_CST 5\000"
 12054      4F4D4943 
 12054      5F534551 
 12054      5F435354 
 12054      203500
 12055              	.LASF383:
 12056 21b9 5F524541 		.ascii	"_READ_WRITE_RETURN_TYPE int\000"
 12056      445F5752 
 12056      4954455F 
 12056      52455455 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 300


 12056      524E5F54 
 12057              	.LASF1001:
 12058 21d5 746D7243 		.ascii	"tmrCOMMAND_RESET_FROM_ISR ( ( BaseT_t ) 7 )\000"
 12058      4F4D4D41 
 12058      4E445F52 
 12058      45534554 
 12058      5F46524F 
 12059              	.LASF495:
 12060 2201 5F5F6E65 		.ascii	"__need_wint_t\000"
 12060      65645F77 
 12060      696E745F 
 12060      7400
 12061              	.LASF638:
 12062 220f 5F5F7379 		.ascii	"__sym_default(sym,impl,verid) __asm__(\".symver \" "
 12062      6D5F6465 
 12062      6661756C 
 12062      74287379 
 12062      6D2C696D 
 12063 2240 23696D70 		.ascii	"#impl \", \" #sym \"@@\" #verid)\000"
 12063      6C20222C 
 12063      20222023 
 12063      73796D20 
 12063      22404022 
 12064              	.LASF141:
 12065 225d 5F5F4442 		.ascii	"__DBL_MAX_EXP__ 1024\000"
 12065      4C5F4D41 
 12065      585F4558 
 12065      505F5F20 
 12065      31303234 
 12066              	.LASF112:
 12067 2272 5F5F5549 		.ascii	"__UINT_FAST8_MAX__ 4294967295U\000"
 12067      4E545F46 
 12067      41535438 
 12067      5F4D4158 
 12067      5F5F2034 
 12068              	.LASF1196:
 12069 2291 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 12069      65736574 
 12069      4E657874 
 12069      5461736B 
 12069      556E626C 
 12070              	.LASF274:
 12071 22ad 5F5F5451 		.ascii	"__TQ_FBIT__ 127\000"
 12071      5F464249 
 12071      545F5F20 
 12071      31323700 
 12072              	.LASF851:
 12073 22bd 706F7274 		.ascii	"portPRE_TASK_DELETE_HOOK(pvTaskToDelete,pxYieldPend"
 12073      5052455F 
 12073      5441534B 
 12073      5F44454C 
 12073      4554455F 
 12074 22f0 696E6729 		.ascii	"ing) \000"
 12074      2000
 12075              	.LASF155:
 12076 22f6 5F5F4C44 		.ascii	"__LDBL_MAX_EXP__ 1024\000"
 12076      424C5F4D 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 301


 12076      41585F45 
 12076      58505F5F 
 12076      20313032 
 12077              	.LASF89:
 12078 230c 5F5F5549 		.ascii	"__UINT16_MAX__ 65535\000"
 12078      4E543136 
 12078      5F4D4158 
 12078      5F5F2036 
 12078      35353335 
 12079              	.LASF365:
 12080 2321 5F484156 		.ascii	"_HAVE_LONG_DOUBLE 1\000"
 12080      455F4C4F 
 12080      4E475F44 
 12080      4F55424C 
 12080      45203100 
 12081              	.LASF680:
 12082 2335 5F5F696E 		.ascii	"__int_fast64_t_defined 1\000"
 12082      745F6661 
 12082      73743634 
 12082      5F745F64 
 12082      6566696E 
 12083              	.LASF607:
 12084 234e 5F416C69 		.ascii	"_Alignas(x) __aligned(x)\000"
 12084      676E6173 
 12084      28782920 
 12084      5F5F616C 
 12084      69676E65 
 12085              	.LASF1078:
 12086 2367 7854696D 		.ascii	"xTimeOnEntering\000"
 12086      654F6E45 
 12086      6E746572 
 12086      696E6700 
 12087              	.LASF1217:
 12088 2377 75785065 		.ascii	"uxPendedTicks\000"
 12088      6E646564 
 12088      5469636B 
 12088      7300
 12089              	.LASF800:
 12090 2385 706F7274 		.ascii	"portDOUBLE double\000"
 12090      444F5542 
 12090      4C452064 
 12090      6F75626C 
 12090      6500
 12091              	.LASF393:
 12092 2397 5F564F4C 		.ascii	"_VOLATILE volatile\000"
 12092      4154494C 
 12092      4520766F 
 12092      6C617469 
 12092      6C6500
 12093              	.LASF16:
 12094 23aa 5F5F5349 		.ascii	"__SIZEOF_SHORT__ 2\000"
 12094      5A454F46 
 12094      5F53484F 
 12094      52545F5F 
 12094      203200
 12095              	.LASF261:
 12096 23bd 5F5F554C 		.ascii	"__ULLACCUM_FBIT__ 32\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 302


 12096      4C414343 
 12096      554D5F46 
 12096      4249545F 
 12096      5F203332 
 12097              	.LASF946:
 12098 23d2 784D656D 		.ascii	"xMemoryRegion MemoryRegion_t\000"
 12098      6F727952 
 12098      6567696F 
 12098      6E204D65 
 12098      6D6F7279 
 12099              	.LASF400:
 12100 23ef 5F455846 		.ascii	"_EXFNPTR(name,proto) (* name) proto\000"
 12100      4E505452 
 12100      286E616D 
 12100      652C7072 
 12100      6F746F29 
 12101              	.LASF843:
 12102 2413 706F7274 		.ascii	"portCRITICAL_NESTING_IN_TCB 0\000"
 12102      43524954 
 12102      4943414C 
 12102      5F4E4553 
 12102      54494E47 
 12103              	.LASF644:
 12104 2431 5F5F4445 		.ascii	"__DECONST(type,var) ((type)(__uintptr_t)(const void"
 12104      434F4E53 
 12104      54287479 
 12104      70652C76 
 12104      61722920 
 12105 2464 202A2928 		.ascii	" *)(var))\000"
 12105      76617229 
 12105      2900
 12106              	.LASF131:
 12107 246e 5F5F464C 		.ascii	"__FLT_MIN__ 1.1754943508222875e-38F\000"
 12107      545F4D49 
 12107      4E5F5F20 
 12107      312E3137 
 12107      35343934 
 12108              	.LASF373:
 12109 2492 5F535953 		.ascii	"_SYS_FEATURES_H \000"
 12109      5F464541 
 12109      54555245 
 12109      535F4820 
 12109      00
 12110              	.LASF1066:
 12111 24a3 7078496E 		.ascii	"pxIndex\000"
 12111      64657800 
 12112              	.LASF1096:
 12113 24ab 7078546F 		.ascii	"pxTopOfStack\000"
 12113      704F6653 
 12113      7461636B 
 12113      00
 12114              	.LASF616:
 12115 24b8 5F5F6E6F 		.ascii	"__noinline __attribute__ ((__noinline__))\000"
 12115      696E6C69 
 12115      6E65205F 
 12115      5F617474 
 12115      72696275 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 303


 12116              	.LASF651:
 12117 24e2 5F4D4143 		.ascii	"_MACHSTDLIB_H_ \000"
 12117      48535444 
 12117      4C49425F 
 12117      485F2000 
 12118              	.LASF988:
 12119 24f2 78546173 		.ascii	"xTaskCreate(pvTaskCode,pcName,usStackDepth,pvParame"
 12119      6B437265 
 12119      61746528 
 12119      70765461 
 12119      736B436F 
 12120 2525 74657273 		.ascii	"ters,uxPriority,pxCreatedTask) xTaskGenericCreate( "
 12120      2C757850 
 12120      72696F72 
 12120      6974792C 
 12120      70784372 
 12121 2558 28207076 		.ascii	"( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvP"
 12121      5461736B 
 12121      436F6465 
 12121      20292C20 
 12121      28207063 
 12122 258b 6172616D 		.ascii	"arameters ), ( uxPriority ), ( pxCreatedTask ), ( N"
 12122      65746572 
 12122      7320292C 
 12122      20282075 
 12122      78507269 
 12123 25be 554C4C20 		.ascii	"ULL ), ( NULL ) )\000"
 12123      292C2028 
 12123      204E554C 
 12123      4C202920 
 12123      2900
 12124              	.LASF928:
 12125 25d0 636F6E66 		.ascii	"configPOST_SLEEP_PROCESSING(x) \000"
 12125      6967504F 
 12125      53545F53 
 12125      4C454550 
 12125      5F50524F 
 12126              	.LASF1184:
 12127 25f0 70727641 		.ascii	"prvAllocateTCBAndStack\000"
 12127      6C6C6F63 
 12127      61746554 
 12127      4342416E 
 12127      64537461 
 12128              	.LASF19:
 12129 2607 5F5F5349 		.ascii	"__SIZEOF_LONG_DOUBLE__ 8\000"
 12129      5A454F46 
 12129      5F4C4F4E 
 12129      475F444F 
 12129      55424C45 
 12130              	.LASF1216:
 12131 2620 78536368 		.ascii	"xSchedulerRunning\000"
 12131      6564756C 
 12131      65725275 
 12131      6E6E696E 
 12131      6700
 12132              	.LASF322:
 12133 2632 5F5F5052 		.ascii	"__PRAGMA_REDEFINE_EXTNAME 1\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 304


 12133      41474D41 
 12133      5F524544 
 12133      4546494E 
 12133      455F4558 
 12134              	.LASF31:
 12135 264e 5F5F5743 		.ascii	"__WCHAR_TYPE__ unsigned int\000"
 12135      4841525F 
 12135      54595045 
 12135      5F5F2075 
 12135      6E736967 
 12136              	.LASF730:
 12137 266a 57494E54 		.ascii	"WINT_MAX __WINT_MAX__\000"
 12137      5F4D4158 
 12137      205F5F57 
 12137      494E545F 
 12137      4D41585F 
 12138              	.LASF796:
 12139 2680 504F5254 		.ascii	"PORTABLE_H \000"
 12139      41424C45 
 12139      5F482000 
 12140              	.LASF1165:
 12141 268c 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 12141      6B52656D 
 12141      6F766546 
 12141      726F6D45 
 12141      76656E74 
 12142              	.LASF297:
 12143 26a5 5F5F5553 		.ascii	"__USA_IBIT__ 16\000"
 12143      415F4942 
 12143      49545F5F 
 12143      20313600 
 12144              	.LASF308:
 12145 26b5 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1\000"
 12145      435F4841 
 12145      56455F53 
 12145      594E435F 
 12145      434F4D50 
 12146              	.LASF740:
 12147 26da 494E544D 		.ascii	"INTMAX_C(x) __INTMAX_C(x)\000"
 12147      41585F43 
 12147      28782920 
 12147      5F5F494E 
 12147      544D4158 
 12148              	.LASF411:
 12149 26f4 5F5F6E65 		.ascii	"__need_wchar_t \000"
 12149      65645F77 
 12149      63686172 
 12149      5F742000 
 12150              	.LASF623:
 12151 2704 5F5F6869 		.ascii	"__hidden __attribute__((__visibility__(\"hidden\"))"
 12151      6464656E 
 12151      205F5F61 
 12151      74747269 
 12151      62757465 
 12152 2735 2900     		.ascii	")\000"
 12153              	.LASF66:
 12154 2737 5F5F4758 		.ascii	"__GXX_ABI_VERSION 1002\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 305


 12154      585F4142 
 12154      495F5645 
 12154      5253494F 
 12154      4E203130 
 12155              	.LASF1106:
 12156 274e 70785461 		.ascii	"pxTaskCode\000"
 12156      736B436F 
 12156      646500
 12157              	.LASF61:
 12158 2759 5F5F5549 		.ascii	"__UINT_FAST64_TYPE__ long long unsigned int\000"
 12158      4E545F46 
 12158      41535436 
 12158      345F5459 
 12158      50455F5F 
 12159              	.LASF1062:
 12160 2785 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 12160      495F4C49 
 12160      53545F49 
 12160      54454D00 
 12161              	.LASF830:
 12162 2795 706F7274 		.ascii	"portNUM_CONFIGURABLE_REGIONS 1\000"
 12162      4E554D5F 
 12162      434F4E46 
 12162      49475552 
 12162      41424C45 
 12163              	.LASF494:
 12164 27b4 5F57494E 		.ascii	"_WINT_T \000"
 12164      545F5420 
 12164      00
 12165              	.LASF746:
 12166 27bd 636F6E66 		.ascii	"configMAX_PRIORITIES ( 8 )\000"
 12166      69674D41 
 12166      585F5052 
 12166      494F5249 
 12166      54494553 
 12167              	.LASF1157:
 12168 27d8 70785465 		.ascii	"pxTemp\000"
 12168      6D7000
 12169              	.LASF410:
 12170 27df 5F5F6E65 		.ascii	"__need_size_t \000"
 12170      65645F73 
 12170      697A655F 
 12170      742000
 12171              	.LASF286:
 12172 27ee 5F5F4841 		.ascii	"__HA_FBIT__ 7\000"
 12172      5F464249 
 12172      545F5F20 
 12172      3700
 12173              	.LASF862:
 12174 27fc 74726163 		.ascii	"traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,ux"
 12174      65544153 
 12174      4B5F5052 
 12174      494F5249 
 12174      54595F44 
 12175 282f 4F726967 		.ascii	"OriginalPriority) \000"
 12175      696E616C 
 12175      5072696F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 306


 12175      72697479 
 12175      292000
 12176              	.LASF318:
 12177 2842 5F5F4743 		.ascii	"__GCC_ATOMIC_LLONG_LOCK_FREE 1\000"
 12177      435F4154 
 12177      4F4D4943 
 12177      5F4C4C4F 
 12177      4E475F4C 
 12178              	.LASF777:
 12179 2861 636F6E66 		.ascii	"configNET_MASK0 255\000"
 12179      69674E45 
 12179      545F4D41 
 12179      534B3020 
 12179      32353500 
 12180              	.LASF871:
 12181 2875 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 12181      65474956 
 12181      455F4D55 
 12181      5445585F 
 12181      52454355 
 12182              	.LASF801:
 12183 28a0 706F7274 		.ascii	"portLONG long\000"
 12183      4C4F4E47 
 12183      206C6F6E 
 12183      6700
 12184              	.LASF487:
 12185 28ae 5F5F6C6F 		.ascii	"__lock_try_acquire(lock) (_CAST_VOID 0)\000"
 12185      636B5F74 
 12185      72795F61 
 12185      63717569 
 12185      7265286C 
 12186              	.LASF904:
 12187 28d6 74726163 		.ascii	"traceFREE(pvAddress,uiSize) \000"
 12187      65465245 
 12187      45287076 
 12187      41646472 
 12187      6573732C 
 12188              	.LASF192:
 12189 28f3 5F5F5553 		.ascii	"__USFRACT_IBIT__ 0\000"
 12189      46524143 
 12189      545F4942 
 12189      49545F5F 
 12189      203000
 12190              	.LASF1037:
 12191 2906 5F5F7569 		.ascii	"__uint16_t\000"
 12191      6E743136 
 12191      5F7400
 12192              	.LASF841:
 12193 2911 494E434C 		.ascii	"INCLUDE_eTaskGetState 0\000"
 12193      5544455F 
 12193      65546173 
 12193      6B476574 
 12193      53746174 
 12194              	.LASF193:
 12195 2929 5F5F5553 		.ascii	"__USFRACT_MIN__ 0.0UHR\000"
 12195      46524143 
 12195      545F4D49 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 307


 12195      4E5F5F20 
 12195      302E3055 
 12196              	.LASF603:
 12197 2940 5F5F7573 		.ascii	"__used __attribute__((__used__))\000"
 12197      6564205F 
 12197      5F617474 
 12197      72696275 
 12197      74655F5F 
 12198              	.LASF533:
 12199 2961 5F524545 		.ascii	"_REENT_EMERGENCY(ptr) ((ptr)->_emergency)\000"
 12199      4E545F45 
 12199      4D455247 
 12199      454E4359 
 12199      28707472 
 12200              	.LASF575:
 12201 298b 5F5F474E 		.ascii	"__GNUCLIKE_CTOR_SECTION_HANDLING 1\000"
 12201      55434C49 
 12201      4B455F43 
 12201      544F525F 
 12201      53454354 
 12202              	.LASF470:
 12203 29ae 5F5F5F69 		.ascii	"___int16_t_defined 1\000"
 12203      6E743136 
 12203      5F745F64 
 12203      6566696E 
 12203      65642031 
 12204              	.LASF548:
 12205 29c3 5F524545 		.ascii	"_REENT _impure_ptr\000"
 12205      4E54205F 
 12205      696D7075 
 12205      72655F70 
 12205      747200
 12206              	.LASF1079:
 12207 29d6 54696D65 		.ascii	"TimeOut_t\000"
 12207      4F75745F 
 12207      7400
 12208              	.LASF867:
 12209 29e0 74726163 		.ascii	"traceQUEUE_CREATE_FAILED(ucQueueType) \000"
 12209      65515545 
 12209      55455F43 
 12209      52454154 
 12209      455F4641 
 12210              	.LASF624:
 12211 2a07 5F5F6578 		.ascii	"__exported __attribute__((__visibility__(\"default\""
 12211      706F7274 
 12211      6564205F 
 12211      5F617474 
 12211      72696275 
 12212 2a39 29292900 		.ascii	")))\000"
 12213              	.LASF415:
 12214 2a3d 5F53495A 		.ascii	"_SIZE_T \000"
 12214      455F5420 
 12214      00
 12215              	.LASF1178:
 12216 2a46 70727649 		.ascii	"prvInitialiseTCBVariables\000"
 12216      6E697469 
 12216      616C6973 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 308


 12216      65544342 
 12216      56617269 
 12217              	.LASF1027:
 12218 2a60 7461736B 		.ascii	"taskSWITCH_DELAYED_LISTS() { List_t *pxTemp; config"
 12218      53574954 
 12218      43485F44 
 12218      454C4159 
 12218      45445F4C 
 12219 2a93 41535345 		.ascii	"ASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) "
 12219      52542820 
 12219      28206C69 
 12219      73744C49 
 12219      53545F49 
 12220 2ac6 293B2070 		.ascii	"); pxTemp = pxDelayedTaskList; pxDelayedTaskList = "
 12220      7854656D 
 12220      70203D20 
 12220      70784465 
 12220      6C617965 
 12221 2af9 70784F76 		.ascii	"pxOverflowDelayedTaskList; pxOverflowDelayedTaskLis"
 12221      6572666C 
 12221      6F774465 
 12221      6C617965 
 12221      64546173 
 12222 2b2c 74203D20 		.ascii	"t = pxTemp; xNumOfOverflows++; prvResetNextTaskUnbl"
 12222      70785465 
 12222      6D703B20 
 12222      784E756D 
 12222      4F664F76 
 12223 2b5f 6F636B54 		.ascii	"ockTime(); }\000"
 12223      696D6528 
 12223      293B207D 
 12223      00
 12224              	.LASF586:
 12225 2b6c 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE 1\000"
 12225      5F535550 
 12225      504F5254 
 12225      535F5F5F 
 12225      494E4C49 
 12226              	.LASF362:
 12227 2b85 5F4D425F 		.ascii	"_MB_LEN_MAX 1\000"
 12227      4C454E5F 
 12227      4D415820 
 12227      3100
 12228              	.LASF1117:
 12229 2b93 76546173 		.ascii	"vTaskDelete\000"
 12229      6B44656C 
 12229      65746500 
 12230              	.LASF1192:
 12231 2b9f 756C436F 		.ascii	"ulCount\000"
 12231      756E7400 
 12232              	.LASF803:
 12233 2ba7 706F7274 		.ascii	"portSTACK_TYPE uint32_t\000"
 12233      53544143 
 12233      4B5F5459 
 12233      50452075 
 12233      696E7433 
 12234              	.LASF290:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 309


 12235 2bbf 5F5F4441 		.ascii	"__DA_FBIT__ 31\000"
 12235      5F464249 
 12235      545F5F20 
 12235      333100
 12236              	.LASF1059:
 12237 2bce 7076436F 		.ascii	"pvContainer\000"
 12237      6E746169 
 12237      6E657200 
 12238              	.LASF1012:
 12239 2bda 7854696D 		.ascii	"xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken"
 12239      65725265 
 12239      73657446 
 12239      726F6D49 
 12239      53522878 
 12240 2c0d 29207854 		.ascii	") xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESE"
 12240      696D6572 
 12240      47656E65 
 12240      72696343 
 12240      6F6D6D61 
 12241 2c40 545F4652 		.ascii	"T_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHig"
 12241      4F4D5F49 
 12241      53522C20 
 12241      28207854 
 12241      61736B47 
 12242 2c73 68657250 		.ascii	"herPriorityTaskWoken ), 0U )\000"
 12242      72696F72 
 12242      69747954 
 12242      61736B57 
 12242      6F6B656E 
 12243              	.LASF949:
 12244 2c90 7854696D 		.ascii	"xTimerHandle TimerHandle_t\000"
 12244      65724861 
 12244      6E646C65 
 12244      2054696D 
 12244      65724861 
 12245              	.LASF1092:
 12246 2cab 756C5275 		.ascii	"ulRunTimeCounter\000"
 12246      6E54696D 
 12246      65436F75 
 12246      6E746572 
 12246      00
 12247              	.LASF133:
 12248 2cbc 5F5F464C 		.ascii	"__FLT_DENORM_MIN__ 1.4012984643248171e-45F\000"
 12248      545F4445 
 12248      4E4F524D 
 12248      5F4D494E 
 12248      5F5F2031 
 12249              	.LASF158:
 12250 2ce7 5F5F4C44 		.ascii	"__LDBL_MAX__ 1.7976931348623157e+308L\000"
 12250      424C5F4D 
 12250      41585F5F 
 12250      20312E37 
 12250      39373639 
 12251              	.LASF94:
 12252 2d0d 5F5F494E 		.ascii	"__INT_LEAST16_MAX__ 32767\000"
 12252      545F4C45 
 12252      41535431 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 310


 12252      365F4D41 
 12252      585F5F20 
 12253              	.LASF1013:
 12254 2d27 53544143 		.ascii	"STACK_MACROS_H \000"
 12254      4B5F4D41 
 12254      43524F53 
 12254      5F482000 
 12255              	.LASF387:
 12256 2d37 5F454E44 		.ascii	"_END_STD_C \000"
 12256      5F535444 
 12256      5F432000 
 12257              	.LASF1201:
 12258 2d43 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 12258      736B5265 
 12258      73657445 
 12258      76656E74 
 12258      4974656D 
 12259              	.LASF688:
 12260 2d5d 494E545F 		.ascii	"INT_LEAST8_MAX __INT_LEAST8_MAX__\000"
 12260      4C454153 
 12260      54385F4D 
 12260      4158205F 
 12260      5F494E54 
 12261              	.LASF1140:
 12262 2d7f 78546173 		.ascii	"xTaskResumeFromISR\000"
 12262      6B526573 
 12262      756D6546 
 12262      726F6D49 
 12262      535200
 12263              	.LASF65:
 12264 2d92 5F5F6861 		.ascii	"__has_include_next(STR) __has_include_next__(STR)\000"
 12264      735F696E 
 12264      636C7564 
 12264      655F6E65 
 12264      78742853 
 12265              	.LASF1015:
 12266 2dc4 7461736B 		.ascii	"taskSECOND_CHECK_FOR_STACK_OVERFLOW() \000"
 12266      5345434F 
 12266      4E445F43 
 12266      4845434B 
 12266      5F464F52 
 12267              	.LASF105:
 12268 2deb 5F5F5549 		.ascii	"__UINT32_C(c) c ## UL\000"
 12268      4E543332 
 12268      5F432863 
 12268      29206320 
 12268      23232055 
 12269              	.LASF770:
 12270 2e01 494E434C 		.ascii	"INCLUDE_vTaskDelayUntil 1\000"
 12270      5544455F 
 12270      76546173 
 12270      6B44656C 
 12270      6179556E 
 12271              	.LASF87:
 12272 2e1b 5F5F494E 		.ascii	"__INT64_MAX__ 9223372036854775807LL\000"
 12272      5436345F 
 12272      4D41585F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 311


 12272      5F203932 
 12272      32333337 
 12273              	.LASF668:
 12274 2e3f 5F5F6861 		.ascii	"__have_long32 1\000"
 12274      76655F6C 
 12274      6F6E6733 
 12274      32203100 
 12275              	.LASF132:
 12276 2e4f 5F5F464C 		.ascii	"__FLT_EPSILON__ 1.1920928955078125e-7F\000"
 12276      545F4550 
 12276      53494C4F 
 12276      4E5F5F20 
 12276      312E3139 
 12277              	.LASF596:
 12278 2e76 5F5F5853 		.ascii	"__XSTRING(x) __STRING(x)\000"
 12278      5452494E 
 12278      47287829 
 12278      205F5F53 
 12278      5452494E 
 12279              	.LASF559:
 12280 2e8f 5F5F6174 		.ascii	"__attribute_pure__ \000"
 12280      74726962 
 12280      7574655F 
 12280      70757265 
 12280      5F5F2000 
 12281              	.LASF370:
 12282 2ea3 5F574944 		.ascii	"_WIDE_ORIENT 1\000"
 12282      455F4F52 
 12282      49454E54 
 12282      203100
 12283              	.LASF1220:
 12284 2eb2 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 12284      74546173 
 12284      6B556E62 
 12284      6C6F636B 
 12284      54696D65 
 12285              	.LASF950:
 12286 2ec7 78436F52 		.ascii	"xCoRoutineHandle CoRoutineHandle_t\000"
 12286      6F757469 
 12286      6E654861 
 12286      6E646C65 
 12286      20436F52 
 12287              	.LASF30:
 12288 2eea 5F5F5054 		.ascii	"__PTRDIFF_TYPE__ int\000"
 12288      52444946 
 12288      465F5459 
 12288      50455F5F 
 12288      20696E74 
 12289              	.LASF838:
 12290 2eff 494E434C 		.ascii	"INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetM"
 12290      5544455F 
 12290      7853656D 
 12290      6170686F 
 12290      72654765 
 12291 2f32 75746578 		.ascii	"utexHolder\000"
 12291      486F6C64 
 12291      657200
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 312


 12292              	.LASF895:
 12293 2f3d 74726163 		.ascii	"traceTASK_RESUME(pxTaskToResume) \000"
 12293      65544153 
 12293      4B5F5245 
 12293      53554D45 
 12293      28707854 
 12294              	.LASF918:
 12295 2f5f 74726163 		.ascii	"traceQUEUE_REGISTRY_ADD(xQueue,pcQueueName) \000"
 12295      65515545 
 12295      55455F52 
 12295      45474953 
 12295      5452595F 
 12296              	.LASF577:
 12297 2f8c 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VARARGS 1\000"
 12297      55434C49 
 12297      4B455F42 
 12297      55494C54 
 12297      494E5F56 
 12298              	.LASF42:
 12299 2fa9 5F5F5549 		.ascii	"__UINT8_TYPE__ unsigned char\000"
 12299      4E54385F 
 12299      54595045 
 12299      5F5F2075 
 12299      6E736967 
 12300              	.LASF522:
 12301 2fc6 5F524545 		.ascii	"_REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_sign"
 12301      4E545F53 
 12301      49474E47 
 12301      414D2870 
 12301      74722920 
 12302 2ff9 67616D29 		.ascii	"gam)\000"
 12302      00
 12303              	.LASF699:
 12304 2ffe 494E545F 		.ascii	"INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)\000"
 12304      4C454153 
 12304      5433325F 
 12304      4D494E20 
 12304      282D5F5F 
 12305              	.LASF315:
 12306 3029 5F5F4743 		.ascii	"__GCC_ATOMIC_SHORT_LOCK_FREE 2\000"
 12306      435F4154 
 12306      4F4D4943 
 12306      5F53484F 
 12306      52545F4C 
 12307              	.LASF1209:
 12308 3048 7850656E 		.ascii	"xPendingReadyList\000"
 12308      64696E67 
 12308      52656164 
 12308      794C6973 
 12308      7400
 12309              	.LASF1052:
 12310 305a 55426173 		.ascii	"UBaseT_t\000"
 12310      65545F74 
 12310      00
 12311              	.LASF634:
 12312 3063 5F5F7374 		.ascii	"__strong_reference(sym,aliassym) extern __typeof (s"
 12312      726F6E67 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 313


 12312      5F726566 
 12312      6572656E 
 12312      63652873 
 12313 3096 796D2920 		.ascii	"ym) aliassym __attribute__ ((__alias__ (#sym)))\000"
 12313      616C6961 
 12313      7373796D 
 12313      205F5F61 
 12313      74747269 
 12314              	.LASF269:
 12315 30c6 5F5F4851 		.ascii	"__HQ_IBIT__ 0\000"
 12315      5F494249 
 12315      545F5F20 
 12315      3000
 12316              	.LASF1225:
 12317 30d4 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 12317      7274436F 
 12317      756E744C 
 12317      65616469 
 12317      6E675A65 
 12318              	.LASF231:
 12319 30ec 5F5F5553 		.ascii	"__USACCUM_FBIT__ 8\000"
 12319      41434355 
 12319      4D5F4642 
 12319      49545F5F 
 12319      203800
 12320              	.LASF994:
 12321 30ff 746D7243 		.ascii	"tmrCOMMAND_START ( ( BaseT_t ) 1 )\000"
 12321      4F4D4D41 
 12321      4E445F53 
 12321      54415254 
 12321      20282028 
 12322              	.LASF319:
 12323 3122 5F5F4743 		.ascii	"__GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1\000"
 12323      435F4154 
 12323      4F4D4943 
 12323      5F544553 
 12323      545F414E 
 12324              	.LASF465:
 12325 3146 5F535953 		.ascii	"_SYS__TYPES_H \000"
 12325      5F5F5459 
 12325      5045535F 
 12325      482000
 12326              	.LASF526:
 12327 3155 5F524545 		.ascii	"_REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._ad"
 12327      4E545F52 
 12327      414E4434 
 12327      385F4144 
 12327      44287074 
 12328 3188 642900   		.ascii	"d)\000"
 12329              	.LASF900:
 12330 318b 74726163 		.ascii	"traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageV"
 12330      6554494D 
 12330      45525F43 
 12330      4F4D4D41 
 12330      4E445F53 
 12331 31be 616C7565 		.ascii	"alueValue,xReturn) \000"
 12331      56616C75 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 314


 12331      652C7852 
 12331      65747572 
 12331      6E292000 
 12332              	.LASF652:
 12333 31d2 5F4E4557 		.ascii	"_NEWLIB_ALLOCA_H \000"
 12333      4C49425F 
 12333      414C4C4F 
 12333      43415F48 
 12333      2000
 12334              	.LASF1017:
 12335 31e4 74736B49 		.ascii	"tskIDLE_STACK_SIZE configMINIMAL_STACK_SIZE\000"
 12335      444C455F 
 12335      53544143 
 12335      4B5F5349 
 12335      5A452063 
 12336              	.LASF163:
 12337 3210 5F5F4C44 		.ascii	"__LDBL_HAS_INFINITY__ 1\000"
 12337      424C5F48 
 12337      41535F49 
 12337      4E46494E 
 12337      4954595F 
 12338              	.LASF743:
 12339 3228 46524545 		.ascii	"FREERTOS_CONFIG_H \000"
 12339      52544F53 
 12339      5F434F4E 
 12339      4649475F 
 12339      482000
 12340              	.LASF169:
 12341 323b 5F5F4445 		.ascii	"__DEC32_MAX__ 9.999999E96DF\000"
 12341      4333325F 
 12341      4D41585F 
 12341      5F20392E 
 12341      39393939 
 12342              	.LASF692:
 12343 3257 55494E54 		.ascii	"UINT16_MAX __UINT16_MAX__\000"
 12343      31365F4D 
 12343      4158205F 
 12343      5F55494E 
 12343      5431365F 
 12344              	.LASF980:
 12345 3271 7461736B 		.ascii	"taskYIELD() portYIELD()\000"
 12345      5949454C 
 12345      44282920 
 12345      706F7274 
 12345      5949454C 
 12346              	.LASF655:
 12347 3289 5F5F636F 		.ascii	"__compar_fn_t_defined \000"
 12347      6D706172 
 12347      5F666E5F 
 12347      745F6465 
 12347      66696E65 
 12348              	.LASF1021:
 12349 32a0 74736B52 		.ascii	"tskREADY_CHAR ( 'R' )\000"
 12349      45414459 
 12349      5F434841 
 12349      52202820 
 12349      27522720 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 315


 12350              	.LASF1187:
 12351 32b6 65537461 		.ascii	"eState\000"
 12351      746500
 12352              	.LASF351:
 12353 32bd 5F5F4152 		.ascii	"__ARM_ARCH_EXT_IDIV__ 1\000"
 12353      4D5F4152 
 12353      43485F45 
 12353      58545F49 
 12353      4449565F 
 12354              	.LASF349:
 12355 32d5 5F5F4152 		.ascii	"__ARM_PCS 1\000"
 12355      4D5F5043 
 12355      53203100 
 12356              	.LASF793:
 12357 32e1 65727243 		.ascii	"errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )\000"
 12357      4F554C44 
 12357      5F4E4F54 
 12357      5F414C4C 
 12357      4F434154 
 12358              	.LASF889:
 12359 330e 74726163 		.ascii	"traceTASK_CREATE_FAILED() \000"
 12359      65544153 
 12359      4B5F4352 
 12359      45415445 
 12359      5F464149 
 12360              	.LASF722:
 12361 3329 55494E54 		.ascii	"UINTMAX_MAX __UINTMAX_MAX__\000"
 12361      4D41585F 
 12361      4D415820 
 12361      5F5F5549 
 12361      4E544D41 
 12362              	.LASF83:
 12363 3345 5F5F5349 		.ascii	"__SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)\000"
 12363      475F4154 
 12363      4F4D4943 
 12363      5F4D494E 
 12363      5F5F2028 
 12364              	.LASF243:
 12365 3372 5F5F5541 		.ascii	"__UACCUM_MIN__ 0.0UK\000"
 12365      4343554D 
 12365      5F4D494E 
 12365      5F5F2030 
 12365      2E30554B 
 12366              	.LASF438:
 12367 3387 5F425344 		.ascii	"_BSD_WCHAR_T_ \000"
 12367      5F574348 
 12367      41525F54 
 12367      5F2000
 12368              	.LASF1158:
 12369 3396 76546173 		.ascii	"vTaskSwitchContext\000"
 12369      6B537769 
 12369      74636843 
 12369      6F6E7465 
 12369      787400
 12370              	.LASF691:
 12371 33a9 494E5431 		.ascii	"INT16_MAX __INT16_MAX__\000"
 12371      365F4D41 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 316


 12371      58205F5F 
 12371      494E5431 
 12371      365F4D41 
 12372              	.LASF619:
 12373 33c1 5F5F7265 		.ascii	"__returns_twice __attribute__((__returns_twice__))\000"
 12373      7475726E 
 12373      735F7477 
 12373      69636520 
 12373      5F5F6174 
 12374              	.LASF724:
 12375 33f4 5349475F 		.ascii	"SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)\000"
 12375      41544F4D 
 12375      49435F4D 
 12375      494E2028 
 12375      2D5F5F53 
 12376              	.LASF735:
 12377 3420 55494E54 		.ascii	"UINT16_C(x) __UINT16_C(x)\000"
 12377      31365F43 
 12377      28782920 
 12377      5F5F5549 
 12377      4E543136 
 12378              	.LASF789:
 12379 343a 70645041 		.ascii	"pdPASS ( pdTRUE )\000"
 12379      53532028 
 12379      20706454 
 12379      52554520 
 12379      2900
 12380              	.LASF486:
 12381 344c 5F5F6C6F 		.ascii	"__lock_acquire_recursive(lock) (_CAST_VOID 0)\000"
 12381      636B5F61 
 12381      63717569 
 12381      72655F72 
 12381      65637572 
 12382              	.LASF933:
 12383 347a 636F6E66 		.ascii	"configUSE_NEWLIB_REENTRANT 0\000"
 12383      69675553 
 12383      455F4E45 
 12383      574C4942 
 12383      5F524545 
 12384              	.LASF706:
 12385 3497 494E545F 		.ascii	"INT_LEAST64_MAX __INT_LEAST64_MAX__\000"
 12385      4C454153 
 12385      5436345F 
 12385      4D415820 
 12385      5F5F494E 
 12386              	.LASF1194:
 12387 34bb 70756345 		.ascii	"pucEndOfStack\000"
 12387      6E644F66 
 12387      53746163 
 12387      6B00
 12388              	.LASF1014:
 12389 34c9 7461736B 		.ascii	"taskFIRST_CHECK_FOR_STACK_OVERFLOW() \000"
 12389      46495253 
 12389      545F4348 
 12389      45434B5F 
 12389      464F525F 
 12390              	.LASF148:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 317


 12391 34ef 5F5F4442 		.ascii	"__DBL_HAS_DENORM__ 1\000"
 12391      4C5F4841 
 12391      535F4445 
 12391      4E4F524D 
 12391      5F5F2031 
 12392              	.LASF1160:
 12393 3504 7078436F 		.ascii	"pxConstList\000"
 12393      6E73744C 
 12393      69737400 
 12394              	.LASF821:
 12395 3510 706F7274 		.ascii	"portTASK_FUNCTION(vFunction,pvParameters) void vFun"
 12395      5441534B 
 12395      5F46554E 
 12395      4354494F 
 12395      4E287646 
 12396 3543 6374696F 		.ascii	"ction( void *pvParameters )\000"
 12396      6E282076 
 12396      6F696420 
 12396      2A707650 
 12396      6172616D 
 12397              	.LASF858:
 12398 355f 74726163 		.ascii	"traceLOW_POWER_IDLE_BEGIN() \000"
 12398      654C4F57 
 12398      5F504F57 
 12398      45525F49 
 12398      444C455F 
 12399              	.LASF744:
 12400 357c 636F6E66 		.ascii	"configUSE_PREEMPTION 1\000"
 12400      69675553 
 12400      455F5052 
 12400      45454D50 
 12400      54494F4E 
 12401              	.LASF676:
 12402 3593 5F5F696E 		.ascii	"__int_least64_t_defined 1\000"
 12402      745F6C65 
 12402      61737436 
 12402      345F745F 
 12402      64656669 
 12403              	.LASF913:
 12404 35ad 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS(xEventGroup,uxBitsToSet) "
 12404      65455645 
 12404      4E545F47 
 12404      524F5550 
 12404      5F534554 
 12405 35e0 00       		.ascii	"\000"
 12406              	.LASF1110:
 12407 35e1 70784372 		.ascii	"pxCreatedTask\000"
 12407      65617465 
 12407      64546173 
 12407      6B00
 12408              	.LASF1203:
 12409 35ef 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 12409      736B496E 
 12409      6372656D 
 12409      656E744D 
 12409      75746578 
 12410              	.LASF785:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 318


 12411 360d 50524F4A 		.ascii	"PROJDEFS_H \000"
 12411      44454653 
 12411      5F482000 
 12412              	.LASF1139:
 12413 3619 78546173 		.ascii	"xTaskToResume\000"
 12413      6B546F52 
 12413      6573756D 
 12413      6500
 12414              	.LASF178:
 12415 3627 5F5F4445 		.ascii	"__DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD\000"
 12415      4336345F 
 12415      5355424E 
 12415      4F524D41 
 12415      4C5F4D49 
 12416              	.LASF195:
 12417 3658 5F5F5553 		.ascii	"__USFRACT_EPSILON__ 0x1P-8UHR\000"
 12417      46524143 
 12417      545F4550 
 12417      53494C4F 
 12417      4E5F5F20 
 12418              	.LASF449:
 12419 3676 4E554C4C 		.ascii	"NULL ((void *)0)\000"
 12419      20282876 
 12419      6F696420 
 12419      2A293029 
 12419      00
 12420              	.LASF1038:
 12421 3687 73686F72 		.ascii	"short unsigned int\000"
 12421      7420756E 
 12421      7369676E 
 12421      65642069 
 12421      6E7400
 12422              	.LASF111:
 12423 369a 5F5F494E 		.ascii	"__INT_FAST64_MAX__ 9223372036854775807LL\000"
 12423      545F4641 
 12423      53543634 
 12423      5F4D4158 
 12423      5F5F2039 
 12424              	.LASF475:
 12425 36c3 5F5F5F69 		.ascii	"___int_least32_t_defined 1\000"
 12425      6E745F6C 
 12425      65617374 
 12425      33325F74 
 12425      5F646566 
 12426              	.LASF259:
 12427 36de 5F5F4C4C 		.ascii	"__LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK\000"
 12427      41434355 
 12427      4D5F4D41 
 12427      585F5F20 
 12427      30583746 
 12428              	.LASF953:
 12429 3708 746D7254 		.ascii	"tmrTIMER_CALLBACK TimerCallbackFunction_t\000"
 12429      494D4552 
 12429      5F43414C 
 12429      4C424143 
 12429      4B205469 
 12430              	.LASF450:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 319


 12431 3732 5F5F6E65 		.ascii	"__need_NULL\000"
 12431      65645F4E 
 12431      554C4C00 
 12432              	.LASF1211:
 12433 373e 75785461 		.ascii	"uxTasksDeleted\000"
 12433      736B7344 
 12433      656C6574 
 12433      656400
 12434              	.LASF674:
 12435 374d 5F5F696E 		.ascii	"__int_least32_t_defined 1\000"
 12435      745F6C65 
 12435      61737433 
 12435      325F745F 
 12435      64656669 
 12436              	.LASF303:
 12437 3767 5F5F5553 		.ascii	"__USER_LABEL_PREFIX__ \000"
 12437      45525F4C 
 12437      4142454C 
 12437      5F505245 
 12437      4649585F 
 12438              	.LASF218:
 12439 377e 5F5F4C4C 		.ascii	"__LLFRACT_MIN__ (-0.5LLR-0.5LLR)\000"
 12439      46524143 
 12439      545F4D49 
 12439      4E5F5F20 
 12439      282D302E 
 12440              	.LASF709:
 12441 379f 494E545F 		.ascii	"INT_FAST8_MAX __INT_FAST8_MAX__\000"
 12441      46415354 
 12441      385F4D41 
 12441      58205F5F 
 12441      494E545F 
 12442              	.LASF747:
 12443 37bf 636F6E66 		.ascii	"configUSE_TICK_HOOK 1\000"
 12443      69675553 
 12443      455F5449 
 12443      434B5F48 
 12443      4F4F4B20 
 12444              	.LASF761:
 12445 37d5 636F6E66 		.ascii	"configCHECK_FOR_STACK_OVERFLOW 0\000"
 12445      69674348 
 12445      45434B5F 
 12445      464F525F 
 12445      53544143 
 12446              	.LASF738:
 12447 37f6 494E5436 		.ascii	"INT64_C(x) __INT64_C(x)\000"
 12447      345F4328 
 12447      7829205F 
 12447      5F494E54 
 12447      36345F43 
 12448              	.LASF711:
 12449 380e 494E545F 		.ascii	"INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)\000"
 12449      46415354 
 12449      31365F4D 
 12449      494E2028 
 12449      2D5F5F49 
 12450              	.LASF784:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 320


 12451 3837 636F6E66 		.ascii	"configASSERT(x) if( ( x ) == 0 ) { taskDISABLE_INTE"
 12451      69674153 
 12451      53455254 
 12451      28782920 
 12451      69662820 
 12452 386a 52525550 		.ascii	"RRUPTS(); for( ;; ); }\000"
 12452      54532829 
 12452      3B20666F 
 12452      7228203B 
 12452      3B20293B 
 12453              	.LASF535:
 12454 3881 5F524545 		.ascii	"_REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_"
 12454      4E545F4D 
 12454      424C454E 
 12454      5F535441 
 12454      54452870 
 12455 38b4 73746174 		.ascii	"state)\000"
 12455      652900
 12456              	.LASF745:
 12457 38bb 636F6E66 		.ascii	"configUSE_IDLE_HOOK 0\000"
 12457      69675553 
 12457      455F4944 
 12457      4C455F48 
 12457      4F4F4B20 
 12458              	.LASF956:
 12459 38d1 784C6973 		.ascii	"xList List_t\000"
 12459      74204C69 
 12459      73745F74 
 12459      00
 12460              	.LASF1147:
 12461 38de 78546963 		.ascii	"xTicks\000"
 12461      6B7300
 12462              	.LASF326:
 12463 38e5 5F5F4152 		.ascii	"__ARM_FEATURE_QBIT 1\000"
 12463      4D5F4645 
 12463      41545552 
 12463      455F5142 
 12463      49542031 
 12464              	.LASF331:
 12465 38fa 5F5F4152 		.ascii	"__ARM_FEATURE_CLZ 1\000"
 12465      4D5F4645 
 12465      41545552 
 12465      455F434C 
 12465      5A203100 
 12466              	.LASF8:
 12467 390e 5F5F4154 		.ascii	"__ATOMIC_ACQUIRE 2\000"
 12467      4F4D4943 
 12467      5F414351 
 12467      55495245 
 12467      203200
 12468              	.LASF818:
 12469 3921 706F7274 		.ascii	"portENTER_CRITICAL() vPortEnterCritical()\000"
 12469      454E5445 
 12469      525F4352 
 12469      49544943 
 12469      414C2829 
 12470              	.LASF1213:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 321


 12471 394b 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 12471      7272656E 
 12471      744E756D 
 12471      6265724F 
 12471      66546173 
 12472              	.LASF1144:
 12473 3962 76546173 		.ascii	"vTaskSuspendAll\000"
 12473      6B537573 
 12473      70656E64 
 12473      416C6C00 
 12474              	.LASF491:
 12475 3972 756E7369 		.ascii	"unsigned signed\000"
 12475      676E6564 
 12475      20736967 
 12475      6E656400 
 12476              	.LASF1024:
 12477 3982 7461736B 		.ascii	"taskRECORD_READY_PRIORITY(uxPriority) portRECORD_RE"
 12477      5245434F 
 12477      52445F52 
 12477      45414459 
 12477      5F505249 
 12478 39b5 4144595F 		.ascii	"ADY_PRIORITY( uxPriority, uxTopReadyPriority )\000"
 12478      5052494F 
 12478      52495459 
 12478      28207578 
 12478      5072696F 
 12479              	.LASF961:
 12480 39e4 6C697374 		.ascii	"listGET_LIST_ITEM_OWNER(pxListItem) ( ( pxListItem "
 12480      4745545F 
 12480      4C495354 
 12480      5F495445 
 12480      4D5F4F57 
 12481 3a17 292D3E70 		.ascii	")->pvOwner )\000"
 12481      764F776E 
 12481      65722029 
 12481      00
 12482              	.LASF333:
 12483 3a24 5F5F4152 		.ascii	"__ARM_SIZEOF_WCHAR_T 4\000"
 12483      4D5F5349 
 12483      5A454F46 
 12483      5F574348 
 12483      41525F54 
 12484              	.LASF454:
 12485 3a3b 5F414E53 		.ascii	"_ANSI_STDDEF_H \000"
 12485      495F5354 
 12485      44444546 
 12485      5F482000 
 12486              	.LASF64:
 12487 3a4b 5F5F6861 		.ascii	"__has_include(STR) __has_include__(STR)\000"
 12487      735F696E 
 12487      636C7564 
 12487      65285354 
 12487      5229205F 
 12488              	.LASF1077:
 12489 3a73 784F7665 		.ascii	"xOverflowCount\000"
 12489      72666C6F 
 12489      77436F75 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 322


 12489      6E7400
 12490              	.LASF1058:
 12491 3a82 70764F77 		.ascii	"pvOwner\000"
 12491      6E657200 
 12492              	.LASF891:
 12493 3a8a 74726163 		.ascii	"traceTASK_DELAY_UNTIL() \000"
 12493      65544153 
 12493      4B5F4445 
 12493      4C41595F 
 12493      554E5449 
 12494              	.LASF749:
 12495 3aa3 636F6E66 		.ascii	"configTICK_RATE_HZ ( ( portTickType ) 1200 )\000"
 12495      69675449 
 12495      434B5F52 
 12495      4154455F 
 12495      485A2028 
 12496              	.LASF146:
 12497 3ad0 5F5F4442 		.ascii	"__DBL_EPSILON__ ((double)2.2204460492503131e-16L)\000"
 12497      4C5F4550 
 12497      53494C4F 
 12497      4E5F5F20 
 12497      2828646F 
 12498              	.LASF1170:
 12499 3b02 70785469 		.ascii	"pxTimeOut\000"
 12499      6D654F75 
 12499      7400
 12500              	.LASF208:
 12501 3b0c 5F5F4C46 		.ascii	"__LFRACT_MIN__ (-0.5LR-0.5LR)\000"
 12501      52414354 
 12501      5F4D494E 
 12501      5F5F2028 
 12501      2D302E35 
 12502              	.LASF566:
 12503 3b2a 5F5F6861 		.ascii	"__has_feature(x) 0\000"
 12503      735F6665 
 12503      61747572 
 12503      65287829 
 12503      203000
 12504              	.LASF523:
 12505 3b3d 5F524545 		.ascii	"_REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_nex"
 12505      4E545F52 
 12505      414E445F 
 12505      4E455854 
 12505      28707472 
 12506 3b70 742900   		.ascii	"t)\000"
 12507              	.LASF1051:
 12508 3b73 42617365 		.ascii	"BaseT_t\000"
 12508      545F7400 
 12509              	.LASF239:
 12510 3b7b 5F5F4143 		.ascii	"__ACCUM_MAX__ 0X7FFFFFFFP-15K\000"
 12510      43554D5F 
 12510      4D41585F 
 12510      5F203058 
 12510      37464646 
 12511              	.LASF875:
 12512 3b99 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE_FAILED() \000"
 12512      65435245 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 323


 12512      4154455F 
 12512      434F554E 
 12512      54494E47 
 12513              	.LASF154:
 12514 3bc2 5F5F4C44 		.ascii	"__LDBL_MIN_10_EXP__ (-307)\000"
 12514      424C5F4D 
 12514      494E5F31 
 12514      305F4558 
 12514      505F5F20 
 12515              	.LASF1071:
 12516 3bdd 65526561 		.ascii	"eReady\000"
 12516      647900
 12517              	.LASF817:
 12518 3be4 706F7274 		.ascii	"portENABLE_INTERRUPTS() vPortClearInterruptMask(0)\000"
 12518      454E4142 
 12518      4C455F49 
 12518      4E544552 
 12518      52555054 
 12519              	.LASF887:
 12520 3c17 74726163 		.ascii	"traceQUEUE_DELETE(pxQueue) \000"
 12520      65515545 
 12520      55455F44 
 12520      454C4554 
 12520      45287078 
 12521              	.LASF321:
 12522 3c33 5F5F4743 		.ascii	"__GCC_HAVE_DWARF2_CFI_ASM 1\000"
 12522      435F4841 
 12522      56455F44 
 12522      57415246 
 12522      325F4346 
 12523              	.LASF469:
 12524 3c4f 5F5F5F69 		.ascii	"___int8_t_defined 1\000"
 12524      6E74385F 
 12524      745F6465 
 12524      66696E65 
 12524      64203100 
 12525              	.LASF1162:
 12526 3c63 70784576 		.ascii	"pxEventList\000"
 12526      656E744C 
 12526      69737400 
 12527              	.LASF1227:
 12528 3c6f 75635265 		.ascii	"ucReturn\000"
 12528      7475726E 
 12528      00
 12529              	.LASF289:
 12530 3c78 5F5F5341 		.ascii	"__SA_IBIT__ 16\000"
 12530      5F494249 
 12530      545F5F20 
 12530      313600
 12531              	.LASF1173:
 12532 3c87 76546173 		.ascii	"vTaskMissedYield\000"
 12532      6B4D6973 
 12532      73656459 
 12532      69656C64 
 12532      00
 12533              	.LASF625:
 12534 3c98 5F5F6F66 		.ascii	"__offsetof(type,field) offsetof(type, field)\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 324


 12534      66736574 
 12534      6F662874 
 12534      7970652C 
 12534      6669656C 
 12535              	.LASF2:
 12536 3cc5 5F5F474E 		.ascii	"__GNUC__ 4\000"
 12536      55435F5F 
 12536      203400
 12537              	.LASF787:
 12538 3cd0 70644641 		.ascii	"pdFALSE ( ( BaseT_t ) 0 )\000"
 12538      4C534520 
 12538      28202820 
 12538      42617365 
 12538      545F7420 
 12539              	.LASF43:
 12540 3cea 5F5F5549 		.ascii	"__UINT16_TYPE__ short unsigned int\000"
 12540      4E543136 
 12540      5F545950 
 12540      455F5F20 
 12540      73686F72 
 12541              	.LASF658:
 12542 3d0d 52414E44 		.ascii	"RAND_MAX __RAND_MAX\000"
 12542      5F4D4158 
 12542      205F5F52 
 12542      414E445F 
 12542      4D415800 
 12543              	.LASF764:
 12544 3d21 636F6E66 		.ascii	"configGENERATE_RUN_TIME_STATS 0\000"
 12544      69674745 
 12544      4E455241 
 12544      54455F52 
 12544      554E5F54 
 12545              	.LASF1040:
 12546 3d41 5F5F7569 		.ascii	"__uint32_t\000"
 12546      6E743332 
 12546      5F7400
 12547              	.LASF343:
 12548 3d4c 5F5F534F 		.ascii	"__SOFTFP__ 1\000"
 12548      46544650 
 12548      5F5F2031 
 12548      00
 12549              	.LASF673:
 12550 3d59 5F5F696E 		.ascii	"__int32_t_defined 1\000"
 12550      7433325F 
 12550      745F6465 
 12550      66696E65 
 12550      64203100 
 12551              	.LASF959:
 12552 3d6d 636F6E66 		.ascii	"configLIST_VOLATILE \000"
 12552      69674C49 
 12552      53545F56 
 12552      4F4C4154 
 12552      494C4520 
 12553              	.LASF167:
 12554 3d82 5F5F4445 		.ascii	"__DEC32_MAX_EXP__ 97\000"
 12554      4333325F 
 12554      4D41585F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 325


 12554      4558505F 
 12554      5F203937 
 12555              	.LASF1169:
 12556 3d97 76546173 		.ascii	"vTaskSetTimeOutState\000"
 12556      6B536574 
 12556      54696D65 
 12556      4F757453 
 12556      74617465 
 12557              	.LASF417:
 12558 3dac 5F545F53 		.ascii	"_T_SIZE_ \000"
 12558      495A455F 
 12558      2000
 12559              	.LASF774:
 12560 3db6 636F6E66 		.ascii	"configIP_ADDR1 168\000"
 12560      69674950 
 12560      5F414444 
 12560      52312031 
 12560      363800
 12561              	.LASF558:
 12562 3dc9 5F5F6174 		.ascii	"__attribute_malloc__ \000"
 12562      74726962 
 12562      7574655F 
 12562      6D616C6C 
 12562      6F635F5F 
 12563              	.LASF940:
 12564 3ddf 78546173 		.ascii	"xTaskHandle TaskHandle_t\000"
 12564      6B48616E 
 12564      646C6520 
 12564      5461736B 
 12564      48616E64 
 12565              	.LASF732:
 12566 3df8 494E5438 		.ascii	"INT8_C(x) __INT8_C(x)\000"
 12566      5F432878 
 12566      29205F5F 
 12566      494E5438 
 12566      5F432878 
 12567              	.LASF58:
 12568 3e0e 5F5F5549 		.ascii	"__UINT_FAST8_TYPE__ unsigned int\000"
 12568      4E545F46 
 12568      41535438 
 12568      5F545950 
 12568      455F5F20 
 12569              	.LASF257:
 12570 3e2f 5F5F4C4C 		.ascii	"__LLACCUM_IBIT__ 32\000"
 12570      41434355 
 12570      4D5F4942 
 12570      49545F5F 
 12570      20333200 
 12571              	.LASF200:
 12572 3e43 5F5F4652 		.ascii	"__FRACT_EPSILON__ 0x1P-15R\000"
 12572      4143545F 
 12572      45505349 
 12572      4C4F4E5F 
 12572      5F203078 
 12573              	.LASF1085:
 12574 3e5e 78544153 		.ascii	"xTASK_STATUS\000"
 12574      4B5F5354 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 326


 12574      41545553 
 12574      00
 12575              	.LASF51:
 12576 3e6b 5F5F5549 		.ascii	"__UINT_LEAST16_TYPE__ short unsigned int\000"
 12576      4E545F4C 
 12576      45415354 
 12576      31365F54 
 12576      5950455F 
 12577              	.LASF991:
 12578 3e94 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR ( ( BaseT_t ) "
 12578      4F4D4D41 
 12578      4E445F45 
 12578      58454355 
 12578      54455F43 
 12579 3ec7 2D322029 		.ascii	"-2 )\000"
 12579      00
 12580              	.LASF1063:
 12581 3ecc 4D696E69 		.ascii	"MiniListItem_t\000"
 12581      4C697374 
 12581      4974656D 
 12581      5F7400
 12582              	.LASF352:
 12583 3edb 5F5F4758 		.ascii	"__GXX_TYPEINFO_EQUALITY_INLINE 0\000"
 12583      585F5459 
 12583      5045494E 
 12583      464F5F45 
 12583      5155414C 
 12584              	.LASF1026:
 12585 3efc 7461736B 		.ascii	"taskRESET_READY_PRIORITY(uxPriority) { if( listCURR"
 12585      52455345 
 12585      545F5245 
 12585      4144595F 
 12585      5052494F 
 12586 3f2f 454E545F 		.ascii	"ENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority"
 12586      4C495354 
 12586      5F4C454E 
 12586      47544828 
 12586      20262820 
 12587 3f62 2029205D 		.ascii	" ) ] ) ) == ( UBaseT_t ) 0 ) { portRESET_READY_PRIO"
 12587      20292029 
 12587      203D3D20 
 12587      28205542 
 12587      61736554 
 12588 3f95 52495459 		.ascii	"RITY( ( uxPriority ), ( uxTopReadyPriority ) ); } }"
 12588      28202820 
 12588      75785072 
 12588      696F7269 
 12588      74792029 
 12589 3fc8 00       		.ascii	"\000"
 12590              	.LASF911:
 12591 3fc9 74726163 		.ascii	"traceEVENT_GROUP_CLEAR_BITS(xEventGroup,uxBitsToCle"
 12591      65455645 
 12591      4E545F47 
 12591      524F5550 
 12591      5F434C45 
 12592 3ffc 61722920 		.ascii	"ar) \000"
 12592      00
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 327


 12593              	.LASF88:
 12594 4001 5F5F5549 		.ascii	"__UINT8_MAX__ 255\000"
 12594      4E54385F 
 12594      4D41585F 
 12594      5F203235 
 12594      3500
 12595              	.LASF337:
 12596 4013 5F5F4150 		.ascii	"__APCS_32__ 1\000"
 12596      43535F33 
 12596      325F5F20 
 12596      3100
 12597              	.LASF412:
 12598 4021 5F5F6E65 		.ascii	"__need_NULL \000"
 12598      65645F4E 
 12598      554C4C20 
 12598      00
 12599              	.LASF870:
 12600 402e 74726163 		.ascii	"traceGIVE_MUTEX_RECURSIVE(pxMutex) \000"
 12600      65474956 
 12600      455F4D55 
 12600      5445585F 
 12600      52454355 
 12601              	.LASF786:
 12602 4052 70644D53 		.ascii	"pdMS_TO_TICKS(xTimeInMs) ( ( ( TickT_t ) ( xTimeInM"
 12602      5F544F5F 
 12602      5449434B 
 12602      53287854 
 12602      696D6549 
 12603 4085 73202920 		.ascii	"s ) * configTICK_RATE_HZ ) / ( TickT_t ) 1000 )\000"
 12603      2A20636F 
 12603      6E666967 
 12603      5449434B 
 12603      5F524154 
 12604              	.LASF618:
 12605 40b5 5F5F6661 		.ascii	"__fastcall __attribute__((__fastcall__))\000"
 12605      73746361 
 12605      6C6C205F 
 12605      5F617474 
 12605      72696275 
 12606              	.LASF69:
 12607 40de 5F5F494E 		.ascii	"__INT_MAX__ 2147483647\000"
 12607      545F4D41 
 12607      585F5F20 
 12607      32313437 
 12607      34383336 
 12608              	.LASF464:
 12609 40f5 6F666673 		.ascii	"offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEM"
 12609      65746F66 
 12609      28545950 
 12609      452C4D45 
 12609      4D424552 
 12610 4128 42455229 		.ascii	"BER)\000"
 12610      00
 12611              	.LASF53:
 12612 412d 5F5F5549 		.ascii	"__UINT_LEAST64_TYPE__ long long unsigned int\000"
 12612      4E545F4C 
 12612      45415354 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 328


 12612      36345F54 
 12612      5950455F 
 12613              	.LASF184:
 12614 415a 5F5F4445 		.ascii	"__DEC128_EPSILON__ 1E-33DL\000"
 12614      43313238 
 12614      5F455053 
 12614      494C4F4E 
 12614      5F5F2031 
 12615              	.LASF359:
 12616 4175 5F4E4557 		.ascii	"_NEWLIB_VERSION \"2.2.0\"\000"
 12616      4C49425F 
 12616      56455253 
 12616      494F4E20 
 12616      22322E32 
 12617              	.LASF1171:
 12618 418d 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 12618      6B436865 
 12618      636B466F 
 12618      7254696D 
 12618      654F7574 
 12619              	.LASF160:
 12620 41a2 5F5F4C44 		.ascii	"__LDBL_EPSILON__ 2.2204460492503131e-16L\000"
 12620      424C5F45 
 12620      5053494C 
 12620      4F4E5F5F 
 12620      20322E32 
 12621              	.LASF937:
 12622 41cb 636F6E66 		.ascii	"configENABLE_BACKWARD_COMPATIBILITY 1\000"
 12622      6967454E 
 12622      41424C45 
 12622      5F424143 
 12622      4B574152 
 12623              	.LASF923:
 12624 41f1 7076506F 		.ascii	"pvPortMallocAligned(x,puxStackBuffer) ( ( ( puxStac"
 12624      72744D61 
 12624      6C6C6F63 
 12624      416C6967 
 12624      6E656428 
 12625 4224 6B427566 		.ascii	"kBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ("
 12625      66657220 
 12625      29203D3D 
 12625      204E554C 
 12625      4C202920 
 12626 4257 20707578 		.ascii	" puxStackBuffer ) )\000"
 12626      53746163 
 12626      6B427566 
 12626      66657220 
 12626      29202900 
 12627              	.LASF601:
 12628 426b 5F5F7075 		.ascii	"__pure2 __attribute__((__const__))\000"
 12628      72653220 
 12628      5F5F6174 
 12628      74726962 
 12628      7574655F 
 12629              	.LASF312:
 12630 428e 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR16_T_LOCK_FREE 2\000"
 12630      435F4154 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 329


 12630      4F4D4943 
 12630      5F434841 
 12630      5231365F 
 12631              	.LASF981:
 12632 42b0 7461736B 		.ascii	"taskENTER_CRITICAL() portENTER_CRITICAL()\000"
 12632      454E5445 
 12632      525F4352 
 12632      49544943 
 12632      414C2829 
 12633              	.LASF9:
 12634 42da 5F5F4154 		.ascii	"__ATOMIC_RELEASE 3\000"
 12634      4F4D4943 
 12634      5F52454C 
 12634      45415345 
 12634      203300
 12635              	.LASF766:
 12636 42ed 494E434C 		.ascii	"INCLUDE_uxTaskPriorityGet 1\000"
 12636      5544455F 
 12636      75785461 
 12636      736B5072 
 12636      696F7269 
 12637              	.LASF123:
 12638 4309 5F5F464C 		.ascii	"__FLT_MANT_DIG__ 24\000"
 12638      545F4D41 
 12638      4E545F44 
 12638      49475F5F 
 12638      20323400 
 12639              	.LASF503:
 12640 431d 5F52414E 		.ascii	"_RAND48_SEED_1 (0xabcd)\000"
 12640      4434385F 
 12640      53454544 
 12640      5F312028 
 12640      30786162 
 12641              	.LASF283:
 12642 4335 5F5F5544 		.ascii	"__UDQ_IBIT__ 0\000"
 12642      515F4942 
 12642      49545F5F 
 12642      203000
 12643              	.LASF1030:
 12644 4344 7461736B 		.ascii	"taskEVENT_LIST_ITEM_VALUE_IN_USE 0x80000000UL\000"
 12644      4556454E 
 12644      545F4C49 
 12644      53545F49 
 12644      54454D5F 
 12645              	.LASF480:
 12646 4372 5F5F4C4F 		.ascii	"__LOCK_INIT_RECURSIVE(class,lock) static int lock ="
 12646      434B5F49 
 12646      4E49545F 
 12646      52454355 
 12646      52534956 
 12647 43a5 20303B00 		.ascii	" 0;\000"
 12648              	.LASF714:
 12649 43a9 494E545F 		.ascii	"INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)\000"
 12649      46415354 
 12649      33325F4D 
 12649      494E2028 
 12649      2D5F5F49 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 330


 12650              	.LASF1199:
 12651 43d2 70784D75 		.ascii	"pxMutexHolder\000"
 12651      74657848 
 12651      6F6C6465 
 12651      7200
 12652              	.LASF617:
 12653 43e0 5F5F6E6F 		.ascii	"__nonnull(x) __attribute__((__nonnull__(x)))\000"
 12653      6E6E756C 
 12653      6C287829 
 12653      205F5F61 
 12653      74747269 
 12654              	.LASF588:
 12655 440d 5F5F4343 		.ascii	"__CC_SUPPORTS___FUNC__ 1\000"
 12655      5F535550 
 12655      504F5254 
 12655      535F5F5F 
 12655      46554E43 
 12656              	.LASF810:
 12657 4426 706F7274 		.ascii	"portNVIC_PENDSVSET_BIT ( 1UL << 28UL )\000"
 12657      4E564943 
 12657      5F50454E 
 12657      44535653 
 12657      45545F42 
 12658              	.LASF762:
 12659 444d 636F6E66 		.ascii	"configUSE_RECURSIVE_MUTEXES 1\000"
 12659      69675553 
 12659      455F5245 
 12659      43555253 
 12659      4956455F 
 12660              	.LASF571:
 12661 446b 5F5F474E 		.ascii	"__GNUCLIKE_MATH_BUILTIN_CONSTANTS \000"
 12661      55434C49 
 12661      4B455F4D 
 12661      4154485F 
 12661      4255494C 
 12662              	.LASF456:
 12663 448e 5F545F50 		.ascii	"_T_PTRDIFF_ \000"
 12663      54524449 
 12663      46465F20 
 12663      00
 12664              	.LASF695:
 12665 449b 55494E54 		.ascii	"UINT_LEAST16_MAX __UINT_LEAST16_MAX__\000"
 12665      5F4C4541 
 12665      53543136 
 12665      5F4D4158 
 12665      205F5F55 
 12666              	.LASF161:
 12667 44c1 5F5F4C44 		.ascii	"__LDBL_DENORM_MIN__ 4.9406564584124654e-324L\000"
 12667      424C5F44 
 12667      454E4F52 
 12667      4D5F4D49 
 12667      4E5F5F20 
 12668              	.LASF1010:
 12669 44ee 7854696D 		.ascii	"xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken)"
 12669      65725374 
 12669      6F704672 
 12669      6F6D4953 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 331


 12669      52287854 
 12670 4521 20785469 		.ascii	" xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_"
 12670      6D657247 
 12670      656E6572 
 12670      6963436F 
 12670      6D6D616E 
 12671 4554 46524F4D 		.ascii	"FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )\000"
 12671      5F495352 
 12671      2C20302C 
 12671      20282070 
 12671      78486967 
 12672              	.LASF381:
 12673 4585 5F5F4558 		.ascii	"__EXPORT \000"
 12673      504F5254 
 12673      2000
 12674              	.LASF327:
 12675 458f 5F5F4152 		.ascii	"__ARM_FEATURE_SAT 1\000"
 12675      4D5F4645 
 12675      41545552 
 12675      455F5341 
 12675      54203100 
 12676              	.LASF1189:
 12677 45a3 70784669 		.ascii	"pxFirstTCB\000"
 12677      72737454 
 12677      434200
 12678              	.LASF394:
 12679 45ae 5F534947 		.ascii	"_SIGNED signed\000"
 12679      4E454420 
 12679      7369676E 
 12679      656400
 12680              	.LASF671:
 12681 45bd 5F5F696E 		.ascii	"__int16_t_defined 1\000"
 12681      7431365F 
 12681      745F6465 
 12681      66696E65 
 12681      64203100 
 12682              	.LASF222:
 12683 45d1 5F5F554C 		.ascii	"__ULLFRACT_IBIT__ 0\000"
 12683      4C465241 
 12683      43545F49 
 12683      4249545F 
 12683      5F203000 
 12684              	.LASF521:
 12685 45e5 5F524545 		.ascii	"_REENT_CHECK_SIGNAL_BUF(ptr) \000"
 12685      4E545F43 
 12685      4845434B 
 12685      5F534947 
 12685      4E414C5F 
 12686              	.LASF452:
 12687 4603 5F535444 		.ascii	"_STDDEF_H \000"
 12687      4445465F 
 12687      482000
 12688              	.LASF999:
 12689 460e 746D7246 		.ascii	"tmrFIRST_FROM_ISR_COMMAND ( ( BaseT_t ) 6 )\000"
 12689      49525354 
 12689      5F46524F 
 12689      4D5F4953 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 332


 12689      525F434F 
 12690              	.LASF1161:
 12691 463a 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 12691      6B506C61 
 12691      63654F6E 
 12691      4576656E 
 12691      744C6973 
 12692              	.LASF501:
 12693 4650 5F524545 		.ascii	"_REENT_SMALL_CHECK_INIT(ptr) \000"
 12693      4E545F53 
 12693      4D414C4C 
 12693      5F434845 
 12693      434B5F49 
 12694              	.LASF757:
 12695 466e 636F6E66 		.ascii	"configUSE_MUTEXES 1\000"
 12695      69675553 
 12695      455F4D55 
 12695      54455845 
 12695      53203100 
 12696              	.LASF485:
 12697 4682 5F5F6C6F 		.ascii	"__lock_acquire(lock) (_CAST_VOID 0)\000"
 12697      636B5F61 
 12697      63717569 
 12697      7265286C 
 12697      6F636B29 
 12698              	.LASF952:
 12699 46a6 706F7274 		.ascii	"portTICK_RATE_MS portTICK_PERIOD_MS\000"
 12699      5449434B 
 12699      5F524154 
 12699      455F4D53 
 12699      20706F72 
 12700              	.LASF941:
 12701 46ca 78517565 		.ascii	"xQueueHandle QueueHandle_t\000"
 12701      75654861 
 12701      6E646C65 
 12701      20517565 
 12701      75654861 
 12702              	.LASF1175:
 12703 46e5 76546173 		.ascii	"vTaskSetTaskNumber\000"
 12703      6B536574 
 12703      5461736B 
 12703      4E756D62 
 12703      657200
 12704              	.LASF597:
 12705 46f8 5F5F636F 		.ascii	"__const const\000"
 12705      6E737420 
 12705      636F6E73 
 12705      7400
 12706              	.LASF751:
 12707 4706 636F6E66 		.ascii	"configTOTAL_HEAP_SIZE ( ( size_t ) ( 8 * 1024 ) )\000"
 12707      6967544F 
 12707      54414C5F 
 12707      48454150 
 12707      5F53495A 
 12708              	.LASF1081:
 12709 4738 70764261 		.ascii	"pvBaseAddress\000"
 12709      73654164 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 333


 12709      64726573 
 12709      7300
 12710              	.LASF130:
 12711 4746 5F5F464C 		.ascii	"__FLT_MAX__ 3.4028234663852886e+38F\000"
 12711      545F4D41 
 12711      585F5F20 
 12711      332E3430 
 12711      32383233 
 12712              	.LASF697:
 12713 476a 494E5433 		.ascii	"INT32_MAX __INT32_MAX__\000"
 12713      325F4D41 
 12713      58205F5F 
 12713      494E5433 
 12713      325F4D41 
 12714              	.LASF241:
 12715 4782 5F5F5541 		.ascii	"__UACCUM_FBIT__ 16\000"
 12715      4343554D 
 12715      5F464249 
 12715      545F5F20 
 12715      313600
 12716              	.LASF636:
 12717 4795 5F5F7761 		.ascii	"__warn_references(sym,msg) __asm__(\".section .gnu."
 12717      726E5F72 
 12717      65666572 
 12717      656E6365 
 12717      73287379 
 12718 47c7 7761726E 		.ascii	"warning.\" #sym); __asm__(\".asciz \\\"\" msg \"\\\""
 12718      696E672E 
 12718      22202373 
 12718      796D293B 
 12718      205F5F61 
 12719 47f3 22293B20 		.ascii	"\"); __asm__(\".previous\")\000"
 12719      5F5F6173 
 12719      6D5F5F28 
 12719      222E7072 
 12719      6576696F 
 12720              	.LASF205:
 12721 480c 5F5F5546 		.ascii	"__UFRACT_EPSILON__ 0x1P-16UR\000"
 12721      52414354 
 12721      5F455053 
 12721      494C4F4E 
 12721      5F5F2030 
 12722              	.LASF73:
 12723 4829 5F5F5743 		.ascii	"__WCHAR_MIN__ 0U\000"
 12723      4841525F 
 12723      4D494E5F 
 12723      5F203055 
 12723      00
 12724              	.LASF90:
 12725 483a 5F5F5549 		.ascii	"__UINT32_MAX__ 4294967295UL\000"
 12725      4E543332 
 12725      5F4D4158 
 12725      5F5F2034 
 12725      32393439 
 12726              	.LASF277:
 12727 4856 5F5F5551 		.ascii	"__UQQ_IBIT__ 0\000"
 12727      515F4942 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 334


 12727      49545F5F 
 12727      203000
 12728              	.LASF958:
 12729 4865 4C495354 		.ascii	"LIST_H \000"
 12729      5F482000 
 12730              	.LASF317:
 12731 486d 5F5F4743 		.ascii	"__GCC_ATOMIC_LONG_LOCK_FREE 2\000"
 12731      435F4154 
 12731      4F4D4943 
 12731      5F4C4F4E 
 12731      475F4C4F 
 12732              	.LASF253:
 12733 488b 5F5F554C 		.ascii	"__ULACCUM_MIN__ 0.0ULK\000"
 12733      41434355 
 12733      4D5F4D49 
 12733      4E5F5F20 
 12733      302E3055 
 12734              	.LASF364:
 12735 48a2 5F415445 		.ascii	"_ATEXIT_DYNAMIC_ALLOC 1\000"
 12735      5849545F 
 12735      44594E41 
 12735      4D49435F 
 12735      414C4C4F 
 12736              	.LASF430:
 12737 48ba 5F5F6E65 		.ascii	"__need_size_t\000"
 12737      65645F73 
 12737      697A655F 
 12737      7400
 12738              	.LASF1141:
 12739 48c8 75785361 		.ascii	"uxSavedInterruptStatus\000"
 12739      76656449 
 12739      6E746572 
 12739      72757074 
 12739      53746174 
 12740              	.LASF336:
 12741 48df 5F5F4152 		.ascii	"__ARM_ARCH 7\000"
 12741      4D5F4152 
 12741      43482037 
 12741      00
 12742              	.LASF1000:
 12743 48ec 746D7243 		.ascii	"tmrCOMMAND_START_FROM_ISR ( ( BaseT_t ) 6 )\000"
 12743      4F4D4D41 
 12743      4E445F53 
 12743      54415254 
 12743      5F46524F 
 12744              	.LASF420:
 12745 4918 5F53495A 		.ascii	"_SIZE_T_ \000"
 12745      455F545F 
 12745      2000
 12746              	.LASF395:
 12747 4922 5F444F54 		.ascii	"_DOTS , ...\000"
 12747      53202C20 
 12747      2E2E2E00 
 12748              	.LASF122:
 12749 492e 5F5F464C 		.ascii	"__FLT_RADIX__ 2\000"
 12749      545F5241 
 12749      4449585F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 335


 12749      5F203200 
 12750              	.LASF1042:
 12751 493e 6C6F6E67 		.ascii	"long long int\000"
 12751      206C6F6E 
 12751      6720696E 
 12751      7400
 12752              	.LASF525:
 12753 494c 5F524545 		.ascii	"_REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._m"
 12753      4E545F52 
 12753      414E4434 
 12753      385F4D55 
 12753      4C542870 
 12754 497f 756C7429 		.ascii	"ult)\000"
 12754      00
 12755              	.LASF993:
 12756 4984 746D7243 		.ascii	"tmrCOMMAND_START_DONT_TRACE ( ( BaseT_t ) 0 )\000"
 12756      4F4D4D41 
 12756      4E445F53 
 12756      54415254 
 12756      5F444F4E 
 12757              	.LASF763:
 12758 49b2 636F6E66 		.ascii	"configQUEUE_REGISTRY_SIZE 10\000"
 12758      69675155 
 12758      4555455F 
 12758      52454749 
 12758      53545259 
 12759              	.LASF104:
 12760 49cf 5F5F5549 		.ascii	"__UINT_LEAST32_MAX__ 4294967295UL\000"
 12760      4E545F4C 
 12760      45415354 
 12760      33325F4D 
 12760      41585F5F 
 12761              	.LASF1135:
 12762 49f1 78596965 		.ascii	"xYieldRequired\000"
 12762      6C645265 
 12762      71756972 
 12762      656400
 12763              	.LASF754:
 12764 4a00 636F6E66 		.ascii	"configUSE_16_BIT_TICKS 0\000"
 12764      69675553 
 12764      455F3136 
 12764      5F424954 
 12764      5F544943 
 12765              	.LASF455:
 12766 4a19 5F505452 		.ascii	"_PTRDIFF_T \000"
 12766      44494646 
 12766      5F542000 
 12767              	.LASF1185:
 12768 4a25 7072764C 		.ascii	"prvListTaskWithinSingleList\000"
 12768      69737454 
 12768      61736B57 
 12768      69746869 
 12768      6E53696E 
 12769              	.LASF56:
 12770 4a41 5F5F494E 		.ascii	"__INT_FAST32_TYPE__ int\000"
 12770      545F4641 
 12770      53543332 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 336


 12770      5F545950 
 12770      455F5F20 
 12771              	.LASF781:
 12772 4a59 636F6E66 		.ascii	"configPRIO_BITS 5\000"
 12772      69675052 
 12772      494F5F42 
 12772      49545320 
 12772      3500
 12773              	.LASF518:
 12774 4a6b 5F524545 		.ascii	"_REENT_CHECK_ASCTIME_BUF(ptr) \000"
 12774      4E545F43 
 12774      4845434B 
 12774      5F415343 
 12774      54494D45 
 12775              	.LASF783:
 12776 4a8a 636F6E66 		.ascii	"configMAX_SYSCALL_INTERRUPT_PRIORITY ( 5 << (8 - co"
 12776      69674D41 
 12776      585F5359 
 12776      5343414C 
 12776      4C5F494E 
 12777 4abd 6E666967 		.ascii	"nfigPRIO_BITS) )\000"
 12777      5052494F 
 12777      5F424954 
 12777      53292029 
 12777      00
 12778              	.LASF489:
 12779 4ace 5F5F6C6F 		.ascii	"__lock_release(lock) (_CAST_VOID 0)\000"
 12779      636B5F72 
 12779      656C6561 
 12779      7365286C 
 12779      6F636B29 
 12780              	.LASF966:
 12781 4af2 6C697374 		.ascii	"listGET_NEXT(pxListItem) ( ( pxListItem )->pxNext )"
 12781      4745545F 
 12781      4E455854 
 12781      2870784C 
 12781      69737449 
 12782 4b25 00       		.ascii	"\000"
 12783              	.LASF720:
 12784 4b26 494E544D 		.ascii	"INTMAX_MAX __INTMAX_MAX__\000"
 12784      41585F4D 
 12784      4158205F 
 12784      5F494E54 
 12784      4D41585F 
 12785              	.LASF191:
 12786 4b40 5F5F5553 		.ascii	"__USFRACT_FBIT__ 8\000"
 12786      46524143 
 12786      545F4642 
 12786      49545F5F 
 12786      203800
 12787              	.LASF514:
 12788 4b53 5F524545 		.ascii	"_REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(va"
 12788      4E545F49 
 12788      4E49545F 
 12788      50545228 
 12788      76617229 
 12789 4b86 72292929 		.ascii	"r))); (var)->_stdin = &(var)->__sf[0]; (var)->_stdo"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 337


 12789      3B202876 
 12789      6172292D 
 12789      3E5F7374 
 12789      64696E20 
 12790 4bb9 7574203D 		.ascii	"ut = &(var)->__sf[1]; (var)->_stderr = &(var)->__sf"
 12790      20262876 
 12790      6172292D 
 12790      3E5F5F73 
 12790      665B315D 
 12791 4bec 5B325D3B 		.ascii	"[2]; (var)->_current_locale = \"C\"; (var)->_new._r"
 12791      20287661 
 12791      72292D3E 
 12791      5F637572 
 12791      72656E74 
 12792 4c1d 65656E74 		.ascii	"eent._rand_next = 1; (var)->_new._reent._r48._seed["
 12792      2E5F7261 
 12792      6E645F6E 
 12792      65787420 
 12792      3D20313B 
 12793 4c50 305D203D 		.ascii	"0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed["
 12793      205F5241 
 12793      4E443438 
 12793      5F534545 
 12793      445F303B 
 12794 4c83 315D203D 		.ascii	"1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed["
 12794      205F5241 
 12794      4E443438 
 12794      5F534545 
 12794      445F313B 
 12795 4cb6 325D203D 		.ascii	"2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult["
 12795      205F5241 
 12795      4E443438 
 12795      5F534545 
 12795      445F323B 
 12796 4ce9 305D203D 		.ascii	"0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult["
 12796      205F5241 
 12796      4E443438 
 12796      5F4D554C 
 12796      545F303B 
 12797 4d1c 315D203D 		.ascii	"1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult["
 12797      205F5241 
 12797      4E443438 
 12797      5F4D554C 
 12797      545F313B 
 12798 4d4f 325D203D 		.ascii	"2] = _RAND48_MULT_2; (var)->_new._reent._r48._add ="
 12798      205F5241 
 12798      4E443438 
 12798      5F4D554C 
 12798      545F323B 
 12799 4d82 205F5241 		.ascii	" _RAND48_ADD; }\000"
 12799      4E443438 
 12799      5F414444 
 12799      3B207D00 
 12800              	.LASF436:
 12801 4d92 5F5F5743 		.ascii	"__WCHAR_T \000"
 12801      4841525F 
 12801      542000
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 338


 12802              	.LASF372:
 12803 4d9d 5F5F5359 		.ascii	"__SYS_CONFIG_H__ \000"
 12803      535F434F 
 12803      4E464947 
 12803      5F485F5F 
 12803      2000
 12804              	.LASF659:
 12805 4daf 4D425F43 		.ascii	"MB_CUR_MAX __locale_mb_cur_max()\000"
 12805      55525F4D 
 12805      4158205F 
 12805      5F6C6F63 
 12805      616C655F 
 12806              	.LASF419:
 12807 4dd0 5F5F5349 		.ascii	"__SIZE_T \000"
 12807      5A455F54 
 12807      2000
 12808              	.LASF366:
 12809 4dda 5F484156 		.ascii	"_HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1\000"
 12809      455F4343 
 12809      5F494E48 
 12809      49424954 
 12809      5F4C4F4F 
 12810              	.LASF41:
 12811 4dfd 5F5F494E 		.ascii	"__INT64_TYPE__ long long int\000"
 12811      5436345F 
 12811      54595045 
 12811      5F5F206C 
 12811      6F6E6720 
 12812              	.LASF206:
 12813 4e1a 5F5F4C46 		.ascii	"__LFRACT_FBIT__ 31\000"
 12813      52414354 
 12813      5F464249 
 12813      545F5F20 
 12813      333100
 12814              	.LASF21:
 12815 4e2d 5F5F4348 		.ascii	"__CHAR_BIT__ 8\000"
 12815      41525F42 
 12815      49545F5F 
 12815      203800
 12816              	.LASF809:
 12817 4e3c 706F7274 		.ascii	"portNVIC_INT_CTRL_REG ( * ( ( volatile uint32_t * )"
 12817      4E564943 
 12817      5F494E54 
 12817      5F435452 
 12817      4C5F5245 
 12818 4e6f 20307865 		.ascii	" 0xe000ed04 ) )\000"
 12818      30303065 
 12818      64303420 
 12818      29202900 
 12819              	.LASF323:
 12820 4e7f 5F5F5349 		.ascii	"__SIZEOF_WCHAR_T__ 4\000"
 12820      5A454F46 
 12820      5F574348 
 12820      41525F54 
 12820      5F5F2034 
 12821              	.LASF1061:
 12822 4e94 784C4953 		.ascii	"xLIST_ITEM\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 339


 12822      545F4954 
 12822      454D00
 12823              	.LASF622:
 12824 4e9f 5F5F7072 		.ascii	"__predict_false(exp) __builtin_expect((exp), 0)\000"
 12824      65646963 
 12824      745F6661 
 12824      6C736528 
 12824      65787029 
 12825              	.LASF693:
 12826 4ecf 494E545F 		.ascii	"INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)\000"
 12826      4C454153 
 12826      5431365F 
 12826      4D494E20 
 12826      282D5F5F 
 12827              	.LASF602:
 12828 4efa 5F5F756E 		.ascii	"__unused __attribute__((__unused__))\000"
 12828      75736564 
 12828      205F5F61 
 12828      74747269 
 12828      62757465 
 12829              	.LASF885:
 12830 4f1f 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) \000"
 12830      65515545 
 12830      55455F52 
 12830      45434549 
 12830      56455F46 
 12831              	.LASF540:
 12832 4f4c 5F524545 		.ascii	"_REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mb"
 12832      4E545F4D 
 12832      42535254 
 12832      4F574353 
 12832      5F535441 
 12833 4f7f 7372746F 		.ascii	"srtowcs_state)\000"
 12833      7763735F 
 12833      73746174 
 12833      652900
 12834              	.LASF204:
 12835 4f8e 5F5F5546 		.ascii	"__UFRACT_MAX__ 0XFFFFP-16UR\000"
 12835      52414354 
 12835      5F4D4158 
 12835      5F5F2030 
 12835      58464646 
 12836              	.LASF476:
 12837 4faa 5F5F5F69 		.ascii	"___int_least64_t_defined 1\000"
 12837      6E745F6C 
 12837      65617374 
 12837      36345F74 
 12837      5F646566 
 12838              	.LASF608:
 12839 4fc5 5F416C69 		.ascii	"_Alignof(x) __alignof(x)\000"
 12839      676E6F66 
 12839      28782920 
 12839      5F5F616C 
 12839      69676E6F 
 12840              	.LASF554:
 12841 4fde 5F5F5448 		.ascii	"__THROW \000"
 12841      524F5720 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 340


 12841      00
 12842              	.LASF1143:
 12843 4fe7 76546173 		.ascii	"vTaskEndScheduler\000"
 12843      6B456E64 
 12843      53636865 
 12843      64756C65 
 12843      7200
 12844              	.LASF1082:
 12845 4ff9 756C4C65 		.ascii	"ulLengthInBytes\000"
 12845      6E677468 
 12845      496E4279 
 12845      74657300 
 12846              	.LASF543:
 12847 5009 5F524545 		.ascii	"_REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)"
 12847      4E545F4C 
 12847      3634415F 
 12847      42554628 
 12847      70747229 
 12848 503c 00       		.ascii	"\000"
 12849              	.LASF666:
 12850 503d 5F5F5354 		.ascii	"__STDINT_EXP(x) __ ##x ##__\000"
 12850      44494E54 
 12850      5F455850 
 12850      28782920 
 12850      5F5F2023 
 12851              	.LASF513:
 12852 5059 5F524545 		.ascii	"_REENT_INIT(var) { 0, &(var).__sf[0], &(var).__sf[1"
 12852      4E545F49 
 12852      4E495428 
 12852      76617229 
 12852      207B2030 
 12853 508c 5D2C2026 		.ascii	"], &(var).__sf[2], 0, \"\", 0, \"C\", 0, _NULL, _NU"
 12853      28766172 
 12853      292E5F5F 
 12853      73665B32 
 12853      5D2C2030 
 12854 50bb 4C4C2C20 		.ascii	"LL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, \"\", "
 12854      302C205F 
 12854      4E554C4C 
 12854      2C205F4E 
 12854      554C4C2C 
 12855 50ec 7B302C20 		.ascii	"{0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_"
 12855      302C2030 
 12855      2C20302C 
 12855      20302C20 
 12855      302C2030 
 12856 511f 302C205F 		.ascii	"0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0"
 12856      52414E44 
 12856      34385F53 
 12856      4545445F 
 12856      312C205F 
 12857 5152 2C205F52 		.ascii	", _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {"
 12857      414E4434 
 12857      385F4D55 
 12857      4C545F31 
 12857      2C205F52 
 12858 5185 302C207B 		.ascii	"0, {0}}, {0, {0}}, {0, {0}}, \"\", \"\", 0, {0, {0}"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 341


 12858      307D7D2C 
 12858      207B302C 
 12858      207B307D 
 12858      7D2C207B 
 12859 51b4 7D2C207B 		.ascii	"}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REE"
 12859      302C207B 
 12859      307D7D2C 
 12859      207B302C 
 12859      207B307D 
 12860 51e7 4E545F49 		.ascii	"NT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }\000"
 12860      4E49545F 
 12860      41544558 
 12860      4954205F 
 12860      4E554C4C 
 12861              	.LASF26:
 12862 5211 5F5F4259 		.ascii	"__BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 12862      54455F4F 
 12862      52444552 
 12862      5F5F205F 
 12862      5F4F5244 
 12863              	.LASF1151:
 12864 5238 75784172 		.ascii	"uxArraySize\000"
 12864      72617953 
 12864      697A6500 
 12865              	.LASF1204:
 12866 5244 70785265 		.ascii	"pxReadyTasksLists\000"
 12866      61647954 
 12866      61736B73 
 12866      4C697374 
 12866      7300
 12867              	.LASF719:
 12868 5256 55494E54 		.ascii	"UINT_FAST64_MAX __UINT_FAST64_MAX__\000"
 12868      5F464153 
 12868      5436345F 
 12868      4D415820 
 12868      5F5F5549 
 12869              	.LASF388:
 12870 527a 5F4E4F54 		.ascii	"_NOTHROW \000"
 12870      48524F57 
 12870      2000
 12871              	.LASF802:
 12872 5284 706F7274 		.ascii	"portSHORT short\000"
 12872      53484F52 
 12872      54207368 
 12872      6F727400 
 12873              	.LASF357:
 12874 5294 5F414E53 		.ascii	"_ANSIDECL_H_ \000"
 12874      49444543 
 12874      4C5F485F 
 12874      2000
 12875              	.LASF806:
 12876 52a2 706F7274 		.ascii	"portSTACK_GROWTH ( -1 )\000"
 12876      53544143 
 12876      4B5F4752 
 12876      4F575448 
 12876      2028202D 
 12877              	.LASF819:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 342


 12878 52ba 706F7274 		.ascii	"portEXIT_CRITICAL() vPortExitCritical()\000"
 12878      45584954 
 12878      5F435249 
 12878      54494341 
 12878      4C282920 
 12879              	.LASF1070:
 12880 52e2 6552756E 		.ascii	"eRunning\000"
 12880      6E696E67 
 12880      00
 12881              	.LASF647:
 12882 52eb 5F5F504F 		.ascii	"__POSIX_VISIBLE 200809\000"
 12882      5349585F 
 12882      56495349 
 12882      424C4520 
 12882      32303038 
 12883              	.LASF942:
 12884 5302 7853656D 		.ascii	"xSemaphoreHandle SemaphoreHandle_t\000"
 12884      6170686F 
 12884      72654861 
 12884      6E646C65 
 12884      2053656D 
 12885              	.LASF201:
 12886 5325 5F5F5546 		.ascii	"__UFRACT_FBIT__ 16\000"
 12886      52414354 
 12886      5F464249 
 12886      545F5F20 
 12886      313600
 12887              	.LASF957:
 12888 5338 494E435F 		.ascii	"INC_TASK_H \000"
 12888      5441534B 
 12888      5F482000 
 12889              	.LASF282:
 12890 5344 5F5F5544 		.ascii	"__UDQ_FBIT__ 64\000"
 12890      515F4642 
 12890      49545F5F 
 12890      20363400 
 12891              	.LASF584:
 12892 5354 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_MEMCPY 1\000"
 12892      55434C49 
 12892      4B455F42 
 12892      55494C54 
 12892      494E5F4D 
 12893              	.LASF156:
 12894 5370 5F5F4C44 		.ascii	"__LDBL_MAX_10_EXP__ 308\000"
 12894      424C5F4D 
 12894      41585F31 
 12894      305F4558 
 12894      505F5F20 
 12895              	.LASF759:
 12896 5388 636F6E66 		.ascii	"configUSE_COUNTING_SEMAPHORES 1\000"
 12896      69675553 
 12896      455F434F 
 12896      554E5449 
 12896      4E475F53 
 12897              	.LASF976:
 12898 53a8 74736B4B 		.ascii	"tskKERNEL_VERSION_MAJOR 8\000"
 12898      45524E45 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 343


 12898      4C5F5645 
 12898      5253494F 
 12898      4E5F4D41 
 12899              	.LASF825:
 12900 53c2 706F7274 		.ascii	"portRESET_READY_PRIORITY(uxPriority,uxReadyPrioriti"
 12900      52455345 
 12900      545F5245 
 12900      4144595F 
 12900      5052494F 
 12901 53f5 65732920 		.ascii	"es) ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority"
 12901      28207578 
 12901      52656164 
 12901      79507269 
 12901      6F726974 
 12902 5428 20292029 		.ascii	" ) )\000"
 12902      00
 12903              	.LASF147:
 12904 542d 5F5F4442 		.ascii	"__DBL_DENORM_MIN__ ((double)4.9406564584124654e-324"
 12904      4C5F4445 
 12904      4E4F524D 
 12904      5F4D494E 
 12904      5F5F2028 
 12905 5460 4C2900   		.ascii	"L)\000"
 12906              	.LASF1121:
 12907 5463 7854696D 		.ascii	"xTimeToWake\000"
 12907      65546F57 
 12907      616B6500 
 12908              	.LASF939:
 12909 546f 706F7274 		.ascii	"portTickType TickT_t\000"
 12909      5469636B 
 12909      54797065 
 12909      20546963 
 12909      6B545F74 
 12910              	.LASF506:
 12911 5484 5F52414E 		.ascii	"_RAND48_MULT_1 (0xdeec)\000"
 12911      4434385F 
 12911      4D554C54 
 12911      5F312028 
 12911      30786465 
 12912              	.LASF943:
 12913 549c 78517565 		.ascii	"xQueueSetHandle QueueSetHandle_t\000"
 12913      75655365 
 12913      7448616E 
 12913      646C6520 
 12913      51756575 
 12914              	.LASF1031:
 12915 54bd 756E7369 		.ascii	"unsigned int\000"
 12915      676E6564 
 12915      20696E74 
 12915      00
 12916              	.LASF422:
 12917 54ca 5F53495A 		.ascii	"_SIZE_T_DEFINED_ \000"
 12917      455F545F 
 12917      44454649 
 12917      4E45445F 
 12917      2000
 12918              	.LASF375:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 344


 12919 54dc 5F5F4E45 		.ascii	"__NEWLIB_MINOR__ 2\000"
 12919      574C4942 
 12919      5F4D494E 
 12919      4F525F5F 
 12919      203200
 12920              	.LASF125:
 12921 54ef 5F5F464C 		.ascii	"__FLT_MIN_EXP__ (-125)\000"
 12921      545F4D49 
 12921      4E5F4558 
 12921      505F5F20 
 12921      282D3132 
 12922              	.LASF121:
 12923 5506 5F5F4445 		.ascii	"__DEC_EVAL_METHOD__ 2\000"
 12923      435F4556 
 12923      414C5F4D 
 12923      4554484F 
 12923      445F5F20 
 12924              	.LASF737:
 12925 551c 55494E54 		.ascii	"UINT32_C(x) __UINT32_C(x)\000"
 12925      33325F43 
 12925      28782920 
 12925      5F5F5549 
 12925      4E543332 
 12926              	.LASF1142:
 12927 5536 76546173 		.ascii	"vTaskStartScheduler\000"
 12927      6B537461 
 12927      72745363 
 12927      68656475 
 12927      6C657200 
 12928              	.LASF232:
 12929 554a 5F5F5553 		.ascii	"__USACCUM_IBIT__ 8\000"
 12929      41434355 
 12929      4D5F4942 
 12929      49545F5F 
 12929      203800
 12930              	.LASF983:
 12931 555d 7461736B 		.ascii	"taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()\000"
 12931      44495341 
 12931      424C455F 
 12931      494E5445 
 12931      52525550 
 12932              	.LASF708:
 12933 558f 494E545F 		.ascii	"INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)\000"
 12933      46415354 
 12933      385F4D49 
 12933      4E20282D 
 12933      5F5F494E 
 12934              	.LASF620:
 12935 55b6 5F5F7265 		.ascii	"__restrict \000"
 12935      73747269 
 12935      63742000 
 12936              	.LASF117:
 12937 55c2 5F5F5549 		.ascii	"__UINTPTR_MAX__ 4294967295U\000"
 12937      4E545054 
 12937      525F4D41 
 12937      585F5F20 
 12937      34323934 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 345


 12938              	.LASF124:
 12939 55de 5F5F464C 		.ascii	"__FLT_DIG__ 6\000"
 12939      545F4449 
 12939      475F5F20 
 12939      3600
 12940              	.LASF245:
 12941 55ec 5F5F5541 		.ascii	"__UACCUM_EPSILON__ 0x1P-16UK\000"
 12941      4343554D 
 12941      5F455053 
 12941      494C4F4E 
 12941      5F5F2030 
 12942              	.LASF368:
 12943 5609 5F465657 		.ascii	"_FVWRITE_IN_STREAMIO 1\000"
 12943      52495445 
 12943      5F494E5F 
 12943      53545245 
 12943      414D494F 
 12944              	.LASF445:
 12945 5620 5F574348 		.ascii	"_WCHAR_T_DECLARED \000"
 12945      41525F54 
 12945      5F444543 
 12945      4C415245 
 12945      442000
 12946              	.LASF1195:
 12947 5633 70727644 		.ascii	"prvDeleteTCB\000"
 12947      656C6574 
 12947      65544342 
 12947      00
 12948              	.LASF868:
 12949 5640 74726163 		.ascii	"traceCREATE_MUTEX(pxNewQueue) \000"
 12949      65435245 
 12949      4154455F 
 12949      4D555445 
 12949      58287078 
 12950              	.LASF926:
 12951 565f 636F6E66 		.ascii	"configUSE_TICKLESS_IDLE 0\000"
 12951      69675553 
 12951      455F5449 
 12951      434B4C45 
 12951      53535F49 
 12952              	.LASF451:
 12953 5679 5F535953 		.ascii	"_SYS_REENT_H_ \000"
 12953      5F524545 
 12953      4E545F48 
 12953      5F2000
 12954              	.LASF120:
 12955 5688 5F5F464C 		.ascii	"__FLT_EVAL_METHOD__ 0\000"
 12955      545F4556 
 12955      414C5F4D 
 12955      4554484F 
 12955      445F5F20 
 12956              	.LASF1036:
 12957 569e 73686F72 		.ascii	"short int\000"
 12957      7420696E 
 12957      7400
 12958              	.LASF921:
 12959 56a8 706F7274 		.ascii	"portPRIVILEGE_BIT ( ( UBaseT_t ) 0x00 )\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 346


 12959      50524956 
 12959      494C4547 
 12959      455F4249 
 12959      54202820 
 12960              	.LASF1065:
 12961 56d0 75784E75 		.ascii	"uxNumberOfItems\000"
 12961      6D626572 
 12961      4F664974 
 12961      656D7300 
 12962              	.LASF348:
 12963 56e0 5F5F4152 		.ascii	"__ARM_ARCH_7M__ 1\000"
 12963      4D5F4152 
 12963      43485F37 
 12963      4D5F5F20 
 12963      3100
 12964              	.LASF860:
 12965 56f2 74726163 		.ascii	"traceTASK_SWITCHED_OUT() \000"
 12965      65544153 
 12965      4B5F5357 
 12965      49544348 
 12965      45445F4F 
 12966              	.LASF507:
 12967 570c 5F52414E 		.ascii	"_RAND48_MULT_2 (0x0005)\000"
 12967      4434385F 
 12967      4D554C54 
 12967      5F322028 
 12967      30783030 
 12968              	.LASF397:
 12969 5724 5F455846 		.ascii	"_EXFUN_NOTHROW(name,proto) name proto _NOTHROW\000"
 12969      554E5F4E 
 12969      4F544852 
 12969      4F57286E 
 12969      616D652C 
 12970              	.LASF1190:
 12971 5753 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 12971      61736B43 
 12971      6865636B 
 12971      46726565 
 12971      53746163 
 12972              	.LASF457:
 12973 576e 5F545F50 		.ascii	"_T_PTRDIFF \000"
 12973      54524449 
 12973      46462000 
 12974              	.LASF276:
 12975 577a 5F5F5551 		.ascii	"__UQQ_FBIT__ 8\000"
 12975      515F4642 
 12975      49545F5F 
 12975      203800
 12976              	.LASF1166:
 12977 5789 7078556E 		.ascii	"pxUnblockedTCB\000"
 12977      626C6F63 
 12977      6B656454 
 12977      434200
 12978              	.LASF998:
 12979 5798 746D7243 		.ascii	"tmrCOMMAND_DELETE ( ( BaseT_t ) 5 )\000"
 12979      4F4D4D41 
 12979      4E445F44 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 347


 12979      454C4554 
 12979      45202820 
 12980              	.LASF1183:
 12981 57bc 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 12981      61736B49 
 12981      73546173 
 12981      6B537573 
 12981      70656E64 
 12982              	.LASF173:
 12983 57d3 5F5F4445 		.ascii	"__DEC64_MIN_EXP__ (-382)\000"
 12983      4336345F 
 12983      4D494E5F 
 12983      4558505F 
 12983      5F20282D 
 12984              	.LASF244:
 12985 57ec 5F5F5541 		.ascii	"__UACCUM_MAX__ 0XFFFFFFFFP-16UK\000"
 12985      4343554D 
 12985      5F4D4158 
 12985      5F5F2030 
 12985      58464646 
 12986              	.LASF792:
 12987 580c 65727251 		.ascii	"errQUEUE_FULL ( ( BaseT_t ) 0 )\000"
 12987      55455545 
 12987      5F46554C 
 12987      4C202820 
 12987      28204261 
 12988              	.LASF985:
 12989 582c 7461736B 		.ascii	"taskSCHEDULER_SUSPENDED ( ( BaseT_t ) 0 )\000"
 12989      53434845 
 12989      44554C45 
 12989      525F5355 
 12989      5350454E 
 12990              	.LASF1103:
 12991 5856 75784D75 		.ascii	"uxMutexesHeld\000"
 12991      74657865 
 12991      7348656C 
 12991      6400
 12992              	.LASF1193:
 12993 5864 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 12993      736B4765 
 12993      74537461 
 12993      636B4869 
 12993      67685761 
 12994              	.LASF653:
 12995 5880 616C6C6F 		.ascii	"alloca\000"
 12995      636100
 12996              	.LASF209:
 12997 5887 5F5F4C46 		.ascii	"__LFRACT_MAX__ 0X7FFFFFFFP-31LR\000"
 12997      52414354 
 12997      5F4D4158 
 12997      5F5F2030 
 12997      58374646 
 12998              	.LASF325:
 12999 58a7 5F5F5349 		.ascii	"__SIZEOF_PTRDIFF_T__ 4\000"
 12999      5A454F46 
 12999      5F505452 
 12999      44494646 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 348


 12999      5F545F5F 
 13000              	.LASF812:
 13001 58be 706F7274 		.ascii	"portEND_SWITCHING_ISR(xSwitchRequired) if( xSwitchR"
 13001      454E445F 
 13001      53574954 
 13001      4348494E 
 13001      475F4953 
 13002 58f1 65717569 		.ascii	"equired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSE"
 13002      72656420 
 13002      2920706F 
 13002      72744E56 
 13002      49435F49 
 13003 5924 545F4249 		.ascii	"T_BIT\000"
 13003      5400
 13004              	.LASF432:
 13005 592a 5F5F5743 		.ascii	"__WCHAR_T__ \000"
 13005      4841525F 
 13005      545F5F20 
 13005      00
 13006              	.LASF473:
 13007 5937 5F5F5F69 		.ascii	"___int_least8_t_defined 1\000"
 13007      6E745F6C 
 13007      65617374 
 13007      385F745F 
 13007      64656669 
 13008              	.LASF1069:
 13009 5951 5461736B 		.ascii	"TaskHandle_t\000"
 13009      48616E64 
 13009      6C655F74 
 13009      00
 13010              	.LASF27:
 13011 595e 5F5F464C 		.ascii	"__FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__\000"
 13011      4F41545F 
 13011      574F5244 
 13011      5F4F5244 
 13011      45525F5F 
 13012              	.LASF750:
 13013 598b 636F6E66 		.ascii	"configMINIMAL_STACK_SIZE ( ( unsigned short ) 256 )"
 13013      69674D49 
 13013      4E494D41 
 13013      4C5F5354 
 13013      41434B5F 
 13014 59be 00       		.ascii	"\000"
 13015              	.LASF444:
 13016 59bf 5F474343 		.ascii	"_GCC_WCHAR_T \000"
 13016      5F574348 
 13016      41525F54 
 13016      2000
 13017              	.LASF677:
 13018 59cd 5F5F696E 		.ascii	"__int_fast8_t_defined 1\000"
 13018      745F6661 
 13018      7374385F 
 13018      745F6465 
 13018      66696E65 
 13019              	.LASF996:
 13020 59e5 746D7243 		.ascii	"tmrCOMMAND_STOP ( ( BaseT_t ) 3 )\000"
 13020      4F4D4D41 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 349


 13020      4E445F53 
 13020      544F5020 
 13020      28202820 
 13021              	.LASF37:
 13022 5a07 5F5F5349 		.ascii	"__SIG_ATOMIC_TYPE__ int\000"
 13022      475F4154 
 13022      4F4D4943 
 13022      5F545950 
 13022      455F5F20 
 13023              	.LASF610:
 13024 5a1f 5F4E6F72 		.ascii	"_Noreturn __dead2\000"
 13024      65747572 
 13024      6E205F5F 
 13024      64656164 
 13024      3200
 13025              	.LASF704:
 13026 5a31 55494E54 		.ascii	"UINT64_MAX __UINT64_MAX__\000"
 13026      36345F4D 
 13026      4158205F 
 13026      5F55494E 
 13026      5436345F 
 13027              	.LASF678:
 13028 5a4b 5F5F696E 		.ascii	"__int_fast16_t_defined 1\000"
 13028      745F6661 
 13028      73743136 
 13028      5F745F64 
 13028      6566696E 
 13029              	.LASF1068:
 13030 5a64 4C697374 		.ascii	"List_t\000"
 13030      5F7400
 13031              	.LASF179:
 13032 5a6b 5F5F4445 		.ascii	"__DEC128_MANT_DIG__ 34\000"
 13032      43313238 
 13032      5F4D414E 
 13032      545F4449 
 13032      475F5F20 
 13033              	.LASF371:
 13034 5a82 5F554E42 		.ascii	"_UNBUF_STREAM_OPT 1\000"
 13034      55465F53 
 13034      54524541 
 13034      4D5F4F50 
 13034      54203100 
 13035              	.LASF382:
 13036 5a96 5F5F494D 		.ascii	"__IMPORT \000"
 13036      504F5254 
 13036      2000
 13037              	.LASF498:
 13038 5aa0 5F415445 		.ascii	"_ATEXIT_SIZE 32\000"
 13038      5849545F 
 13038      53495A45 
 13038      20333200 
 13039              	.LASF296:
 13040 5ab0 5F5F5553 		.ascii	"__USA_FBIT__ 16\000"
 13040      415F4642 
 13040      49545F5F 
 13040      20313600 
 13041              	.LASF1163:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 350


 13042 5ac0 78546963 		.ascii	"xTicksToWait\000"
 13042      6B73546F 
 13042      57616974 
 13042      00
 13043              	.LASF466:
 13044 5acd 5F4D4143 		.ascii	"_MACHINE__TYPES_H \000"
 13044      48494E45 
 13044      5F5F5459 
 13044      5045535F 
 13044      482000
 13045              	.LASF481:
 13046 5ae0 5F5F6C6F 		.ascii	"__lock_init(lock) (_CAST_VOID 0)\000"
 13046      636B5F69 
 13046      6E697428 
 13046      6C6F636B 
 13046      2920285F 
 13047              	.LASF356:
 13048 5b01 5F5F4945 		.ascii	"__IEEE_LITTLE_ENDIAN \000"
 13048      45455F4C 
 13048      4954544C 
 13048      455F454E 
 13048      4449414E 
 13049              	.LASF1039:
 13050 5b17 6C6F6E67 		.ascii	"long int\000"
 13050      20696E74 
 13050      00
 13051              	.LASF1145:
 13052 5b20 78546173 		.ascii	"xTaskResumeAll\000"
 13052      6B526573 
 13052      756D6541 
 13052      6C6C00
 13053              	.LASF814:
 13054 5b2f 706F7274 		.ascii	"portSET_INTERRUPT_MASK_FROM_ISR() ulPortSetInterrup"
 13054      5345545F 
 13054      494E5445 
 13054      52525550 
 13054      545F4D41 
 13055 5b62 744D6173 		.ascii	"tMask()\000"
 13055      6B282900 
 13056              	.LASF311:
 13057 5b6a 5F5F4743 		.ascii	"__GCC_ATOMIC_CHAR_LOCK_FREE 2\000"
 13057      435F4154 
 13057      4F4D4943 
 13057      5F434841 
 13057      525F4C4F 
 13058              	.LASF399:
 13059 5b88 5F455850 		.ascii	"_EXPARM(name,proto) (* name) proto\000"
 13059      41524D28 
 13059      6E616D65 
 13059      2C70726F 
 13059      746F2920 
 13060              	.LASF935:
 13061 5bab 6D74434F 		.ascii	"mtCOVERAGE_TEST_MARKER() \000"
 13061      56455241 
 13061      47455F54 
 13061      4553545F 
 13061      4D41524B 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 351


 13062              	.LASF210:
 13063 5bc5 5F5F4C46 		.ascii	"__LFRACT_EPSILON__ 0x1P-31LR\000"
 13063      52414354 
 13063      5F455053 
 13063      494C4F4E 
 13063      5F5F2030 
 13064              	.LASF386:
 13065 5be2 5F424547 		.ascii	"_BEGIN_STD_C \000"
 13065      494E5F53 
 13065      54445F43 
 13065      2000
 13066              	.LASF888:
 13067 5bf0 74726163 		.ascii	"traceTASK_CREATE(pxNewTCB) \000"
 13067      65544153 
 13067      4B5F4352 
 13067      45415445 
 13067      2870784E 
 13068              	.LASF613:
 13069 5c0c 5F5F6D61 		.ascii	"__malloc_like __attribute__((__malloc__))\000"
 13069      6C6C6F63 
 13069      5F6C696B 
 13069      65205F5F 
 13069      61747472 
 13070              	.LASF758:
 13071 5c36 636F6E66 		.ascii	"configMAX_CO_ROUTINE_PRIORITIES ( 2 )\000"
 13071      69674D41 
 13071      585F434F 
 13071      5F524F55 
 13071      54494E45 
 13072              	.LASF725:
 13073 5c5c 5349475F 		.ascii	"SIG_ATOMIC_MAX __STDINT_EXP(INT_MAX)\000"
 13073      41544F4D 
 13073      49435F4D 
 13073      4158205F 
 13073      5F535444 
 13074              	.LASF332:
 13075 5c81 5F5F4152 		.ascii	"__ARM_SIZEOF_MINIMAL_ENUM 1\000"
 13075      4D5F5349 
 13075      5A454F46 
 13075      5F4D494E 
 13075      494D414C 
 13076              	.LASF92:
 13077 5c9d 5F5F494E 		.ascii	"__INT_LEAST8_MAX__ 127\000"
 13077      545F4C45 
 13077      41535438 
 13077      5F4D4158 
 13077      5F5F2031 
 13078              	.LASF884:
 13079 5cb4 74726163 		.ascii	"traceQUEUE_RECEIVE_FROM_ISR(pxQueue) \000"
 13079      65515545 
 13079      55455F52 
 13079      45434549 
 13079      56455F46 
 13080              	.LASF335:
 13081 5cda 5F5F6172 		.ascii	"__arm__ 1\000"
 13081      6D5F5F20 
 13081      3100
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 352


 13082              	.LASF978:
 13083 5ce4 74736B4B 		.ascii	"tskKERNEL_VERSION_BUILD 2\000"
 13083      45524E45 
 13083      4C5F5645 
 13083      5253494F 
 13083      4E5F4255 
 13084              	.LASF863:
 13085 5cfe 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) \000"
 13085      65424C4F 
 13085      434B494E 
 13085      475F4F4E 
 13085      5F515545 
 13086              	.LASF1067:
 13087 5d27 784C6973 		.ascii	"xListEnd\000"
 13087      74456E64 
 13087      00
 13088              	.LASF896:
 13089 5d30 74726163 		.ascii	"traceTASK_RESUME_FROM_ISR(pxTaskToResume) \000"
 13089      65544153 
 13089      4B5F5245 
 13089      53554D45 
 13089      5F46524F 
 13090              	.LASF578:
 13091 5d5b 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_STDARG 1\000"
 13091      55434C49 
 13091      4B455F42 
 13091      55494C54 
 13091      494E5F53 
 13092              	.LASF426:
 13093 5d77 5F5F5F69 		.ascii	"___int_size_t_h \000"
 13093      6E745F73 
 13093      697A655F 
 13093      745F6820 
 13093      00
 13094              	.LASF380:
 13095 5d88 5F5F5241 		.ascii	"__RAND_MAX 0x7fffffff\000"
 13095      4E445F4D 
 13095      41582030 
 13095      78376666 
 13095      66666666 
 13096              	.LASF1124:
 13097 5d9e 78436F6E 		.ascii	"xConstTickCount\000"
 13097      73745469 
 13097      636B436F 
 13097      756E7400 
 13098              	.LASF595:
 13099 5dae 5F5F5354 		.ascii	"__STRING(x) #x\000"
 13099      52494E47 
 13099      28782920 
 13099      237800
 13100              	.LASF433:
 13101 5dbd 5F574348 		.ascii	"_WCHAR_T \000"
 13101      41525F54 
 13101      2000
 13102              	.LASF685:
 13103 5dc7 494E5438 		.ascii	"INT8_MAX __INT8_MAX__\000"
 13103      5F4D4158 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 353


 13103      205F5F49 
 13103      4E54385F 
 13103      4D41585F 
 13104              	.LASF639:
 13105 5ddd 5F5F4642 		.ascii	"__FBSDID(s) struct __hack\000"
 13105      53444944 
 13105      28732920 
 13105      73747275 
 13105      6374205F 
 13106              	.LASF1072:
 13107 5df7 65426C6F 		.ascii	"eBlocked\000"
 13107      636B6564 
 13107      00
 13108              	.LASF847:
 13109 5e00 636F6E66 		.ascii	"configASSERT_DEFINED 1\000"
 13109      69674153 
 13109      53455254 
 13109      5F444546 
 13109      494E4544 
 13110              	.LASF717:
 13111 5e17 494E545F 		.ascii	"INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)\000"
 13111      46415354 
 13111      36345F4D 
 13111      494E2028 
 13111      2D5F5F49 
 13112              	.LASF788:
 13113 5e40 70645452 		.ascii	"pdTRUE ( ( BaseT_t ) 1 )\000"
 13113      55452028 
 13113      20282042 
 13113      61736554 
 13113      5F742029 
 13114              	.LASF467:
 13115 5e59 5F4D4143 		.ascii	"_MACHINE__DEFAULT_TYPES_H \000"
 13115      48494E45 
 13115      5F5F4445 
 13115      4641554C 
 13115      545F5459 
 13116              	.LASF22:
 13117 5e74 5F5F4249 		.ascii	"__BIGGEST_ALIGNMENT__ 8\000"
 13117      47474553 
 13117      545F414C 
 13117      49474E4D 
 13117      454E545F 
 13118              	.LASF233:
 13119 5e8c 5F5F5553 		.ascii	"__USACCUM_MIN__ 0.0UHK\000"
 13119      41434355 
 13119      4D5F4D49 
 13119      4E5F5F20 
 13119      302E3055 
 13120              	.LASF462:
 13121 5ea3 5F474343 		.ascii	"_GCC_PTRDIFF_T \000"
 13121      5F505452 
 13121      44494646 
 13121      5F542000 
 13122              	.LASF582:
 13123 5eb3 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_NEXT_ARG 1\000"
 13123      55434C49 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 354


 13123      4B455F42 
 13123      55494C54 
 13123      494E5F4E 
 13124              	.LASF765:
 13125 5ed1 494E434C 		.ascii	"INCLUDE_vTaskPrioritySet 1\000"
 13125      5544455F 
 13125      76546173 
 13125      6B507269 
 13125      6F726974 
 13126              	.LASF293:
 13127 5eec 5F5F5441 		.ascii	"__TA_IBIT__ 64\000"
 13127      5F494249 
 13127      545F5F20 
 13127      363400
 13128              	.LASF771:
 13129 5efb 494E434C 		.ascii	"INCLUDE_vTaskDelay 1\000"
 13129      5544455F 
 13129      76546173 
 13129      6B44656C 
 13129      61792031 
 13130              	.LASF1128:
 13131 5f10 75785461 		.ascii	"uxTaskPriorityGet\000"
 13131      736B5072 
 13131      696F7269 
 13131      74794765 
 13131      7400
 13132              	.LASF1093:
 13133 5f22 75735374 		.ascii	"usStackHighWaterMark\000"
 13133      61636B48 
 13133      69676857 
 13133      61746572 
 13133      4D61726B 
 13134              	.LASF1045:
 13135 5f37 63686172 		.ascii	"char\000"
 13135      00
 13136              	.LASF479:
 13137 5f3c 5F5F4C4F 		.ascii	"__LOCK_INIT(class,lock) static int lock = 0;\000"
 13137      434B5F49 
 13137      4E495428 
 13137      636C6173 
 13137      732C6C6F 
 13138              	.LASF1123:
 13139 5f69 7853686F 		.ascii	"xShouldDelay\000"
 13139      756C6444 
 13139      656C6179 
 13139      00
 13140              	.LASF441:
 13141 5f76 5F574348 		.ascii	"_WCHAR_T_H \000"
 13141      41525F54 
 13141      5F482000 
 13142              	.LASF791:
 13143 5f82 65727251 		.ascii	"errQUEUE_EMPTY ( ( BaseT_t ) 0 )\000"
 13143      55455545 
 13143      5F454D50 
 13143      54592028 
 13143      20282042 
 13144              	.LASF837:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 355


 13145 5fa3 494E434C 		.ascii	"INCLUDE_xQueueGetMutexHolder 0\000"
 13145      5544455F 
 13145      78517565 
 13145      75654765 
 13145      744D7574 
 13146              	.LASF340:
 13147 5fc2 5F5F4152 		.ascii	"__ARM_ARCH_ISA_THUMB 2\000"
 13147      4D5F4152 
 13147      43485F49 
 13147      53415F54 
 13147      48554D42 
 13148              	.LASF106:
 13149 5fd9 5F5F5549 		.ascii	"__UINT_LEAST64_MAX__ 18446744073709551615ULL\000"
 13149      4E545F4C 
 13149      45415354 
 13149      36345F4D 
 13149      41585F5F 
 13150              	.LASF728:
 13151 6006 57434841 		.ascii	"WCHAR_MIN __WCHAR_MIN__\000"
 13151      525F4D49 
 13151      4E205F5F 
 13151      57434841 
 13151      525F4D49 
 13152              	.LASF369:
 13153 601e 5F465345 		.ascii	"_FSEEK_OPTIMIZATION 1\000"
 13153      454B5F4F 
 13153      5054494D 
 13153      495A4154 
 13153      494F4E20 
 13154              	.LASF108:
 13155 6034 5F5F494E 		.ascii	"__INT_FAST8_MAX__ 2147483647\000"
 13155      545F4641 
 13155      5354385F 
 13155      4D41585F 
 13155      5F203231 
 13156              	.LASF1088:
 13157 6051 78546173 		.ascii	"xTaskNumber\000"
 13157      6B4E756D 
 13157      62657200 
 13158              	.LASF865:
 13159 605d 74726163 		.ascii	"traceMOVED_TASK_TO_READY_STATE(pxTCB) \000"
 13159      654D4F56 
 13159      45445F54 
 13159      41534B5F 
 13159      544F5F52 
 13160              	.LASF643:
 13161 6084 5F5F434F 		.ascii	"__COPYRIGHT(s) struct __hack\000"
 13161      50595249 
 13161      47485428 
 13161      73292073 
 13161      74727563 
 13162              	.LASF202:
 13163 60a1 5F5F5546 		.ascii	"__UFRACT_IBIT__ 0\000"
 13163      52414354 
 13163      5F494249 
 13163      545F5F20 
 13163      3000
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 356


 13164              	.LASF329:
 13165 60b3 5F5F4152 		.ascii	"__ARM_32BIT_STATE 1\000"
 13165      4D5F3332 
 13165      4249545F 
 13165      53544154 
 13165      45203100 
 13166              	.LASF1136:
 13167 60c7 76546173 		.ascii	"vTaskSuspend\000"
 13167      6B537573 
 13167      70656E64 
 13167      00
 13168              	.LASF93:
 13169 60d4 5F5F494E 		.ascii	"__INT8_C(c) c\000"
 13169      54385F43 
 13169      28632920 
 13169      6300
 13170              	.LASF207:
 13171 60e2 5F5F4C46 		.ascii	"__LFRACT_IBIT__ 0\000"
 13171      52414354 
 13171      5F494249 
 13171      545F5F20 
 13171      3000
 13172              	.LASF756:
 13173 60f4 636F6E66 		.ascii	"configUSE_CO_ROUTINES 0\000"
 13173      69675553 
 13173      455F434F 
 13173      5F524F55 
 13173      54494E45 
 13174              	.LASF453:
 13175 610c 5F535444 		.ascii	"_STDDEF_H_ \000"
 13175      4445465F 
 13175      485F2000 
 13176              	.LASF1134:
 13177 6118 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 13177      696F7269 
 13177      74795573 
 13177      65644F6E 
 13177      456E7472 
 13178              	.LASF139:
 13179 612e 5F5F4442 		.ascii	"__DBL_MIN_EXP__ (-1021)\000"
 13179      4C5F4D49 
 13179      4E5F4558 
 13179      505F5F20 
 13179      282D3130 
 13180              	.LASF1198:
 13181 6146 76546173 		.ascii	"vTaskPriorityInherit\000"
 13181      6B507269 
 13181      6F726974 
 13181      79496E68 
 13181      65726974 
 13182              	.LASF1087:
 13183 615b 70635461 		.ascii	"pcTaskName\000"
 13183      736B4E61 
 13183      6D6500
 13184              	.LASF663:
 13185 6166 494E435F 		.ascii	"INC_FREERTOS_H \000"
 13185      46524545 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 357


 13185      52544F53 
 13185      5F482000 
 13186              	.LASF654:
 13187 6176 616C6C6F 		.ascii	"alloca(size) __builtin_alloca(size)\000"
 13187      63612873 
 13187      697A6529 
 13187      205F5F62 
 13187      75696C74 
 13188              	.LASF633:
 13189 619a 5F5F7072 		.ascii	"__printf0like(fmtarg,firstvararg) \000"
 13189      696E7466 
 13189      306C696B 
 13189      6528666D 
 13189      74617267 
 13190              	.LASF86:
 13191 61bd 5F5F494E 		.ascii	"__INT32_MAX__ 2147483647L\000"
 13191      5433325F 
 13191      4D41585F 
 13191      5F203231 
 13191      34373438 
 13192              	.LASF919:
 13193 61d7 706F7274 		.ascii	"portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() \000"
 13193      434F4E46 
 13193      49475552 
 13193      455F5449 
 13193      4D45525F 
 13194              	.LASF488:
 13195 6201 5F5F6C6F 		.ascii	"__lock_try_acquire_recursive(lock) (_CAST_VOID 0)\000"
 13195      636B5F74 
 13195      72795F61 
 13195      63717569 
 13195      72655F72 
 13196              	.LASF175:
 13197 6233 5F5F4445 		.ascii	"__DEC64_MIN__ 1E-383DD\000"
 13197      4336345F 
 13197      4D494E5F 
 13197      5F203145 
 13197      2D333833 
 13198              	.LASF832:
 13199 624a 50524956 		.ascii	"PRIVILEGED_FUNCTION \000"
 13199      494C4547 
 13199      45445F46 
 13199      554E4354 
 13199      494F4E20 
 13200              	.LASF741:
 13201 625f 55494E54 		.ascii	"UINTMAX_C(x) __UINTMAX_C(x)\000"
 13201      4D41585F 
 13201      43287829 
 13201      205F5F55 
 13201      494E544D 
 13202              	.LASF477:
 13203 627b 5F5F4558 		.ascii	"__EXP\000"
 13203      5000
 13204              	.LASF472:
 13205 6281 5F5F5F69 		.ascii	"___int64_t_defined 1\000"
 13205      6E743634 
 13205      5F745F64 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 358


 13205      6566696E 
 13205      65642031 
 13206              	.LASF162:
 13207 6296 5F5F4C44 		.ascii	"__LDBL_HAS_DENORM__ 1\000"
 13207      424C5F48 
 13207      41535F44 
 13207      454E4F52 
 13207      4D5F5F20 
 13208              	.LASF849:
 13209 62ac 494E434C 		.ascii	"INCLUDE_xTaskGetCurrentTaskHandle 0\000"
 13209      5544455F 
 13209      78546173 
 13209      6B476574 
 13209      43757272 
 13210              	.LASF1095:
 13211 62d0 74736B54 		.ascii	"tskTaskControlBlock\000"
 13211      61736B43 
 13211      6F6E7472 
 13211      6F6C426C 
 13211      6F636B00 
 13212              	.LASF1120:
 13213 62e4 7854696D 		.ascii	"xTimeIncrement\000"
 13213      65496E63 
 13213      72656D65 
 13213      6E7400
 13214              	.LASF568:
 13215 62f3 5F5F4245 		.ascii	"__BEGIN_DECLS \000"
 13215      47494E5F 
 13215      4445434C 
 13215      532000
 13216              	.LASF107:
 13217 6302 5F5F5549 		.ascii	"__UINT64_C(c) c ## ULL\000"
 13217      4E543634 
 13217      5F432863 
 13217      29206320 
 13217      23232055 
 13218              	.LASF520:
 13219 6319 5F524545 		.ascii	"_REENT_CHECK_MISC(ptr) \000"
 13219      4E545F43 
 13219      4845434B 
 13219      5F4D4953 
 13219      43287074 
 13220              	.LASF1125:
 13221 6331 76546173 		.ascii	"vTaskDelay\000"
 13221      6B44656C 
 13221      617900
 13222              	.LASF580:
 13223 633c 5F5F474E 		.ascii	"__GNUC_VA_LIST_COMPATIBILITY 1\000"
 13223      55435F56 
 13223      415F4C49 
 13223      53545F43 
 13223      4F4D5041 
 13224              	.LASF716:
 13225 635b 55494E54 		.ascii	"UINT_FAST32_MAX __UINT_FAST32_MAX__\000"
 13225      5F464153 
 13225      5433325F 
 13225      4D415820 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 359


 13225      5F5F5549 
 13226              	.LASF48:
 13227 637f 5F5F494E 		.ascii	"__INT_LEAST32_TYPE__ long int\000"
 13227      545F4C45 
 13227      41535433 
 13227      325F5459 
 13227      50455F5F 
 13228              	.LASF944:
 13229 639d 78517565 		.ascii	"xQueueSetMemberHandle QueueSetMemberHandle_t\000"
 13229      75655365 
 13229      744D656D 
 13229      62657248 
 13229      616E646C 
 13230              	.LASF892:
 13231 63ca 74726163 		.ascii	"traceTASK_DELAY() \000"
 13231      65544153 
 13231      4B5F4445 
 13231      4C415928 
 13231      292000
 13232              	.LASF899:
 13233 63dd 74726163 		.ascii	"traceTIMER_CREATE_FAILED() \000"
 13233      6554494D 
 13233      45525F43 
 13233      52454154 
 13233      455F4641 
 13234              	.LASF1006:
 13235 63f9 7854696D 		.ascii	"xTimerChangePeriod(xTimer,xNewPeriod,xTicksToWait) "
 13235      65724368 
 13235      616E6765 
 13235      50657269 
 13235      6F642878 
 13236 642c 7854696D 		.ascii	"xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE"
 13236      65724765 
 13236      6E657269 
 13236      63436F6D 
 13236      6D616E64 
 13237 645f 5F504552 		.ascii	"_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )\000"
 13237      494F442C 
 13237      20282078 
 13237      4E657750 
 13237      6572696F 
 13238              	.LASF1159:
 13239 6491 7578546F 		.ascii	"uxTopPriority\000"
 13239      70507269 
 13239      6F726974 
 13239      7900
 13240              	.LASF1150:
 13241 649f 70785461 		.ascii	"pxTaskStatusArray\000"
 13241      736B5374 
 13241      61747573 
 13241      41727261 
 13241      7900
 13242              	.LASF197:
 13243 64b1 5F5F4652 		.ascii	"__FRACT_IBIT__ 0\000"
 13243      4143545F 
 13243      49424954 
 13243      5F5F2030 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 360


 13243      00
 13244              	.LASF914:
 13245 64c2 74726163 		.ascii	"traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup,uxBi"
 13245      65455645 
 13245      4E545F47 
 13245      524F5550 
 13245      5F534554 
 13246 64f5 7473546F 		.ascii	"tsToSet) \000"
 13246      53657429 
 13246      2000
 13247              	.LASF648:
 13248 64ff 5F5F5853 		.ascii	"__XSI_VISIBLE 700\000"
 13248      495F5649 
 13248      5349424C 
 13248      45203730 
 13248      3000
 13249              	.LASF831:
 13250 6511 4D50555F 		.ascii	"MPU_WRAPPERS_H \000"
 13250      57524150 
 13250      50455253 
 13250      5F482000 
 13251              	.LASF649:
 13252 6521 5F5F4253 		.ascii	"__BSD_VISIBLE 1\000"
 13252      445F5649 
 13252      5349424C 
 13252      45203100 
 13253              	.LASF23:
 13254 6531 5F5F4F52 		.ascii	"__ORDER_LITTLE_ENDIAN__ 1234\000"
 13254      4445525F 
 13254      4C495454 
 13254      4C455F45 
 13254      4E444941 
 13255              	.LASF1129:
 13256 654e 78546173 		.ascii	"xTask\000"
 13256      6B00
 13257              	.LASF723:
 13258 6554 53495A45 		.ascii	"SIZE_MAX __SIZE_MAX__\000"
 13258      5F4D4158 
 13258      205F5F53 
 13258      495A455F 
 13258      4D41585F 
 13259              	.LASF585:
 13260 656a 5F5F4343 		.ascii	"__CC_SUPPORTS_INLINE 1\000"
 13260      5F535550 
 13260      504F5254 
 13260      535F494E 
 13260      4C494E45 
 13261              	.LASF553:
 13262 6581 5F5F444F 		.ascii	"__DOTS , ...\000"
 13262      5453202C 
 13262      202E2E2E 
 13262      00
 13263              	.LASF172:
 13264 658e 5F5F4445 		.ascii	"__DEC64_MANT_DIG__ 16\000"
 13264      4336345F 
 13264      4D414E54 
 13264      5F444947 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 361


 13264      5F5F2031 
 13265              	.LASF1043:
 13266 65a4 6C6F6E67 		.ascii	"long long unsigned int\000"
 13266      206C6F6E 
 13266      6720756E 
 13266      7369676E 
 13266      65642069 
 13267              	.LASF126:
 13268 65bb 5F5F464C 		.ascii	"__FLT_MIN_10_EXP__ (-37)\000"
 13268      545F4D49 
 13268      4E5F3130 
 13268      5F455850 
 13268      5F5F2028 
 13269              	.LASF252:
 13270 65d4 5F5F554C 		.ascii	"__ULACCUM_IBIT__ 32\000"
 13270      41434355 
 13270      4D5F4942 
 13270      49545F5F 
 13270      20333200 
 13271              	.LASF1168:
 13272 65e8 70784576 		.ascii	"pxEventListItem\000"
 13272      656E744C 
 13272      69737449 
 13272      74656D00 
 13273              	.LASF767:
 13274 65f8 494E434C 		.ascii	"INCLUDE_vTaskDelete 1\000"
 13274      5544455F 
 13274      76546173 
 13274      6B44656C 
 13274      65746520 
 13275              	.LASF882:
 13276 660e 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR(pxQueue) \000"
 13276      65515545 
 13276      55455F53 
 13276      454E445F 
 13276      46524F4D 
 13277              	.LASF265:
 13278 6631 5F5F554C 		.ascii	"__ULLACCUM_EPSILON__ 0x1P-32ULLK\000"
 13278      4C414343 
 13278      554D5F45 
 13278      5053494C 
 13278      4F4E5F5F 
 13279              	.LASF423:
 13280 6652 5F53495A 		.ascii	"_SIZE_T_DEFINED \000"
 13280      455F545F 
 13280      44454649 
 13280      4E454420 
 13280      00
 13281              	.LASF272:
 13282 6663 5F5F4451 		.ascii	"__DQ_FBIT__ 63\000"
 13282      5F464249 
 13282      545F5F20 
 13282      363300
 13283              	.LASF1047:
 13284 6672 75696E74 		.ascii	"uint16_t\000"
 13284      31365F74 
 13284      00
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 362


 13285              	.LASF458:
 13286 667b 5F5F5054 		.ascii	"__PTRDIFF_T \000"
 13286      52444946 
 13286      465F5420 
 13286      00
 13287              	.LASF279:
 13288 6688 5F5F5548 		.ascii	"__UHQ_IBIT__ 0\000"
 13288      515F4942 
 13288      49545F5F 
 13288      203000
 13289              	.LASF1007:
 13290 6697 7854696D 		.ascii	"xTimerDelete(xTimer,xTicksToWait) xTimerGenericComm"
 13290      65724465 
 13290      6C657465 
 13290      28785469 
 13290      6D65722C 
 13291 66ca 616E6428 		.ascii	"and( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTi"
 13291      20282078 
 13291      54696D65 
 13291      7220292C 
 13291      20746D72 
 13292 66fd 636B7354 		.ascii	"cksToWait ) )\000"
 13292      6F576169 
 13292      74202920 
 13292      2900
 13293              	.LASF537:
 13294 670b 5F524545 		.ascii	"_REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctom"
 13294      4E545F57 
 13294      43544F4D 
 13294      425F5354 
 13294      41544528 
 13295 673e 625F7374 		.ascii	"b_state)\000"
 13295      61746529 
 13295      00
 13296              	.LASF924:
 13297 6747 76506F72 		.ascii	"vPortFreeAligned(pvBlockToFree) vPortFree( pvBlockT"
 13297      74467265 
 13297      65416C69 
 13297      676E6564 
 13297      28707642 
 13298 677a 6F467265 		.ascii	"oFree )\000"
 13298      65202900 
 13299              	.LASF1041:
 13300 6782 6C6F6E67 		.ascii	"long unsigned int\000"
 13300      20756E73 
 13300      69676E65 
 13300      6420696E 
 13300      7400
 13301              	.LASF55:
 13302 6794 5F5F494E 		.ascii	"__INT_FAST16_TYPE__ int\000"
 13302      545F4641 
 13302      53543136 
 13302      5F545950 
 13302      455F5F20 
 13303              	.LASF902:
 13304 67ac 74726163 		.ascii	"traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMes"
 13304      6554494D 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 363


 13304      45525F43 
 13304      4F4D4D41 
 13304      4E445F52 
 13305 67df 73616765 		.ascii	"sageValue) \000"
 13305      56616C75 
 13305      65292000 
 13306              	.LASF228:
 13307 67eb 5F5F5341 		.ascii	"__SACCUM_MIN__ (-0X1P7HK-0X1P7HK)\000"
 13307      4343554D 
 13307      5F4D494E 
 13307      5F5F2028 
 13307      2D305831 
 13308              	.LASF214:
 13309 680d 5F5F554C 		.ascii	"__ULFRACT_MAX__ 0XFFFFFFFFP-32ULR\000"
 13309      46524143 
 13309      545F4D41 
 13309      585F5F20 
 13309      30584646 
 13310              	.LASF780:
 13311 682f 636F6E66 		.ascii	"configNET_MASK3 0\000"
 13311      69674E45 
 13311      545F4D41 
 13311      534B3320 
 13311      3000
 13312              	.LASF1155:
 13313 6841 78546173 		.ascii	"xTaskIncrementTick\000"
 13313      6B496E63 
 13313      72656D65 
 13313      6E745469 
 13313      636B00
 13314              	.LASF805:
 13315 6854 706F7274 		.ascii	"portMAX_DELAY ( TickType_t ) 0xffffffffUL\000"
 13315      4D41585F 
 13315      44454C41 
 13315      59202820 
 13315      5469636B 
 13316              	.LASF820:
 13317 687e 706F7274 		.ascii	"portTASK_FUNCTION_PROTO(vFunction,pvParameters) voi"
 13317      5441534B 
 13317      5F46554E 
 13317      4354494F 
 13317      4E5F5052 
 13318 68b1 64207646 		.ascii	"d vFunction( void *pvParameters )\000"
 13318      756E6374 
 13318      696F6E28 
 13318      20766F69 
 13318      64202A70 
 13319              	.LASF249:
 13320 68d3 5F5F4C41 		.ascii	"__LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK\000"
 13320      4343554D 
 13320      5F4D4158 
 13320      5F5F2030 
 13320      58374646 
 13321              	.LASF35:
 13322 68fb 5F5F4348 		.ascii	"__CHAR16_TYPE__ short unsigned int\000"
 13322      41523136 
 13322      5F545950 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 364


 13322      455F5F20 
 13322      73686F72 
 13323              	.LASF538:
 13324 691e 5F524545 		.ascii	"_REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrle"
 13324      4E545F4D 
 13324      42524C45 
 13324      4E5F5354 
 13324      41544528 
 13325 6951 6E5F7374 		.ascii	"n_state)\000"
 13325      61746529 
 13325      00
 13326              	.LASF598:
 13327 695a 5F5F7369 		.ascii	"__signed signed\000"
 13327      676E6564 
 13327      20736967 
 13327      6E656400 
 13328              	.LASF102:
 13329 696a 5F5F5549 		.ascii	"__UINT_LEAST16_MAX__ 65535\000"
 13329      4E545F4C 
 13329      45415354 
 13329      31365F4D 
 13329      41585F5F 
 13330              	.LASF284:
 13331 6985 5F5F5554 		.ascii	"__UTQ_FBIT__ 128\000"
 13331      515F4642 
 13331      49545F5F 
 13331      20313238 
 13331      00
 13332              	.LASF1182:
 13333 6996 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 13333      64644375 
 13333      7272656E 
 13333      74546173 
 13333      6B546F44 
 13334              	.LASF531:
 13335 69b5 5F524545 		.ascii	"_REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctim"
 13335      4E545F41 
 13335      53435449 
 13335      4D455F42 
 13335      55462870 
 13336 69e8 655F6275 		.ascii	"e_buf)\000"
 13336      662900
 13337              	.LASF1004:
 13338 69ef 7854696D 		.ascii	"xTimerStart(xTimer,xTicksToWait) xTimerGenericComma"
 13338      65725374 
 13338      61727428 
 13338      7854696D 
 13338      65722C78 
 13339 6a22 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCou"
 13339      28207854 
 13339      696D6572 
 13339      20292C20 
 13339      746D7243 
 13340 6a55 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 13340      20292C20 
 13340      4E554C4C 
 13340      2C202820 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 365


 13340      78546963 
 13341              	.LASF804:
 13342 6a76 706F7274 		.ascii	"portBASE_TYPE long\000"
 13342      42415345 
 13342      5F545950 
 13342      45206C6F 
 13342      6E6700
 13343              	.LASF12:
 13344 6a89 5F5F4649 		.ascii	"__FINITE_MATH_ONLY__ 0\000"
 13344      4E495445 
 13344      5F4D4154 
 13344      485F4F4E 
 13344      4C595F5F 
 13345              	.LASF1057:
 13346 6aa0 70785072 		.ascii	"pxPrevious\000"
 13346      6576696F 
 13346      757300
 13347              	.LASF667:
 13348 6aab 5F5F6861 		.ascii	"__have_longlong64 1\000"
 13348      76655F6C 
 13348      6F6E676C 
 13348      6F6E6736 
 13348      34203100 
 13349              	.LASF726:
 13350 6abf 50545244 		.ascii	"PTRDIFF_MAX __PTRDIFF_MAX__\000"
 13350      4946465F 
 13350      4D415820 
 13350      5F5F5054 
 13350      52444946 
 13351              	.LASF529:
 13352 6adb 5F524545 		.ascii	"_REENT_MP_P5S(ptr) ((ptr)->_p5s)\000"
 13352      4E545F4D 
 13352      505F5035 
 13352      53287074 
 13352      72292028 
 13353              	.LASF1118:
 13354 6afc 76546173 		.ascii	"vTaskDelayUntil\000"
 13354      6B44656C 
 13354      6179556E 
 13354      74696C00 
 13355              	.LASF1111:
 13356 6b0c 70757853 		.ascii	"puxStackBuffer\000"
 13356      7461636B 
 13356      42756666 
 13356      657200
 13357              	.LASF1138:
 13358 6b1b 76546173 		.ascii	"vTaskResume\000"
 13358      6B526573 
 13358      756D6500 
 13359              	.LASF440:
 13360 6b27 5F574348 		.ascii	"_WCHAR_T_DEFINED \000"
 13360      41525F54 
 13360      5F444546 
 13360      494E4544 
 13360      2000
 13361              	.LASF917:
 13362 6b39 74726163 		.ascii	"tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend,pvPara"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 366


 13362      6550454E 
 13362      445F4655 
 13362      4E435F43 
 13362      414C4C5F 
 13363 6b6c 6D657465 		.ascii	"meter1,ulParameter2,ret) \000"
 13363      72312C75 
 13363      6C506172 
 13363      616D6574 
 13363      6572322C 
 13364              	.LASF254:
 13365 6b86 5F5F554C 		.ascii	"__ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK\000"
 13365      41434355 
 13365      4D5F4D41 
 13365      585F5F20 
 13365      30584646 
 13366              	.LASF611:
 13367 6bb0 5F546872 		.ascii	"_Thread_local __thread\000"
 13367      6561645F 
 13367      6C6F6361 
 13367      6C205F5F 
 13367      74687265 
 13368              	.LASF1223:
 13369 6bc7 46726565 		.ascii	"FreeRTOS/tasks.c\000"
 13369      52544F53 
 13369      2F746173 
 13369      6B732E63 
 13369      00
 13370              	.LASF1053:
 13371 6bd8 5469636B 		.ascii	"TickType_t\000"
 13371      54797065 
 13371      5F7400
 13372              	.LASF213:
 13373 6be3 5F5F554C 		.ascii	"__ULFRACT_MIN__ 0.0ULR\000"
 13373      46524143 
 13373      545F4D49 
 13373      4E5F5F20 
 13373      302E3055 
 13374              	.LASF273:
 13375 6bfa 5F5F4451 		.ascii	"__DQ_IBIT__ 0\000"
 13375      5F494249 
 13375      545F5F20 
 13375      3000
 13376              	.LASF541:
 13377 6c08 5F524545 		.ascii	"_REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrt"
 13377      4E545F57 
 13377      4352544F 
 13377      4D425F53 
 13377      54415445 
 13378 6c3b 6F6D625F 		.ascii	"omb_state)\000"
 13378      73746174 
 13378      652900
 13379              	.LASF1180:
 13380 6c46 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 13380      6865636B 
 13380      5461736B 
 13380      73576169 
 13380      74696E67 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 367


 13381              	.LASF309:
 13382 6c66 5F5F4743 		.ascii	"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1\000"
 13382      435F4841 
 13382      56455F53 
 13382      594E435F 
 13382      434F4D50 
 13383              	.LASF669:
 13384 6c8b 5F5F696E 		.ascii	"__int8_t_defined 1\000"
 13384      74385F74 
 13384      5F646566 
 13384      696E6564 
 13384      203100
 13385              	.LASF962:
 13386 6c9e 6C697374 		.ascii	"listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( ( pxLi"
 13386      5345545F 
 13386      4C495354 
 13386      5F495445 
 13386      4D5F5641 
 13387 6cd1 73744974 		.ascii	"stItem )->xItemValue = ( xValue ) )\000"
 13387      656D2029 
 13387      2D3E7849 
 13387      74656D56 
 13387      616C7565 
 13388              	.LASF992:
 13389 6cf5 746D7243 		.ascii	"tmrCOMMAND_EXECUTE_CALLBACK ( ( BaseT_t ) -1 )\000"
 13389      4F4D4D41 
 13389      4E445F45 
 13389      58454355 
 13389      54455F43 
 13390              	.LASF421:
 13391 6d24 5F425344 		.ascii	"_BSD_SIZE_T_ \000"
 13391      5F53495A 
 13391      455F545F 
 13391      2000
 13392              	.LASF74:
 13393 6d32 5F5F5749 		.ascii	"__WINT_MAX__ 4294967295U\000"
 13393      4E545F4D 
 13393      41585F5F 
 13393      20343239 
 13393      34393637 
 13394              	.LASF437:
 13395 6d4b 5F574348 		.ascii	"_WCHAR_T_ \000"
 13395      41525F54 
 13395      5F2000
 13396              	.LASF98:
 13397 6d56 5F5F494E 		.ascii	"__INT_LEAST64_MAX__ 9223372036854775807LL\000"
 13397      545F4C45 
 13397      41535436 
 13397      345F4D41 
 13397      585F5F20 
 13398              	.LASF1119:
 13399 6d80 70785072 		.ascii	"pxPreviousWakeTime\000"
 13399      6576696F 
 13399      75735761 
 13399      6B655469 
 13399      6D6500
 13400              	.LASF1156:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 368


 13401 6d93 78537769 		.ascii	"xSwitchRequired\000"
 13401      74636852 
 13401      65717569 
 13401      72656400 
 13402              	.LASF435:
 13403 6da3 5F545F57 		.ascii	"_T_WCHAR \000"
 13403      43484152 
 13403      2000
 13404              	.LASF931:
 13405 6dad 636F6E66 		.ascii	"configUSE_TIME_SLICING 1\000"
 13405      69675553 
 13405      455F5449 
 13405      4D455F53 
 13405      4C494349 
 13406              	.LASF1016:
 13407 6dc6 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE\000"
 13407      57524150 
 13407      50455253 
 13407      5F494E43 
 13407      4C554445 
 13408              	.LASF461:
 13409 6dea 5F5F5F69 		.ascii	"___int_ptrdiff_t_h \000"
 13409      6E745F70 
 13409      74726469 
 13409      66665F74 
 13409      5F682000 
 13410              	.LASF345:
 13411 6dfe 5F5F4152 		.ascii	"__ARM_FP 12\000"
 13411      4D5F4650 
 13411      20313200 
 13412              	.LASF77:
 13413 6e0a 5F5F5349 		.ascii	"__SIZE_MAX__ 4294967295U\000"
 13413      5A455F4D 
 13413      41585F5F 
 13413      20343239 
 13413      34393637 
 13414              	.LASF517:
 13415 6e23 5F524545 		.ascii	"_REENT_CHECK_TM(ptr) \000"
 13415      4E545F43 
 13415      4845434B 
 13415      5F544D28 
 13415      70747229 
 13416              	.LASF285:
 13417 6e39 5F5F5554 		.ascii	"__UTQ_IBIT__ 0\000"
 13417      515F4942 
 13417      49545F5F 
 13417      203000
 13418              	.LASF715:
 13419 6e48 494E545F 		.ascii	"INT_FAST32_MAX __INT_FAST32_MAX__\000"
 13419      46415354 
 13419      33325F4D 
 13419      4158205F 
 13419      5F494E54 
 13420              	.LASF288:
 13421 6e6a 5F5F5341 		.ascii	"__SA_FBIT__ 15\000"
 13421      5F464249 
 13421      545F5F20 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 369


 13421      313500
 13422              	.LASF443:
 13423 6e79 5F5F494E 		.ascii	"__INT_WCHAR_T_H \000"
 13423      545F5743 
 13423      4841525F 
 13423      545F4820 
 13423      00
 13424              	.LASF403:
 13425 6e8a 5F434153 		.ascii	"_CAST_VOID (void)\000"
 13425      545F564F 
 13425      49442028 
 13425      766F6964 
 13425      2900
 13426              	.LASF995:
 13427 6e9c 746D7243 		.ascii	"tmrCOMMAND_RESET ( ( BaseT_t ) 2 )\000"
 13427      4F4D4D41 
 13427      4E445F52 
 13427      45534554 
 13427      20282028 
 13428              	.LASF844:
 13429 6ebf 494E434C 		.ascii	"INCLUDE_xTaskResumeFromISR 1\000"
 13429      5544455F 
 13429      78546173 
 13429      6B526573 
 13429      756D6546 
 13430              	.LASF353:
 13431 6edc 5F5F454C 		.ascii	"__ELF__ 1\000"
 13431      465F5F20 
 13431      3100
 13432              	.LASF696:
 13433 6ee6 494E5433 		.ascii	"INT32_MIN (-__INT32_MAX__ - 1)\000"
 13433      325F4D49 
 13433      4E20282D 
 13433      5F5F494E 
 13433      5433325F 
 13434              	.LASF342:
 13435 6f05 5F5F5448 		.ascii	"__THUMBEL__ 1\000"
 13435      554D4245 
 13435      4C5F5F20 
 13435      3100
 13436              	.LASF1215:
 13437 6f13 7578546F 		.ascii	"uxTopReadyPriority\000"
 13437      70526561 
 13437      64795072 
 13437      696F7269 
 13437      747900
 13438              	.LASF267:
 13439 6f26 5F5F5151 		.ascii	"__QQ_IBIT__ 0\000"
 13439      5F494249 
 13439      545F5F20 
 13439      3000
 13440              	.LASF116:
 13441 6f34 5F5F494E 		.ascii	"__INTPTR_MAX__ 2147483647\000"
 13441      54505452 
 13441      5F4D4158 
 13441      5F5F2032 
 13441      31343734 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 370


 13442              	.LASF878:
 13443 6f4e 74726163 		.ascii	"traceQUEUE_RECEIVE(pxQueue) \000"
 13443      65515545 
 13443      55455F52 
 13443      45434549 
 13443      56452870 
 13444              	.LASF954:
 13445 6f6b 70645441 		.ascii	"pdTASK_CODE TaskFunction_t\000"
 13445      534B5F43 
 13445      4F444520 
 13445      5461736B 
 13445      46756E63 
 13446              	.LASF739:
 13447 6f86 55494E54 		.ascii	"UINT64_C(x) __UINT64_C(x)\000"
 13447      36345F43 
 13447      28782920 
 13447      5F5F5549 
 13447      4E543634 
 13448              	.LASF1122:
 13449 6fa0 78416C72 		.ascii	"xAlreadyYielded\000"
 13449      65616479 
 13449      5969656C 
 13449      64656400 
 13450              	.LASF80:
 13451 6fb0 5F5F5549 		.ascii	"__UINTMAX_MAX__ 18446744073709551615ULL\000"
 13451      4E544D41 
 13451      585F4D41 
 13451      585F5F20 
 13451      31383434 
 13452              	.LASF34:
 13453 6fd8 5F5F5549 		.ascii	"__UINTMAX_TYPE__ long long unsigned int\000"
 13453      4E544D41 
 13453      585F5459 
 13453      50455F5F 
 13453      206C6F6E 
 13454              	.LASF391:
 13455 7000 5F4E4F41 		.ascii	"_NOARGS void\000"
 13455      52475320 
 13455      766F6964 
 13455      00
 13456              	.LASF874:
 13457 700d 74726163 		.ascii	"traceCREATE_COUNTING_SEMAPHORE() \000"
 13457      65435245 
 13457      4154455F 
 13457      434F554E 
 13457      54494E47 
 13458              	.LASF281:
 13459 702f 5F5F5553 		.ascii	"__USQ_IBIT__ 0\000"
 13459      515F4942 
 13459      49545F5F 
 13459      203000
 13460              	.LASF982:
 13461 703e 7461736B 		.ascii	"taskEXIT_CRITICAL() portEXIT_CRITICAL()\000"
 13461      45584954 
 13461      5F435249 
 13461      54494341 
 13461      4C282920 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 371


 13462              	.LASF925:
 13463 7066 636F6E66 		.ascii	"configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2\000"
 13463      69674558 
 13463      50454354 
 13463      45445F49 
 13463      444C455F 
 13464              	.LASF52:
 13465 708e 5F5F5549 		.ascii	"__UINT_LEAST32_TYPE__ long unsigned int\000"
 13465      4E545F4C 
 13465      45415354 
 13465      33325F54 
 13465      5950455F 
 13466              	.LASF1005:
 13467 70b6 7854696D 		.ascii	"xTimerStop(xTimer,xTicksToWait) xTimerGenericComman"
 13467      65725374 
 13467      6F702878 
 13467      54696D65 
 13467      722C7854 
 13468 70e9 64282028 		.ascii	"d( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksT"
 13468      20785469 
 13468      6D657220 
 13468      292C2074 
 13468      6D72434F 
 13469 711c 6F576169 		.ascii	"oWait ) )\000"
 13469      74202920 
 13469      2900
 13470              	.LASF3:
 13471 7126 5F5F474E 		.ascii	"__GNUC_MINOR__ 9\000"
 13471      55435F4D 
 13471      494E4F52 
 13471      5F5F2039 
 13471      00
 13472              	.LASF33:
 13473 7137 5F5F494E 		.ascii	"__INTMAX_TYPE__ long long int\000"
 13473      544D4158 
 13473      5F545950 
 13473      455F5F20 
 13473      6C6F6E67 
 13474              	.LASF930:
 13475 7155 706F7274 		.ascii	"portTASK_USES_FLOATING_POINT() \000"
 13475      5441534B 
 13475      5F555345 
 13475      535F464C 
 13475      4F415449 
 13476              	.LASF194:
 13477 7175 5F5F5553 		.ascii	"__USFRACT_MAX__ 0XFFP-8UHR\000"
 13477      46524143 
 13477      545F4D41 
 13477      585F5F20 
 13477      30584646 
 13478              	.LASF316:
 13479 7190 5F5F4743 		.ascii	"__GCC_ATOMIC_INT_LOCK_FREE 2\000"
 13479      435F4154 
 13479      4F4D4943 
 13479      5F494E54 
 13479      5F4C4F43 
 13480              	.LASF502:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 372


 13481 71ad 5F52414E 		.ascii	"_RAND48_SEED_0 (0x330e)\000"
 13481      4434385F 
 13481      53454544 
 13481      5F302028 
 13481      30783333 
 13482              	.LASF188:
 13483 71c5 5F5F5346 		.ascii	"__SFRACT_MIN__ (-0.5HR-0.5HR)\000"
 13483      52414354 
 13483      5F4D494E 
 13483      5F5F2028 
 13483      2D302E35 
 13484              	.LASF824:
 13485 71e3 706F7274 		.ascii	"portRECORD_READY_PRIORITY(uxPriority,uxReadyPriorit"
 13485      5245434F 
 13485      52445F52 
 13485      45414459 
 13485      5F505249 
 13486 7216 69657329 		.ascii	"ies) ( uxReadyPriorities ) |= ( 1UL << ( uxPriority"
 13486      20282075 
 13486      78526561 
 13486      64795072 
 13486      696F7269 
 13487 7249 20292029 		.ascii	" ) )\000"
 13487      00
 13488              	.LASF873:
 13489 724e 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex) \000"
 13489      6554414B 
 13489      455F4D55 
 13489      5445585F 
 13489      52454355 
 13490              	.LASF497:
 13491 7279 5F5F4C6F 		.ascii	"__Long long\000"
 13491      6E67206C 
 13491      6F6E6700 
 13492              	.LASF428:
 13493 7285 5F53495A 		.ascii	"_SIZET_ \000"
 13493      45545F20 
 13493      00
 13494              	.LASF1089:
 13495 728e 65437572 		.ascii	"eCurrentState\000"
 13495      72656E74 
 13495      53746174 
 13495      6500
 13496              	.LASF355:
 13497 729c 5F535444 		.ascii	"_STDLIB_H_ \000"
 13497      4C49425F 
 13497      485F2000 
 13498              	.LASF150:
 13499 72a8 5F5F4442 		.ascii	"__DBL_HAS_QUIET_NAN__ 1\000"
 13499      4C5F4841 
 13499      535F5155 
 13499      4945545F 
 13499      4E414E5F 
 13500              	.LASF975:
 13501 72c0 74736B4B 		.ascii	"tskKERNEL_VERSION_NUMBER \"V8.1.2\"\000"
 13501      45524E45 
 13501      4C5F5645 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 373


 13501      5253494F 
 13501      4E5F4E55 
 13502              	.LASF736:
 13503 72e2 494E5433 		.ascii	"INT32_C(x) __INT32_C(x)\000"
 13503      325F4328 
 13503      7829205F 
 13503      5F494E54 
 13503      33325F43 
 13504              	.LASF564:
 13505 72fa 5F5F7074 		.ascii	"__ptrvalue \000"
 13505      7276616C 
 13505      75652000 
 13506              	.LASF1127:
 13507 7306 78546173 		.ascii	"xTaskGenericCreate\000"
 13507      6B47656E 
 13507      65726963 
 13507      43726561 
 13507      746500
 13508              	.LASF989:
 13509 7319 78546173 		.ascii	"xTaskCreateRestricted(x,pxCreatedTask) xTaskGeneric"
 13509      6B437265 
 13509      61746552 
 13509      65737472 
 13509      69637465 
 13510 734c 43726561 		.ascii	"Create( ((x)->pvTaskCode), ((x)->pcName), ((x)->usS"
 13510      74652820 
 13510      28287829 
 13510      2D3E7076 
 13510      5461736B 
 13511 737f 7461636B 		.ascii	"tackDepth), ((x)->pvParameters), ((x)->uxPriority),"
 13511      44657074 
 13511      68292C20 
 13511      28287829 
 13511      2D3E7076 
 13512 73b2 20287078 		.ascii	" (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xReg"
 13512      43726561 
 13512      74656454 
 13512      61736B29 
 13512      2C202828 
 13513 73e5 696F6E73 		.ascii	"ions) )\000"
 13513      29202900 
 13514              	.LASF219:
 13515 73ed 5F5F4C4C 		.ascii	"__LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR\000"
 13515      46524143 
 13515      545F4D41 
 13515      585F5F20 
 13515      30583746 
 13516              	.LASF181:
 13517 7417 5F5F4445 		.ascii	"__DEC128_MAX_EXP__ 6145\000"
 13517      43313238 
 13517      5F4D4158 
 13517      5F455850 
 13517      5F5F2036 
 13518              	.LASF829:
 13519 742f 706F7274 		.ascii	"portBYTE_ALIGNMENT_MASK ( 0x0007U )\000"
 13519      42595445 
 13519      5F414C49 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 374


 13519      474E4D45 
 13519      4E545F4D 
 13520              	.LASF1191:
 13521 7453 70756353 		.ascii	"pucStackByte\000"
 13521      7461636B 
 13521      42797465 
 13521      00
 13522              	.LASF826:
 13523 7460 706F7274 		.ascii	"portGET_HIGHEST_PRIORITY(uxTopPriority,uxReadyPrior"
 13523      4745545F 
 13523      48494748 
 13523      4553545F 
 13523      5052494F 
 13524 7493 69746965 		.ascii	"ities) uxTopPriority = ( 31 - ucPortCountLeadingZer"
 13524      73292075 
 13524      78546F70 
 13524      5072696F 
 13524      72697479 
 13525 74c6 6F732820 		.ascii	"os( ( uxReadyPriorities ) ) )\000"
 13525      28207578 
 13525      52656164 
 13525      79507269 
 13525      6F726974 
 13526              	.LASF519:
 13527 74e4 5F524545 		.ascii	"_REENT_CHECK_EMERGENCY(ptr) \000"
 13527      4E545F43 
 13527      4845434B 
 13527      5F454D45 
 13527      5247454E 
 13528              	.LASF76:
 13529 7501 5F5F5054 		.ascii	"__PTRDIFF_MAX__ 2147483647\000"
 13529      52444946 
 13529      465F4D41 
 13529      585F5F20 
 13529      32313437 
 13530              	.LASF229:
 13531 751c 5F5F5341 		.ascii	"__SACCUM_MAX__ 0X7FFFP-7HK\000"
 13531      4343554D 
 13531      5F4D4158 
 13531      5F5F2030 
 13531      58374646 
 13532              	.LASF549:
 13533 7537 5F474C4F 		.ascii	"_GLOBAL_REENT _global_impure_ptr\000"
 13533      42414C5F 
 13533      5245454E 
 13533      54205F67 
 13533      6C6F6261 
 13534              	.LASF63:
 13535 7558 5F5F5549 		.ascii	"__UINTPTR_TYPE__ unsigned int\000"
 13535      4E545054 
 13535      525F5459 
 13535      50455F5F 
 13535      20756E73 
 13536              	.LASF302:
 13537 7576 5F5F5245 		.ascii	"__REGISTER_PREFIX__ \000"
 13537      47495354 
 13537      45525F50 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 375


 13537      52454649 
 13537      585F5F20 
 13538              	.LASF185:
 13539 758b 5F5F4445 		.ascii	"__DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000"
 13539      43313238 
 13539      5F535542 
 13539      4E4F524D 
 13539      414C5F4D 
 13540 75be 30303030 		.ascii	"000000001E-6143DL\000"
 13540      30303030 
 13540      31452D36 
 13540      31343344 
 13540      4C00
 13541              	.LASF138:
 13542 75d0 5F5F4442 		.ascii	"__DBL_DIG__ 15\000"
 13542      4C5F4449 
 13542      475F5F20 
 13542      313500
 13543              	.LASF215:
 13544 75df 5F5F554C 		.ascii	"__ULFRACT_EPSILON__ 0x1P-32ULR\000"
 13544      46524143 
 13544      545F4550 
 13544      53494C4F 
 13544      4E5F5F20 
 13545              	.LASF640:
 13546 75fe 5F5F5243 		.ascii	"__RCSID(s) struct __hack\000"
 13546      53494428 
 13546      73292073 
 13546      74727563 
 13546      74205F5F 
 13547              	.LASF729:
 13548 7617 57434841 		.ascii	"WCHAR_MAX __WCHAR_MAX__\000"
 13548      525F4D41 
 13548      58205F5F 
 13548      57434841 
 13548      525F4D41 
 13549              	.LASF920:
 13550 762f 636F6E66 		.ascii	"configUSE_MALLOC_FAILED_HOOK 0\000"
 13550      69675553 
 13550      455F4D41 
 13550      4C4C4F43 
 13550      5F464149 
 13551              	.LASF20:
 13552 764e 5F5F5349 		.ascii	"__SIZEOF_SIZE_T__ 4\000"
 13552      5A454F46 
 13552      5F53495A 
 13552      455F545F 
 13552      5F203400 
 13553              	.LASF1207:
 13554 7662 70784465 		.ascii	"pxDelayedTaskList\000"
 13554      6C617965 
 13554      64546173 
 13554      6B4C6973 
 13554      7400
 13555              	.LASF1064:
 13556 7674 784C4953 		.ascii	"xLIST\000"
 13556      5400
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 376


 13557              	.LASF573:
 13558 767a 5F5F474E 		.ascii	"__GNUCLIKE___OFFSETOF 1\000"
 13558      55434C49 
 13558      4B455F5F 
 13558      5F4F4646 
 13558      5345544F 
 13559              	.LASF182:
 13560 7692 5F5F4445 		.ascii	"__DEC128_MIN__ 1E-6143DL\000"
 13560      43313238 
 13560      5F4D494E 
 13560      5F5F2031 
 13560      452D3631 
 13561              	.LASF99:
 13562 76ab 5F5F494E 		.ascii	"__INT64_C(c) c ## LL\000"
 13562      5436345F 
 13562      43286329 
 13562      20632023 
 13562      23204C4C 
 13563              	.LASF96:
 13564 76c0 5F5F494E 		.ascii	"__INT_LEAST32_MAX__ 2147483647L\000"
 13564      545F4C45 
 13564      41535433 
 13564      325F4D41 
 13564      585F5F20 
 13565              	.LASF363:
 13566 76e0 48415645 		.ascii	"HAVE_INITFINI_ARRAY 1\000"
 13566      5F494E49 
 13566      5446494E 
 13566      495F4152 
 13566      52415920 
 13567              	.LASF660:
 13568 76f6 73747274 		.ascii	"strtodf strtof\000"
 13568      6F646620 
 13568      73747274 
 13568      6F6600
 13569              	.LASF385:
 13570 7705 5F484156 		.ascii	"_HAVE_STDC \000"
 13570      455F5354 
 13570      44432000 
 13571              	.LASF967:
 13572 7711 6C697374 		.ascii	"listGET_END_MARKER(pxList) ( ( ListItem_t const * )"
 13572      4745545F 
 13572      454E445F 
 13572      4D41524B 
 13572      45522870 
 13573 7744 20282026 		.ascii	" ( &( ( pxList )->xListEnd ) ) )\000"
 13573      28202820 
 13573      70784C69 
 13573      73742029 
 13573      2D3E784C 
 13574              	.LASF569:
 13575 7765 5F5F454E 		.ascii	"__END_DECLS \000"
 13575      445F4445 
 13575      434C5320 
 13575      00
 13576              	.LASF823:
 13577 7772 636F6E66 		.ascii	"configUSE_PORT_OPTIMISED_TASK_SELECTION 1\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 377


 13577      69675553 
 13577      455F504F 
 13577      52545F4F 
 13577      5054494D 
 13578              	.LASF612:
 13579 779c 5F5F6765 		.ascii	"__generic(expr,t,yes,no) __builtin_choose_expr( __b"
 13579      6E657269 
 13579      63286578 
 13579      70722C74 
 13579      2C796573 
 13580 77cf 75696C74 		.ascii	"uiltin_types_compatible_p(__typeof(expr), t), yes, "
 13580      696E5F74 
 13580      79706573 
 13580      5F636F6D 
 13580      70617469 
 13581 7802 6E6F2900 		.ascii	"no)\000"
 13582              	.LASF159:
 13583 7806 5F5F4C44 		.ascii	"__LDBL_MIN__ 2.2250738585072014e-308L\000"
 13583      424C5F4D 
 13583      494E5F5F 
 13583      20322E32 
 13583      32353037 
 13584              	.LASF846:
 13585 782c 494E434C 		.ascii	"INCLUDE_xTimerPendFunctionCall 0\000"
 13585      5544455F 
 13585      7854696D 
 13585      65725065 
 13585      6E644675 
 13586              	.LASF237:
 13587 784d 5F5F4143 		.ascii	"__ACCUM_IBIT__ 16\000"
 13587      43554D5F 
 13587      49424954 
 13587      5F5F2031 
 13587      3600
 13588              	.LASF948:
 13589 785f 78546173 		.ascii	"xTaskStatusType TaskStatus_t\000"
 13589      6B537461 
 13589      74757354 
 13589      79706520 
 13589      5461736B 
 13590              	.LASF1208:
 13591 787c 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 13591      6572666C 
 13591      6F774465 
 13591      6C617965 
 13591      64546173 
 13592              	.LASF492:
 13593 7896 756E7369 		.ascii	"unsigned\000"
 13593      676E6564 
 13593      00
 13594              	.LASF799:
 13595 789f 706F7274 		.ascii	"portFLOAT float\000"
 13595      464C4F41 
 13595      5420666C 
 13595      6F617400 
 13596              	.LASF567:
 13597 78af 5F5F6861 		.ascii	"__has_builtin(x) 0\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 378


 13597      735F6275 
 13597      696C7469 
 13597      6E287829 
 13597      203000
 13598              	.LASF893:
 13599 78c2 74726163 		.ascii	"traceTASK_PRIORITY_SET(pxTask,uxNewPriority) \000"
 13599      65544153 
 13599      4B5F5052 
 13599      494F5249 
 13599      54595F53 
 13600              	.LASF661:
 13601 78f0 5F535452 		.ascii	"_STRING_H_ \000"
 13601      494E475F 
 13601      485F2000 
 13602              	.LASF1131:
 13603 78fc 76546173 		.ascii	"vTaskPrioritySet\000"
 13603      6B507269 
 13603      6F726974 
 13603      79536574 
 13603      00
 13604              	.LASF532:
 13605 790d 5F524545 		.ascii	"_REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)"
 13605      4E545F54 
 13605      4D287074 
 13605      72292028 
 13605      26287074 
 13606 7940 00       		.ascii	"\000"
 13607              	.LASF872:
 13608 7941 74726163 		.ascii	"traceTAKE_MUTEX_RECURSIVE(pxMutex) \000"
 13608      6554414B 
 13608      455F4D55 
 13608      5445585F 
 13608      52454355 
 13609              	.LASF963:
 13610 7965 6C697374 		.ascii	"listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem "
 13610      4745545F 
 13610      4C495354 
 13610      5F495445 
 13610      4D5F5641 
 13611 7998 292D3E78 		.ascii	")->xItemValue )\000"
 13611      4974656D 
 13611      56616C75 
 13611      65202900 
 13612              	.LASF103:
 13613 79a8 5F5F5549 		.ascii	"__UINT16_C(c) c\000"
 13613      4E543136 
 13613      5F432863 
 13613      29206300 
 13614              	.LASF500:
 13615 79b8 5F524545 		.ascii	"_REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,\000"
 13615      4E545F49 
 13615      4E49545F 
 13615      41544558 
 13615      4954205F 
 13616              	.LASF587:
 13617 79e0 5F5F4343 		.ascii	"__CC_SUPPORTS___INLINE__ 1\000"
 13617      5F535550 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 379


 13617      504F5254 
 13617      535F5F5F 
 13617      494E4C49 
 13618              	.LASF299:
 13619 79fb 5F5F5544 		.ascii	"__UDA_IBIT__ 32\000"
 13619      415F4942 
 13619      49545F5F 
 13619      20333200 
 13620              	.LASF628:
 13621 7a0b 5F5F7072 		.ascii	"__printflike(fmtarg,firstvararg) __attribute__((__f"
 13621      696E7466 
 13621      6C696B65 
 13621      28666D74 
 13621      6172672C 
 13622 7a3e 6F726D61 		.ascii	"ormat__ (__printf__, fmtarg, firstvararg)))\000"
 13622      745F5F20 
 13622      285F5F70 
 13622      72696E74 
 13622      665F5F2C 
 13623              	.LASF135:
 13624 7a6a 5F5F464C 		.ascii	"__FLT_HAS_INFINITY__ 1\000"
 13624      545F4841 
 13624      535F494E 
 13624      46494E49 
 13624      54595F5F 
 13625              	.LASF702:
 13626 7a81 494E5436 		.ascii	"INT64_MIN (-__INT64_MAX__ - 1)\000"
 13626      345F4D49 
 13626      4E20282D 
 13626      5F5F494E 
 13626      5436345F 
 13627              	.LASF6:
 13628 7aa0 5F5F4154 		.ascii	"__ATOMIC_RELAXED 0\000"
 13628      4F4D4943 
 13628      5F52454C 
 13628      41584544 
 13628      203000
 13629              	.LASF406:
 13630 7ab3 5F415454 		.ascii	"_ATTRIBUTE(attrs) __attribute__ (attrs)\000"
 13630      52494255 
 13630      54452861 
 13630      74747273 
 13630      29205F5F 
 13631              	.LASF970:
 13632 7adb 6C697374 		.ascii	"listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { List_t "
 13632      4745545F 
 13632      4F574E45 
 13632      525F4F46 
 13632      5F4E4558 
 13633 7b0e 2A20636F 		.ascii	"* const pxConstList = ( pxList ); ( pxConstList )->"
 13633      6E737420 
 13633      7078436F 
 13633      6E73744C 
 13633      69737420 
 13634 7b41 7078496E 		.ascii	"pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( v"
 13634      64657820 
 13634      3D202820 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 380


 13634      7078436F 
 13634      6E73744C 
 13635 7b74 6F696420 		.ascii	"oid * ) ( pxConstList )->pxIndex == ( void * ) &( ("
 13635      2A202920 
 13635      28207078 
 13635      436F6E73 
 13635      744C6973 
 13636 7ba7 20707843 		.ascii	" pxConstList )->xListEnd ) ) { ( pxConstList )->pxI"
 13636      6F6E7374 
 13636      4C697374 
 13636      20292D3E 
 13636      784C6973 
 13637 7bda 6E646578 		.ascii	"ndex = ( pxConstList )->pxIndex->pxNext; } ( pxTCB "
 13637      203D2028 
 13637      20707843 
 13637      6F6E7374 
 13637      4C697374 
 13638 7c0d 29203D20 		.ascii	") = ( pxConstList )->pxIndex->pvOwner; }\000"
 13638      28207078 
 13638      436F6E73 
 13638      744C6973 
 13638      7420292D 
 13639              	.LASF547:
 13640 7c36 5F5F4154 		.ascii	"__ATTRIBUTE_IMPURE_PTR__ \000"
 13640      54524942 
 13640      5554455F 
 13640      494D5055 
 13640      52455F50 
 13641              	.LASF490:
 13642 7c50 5F5F6C6F 		.ascii	"__lock_release_recursive(lock) (_CAST_VOID 0)\000"
 13642      636B5F72 
 13642      656C6561 
 13642      73655F72 
 13642      65637572 
 13643              	.LASF707:
 13644 7c7e 55494E54 		.ascii	"UINT_LEAST64_MAX __UINT_LEAST64_MAX__\000"
 13644      5F4C4541 
 13644      53543634 
 13644      5F4D4158 
 13644      205F5F55 
 13645              	.LASF1132:
 13646 7ca4 75784E65 		.ascii	"uxNewPriority\000"
 13646      77507269 
 13646      6F726974 
 13646      7900
 13647              	.LASF701:
 13648 7cb2 55494E54 		.ascii	"UINT_LEAST32_MAX __UINT_LEAST32_MAX__\000"
 13648      5F4C4541 
 13648      53543332 
 13648      5F4D4158 
 13648      205F5F55 
 13649              	.LASF505:
 13650 7cd8 5F52414E 		.ascii	"_RAND48_MULT_0 (0xe66d)\000"
 13650      4434385F 
 13650      4D554C54 
 13650      5F302028 
 13650      30786536 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 381


 13651              	.LASF1080:
 13652 7cf0 784D454D 		.ascii	"xMEMORY_REGION\000"
 13652      4F52595F 
 13652      52454749 
 13652      4F4E00
 13653              	.LASF662:
 13654 7cff 4D50555F 		.ascii	"MPU_WRAPPERS_INCLUDED_FROM_API_FILE \000"
 13654      57524150 
 13654      50455253 
 13654      5F494E43 
 13654      4C554445 
 13655              	.LASF905:
 13656 7d24 74726163 		.ascii	"traceEVENT_GROUP_CREATE(xEventGroup) \000"
 13656      65455645 
 13656      4E545F47 
 13656      524F5550 
 13656      5F435245 
 13657              	.LASF626:
 13658 7d4a 5F5F7261 		.ascii	"__rangeof(type,start,end) (__offsetof(type, end) - "
 13658      6E67656F 
 13658      66287479 
 13658      70652C73 
 13658      74617274 
 13659 7d7d 5F5F6F66 		.ascii	"__offsetof(type, start))\000"
 13659      66736574 
 13659      6F662874 
 13659      7970652C 
 13659      20737461 
 13660              	.LASF600:
 13661 7d96 5F5F6465 		.ascii	"__dead2 __attribute__((__noreturn__))\000"
 13661      61643220 
 13661      5F5F6174 
 13661      74726962 
 13661      7574655F 
 13662              	.LASF815:
 13663 7dbc 706F7274 		.ascii	"portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortClearInte"
 13663      434C4541 
 13663      525F494E 
 13663      54455252 
 13663      5550545F 
 13664 7def 72727570 		.ascii	"rruptMask(x)\000"
 13664      744D6173 
 13664      6B287829 
 13664      00
 13665              	.LASF354:
 13666 7dfc 5F5F5553 		.ascii	"__USES_INITFINI__ 1\000"
 13666      45535F49 
 13666      4E495446 
 13666      494E495F 
 13666      5F203100 
 13667              	.LASF733:
 13668 7e10 55494E54 		.ascii	"UINT8_C(x) __UINT8_C(x)\000"
 13668      385F4328 
 13668      7829205F 
 13668      5F55494E 
 13668      54385F43 
 13669              	.LASF68:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 382


 13670 7e28 5F5F5348 		.ascii	"__SHRT_MAX__ 32767\000"
 13670      52545F4D 
 13670      41585F5F 
 13670      20333237 
 13670      363700
 13671              	.LASF463:
 13672 7e3b 5F5F6E65 		.ascii	"__need_ptrdiff_t\000"
 13672      65645F70 
 13672      74726469 
 13672      66665F74 
 13672      00
 13673              	.LASF143:
 13674 7e4c 5F5F4442 		.ascii	"__DBL_DECIMAL_DIG__ 17\000"
 13674      4C5F4445 
 13674      43494D41 
 13674      4C5F4449 
 13674      475F5F20 
 13675              	.LASF769:
 13676 7e63 494E434C 		.ascii	"INCLUDE_vTaskSuspend 1\000"
 13676      5544455F 
 13676      76546173 
 13676      6B537573 
 13676      70656E64 
 13677              	.LASF459:
 13678 7e7a 5F505452 		.ascii	"_PTRDIFF_T_ \000"
 13678      44494646 
 13678      5F545F20 
 13678      00
 13679              	.LASF687:
 13680 7e87 494E545F 		.ascii	"INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)\000"
 13680      4C454153 
 13680      54385F4D 
 13680      494E2028 
 13680      2D5F5F49 
 13681              	.LASF496:
 13682 7eb0 5F4E554C 		.ascii	"_NULL 0\000"
 13682      4C203000 
 13683              	.LASF561:
 13684 7eb8 5F5F666C 		.ascii	"__flexarr [0]\000"
 13684      65786172 
 13684      72205B30 
 13684      5D00
 13685              	.LASF880:
 13686 7ec6 74726163 		.ascii	"traceQUEUE_PEEK_FROM_ISR(pxQueue) \000"
 13686      65515545 
 13686      55455F50 
 13686      45454B5F 
 13686      46524F4D 
 13687              	.LASF866:
 13688 7ee9 74726163 		.ascii	"traceQUEUE_CREATE(pxNewQueue) \000"
 13688      65515545 
 13688      55455F43 
 13688      52454154 
 13688      45287078 
 13689              	.LASF675:
 13690 7f08 5F5F696E 		.ascii	"__int64_t_defined 1\000"
 13690      7436345F 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 383


 13690      745F6465 
 13690      66696E65 
 13690      64203100 
 13691              	.LASF361:
 13692 7f1c 5F57414E 		.ascii	"_WANT_REGISTER_FINI 1\000"
 13692      545F5245 
 13692      47495354 
 13692      45525F46 
 13692      494E4920 
 13693              	.LASF645:
 13694 7f32 5F5F4445 		.ascii	"__DEVOLATILE(type,var) ((type)(__uintptr_t)(volatil"
 13694      564F4C41 
 13694      54494C45 
 13694      28747970 
 13694      652C7661 
 13695 7f65 6520766F 		.ascii	"e void *)(var))\000"
 13695      6964202A 
 13695      29287661 
 13695      72292900 
 13696              	.LASF1008:
 13697 7f75 7854696D 		.ascii	"xTimerReset(xTimer,xTicksToWait) xTimerGenericComma"
 13697      65725265 
 13697      73657428 
 13697      7854696D 
 13697      65722C78 
 13698 7fa8 6E642820 		.ascii	"nd( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCou"
 13698      28207854 
 13698      696D6572 
 13698      20292C20 
 13698      746D7243 
 13699 7fdb 6E742829 		.ascii	"nt() ), NULL, ( xTicksToWait ) )\000"
 13699      20292C20 
 13699      4E554C4C 
 13699      2C202820 
 13699      78546963 
 13700              	.LASF637:
 13701 7ffc 5F5F7379 		.ascii	"__sym_compat(sym,impl,verid) __asm__(\".symver \" #"
 13701      6D5F636F 
 13701      6D706174 
 13701      2873796D 
 13701      2C696D70 
 13702 802d 696D706C 		.ascii	"impl \", \" #sym \"@\" #verid)\000"
 13702      20222C20 
 13702      22202373 
 13702      796D2022 
 13702      40222023 
 13703              	.LASF869:
 13704 8048 74726163 		.ascii	"traceCREATE_MUTEX_FAILED() \000"
 13704      65435245 
 13704      4154455F 
 13704      4D555445 
 13704      585F4641 
 13705              	.LASF936:
 13706 8064 706F7274 		.ascii	"portASSERT_IF_IN_ISR() \000"
 13706      41535345 
 13706      52545F49 
 13706      465F494E 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 384


 13706      5F495352 
 13707              	.LASF70:
 13708 807c 5F5F4C4F 		.ascii	"__LONG_MAX__ 2147483647L\000"
 13708      4E475F4D 
 13708      41585F5F 
 13708      20323134 
 13708      37343833 
 13709              	.LASF853:
 13710 8095 706F7274 		.ascii	"portPOINTER_SIZE_TYPE uint32_t\000"
 13710      504F494E 
 13710      5445525F 
 13710      53495A45 
 13710      5F545950 
 13711              	.LASF119:
 13712 80b4 5F5F4743 		.ascii	"__GCC_IEC_559_COMPLEX 0\000"
 13712      435F4945 
 13712      435F3535 
 13712      395F434F 
 13712      4D504C45 
 13713              	.LASF266:
 13714 80cc 5F5F5151 		.ascii	"__QQ_FBIT__ 7\000"
 13714      5F464249 
 13714      545F5F20 
 13714      3700
 13715              	.LASF864:
 13716 80da 74726163 		.ascii	"traceBLOCKING_ON_QUEUE_SEND(pxQueue) \000"
 13716      65424C4F 
 13716      434B494E 
 13716      475F4F4E 
 13716      5F515545 
 13717              	.LASF1060:
 13718 8100 4C697374 		.ascii	"ListItem_t\000"
 13718      4974656D 
 13718      5F7400
 13719              	.LASF1054:
 13720 810b 5469636B 		.ascii	"TickT_t\000"
 13720      545F7400 
 13721              	.LASF377:
 13722 8113 5F5F474E 		.ascii	"__GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)\000"
 13722      55435F50 
 13722      52455245 
 13722      515F5F28 
 13722      6D612C6D 
 13723              	.LASF301:
 13724 8140 5F5F5554 		.ascii	"__UTA_IBIT__ 64\000"
 13724      415F4942 
 13724      49545F5F 
 13724      20363400 
 13725              	.LASF262:
 13726 8150 5F5F554C 		.ascii	"__ULLACCUM_IBIT__ 32\000"
 13726      4C414343 
 13726      554D5F49 
 13726      4249545F 
 13726      5F203332 
 13727              	.LASF816:
 13728 8165 706F7274 		.ascii	"portDISABLE_INTERRUPTS() ulPortSetInterruptMask()\000"
 13728      44495341 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 385


 13728      424C455F 
 13728      494E5445 
 13728      52525550 
 13729              	.LASF168:
 13730 8197 5F5F4445 		.ascii	"__DEC32_MIN__ 1E-95DF\000"
 13730      4333325F 
 13730      4D494E5F 
 13730      5F203145 
 13730      2D393544 
 13731              	.LASF225:
 13732 81ad 5F5F554C 		.ascii	"__ULLFRACT_EPSILON__ 0x1P-64ULLR\000"
 13732      4C465241 
 13732      43545F45 
 13732      5053494C 
 13732      4F4E5F5F 
 13733              	.LASF1025:
 13734 81ce 7461736B 		.ascii	"taskSELECT_HIGHEST_PRIORITY_TASK() { UBaseT_t uxTop"
 13734      53454C45 
 13734      43545F48 
 13734      49474845 
 13734      53545F50 
 13735 8201 5072696F 		.ascii	"Priority; portGET_HIGHEST_PRIORITY( uxTopPriority, "
 13735      72697479 
 13735      3B20706F 
 13735      72744745 
 13735      545F4849 
 13736 8234 7578546F 		.ascii	"uxTopReadyPriority ); configASSERT( listCURRENT_LIS"
 13736      70526561 
 13736      64795072 
 13736      696F7269 
 13736      74792029 
 13737 8267 545F4C45 		.ascii	"T_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) )"
 13737      4E475448 
 13737      28202628 
 13737      20707852 
 13737      65616479 
 13738 829a 203E2030 		.ascii	" > 0 ); listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, "
 13738      20293B20 
 13738      6C697374 
 13738      4745545F 
 13738      4F574E45 
 13739 82cd 26282070 		.ascii	"&( pxReadyTasksLists[ uxTopPriority ] ) ); }\000"
 13739      78526561 
 13739      64795461 
 13739      736B734C 
 13739      69737473 
 13740              	.LASF324:
 13741 82fa 5F5F5349 		.ascii	"__SIZEOF_WINT_T__ 4\000"
 13741      5A454F46 
 13741      5F57494E 
 13741      545F545F 
 13741      5F203400 
 13742              	.LASF328:
 13743 830e 5F5F4152 		.ascii	"__ARM_FEATURE_UNALIGNED 1\000"
 13743      4D5F4645 
 13743      41545552 
 13743      455F554E 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 386


 13743      414C4947 
 13744              	.LASF0:
 13745 8328 5F5F5354 		.ascii	"__STDC__ 1\000"
 13745      44435F5F 
 13745      203100
 13746              	.LASF1101:
 13747 8333 75785443 		.ascii	"uxTCBNumber\000"
 13747      424E756D 
 13747      62657200 
 13748              	.LASF396:
 13749 833f 5F564F49 		.ascii	"_VOID void\000"
 13749      4420766F 
 13749      696400
 13750              	.LASF1105:
 13751 834a 5443425F 		.ascii	"TCB_t\000"
 13751      7400
 13752              	.LASF570:
 13753 8350 5F5F474E 		.ascii	"__GNUCLIKE_ASM 3\000"
 13753      55434C49 
 13753      4B455F41 
 13753      534D2033 
 13753      00
 13754              	.LASF248:
 13755 8361 5F5F4C41 		.ascii	"__LACCUM_MIN__ (-0X1P31LK-0X1P31LK)\000"
 13755      4343554D 
 13755      5F4D494E 
 13755      5F5F2028 
 13755      2D305831 
 13756              	.LASF877:
 13757 8385 74726163 		.ascii	"traceQUEUE_SEND_FAILED(pxQueue) \000"
 13757      65515545 
 13757      55455F53 
 13757      454E445F 
 13757      4641494C 
 13758              	.LASF629:
 13759 83a6 5F5F7363 		.ascii	"__scanflike(fmtarg,firstvararg) __attribute__((__fo"
 13759      616E666C 
 13759      696B6528 
 13759      666D7461 
 13759      72672C66 
 13760 83d9 726D6174 		.ascii	"rmat__ (__scanf__, fmtarg, firstvararg)))\000"
 13760      5F5F2028 
 13760      5F5F7363 
 13760      616E665F 
 13760      5F2C2066 
 13761              	.LASF166:
 13762 8403 5F5F4445 		.ascii	"__DEC32_MIN_EXP__ (-94)\000"
 13762      4333325F 
 13762      4D494E5F 
 13762      4558505F 
 13762      5F20282D 
 13763              	.LASF263:
 13764 841b 5F5F554C 		.ascii	"__ULLACCUM_MIN__ 0.0ULLK\000"
 13764      4C414343 
 13764      554D5F4D 
 13764      494E5F5F 
 13764      20302E30 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 387


 13765              	.LASF1126:
 13766 8434 78546963 		.ascii	"xTicksToDelay\000"
 13766      6B73546F 
 13766      44656C61 
 13766      7900
 13767              	.LASF551:
 13768 8442 5F535953 		.ascii	"_SYS_CDEFS_H_ \000"
 13768      5F434445 
 13768      46535F48 
 13768      5F2000
 13769              	.LASF314:
 13770 8451 5F5F4743 		.ascii	"__GCC_ATOMIC_WCHAR_T_LOCK_FREE 2\000"
 13770      435F4154 
 13770      4F4D4943 
 13770      5F574348 
 13770      41525F54 
 13771              	.LASF579:
 13772 8472 5F5F474E 		.ascii	"__GNUCLIKE_BUILTIN_VAALIST 1\000"
 13772      55434C49 
 13772      4B455F42 
 13772      55494C54 
 13772      494E5F56 
 13773              	.LASF1018:
 13774 848f 7461736B 		.ascii	"taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_AP"
 13774      5949454C 
 13774      445F4946 
 13774      5F555349 
 13774      4E475F50 
 13775 84c2 49282900 		.ascii	"I()\000"
 13776              	.LASF969:
 13777 84c6 6C697374 		.ascii	"listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNum"
 13777      43555252 
 13777      454E545F 
 13777      4C495354 
 13777      5F4C454E 
 13778 84f9 6265724F 		.ascii	"berOfItems )\000"
 13778      66497465 
 13778      6D732029 
 13778      00
 13779              	.LASF627:
 13780 8506 5F5F636F 		.ascii	"__containerof(x,s,m) ({ const volatile __typeof__(("
 13780      6E746169 
 13780      6E65726F 
 13780      6628782C 
 13780      732C6D29 
 13781 8539 2873202A 		.ascii	"(s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const vol"
 13781      2930292D 
 13781      3E6D2920 
 13781      2A5F5F78 
 13781      203D2028 
 13782 856c 6174696C 		.ascii	"atile char *)__x - __offsetof(s, m));})\000"
 13782      65206368 
 13782      6172202A 
 13782      295F5F78 
 13782      202D205F 
 13783              	.LASF44:
 13784 8594 5F5F5549 		.ascii	"__UINT32_TYPE__ long unsigned int\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 388


 13784      4E543332 
 13784      5F545950 
 13784      455F5F20 
 13784      6C6F6E67 
 13785              	.LASF682:
 13786 85b6 494E5450 		.ascii	"INTPTR_MAX __INTPTR_MAX__\000"
 13786      54525F4D 
 13786      4158205F 
 13786      5F494E54 
 13786      5054525F 
 13787              	.LASF807:
 13788 85d0 706F7274 		.ascii	"portTICK_PERIOD_MS ( ( TickType_t ) 1000 / configTI"
 13788      5449434B 
 13788      5F504552 
 13788      494F445F 
 13788      4D532028 
 13789 8603 434B5F52 		.ascii	"CK_RATE_HZ )\000"
 13789      4154455F 
 13789      485A2029 
 13789      00
 13790              	.LASF339:
 13791 8610 5F5F7468 		.ascii	"__thumb2__ 1\000"
 13791      756D6232 
 13791      5F5F2031 
 13791      00
 13792              	.LASF1109:
 13793 861d 70765061 		.ascii	"pvParameters\000"
 13793      72616D65 
 13793      74657273 
 13793      00
 13794              	.LASF1153:
 13795 862a 75785461 		.ascii	"uxTask\000"
 13795      736B00
 13796              	.LASF614:
 13797 8631 5F5F7075 		.ascii	"__pure __attribute__((__pure__))\000"
 13797      7265205F 
 13797      5F617474 
 13797      72696275 
 13797      74655F5F 
 13798              	.LASF427:
 13799 8652 5F474343 		.ascii	"_GCC_SIZE_T \000"
 13799      5F53495A 
 13799      455F5420 
 13799      00
 13800              	.LASF828:
 13801 865f 706F7274 		.ascii	"portNOP() \000"
 13801      4E4F5028 
 13801      292000
 13802              	.LASF589:
 13803 866a 5F5F4343 		.ascii	"__CC_SUPPORTS_WARNING 1\000"
 13803      5F535550 
 13803      504F5254 
 13803      535F5741 
 13803      524E494E 
 13804              	.LASF987:
 13805 8682 7461736B 		.ascii	"taskSCHEDULER_RUNNING ( ( BaseT_t ) 2 )\000"
 13805      53434845 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 389


 13805      44554C45 
 13805      525F5255 
 13805      4E4E494E 
 13806              	.LASF223:
 13807 86aa 5F5F554C 		.ascii	"__ULLFRACT_MIN__ 0.0ULLR\000"
 13807      4C465241 
 13807      43545F4D 
 13807      494E5F5F 
 13807      20302E30 
 13808              	.LASF434:
 13809 86c3 5F545F57 		.ascii	"_T_WCHAR_ \000"
 13809      43484152 
 13809      5F2000
 13810              	.LASF910:
 13811 86ce 74726163 		.ascii	"traceEVENT_GROUP_WAIT_BITS_END(xEventGroup,uxBitsTo"
 13811      65455645 
 13811      4E545F47 
 13811      524F5550 
 13811      5F574149 
 13812 8701 57616974 		.ascii	"WaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred"
 13812      466F722C 
 13812      7854696D 
 13812      656F7574 
 13812      4F636375 
 13813 8734 00       		.ascii	"\000"
 13814              	.LASF681:
 13815 8735 494E5450 		.ascii	"INTPTR_MIN (-__INTPTR_MAX__ - 1)\000"
 13815      54525F4D 
 13815      494E2028 
 13815      2D5F5F49 
 13815      4E545054 
 13816              	.LASF1149:
 13817 8756 75785461 		.ascii	"uxTaskGetSystemState\000"
 13817      736B4765 
 13817      74537973 
 13817      74656D53 
 13817      74617465 
 13818              	.LASF515:
 13819 876b 5F524545 		.ascii	"_REENT_CHECK_RAND48(ptr) \000"
 13819      4E545F43 
 13819      4845434B 
 13819      5F52414E 
 13819      44343828 
 13820              	.LASF642:
 13821 8785 5F5F5343 		.ascii	"__SCCSID(s) struct __hack\000"
 13821      43534944 
 13821      28732920 
 13821      73747275 
 13821      6374205F 
 13822              	.LASF13:
 13823 879f 5F5F5349 		.ascii	"__SIZEOF_INT__ 4\000"
 13823      5A454F46 
 13823      5F494E54 
 13823      5F5F2034 
 13823      00
 13824              	.LASF446:
 13825 87b0 5F425344 		.ascii	"_BSD_WCHAR_T_\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 390


 13825      5F574348 
 13825      41525F54 
 13825      5F00
 13826              	.LASF1011:
 13827 87be 7854696D 		.ascii	"xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHighe"
 13827      65724368 
 13827      616E6765 
 13827      50657269 
 13827      6F644672 
 13828 87f1 72507269 		.ascii	"rPriorityTaskWoken) xTimerGenericCommand( ( xTimer "
 13828      6F726974 
 13828      79546173 
 13828      6B576F6B 
 13828      656E2920 
 13829 8824 292C2074 		.ascii	"), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod "
 13829      6D72434F 
 13829      4D4D414E 
 13829      445F4348 
 13829      414E4745 
 13830 8857 292C2028 		.ascii	"), ( pxHigherPriorityTaskWoken ), 0U )\000"
 13830      20707848 
 13830      69676865 
 13830      72507269 
 13830      6F726974 
 13831              	.LASF217:
 13832 887e 5F5F4C4C 		.ascii	"__LLFRACT_IBIT__ 0\000"
 13832      46524143 
 13832      545F4942 
 13832      49545F5F 
 13832      203000
 13833              	.LASF590:
 13834 8891 5F5F4343 		.ascii	"__CC_SUPPORTS_VARADIC_XXX 1\000"
 13834      5F535550 
 13834      504F5254 
 13834      535F5641 
 13834      52414449 
 13835              	.LASF1048:
 13836 88ad 75696E74 		.ascii	"uint32_t\000"
 13836      33325F74 
 13836      00
 13837              	.LASF808:
 13838 88b6 706F7274 		.ascii	"portBYTE_ALIGNMENT 8\000"
 13838      42595445 
 13838      5F414C49 
 13838      474E4D45 
 13838      4E542038 
 13839              	.LASF665:
 13840 88cb 5F535953 		.ascii	"_SYS__INTSUP_H \000"
 13840      5F5F494E 
 13840      54535550 
 13840      5F482000 
 13841              	.LASF230:
 13842 88db 5F5F5341 		.ascii	"__SACCUM_EPSILON__ 0x1P-7HK\000"
 13842      4343554D 
 13842      5F455053 
 13842      494C4F4E 
 13842      5F5F2030 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 391


 13843              	.LASF797:
 13844 88f7 504F5254 		.ascii	"PORTMACRO_H \000"
 13844      4D414352 
 13844      4F5F4820 
 13844      00
 13845              	.LASF1112:
 13846 8904 78526567 		.ascii	"xRegions\000"
 13846      696F6E73 
 13846      00
 13847              	.LASF836:
 13848 890d 494E434C 		.ascii	"INCLUDE_xTimerGetTimerDaemonTaskHandle 0\000"
 13848      5544455F 
 13848      7854696D 
 13848      65724765 
 13848      7454696D 
 13849              	.LASF82:
 13850 8936 5F5F5349 		.ascii	"__SIG_ATOMIC_MAX__ 2147483647\000"
 13850      475F4154 
 13850      4F4D4943 
 13850      5F4D4158 
 13850      5F5F2032 
 13851              	.LASF960:
 13852 8954 6C697374 		.ascii	"listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( ( pxL"
 13852      5345545F 
 13852      4C495354 
 13852      5F495445 
 13852      4D5F4F57 
 13853 8987 69737449 		.ascii	"istItem )->pvOwner = ( void * ) ( pxOwner ) )\000"
 13853      74656D20 
 13853      292D3E70 
 13853      764F776E 
 13853      6572203D 
 13854              	.LASF59:
 13855 89b5 5F5F5549 		.ascii	"__UINT_FAST16_TYPE__ unsigned int\000"
 13855      4E545F46 
 13855      41535431 
 13855      365F5459 
 13855      50455F5F 
 13856              	.LASF295:
 13857 89d7 5F5F5548 		.ascii	"__UHA_IBIT__ 8\000"
 13857      415F4942 
 13857      49545F5F 
 13857      203800
 13858              	.LASF493:
 13859 89e6 5F5F6E65 		.ascii	"__need_wint_t \000"
 13859      65645F77 
 13859      696E745F 
 13859      742000
 13860              	.LASF240:
 13861 89f5 5F5F4143 		.ascii	"__ACCUM_EPSILON__ 0x1P-15K\000"
 13861      43554D5F 
 13861      45505349 
 13861      4C4F4E5F 
 13861      5F203078 
 13862              	.LASF255:
 13863 8a10 5F5F554C 		.ascii	"__ULACCUM_EPSILON__ 0x1P-32ULK\000"
 13863      41434355 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 392


 13863      4D5F4550 
 13863      53494C4F 
 13863      4E5F5F20 
 13864              	.LASF152:
 13865 8a2f 5F5F4C44 		.ascii	"__LDBL_DIG__ 15\000"
 13865      424C5F44 
 13865      49475F5F 
 13865      20313500 
 13866              	.LASF934:
 13867 8a3f 636F6E66 		.ascii	"configUSE_STATS_FORMATTING_FUNCTIONS 0\000"
 13867      69675553 
 13867      455F5354 
 13867      4154535F 
 13867      464F524D 
 13868              	.LASF609:
 13869 8a66 5F41746F 		.ascii	"_Atomic(T) struct { T volatile __val; }\000"
 13869      6D696328 
 13869      54292073 
 13869      74727563 
 13869      74207B20 
 13870              	.LASF1028:
 13871 8a8e 70727641 		.ascii	"prvAddTaskToReadyList(pxTCB) traceMOVED_TASK_TO_REA"
 13871      64645461 
 13871      736B546F 
 13871      52656164 
 13871      794C6973 
 13872 8ac1 44595F53 		.ascii	"DY_STATE( pxTCB ) taskRECORD_READY_PRIORITY( ( pxTC"
 13872      54415445 
 13872      28207078 
 13872      54434220 
 13872      29207461 
 13873 8af4 4220292D 		.ascii	"B )->uxPriority ); vListInsertEnd( &( pxReadyTasksL"
 13873      3E757850 
 13873      72696F72 
 13873      69747920 
 13873      293B2076 
 13874 8b27 69737473 		.ascii	"ists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGen"
 13874      5B202820 
 13874      70785443 
 13874      4220292D 
 13874      3E757850 
 13875 8b5a 65726963 		.ascii	"ericListItem ) )\000"
 13875      4C697374 
 13875      4974656D 
 13875      20292029 
 13875      00
 13876              	.LASF75:
 13877 8b6b 5F5F5749 		.ascii	"__WINT_MIN__ 0U\000"
 13877      4E545F4D 
 13877      494E5F5F 
 13877      20305500 
 13878              	.LASF1097:
 13879 8b7b 7847656E 		.ascii	"xGenericListItem\000"
 13879      65726963 
 13879      4C697374 
 13879      4974656D 
 13879      00
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 393


 13880              	.LASF177:
 13881 8b8c 5F5F4445 		.ascii	"__DEC64_EPSILON__ 1E-15DD\000"
 13881      4336345F 
 13881      45505349 
 13881      4C4F4E5F 
 13881      5F203145 
 13882              	.LASF557:
 13883 8ba6 5F5F6C6F 		.ascii	"__long_double_t long double\000"
 13883      6E675F64 
 13883      6F75626C 
 13883      655F7420 
 13883      6C6F6E67 
 13884              	.LASF840:
 13885 8bc2 636F6E66 		.ascii	"configUSE_APPLICATION_TASK_TAG 0\000"
 13885      69675553 
 13885      455F4150 
 13885      504C4943 
 13885      4154494F 
 13886              	.LASF813:
 13887 8be3 706F7274 		.ascii	"portYIELD_FROM_ISR(x) portEND_SWITCHING_ISR( x )\000"
 13887      5949454C 
 13887      445F4652 
 13887      4F4D5F49 
 13887      53522878 
 13888              	.LASF606:
 13889 8c14 5F5F7365 		.ascii	"__section(x) __attribute__((__section__(x)))\000"
 13889      6374696F 
 13889      6E287829 
 13889      205F5F61 
 13889      74747269 
 13890              	.LASF1226:
 13891 8c41 756C4269 		.ascii	"ulBitmap\000"
 13891      746D6170 
 13891      00
 13892              	.LASF47:
 13893 8c4a 5F5F494E 		.ascii	"__INT_LEAST16_TYPE__ short int\000"
 13893      545F4C45 
 13893      41535431 
 13893      365F5459 
 13893      50455F5F 
 13894              	.LASF857:
 13895 8c69 74726163 		.ascii	"traceINCREASE_TICK_COUNT(x) \000"
 13895      65494E43 
 13895      52454153 
 13895      455F5449 
 13895      434B5F43 
 13896              	.LASF1115:
 13897 8c86 78546173 		.ascii	"xTaskToDelete\000"
 13897      6B546F44 
 13897      656C6574 
 13897      6500
 13898              	.LASF748:
 13899 8c94 636F6E66 		.ascii	"configCPU_CLOCK_HZ ( ( unsigned long )120000000ul )"
 13899      69674350 
 13899      555F434C 
 13899      4F434B5F 
 13899      485A2028 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 394


 13900 8cc7 00       		.ascii	"\000"
 13901              	.LASF144:
 13902 8cc8 5F5F4442 		.ascii	"__DBL_MAX__ ((double)1.7976931348623157e+308L)\000"
 13902      4C5F4D41 
 13902      585F5F20 
 13902      2828646F 
 13902      75626C65 
 13903              	.LASF389:
 13904 8cf7 5F505452 		.ascii	"_PTR void *\000"
 13904      20766F69 
 13904      64202A00 
 13905              	.LASF216:
 13906 8d03 5F5F4C4C 		.ascii	"__LLFRACT_FBIT__ 63\000"
 13906      46524143 
 13906      545F4642 
 13906      49545F5F 
 13906      20363300 
 13907              	.LASF431:
 13908 8d17 5F5F7763 		.ascii	"__wchar_t__ \000"
 13908      6861725F 
 13908      745F5F20 
 13908      00
 13909              	.LASF338:
 13910 8d24 5F5F7468 		.ascii	"__thumb__ 1\000"
 13910      756D625F 
 13910      5F203100 
 13911              	.LASF986:
 13912 8d30 7461736B 		.ascii	"taskSCHEDULER_NOT_STARTED ( ( BaseT_t ) 1 )\000"
 13912      53434845 
 13912      44554C45 
 13912      525F4E4F 
 13912      545F5354 
 13913              	.LASF712:
 13914 8d5c 494E545F 		.ascii	"INT_FAST16_MAX __INT_FAST16_MAX__\000"
 13914      46415354 
 13914      31365F4D 
 13914      4158205F 
 13914      5F494E54 
 13915              	.LASF341:
 13916 8d7e 5F5F4152 		.ascii	"__ARMEL__ 1\000"
 13916      4D454C5F 
 13916      5F203100 
 13917              	.LASF482:
 13918 8d8a 5F5F6C6F 		.ascii	"__lock_init_recursive(lock) (_CAST_VOID 0)\000"
 13918      636B5F69 
 13918      6E69745F 
 13918      72656375 
 13918      72736976 
 13919              	.LASF630:
 13920 8db5 5F5F666F 		.ascii	"__format_arg(fmtarg) __attribute__((__format_arg__ "
 13920      726D6174 
 13920      5F617267 
 13920      28666D74 
 13920      61726729 
 13921 8de8 28666D74 		.ascii	"(fmtarg)))\000"
 13921      61726729 
 13921      292900
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 395


 13922              	.LASF581:
 13923 8df3 5F5F636F 		.ascii	"__compiler_membar() __asm __volatile(\" \" : : : \""
 13923      6D70696C 
 13923      65725F6D 
 13923      656D6261 
 13923      72282920 
 13924 8e23 6D656D6F 		.ascii	"memory\")\000"
 13924      72792229 
 13924      00
 13925              	.LASF932:
 13926 8e2c 636F6E66 		.ascii	"configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTI"
 13926      6967494E 
 13926      434C5544 
 13926      455F4150 
 13926      504C4943 
 13927 8e5f 4F4E5320 		.ascii	"ONS 0\000"
 13927      3000
 13928              	.LASF268:
 13929 8e65 5F5F4851 		.ascii	"__HQ_FBIT__ 15\000"
 13929      5F464249 
 13929      545F5F20 
 13929      313500
 13930              	.LASF1179:
 13931 8e74 70727649 		.ascii	"prvInitialiseTaskLists\000"
 13931      6E697469 
 13931      616C6973 
 13931      65546173 
 13931      6B4C6973 
 13932              	.LASF968:
 13933 8e8b 6C697374 		.ascii	"listLIST_IS_EMPTY(pxList) ( ( BaseT_t ) ( ( pxList "
 13933      4C495354 
 13933      5F49535F 
 13933      454D5054 
 13933      59287078 
 13934 8ebe 292D3E75 		.ascii	")->uxNumberOfItems == ( UBaseT_t ) 0 ) )\000"
 13934      784E756D 
 13934      6265724F 
 13934      66497465 
 13934      6D73203D 
 13935              	.LASF907:
 13936 8ee7 74726163 		.ascii	"traceEVENT_GROUP_SYNC_BLOCK(xEventGroup,uxBitsToSet"
 13936      65455645 
 13936      4E545F47 
 13936      524F5550 
 13936      5F53594E 
 13937 8f1a 2C757842 		.ascii	",uxBitsToWaitFor) \000"
 13937      69747354 
 13937      6F576169 
 13937      74466F72 
 13937      292000
 13938              	.LASF304:
 13939 8f2d 5F5F474E 		.ascii	"__GNUC_GNU_INLINE__ 1\000"
 13939      55435F47 
 13939      4E555F49 
 13939      4E4C494E 
 13939      455F5F20 
 13940              	.LASF544:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 396


 13941 8f43 5F524545 		.ascii	"_REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_"
 13941      4E545F53 
 13941      49474E41 
 13941      4C5F4255 
 13941      46287074 
 13942 8f76 62756629 		.ascii	"buf)\000"
 13942      00
 13943              	.LASF1205:
 13944 8f7b 7844656C 		.ascii	"xDelayedTaskList1\000"
 13944      61796564 
 13944      5461736B 
 13944      4C697374 
 13944      3100
 13945              	.LASF1206:
 13946 8f8d 7844656C 		.ascii	"xDelayedTaskList2\000"
 13946      61796564 
 13946      5461736B 
 13946      4C697374 
 13946      3200
 13947              	.LASF187:
 13948 8f9f 5F5F5346 		.ascii	"__SFRACT_IBIT__ 0\000"
 13948      52414354 
 13948      5F494249 
 13948      545F5F20 
 13948      3000
 13949              	.LASF599:
 13950 8fb1 5F5F766F 		.ascii	"__volatile volatile\000"
 13950      6C617469 
 13950      6C652076 
 13950      6F6C6174 
 13950      696C6500 
 13951              	.LASF149:
 13952 8fc5 5F5F4442 		.ascii	"__DBL_HAS_INFINITY__ 1\000"
 13952      4C5F4841 
 13952      535F494E 
 13952      46494E49 
 13952      54595F5F 
 13953              	.LASF670:
 13954 8fdc 5F5F696E 		.ascii	"__int_least8_t_defined 1\000"
 13954      745F6C65 
 13954      61737438 
 13954      5F745F64 
 13954      6566696E 
 13955              	.LASF881:
 13956 8ff5 74726163 		.ascii	"traceQUEUE_RECEIVE_FAILED(pxQueue) \000"
 13956      65515545 
 13956      55455F52 
 13956      45434549 
 13956      56455F46 
 13957              	.LASF508:
 13958 9019 5F52414E 		.ascii	"_RAND48_ADD (0x000b)\000"
 13958      4434385F 
 13958      41444420 
 13958      28307830 
 13958      30306229 
 13959              	.LASF656:
 13960 902e 45584954 		.ascii	"EXIT_FAILURE 1\000"
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 397


 13960      5F464149 
 13960      4C555245 
 13960      203100
 13961              	.LASF330:
 13962 903d 5F5F4152 		.ascii	"__ARM_FEATURE_LDREX 7\000"
 13962      4D5F4645 
 13962      41545552 
 13962      455F4C44 
 13962      52455820 
 13963              	.LASF664:
 13964 9053 5F535444 		.ascii	"_STDINT_H \000"
 13964      494E545F 
 13964      482000
 13965              	.LASF1083:
 13966 905e 756C5061 		.ascii	"ulParameters\000"
 13966      72616D65 
 13966      74657273 
 13966      00
 13967              	.LASF794:
 13968 906b 65727251 		.ascii	"errQUEUE_BLOCKED ( -4 )\000"
 13968      55455545 
 13968      5F424C4F 
 13968      434B4544 
 13968      2028202D 
 13969              	.LASF220:
 13970 9083 5F5F4C4C 		.ascii	"__LLFRACT_EPSILON__ 0x1P-63LLR\000"
 13970      46524143 
 13970      545F4550 
 13970      53494C4F 
 13970      4E5F5F20 
 13971              	.LASF790:
 13972 90a2 70644641 		.ascii	"pdFAIL ( pdFALSE )\000"
 13972      494C2028 
 13972      20706446 
 13972      414C5345 
 13972      202900
 13973              	.LASF955:
 13974 90b5 784C6973 		.ascii	"xListItem ListItem_t\000"
 13974      74497465 
 13974      6D204C69 
 13974      73744974 
 13974      656D5F74 
 13975              	.LASF189:
 13976 90ca 5F5F5346 		.ascii	"__SFRACT_MAX__ 0X7FP-7HR\000"
 13976      52414354 
 13976      5F4D4158 
 13976      5F5F2030 
 13976      58374650 
 13977              	.LASF916:
 13978 90e3 74726163 		.ascii	"tracePEND_FUNC_CALL(xFunctionToPend,pvParameter1,ul"
 13978      6550454E 
 13978      445F4655 
 13978      4E435F43 
 13978      414C4C28 
 13979 9116 50617261 		.ascii	"Parameter2,ret) \000"
 13979      6D657465 
 13979      72322C72 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 398


 13979      65742920 
 13979      00
 13980              	.LASF483:
 13981 9127 5F5F6C6F 		.ascii	"__lock_close(lock) (_CAST_VOID 0)\000"
 13981      636B5F63 
 13981      6C6F7365 
 13981      286C6F63 
 13981      6B292028 
 13982              	.LASF594:
 13983 9149 5F5F434F 		.ascii	"__CONCAT(x,y) __CONCAT1(x,y)\000"
 13983      4E434154 
 13983      28782C79 
 13983      29205F5F 
 13983      434F4E43 
 13984              	.LASF782:
 13985 9166 636F6E66 		.ascii	"configKERNEL_INTERRUPT_PRIORITY ( 31 << (8 - config"
 13985      69674B45 
 13985      524E454C 
 13985      5F494E54 
 13985      45525255 
 13986 9199 5052494F 		.ascii	"PRIO_BITS) )\000"
 13986      5F424954 
 13986      53292029 
 13986      00
 13987              	.LASF95:
 13988 91a6 5F5F494E 		.ascii	"__INT16_C(c) c\000"
 13988      5431365F 
 13988      43286329 
 13988      206300
 13989              	.LASF1003:
 13990 91b5 746D7243 		.ascii	"tmrCOMMAND_CHANGE_PERIOD_FROM_ISR ( ( BaseT_t ) 9 )"
 13990      4F4D4D41 
 13990      4E445F43 
 13990      48414E47 
 13990      455F5045 
 13991 91e8 00       		.ascii	"\000"
 13992              	.LASF947:
 13993 91e9 78546173 		.ascii	"xTaskParameters TaskParameters_t\000"
 13993      6B506172 
 13993      616D6574 
 13993      65727320 
 13993      5461736B 
 13994              	.LASF390:
 13995 920a 5F414E44 		.ascii	"_AND ,\000"
 13995      202C00
 13996              	.LASF827:
 13997 9211 706F7274 		.ascii	"portASSERT_IF_INTERRUPT_PRIORITY_INVALID() vPortVal"
 13997      41535345 
 13997      52545F49 
 13997      465F494E 
 13997      54455252 
 13998 9244 69646174 		.ascii	"idateInterruptPriority()\000"
 13998      65496E74 
 13998      65727275 
 13998      70745072 
 13998      696F7269 
 13999              	.LASF632:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 399


 14000 925d 5F5F7374 		.ascii	"__strftimelike(fmtarg,firstvararg) __attribute__((_"
 14000      72667469 
 14000      6D656C69 
 14000      6B652866 
 14000      6D746172 
 14001 9290 5F666F72 		.ascii	"_format__ (__strftime__, fmtarg, firstvararg)))\000"
 14001      6D61745F 
 14001      5F20285F 
 14001      5F737472 
 14001      6674696D 
 14002              	.LASF499:
 14003 92c0 5F415445 		.ascii	"_ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL},"
 14003      5849545F 
 14003      494E4954 
 14003      207B5F4E 
 14003      554C4C2C 
 14004 92f3 20302C20 		.ascii	" 0, 0}}\000"
 14004      307D7D00 
 14005              	.LASF779:
 14006 92fb 636F6E66 		.ascii	"configNET_MASK2 255\000"
 14006      69674E45 
 14006      545F4D41 
 14006      534B3220 
 14006      32353500 
 14007              	.LASF646:
 14008 930f 5F5F4445 		.ascii	"__DEQUALIFY(type,var) ((type)(__uintptr_t)(const vo"
 14008      5155414C 
 14008      49465928 
 14008      74797065 
 14008      2C766172 
 14009 9342 6C617469 		.ascii	"latile void *)(var))\000"
 14009      6C652076 
 14009      6F696420 
 14009      2A292876 
 14009      61722929 
 14010              	.LASF753:
 14011 9357 636F6E66 		.ascii	"configUSE_TRACE_FACILITY 1\000"
 14011      69675553 
 14011      455F5452 
 14011      4143455F 
 14011      46414349 
 14012              	.LASF10:
 14013 9372 5F5F4154 		.ascii	"__ATOMIC_ACQ_REL 4\000"
 14013      4F4D4943 
 14013      5F414351 
 14013      5F52454C 
 14013      203400
 14014              	.LASF5:
 14015 9385 5F5F5645 		.ascii	"__VERSION__ \"4.9.3 20150303 (release) [ARM/embedde"
 14015      5253494F 
 14015      4E5F5F20 
 14015      22342E39 
 14015      2E332032 
 14016 93b7 642D345F 		.ascii	"d-4_9-branch revision 221220]\"\000"
 14016      392D6272 
 14016      616E6368 
 14016      20726576 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 400


 14016      6973696F 
 14017              	.LASF40:
 14018 93d6 5F5F494E 		.ascii	"__INT32_TYPE__ long int\000"
 14018      5433325F 
 14018      54595045 
 14018      5F5F206C 
 14018      6F6E6720 
 14019              	.LASF604:
 14020 93ee 5F5F7061 		.ascii	"__packed __attribute__((__packed__))\000"
 14020      636B6564 
 14020      205F5F61 
 14020      74747269 
 14020      62757465 
 14021              	.LASF439:
 14022 9413 5F574348 		.ascii	"_WCHAR_T_DEFINED_ \000"
 14022      41525F54 
 14022      5F444546 
 14022      494E4544 
 14022      5F2000
 14023              	.LASF1181:
 14024 9426 784C6973 		.ascii	"xListIsEmpty\000"
 14024      74497345 
 14024      6D707479 
 14024      00
 14025              	.LASF360:
 14026 9433 5F57414E 		.ascii	"_WANT_IO_LONG_LONG 1\000"
 14026      545F494F 
 14026      5F4C4F4E 
 14026      475F4C4F 
 14026      4E472031 
 14027              	.LASF1224:
 14028 9448 443A5C77 		.ascii	"D:\\work\\Embedded\\aoaa\000"
 14028      6F726B5C 
 14028      456D6265 
 14028      64646564 
 14028      5C616F61 
 14029              	.LASF478:
 14030 945e 5F5F5359 		.ascii	"__SYS_LOCK_H__ \000"
 14030      535F4C4F 
 14030      434B5F48 
 14030      5F5F2000 
 14031              	.LASF768:
 14032 946e 494E434C 		.ascii	"INCLUDE_vTaskCleanUpResources 0\000"
 14032      5544455F 
 14032      76546173 
 14032      6B436C65 
 14032      616E5570 
 14033              	.LASF407:
 14034 948e 5F454C49 		.ascii	"_ELIDABLE_INLINE extern __inline__ _ATTRIBUTE ((__a"
 14034      4441424C 
 14034      455F494E 
 14034      4C494E45 
 14034      20657874 
 14035 94c1 6C776179 		.ascii	"lways_inline__))\000"
 14035      735F696E 
 14035      6C696E65 
 14035      5F5F2929 
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 401


 14035      00
 14036              	.LASF883:
 14037 94d2 74726163 		.ascii	"traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) \000"
 14037      65515545 
 14037      55455F53 
 14037      454E445F 
 14037      46524F4D 
 14038              	.LASF510:
 14039 94fc 5F524545 		.ascii	"_REENT_ASCTIME_SIZE 26\000"
 14039      4E545F41 
 14039      53435449 
 14039      4D455F53 
 14039      495A4520 
 14040              	.LASF114:
 14041 9513 5F5F5549 		.ascii	"__UINT_FAST32_MAX__ 4294967295U\000"
 14041      4E545F46 
 14041      41535433 
 14041      325F4D41 
 14041      585F5F20 
 14042              	.LASF100:
 14043 9533 5F5F5549 		.ascii	"__UINT_LEAST8_MAX__ 255\000"
 14043      4E545F4C 
 14043      45415354 
 14043      385F4D41 
 14043      585F5F20 
 14044              	.LASF1197:
 14045 954b 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 14045      6B476574 
 14045      43757272 
 14045      656E7454 
 14045      61736B48 
 14046              	.LASF727:
 14047 9565 50545244 		.ascii	"PTRDIFF_MIN (-PTRDIFF_MAX - 1)\000"
 14047      4946465F 
 14047      4D494E20 
 14047      282D5054 
 14047      52444946 
 14048              	.LASF835:
 14049 9584 494E434C 		.ascii	"INCLUDE_xTaskGetIdleTaskHandle 0\000"
 14049      5544455F 
 14049      78546173 
 14049      6B476574 
 14049      49646C65 
 14050              	.LASF1055:
 14051 95a5 78497465 		.ascii	"xItemValue\000"
 14051      6D56616C 
 14051      756500
 14052              	.LASF137:
 14053 95b0 5F5F4442 		.ascii	"__DBL_MANT_DIG__ 53\000"
 14053      4C5F4D41 
 14053      4E545F44 
 14053      49475F5F 
 14053      20353300 
 14054              	.LASF1116:
 14055 95c4 70785443 		.ascii	"pxTCB\000"
 14055      4200
 14056              	.LASF212:
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 402


 14057 95ca 5F5F554C 		.ascii	"__ULFRACT_IBIT__ 0\000"
 14057      46524143 
 14057      545F4942 
 14057      49545F5F 
 14057      203000
 14058              	.LASF1099:
 14059 95dd 75785072 		.ascii	"uxPriority\000"
 14059      696F7269 
 14059      747900
 14060              	.LASF350:
 14061 95e8 5F5F4152 		.ascii	"__ARM_EABI__ 1\000"
 14061      4D5F4541 
 14061      42495F5F 
 14061      203100
 14062              	.LASF49:
 14063 95f7 5F5F494E 		.ascii	"__INT_LEAST64_TYPE__ long long int\000"
 14063      545F4C45 
 14063      41535436 
 14063      345F5459 
 14063      50455F5F 
 14064              	.LASF226:
 14065 961a 5F5F5341 		.ascii	"__SACCUM_FBIT__ 7\000"
 14065      4343554D 
 14065      5F464249 
 14065      545F5F20 
 14065      3700
 14066              	.LASF672:
 14067 962c 5F5F696E 		.ascii	"__int_least16_t_defined 1\000"
 14067      745F6C65 
 14067      61737431 
 14067      365F745F 
 14067      64656669 
 14068              	.LASF845:
 14069 9646 494E434C 		.ascii	"INCLUDE_xEventGroupSetBitFromISR 0\000"
 14069      5544455F 
 14069      78457665 
 14069      6E744772 
 14069      6F757053 
 14070              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 403


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:57     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:54     .bss.pxCurrentTCB:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:60     .bss.pxReadyTasksLists:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:63     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:66     .bss.xDelayedTaskList1:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:69     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:72     .bss.xDelayedTaskList2:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:75     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:78     .bss.pxDelayedTaskList:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:81     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:84     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:87     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:90     .bss.xPendingReadyList:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:93     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:96     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:99     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:102    .bss.uxTasksDeleted:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:105    .bss.uxTasksDeleted:00000000 uxTasksDeleted
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:108    .bss.xSuspendedTaskList:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:111    .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:114    .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:117    .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:120    .bss.xTickCount:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:123    .bss.xTickCount:00000000 xTickCount
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:126    .bss.uxTopReadyPriority:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:129    .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:132    .bss.xSchedulerRunning:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:135    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:138    .bss.uxPendedTicks:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:141    .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:144    .bss.xYieldPending:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:147    .bss.xYieldPending:00000000 xYieldPending
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:150    .bss.xNumOfOverflows:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:153    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:156    .bss.uxTaskNumber:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:159    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:162    .data.xNextTaskUnblockTime:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:165    .data.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:168    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:171    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:174    .text.xTaskGenericCreate:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:179    .text.xTaskGenericCreate:00000000 xTaskGenericCreate
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3812   .text.prvAllocateTCBAndStack:00000000 prvAllocateTCBAndStack
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3435   .text.prvInitialiseTCBVariables:00000000 prvInitialiseTCBVariables
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3551   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:400    .text.xTaskGenericCreate:00000150 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:410    .text.vTaskDelete:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:415    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4249   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:552    .text.vTaskDelete:000000c8 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:564    .text.vTaskDelayUntil:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:569    .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1732   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3732   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1771   .text.xTaskResumeAll:00000000 xTaskResumeAll
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 404


C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:725    .text.vTaskDelayUntil:000000d4 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:733    .text.vTaskDelay:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:738    .text.vTaskDelay:00000000 vTaskDelay
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:825    .text.vTaskDelay:00000074 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:833    .text.uxTaskPriorityGet:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:838    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:888    .text.uxTaskPriorityGet:00000030 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:893    .text.vTaskPrioritySet:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:898    .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1108   .text.vTaskPrioritySet:00000134 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1115   .text.vTaskSuspend:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1120   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2488   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1267   .text.vTaskSuspend:000000d4 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1278   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1282   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1366   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1372   .text.vTaskResume:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1377   .text.vTaskResume:00000000 vTaskResume
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1475   .text.vTaskResume:00000090 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1482   .text.xTaskResumeFromISR:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1487   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1599   .text.xTaskResumeFromISR:000000a8 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1608   .rodata:00000000 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1612   .text.vTaskStartScheduler:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1617   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1684   .text.vTaskStartScheduler:00000054 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3407   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1692   .text.vTaskEndScheduler:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1697   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1722   .text.vTaskEndScheduler:00000014 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1727   .text.vTaskSuspendAll:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1761   .text.vTaskSuspendAll:00000018 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1766   .text.xTaskResumeAll:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2235   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1933   .text.xTaskResumeAll:000000ec $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1945   .text.xTaskGetTickCount:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1950   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1985   .text.xTaskGetTickCount:00000020 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1990   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:1995   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2034   .text.xTaskGetTickCountFromISR:00000028 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2039   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2044   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2071   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2076   .text.uxTaskGetSystemState:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2081   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3896   .text.prvListTaskWithinSingleList:00000000 prvListTaskWithinSingleList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2220   .text.uxTaskGetSystemState:000000e0 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2230   .text.xTaskIncrementTick:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2468   .text.xTaskIncrementTick:00000154 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2483   .text.vTaskSwitchContext:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2601   .text.vTaskSwitchContext:0000008c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2610   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2615   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2703   .text.vTaskPlaceOnEventList:0000007c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2711   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 405


C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2716   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2822   .text.vTaskPlaceOnUnorderedEventList:00000098 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2831   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2836   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2947   .text.xTaskRemoveFromEventList:000000a0 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2957   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:2962   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3073   .text.xTaskRemoveFromUnorderedEventList:000000a0 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3082   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3087   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3131   .text.vTaskSetTimeOutState:0000002c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3137   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3142   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3259   .text.xTaskCheckForTimeOut:00000098 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3265   .text.vTaskMissedYield:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3270   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3297   .text.vTaskMissedYield:00000014 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3302   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3307   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3356   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3361   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3403   .text.prvIdleTask:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3638   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3431   .text.prvInitialiseTCBVariables:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3547   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3622   .text.prvInitialiseTaskLists:0000005c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3634   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4211   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3721   .text.prvCheckTasksWaitingTermination:00000068 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3728   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3799   .text.prvAddCurrentTaskToDelayedList:00000058 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3808   .text.prvAllocateTCBAndStack:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:3892   .text.prvListTaskWithinSingleList:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4089   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4085   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4146   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4151   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4202   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4207   .text.prvDeleteTCB:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4245   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4310   .text.prvResetNextTaskUnblockTime:00000040 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4316   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4321   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4355   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4360   .text.vTaskPriorityInherit:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4365   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4513   .text.vTaskPriorityInherit:000000e4 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4520   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4525   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4663   .text.xTaskPriorityDisinherit:000000d4 $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4669   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4674   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4717   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4722   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4727   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s:4766   .text.pvTaskIncrementMutexHeldCount:00000024 $d
                     .debug_frame:00000010 $d
ARM GAS  C:\Users\COSMIN~1.MAR\AppData\Local\Temp\ccSIIHGO.s 			page 406


                           .group:00000000 wm4.0.1834ce015d70b8127b1e5f7bc96e3d8e
                           .group:00000000 wm4.newlib.h.8.f2807fe490bc07755df529420a1a6ce0
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.84af8eb8cd468d25cc5f45f5eb13ec51
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.cdefs.h.47.fbe724f4232069283dea9c3aea4135c7
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.54.cd3744e0b066087ec8fbb1bdc22d1043
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4._intsup.h.10.ca9f32a61b410c270a48d1161ca2c217
                           .group:00000000 wm4.stdint.h.22.f4a337c398d8b6d821a97202448bc0d0
                           .group:00000000 wm4.FreeRTOSConfig.h.68.2ab20dd79e2b20d1533c58a8a3e000e8
                           .group:00000000 wm4.projdefs.h.67.bdf04e6773dab3e08b198cc871e66066
                           .group:00000000 wm4.portmacro.h.68.2830a42e60cbcb2a6127da4328fb0946
                           .group:00000000 wm4.portable.h.325.c86556faa756d80c2369d5d98b7175f5
                           .group:00000000 wm4.mpu_wrappers.h.67.4bcfd12ce15e5313ce3efd77400f8168
                           .group:00000000 wm4.FreeRTOS.h.171.22a53ffdca3c4c1eea7d67a70b887d5e
                           .group:00000000 wm4.list.h.96.fb0e76e4166703a5d0cad365514a3370
                           .group:00000000 wm4.task.h.84.e110bc08aaffa67ce542955b890201b4
                           .group:00000000 wm4.timers.h.92.8426a48a1da7d8a0e1979755bcca140d
                           .group:00000000 wm4.StackMacros.h.67.a03f7ae5cecc8cf40dd18934a60cba95

UNDEFINED SYMBOLS
ulPortSetInterruptMask
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYield
uxListRemove
vPortValidateInterruptPriority
vPortClearInterruptMask
xPortStartScheduler
vPortEndScheduler
vApplicationTickHook
vListInsert
vListInitialiseItem
vListInitialise
pvPortMalloc
vPortFree
memset
